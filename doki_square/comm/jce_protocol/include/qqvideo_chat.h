// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_chat.jce'
// **********************************************************************

#ifndef __QQVIDEO_CHAT_H_
#define __QQVIDEO_CHAT_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"


namespace jce
{
    struct ChatSessionExtraInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatSessionExtraInfo";
        }
        static string MD5()
        {
            return "74a2614c2451a4df0e45d07792039225";
        }
        ChatSessionExtraInfo()
        :level(0),markUrl("")
        {
        }
        void resetDefautlt()
        {
            level = 0;
            markUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(action, 0);
            _os.write(level, 1);
            _os.write(markUrl, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(action, 0, false);
            _is.read(level, 1, false);
            _is.read(markUrl, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(action,"action");
            _ds.display(level,"level");
            _ds.display(markUrl,"markUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(action, true);
            _ds.displaySimple(level, true);
            _ds.displaySimple(markUrl, false);
            return _os;
        }
    public:
        jce::Action action;
        taf::Int32 level;
        std::string markUrl;
    };
    inline bool operator==(const ChatSessionExtraInfo&l, const ChatSessionExtraInfo&r)
    {
        return l.action == r.action && l.level == r.level && l.markUrl == r.markUrl;
    }
    inline bool operator!=(const ChatSessionExtraInfo&l, const ChatSessionExtraInfo&r)
    {
        return !(l == r);
    }

    struct ChatSessionInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatSessionInfo";
        }
        static string MD5()
        {
            return "a7a73b8b654407b4ad27b0f7a827e55c";
        }
        ChatSessionInfo()
        :sessionId(""),sessionType(0),headerUrl(""),sessionName(""),timestamp(0),muted(false),inBlackList(false),functionMask(0),parentId("")
        {
        }
        void resetDefautlt()
        {
            sessionId = "";
            sessionType = 0;
            headerUrl = "";
            sessionName = "";
            timestamp = 0;
            muted = false;
            inBlackList = false;
            functionMask = 0;
            parentId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionId, 0);
            _os.write(sessionType, 1);
            _os.write(headerUrl, 2);
            _os.write(sessionName, 3);
            _os.write(timestamp, 4);
            _os.write(muted, 5);
            _os.write(inBlackList, 6);
            _os.write(functionMask, 7);
            _os.write(extraInfo, 8);
            _os.write(parentId, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionId, 0, true);
            _is.read(sessionType, 1, true);
            _is.read(headerUrl, 2, false);
            _is.read(sessionName, 3, false);
            _is.read(timestamp, 4, false);
            _is.read(muted, 5, false);
            _is.read(inBlackList, 6, false);
            _is.read(functionMask, 7, false);
            _is.read(extraInfo, 8, false);
            _is.read(parentId, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionId,"sessionId");
            _ds.display(sessionType,"sessionType");
            _ds.display(headerUrl,"headerUrl");
            _ds.display(sessionName,"sessionName");
            _ds.display(timestamp,"timestamp");
            _ds.display(muted,"muted");
            _ds.display(inBlackList,"inBlackList");
            _ds.display(functionMask,"functionMask");
            _ds.display(extraInfo,"extraInfo");
            _ds.display(parentId,"parentId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionId, true);
            _ds.displaySimple(sessionType, true);
            _ds.displaySimple(headerUrl, true);
            _ds.displaySimple(sessionName, true);
            _ds.displaySimple(timestamp, true);
            _ds.displaySimple(muted, true);
            _ds.displaySimple(inBlackList, true);
            _ds.displaySimple(functionMask, true);
            _ds.displaySimple(extraInfo, true);
            _ds.displaySimple(parentId, false);
            return _os;
        }
    public:
        std::string sessionId;
        taf::Int32 sessionType;
        std::string headerUrl;
        std::string sessionName;
        taf::Int64 timestamp;
        taf::Bool muted;
        taf::Bool inBlackList;
        taf::Int32 functionMask;
        jce::ChatSessionExtraInfo extraInfo;
        std::string parentId;
    };
    inline bool operator==(const ChatSessionInfo&l, const ChatSessionInfo&r)
    {
        return l.sessionId == r.sessionId && l.sessionType == r.sessionType && l.headerUrl == r.headerUrl && l.sessionName == r.sessionName && l.timestamp == r.timestamp && l.muted == r.muted && l.inBlackList == r.inBlackList && l.functionMask == r.functionMask && l.extraInfo == r.extraInfo && l.parentId == r.parentId;
    }
    inline bool operator!=(const ChatSessionInfo&l, const ChatSessionInfo&r)
    {
        return !(l == r);
    }

    struct GetChatSessionInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetChatSessionInfoRequest";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        GetChatSessionInfoRequest()
        :sessionId(""),sessionType(0)
        {
        }
        void resetDefautlt()
        {
            sessionId = "";
            sessionType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionId, 0);
            _os.write(sessionType, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionId, 0, true);
            _is.read(sessionType, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionId,"sessionId");
            _ds.display(sessionType,"sessionType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionId, true);
            _ds.displaySimple(sessionType, false);
            return _os;
        }
    public:
        std::string sessionId;
        taf::Int32 sessionType;
    };
    inline bool operator==(const GetChatSessionInfoRequest&l, const GetChatSessionInfoRequest&r)
    {
        return l.sessionId == r.sessionId && l.sessionType == r.sessionType;
    }
    inline bool operator!=(const GetChatSessionInfoRequest&l, const GetChatSessionInfoRequest&r)
    {
        return !(l == r);
    }

    struct GetChatSessionInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetChatSessionInfoResponse";
        }
        static string MD5()
        {
            return "9d29334ac220abcc032aaf4f69453824";
        }
        GetChatSessionInfoResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(sessionInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(sessionInfo, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(sessionInfo,"sessionInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(sessionInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::ChatSessionInfo sessionInfo;
    };
    inline bool operator==(const GetChatSessionInfoResponse&l, const GetChatSessionInfoResponse&r)
    {
        return l.errCode == r.errCode && l.sessionInfo == r.sessionInfo;
    }
    inline bool operator!=(const GetChatSessionInfoResponse&l, const GetChatSessionInfoResponse&r)
    {
        return !(l == r);
    }

    struct ChatOperateItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatOperateItem";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        ChatOperateItem()
        :operateType(0),optValue(0)
        {
        }
        void resetDefautlt()
        {
            operateType = 0;
            optValue = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(operateType, 0);
            _os.write(optValue, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(operateType, 0, true);
            _is.read(optValue, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(operateType,"operateType");
            _ds.display(optValue,"optValue");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(operateType, true);
            _ds.displaySimple(optValue, false);
            return _os;
        }
    public:
        taf::Int32 operateType;
        taf::Int32 optValue;
    };
    inline bool operator==(const ChatOperateItem&l, const ChatOperateItem&r)
    {
        return l.operateType == r.operateType && l.optValue == r.optValue;
    }
    inline bool operator!=(const ChatOperateItem&l, const ChatOperateItem&r)
    {
        return !(l == r);
    }

    struct ChatUserInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatUserInfo";
        }
        static string MD5()
        {
            return "a3f9d8fe5d8c36da5b0af74fe4934770";
        }
        ChatUserInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(userOperates, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(userOperates, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(userOperates,"userOperates");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(userOperates, false);
            return _os;
        }
    public:
        vector<jce::ChatOperateItem> userOperates;
    };
    inline bool operator==(const ChatUserInfo&l, const ChatUserInfo&r)
    {
        return l.userOperates == r.userOperates;
    }
    inline bool operator!=(const ChatUserInfo&l, const ChatUserInfo&r)
    {
        return !(l == r);
    }

    struct GetChatSessionListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetChatSessionListRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetChatSessionListRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const GetChatSessionListRequest&l, const GetChatSessionListRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetChatSessionListRequest&l, const GetChatSessionListRequest&r)
    {
        return !(l == r);
    }

    struct GetChatSessionListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetChatSessionListResponse";
        }
        static string MD5()
        {
            return "87e301d5bf77735c2edf891b58970bc5";
        }
        GetChatSessionListResponse()
        :errCode(0),hasNext(false),pageContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasNext = false;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(sessionList, 1);
            _os.write(hasNext, 2);
            _os.write(pageContext, 3);
            _os.write(userInfo, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(sessionList, 1, true);
            _is.read(hasNext, 2, true);
            _is.read(pageContext, 3, true);
            _is.read(userInfo, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(sessionList,"sessionList");
            _ds.display(hasNext,"hasNext");
            _ds.display(pageContext,"pageContext");
            _ds.display(userInfo,"userInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(sessionList, true);
            _ds.displaySimple(hasNext, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(userInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::ChatSessionInfo> sessionList;
        taf::Bool hasNext;
        std::string pageContext;
        jce::ChatUserInfo userInfo;
    };
    inline bool operator==(const GetChatSessionListResponse&l, const GetChatSessionListResponse&r)
    {
        return l.errCode == r.errCode && l.sessionList == r.sessionList && l.hasNext == r.hasNext && l.pageContext == r.pageContext && l.userInfo == r.userInfo;
    }
    inline bool operator!=(const GetChatSessionListResponse&l, const GetChatSessionListResponse&r)
    {
        return !(l == r);
    }

    struct ChatTextMessage : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatTextMessage";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        ChatTextMessage()
        :textContent("")
        {
        }
        void resetDefautlt()
        {
            textContent = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(textContent, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(textContent, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(textContent,"textContent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(textContent, false);
            return _os;
        }
    public:
        std::string textContent;
    };
    inline bool operator==(const ChatTextMessage&l, const ChatTextMessage&r)
    {
        return l.textContent == r.textContent;
    }
    inline bool operator!=(const ChatTextMessage&l, const ChatTextMessage&r)
    {
        return !(l == r);
    }

    struct ChatImageMessage : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatImageMessage";
        }
        static string MD5()
        {
            return "a554a97e6c8a4c6844920e3cbf1a58ef";
        }
        ChatImageMessage()
        :picUrl(""),width(0),height(0),thumbUrl(""),desc(""),style(0)
        {
        }
        void resetDefautlt()
        {
            picUrl = "";
            width = 0;
            height = 0;
            thumbUrl = "";
            desc = "";
            style = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(picUrl, 0);
            _os.write(width, 1);
            _os.write(height, 2);
            _os.write(thumbUrl, 3);
            _os.write(desc, 4);
            _os.write(style, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(picUrl, 0, true);
            _is.read(width, 1, true);
            _is.read(height, 2, true);
            _is.read(thumbUrl, 3, false);
            _is.read(desc, 4, false);
            _is.read(style, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(picUrl,"picUrl");
            _ds.display(width,"width");
            _ds.display(height,"height");
            _ds.display(thumbUrl,"thumbUrl");
            _ds.display(desc,"desc");
            _ds.display(style,"style");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(picUrl, true);
            _ds.displaySimple(width, true);
            _ds.displaySimple(height, true);
            _ds.displaySimple(thumbUrl, true);
            _ds.displaySimple(desc, true);
            _ds.displaySimple(style, false);
            return _os;
        }
    public:
        std::string picUrl;
        taf::Int32 width;
        taf::Int32 height;
        std::string thumbUrl;
        std::string desc;
        taf::Int32 style;
    };
    inline bool operator==(const ChatImageMessage&l, const ChatImageMessage&r)
    {
        return l.picUrl == r.picUrl && l.width == r.width && l.height == r.height && l.thumbUrl == r.thumbUrl && l.desc == r.desc && l.style == r.style;
    }
    inline bool operator!=(const ChatImageMessage&l, const ChatImageMessage&r)
    {
        return !(l == r);
    }

    struct ChatVoiceMessage : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatVoiceMessage";
        }
        static string MD5()
        {
            return "d6ab41397a7b8e2e92520be0891d9f61";
        }
        ChatVoiceMessage()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(voiceData, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(voiceData, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(voiceData,"voiceData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(voiceData, false);
            return _os;
        }
    public:
        jce::ApolloVoiceData voiceData;
    };
    inline bool operator==(const ChatVoiceMessage&l, const ChatVoiceMessage&r)
    {
        return l.voiceData == r.voiceData;
    }
    inline bool operator!=(const ChatVoiceMessage&l, const ChatVoiceMessage&r)
    {
        return !(l == r);
    }

    struct ChatVideoMessage : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatVideoMessage";
        }
        static string MD5()
        {
            return "784467a3eec32af7f50b59458e87cc74";
        }
        ChatVideoMessage()
        :vid("")
        {
        }
        void resetDefautlt()
        {
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(imageData, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, true);
            _is.read(imageData, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(imageData,"imageData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(imageData, false);
            return _os;
        }
    public:
        std::string vid;
        jce::ChatImageMessage imageData;
    };
    inline bool operator==(const ChatVideoMessage&l, const ChatVideoMessage&r)
    {
        return l.vid == r.vid && l.imageData == r.imageData;
    }
    inline bool operator!=(const ChatVideoMessage&l, const ChatVideoMessage&r)
    {
        return !(l == r);
    }

    struct ChatNoticeMessage : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatNoticeMessage";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        ChatNoticeMessage()
        :text("")
        {
        }
        void resetDefautlt()
        {
            text = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(text, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(text, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(text,"text");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(text, false);
            return _os;
        }
    public:
        std::string text;
    };
    inline bool operator==(const ChatNoticeMessage&l, const ChatNoticeMessage&r)
    {
        return l.text == r.text;
    }
    inline bool operator!=(const ChatNoticeMessage&l, const ChatNoticeMessage&r)
    {
        return !(l == r);
    }

    struct ChatReplyItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatReplyItem";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        ChatReplyItem()
        :text(""),dataKey("")
        {
        }
        void resetDefautlt()
        {
            text = "";
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(text, 0);
            _os.write(dataKey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(text, 0, true);
            _is.read(dataKey, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(text,"text");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(text, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string text;
        std::string dataKey;
    };
    inline bool operator==(const ChatReplyItem&l, const ChatReplyItem&r)
    {
        return l.text == r.text && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const ChatReplyItem&l, const ChatReplyItem&r)
    {
        return !(l == r);
    }

    struct ChatReplyData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatReplyData";
        }
        static string MD5()
        {
            return "ca138da71335445ffd7ac6e686873177";
        }
        ChatReplyData()
        :context("")
        {
        }
        void resetDefautlt()
        {
            context = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(replyList, 0);
            _os.write(context, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(replyList, 0, true);
            _is.read(context, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(replyList,"replyList");
            _ds.display(context,"context");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(replyList, true);
            _ds.displaySimple(context, false);
            return _os;
        }
    public:
        vector<jce::ChatReplyItem> replyList;
        std::string context;
    };
    inline bool operator==(const ChatReplyData&l, const ChatReplyData&r)
    {
        return l.replyList == r.replyList && l.context == r.context;
    }
    inline bool operator!=(const ChatReplyData&l, const ChatReplyData&r)
    {
        return !(l == r);
    }

    struct ChatMessageData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatMessageData";
        }
        static string MD5()
        {
            return "8e05fd07e939bf243d72cbf2446dde66";
        }
        ChatMessageData()
        :msgId(""),type(0),timestamp(0),fromUserId(""),seqId("")
        {
        }
        void resetDefautlt()
        {
            msgId = "";
            type = 0;
            timestamp = 0;
            fromUserId = "";
            seqId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(msgId, 0);
            _os.write(type, 1);
            _os.write(data, 2);
            _os.write(timestamp, 3);
            _os.write(fromUserId, 4);
            _os.write(seqId, 5);
            _os.write(replyData, 6);
            _os.write(showList, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(msgId, 0, true);
            _is.read(type, 1, true);
            _is.read(data, 2, true);
            _is.read(timestamp, 3, true);
            _is.read(fromUserId, 4, true);
            _is.read(seqId, 5, false);
            _is.read(replyData, 6, false);
            _is.read(showList, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(msgId,"msgId");
            _ds.display(type,"type");
            _ds.display(data,"data");
            _ds.display(timestamp,"timestamp");
            _ds.display(fromUserId,"fromUserId");
            _ds.display(seqId,"seqId");
            _ds.display(replyData,"replyData");
            _ds.display(showList,"showList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(msgId, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(data, true);
            _ds.displaySimple(timestamp, true);
            _ds.displaySimple(fromUserId, true);
            _ds.displaySimple(seqId, true);
            _ds.displaySimple(replyData, true);
            _ds.displaySimple(showList, false);
            return _os;
        }
    public:
        std::string msgId;
        taf::Int32 type;
        vector<taf::Char> data;
        taf::Int64 timestamp;
        std::string fromUserId;
        std::string seqId;
        jce::ChatReplyData replyData;
        vector<taf::Int64> showList;
    };
    inline bool operator==(const ChatMessageData&l, const ChatMessageData&r)
    {
        return l.msgId == r.msgId && l.type == r.type && l.data == r.data && l.timestamp == r.timestamp && l.fromUserId == r.fromUserId && l.seqId == r.seqId && l.replyData == r.replyData && l.showList == r.showList;
    }
    inline bool operator!=(const ChatMessageData&l, const ChatMessageData&r)
    {
        return !(l == r);
    }

    struct ChatMessageRequestItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatMessageRequestItem";
        }
        static string MD5()
        {
            return "c67de77d69592c3b804a57444c866391";
        }
        ChatMessageRequestItem()
        :msgId(""),msgTime(0),pageLocation(0),pageContext("")
        {
        }
        void resetDefautlt()
        {
            msgId = "";
            msgTime = 0;
            pageLocation = 0;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionInfo, 0);
            _os.write(msgId, 1);
            _os.write(msgTime, 2);
            _os.write(pageLocation, 3);
            _os.write(pageContext, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionInfo, 0, true);
            _is.read(msgId, 1, true);
            _is.read(msgTime, 2, true);
            _is.read(pageLocation, 3, true);
            _is.read(pageContext, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionInfo,"sessionInfo");
            _ds.display(msgId,"msgId");
            _ds.display(msgTime,"msgTime");
            _ds.display(pageLocation,"pageLocation");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionInfo, true);
            _ds.displaySimple(msgId, true);
            _ds.displaySimple(msgTime, true);
            _ds.displaySimple(pageLocation, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        jce::ChatSessionInfo sessionInfo;
        std::string msgId;
        taf::Int64 msgTime;
        taf::Int32 pageLocation;
        std::string pageContext;
    };
    inline bool operator==(const ChatMessageRequestItem&l, const ChatMessageRequestItem&r)
    {
        return l.sessionInfo == r.sessionInfo && l.msgId == r.msgId && l.msgTime == r.msgTime && l.pageLocation == r.pageLocation && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const ChatMessageRequestItem&l, const ChatMessageRequestItem&r)
    {
        return !(l == r);
    }

    struct ChatMessageResponseItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatMessageResponseItem";
        }
        static string MD5()
        {
            return "d321fa2a4b88021c31c3be439a14d892";
        }
        ChatMessageResponseItem()
        :hasNext(true),pageContext("")
        {
        }
        void resetDefautlt()
        {
            hasNext = true;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionInfo, 0);
            _os.write(msgInfos, 1);
            _os.write(hasNext, 2);
            _os.write(pageContext, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionInfo, 0, true);
            _is.read(msgInfos, 1, true);
            _is.read(hasNext, 2, true);
            _is.read(pageContext, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionInfo,"sessionInfo");
            _ds.display(msgInfos,"msgInfos");
            _ds.display(hasNext,"hasNext");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionInfo, true);
            _ds.displaySimple(msgInfos, true);
            _ds.displaySimple(hasNext, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        jce::ChatSessionInfo sessionInfo;
        vector<jce::ChatMessageData> msgInfos;
        taf::Bool hasNext;
        std::string pageContext;
    };
    inline bool operator==(const ChatMessageResponseItem&l, const ChatMessageResponseItem&r)
    {
        return l.sessionInfo == r.sessionInfo && l.msgInfos == r.msgInfos && l.hasNext == r.hasNext && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const ChatMessageResponseItem&l, const ChatMessageResponseItem&r)
    {
        return !(l == r);
    }

    struct GetChatMessageRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetChatMessageRequest";
        }
        static string MD5()
        {
            return "3f325c10e88daa11b440ebfdea228369";
        }
        GetChatMessageRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(requestItemList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(requestItemList, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(requestItemList,"requestItemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(requestItemList, false);
            return _os;
        }
    public:
        vector<jce::ChatMessageRequestItem> requestItemList;
    };
    inline bool operator==(const GetChatMessageRequest&l, const GetChatMessageRequest&r)
    {
        return l.requestItemList == r.requestItemList;
    }
    inline bool operator!=(const GetChatMessageRequest&l, const GetChatMessageRequest&r)
    {
        return !(l == r);
    }

    struct GetChatMessageResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetChatMessageResponse";
        }
        static string MD5()
        {
            return "0d468d5a9a47e5327d80e98f51c3da52";
        }
        GetChatMessageResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(responseItemList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(responseItemList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(responseItemList,"responseItemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(responseItemList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::ChatMessageResponseItem> responseItemList;
    };
    inline bool operator==(const GetChatMessageResponse&l, const GetChatMessageResponse&r)
    {
        return l.errCode == r.errCode && l.responseItemList == r.responseItemList;
    }
    inline bool operator!=(const GetChatMessageResponse&l, const GetChatMessageResponse&r)
    {
        return !(l == r);
    }

    struct SendChatMessageRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SendChatMessageRequest";
        }
        static string MD5()
        {
            return "329e74c7b516a111372daac921300b7e";
        }
        SendChatMessageRequest()
        :seqId("")
        {
        }
        void resetDefautlt()
        {
            seqId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionInfo, 0);
            _os.write(msgData, 1);
            _os.write(seqId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionInfo, 0, true);
            _is.read(msgData, 1, true);
            _is.read(seqId, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionInfo,"sessionInfo");
            _ds.display(msgData,"msgData");
            _ds.display(seqId,"seqId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionInfo, true);
            _ds.displaySimple(msgData, true);
            _ds.displaySimple(seqId, false);
            return _os;
        }
    public:
        jce::ChatSessionInfo sessionInfo;
        jce::ChatMessageData msgData;
        std::string seqId;
    };
    inline bool operator==(const SendChatMessageRequest&l, const SendChatMessageRequest&r)
    {
        return l.sessionInfo == r.sessionInfo && l.msgData == r.msgData && l.seqId == r.seqId;
    }
    inline bool operator!=(const SendChatMessageRequest&l, const SendChatMessageRequest&r)
    {
        return !(l == r);
    }

    struct SendChatMessageResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SendChatMessageResponse";
        }
        static string MD5()
        {
            return "813f7cf8041cfa050eef80e3a572e674";
        }
        SendChatMessageResponse()
        :errCode(0),msgId(""),msgTime(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            msgId = "";
            msgTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(msgId, 1);
            _os.write(msgTime, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(msgId, 1, true);
            _is.read(msgTime, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(msgId,"msgId");
            _ds.display(msgTime,"msgTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(msgId, true);
            _ds.displaySimple(msgTime, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string msgId;
        taf::Int64 msgTime;
    };
    inline bool operator==(const SendChatMessageResponse&l, const SendChatMessageResponse&r)
    {
        return l.errCode == r.errCode && l.msgId == r.msgId && l.msgTime == r.msgTime;
    }
    inline bool operator!=(const SendChatMessageResponse&l, const SendChatMessageResponse&r)
    {
        return !(l == r);
    }

    struct DeleteChatSessionRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DeleteChatSessionRequest";
        }
        static string MD5()
        {
            return "e69ad5e8b10c4e81bc2b59a1a5fb0a94";
        }
        DeleteChatSessionRequest()
        :sessionId(""),sessionType(0),msgId(""),reqType(0)
        {
        }
        void resetDefautlt()
        {
            sessionId = "";
            sessionType = 0;
            msgId = "";
            reqType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionId, 0);
            _os.write(sessionType, 1);
            _os.write(msgId, 2);
            _os.write(reqType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionId, 0, true);
            _is.read(sessionType, 1, true);
            _is.read(msgId, 2, true);
            _is.read(reqType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionId,"sessionId");
            _ds.display(sessionType,"sessionType");
            _ds.display(msgId,"msgId");
            _ds.display(reqType,"reqType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionId, true);
            _ds.displaySimple(sessionType, true);
            _ds.displaySimple(msgId, true);
            _ds.displaySimple(reqType, false);
            return _os;
        }
    public:
        std::string sessionId;
        taf::Int32 sessionType;
        std::string msgId;
        taf::Int32 reqType;
    };
    inline bool operator==(const DeleteChatSessionRequest&l, const DeleteChatSessionRequest&r)
    {
        return l.sessionId == r.sessionId && l.sessionType == r.sessionType && l.msgId == r.msgId && l.reqType == r.reqType;
    }
    inline bool operator!=(const DeleteChatSessionRequest&l, const DeleteChatSessionRequest&r)
    {
        return !(l == r);
    }

    struct DeleteChatSessionResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DeleteChatSessionResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        DeleteChatSessionResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const DeleteChatSessionResponse&l, const DeleteChatSessionResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const DeleteChatSessionResponse&l, const DeleteChatSessionResponse&r)
    {
        return !(l == r);
    }

    struct ChatSessionOperateRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatSessionOperateRequest";
        }
        static string MD5()
        {
            return "e7acff671d288503257fbc1e4535b87d";
        }
        ChatSessionOperateRequest()
        :operateType(0),optValue(0)
        {
        }
        void resetDefautlt()
        {
            operateType = 0;
            optValue = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionInfo, 0);
            _os.write(operateType, 1);
            _os.write(optValue, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionInfo, 0, true);
            _is.read(operateType, 1, true);
            _is.read(optValue, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionInfo,"sessionInfo");
            _ds.display(operateType,"operateType");
            _ds.display(optValue,"optValue");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionInfo, true);
            _ds.displaySimple(operateType, true);
            _ds.displaySimple(optValue, false);
            return _os;
        }
    public:
        jce::ChatSessionInfo sessionInfo;
        taf::Int32 operateType;
        taf::Int32 optValue;
    };
    inline bool operator==(const ChatSessionOperateRequest&l, const ChatSessionOperateRequest&r)
    {
        return l.sessionInfo == r.sessionInfo && l.operateType == r.operateType && l.optValue == r.optValue;
    }
    inline bool operator!=(const ChatSessionOperateRequest&l, const ChatSessionOperateRequest&r)
    {
        return !(l == r);
    }

    struct ChatSessionOperateResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatSessionOperateResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        ChatSessionOperateResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const ChatSessionOperateResponse&l, const ChatSessionOperateResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const ChatSessionOperateResponse&l, const ChatSessionOperateResponse&r)
    {
        return !(l == r);
    }

    struct GetBlackChatSessionListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBlackChatSessionListRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetBlackChatSessionListRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const GetBlackChatSessionListRequest&l, const GetBlackChatSessionListRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetBlackChatSessionListRequest&l, const GetBlackChatSessionListRequest&r)
    {
        return !(l == r);
    }

    struct GetBlackChatSessionListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBlackChatSessionListResponse";
        }
        static string MD5()
        {
            return "1e95caff4464af5b1f1b87965b661da5";
        }
        GetBlackChatSessionListResponse()
        :errCode(0),hasNext(false),pageContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasNext = false;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(sessionList, 1);
            _os.write(hasNext, 2);
            _os.write(pageContext, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(sessionList, 1, false);
            _is.read(hasNext, 2, false);
            _is.read(pageContext, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(sessionList,"sessionList");
            _ds.display(hasNext,"hasNext");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(sessionList, true);
            _ds.displaySimple(hasNext, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::ChatSessionInfo> sessionList;
        taf::Bool hasNext;
        std::string pageContext;
    };
    inline bool operator==(const GetBlackChatSessionListResponse&l, const GetBlackChatSessionListResponse&r)
    {
        return l.errCode == r.errCode && l.sessionList == r.sessionList && l.hasNext == r.hasNext && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetBlackChatSessionListResponse&l, const GetBlackChatSessionListResponse&r)
    {
        return !(l == r);
    }

    struct ChatUserOperateRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatUserOperateRequest";
        }
        static string MD5()
        {
            return "ba5e8eee9a396f1d4e741eaebcc9983c";
        }
        ChatUserOperateRequest()
        :vuid("")
        {
        }
        void resetDefautlt()
        {
            vuid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vuid, 0);
            _os.write(operates, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vuid, 0, true);
            _is.read(operates, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vuid,"vuid");
            _ds.display(operates,"operates");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vuid, true);
            _ds.displaySimple(operates, false);
            return _os;
        }
    public:
        std::string vuid;
        vector<jce::ChatOperateItem> operates;
    };
    inline bool operator==(const ChatUserOperateRequest&l, const ChatUserOperateRequest&r)
    {
        return l.vuid == r.vuid && l.operates == r.operates;
    }
    inline bool operator!=(const ChatUserOperateRequest&l, const ChatUserOperateRequest&r)
    {
        return !(l == r);
    }

    struct ChatUserOperateResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChatUserOperateResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        ChatUserOperateResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const ChatUserOperateResponse&l, const ChatUserOperateResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const ChatUserOperateResponse&l, const ChatUserOperateResponse&r)
    {
        return !(l == r);
    }


}

#define jce_ChatSessionExtraInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.action,b.action);jce_copy_struct(a.level,b.level);jce_copy_struct(a.markUrl,b.markUrl);

#define jce_ChatSessionInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionId,b.sessionId);jce_copy_struct(a.sessionType,b.sessionType);jce_copy_struct(a.headerUrl,b.headerUrl);jce_copy_struct(a.sessionName,b.sessionName);jce_copy_struct(a.timestamp,b.timestamp);jce_copy_struct(a.muted,b.muted);jce_copy_struct(a.inBlackList,b.inBlackList);jce_copy_struct(a.functionMask,b.functionMask);jce_copy_struct(a.extraInfo,b.extraInfo);jce_copy_struct(a.parentId,b.parentId);

#define jce_GetChatSessionInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionId,b.sessionId);jce_copy_struct(a.sessionType,b.sessionType);

#define jce_GetChatSessionInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.sessionInfo,b.sessionInfo);

#define jce_ChatOperateItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.operateType,b.operateType);jce_copy_struct(a.optValue,b.optValue);

#define jce_ChatUserInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.userOperates,b.userOperates);

#define jce_GetChatSessionListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_GetChatSessionListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.sessionList,b.sessionList);jce_copy_struct(a.hasNext,b.hasNext);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.userInfo,b.userInfo);

#define jce_ChatTextMessage_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.textContent,b.textContent);

#define jce_ChatImageMessage_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.picUrl,b.picUrl);jce_copy_struct(a.width,b.width);jce_copy_struct(a.height,b.height);jce_copy_struct(a.thumbUrl,b.thumbUrl);jce_copy_struct(a.desc,b.desc);jce_copy_struct(a.style,b.style);

#define jce_ChatVoiceMessage_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.voiceData,b.voiceData);

#define jce_ChatVideoMessage_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.imageData,b.imageData);

#define jce_ChatNoticeMessage_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.text,b.text);

#define jce_ChatReplyItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.text,b.text);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_ChatReplyData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.replyList,b.replyList);jce_copy_struct(a.context,b.context);

#define jce_ChatMessageData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.msgId,b.msgId);jce_copy_struct(a.type,b.type);jce_copy_struct(a.data,b.data);jce_copy_struct(a.timestamp,b.timestamp);jce_copy_struct(a.fromUserId,b.fromUserId);jce_copy_struct(a.seqId,b.seqId);jce_copy_struct(a.replyData,b.replyData);jce_copy_struct(a.showList,b.showList);

#define jce_ChatMessageRequestItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionInfo,b.sessionInfo);jce_copy_struct(a.msgId,b.msgId);jce_copy_struct(a.msgTime,b.msgTime);jce_copy_struct(a.pageLocation,b.pageLocation);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_ChatMessageResponseItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionInfo,b.sessionInfo);jce_copy_struct(a.msgInfos,b.msgInfos);jce_copy_struct(a.hasNext,b.hasNext);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_GetChatMessageRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.requestItemList,b.requestItemList);

#define jce_GetChatMessageResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.responseItemList,b.responseItemList);

#define jce_SendChatMessageRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionInfo,b.sessionInfo);jce_copy_struct(a.msgData,b.msgData);jce_copy_struct(a.seqId,b.seqId);

#define jce_SendChatMessageResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.msgId,b.msgId);jce_copy_struct(a.msgTime,b.msgTime);

#define jce_DeleteChatSessionRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionId,b.sessionId);jce_copy_struct(a.sessionType,b.sessionType);jce_copy_struct(a.msgId,b.msgId);jce_copy_struct(a.reqType,b.reqType);

#define jce_DeleteChatSessionResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_ChatSessionOperateRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionInfo,b.sessionInfo);jce_copy_struct(a.operateType,b.operateType);jce_copy_struct(a.optValue,b.optValue);

#define jce_ChatSessionOperateResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_GetBlackChatSessionListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_GetBlackChatSessionListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.sessionList,b.sessionList);jce_copy_struct(a.hasNext,b.hasNext);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_ChatUserOperateRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vuid,b.vuid);jce_copy_struct(a.operates,b.operates);

#define jce_ChatUserOperateResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);



#endif
