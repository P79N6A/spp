// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_session.jce'
// **********************************************************************

#ifndef __QQVIDEO_SESSION_H_
#define __QQVIDEO_SESSION_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"


namespace jce
{
    enum SessionType
    {
        TYPE_PID = 1,
    };
    inline string etos(const SessionType & e)
    {
        switch(e)
        {
            case TYPE_PID: return "TYPE_PID";
            default: return "";
        }
    }
    inline int stoe(const string & s, SessionType & e)
    {
        if(s == "TYPE_PID")  { e=TYPE_PID; return 0;}

        return -1;
    }

    enum SessionStatus
    {
        CREATED = 1,
        DISMISSED = 2,
    };
    inline string etos(const SessionStatus & e)
    {
        switch(e)
        {
            case CREATED: return "CREATED";
            case DISMISSED: return "DISMISSED";
            default: return "";
        }
    }
    inline int stoe(const string & s, SessionStatus & e)
    {
        if(s == "CREATED")  { e=CREATED; return 0;}
        if(s == "DISMISSED")  { e=DISMISSED; return 0;}

        return -1;
    }

    enum UserType
    {
        ANONYMOUS_USER = 1,
        NORMAL_USER = 2,
        ADMIN_USER = 4,
        CREATE_USER = 8,
    };
    inline string etos(const UserType & e)
    {
        switch(e)
        {
            case ANONYMOUS_USER: return "ANONYMOUS_USER";
            case NORMAL_USER: return "NORMAL_USER";
            case ADMIN_USER: return "ADMIN_USER";
            case CREATE_USER: return "CREATE_USER";
            default: return "";
        }
    }
    inline int stoe(const string & s, UserType & e)
    {
        if(s == "ANONYMOUS_USER")  { e=ANONYMOUS_USER; return 0;}
        if(s == "NORMAL_USER")  { e=NORMAL_USER; return 0;}
        if(s == "ADMIN_USER")  { e=ADMIN_USER; return 0;}
        if(s == "CREATE_USER")  { e=CREATE_USER; return 0;}

        return -1;
    }

    enum NotificationType
    {
        MSG_TYPE = 1,
        SYS_TYPE = 2,
    };
    inline string etos(const NotificationType & e)
    {
        switch(e)
        {
            case MSG_TYPE: return "MSG_TYPE";
            case SYS_TYPE: return "SYS_TYPE";
            default: return "";
        }
    }
    inline int stoe(const string & s, NotificationType & e)
    {
        if(s == "MSG_TYPE")  { e=MSG_TYPE; return 0;}
        if(s == "SYS_TYPE")  { e=SYS_TYPE; return 0;}

        return -1;
    }

    enum MessageType
    {
        TEXT_TYPE = 1,
        VOICE_TYPE = 2,
        SYSTEM_TYPE = 3,
        LOGIN_TYPE = 4,
        SHARE_TYPE = 5,
        CMD_TYPE = 6,
    };
    inline string etos(const MessageType & e)
    {
        switch(e)
        {
            case TEXT_TYPE: return "TEXT_TYPE";
            case VOICE_TYPE: return "VOICE_TYPE";
            case SYSTEM_TYPE: return "SYSTEM_TYPE";
            case LOGIN_TYPE: return "LOGIN_TYPE";
            case SHARE_TYPE: return "SHARE_TYPE";
            case CMD_TYPE: return "CMD_TYPE";
            default: return "";
        }
    }
    inline int stoe(const string & s, MessageType & e)
    {
        if(s == "TEXT_TYPE")  { e=TEXT_TYPE; return 0;}
        if(s == "VOICE_TYPE")  { e=VOICE_TYPE; return 0;}
        if(s == "SYSTEM_TYPE")  { e=SYSTEM_TYPE; return 0;}
        if(s == "LOGIN_TYPE")  { e=LOGIN_TYPE; return 0;}
        if(s == "SHARE_TYPE")  { e=SHARE_TYPE; return 0;}
        if(s == "CMD_TYPE")  { e=CMD_TYPE; return 0;}

        return -1;
    }

    enum ShowType
    {
        SHOW_ALL = 1,
        SHOW_OWNER_ONLY = 2,
        SHOW_CLIENT_ONLY = 3,
        SHOW_CREATOR_ONLY = 4,
        SHOW_NOT_CREATOR_ONLY = 5,
    };
    inline string etos(const ShowType & e)
    {
        switch(e)
        {
            case SHOW_ALL: return "SHOW_ALL";
            case SHOW_OWNER_ONLY: return "SHOW_OWNER_ONLY";
            case SHOW_CLIENT_ONLY: return "SHOW_CLIENT_ONLY";
            case SHOW_CREATOR_ONLY: return "SHOW_CREATOR_ONLY";
            case SHOW_NOT_CREATOR_ONLY: return "SHOW_NOT_CREATOR_ONLY";
            default: return "";
        }
    }
    inline int stoe(const string & s, ShowType & e)
    {
        if(s == "SHOW_ALL")  { e=SHOW_ALL; return 0;}
        if(s == "SHOW_OWNER_ONLY")  { e=SHOW_OWNER_ONLY; return 0;}
        if(s == "SHOW_CLIENT_ONLY")  { e=SHOW_CLIENT_ONLY; return 0;}
        if(s == "SHOW_CREATOR_ONLY")  { e=SHOW_CREATOR_ONLY; return 0;}
        if(s == "SHOW_NOT_CREATOR_ONLY")  { e=SHOW_NOT_CREATOR_ONLY; return 0;}

        return -1;
    }

    struct SessionInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SessionInfo";
        }
        static string MD5()
        {
            return "e69ad5e8b10c4e81bc2b59a1a5fb0a94";
        }
        SessionInfo()
        :sessionId(""),sessionType(0),boundId(""),sessionStatus(0)
        {
        }
        void resetDefautlt()
        {
            sessionId = "";
            sessionType = 0;
            boundId = "";
            sessionStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionId, 0);
            _os.write(sessionType, 1);
            _os.write(boundId, 2);
            _os.write(sessionStatus, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionId, 0, true);
            _is.read(sessionType, 1, false);
            _is.read(boundId, 2, false);
            _is.read(sessionStatus, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionId,"sessionId");
            _ds.display(sessionType,"sessionType");
            _ds.display(boundId,"boundId");
            _ds.display(sessionStatus,"sessionStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionId, true);
            _ds.displaySimple(sessionType, true);
            _ds.displaySimple(boundId, true);
            _ds.displaySimple(sessionStatus, false);
            return _os;
        }
    public:
        std::string sessionId;
        taf::Int32 sessionType;
        std::string boundId;
        taf::Int32 sessionStatus;
    };
    inline bool operator==(const SessionInfo&l, const SessionInfo&r)
    {
        return l.sessionId == r.sessionId && l.sessionType == r.sessionType && l.boundId == r.boundId && l.sessionStatus == r.sessionStatus;
    }
    inline bool operator!=(const SessionInfo&l, const SessionInfo&r)
    {
        return !(l == r);
    }

    struct UserInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserInfo";
        }
        static string MD5()
        {
            return "3a14302c5cbeea46d0e073c73ef41ae5";
        }
        UserInfo()
        :userId(""),userType(0),nickname(""),headUrl(""),userNumber(0),joinTime(0)
        {
        }
        void resetDefautlt()
        {
            userId = "";
            userType = 0;
            nickname = "";
            headUrl = "";
            userNumber = 0;
            joinTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(userId, 0);
            _os.write(userType, 1);
            _os.write(nickname, 2);
            _os.write(headUrl, 3);
            _os.write(userNumber, 4);
            _os.write(joinTime, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(userId, 0, true);
            _is.read(userType, 1, false);
            _is.read(nickname, 2, false);
            _is.read(headUrl, 3, false);
            _is.read(userNumber, 4, false);
            _is.read(joinTime, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(userId,"userId");
            _ds.display(userType,"userType");
            _ds.display(nickname,"nickname");
            _ds.display(headUrl,"headUrl");
            _ds.display(userNumber,"userNumber");
            _ds.display(joinTime,"joinTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(userId, true);
            _ds.displaySimple(userType, true);
            _ds.displaySimple(nickname, true);
            _ds.displaySimple(headUrl, true);
            _ds.displaySimple(userNumber, true);
            _ds.displaySimple(joinTime, false);
            return _os;
        }
    public:
        std::string userId;
        taf::Int32 userType;
        std::string nickname;
        std::string headUrl;
        taf::Int32 userNumber;
        taf::Int64 joinTime;
    };
    inline bool operator==(const UserInfo&l, const UserInfo&r)
    {
        return l.userId == r.userId && l.userType == r.userType && l.nickname == r.nickname && l.headUrl == r.headUrl && l.userNumber == r.userNumber && l.joinTime == r.joinTime;
    }
    inline bool operator!=(const UserInfo&l, const UserInfo&r)
    {
        return !(l == r);
    }

    struct MessageInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MessageInfo";
        }
        static string MD5()
        {
            return "9f7e99c0009ba5ca907be1fe2cf61734";
        }
        MessageInfo()
        :msgId(""),createTime(0),msgType(0),textContent(""),seqId(""),playTime(0),showType(0),cmdContent("")
        {
        }
        void resetDefautlt()
        {
            msgId = "";
            createTime = 0;
            msgType = 0;
            textContent = "";
            seqId = "";
            playTime = 0;
            showType = 0;
            cmdContent = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(msgId, 0);
            _os.write(createTime, 1);
            _os.write(userInfo, 2);
            _os.write(msgType, 3);
            _os.write(textContent, 4);
            _os.write(voiceData, 5);
            _os.write(seqId, 6);
            _os.write(playTime, 7);
            _os.write(showType, 8);
            _os.write(cmdContent, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(msgId, 0, true);
            _is.read(createTime, 1, false);
            _is.read(userInfo, 2, false);
            _is.read(msgType, 3, false);
            _is.read(textContent, 4, false);
            _is.read(voiceData, 5, false);
            _is.read(seqId, 6, false);
            _is.read(playTime, 7, false);
            _is.read(showType, 8, false);
            _is.read(cmdContent, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(msgId,"msgId");
            _ds.display(createTime,"createTime");
            _ds.display(userInfo,"userInfo");
            _ds.display(msgType,"msgType");
            _ds.display(textContent,"textContent");
            _ds.display(voiceData,"voiceData");
            _ds.display(seqId,"seqId");
            _ds.display(playTime,"playTime");
            _ds.display(showType,"showType");
            _ds.display(cmdContent,"cmdContent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(msgId, true);
            _ds.displaySimple(createTime, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(msgType, true);
            _ds.displaySimple(textContent, true);
            _ds.displaySimple(voiceData, true);
            _ds.displaySimple(seqId, true);
            _ds.displaySimple(playTime, true);
            _ds.displaySimple(showType, true);
            _ds.displaySimple(cmdContent, false);
            return _os;
        }
    public:
        std::string msgId;
        taf::Int64 createTime;
        jce::UserInfo userInfo;
        taf::Int32 msgType;
        std::string textContent;
        jce::ApolloVoiceData voiceData;
        std::string seqId;
        taf::Int64 playTime;
        taf::Int32 showType;
        std::string cmdContent;
    };
    inline bool operator==(const MessageInfo&l, const MessageInfo&r)
    {
        return l.msgId == r.msgId && l.createTime == r.createTime && l.userInfo == r.userInfo && l.msgType == r.msgType && l.textContent == r.textContent && l.voiceData == r.voiceData && l.seqId == r.seqId && l.playTime == r.playTime && l.showType == r.showType && l.cmdContent == r.cmdContent;
    }
    inline bool operator!=(const MessageInfo&l, const MessageInfo&r)
    {
        return !(l == r);
    }

    struct SessionPrivateInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SessionPrivateInfo";
        }
        static string MD5()
        {
            return "545d142c73c573b6c3cfbe78a76c5c01";
        }
        SessionPrivateInfo()
        :lastMsgId(""),firstMsgId(""),joinTime(0),leaveTime(0)
        {
        }
        void resetDefautlt()
        {
            lastMsgId = "";
            firstMsgId = "";
            joinTime = 0;
            leaveTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionInfo, 0);
            _os.write(lastMsgId, 1);
            _os.write(firstMsgId, 2);
            _os.write(joinOperator, 3);
            _os.write(joinTime, 4);
            _os.write(leaveOperator, 5);
            _os.write(leaveTime, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionInfo, 0, true);
            _is.read(lastMsgId, 1, false);
            _is.read(firstMsgId, 2, false);
            _is.read(joinOperator, 3, false);
            _is.read(joinTime, 4, false);
            _is.read(leaveOperator, 5, false);
            _is.read(leaveTime, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionInfo,"sessionInfo");
            _ds.display(lastMsgId,"lastMsgId");
            _ds.display(firstMsgId,"firstMsgId");
            _ds.display(joinOperator,"joinOperator");
            _ds.display(joinTime,"joinTime");
            _ds.display(leaveOperator,"leaveOperator");
            _ds.display(leaveTime,"leaveTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionInfo, true);
            _ds.displaySimple(lastMsgId, true);
            _ds.displaySimple(firstMsgId, true);
            _ds.displaySimple(joinOperator, true);
            _ds.displaySimple(joinTime, true);
            _ds.displaySimple(leaveOperator, true);
            _ds.displaySimple(leaveTime, false);
            return _os;
        }
    public:
        jce::SessionInfo sessionInfo;
        std::string lastMsgId;
        std::string firstMsgId;
        jce::UserInfo joinOperator;
        taf::Int64 joinTime;
        jce::UserInfo leaveOperator;
        taf::Int64 leaveTime;
    };
    inline bool operator==(const SessionPrivateInfo&l, const SessionPrivateInfo&r)
    {
        return l.sessionInfo == r.sessionInfo && l.lastMsgId == r.lastMsgId && l.firstMsgId == r.firstMsgId && l.joinOperator == r.joinOperator && l.joinTime == r.joinTime && l.leaveOperator == r.leaveOperator && l.leaveTime == r.leaveTime;
    }
    inline bool operator!=(const SessionPrivateInfo&l, const SessionPrivateInfo&r)
    {
        return !(l == r);
    }

    struct SessionPublicInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SessionPublicInfo";
        }
        static string MD5()
        {
            return "170da7ee345b76bf82dc15c61482080e";
        }
        SessionPublicInfo()
        :createTime(0),sessionName(""),sessionPic(""),description(""),msgKey(""),userCount(0),userNumber(0),canGuestShare(0)
        {
        }
        void resetDefautlt()
        {
            createTime = 0;
            sessionName = "";
            sessionPic = "";
            description = "";
            msgKey = "";
            userCount = 0;
            userNumber = 0;
            canGuestShare = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionInfo, 0);
            _os.write(creator, 1);
            _os.write(createTime, 2);
            _os.write(sessionName, 3);
            _os.write(sessionPic, 4);
            _os.write(description, 5);
            _os.write(msgKey, 6);
            _os.write(userCount, 7);
            _os.write(shareItem, 8);
            _os.write(userNumber, 9);
            _os.write(canGuestShare, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionInfo, 0, true);
            _is.read(creator, 1, false);
            _is.read(createTime, 2, false);
            _is.read(sessionName, 3, false);
            _is.read(sessionPic, 4, false);
            _is.read(description, 5, false);
            _is.read(msgKey, 6, false);
            _is.read(userCount, 7, false);
            _is.read(shareItem, 8, false);
            _is.read(userNumber, 9, false);
            _is.read(canGuestShare, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionInfo,"sessionInfo");
            _ds.display(creator,"creator");
            _ds.display(createTime,"createTime");
            _ds.display(sessionName,"sessionName");
            _ds.display(sessionPic,"sessionPic");
            _ds.display(description,"description");
            _ds.display(msgKey,"msgKey");
            _ds.display(userCount,"userCount");
            _ds.display(shareItem,"shareItem");
            _ds.display(userNumber,"userNumber");
            _ds.display(canGuestShare,"canGuestShare");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionInfo, true);
            _ds.displaySimple(creator, true);
            _ds.displaySimple(createTime, true);
            _ds.displaySimple(sessionName, true);
            _ds.displaySimple(sessionPic, true);
            _ds.displaySimple(description, true);
            _ds.displaySimple(msgKey, true);
            _ds.displaySimple(userCount, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(userNumber, true);
            _ds.displaySimple(canGuestShare, false);
            return _os;
        }
    public:
        jce::SessionInfo sessionInfo;
        jce::UserInfo creator;
        taf::Int64 createTime;
        std::string sessionName;
        std::string sessionPic;
        std::string description;
        std::string msgKey;
        taf::Int32 userCount;
        jce::ShareItem shareItem;
        taf::Int32 userNumber;
        taf::Int32 canGuestShare;
    };
    inline bool operator==(const SessionPublicInfo&l, const SessionPublicInfo&r)
    {
        return l.sessionInfo == r.sessionInfo && l.creator == r.creator && l.createTime == r.createTime && l.sessionName == r.sessionName && l.sessionPic == r.sessionPic && l.description == r.description && l.msgKey == r.msgKey && l.userCount == r.userCount && l.shareItem == r.shareItem && l.userNumber == r.userNumber && l.canGuestShare == r.canGuestShare;
    }
    inline bool operator!=(const SessionPublicInfo&l, const SessionPublicInfo&r)
    {
        return !(l == r);
    }

    struct UserSessionInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserSessionInfo";
        }
        static string MD5()
        {
            return "93377698f42139f024fb3e22d4f25499";
        }
        UserSessionInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(publicInfo, 0);
            _os.write(userInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(publicInfo, 0, true);
            _is.read(userInfo, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(publicInfo,"publicInfo");
            _ds.display(userInfo,"userInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(publicInfo, true);
            _ds.displaySimple(userInfo, false);
            return _os;
        }
    public:
        jce::SessionPublicInfo publicInfo;
        jce::UserInfo userInfo;
    };
    inline bool operator==(const UserSessionInfo&l, const UserSessionInfo&r)
    {
        return l.publicInfo == r.publicInfo && l.userInfo == r.userInfo;
    }
    inline bool operator!=(const UserSessionInfo&l, const UserSessionInfo&r)
    {
        return !(l == r);
    }

    struct CreateSessionRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CreateSessionRequest";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        CreateSessionRequest()
        :sessionType(0),boundId(""),sessionName("")
        {
        }
        void resetDefautlt()
        {
            sessionType = 0;
            boundId = "";
            sessionName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionType, 0);
            _os.write(boundId, 1);
            _os.write(sessionName, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionType, 0, true);
            _is.read(boundId, 1, true);
            _is.read(sessionName, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionType,"sessionType");
            _ds.display(boundId,"boundId");
            _ds.display(sessionName,"sessionName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionType, true);
            _ds.displaySimple(boundId, true);
            _ds.displaySimple(sessionName, false);
            return _os;
        }
    public:
        taf::Int32 sessionType;
        std::string boundId;
        std::string sessionName;
    };
    inline bool operator==(const CreateSessionRequest&l, const CreateSessionRequest&r)
    {
        return l.sessionType == r.sessionType && l.boundId == r.boundId && l.sessionName == r.sessionName;
    }
    inline bool operator!=(const CreateSessionRequest&l, const CreateSessionRequest&r)
    {
        return !(l == r);
    }

    struct CreateSessionResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CreateSessionResponse";
        }
        static string MD5()
        {
            return "2df07fac89e8c6a0315a01031ed25bc7";
        }
        CreateSessionResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(userInfo, 2);
            _os.write(publicInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(userInfo, 2, false);
            _is.read(publicInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(userInfo,"userInfo");
            _ds.display(publicInfo,"publicInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(publicInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        jce::UserInfo userInfo;
        jce::SessionPublicInfo publicInfo;
    };
    inline bool operator==(const CreateSessionResponse&l, const CreateSessionResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.userInfo == r.userInfo && l.publicInfo == r.publicInfo;
    }
    inline bool operator!=(const CreateSessionResponse&l, const CreateSessionResponse&r)
    {
        return !(l == r);
    }

    struct JoinInSessionRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.JoinInSessionRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        JoinInSessionRequest()
        :sessionId("")
        {
        }
        void resetDefautlt()
        {
            sessionId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionId,"sessionId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionId, false);
            return _os;
        }
    public:
        std::string sessionId;
    };
    inline bool operator==(const JoinInSessionRequest&l, const JoinInSessionRequest&r)
    {
        return l.sessionId == r.sessionId;
    }
    inline bool operator!=(const JoinInSessionRequest&l, const JoinInSessionRequest&r)
    {
        return !(l == r);
    }

    struct JoinInSessionResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.JoinInSessionResponse";
        }
        static string MD5()
        {
            return "2df07fac89e8c6a0315a01031ed25bc7";
        }
        JoinInSessionResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(userInfo, 2);
            _os.write(publicInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(userInfo, 2, false);
            _is.read(publicInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(userInfo,"userInfo");
            _ds.display(publicInfo,"publicInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(publicInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        jce::UserInfo userInfo;
        jce::SessionPublicInfo publicInfo;
    };
    inline bool operator==(const JoinInSessionResponse&l, const JoinInSessionResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.userInfo == r.userInfo && l.publicInfo == r.publicInfo;
    }
    inline bool operator!=(const JoinInSessionResponse&l, const JoinInSessionResponse&r)
    {
        return !(l == r);
    }

    struct ExitSessionRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ExitSessionRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        ExitSessionRequest()
        :sessionId("")
        {
        }
        void resetDefautlt()
        {
            sessionId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionId,"sessionId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionId, false);
            return _os;
        }
    public:
        std::string sessionId;
    };
    inline bool operator==(const ExitSessionRequest&l, const ExitSessionRequest&r)
    {
        return l.sessionId == r.sessionId;
    }
    inline bool operator!=(const ExitSessionRequest&l, const ExitSessionRequest&r)
    {
        return !(l == r);
    }

    struct ExitSessionResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ExitSessionResponse";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        ExitSessionResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
    };
    inline bool operator==(const ExitSessionResponse&l, const ExitSessionResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg;
    }
    inline bool operator!=(const ExitSessionResponse&l, const ExitSessionResponse&r)
    {
        return !(l == r);
    }

    struct RemoveSessionFriendRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RemoveSessionFriendRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        RemoveSessionFriendRequest()
        :userId(""),sessionId("")
        {
        }
        void resetDefautlt()
        {
            userId = "";
            sessionId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(userId, 0);
            _os.write(sessionId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(userId, 0, true);
            _is.read(sessionId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(userId,"userId");
            _ds.display(sessionId,"sessionId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(userId, true);
            _ds.displaySimple(sessionId, false);
            return _os;
        }
    public:
        std::string userId;
        std::string sessionId;
    };
    inline bool operator==(const RemoveSessionFriendRequest&l, const RemoveSessionFriendRequest&r)
    {
        return l.userId == r.userId && l.sessionId == r.sessionId;
    }
    inline bool operator!=(const RemoveSessionFriendRequest&l, const RemoveSessionFriendRequest&r)
    {
        return !(l == r);
    }

    struct RemoveSessionFriendResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RemoveSessionFriendResponse";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        RemoveSessionFriendResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
    };
    inline bool operator==(const RemoveSessionFriendResponse&l, const RemoveSessionFriendResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg;
    }
    inline bool operator!=(const RemoveSessionFriendResponse&l, const RemoveSessionFriendResponse&r)
    {
        return !(l == r);
    }

    struct GetApolloAuthKeyRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetApolloAuthKeyRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetApolloAuthKeyRequest()
        :sessionId("")
        {
        }
        void resetDefautlt()
        {
            sessionId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionId,"sessionId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionId, false);
            return _os;
        }
    public:
        std::string sessionId;
    };
    inline bool operator==(const GetApolloAuthKeyRequest&l, const GetApolloAuthKeyRequest&r)
    {
        return l.sessionId == r.sessionId;
    }
    inline bool operator!=(const GetApolloAuthKeyRequest&l, const GetApolloAuthKeyRequest&r)
    {
        return !(l == r);
    }

    struct GetApolloAuthKeyResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetApolloAuthKeyResponse";
        }
        static string MD5()
        {
            return "ee537f0c6d86b8047c1f560e0eaf7436";
        }
        GetApolloAuthKeyResponse()
        :errCode(0),errMsg(""),mainSvrId(0),mainSvrUrl1(0),mainSvrUrl2(0),slaveSvrId(0),slaveSvrUrl1(0),slaveSvrUrl2(0),expireIn(0),authKey("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
            mainSvrId = 0;
            mainSvrUrl1 = 0;
            mainSvrUrl2 = 0;
            slaveSvrId = 0;
            slaveSvrUrl1 = 0;
            slaveSvrUrl2 = 0;
            expireIn = 0;
            authKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(mainSvrId, 2);
            _os.write(mainSvrUrl1, 3);
            _os.write(mainSvrUrl2, 4);
            _os.write(slaveSvrId, 5);
            _os.write(slaveSvrUrl1, 6);
            _os.write(slaveSvrUrl2, 7);
            _os.write(expireIn, 8);
            _os.write(authKey, 9);
            _os.write(authKeyData, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(mainSvrId, 2, true);
            _is.read(mainSvrUrl1, 3, true);
            _is.read(mainSvrUrl2, 4, true);
            _is.read(slaveSvrId, 5, true);
            _is.read(slaveSvrUrl1, 6, true);
            _is.read(slaveSvrUrl2, 7, true);
            _is.read(expireIn, 8, true);
            _is.read(authKey, 9, true);
            _is.read(authKeyData, 10, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(mainSvrId,"mainSvrId");
            _ds.display(mainSvrUrl1,"mainSvrUrl1");
            _ds.display(mainSvrUrl2,"mainSvrUrl2");
            _ds.display(slaveSvrId,"slaveSvrId");
            _ds.display(slaveSvrUrl1,"slaveSvrUrl1");
            _ds.display(slaveSvrUrl2,"slaveSvrUrl2");
            _ds.display(expireIn,"expireIn");
            _ds.display(authKey,"authKey");
            _ds.display(authKeyData,"authKeyData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(mainSvrId, true);
            _ds.displaySimple(mainSvrUrl1, true);
            _ds.displaySimple(mainSvrUrl2, true);
            _ds.displaySimple(slaveSvrId, true);
            _ds.displaySimple(slaveSvrUrl1, true);
            _ds.displaySimple(slaveSvrUrl2, true);
            _ds.displaySimple(expireIn, true);
            _ds.displaySimple(authKey, true);
            _ds.displaySimple(authKeyData, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        taf::Int64 mainSvrId;
        taf::Int64 mainSvrUrl1;
        taf::Int64 mainSvrUrl2;
        taf::Int64 slaveSvrId;
        taf::Int64 slaveSvrUrl1;
        taf::Int64 slaveSvrUrl2;
        taf::Int32 expireIn;
        std::string authKey;
        vector<taf::Char> authKeyData;
    };
    inline bool operator==(const GetApolloAuthKeyResponse&l, const GetApolloAuthKeyResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.mainSvrId == r.mainSvrId && l.mainSvrUrl1 == r.mainSvrUrl1 && l.mainSvrUrl2 == r.mainSvrUrl2 && l.slaveSvrId == r.slaveSvrId && l.slaveSvrUrl1 == r.slaveSvrUrl1 && l.slaveSvrUrl2 == r.slaveSvrUrl2 && l.expireIn == r.expireIn && l.authKey == r.authKey && l.authKeyData == r.authKeyData;
    }
    inline bool operator!=(const GetApolloAuthKeyResponse&l, const GetApolloAuthKeyResponse&r)
    {
        return !(l == r);
    }

    struct GetUserSessionsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetUserSessionsRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        GetUserSessionsRequest()
        :isOnlyMine(0)
        {
        }
        void resetDefautlt()
        {
            isOnlyMine = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(isOnlyMine, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(isOnlyMine, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(isOnlyMine,"isOnlyMine");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(isOnlyMine, false);
            return _os;
        }
    public:
        taf::Int32 isOnlyMine;
    };
    inline bool operator==(const GetUserSessionsRequest&l, const GetUserSessionsRequest&r)
    {
        return l.isOnlyMine == r.isOnlyMine;
    }
    inline bool operator!=(const GetUserSessionsRequest&l, const GetUserSessionsRequest&r)
    {
        return !(l == r);
    }

    struct GetUserSessionsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetUserSessionsResponse";
        }
        static string MD5()
        {
            return "472a979399d2cbc4db89d27e20458c6a";
        }
        GetUserSessionsResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(userSessionInfos, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(userSessionInfos, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(userSessionInfos,"userSessionInfos");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(userSessionInfos, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        vector<jce::UserSessionInfo> userSessionInfos;
    };
    inline bool operator==(const GetUserSessionsResponse&l, const GetUserSessionsResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.userSessionInfos == r.userSessionInfos;
    }
    inline bool operator!=(const GetUserSessionsResponse&l, const GetUserSessionsResponse&r)
    {
        return !(l == r);
    }

    struct GetSessionUsersRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetSessionUsersRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetSessionUsersRequest()
        :sessionId("")
        {
        }
        void resetDefautlt()
        {
            sessionId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionId,"sessionId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionId, false);
            return _os;
        }
    public:
        std::string sessionId;
    };
    inline bool operator==(const GetSessionUsersRequest&l, const GetSessionUsersRequest&r)
    {
        return l.sessionId == r.sessionId;
    }
    inline bool operator!=(const GetSessionUsersRequest&l, const GetSessionUsersRequest&r)
    {
        return !(l == r);
    }

    struct GetSessionUsersResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetSessionUsersResponse";
        }
        static string MD5()
        {
            return "98ffe4695480c24666bda0ab35fb138f";
        }
        GetSessionUsersResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(publicInfo, 2);
            _os.write(users, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(publicInfo, 2, false);
            _is.read(users, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(publicInfo,"publicInfo");
            _ds.display(users,"users");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(publicInfo, true);
            _ds.displaySimple(users, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        jce::SessionPublicInfo publicInfo;
        vector<jce::UserInfo> users;
    };
    inline bool operator==(const GetSessionUsersResponse&l, const GetSessionUsersResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.publicInfo == r.publicInfo && l.users == r.users;
    }
    inline bool operator!=(const GetSessionUsersResponse&l, const GetSessionUsersResponse&r)
    {
        return !(l == r);
    }

    struct UserValidationReqInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserValidationReqInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        UserValidationReqInfo()
        :userId(""),sessionId("")
        {
        }
        void resetDefautlt()
        {
            userId = "";
            sessionId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(userId, 0);
            _os.write(sessionId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(userId, 0, true);
            _is.read(sessionId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(userId,"userId");
            _ds.display(sessionId,"sessionId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(userId, true);
            _ds.displaySimple(sessionId, false);
            return _os;
        }
    public:
        std::string userId;
        std::string sessionId;
    };
    inline bool operator==(const UserValidationReqInfo&l, const UserValidationReqInfo&r)
    {
        return l.userId == r.userId && l.sessionId == r.sessionId;
    }
    inline bool operator!=(const UserValidationReqInfo&l, const UserValidationReqInfo&r)
    {
        return !(l == r);
    }

    struct UserValidationResInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserValidationResInfo";
        }
        static string MD5()
        {
            return "5776fd7103fcea055637c7e8b9708bb0";
        }
        UserValidationResInfo()
        :errCode(0),errMsg(""),isValidationd(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
            isValidationd = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(isValidationd, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(isValidationd, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(isValidationd,"isValidationd");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(isValidationd, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        taf::Int32 isValidationd;
    };
    inline bool operator==(const UserValidationResInfo&l, const UserValidationResInfo&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.isValidationd == r.isValidationd;
    }
    inline bool operator!=(const UserValidationResInfo&l, const UserValidationResInfo&r)
    {
        return !(l == r);
    }

    struct CheckUserValidationBatchRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckUserValidationBatchRequest";
        }
        static string MD5()
        {
            return "43cb39d74be05fddd46eea4f4d3c0a76";
        }
        CheckUserValidationBatchRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(reqs, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(reqs, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(reqs,"reqs");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(reqs, false);
            return _os;
        }
    public:
        vector<jce::UserValidationReqInfo> reqs;
    };
    inline bool operator==(const CheckUserValidationBatchRequest&l, const CheckUserValidationBatchRequest&r)
    {
        return l.reqs == r.reqs;
    }
    inline bool operator!=(const CheckUserValidationBatchRequest&l, const CheckUserValidationBatchRequest&r)
    {
        return !(l == r);
    }

    struct CheckUserValidationBatchResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckUserValidationBatchResponse";
        }
        static string MD5()
        {
            return "f20271f0e002734d32d2294a96b338e3";
        }
        CheckUserValidationBatchResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(rsps, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(rsps, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(rsps,"rsps");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(rsps, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        map<std::string, jce::UserValidationResInfo> rsps;
    };
    inline bool operator==(const CheckUserValidationBatchResponse&l, const CheckUserValidationBatchResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.rsps == r.rsps;
    }
    inline bool operator!=(const CheckUserValidationBatchResponse&l, const CheckUserValidationBatchResponse&r)
    {
        return !(l == r);
    }

    struct PostSessionMessageRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PostSessionMessageRequest";
        }
        static string MD5()
        {
            return "4d8ed3fdafc94782b76918b3cfe7dc79";
        }
        PostSessionMessageRequest()
        :sessionId(""),msgType(0),textContent(""),seqId(""),playTime(0)
        {
        }
        void resetDefautlt()
        {
            sessionId = "";
            msgType = 0;
            textContent = "";
            seqId = "";
            playTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionId, 0);
            _os.write(msgType, 1);
            _os.write(textContent, 2);
            _os.write(voiceData, 3);
            _os.write(seqId, 4);
            _os.write(playTime, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionId, 0, true);
            _is.read(msgType, 1, false);
            _is.read(textContent, 2, false);
            _is.read(voiceData, 3, false);
            _is.read(seqId, 4, false);
            _is.read(playTime, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionId,"sessionId");
            _ds.display(msgType,"msgType");
            _ds.display(textContent,"textContent");
            _ds.display(voiceData,"voiceData");
            _ds.display(seqId,"seqId");
            _ds.display(playTime,"playTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionId, true);
            _ds.displaySimple(msgType, true);
            _ds.displaySimple(textContent, true);
            _ds.displaySimple(voiceData, true);
            _ds.displaySimple(seqId, true);
            _ds.displaySimple(playTime, false);
            return _os;
        }
    public:
        std::string sessionId;
        taf::Int32 msgType;
        std::string textContent;
        jce::ApolloVoiceData voiceData;
        std::string seqId;
        taf::Int64 playTime;
    };
    inline bool operator==(const PostSessionMessageRequest&l, const PostSessionMessageRequest&r)
    {
        return l.sessionId == r.sessionId && l.msgType == r.msgType && l.textContent == r.textContent && l.voiceData == r.voiceData && l.seqId == r.seqId && l.playTime == r.playTime;
    }
    inline bool operator!=(const PostSessionMessageRequest&l, const PostSessionMessageRequest&r)
    {
        return !(l == r);
    }

    struct PostSessionMessageResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PostSessionMessageResponse";
        }
        static string MD5()
        {
            return "586e7a8257af4f397ff872ef7ce0d6c9";
        }
        PostSessionMessageResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(msgInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(msgInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(msgInfo,"msgInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(msgInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        jce::MessageInfo msgInfo;
    };
    inline bool operator==(const PostSessionMessageResponse&l, const PostSessionMessageResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.msgInfo == r.msgInfo;
    }
    inline bool operator!=(const PostSessionMessageResponse&l, const PostSessionMessageResponse&r)
    {
        return !(l == r);
    }

    struct SessionMessagesReqInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SessionMessagesReqInfo";
        }
        static string MD5()
        {
            return "16108f9b33a5a538e21d4648b2026aa3";
        }
        SessionMessagesReqInfo()
        :sessionId(""),pageContext(""),isUpward(0),lastReadId(""),playTime(0),pushTime(0)
        {
        }
        void resetDefautlt()
        {
            sessionId = "";
            pageContext = "";
            isUpward = 0;
            lastReadId = "";
            playTime = 0;
            pushTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionId, 0);
            _os.write(pageContext, 1);
            _os.write(isUpward, 2);
            _os.write(lastReadId, 3);
            _os.write(playTime, 4);
            _os.write(pushTime, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionId, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(isUpward, 2, false);
            _is.read(lastReadId, 3, false);
            _is.read(playTime, 4, false);
            _is.read(pushTime, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionId,"sessionId");
            _ds.display(pageContext,"pageContext");
            _ds.display(isUpward,"isUpward");
            _ds.display(lastReadId,"lastReadId");
            _ds.display(playTime,"playTime");
            _ds.display(pushTime,"pushTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionId, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isUpward, true);
            _ds.displaySimple(lastReadId, true);
            _ds.displaySimple(playTime, true);
            _ds.displaySimple(pushTime, false);
            return _os;
        }
    public:
        std::string sessionId;
        std::string pageContext;
        taf::Int32 isUpward;
        std::string lastReadId;
        taf::Int64 playTime;
        taf::Int64 pushTime;
    };
    inline bool operator==(const SessionMessagesReqInfo&l, const SessionMessagesReqInfo&r)
    {
        return l.sessionId == r.sessionId && l.pageContext == r.pageContext && l.isUpward == r.isUpward && l.lastReadId == r.lastReadId && l.playTime == r.playTime && l.pushTime == r.pushTime;
    }
    inline bool operator!=(const SessionMessagesReqInfo&l, const SessionMessagesReqInfo&r)
    {
        return !(l == r);
    }

    struct SessionMessagesResInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SessionMessagesResInfo";
        }
        static string MD5()
        {
            return "35735a42b68a199a5cf84f2bbbf4d32a";
        }
        SessionMessagesResInfo()
        :errCode(0),errMsg(""),pageContext(""),hasNextPage(true),unReadCount(0),nextMsgReqIntervalTime(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
            pageContext = "";
            hasNextPage = true;
            unReadCount = 0;
            nextMsgReqIntervalTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(msgList, 2);
            _os.write(pageContext, 3);
            _os.write(hasNextPage, 4);
            _os.write(unReadCount, 5);
            _os.write(nextMsgReqIntervalTime, 6);
            _os.write(unReadMsgInfo, 7);
            _os.write(extMsgList, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(msgList, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(hasNextPage, 4, false);
            _is.read(unReadCount, 5, false);
            _is.read(nextMsgReqIntervalTime, 6, false);
            _is.read(unReadMsgInfo, 7, false);
            _is.read(extMsgList, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(msgList,"msgList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(unReadCount,"unReadCount");
            _ds.display(nextMsgReqIntervalTime,"nextMsgReqIntervalTime");
            _ds.display(unReadMsgInfo,"unReadMsgInfo");
            _ds.display(extMsgList,"extMsgList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(msgList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(unReadCount, true);
            _ds.displaySimple(nextMsgReqIntervalTime, true);
            _ds.displaySimple(unReadMsgInfo, true);
            _ds.displaySimple(extMsgList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        vector<jce::MessageInfo> msgList;
        std::string pageContext;
        taf::Bool hasNextPage;
        taf::Int32 unReadCount;
        taf::Int32 nextMsgReqIntervalTime;
        jce::MessageInfo unReadMsgInfo;
        vector<jce::MessageInfo> extMsgList;
    };
    inline bool operator==(const SessionMessagesResInfo&l, const SessionMessagesResInfo&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.msgList == r.msgList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.unReadCount == r.unReadCount && l.nextMsgReqIntervalTime == r.nextMsgReqIntervalTime && l.unReadMsgInfo == r.unReadMsgInfo && l.extMsgList == r.extMsgList;
    }
    inline bool operator!=(const SessionMessagesResInfo&l, const SessionMessagesResInfo&r)
    {
        return !(l == r);
    }

    struct GetSessionMessagesBatchRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetSessionMessagesBatchRequest";
        }
        static string MD5()
        {
            return "b5c6b6bb6b2a35d520b566a29b8cdf00";
        }
        GetSessionMessagesBatchRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(reqs, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(reqs, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(reqs,"reqs");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(reqs, false);
            return _os;
        }
    public:
        vector<jce::SessionMessagesReqInfo> reqs;
    };
    inline bool operator==(const GetSessionMessagesBatchRequest&l, const GetSessionMessagesBatchRequest&r)
    {
        return l.reqs == r.reqs;
    }
    inline bool operator!=(const GetSessionMessagesBatchRequest&l, const GetSessionMessagesBatchRequest&r)
    {
        return !(l == r);
    }

    struct GetSessionMessagesBatchResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetSessionMessagesBatchResponse";
        }
        static string MD5()
        {
            return "996a97791a1c06735b89d1852ad87d39";
        }
        GetSessionMessagesBatchResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(rsps, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(rsps, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(rsps,"rsps");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(rsps, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        map<std::string, jce::SessionMessagesResInfo> rsps;
    };
    inline bool operator==(const GetSessionMessagesBatchResponse&l, const GetSessionMessagesBatchResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.rsps == r.rsps;
    }
    inline bool operator!=(const GetSessionMessagesBatchResponse&l, const GetSessionMessagesBatchResponse&r)
    {
        return !(l == r);
    }

    struct GetSessionPublicInfoBatchRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetSessionPublicInfoBatchRequest";
        }
        static string MD5()
        {
            return "14e6636632c63fdfafc03fddb6c460ba";
        }
        GetSessionPublicInfoBatchRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sessionIds, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sessionIds, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sessionIds,"sessionIds");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sessionIds, false);
            return _os;
        }
    public:
        vector<std::string> sessionIds;
    };
    inline bool operator==(const GetSessionPublicInfoBatchRequest&l, const GetSessionPublicInfoBatchRequest&r)
    {
        return l.sessionIds == r.sessionIds;
    }
    inline bool operator!=(const GetSessionPublicInfoBatchRequest&l, const GetSessionPublicInfoBatchRequest&r)
    {
        return !(l == r);
    }

    struct GetSessionPublicInfoBatchResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetSessionPublicInfoBatchResponse";
        }
        static string MD5()
        {
            return "e172db7f57ab2464e69eaa2c9b937830";
        }
        GetSessionPublicInfoBatchResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(publicInfos, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(publicInfos, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(publicInfos,"publicInfos");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(publicInfos, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        map<std::string, jce::SessionPublicInfo> publicInfos;
    };
    inline bool operator==(const GetSessionPublicInfoBatchResponse&l, const GetSessionPublicInfoBatchResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.publicInfos == r.publicInfos;
    }
    inline bool operator!=(const GetSessionPublicInfoBatchResponse&l, const GetSessionPublicInfoBatchResponse&r)
    {
        return !(l == r);
    }

    struct UpdateSessionPublicInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UpdateSessionPublicInfoRequest";
        }
        static string MD5()
        {
            return "8ce2ac88d9f0f8a896fd3a5432bf2712";
        }
        UpdateSessionPublicInfoRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(publicInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(publicInfo, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(publicInfo,"publicInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(publicInfo, false);
            return _os;
        }
    public:
        jce::SessionPublicInfo publicInfo;
    };
    inline bool operator==(const UpdateSessionPublicInfoRequest&l, const UpdateSessionPublicInfoRequest&r)
    {
        return l.publicInfo == r.publicInfo;
    }
    inline bool operator!=(const UpdateSessionPublicInfoRequest&l, const UpdateSessionPublicInfoRequest&r)
    {
        return !(l == r);
    }

    struct UpdateSessionPublicInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UpdateSessionPublicInfoResponse";
        }
        static string MD5()
        {
            return "0f28d568ad56f5360577f21b6f652989";
        }
        UpdateSessionPublicInfoResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(publicInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(publicInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(publicInfo,"publicInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(publicInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        jce::SessionPublicInfo publicInfo;
    };
    inline bool operator==(const UpdateSessionPublicInfoResponse&l, const UpdateSessionPublicInfoResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.publicInfo == r.publicInfo;
    }
    inline bool operator!=(const UpdateSessionPublicInfoResponse&l, const UpdateSessionPublicInfoResponse&r)
    {
        return !(l == r);
    }


}

#define jce_SessionInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionId,b.sessionId);jce_copy_struct(a.sessionType,b.sessionType);jce_copy_struct(a.boundId,b.boundId);jce_copy_struct(a.sessionStatus,b.sessionStatus);

#define jce_UserInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.userId,b.userId);jce_copy_struct(a.userType,b.userType);jce_copy_struct(a.nickname,b.nickname);jce_copy_struct(a.headUrl,b.headUrl);jce_copy_struct(a.userNumber,b.userNumber);jce_copy_struct(a.joinTime,b.joinTime);

#define jce_MessageInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.msgId,b.msgId);jce_copy_struct(a.createTime,b.createTime);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.msgType,b.msgType);jce_copy_struct(a.textContent,b.textContent);jce_copy_struct(a.voiceData,b.voiceData);jce_copy_struct(a.seqId,b.seqId);jce_copy_struct(a.playTime,b.playTime);jce_copy_struct(a.showType,b.showType);jce_copy_struct(a.cmdContent,b.cmdContent);

#define jce_SessionPrivateInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionInfo,b.sessionInfo);jce_copy_struct(a.lastMsgId,b.lastMsgId);jce_copy_struct(a.firstMsgId,b.firstMsgId);jce_copy_struct(a.joinOperator,b.joinOperator);jce_copy_struct(a.joinTime,b.joinTime);jce_copy_struct(a.leaveOperator,b.leaveOperator);jce_copy_struct(a.leaveTime,b.leaveTime);

#define jce_SessionPublicInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionInfo,b.sessionInfo);jce_copy_struct(a.creator,b.creator);jce_copy_struct(a.createTime,b.createTime);jce_copy_struct(a.sessionName,b.sessionName);jce_copy_struct(a.sessionPic,b.sessionPic);jce_copy_struct(a.description,b.description);jce_copy_struct(a.msgKey,b.msgKey);jce_copy_struct(a.userCount,b.userCount);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.userNumber,b.userNumber);jce_copy_struct(a.canGuestShare,b.canGuestShare);

#define jce_UserSessionInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.publicInfo,b.publicInfo);jce_copy_struct(a.userInfo,b.userInfo);

#define jce_CreateSessionRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionType,b.sessionType);jce_copy_struct(a.boundId,b.boundId);jce_copy_struct(a.sessionName,b.sessionName);

#define jce_CreateSessionResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.publicInfo,b.publicInfo);

#define jce_JoinInSessionRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionId,b.sessionId);

#define jce_JoinInSessionResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.publicInfo,b.publicInfo);

#define jce_ExitSessionRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionId,b.sessionId);

#define jce_ExitSessionResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);

#define jce_RemoveSessionFriendRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.userId,b.userId);jce_copy_struct(a.sessionId,b.sessionId);

#define jce_RemoveSessionFriendResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);

#define jce_GetApolloAuthKeyRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionId,b.sessionId);

#define jce_GetApolloAuthKeyResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.mainSvrId,b.mainSvrId);jce_copy_struct(a.mainSvrUrl1,b.mainSvrUrl1);jce_copy_struct(a.mainSvrUrl2,b.mainSvrUrl2);jce_copy_struct(a.slaveSvrId,b.slaveSvrId);jce_copy_struct(a.slaveSvrUrl1,b.slaveSvrUrl1);jce_copy_struct(a.slaveSvrUrl2,b.slaveSvrUrl2);jce_copy_struct(a.expireIn,b.expireIn);jce_copy_struct(a.authKey,b.authKey);jce_copy_struct(a.authKeyData,b.authKeyData);

#define jce_GetUserSessionsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.isOnlyMine,b.isOnlyMine);

#define jce_GetUserSessionsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.userSessionInfos,b.userSessionInfos);

#define jce_GetSessionUsersRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionId,b.sessionId);

#define jce_GetSessionUsersResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.publicInfo,b.publicInfo);jce_copy_struct(a.users,b.users);

#define jce_UserValidationReqInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.userId,b.userId);jce_copy_struct(a.sessionId,b.sessionId);

#define jce_UserValidationResInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.isValidationd,b.isValidationd);

#define jce_CheckUserValidationBatchRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.reqs,b.reqs);

#define jce_CheckUserValidationBatchResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.rsps,b.rsps);

#define jce_PostSessionMessageRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionId,b.sessionId);jce_copy_struct(a.msgType,b.msgType);jce_copy_struct(a.textContent,b.textContent);jce_copy_struct(a.voiceData,b.voiceData);jce_copy_struct(a.seqId,b.seqId);jce_copy_struct(a.playTime,b.playTime);

#define jce_PostSessionMessageResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.msgInfo,b.msgInfo);

#define jce_SessionMessagesReqInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionId,b.sessionId);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isUpward,b.isUpward);jce_copy_struct(a.lastReadId,b.lastReadId);jce_copy_struct(a.playTime,b.playTime);jce_copy_struct(a.pushTime,b.pushTime);

#define jce_SessionMessagesResInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.msgList,b.msgList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.unReadCount,b.unReadCount);jce_copy_struct(a.nextMsgReqIntervalTime,b.nextMsgReqIntervalTime);jce_copy_struct(a.unReadMsgInfo,b.unReadMsgInfo);jce_copy_struct(a.extMsgList,b.extMsgList);

#define jce_GetSessionMessagesBatchRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.reqs,b.reqs);

#define jce_GetSessionMessagesBatchResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.rsps,b.rsps);

#define jce_GetSessionPublicInfoBatchRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sessionIds,b.sessionIds);

#define jce_GetSessionPublicInfoBatchResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.publicInfos,b.publicInfos);

#define jce_UpdateSessionPublicInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.publicInfo,b.publicInfo);

#define jce_UpdateSessionPublicInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.publicInfo,b.publicInfo);



#endif
