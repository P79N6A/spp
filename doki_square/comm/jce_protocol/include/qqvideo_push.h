// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_push.jce'
// **********************************************************************

#ifndef __QQVIDEO_PUSH_H_
#define __QQVIDEO_PUSH_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace jce
{
    struct PushRegisterRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PushRegisterRequest";
        }
        static string MD5()
        {
            return "81985ab5572d614277b48adc89fb3c33";
        }
        PushRegisterRequest()
        :guid(""),qq(""),netState(""),bid(""),appVer("0"),pushOn("1"),omgId("0"),systemPushOn("1")
        {
        }
        void resetDefautlt()
        {
            guid = "";
            qq = "";
            netState = "";
            bid = "";
            appVer = "0";
            pushOn = "1";
            omgId = "0";
            systemPushOn = "1";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(guid, 0);
            _os.write(qq, 1);
            _os.write(netState, 2);
            _os.write(bid, 3);
            _os.write(appVer, 4);
            _os.write(pushOn, 5);
            _os.write(omgId, 6);
            _os.write(systemPushOn, 7);
            _os.write(deviceInfoMap, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(guid, 0, true);
            _is.read(qq, 1, true);
            _is.read(netState, 2, true);
            _is.read(bid, 3, true);
            _is.read(appVer, 4, false);
            _is.read(pushOn, 5, false);
            _is.read(omgId, 6, false);
            _is.read(systemPushOn, 7, false);
            _is.read(deviceInfoMap, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(guid,"guid");
            _ds.display(qq,"qq");
            _ds.display(netState,"netState");
            _ds.display(bid,"bid");
            _ds.display(appVer,"appVer");
            _ds.display(pushOn,"pushOn");
            _ds.display(omgId,"omgId");
            _ds.display(systemPushOn,"systemPushOn");
            _ds.display(deviceInfoMap,"deviceInfoMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(guid, true);
            _ds.displaySimple(qq, true);
            _ds.displaySimple(netState, true);
            _ds.displaySimple(bid, true);
            _ds.displaySimple(appVer, true);
            _ds.displaySimple(pushOn, true);
            _ds.displaySimple(omgId, true);
            _ds.displaySimple(systemPushOn, true);
            _ds.displaySimple(deviceInfoMap, false);
            return _os;
        }
    public:
        std::string guid;
        std::string qq;
        std::string netState;
        std::string bid;
        std::string appVer;
        std::string pushOn;
        std::string omgId;
        std::string systemPushOn;
        map<std::string, std::string> deviceInfoMap;
    };
    inline bool operator==(const PushRegisterRequest&l, const PushRegisterRequest&r)
    {
        return l.guid == r.guid && l.qq == r.qq && l.netState == r.netState && l.bid == r.bid && l.appVer == r.appVer && l.pushOn == r.pushOn && l.omgId == r.omgId && l.systemPushOn == r.systemPushOn && l.deviceInfoMap == r.deviceInfoMap;
    }
    inline bool operator!=(const PushRegisterRequest&l, const PushRegisterRequest&r)
    {
        return !(l == r);
    }

    struct PushRegisterResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PushRegisterResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        PushRegisterResponse()
        :status(0)
        {
        }
        void resetDefautlt()
        {
            status = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, false);
            return _os;
        }
    public:
        taf::Int32 status;
    };
    inline bool operator==(const PushRegisterResponse&l, const PushRegisterResponse&r)
    {
        return l.status == r.status;
    }
    inline bool operator!=(const PushRegisterResponse&l, const PushRegisterResponse&r)
    {
        return !(l == r);
    }

    struct ThirdPushRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ThirdPushRequest";
        }
        static string MD5()
        {
            return "fcbebef4f26b85424d14d8a87ad46ffa";
        }
        ThirdPushRequest()
        :code(0),seq(0),msgid("")
        {
        }
        void resetDefautlt()
        {
            code = 0;
            seq = 0;
            msgid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(code, 0);
            _os.write(seq, 1);
            _os.write(msgid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(code, 0, true);
            _is.read(seq, 1, true);
            _is.read(msgid, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(code,"code");
            _ds.display(seq,"seq");
            _ds.display(msgid,"msgid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(code, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(msgid, false);
            return _os;
        }
    public:
        taf::Int32 code;
        taf::Int64 seq;
        std::string msgid;
    };
    inline bool operator==(const ThirdPushRequest&l, const ThirdPushRequest&r)
    {
        return l.code == r.code && l.seq == r.seq && l.msgid == r.msgid;
    }
    inline bool operator!=(const ThirdPushRequest&l, const ThirdPushRequest&r)
    {
        return !(l == r);
    }

    struct ThirdPushResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ThirdPushResponse";
        }
        static string MD5()
        {
            return "2d6621da659a171d0b436bb9bcfe09fe";
        }
        ThirdPushResponse()
        :bundleId(""),guid(""),msgid(""),title(""),content(""),appIcon(""),actionUrl(""),msg(""),flag("")
        {
        }
        void resetDefautlt()
        {
            bundleId = "";
            guid = "";
            msgid = "";
            title = "";
            content = "";
            appIcon = "";
            actionUrl = "";
            msg = "";
            flag = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bundleId, 0);
            _os.write(guid, 1);
            _os.write(msgid, 2);
            _os.write(title, 3);
            _os.write(content, 4);
            _os.write(appIcon, 5);
            _os.write(actionUrl, 6);
            _os.write(msg, 7);
            _os.write(flag, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bundleId, 0, true);
            _is.read(guid, 1, true);
            _is.read(msgid, 2, true);
            _is.read(title, 3, true);
            _is.read(content, 4, true);
            _is.read(appIcon, 5, true);
            _is.read(actionUrl, 6, true);
            _is.read(msg, 7, true);
            _is.read(flag, 8, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bundleId,"bundleId");
            _ds.display(guid,"guid");
            _ds.display(msgid,"msgid");
            _ds.display(title,"title");
            _ds.display(content,"content");
            _ds.display(appIcon,"appIcon");
            _ds.display(actionUrl,"actionUrl");
            _ds.display(msg,"msg");
            _ds.display(flag,"flag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bundleId, true);
            _ds.displaySimple(guid, true);
            _ds.displaySimple(msgid, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(appIcon, true);
            _ds.displaySimple(actionUrl, true);
            _ds.displaySimple(msg, true);
            _ds.displaySimple(flag, false);
            return _os;
        }
    public:
        std::string bundleId;
        std::string guid;
        std::string msgid;
        std::string title;
        std::string content;
        std::string appIcon;
        std::string actionUrl;
        std::string msg;
        std::string flag;
    };
    inline bool operator==(const ThirdPushResponse&l, const ThirdPushResponse&r)
    {
        return l.bundleId == r.bundleId && l.guid == r.guid && l.msgid == r.msgid && l.title == r.title && l.content == r.content && l.appIcon == r.appIcon && l.actionUrl == r.actionUrl && l.msg == r.msg && l.flag == r.flag;
    }
    inline bool operator!=(const ThirdPushResponse&l, const ThirdPushResponse&r)
    {
        return !(l == r);
    }

    struct UploadPushTokenRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UploadPushTokenRequest";
        }
        static string MD5()
        {
            return "9ed6da3c95cd1dbc080ee671a70901f0";
        }
        UploadPushTokenRequest()
        :token(""),pushState(0),deviceid(""),platform(0),appVer(""),sysVer(""),netType(0)
        {
        }
        void resetDefautlt()
        {
            token = "";
            pushState = 0;
            deviceid = "";
            platform = 0;
            appVer = "";
            sysVer = "";
            netType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(token, 0);
            _os.write(pushState, 1);
            _os.write(deviceid, 2);
            _os.write(platform, 3);
            _os.write(appVer, 4);
            _os.write(sysVer, 5);
            _os.write(netType, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(token, 0, true);
            _is.read(pushState, 1, true);
            _is.read(deviceid, 2, false);
            _is.read(platform, 3, false);
            _is.read(appVer, 4, false);
            _is.read(sysVer, 5, false);
            _is.read(netType, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(token,"token");
            _ds.display(pushState,"pushState");
            _ds.display(deviceid,"deviceid");
            _ds.display(platform,"platform");
            _ds.display(appVer,"appVer");
            _ds.display(sysVer,"sysVer");
            _ds.display(netType,"netType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(token, true);
            _ds.displaySimple(pushState, true);
            _ds.displaySimple(deviceid, true);
            _ds.displaySimple(platform, true);
            _ds.displaySimple(appVer, true);
            _ds.displaySimple(sysVer, true);
            _ds.displaySimple(netType, false);
            return _os;
        }
    public:
        std::string token;
        taf::Int32 pushState;
        std::string deviceid;
        taf::Int32 platform;
        std::string appVer;
        std::string sysVer;
        taf::Int32 netType;
    };
    inline bool operator==(const UploadPushTokenRequest&l, const UploadPushTokenRequest&r)
    {
        return l.token == r.token && l.pushState == r.pushState && l.deviceid == r.deviceid && l.platform == r.platform && l.appVer == r.appVer && l.sysVer == r.sysVer && l.netType == r.netType;
    }
    inline bool operator!=(const UploadPushTokenRequest&l, const UploadPushTokenRequest&r)
    {
        return !(l == r);
    }

    struct UploadPushTokenResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UploadPushTokenResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        UploadPushTokenResponse()
        :status(0)
        {
        }
        void resetDefautlt()
        {
            status = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, false);
            return _os;
        }
    public:
        taf::Int32 status;
    };
    inline bool operator==(const UploadPushTokenResponse&l, const UploadPushTokenResponse&r)
    {
        return l.status == r.status;
    }
    inline bool operator!=(const UploadPushTokenResponse&l, const UploadPushTokenResponse&r)
    {
        return !(l == r);
    }

    struct PushHeartRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PushHeartRequest";
        }
        static string MD5()
        {
            return "6f9bbe5ace26b7b7f6916c52b00462f6";
        }
        PushHeartRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(heartInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(heartInfo, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(heartInfo,"heartInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(heartInfo, false);
            return _os;
        }
    public:
        map<std::string, std::string> heartInfo;
    };
    inline bool operator==(const PushHeartRequest&l, const PushHeartRequest&r)
    {
        return l.heartInfo == r.heartInfo;
    }
    inline bool operator!=(const PushHeartRequest&l, const PushHeartRequest&r)
    {
        return !(l == r);
    }

    struct PushHeartResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PushHeartResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        PushHeartResponse()
        :status(0)
        {
        }
        void resetDefautlt()
        {
            status = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, false);
            return _os;
        }
    public:
        taf::Int32 status;
    };
    inline bool operator==(const PushHeartResponse&l, const PushHeartResponse&r)
    {
        return l.status == r.status;
    }
    inline bool operator!=(const PushHeartResponse&l, const PushHeartResponse&r)
    {
        return !(l == r);
    }

    struct MessagePushSwitchStateRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MessagePushSwitchStateRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        MessagePushSwitchStateRequest()
        :switchState(0)
        {
        }
        void resetDefautlt()
        {
            switchState = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(switchState, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(switchState, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(switchState,"switchState");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(switchState, false);
            return _os;
        }
    public:
        taf::Int32 switchState;
    };
    inline bool operator==(const MessagePushSwitchStateRequest&l, const MessagePushSwitchStateRequest&r)
    {
        return l.switchState == r.switchState;
    }
    inline bool operator!=(const MessagePushSwitchStateRequest&l, const MessagePushSwitchStateRequest&r)
    {
        return !(l == r);
    }

    struct MessagePushSwitchStateResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MessagePushSwitchStateResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        MessagePushSwitchStateResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const MessagePushSwitchStateResponse&l, const MessagePushSwitchStateResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const MessagePushSwitchStateResponse&l, const MessagePushSwitchStateResponse&r)
    {
        return !(l == r);
    }


}

#define jce_PushRegisterRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.guid,b.guid);jce_copy_struct(a.qq,b.qq);jce_copy_struct(a.netState,b.netState);jce_copy_struct(a.bid,b.bid);jce_copy_struct(a.appVer,b.appVer);jce_copy_struct(a.pushOn,b.pushOn);jce_copy_struct(a.omgId,b.omgId);jce_copy_struct(a.systemPushOn,b.systemPushOn);jce_copy_struct(a.deviceInfoMap,b.deviceInfoMap);

#define jce_PushRegisterResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);

#define jce_ThirdPushRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.code,b.code);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.msgid,b.msgid);

#define jce_ThirdPushResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bundleId,b.bundleId);jce_copy_struct(a.guid,b.guid);jce_copy_struct(a.msgid,b.msgid);jce_copy_struct(a.title,b.title);jce_copy_struct(a.content,b.content);jce_copy_struct(a.appIcon,b.appIcon);jce_copy_struct(a.actionUrl,b.actionUrl);jce_copy_struct(a.msg,b.msg);jce_copy_struct(a.flag,b.flag);

#define jce_UploadPushTokenRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.token,b.token);jce_copy_struct(a.pushState,b.pushState);jce_copy_struct(a.deviceid,b.deviceid);jce_copy_struct(a.platform,b.platform);jce_copy_struct(a.appVer,b.appVer);jce_copy_struct(a.sysVer,b.sysVer);jce_copy_struct(a.netType,b.netType);

#define jce_UploadPushTokenResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);

#define jce_PushHeartRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.heartInfo,b.heartInfo);

#define jce_PushHeartResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);

#define jce_MessagePushSwitchStateRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.switchState,b.switchState);

#define jce_MessagePushSwitchStateResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);



#endif
