// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `star_timeline.jce'
// **********************************************************************

#ifndef __STAR_TIMELINE_H_
#define __STAR_TIMELINE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace StarTimeline
{
    enum EnumShowType
    {
        eShowType_Null = 0,
        eShowType_Settle = 1,
        eShowType_Birth = 2,
        eShowType_FansIncrease = 3,
        eShowType_PopularityTop = 4,
        eShowType_WeiIns = 5,
        eSHowType_GlobalStarCmt = 6,
    };
    inline string etos(const EnumShowType & e)
    {
        switch(e)
        {
            case eShowType_Null: return "eShowType_Null";
            case eShowType_Settle: return "eShowType_Settle";
            case eShowType_Birth: return "eShowType_Birth";
            case eShowType_FansIncrease: return "eShowType_FansIncrease";
            case eShowType_PopularityTop: return "eShowType_PopularityTop";
            case eShowType_WeiIns: return "eShowType_WeiIns";
            case eSHowType_GlobalStarCmt: return "eSHowType_GlobalStarCmt";
            default: return "";
        }
    }
    inline int stoe(const string & s, EnumShowType & e)
    {
        if(s == "eShowType_Null")  { e=eShowType_Null; return 0;}
        if(s == "eShowType_Settle")  { e=eShowType_Settle; return 0;}
        if(s == "eShowType_Birth")  { e=eShowType_Birth; return 0;}
        if(s == "eShowType_FansIncrease")  { e=eShowType_FansIncrease; return 0;}
        if(s == "eShowType_PopularityTop")  { e=eShowType_PopularityTop; return 0;}
        if(s == "eShowType_WeiIns")  { e=eShowType_WeiIns; return 0;}
        if(s == "eSHowType_GlobalStarCmt")  { e=eSHowType_GlobalStarCmt; return 0;}

        return -1;
    }

    struct FeedBasicInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "StarTimeline.FeedBasicInfo";
        }
        static string MD5()
        {
            return "cb4558a7d1cbd8cbf583df7337cc71f1";
        }
        FeedBasicInfo()
        :feedId(""),createTime(0)
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            createTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(createTime, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, false);
            _is.read(createTime, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(createTime,"createTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(createTime, false);
            return _os;
        }
    public:
        std::string feedId;
        taf::Int64 createTime;
    };
    inline bool operator==(const FeedBasicInfo&l, const FeedBasicInfo&r)
    {
        return l.feedId == r.feedId && l.createTime == r.createTime;
    }
    inline bool operator!=(const FeedBasicInfo&l, const FeedBasicInfo&r)
    {
        return !(l == r);
    }

    struct FeedIndex : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "StarTimeline.FeedIndex";
        }
        static string MD5()
        {
            return "45b614f6148cddb8efe4fc5de30c6cbb";
        }
        FeedIndex()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedIndex, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedIndex, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedIndex,"feedIndex");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedIndex, false);
            return _os;
        }
    public:
        vector<StarTimeline::FeedBasicInfo> feedIndex;
    };
    inline bool operator==(const FeedIndex&l, const FeedIndex&r)
    {
        return l.feedIndex == r.feedIndex;
    }
    inline bool operator!=(const FeedIndex&l, const FeedIndex&r)
    {
        return !(l == r);
    }

    struct StarInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "StarTimeline.StarInfo";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        StarInfo()
        :ftId(""),nick(""),head(""),starId("")
        {
        }
        void resetDefautlt()
        {
            ftId = "";
            nick = "";
            head = "";
            starId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ftId, 0);
            _os.write(nick, 1);
            _os.write(head, 2);
            _os.write(starId, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ftId, 0, false);
            _is.read(nick, 1, false);
            _is.read(head, 2, false);
            _is.read(starId, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ftId,"ftId");
            _ds.display(nick,"nick");
            _ds.display(head,"head");
            _ds.display(starId,"starId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ftId, true);
            _ds.displaySimple(nick, true);
            _ds.displaySimple(head, true);
            _ds.displaySimple(starId, false);
            return _os;
        }
    public:
        std::string ftId;
        std::string nick;
        std::string head;
        std::string starId;
    };
    inline bool operator==(const StarInfo&l, const StarInfo&r)
    {
        return l.ftId == r.ftId && l.nick == r.nick && l.head == r.head && l.starId == r.starId;
    }
    inline bool operator!=(const StarInfo&l, const StarInfo&r)
    {
        return !(l == r);
    }

    struct StarInfoList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "StarTimeline.StarInfoList";
        }
        static string MD5()
        {
            return "03dff8cb0741a05e37e30d82c7674902";
        }
        StarInfoList()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starInfos, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starInfos, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starInfos,"starInfos");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starInfos, false);
            return _os;
        }
    public:
        vector<StarTimeline::StarInfo> starInfos;
    };
    inline bool operator==(const StarInfoList&l, const StarInfoList&r)
    {
        return l.starInfos == r.starInfos;
    }
    inline bool operator!=(const StarInfoList&l, const StarInfoList&r)
    {
        return !(l == r);
    }

    struct StStarRank : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "StarTimeline.StStarRank";
        }
        static string MD5()
        {
            return "da622ef2e2ac4863497902ddd0140a2d";
        }
        StStarRank()
        :strStarId(""),uiRankCurWeek(4200000000),uiRankLastWeek(4200000000),iRankStatus(0)
        {
        }
        void resetDefautlt()
        {
            strStarId = "";
            uiRankCurWeek = 4200000000;
            uiRankLastWeek = 4200000000;
            iRankStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strStarId, 0);
            _os.write(uiRankCurWeek, 1);
            _os.write(uiRankLastWeek, 2);
            _os.write(iRankStatus, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strStarId, 0, false);
            _is.read(uiRankCurWeek, 1, false);
            _is.read(uiRankLastWeek, 2, false);
            _is.read(iRankStatus, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strStarId,"strStarId");
            _ds.display(uiRankCurWeek,"uiRankCurWeek");
            _ds.display(uiRankLastWeek,"uiRankLastWeek");
            _ds.display(iRankStatus,"iRankStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strStarId, true);
            _ds.displaySimple(uiRankCurWeek, true);
            _ds.displaySimple(uiRankLastWeek, true);
            _ds.displaySimple(iRankStatus, false);
            return _os;
        }
    public:
        std::string strStarId;
        taf::UInt32 uiRankCurWeek;
        taf::UInt32 uiRankLastWeek;
        taf::Int32 iRankStatus;
    };
    inline bool operator==(const StStarRank&l, const StStarRank&r)
    {
        return l.strStarId == r.strStarId && l.uiRankCurWeek == r.uiRankCurWeek && l.uiRankLastWeek == r.uiRankLastWeek && l.iRankStatus == r.iRankStatus;
    }
    inline bool operator!=(const StStarRank&l, const StStarRank&r)
    {
        return !(l == r);
    }

    struct StVoiceInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "StarTimeline.StVoiceInfo";
        }
        static string MD5()
        {
            return "e700f148cc7d0f8c665bd4226635378f";
        }
        StVoiceInfo()
        :strVoiceId(""),dwDuration(0),bPermanent(true),cStorageFlag(0)
        {
        }
        void resetDefautlt()
        {
            strVoiceId = "";
            dwDuration = 0;
            bPermanent = true;
            cStorageFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strVoiceId, 0);
            _os.write(dwDuration, 1);
            _os.write(bPermanent, 2);
            _os.write(cStorageFlag, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strVoiceId, 0, true);
            _is.read(dwDuration, 1, false);
            _is.read(bPermanent, 2, false);
            _is.read(cStorageFlag, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strVoiceId,"strVoiceId");
            _ds.display(dwDuration,"dwDuration");
            _ds.display(bPermanent,"bPermanent");
            _ds.display(cStorageFlag,"cStorageFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strVoiceId, true);
            _ds.displaySimple(dwDuration, true);
            _ds.displaySimple(bPermanent, true);
            _ds.displaySimple(cStorageFlag, false);
            return _os;
        }
    public:
        std::string strVoiceId;
        taf::UInt32 dwDuration;
        taf::Bool bPermanent;
        taf::Char cStorageFlag;
    };
    inline bool operator==(const StVoiceInfo&l, const StVoiceInfo&r)
    {
        return l.strVoiceId == r.strVoiceId && l.dwDuration == r.dwDuration && l.bPermanent == r.bPermanent && l.cStorageFlag == r.cStorageFlag;
    }
    inline bool operator!=(const StVoiceInfo&l, const StVoiceInfo&r)
    {
        return !(l == r);
    }

    struct StStarCardEvent : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "StarTimeline.StStarCardEvent";
        }
        static string MD5()
        {
            return "e2420a78318e029f1f58d844dec872a7";
        }
        StStarCardEvent()
        :strStarId(""),strText(""),llStartTime(0),llEndTime(0),strTitle(""),iSubType(0),iType(0),llFeedId(0)
        {
        }
        void resetDefautlt()
        {
            strStarId = "";
            strText = "";
            llStartTime = 0;
            llEndTime = 0;
            strTitle = "";
            iSubType = 0;
            iType = 0;
            llFeedId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strStarId, 0);
            _os.write(strText, 1);
            _os.write(llStartTime, 2);
            _os.write(llEndTime, 3);
            _os.write(strTitle, 4);
            _os.write(iSubType, 5);
            _os.write(iType, 6);
            _os.write(vecPicUrl, 7);
            _os.write(llFeedId, 8);
            _os.write(stVoice, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strStarId, 0, false);
            _is.read(strText, 1, false);
            _is.read(llStartTime, 2, false);
            _is.read(llEndTime, 3, false);
            _is.read(strTitle, 4, false);
            _is.read(iSubType, 5, false);
            _is.read(iType, 6, false);
            _is.read(vecPicUrl, 7, false);
            _is.read(llFeedId, 8, false);
            _is.read(stVoice, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strStarId,"strStarId");
            _ds.display(strText,"strText");
            _ds.display(llStartTime,"llStartTime");
            _ds.display(llEndTime,"llEndTime");
            _ds.display(strTitle,"strTitle");
            _ds.display(iSubType,"iSubType");
            _ds.display(iType,"iType");
            _ds.display(vecPicUrl,"vecPicUrl");
            _ds.display(llFeedId,"llFeedId");
            _ds.display(stVoice,"stVoice");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strStarId, true);
            _ds.displaySimple(strText, true);
            _ds.displaySimple(llStartTime, true);
            _ds.displaySimple(llEndTime, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(iSubType, true);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(vecPicUrl, true);
            _ds.displaySimple(llFeedId, true);
            _ds.displaySimple(stVoice, false);
            return _os;
        }
    public:
        std::string strStarId;
        std::string strText;
        taf::Int64 llStartTime;
        taf::Int64 llEndTime;
        std::string strTitle;
        taf::Int32 iSubType;
        taf::Int32 iType;
        vector<std::string> vecPicUrl;
        taf::Int64 llFeedId;
        StarTimeline::StVoiceInfo stVoice;
    };
    inline bool operator==(const StStarCardEvent&l, const StStarCardEvent&r)
    {
        return l.strStarId == r.strStarId && l.strText == r.strText && l.llStartTime == r.llStartTime && l.llEndTime == r.llEndTime && l.strTitle == r.strTitle && l.iSubType == r.iSubType && l.iType == r.iType && l.vecPicUrl == r.vecPicUrl && l.llFeedId == r.llFeedId && l.stVoice == r.stVoice;
    }
    inline bool operator!=(const StStarCardEvent&l, const StStarCardEvent&r)
    {
        return !(l == r);
    }


}

#define StarTimeline_FeedBasicInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.createTime,b.createTime);

#define StarTimeline_FeedIndex_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedIndex,b.feedIndex);

#define StarTimeline_StarInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ftId,b.ftId);jce_copy_struct(a.nick,b.nick);jce_copy_struct(a.head,b.head);jce_copy_struct(a.starId,b.starId);

#define StarTimeline_StarInfoList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starInfos,b.starInfos);

#define StarTimeline_StStarRank_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strStarId,b.strStarId);jce_copy_struct(a.uiRankCurWeek,b.uiRankCurWeek);jce_copy_struct(a.uiRankLastWeek,b.uiRankLastWeek);jce_copy_struct(a.iRankStatus,b.iRankStatus);

#define StarTimeline_StVoiceInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strVoiceId,b.strVoiceId);jce_copy_struct(a.dwDuration,b.dwDuration);jce_copy_struct(a.bPermanent,b.bPermanent);jce_copy_struct(a.cStorageFlag,b.cStorageFlag);

#define StarTimeline_StStarCardEvent_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strStarId,b.strStarId);jce_copy_struct(a.strText,b.strText);jce_copy_struct(a.llStartTime,b.llStartTime);jce_copy_struct(a.llEndTime,b.llEndTime);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.iSubType,b.iSubType);jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.vecPicUrl,b.vecPicUrl);jce_copy_struct(a.llFeedId,b.llFeedId);jce_copy_struct(a.stVoice,b.stVoice);



#endif
