// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `event_center.jce'
// **********************************************************************

#ifndef __EVENT_CENTER_H_
#define __EVENT_CENTER_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace JceEventCenter
{
    enum EEventCmd
    {
        CMD_OP_EVENT_ITEM = 62372,
        CMD_OP_EVENT_LIST = 62373,
        CMD_SETTING_UPDATE = 62374,
        CMD_DOKI_EVENT_BROADCAST = 62375,
    };
    inline string etos(const EEventCmd & e)
    {
        switch(e)
        {
            case CMD_OP_EVENT_ITEM: return "CMD_OP_EVENT_ITEM";
            case CMD_OP_EVENT_LIST: return "CMD_OP_EVENT_LIST";
            case CMD_SETTING_UPDATE: return "CMD_SETTING_UPDATE";
            case CMD_DOKI_EVENT_BROADCAST: return "CMD_DOKI_EVENT_BROADCAST";
            default: return "";
        }
    }
    inline int stoe(const string & s, EEventCmd & e)
    {
        if(s == "CMD_OP_EVENT_ITEM")  { e=CMD_OP_EVENT_ITEM; return 0;}
        if(s == "CMD_OP_EVENT_LIST")  { e=CMD_OP_EVENT_LIST; return 0;}
        if(s == "CMD_SETTING_UPDATE")  { e=CMD_SETTING_UPDATE; return 0;}
        if(s == "CMD_DOKI_EVENT_BROADCAST")  { e=CMD_DOKI_EVENT_BROADCAST; return 0;}

        return -1;
    }

    enum ModuleErrCode
    {
        E_SUC = 0,
    };
    inline string etos(const ModuleErrCode & e)
    {
        switch(e)
        {
            case E_SUC: return "E_SUC";
            default: return "";
        }
    }
    inline int stoe(const string & s, ModuleErrCode & e)
    {
        if(s == "E_SUC")  { e=E_SUC; return 0;}

        return -1;
    }

    enum EOperateType
    {
        E_NEW_EVENT = 1,
        E_MOD_EVENT = 2,
        E_DEL_EVENT = 3,
        E_TRIGGER_EVENT = 4,
    };
    inline string etos(const EOperateType & e)
    {
        switch(e)
        {
            case E_NEW_EVENT: return "E_NEW_EVENT";
            case E_MOD_EVENT: return "E_MOD_EVENT";
            case E_DEL_EVENT: return "E_DEL_EVENT";
            case E_TRIGGER_EVENT: return "E_TRIGGER_EVENT";
            default: return "";
        }
    }
    inline int stoe(const string & s, EOperateType & e)
    {
        if(s == "E_NEW_EVENT")  { e=E_NEW_EVENT; return 0;}
        if(s == "E_MOD_EVENT")  { e=E_MOD_EVENT; return 0;}
        if(s == "E_DEL_EVENT")  { e=E_DEL_EVENT; return 0;}
        if(s == "E_TRIGGER_EVENT")  { e=E_TRIGGER_EVENT; return 0;}

        return -1;
    }

    enum ETriggerType
    {
        E_TRIGGER_IMMEDIATE = 1,
        E_TRIGGER_ALARM = 2,
    };
    inline string etos(const ETriggerType & e)
    {
        switch(e)
        {
            case E_TRIGGER_IMMEDIATE: return "E_TRIGGER_IMMEDIATE";
            case E_TRIGGER_ALARM: return "E_TRIGGER_ALARM";
            default: return "";
        }
    }
    inline int stoe(const string & s, ETriggerType & e)
    {
        if(s == "E_TRIGGER_IMMEDIATE")  { e=E_TRIGGER_IMMEDIATE; return 0;}
        if(s == "E_TRIGGER_ALARM")  { e=E_TRIGGER_ALARM; return 0;}

        return -1;
    }

    enum EEventType
    {
        E_ET_ALL = 0,
        E_ET_STAR_BIRTH = 1,
        E_ET_STAR_SETTLE = 2,
        E_ET_STAR_WORKS_PUB = 3,
        E_ET_STAR_AWARDS = 4,
        E_ET_STAR_FANS_INCREASE = 5,
        E_ET_STAR_POPULARITY_CHANGE = 6,
    };
    inline string etos(const EEventType & e)
    {
        switch(e)
        {
            case E_ET_ALL: return "E_ET_ALL";
            case E_ET_STAR_BIRTH: return "E_ET_STAR_BIRTH";
            case E_ET_STAR_SETTLE: return "E_ET_STAR_SETTLE";
            case E_ET_STAR_WORKS_PUB: return "E_ET_STAR_WORKS_PUB";
            case E_ET_STAR_AWARDS: return "E_ET_STAR_AWARDS";
            case E_ET_STAR_FANS_INCREASE: return "E_ET_STAR_FANS_INCREASE";
            case E_ET_STAR_POPULARITY_CHANGE: return "E_ET_STAR_POPULARITY_CHANGE";
            default: return "";
        }
    }
    inline int stoe(const string & s, EEventType & e)
    {
        if(s == "E_ET_ALL")  { e=E_ET_ALL; return 0;}
        if(s == "E_ET_STAR_BIRTH")  { e=E_ET_STAR_BIRTH; return 0;}
        if(s == "E_ET_STAR_SETTLE")  { e=E_ET_STAR_SETTLE; return 0;}
        if(s == "E_ET_STAR_WORKS_PUB")  { e=E_ET_STAR_WORKS_PUB; return 0;}
        if(s == "E_ET_STAR_AWARDS")  { e=E_ET_STAR_AWARDS; return 0;}
        if(s == "E_ET_STAR_FANS_INCREASE")  { e=E_ET_STAR_FANS_INCREASE; return 0;}
        if(s == "E_ET_STAR_POPULARITY_CHANGE")  { e=E_ET_STAR_POPULARITY_CHANGE; return 0;}

        return -1;
    }

    enum EEventSubType
    {
        E_EST_NONE = 0,
        E_EST_POPULARITY_TOP = 1,
        E_EST_FANS_INCR_1 = 2,
        E_EST_FANS_INCR_2 = 3,
        E_EST_FANS_INCR_3 = 4,
        E_EST_FANS_INCR_4 = 5,
        E_EST_FANS_INCR_5 = 6,
        E_EST_FANS_INCR_6 = 7,
    };
    inline string etos(const EEventSubType & e)
    {
        switch(e)
        {
            case E_EST_NONE: return "E_EST_NONE";
            case E_EST_POPULARITY_TOP: return "E_EST_POPULARITY_TOP";
            case E_EST_FANS_INCR_1: return "E_EST_FANS_INCR_1";
            case E_EST_FANS_INCR_2: return "E_EST_FANS_INCR_2";
            case E_EST_FANS_INCR_3: return "E_EST_FANS_INCR_3";
            case E_EST_FANS_INCR_4: return "E_EST_FANS_INCR_4";
            case E_EST_FANS_INCR_5: return "E_EST_FANS_INCR_5";
            case E_EST_FANS_INCR_6: return "E_EST_FANS_INCR_6";
            default: return "";
        }
    }
    inline int stoe(const string & s, EEventSubType & e)
    {
        if(s == "E_EST_NONE")  { e=E_EST_NONE; return 0;}
        if(s == "E_EST_POPULARITY_TOP")  { e=E_EST_POPULARITY_TOP; return 0;}
        if(s == "E_EST_FANS_INCR_1")  { e=E_EST_FANS_INCR_1; return 0;}
        if(s == "E_EST_FANS_INCR_2")  { e=E_EST_FANS_INCR_2; return 0;}
        if(s == "E_EST_FANS_INCR_3")  { e=E_EST_FANS_INCR_3; return 0;}
        if(s == "E_EST_FANS_INCR_4")  { e=E_EST_FANS_INCR_4; return 0;}
        if(s == "E_EST_FANS_INCR_5")  { e=E_EST_FANS_INCR_5; return 0;}
        if(s == "E_EST_FANS_INCR_6")  { e=E_EST_FANS_INCR_6; return 0;}

        return -1;
    }

    struct stEventDetail : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "JceEventCenter.stEventDetail";
        }
        static string MD5()
        {
            return "bd9d5c4df0c610a3a69e3b038e1cb3f3";
        }
        stEventDetail()
        :iEventType(0),strEventId(""),lDokiId(0),bTriggerType(0),lTriggerTime(0),strData(""),strResId(""),triggered(0),lStartTime(0),lEndTime(0),iEventSubType(0)
        {
        }
        void resetDefautlt()
        {
            iEventType = 0;
            strEventId = "";
            lDokiId = 0;
            bTriggerType = 0;
            lTriggerTime = 0;
            strData = "";
            strResId = "";
            triggered = 0;
            lStartTime = 0;
            lEndTime = 0;
            iEventSubType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iEventType, 0);
            _os.write(strEventId, 1);
            _os.write(lDokiId, 2);
            _os.write(bTriggerType, 3);
            _os.write(lTriggerTime, 4);
            _os.write(strData, 5);
            _os.write(strResId, 6);
            _os.write(triggered, 7);
            _os.write(lStartTime, 8);
            _os.write(lEndTime, 9);
            _os.write(iEventSubType, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iEventType, 0, false);
            _is.read(strEventId, 1, false);
            _is.read(lDokiId, 2, false);
            _is.read(bTriggerType, 3, false);
            _is.read(lTriggerTime, 4, false);
            _is.read(strData, 5, false);
            _is.read(strResId, 6, false);
            _is.read(triggered, 7, false);
            _is.read(lStartTime, 8, false);
            _is.read(lEndTime, 9, false);
            _is.read(iEventSubType, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iEventType,"iEventType");
            _ds.display(strEventId,"strEventId");
            _ds.display(lDokiId,"lDokiId");
            _ds.display(bTriggerType,"bTriggerType");
            _ds.display(lTriggerTime,"lTriggerTime");
            _ds.display(strData,"strData");
            _ds.display(strResId,"strResId");
            _ds.display(triggered,"triggered");
            _ds.display(lStartTime,"lStartTime");
            _ds.display(lEndTime,"lEndTime");
            _ds.display(iEventSubType,"iEventSubType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iEventType, true);
            _ds.displaySimple(strEventId, true);
            _ds.displaySimple(lDokiId, true);
            _ds.displaySimple(bTriggerType, true);
            _ds.displaySimple(lTriggerTime, true);
            _ds.displaySimple(strData, true);
            _ds.displaySimple(strResId, true);
            _ds.displaySimple(triggered, true);
            _ds.displaySimple(lStartTime, true);
            _ds.displaySimple(lEndTime, true);
            _ds.displaySimple(iEventSubType, false);
            return _os;
        }
    public:
        taf::Int32 iEventType;
        std::string strEventId;
        taf::Int64 lDokiId;
        taf::Char bTriggerType;
        taf::Int64 lTriggerTime;
        std::string strData;
        std::string strResId;
        taf::Char triggered;
        taf::Int64 lStartTime;
        taf::Int64 lEndTime;
        taf::Int32 iEventSubType;
    };
    inline bool operator==(const stEventDetail&l, const stEventDetail&r)
    {
        return l.iEventType == r.iEventType && l.strEventId == r.strEventId && l.lDokiId == r.lDokiId && l.bTriggerType == r.bTriggerType && l.lTriggerTime == r.lTriggerTime && l.strData == r.strData && l.strResId == r.strResId && l.triggered == r.triggered && l.lStartTime == r.lStartTime && l.lEndTime == r.lEndTime && l.iEventSubType == r.iEventSubType;
    }
    inline bool operator!=(const stEventDetail&l, const stEventDetail&r)
    {
        return !(l == r);
    }

    struct stEventItemReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "JceEventCenter.stEventItemReq";
        }
        static string MD5()
        {
            return "ac7602bed705e65b53fd8f2105a70690";
        }
        stEventItemReq()
        :bOption(0),bScene(0)
        {
        }
        void resetDefautlt()
        {
            bOption = 0;
            bScene = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stDetail, 0);
            _os.write(bOption, 1);
            _os.write(bScene, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stDetail, 0, true);
            _is.read(bOption, 1, false);
            _is.read(bScene, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stDetail,"stDetail");
            _ds.display(bOption,"bOption");
            _ds.display(bScene,"bScene");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stDetail, true);
            _ds.displaySimple(bOption, true);
            _ds.displaySimple(bScene, false);
            return _os;
        }
    public:
        JceEventCenter::stEventDetail stDetail;
        taf::Char bOption;
        taf::Char bScene;
    };
    inline bool operator==(const stEventItemReq&l, const stEventItemReq&r)
    {
        return l.stDetail == r.stDetail && l.bOption == r.bOption && l.bScene == r.bScene;
    }
    inline bool operator!=(const stEventItemReq&l, const stEventItemReq&r)
    {
        return !(l == r);
    }

    struct stEventItemRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "JceEventCenter.stEventItemRsp";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        stEventItemRsp()
        :errCode(0),strEventId(""),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strEventId = "";
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strEventId, 1);
            _os.write(strErrMsg, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strEventId, 1, false);
            _is.read(strErrMsg, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strEventId,"strEventId");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strEventId, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strEventId;
        std::string strErrMsg;
    };
    inline bool operator==(const stEventItemRsp&l, const stEventItemRsp&r)
    {
        return l.errCode == r.errCode && l.strEventId == r.strEventId && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stEventItemRsp&l, const stEventItemRsp&r)
    {
        return !(l == r);
    }

    struct stEventListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "JceEventCenter.stEventListReq";
        }
        static string MD5()
        {
            return "5a805d72712bd8ee99210572cf2dd2ff";
        }
        stEventListReq()
        :lDokiId(0),iEventType(0),strPageContext("")
        {
        }
        void resetDefautlt()
        {
            lDokiId = 0;
            iEventType = 0;
            strPageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lDokiId, 0);
            _os.write(iEventType, 1);
            _os.write(strPageContext, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lDokiId, 0, true);
            _is.read(iEventType, 1, true);
            _is.read(strPageContext, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lDokiId,"lDokiId");
            _ds.display(iEventType,"iEventType");
            _ds.display(strPageContext,"strPageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lDokiId, true);
            _ds.displaySimple(iEventType, true);
            _ds.displaySimple(strPageContext, false);
            return _os;
        }
    public:
        taf::Int64 lDokiId;
        taf::Char iEventType;
        std::string strPageContext;
    };
    inline bool operator==(const stEventListReq&l, const stEventListReq&r)
    {
        return l.lDokiId == r.lDokiId && l.iEventType == r.iEventType && l.strPageContext == r.strPageContext;
    }
    inline bool operator!=(const stEventListReq&l, const stEventListReq&r)
    {
        return !(l == r);
    }

    struct stEventListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "JceEventCenter.stEventListRsp";
        }
        static string MD5()
        {
            return "efe2627e23dc49927d7c45342e062f9f";
        }
        stEventListRsp()
        :errCode(0),bHasNextPage(true),strPageContext(""),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            bHasNextPage = true;
            strPageContext = "";
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(vecEventList, 1);
            _os.write(bHasNextPage, 2);
            _os.write(strPageContext, 3);
            _os.write(strErrMsg, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(vecEventList, 1, false);
            _is.read(bHasNextPage, 2, false);
            _is.read(strPageContext, 3, false);
            _is.read(strErrMsg, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(vecEventList,"vecEventList");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strPageContext,"strPageContext");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(vecEventList, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strPageContext, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<JceEventCenter::stEventDetail> vecEventList;
        taf::Bool bHasNextPage;
        std::string strPageContext;
        std::string strErrMsg;
    };
    inline bool operator==(const stEventListRsp&l, const stEventListRsp&r)
    {
        return l.errCode == r.errCode && l.vecEventList == r.vecEventList && l.bHasNextPage == r.bHasNextPage && l.strPageContext == r.strPageContext && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stEventListRsp&l, const stEventListRsp&r)
    {
        return !(l == r);
    }

    struct stSettingUpdateReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "JceEventCenter.stSettingUpdateReq";
        }
        static string MD5()
        {
            return "a9912761d757dc94719a6768db5f4f78";
        }
        stSettingUpdateReq()
        :strSettingId(""),lDokiId(0),cUpdateType(0),strData("")
        {
        }
        void resetDefautlt()
        {
            strSettingId = "";
            lDokiId = 0;
            cUpdateType = 0;
            strData = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strSettingId, 0);
            _os.write(lDokiId, 2);
            _os.write(cUpdateType, 3);
            _os.write(strData, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strSettingId, 0, true);
            _is.read(lDokiId, 2, false);
            _is.read(cUpdateType, 3, false);
            _is.read(strData, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strSettingId,"strSettingId");
            _ds.display(lDokiId,"lDokiId");
            _ds.display(cUpdateType,"cUpdateType");
            _ds.display(strData,"strData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strSettingId, true);
            _ds.displaySimple(lDokiId, true);
            _ds.displaySimple(cUpdateType, true);
            _ds.displaySimple(strData, false);
            return _os;
        }
    public:
        std::string strSettingId;
        taf::Int64 lDokiId;
        taf::Char cUpdateType;
        std::string strData;
    };
    inline bool operator==(const stSettingUpdateReq&l, const stSettingUpdateReq&r)
    {
        return l.strSettingId == r.strSettingId && l.lDokiId == r.lDokiId && l.cUpdateType == r.cUpdateType && l.strData == r.strData;
    }
    inline bool operator!=(const stSettingUpdateReq&l, const stSettingUpdateReq&r)
    {
        return !(l == r);
    }

    struct stSettingUpdateRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "JceEventCenter.stSettingUpdateRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        stSettingUpdateRsp()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const stSettingUpdateRsp&l, const stSettingUpdateRsp&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const stSettingUpdateRsp&l, const stSettingUpdateRsp&r)
    {
        return !(l == r);
    }

    struct stEventTransMsg : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "JceEventCenter.stEventTransMsg";
        }
        static string MD5()
        {
            return "24da58b11220925cd0337648da6f959e";
        }
        stEventTransMsg()
        :bOption(0)
        {
        }
        void resetDefautlt()
        {
            bOption = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stEvent, 0);
            _os.write(bOption, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stEvent, 0, true);
            _is.read(bOption, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stEvent,"stEvent");
            _ds.display(bOption,"bOption");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stEvent, true);
            _ds.displaySimple(bOption, false);
            return _os;
        }
    public:
        JceEventCenter::stEventDetail stEvent;
        taf::Char bOption;
    };
    inline bool operator==(const stEventTransMsg&l, const stEventTransMsg&r)
    {
        return l.stEvent == r.stEvent && l.bOption == r.bOption;
    }
    inline bool operator!=(const stEventTransMsg&l, const stEventTransMsg&r)
    {
        return !(l == r);
    }


}

#define JceEventCenter_stEventDetail_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iEventType,b.iEventType);jce_copy_struct(a.strEventId,b.strEventId);jce_copy_struct(a.lDokiId,b.lDokiId);jce_copy_struct(a.bTriggerType,b.bTriggerType);jce_copy_struct(a.lTriggerTime,b.lTriggerTime);jce_copy_struct(a.strData,b.strData);jce_copy_struct(a.strResId,b.strResId);jce_copy_struct(a.triggered,b.triggered);jce_copy_struct(a.lStartTime,b.lStartTime);jce_copy_struct(a.lEndTime,b.lEndTime);jce_copy_struct(a.iEventSubType,b.iEventSubType);

#define JceEventCenter_stEventItemReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stDetail,b.stDetail);jce_copy_struct(a.bOption,b.bOption);jce_copy_struct(a.bScene,b.bScene);

#define JceEventCenter_stEventItemRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strEventId,b.strEventId);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define JceEventCenter_stEventListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lDokiId,b.lDokiId);jce_copy_struct(a.iEventType,b.iEventType);jce_copy_struct(a.strPageContext,b.strPageContext);

#define JceEventCenter_stEventListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.vecEventList,b.vecEventList);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strPageContext,b.strPageContext);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define JceEventCenter_stSettingUpdateReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strSettingId,b.strSettingId);jce_copy_struct(a.lDokiId,b.lDokiId);jce_copy_struct(a.cUpdateType,b.cUpdateType);jce_copy_struct(a.strData,b.strData);

#define JceEventCenter_stSettingUpdateRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define JceEventCenter_stEventTransMsg_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stEvent,b.stEvent);jce_copy_struct(a.bOption,b.bOption);



#endif
