// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_doki.jce'
// **********************************************************************

#ifndef __QQVIDEO_DOKI_H_
#define __QQVIDEO_DOKI_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"


namespace jce
{
    struct DokiMainNavRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiMainNavRequest";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        DokiMainNavRequest()
        :type(0),dataKey("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(dataKey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(dataKey, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string dataKey;
    };
    inline bool operator==(const DokiMainNavRequest&l, const DokiMainNavRequest&r)
    {
        return l.type == r.type && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const DokiMainNavRequest&l, const DokiMainNavRequest&r)
    {
        return !(l == r);
    }

    struct DokiMainNavResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiMainNavResponse";
        }
        static string MD5()
        {
            return "93c4c38d234ae24e0384c3c71b00aaaa";
        }
        DokiMainNavResponse()
        :errCode(0),defaultSelectedType(0),defaultSelectedId(""),navBucketId("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            defaultSelectedType = 0;
            defaultSelectedId = "";
            navBucketId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(channelList, 1);
            _os.write(actorList, 2);
            _os.write(defaultSelectedType, 3);
            _os.write(defaultSelectedId, 4);
            _os.write(navBucketId, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(channelList, 1, false);
            _is.read(actorList, 2, false);
            _is.read(defaultSelectedType, 3, false);
            _is.read(defaultSelectedId, 4, false);
            _is.read(navBucketId, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(channelList,"channelList");
            _ds.display(actorList,"actorList");
            _ds.display(defaultSelectedType,"defaultSelectedType");
            _ds.display(defaultSelectedId,"defaultSelectedId");
            _ds.display(navBucketId,"navBucketId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(channelList, true);
            _ds.displaySimple(actorList, true);
            _ds.displaySimple(defaultSelectedType, true);
            _ds.displaySimple(defaultSelectedId, true);
            _ds.displaySimple(navBucketId, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::ChannelListItem> channelList;
        vector<jce::DokiBaseLiteInfo> actorList;
        taf::Int32 defaultSelectedType;
        std::string defaultSelectedId;
        std::string navBucketId;
    };
    inline bool operator==(const DokiMainNavResponse&l, const DokiMainNavResponse&r)
    {
        return l.errCode == r.errCode && l.channelList == r.channelList && l.actorList == r.actorList && l.defaultSelectedType == r.defaultSelectedType && l.defaultSelectedId == r.defaultSelectedId && l.navBucketId == r.navBucketId;
    }
    inline bool operator!=(const DokiMainNavResponse&l, const DokiMainNavResponse&r)
    {
        return !(l == r);
    }

    struct DokiCardBaseInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiCardBaseInfo";
        }
        static string MD5()
        {
            return "93c47a984bb6479286ed70b1941a5d97";
        }
        DokiCardBaseInfo()
        :title(""),subTitle(""),likeCount(0),feedId(""),feedDataKey(""),pubTime(0)
        {
        }
        void resetDefautlt()
        {
            title = "";
            subTitle = "";
            likeCount = 0;
            feedId = "";
            feedDataKey = "";
            pubTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(images, 0);
            _os.write(userInfo, 1);
            _os.write(title, 2);
            _os.write(subTitle, 3);
            _os.write(marklabels, 4);
            _os.write(cardAction, 5);
            _os.write(likeCount, 6);
            _os.write(feedId, 7);
            _os.write(feedDataKey, 8);
            _os.write(pubTime, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(images, 0, false);
            _is.read(userInfo, 1, false);
            _is.read(title, 2, false);
            _is.read(subTitle, 3, false);
            _is.read(marklabels, 4, false);
            _is.read(cardAction, 5, false);
            _is.read(likeCount, 6, false);
            _is.read(feedId, 7, false);
            _is.read(feedDataKey, 8, false);
            _is.read(pubTime, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(images,"images");
            _ds.display(userInfo,"userInfo");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(marklabels,"marklabels");
            _ds.display(cardAction,"cardAction");
            _ds.display(likeCount,"likeCount");
            _ds.display(feedId,"feedId");
            _ds.display(feedDataKey,"feedDataKey");
            _ds.display(pubTime,"pubTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(images, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(marklabels, true);
            _ds.displaySimple(cardAction, true);
            _ds.displaySimple(likeCount, true);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(feedDataKey, true);
            _ds.displaySimple(pubTime, false);
            return _os;
        }
    public:
        vector<jce::CircleMsgImageUrl> images;
        jce::DokiBaseLiteInfo userInfo;
        std::string title;
        std::string subTitle;
        vector<jce::MarkLabel> marklabels;
        jce::Action cardAction;
        taf::Int64 likeCount;
        std::string feedId;
        std::string feedDataKey;
        taf::Int64 pubTime;
    };
    inline bool operator==(const DokiCardBaseInfo&l, const DokiCardBaseInfo&r)
    {
        return l.images == r.images && l.userInfo == r.userInfo && l.title == r.title && l.subTitle == r.subTitle && l.marklabels == r.marklabels && l.cardAction == r.cardAction && l.likeCount == r.likeCount && l.feedId == r.feedId && l.feedDataKey == r.feedDataKey && l.pubTime == r.pubTime;
    }
    inline bool operator!=(const DokiCardBaseInfo&l, const DokiCardBaseInfo&r)
    {
        return !(l == r);
    }

    struct ONADokiCommonFeedCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiCommonFeedCard";
        }
        static string MD5()
        {
            return "4aa9608f6df2b2ba5cb0c7ef5c83d0ff";
        }
        ONADokiCommonFeedCard()
        :reportKey(""),reportParams(""),reportEventId("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            reportEventId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cardInfo, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
            _os.write(reportEventId, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cardInfo, 0, false);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
            _is.read(reportEventId, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cardInfo,"cardInfo");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportEventId,"reportEventId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cardInfo, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportEventId, false);
            return _os;
        }
    public:
        jce::DokiCardBaseInfo cardInfo;
        std::string reportKey;
        std::string reportParams;
        std::string reportEventId;
    };
    inline bool operator==(const ONADokiCommonFeedCard&l, const ONADokiCommonFeedCard&r)
    {
        return l.cardInfo == r.cardInfo && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.reportEventId == r.reportEventId;
    }
    inline bool operator!=(const ONADokiCommonFeedCard&l, const ONADokiCommonFeedCard&r)
    {
        return !(l == r);
    }

    struct ONADokiStarFeedCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiStarFeedCard";
        }
        static string MD5()
        {
            return "e8a1feb307392e32acf0ad05381dd4d8";
        }
        ONADokiStarFeedCard()
        :reportKey(""),reportParams(""),reportEventId("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            reportEventId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cardInfo, 0);
            _os.write(source, 1);
            _os.write(voiceData, 2);
            _os.write(moreAction, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
            _os.write(reportEventId, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cardInfo, 0, false);
            _is.read(source, 1, false);
            _is.read(voiceData, 2, false);
            _is.read(moreAction, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
            _is.read(reportEventId, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cardInfo,"cardInfo");
            _ds.display(source,"source");
            _ds.display(voiceData,"voiceData");
            _ds.display(moreAction,"moreAction");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportEventId,"reportEventId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cardInfo, true);
            _ds.displaySimple(source, true);
            _ds.displaySimple(voiceData, true);
            _ds.displaySimple(moreAction, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportEventId, false);
            return _os;
        }
    public:
        jce::DokiCardBaseInfo cardInfo;
        jce::FeedSource source;
        jce::ApolloVoiceData voiceData;
        jce::TextAction moreAction;
        std::string reportKey;
        std::string reportParams;
        std::string reportEventId;
    };
    inline bool operator==(const ONADokiStarFeedCard&l, const ONADokiStarFeedCard&r)
    {
        return l.cardInfo == r.cardInfo && l.source == r.source && l.voiceData == r.voiceData && l.moreAction == r.moreAction && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.reportEventId == r.reportEventId;
    }
    inline bool operator!=(const ONADokiStarFeedCard&l, const ONADokiStarFeedCard&r)
    {
        return !(l == r);
    }

    struct ONADokiStarLiveCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiStarLiveCard";
        }
        static string MD5()
        {
            return "72b638e90cf66e99fa89e627798257a4";
        }
        ONADokiStarLiveCard()
        :topDescText(""),bottomLeftDescText(""),content(""),lottieUrl(""),liveStatus(0),reportKey(""),reportParams(""),reportEventId(""),pid("")
        {
        }
        void resetDefautlt()
        {
            topDescText = "";
            bottomLeftDescText = "";
            content = "";
            lottieUrl = "";
            liveStatus = 0;
            reportKey = "";
            reportParams = "";
            reportEventId = "";
            pid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(images, 0);
            _os.write(topDescText, 1);
            _os.write(bottomLeftDescText, 2);
            _os.write(bottomRightAction, 3);
            _os.write(content, 4);
            _os.write(voiceData, 5);
            _os.write(actors, 6);
            _os.write(lottieUrl, 7);
            _os.write(liveStatus, 8);
            _os.write(attentItem, 9);
            _os.write(cardAction, 10);
            _os.write(reportKey, 11);
            _os.write(reportParams, 12);
            _os.write(reportEventId, 13);
            _os.write(pid, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(images, 0, false);
            _is.read(topDescText, 1, false);
            _is.read(bottomLeftDescText, 2, false);
            _is.read(bottomRightAction, 3, false);
            _is.read(content, 4, false);
            _is.read(voiceData, 5, false);
            _is.read(actors, 6, false);
            _is.read(lottieUrl, 7, false);
            _is.read(liveStatus, 8, false);
            _is.read(attentItem, 9, false);
            _is.read(cardAction, 10, false);
            _is.read(reportKey, 11, false);
            _is.read(reportParams, 12, false);
            _is.read(reportEventId, 13, false);
            _is.read(pid, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(images,"images");
            _ds.display(topDescText,"topDescText");
            _ds.display(bottomLeftDescText,"bottomLeftDescText");
            _ds.display(bottomRightAction,"bottomRightAction");
            _ds.display(content,"content");
            _ds.display(voiceData,"voiceData");
            _ds.display(actors,"actors");
            _ds.display(lottieUrl,"lottieUrl");
            _ds.display(liveStatus,"liveStatus");
            _ds.display(attentItem,"attentItem");
            _ds.display(cardAction,"cardAction");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportEventId,"reportEventId");
            _ds.display(pid,"pid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(images, true);
            _ds.displaySimple(topDescText, true);
            _ds.displaySimple(bottomLeftDescText, true);
            _ds.displaySimple(bottomRightAction, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(voiceData, true);
            _ds.displaySimple(actors, true);
            _ds.displaySimple(lottieUrl, true);
            _ds.displaySimple(liveStatus, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(cardAction, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportEventId, true);
            _ds.displaySimple(pid, false);
            return _os;
        }
    public:
        vector<jce::CircleMsgImageUrl> images;
        std::string topDescText;
        std::string bottomLeftDescText;
        jce::TextAction bottomRightAction;
        std::string content;
        jce::ApolloVoiceData voiceData;
        vector<jce::DokiBaseLiteInfo> actors;
        std::string lottieUrl;
        taf::Int32 liveStatus;
        jce::VideoAttentItem attentItem;
        jce::Action cardAction;
        std::string reportKey;
        std::string reportParams;
        std::string reportEventId;
        std::string pid;
    };
    inline bool operator==(const ONADokiStarLiveCard&l, const ONADokiStarLiveCard&r)
    {
        return l.images == r.images && l.topDescText == r.topDescText && l.bottomLeftDescText == r.bottomLeftDescText && l.bottomRightAction == r.bottomRightAction && l.content == r.content && l.voiceData == r.voiceData && l.actors == r.actors && l.lottieUrl == r.lottieUrl && l.liveStatus == r.liveStatus && l.attentItem == r.attentItem && l.cardAction == r.cardAction && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.reportEventId == r.reportEventId && l.pid == r.pid;
    }
    inline bool operator!=(const ONADokiStarLiveCard&l, const ONADokiStarLiveCard&r)
    {
        return !(l == r);
    }

    struct ONADokiEntertamentNewsCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiEntertamentNewsCard";
        }
        static string MD5()
        {
            return "4aa9608f6df2b2ba5cb0c7ef5c83d0ff";
        }
        ONADokiEntertamentNewsCard()
        :reportKey(""),reportParams(""),reportEventId("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            reportEventId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cardInfo, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
            _os.write(reportEventId, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cardInfo, 0, false);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
            _is.read(reportEventId, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cardInfo,"cardInfo");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportEventId,"reportEventId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cardInfo, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportEventId, false);
            return _os;
        }
    public:
        jce::DokiCardBaseInfo cardInfo;
        std::string reportKey;
        std::string reportParams;
        std::string reportEventId;
    };
    inline bool operator==(const ONADokiEntertamentNewsCard&l, const ONADokiEntertamentNewsCard&r)
    {
        return l.cardInfo == r.cardInfo && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.reportEventId == r.reportEventId;
    }
    inline bool operator!=(const ONADokiEntertamentNewsCard&l, const ONADokiEntertamentNewsCard&r)
    {
        return !(l == r);
    }

    struct ONADokiFansVideoCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiFansVideoCard";
        }
        static string MD5()
        {
            return "8d717df03fc802851a83b9c6c356d3ef";
        }
        ONADokiFansVideoCard()
        :reportKey(""),reportParams(""),reportEventId(""),uiType(0)
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            reportEventId = "";
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cardInfo, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
            _os.write(reportEventId, 3);
            _os.write(uiType, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cardInfo, 0, false);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
            _is.read(reportEventId, 3, false);
            _is.read(uiType, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cardInfo,"cardInfo");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportEventId,"reportEventId");
            _ds.display(uiType,"uiType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cardInfo, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportEventId, true);
            _ds.displaySimple(uiType, false);
            return _os;
        }
    public:
        jce::DokiCardBaseInfo cardInfo;
        std::string reportKey;
        std::string reportParams;
        std::string reportEventId;
        taf::Int32 uiType;
    };
    inline bool operator==(const ONADokiFansVideoCard&l, const ONADokiFansVideoCard&r)
    {
        return l.cardInfo == r.cardInfo && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.reportEventId == r.reportEventId && l.uiType == r.uiType;
    }
    inline bool operator!=(const ONADokiFansVideoCard&l, const ONADokiFansVideoCard&r)
    {
        return !(l == r);
    }

    struct ONADokiStarGroupCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiStarGroupCard";
        }
        static string MD5()
        {
            return "89f58d370d7dc7e058a4a94c2bb73fcb";
        }
        ONADokiStarGroupCard()
        :title(""),subTitle(""),reportKey(""),reportParams(""),reportEventId("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            subTitle = "";
            reportKey = "";
            reportParams = "";
            reportEventId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(subTitle, 1);
            _os.write(cardAction, 2);
            _os.write(dokiList, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
            _os.write(reportEventId, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(subTitle, 1, false);
            _is.read(cardAction, 2, false);
            _is.read(dokiList, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
            _is.read(reportEventId, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(cardAction,"cardAction");
            _ds.display(dokiList,"dokiList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportEventId,"reportEventId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(cardAction, true);
            _ds.displaySimple(dokiList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportEventId, false);
            return _os;
        }
    public:
        std::string title;
        std::string subTitle;
        jce::Action cardAction;
        vector<jce::DokiBaseLiteInfo> dokiList;
        std::string reportKey;
        std::string reportParams;
        std::string reportEventId;
    };
    inline bool operator==(const ONADokiStarGroupCard&l, const ONADokiStarGroupCard&r)
    {
        return l.title == r.title && l.subTitle == r.subTitle && l.cardAction == r.cardAction && l.dokiList == r.dokiList && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.reportEventId == r.reportEventId;
    }
    inline bool operator!=(const ONADokiStarGroupCard&l, const ONADokiStarGroupCard&r)
    {
        return !(l == r);
    }

    struct ONADokiGalleryGroupCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiGalleryGroupCard";
        }
        static string MD5()
        {
            return "eb309c594758efaf701738ff210ed7b4";
        }
        ONADokiGalleryGroupCard()
        :title(""),subTitle(""),uiType(0),reportKey(""),reportParams(""),reportEventId("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            subTitle = "";
            uiType = 0;
            reportKey = "";
            reportParams = "";
            reportEventId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(subTitle, 1);
            _os.write(cardAction, 2);
            _os.write(imageList, 3);
            _os.write(uiType, 4);
            _os.write(reportKey, 5);
            _os.write(reportParams, 6);
            _os.write(reportEventId, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(subTitle, 1, false);
            _is.read(cardAction, 2, false);
            _is.read(imageList, 3, false);
            _is.read(uiType, 4, false);
            _is.read(reportKey, 5, false);
            _is.read(reportParams, 6, false);
            _is.read(reportEventId, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(cardAction,"cardAction");
            _ds.display(imageList,"imageList");
            _ds.display(uiType,"uiType");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportEventId,"reportEventId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(cardAction, true);
            _ds.displaySimple(imageList, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportEventId, false);
            return _os;
        }
    public:
        std::string title;
        std::string subTitle;
        jce::Action cardAction;
        vector<jce::CircleMsgImageUrl> imageList;
        taf::Int32 uiType;
        std::string reportKey;
        std::string reportParams;
        std::string reportEventId;
    };
    inline bool operator==(const ONADokiGalleryGroupCard&l, const ONADokiGalleryGroupCard&r)
    {
        return l.title == r.title && l.subTitle == r.subTitle && l.cardAction == r.cardAction && l.imageList == r.imageList && l.uiType == r.uiType && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.reportEventId == r.reportEventId;
    }
    inline bool operator!=(const ONADokiGalleryGroupCard&l, const ONADokiGalleryGroupCard&r)
    {
        return !(l == r);
    }

    struct ONADokiTopTenGroupCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiTopTenGroupCard";
        }
        static string MD5()
        {
            return "4aa9608f6df2b2ba5cb0c7ef5c83d0ff";
        }
        ONADokiTopTenGroupCard()
        :reportKey(""),reportParams(""),reportEventId("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            reportEventId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cardInfo, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
            _os.write(reportEventId, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cardInfo, 0, false);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
            _is.read(reportEventId, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cardInfo,"cardInfo");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportEventId,"reportEventId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cardInfo, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportEventId, false);
            return _os;
        }
    public:
        jce::DokiCardBaseInfo cardInfo;
        std::string reportKey;
        std::string reportParams;
        std::string reportEventId;
    };
    inline bool operator==(const ONADokiTopTenGroupCard&l, const ONADokiTopTenGroupCard&r)
    {
        return l.cardInfo == r.cardInfo && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.reportEventId == r.reportEventId;
    }
    inline bool operator!=(const ONADokiTopTenGroupCard&l, const ONADokiTopTenGroupCard&r)
    {
        return !(l == r);
    }

    struct ONADokiMoreInfoBar : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiMoreInfoBar";
        }
        static string MD5()
        {
            return "f4b83f59b5ebf8cb28ee72deb00d6916";
        }
        ONADokiMoreInfoBar()
        :text(""),textColor(""),reportKey(""),reportParams(""),reportEventId("")
        {
        }
        void resetDefautlt()
        {
            text = "";
            textColor = "";
            reportKey = "";
            reportParams = "";
            reportEventId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(text, 0);
            _os.write(textColor, 1);
            _os.write(action, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
            _os.write(reportEventId, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(text, 0, false);
            _is.read(textColor, 1, false);
            _is.read(action, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
            _is.read(reportEventId, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(text,"text");
            _ds.display(textColor,"textColor");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportEventId,"reportEventId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(text, true);
            _ds.displaySimple(textColor, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportEventId, false);
            return _os;
        }
    public:
        std::string text;
        std::string textColor;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
        std::string reportEventId;
    };
    inline bool operator==(const ONADokiMoreInfoBar&l, const ONADokiMoreInfoBar&r)
    {
        return l.text == r.text && l.textColor == r.textColor && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.reportEventId == r.reportEventId;
    }
    inline bool operator!=(const ONADokiMoreInfoBar&l, const ONADokiMoreInfoBar&r)
    {
        return !(l == r);
    }

    struct ONADokiCoverCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiCoverCard";
        }
        static string MD5()
        {
            return "4aa9608f6df2b2ba5cb0c7ef5c83d0ff";
        }
        ONADokiCoverCard()
        :reportKey(""),reportParams(""),reportEventId("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            reportEventId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cardInfo, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
            _os.write(reportEventId, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cardInfo, 0, false);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
            _is.read(reportEventId, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cardInfo,"cardInfo");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportEventId,"reportEventId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cardInfo, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportEventId, false);
            return _os;
        }
    public:
        jce::DokiCardBaseInfo cardInfo;
        std::string reportKey;
        std::string reportParams;
        std::string reportEventId;
    };
    inline bool operator==(const ONADokiCoverCard&l, const ONADokiCoverCard&r)
    {
        return l.cardInfo == r.cardInfo && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.reportEventId == r.reportEventId;
    }
    inline bool operator!=(const ONADokiCoverCard&l, const ONADokiCoverCard&r)
    {
        return !(l == r);
    }

    struct DokiGroupDataPageRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiGroupDataPageRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        DokiGroupDataPageRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const DokiGroupDataPageRequest&l, const DokiGroupDataPageRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const DokiGroupDataPageRequest&l, const DokiGroupDataPageRequest&r)
    {
        return !(l == r);
    }

    struct DokiGroupDataPageResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiGroupDataPageResponse";
        }
        static string MD5()
        {
            return "ad84605aa73491ad1d4df9f463d573b5";
        }
        DokiGroupDataPageResponse()
        :errorCode(0),pageContext(""),hasNextPage(true),title("")
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            pageContext = "";
            hasNextPage = true;
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(title, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(title, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
        std::string title;
    };
    inline bool operator==(const DokiGroupDataPageResponse&l, const DokiGroupDataPageResponse&r)
    {
        return l.errorCode == r.errorCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.title == r.title;
    }
    inline bool operator!=(const DokiGroupDataPageResponse&l, const DokiGroupDataPageResponse&r)
    {
        return !(l == r);
    }

    struct DokiCommonReportRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiCommonReportRequest";
        }
        static string MD5()
        {
            return "de50d7cd52dae5ef0d013ba49ccdf1a6";
        }
        DokiCommonReportRequest()
        :eventId("")
        {
        }
        void resetDefautlt()
        {
            eventId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(eventId, 0);
            _os.write(kValue, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(eventId, 0, true);
            _is.read(kValue, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(eventId,"eventId");
            _ds.display(kValue,"kValue");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(eventId, true);
            _ds.displaySimple(kValue, false);
            return _os;
        }
    public:
        std::string eventId;
        map<std::string, std::string> kValue;
    };
    inline bool operator==(const DokiCommonReportRequest&l, const DokiCommonReportRequest&r)
    {
        return l.eventId == r.eventId && l.kValue == r.kValue;
    }
    inline bool operator!=(const DokiCommonReportRequest&l, const DokiCommonReportRequest&r)
    {
        return !(l == r);
    }

    struct DokiCommonReportResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiCommonReportResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        DokiCommonReportResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const DokiCommonReportResponse&l, const DokiCommonReportResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const DokiCommonReportResponse&l, const DokiCommonReportResponse&r)
    {
        return !(l == r);
    }

    struct ONAHorizonBulletinBoardFeed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAHorizonBulletinBoardFeed";
        }
        static string MD5()
        {
            return "c5ff065aa5354ef50848b231c5741c6e";
        }
        ONAHorizonBulletinBoardFeed()
        :feedId(""),dataKey(""),feedTitle(""),content(""),commentCount(0),likeCount(0),shareUrl("")
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            dataKey = "";
            feedTitle = "";
            content = "";
            commentCount = 0;
            likeCount = 0;
            shareUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(dataKey, 1);
            _os.write(feedTitle, 2);
            _os.write(content, 3);
            _os.write(user, 4);
            _os.write(commentCount, 5);
            _os.write(likeCount, 6);
            _os.write(bulletinBoardV2, 7);
            _os.write(feedAction, 8);
            _os.write(shareUrl, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(dataKey, 1, false);
            _is.read(feedTitle, 2, false);
            _is.read(content, 3, false);
            _is.read(user, 4, false);
            _is.read(commentCount, 5, false);
            _is.read(likeCount, 6, false);
            _is.read(bulletinBoardV2, 7, false);
            _is.read(feedAction, 8, false);
            _is.read(shareUrl, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(dataKey,"dataKey");
            _ds.display(feedTitle,"feedTitle");
            _ds.display(content,"content");
            _ds.display(user,"user");
            _ds.display(commentCount,"commentCount");
            _ds.display(likeCount,"likeCount");
            _ds.display(bulletinBoardV2,"bulletinBoardV2");
            _ds.display(feedAction,"feedAction");
            _ds.display(shareUrl,"shareUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(feedTitle, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(user, true);
            _ds.displaySimple(commentCount, true);
            _ds.displaySimple(likeCount, true);
            _ds.displaySimple(bulletinBoardV2, true);
            _ds.displaySimple(feedAction, true);
            _ds.displaySimple(shareUrl, false);
            return _os;
        }
    public:
        std::string feedId;
        std::string dataKey;
        std::string feedTitle;
        std::string content;
        jce::ActorInfo user;
        taf::Int32 commentCount;
        taf::Int32 likeCount;
        jce::ONABulletinBoardV2 bulletinBoardV2;
        jce::Action feedAction;
        std::string shareUrl;
    };
    inline bool operator==(const ONAHorizonBulletinBoardFeed&l, const ONAHorizonBulletinBoardFeed&r)
    {
        return l.feedId == r.feedId && l.dataKey == r.dataKey && l.feedTitle == r.feedTitle && l.content == r.content && l.user == r.user && l.commentCount == r.commentCount && l.likeCount == r.likeCount && l.bulletinBoardV2 == r.bulletinBoardV2 && l.feedAction == r.feedAction && l.shareUrl == r.shareUrl;
    }
    inline bool operator!=(const ONAHorizonBulletinBoardFeed&l, const ONAHorizonBulletinBoardFeed&r)
    {
        return !(l == r);
    }

    struct ONADokiVideoCoverCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiVideoCoverCard";
        }
        static string MD5()
        {
            return "4aa9608f6df2b2ba5cb0c7ef5c83d0ff";
        }
        ONADokiVideoCoverCard()
        :reportKey(""),reportParams(""),reportEventId("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            reportEventId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cardInfo, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
            _os.write(reportEventId, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cardInfo, 0, false);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
            _is.read(reportEventId, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cardInfo,"cardInfo");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportEventId,"reportEventId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cardInfo, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportEventId, false);
            return _os;
        }
    public:
        jce::DokiCardBaseInfo cardInfo;
        std::string reportKey;
        std::string reportParams;
        std::string reportEventId;
    };
    inline bool operator==(const ONADokiVideoCoverCard&l, const ONADokiVideoCoverCard&r)
    {
        return l.cardInfo == r.cardInfo && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.reportEventId == r.reportEventId;
    }
    inline bool operator!=(const ONADokiVideoCoverCard&l, const ONADokiVideoCoverCard&r)
    {
        return !(l == r);
    }

    struct DokiVerticalBrushFeedsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiVerticalBrushFeedsRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        DokiVerticalBrushFeedsRequest()
        :dataKey(""),pageContext(""),reportData("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
            reportData = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
            _os.write(reportData, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(reportData, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(reportData,"reportData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(reportData, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
        std::string reportData;
    };
    inline bool operator==(const DokiVerticalBrushFeedsRequest&l, const DokiVerticalBrushFeedsRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.reportData == r.reportData;
    }
    inline bool operator!=(const DokiVerticalBrushFeedsRequest&l, const DokiVerticalBrushFeedsRequest&r)
    {
        return !(l == r);
    }

    struct DokiVerticalBrushFeedsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiVerticalBrushFeedsResponse";
        }
        static string MD5()
        {
            return "8e20d544570fc1e65bbb5ca7673ea635";
        }
        DokiVerticalBrushFeedsResponse()
        :errorCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const DokiVerticalBrushFeedsResponse&l, const DokiVerticalBrushFeedsResponse&r)
    {
        return l.errorCode == r.errorCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const DokiVerticalBrushFeedsResponse&l, const DokiVerticalBrushFeedsResponse&r)
    {
        return !(l == r);
    }


}

#define jce_DokiMainNavRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_DokiMainNavResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.channelList,b.channelList);jce_copy_struct(a.actorList,b.actorList);jce_copy_struct(a.defaultSelectedType,b.defaultSelectedType);jce_copy_struct(a.defaultSelectedId,b.defaultSelectedId);jce_copy_struct(a.navBucketId,b.navBucketId);

#define jce_DokiCardBaseInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.images,b.images);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.marklabels,b.marklabels);jce_copy_struct(a.cardAction,b.cardAction);jce_copy_struct(a.likeCount,b.likeCount);jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.feedDataKey,b.feedDataKey);jce_copy_struct(a.pubTime,b.pubTime);

#define jce_ONADokiCommonFeedCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cardInfo,b.cardInfo);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportEventId,b.reportEventId);

#define jce_ONADokiStarFeedCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cardInfo,b.cardInfo);jce_copy_struct(a.source,b.source);jce_copy_struct(a.voiceData,b.voiceData);jce_copy_struct(a.moreAction,b.moreAction);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportEventId,b.reportEventId);

#define jce_ONADokiStarLiveCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.images,b.images);jce_copy_struct(a.topDescText,b.topDescText);jce_copy_struct(a.bottomLeftDescText,b.bottomLeftDescText);jce_copy_struct(a.bottomRightAction,b.bottomRightAction);jce_copy_struct(a.content,b.content);jce_copy_struct(a.voiceData,b.voiceData);jce_copy_struct(a.actors,b.actors);jce_copy_struct(a.lottieUrl,b.lottieUrl);jce_copy_struct(a.liveStatus,b.liveStatus);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.cardAction,b.cardAction);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportEventId,b.reportEventId);jce_copy_struct(a.pid,b.pid);

#define jce_ONADokiEntertamentNewsCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cardInfo,b.cardInfo);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportEventId,b.reportEventId);

#define jce_ONADokiFansVideoCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cardInfo,b.cardInfo);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportEventId,b.reportEventId);jce_copy_struct(a.uiType,b.uiType);

#define jce_ONADokiStarGroupCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.cardAction,b.cardAction);jce_copy_struct(a.dokiList,b.dokiList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportEventId,b.reportEventId);

#define jce_ONADokiGalleryGroupCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.cardAction,b.cardAction);jce_copy_struct(a.imageList,b.imageList);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportEventId,b.reportEventId);

#define jce_ONADokiTopTenGroupCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cardInfo,b.cardInfo);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportEventId,b.reportEventId);

#define jce_ONADokiMoreInfoBar_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.text,b.text);jce_copy_struct(a.textColor,b.textColor);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportEventId,b.reportEventId);

#define jce_ONADokiCoverCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cardInfo,b.cardInfo);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportEventId,b.reportEventId);

#define jce_DokiGroupDataPageRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_DokiGroupDataPageResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.title,b.title);

#define jce_DokiCommonReportRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.eventId,b.eventId);jce_copy_struct(a.kValue,b.kValue);

#define jce_DokiCommonReportResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_ONAHorizonBulletinBoardFeed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.feedTitle,b.feedTitle);jce_copy_struct(a.content,b.content);jce_copy_struct(a.user,b.user);jce_copy_struct(a.commentCount,b.commentCount);jce_copy_struct(a.likeCount,b.likeCount);jce_copy_struct(a.bulletinBoardV2,b.bulletinBoardV2);jce_copy_struct(a.feedAction,b.feedAction);jce_copy_struct(a.shareUrl,b.shareUrl);

#define jce_ONADokiVideoCoverCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cardInfo,b.cardInfo);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportEventId,b.reportEventId);

#define jce_DokiVerticalBrushFeedsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.reportData,b.reportData);

#define jce_DokiVerticalBrushFeedsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);



#endif
