// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `welfare.jce'
// **********************************************************************

#ifndef __WELFARE_H_
#define __WELFARE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace WelfareClubInner
{
    enum Command
    {
        CMD_GET_WELFARE_ENTRANCE = 63527,
        CMD_WELFARE_PAPER_PUSH_MSG = 63528,
        CMD_WELFARE_PAPER_DOWN_COUNT = 63546,
        CMD_WELFARE_PAPER_CHECK_RESULT = 63547,
        CMD_GET_WELFARE_HOT_LIST = 63555,
        CMD_CHECK_PAPER_OFF_STATUS = 63558,
        CMD_GET_FEED_PAPER_DEC_RESULT = 63654,
        CMD_GET_WELFARE_PAPAER_LASTLY_DOWN_COUNT = 63998,
        CMD_START_PAPER_SORT_MSG = 1,
        CMD_GET_WELFARE_PAPER_EXTINFO = 64279,
        CMD_GET_WELFARE_NEW_DATA = 64586,
        CMD_CHECK_HAS_WELFARE_DATA = 64801,
    };
    inline string etos(const Command & e)
    {
        switch(e)
        {
            case CMD_GET_WELFARE_ENTRANCE: return "CMD_GET_WELFARE_ENTRANCE";
            case CMD_WELFARE_PAPER_PUSH_MSG: return "CMD_WELFARE_PAPER_PUSH_MSG";
            case CMD_WELFARE_PAPER_DOWN_COUNT: return "CMD_WELFARE_PAPER_DOWN_COUNT";
            case CMD_WELFARE_PAPER_CHECK_RESULT: return "CMD_WELFARE_PAPER_CHECK_RESULT";
            case CMD_GET_WELFARE_HOT_LIST: return "CMD_GET_WELFARE_HOT_LIST";
            case CMD_CHECK_PAPER_OFF_STATUS: return "CMD_CHECK_PAPER_OFF_STATUS";
            case CMD_GET_FEED_PAPER_DEC_RESULT: return "CMD_GET_FEED_PAPER_DEC_RESULT";
            case CMD_GET_WELFARE_PAPAER_LASTLY_DOWN_COUNT: return "CMD_GET_WELFARE_PAPAER_LASTLY_DOWN_COUNT";
            case CMD_START_PAPER_SORT_MSG: return "CMD_START_PAPER_SORT_MSG";
            case CMD_GET_WELFARE_PAPER_EXTINFO: return "CMD_GET_WELFARE_PAPER_EXTINFO";
            case CMD_GET_WELFARE_NEW_DATA: return "CMD_GET_WELFARE_NEW_DATA";
            case CMD_CHECK_HAS_WELFARE_DATA: return "CMD_CHECK_HAS_WELFARE_DATA";
            default: return "";
        }
    }
    inline int stoe(const string & s, Command & e)
    {
        if(s == "CMD_GET_WELFARE_ENTRANCE")  { e=CMD_GET_WELFARE_ENTRANCE; return 0;}
        if(s == "CMD_WELFARE_PAPER_PUSH_MSG")  { e=CMD_WELFARE_PAPER_PUSH_MSG; return 0;}
        if(s == "CMD_WELFARE_PAPER_DOWN_COUNT")  { e=CMD_WELFARE_PAPER_DOWN_COUNT; return 0;}
        if(s == "CMD_WELFARE_PAPER_CHECK_RESULT")  { e=CMD_WELFARE_PAPER_CHECK_RESULT; return 0;}
        if(s == "CMD_GET_WELFARE_HOT_LIST")  { e=CMD_GET_WELFARE_HOT_LIST; return 0;}
        if(s == "CMD_CHECK_PAPER_OFF_STATUS")  { e=CMD_CHECK_PAPER_OFF_STATUS; return 0;}
        if(s == "CMD_GET_FEED_PAPER_DEC_RESULT")  { e=CMD_GET_FEED_PAPER_DEC_RESULT; return 0;}
        if(s == "CMD_GET_WELFARE_PAPAER_LASTLY_DOWN_COUNT")  { e=CMD_GET_WELFARE_PAPAER_LASTLY_DOWN_COUNT; return 0;}
        if(s == "CMD_START_PAPER_SORT_MSG")  { e=CMD_START_PAPER_SORT_MSG; return 0;}
        if(s == "CMD_GET_WELFARE_PAPER_EXTINFO")  { e=CMD_GET_WELFARE_PAPER_EXTINFO; return 0;}
        if(s == "CMD_GET_WELFARE_NEW_DATA")  { e=CMD_GET_WELFARE_NEW_DATA; return 0;}
        if(s == "CMD_CHECK_HAS_WELFARE_DATA")  { e=CMD_CHECK_HAS_WELFARE_DATA; return 0;}

        return -1;
    }

    enum EAccountType
    {
        E_ACCOUNT_GUID = 0,
        E_ACCOUNT_QQ = 1,
        E_ACCOUNT_VUID = 2,
    };
    inline string etos(const EAccountType & e)
    {
        switch(e)
        {
            case E_ACCOUNT_GUID: return "E_ACCOUNT_GUID";
            case E_ACCOUNT_QQ: return "E_ACCOUNT_QQ";
            case E_ACCOUNT_VUID: return "E_ACCOUNT_VUID";
            default: return "";
        }
    }
    inline int stoe(const string & s, EAccountType & e)
    {
        if(s == "E_ACCOUNT_GUID")  { e=E_ACCOUNT_GUID; return 0;}
        if(s == "E_ACCOUNT_QQ")  { e=E_ACCOUNT_QQ; return 0;}
        if(s == "E_ACCOUNT_VUID")  { e=E_ACCOUNT_VUID; return 0;}

        return -1;
    }

    enum EKeyIdType
    {
        E_KEY_TYPE_PIC = 1,
        E_KEY_TYPE_DOKI = 2,
        E_KEY_TYPE_FEED = 3,
    };
    inline string etos(const EKeyIdType & e)
    {
        switch(e)
        {
            case E_KEY_TYPE_PIC: return "E_KEY_TYPE_PIC";
            case E_KEY_TYPE_DOKI: return "E_KEY_TYPE_DOKI";
            case E_KEY_TYPE_FEED: return "E_KEY_TYPE_FEED";
            default: return "";
        }
    }
    inline int stoe(const string & s, EKeyIdType & e)
    {
        if(s == "E_KEY_TYPE_PIC")  { e=E_KEY_TYPE_PIC; return 0;}
        if(s == "E_KEY_TYPE_DOKI")  { e=E_KEY_TYPE_DOKI; return 0;}
        if(s == "E_KEY_TYPE_FEED")  { e=E_KEY_TYPE_FEED; return 0;}

        return -1;
    }

    enum EDataType
    {
        E_DATA_TYPE_DEFAULT = 0,
        E_DATA_TYPE_PAPER = 1,
        E_DATA_TYPE_EMOTICON = 2,
    };
    inline string etos(const EDataType & e)
    {
        switch(e)
        {
            case E_DATA_TYPE_DEFAULT: return "E_DATA_TYPE_DEFAULT";
            case E_DATA_TYPE_PAPER: return "E_DATA_TYPE_PAPER";
            case E_DATA_TYPE_EMOTICON: return "E_DATA_TYPE_EMOTICON";
            default: return "";
        }
    }
    inline int stoe(const string & s, EDataType & e)
    {
        if(s == "E_DATA_TYPE_DEFAULT")  { e=E_DATA_TYPE_DEFAULT; return 0;}
        if(s == "E_DATA_TYPE_PAPER")  { e=E_DATA_TYPE_PAPER; return 0;}
        if(s == "E_DATA_TYPE_EMOTICON")  { e=E_DATA_TYPE_EMOTICON; return 0;}

        return -1;
    }

    enum EPicStatus
    {
        E_PIC_NORMAL = 1000,
        E_PIC_CLARITY_INVALID = 1001,
        E_PIC_SIZE_INVALID = 1002,
        E_PIC_REPEAT = 1003,
        E_PIC_FACE_INVALID = 1004,
        E_PIC_SCALE_INVALID = 1005,
        E_PIC_QRCODE = 1006,
        E_PIC_BLACK_SIDE = 1007,
        E_PIC_GIF_UNSUPPORT = 1008,
        E_PIC_PHONESNAP = 1009,
    };
    inline string etos(const EPicStatus & e)
    {
        switch(e)
        {
            case E_PIC_NORMAL: return "E_PIC_NORMAL";
            case E_PIC_CLARITY_INVALID: return "E_PIC_CLARITY_INVALID";
            case E_PIC_SIZE_INVALID: return "E_PIC_SIZE_INVALID";
            case E_PIC_REPEAT: return "E_PIC_REPEAT";
            case E_PIC_FACE_INVALID: return "E_PIC_FACE_INVALID";
            case E_PIC_SCALE_INVALID: return "E_PIC_SCALE_INVALID";
            case E_PIC_QRCODE: return "E_PIC_QRCODE";
            case E_PIC_BLACK_SIDE: return "E_PIC_BLACK_SIDE";
            case E_PIC_GIF_UNSUPPORT: return "E_PIC_GIF_UNSUPPORT";
            case E_PIC_PHONESNAP: return "E_PIC_PHONESNAP";
            default: return "";
        }
    }
    inline int stoe(const string & s, EPicStatus & e)
    {
        if(s == "E_PIC_NORMAL")  { e=E_PIC_NORMAL; return 0;}
        if(s == "E_PIC_CLARITY_INVALID")  { e=E_PIC_CLARITY_INVALID; return 0;}
        if(s == "E_PIC_SIZE_INVALID")  { e=E_PIC_SIZE_INVALID; return 0;}
        if(s == "E_PIC_REPEAT")  { e=E_PIC_REPEAT; return 0;}
        if(s == "E_PIC_FACE_INVALID")  { e=E_PIC_FACE_INVALID; return 0;}
        if(s == "E_PIC_SCALE_INVALID")  { e=E_PIC_SCALE_INVALID; return 0;}
        if(s == "E_PIC_QRCODE")  { e=E_PIC_QRCODE; return 0;}
        if(s == "E_PIC_BLACK_SIDE")  { e=E_PIC_BLACK_SIDE; return 0;}
        if(s == "E_PIC_GIF_UNSUPPORT")  { e=E_PIC_GIF_UNSUPPORT; return 0;}
        if(s == "E_PIC_PHONESNAP")  { e=E_PIC_PHONESNAP; return 0;}

        return -1;
    }

    struct StUserId : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StUserId";
        }
        static string MD5()
        {
            return "e5cf4761bbed25153f416ae7e88406fc";
        }
        StUserId()
        :utype(WelfareClubInner::E_ACCOUNT_GUID),uid("")
        {
        }
        void resetDefautlt()
        {
            uid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)utype, 0);
            _os.write(uid, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = WelfareClubInner::E_ACCOUNT_GUID;
            _is.read(eTemp0, 0, true);
            utype = (WelfareClubInner::EAccountType)eTemp0;
            _is.read(uid, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)utype,"utype");
            _ds.display(uid,"uid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)utype, true);
            _ds.displaySimple(uid, false);
            return _os;
        }
    public:
        WelfareClubInner::EAccountType utype;
        std::string uid;
    };
    inline bool operator==(const StUserId&l, const StUserId&r)
    {
        return l.utype == r.utype && l.uid == r.uid;
    }
    inline bool operator!=(const StUserId&l, const StUserId&r)
    {
        return !(l == r);
    }

    struct StUserInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StUserInfo";
        }
        static string MD5()
        {
            return "81b24bf3709f1aecb5954bcddf58af53";
        }
        StUserInfo()
        :head(""),nick("")
        {
        }
        void resetDefautlt()
        {
            head = "";
            nick = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(userid, 0);
            _os.write(head, 1);
            _os.write(nick, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(userid, 0, true);
            _is.read(head, 1, true);
            _is.read(nick, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(userid,"userid");
            _ds.display(head,"head");
            _ds.display(nick,"nick");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(userid, true);
            _ds.displaySimple(head, true);
            _ds.displaySimple(nick, false);
            return _os;
        }
    public:
        WelfareClubInner::StUserId userid;
        std::string head;
        std::string nick;
    };
    inline bool operator==(const StUserInfo&l, const StUserInfo&r)
    {
        return l.userid == r.userid && l.head == r.head && l.nick == r.nick;
    }
    inline bool operator!=(const StUserInfo&l, const StUserInfo&r)
    {
        return !(l == r);
    }

    struct StWelfareEntrance : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StWelfareEntrance";
        }
        static string MD5()
        {
            return "8821a7604f66957204ce0e2d556a4ed1";
        }
        StWelfareEntrance()
        :pic(""),title(""),subTitle(""),url(""),dokiId(""),downCnt(0),src(0)
        {
        }
        void resetDefautlt()
        {
            pic = "";
            title = "";
            subTitle = "";
            url = "";
            dokiId = "";
            downCnt = 0;
            src = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pic, 0);
            _os.write(title, 1);
            _os.write(subTitle, 2);
            _os.write(url, 3);
            _os.write(dokiId, 4);
            _os.write(downCnt, 5);
            _os.write(src, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pic, 0, false);
            _is.read(title, 1, false);
            _is.read(subTitle, 2, false);
            _is.read(url, 3, false);
            _is.read(dokiId, 4, false);
            _is.read(downCnt, 5, false);
            _is.read(src, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pic,"pic");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(url,"url");
            _ds.display(dokiId,"dokiId");
            _ds.display(downCnt,"downCnt");
            _ds.display(src,"src");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pic, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(url, true);
            _ds.displaySimple(dokiId, true);
            _ds.displaySimple(downCnt, true);
            _ds.displaySimple(src, false);
            return _os;
        }
    public:
        std::string pic;
        std::string title;
        std::string subTitle;
        std::string url;
        std::string dokiId;
        taf::Int64 downCnt;
        taf::Int32 src;
    };
    inline bool operator==(const StWelfareEntrance&l, const StWelfareEntrance&r)
    {
        return l.pic == r.pic && l.title == r.title && l.subTitle == r.subTitle && l.url == r.url && l.dokiId == r.dokiId && l.downCnt == r.downCnt && l.src == r.src;
    }
    inline bool operator!=(const StWelfareEntrance&l, const StWelfareEntrance&r)
    {
        return !(l == r);
    }

    struct StCntItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StCntItem";
        }
        static string MD5()
        {
            return "1b036f83908898a8158fbae4c3db412f";
        }
        StCntItem()
        :keyType(WelfareClubInner::E_KEY_TYPE_PIC),keyId(""),lCnt(0),lPartCnt(0)
        {
        }
        void resetDefautlt()
        {
            keyId = "";
            lCnt = 0;
            lPartCnt = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)keyType, 0);
            _os.write(keyId, 1);
            _os.write(lCnt, 2);
            _os.write(lPartCnt, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = WelfareClubInner::E_KEY_TYPE_PIC;
            _is.read(eTemp0, 0, false);
            keyType = (WelfareClubInner::EKeyIdType)eTemp0;
            _is.read(keyId, 1, false);
            _is.read(lCnt, 2, false);
            _is.read(lPartCnt, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)keyType,"keyType");
            _ds.display(keyId,"keyId");
            _ds.display(lCnt,"lCnt");
            _ds.display(lPartCnt,"lPartCnt");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)keyType, true);
            _ds.displaySimple(keyId, true);
            _ds.displaySimple(lCnt, true);
            _ds.displaySimple(lPartCnt, false);
            return _os;
        }
    public:
        WelfareClubInner::EKeyIdType keyType;
        std::string keyId;
        taf::Int64 lCnt;
        taf::Int64 lPartCnt;
    };
    inline bool operator==(const StCntItem&l, const StCntItem&r)
    {
        return l.keyType == r.keyType && l.keyId == r.keyId && l.lCnt == r.lCnt && l.lPartCnt == r.lPartCnt;
    }
    inline bool operator!=(const StCntItem&l, const StCntItem&r)
    {
        return !(l == r);
    }

    struct StPicStatusItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StPicStatusItem";
        }
        static string MD5()
        {
            return "d68a5a3495d593be3499a4d9f3e46970";
        }
        StPicStatusItem()
        :pic(""),status(WelfareClubInner::E_PIC_NORMAL),dokiid("")
        {
        }
        void resetDefautlt()
        {
            pic = "";
            dokiid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pic, 0);
            _os.write((taf::Int32)status, 1);
            _os.write(dokiid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pic, 0, false);
            taf::Int32 eTemp1 = WelfareClubInner::E_PIC_NORMAL;
            _is.read(eTemp1, 1, false);
            status = (WelfareClubInner::EPicStatus)eTemp1;
            _is.read(dokiid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pic,"pic");
            _ds.display((taf::Int32)status,"status");
            _ds.display(dokiid,"dokiid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pic, true);
            _ds.displaySimple((taf::Int32)status, true);
            _ds.displaySimple(dokiid, false);
            return _os;
        }
    public:
        std::string pic;
        WelfareClubInner::EPicStatus status;
        std::string dokiid;
    };
    inline bool operator==(const StPicStatusItem&l, const StPicStatusItem&r)
    {
        return l.pic == r.pic && l.status == r.status && l.dokiid == r.dokiid;
    }
    inline bool operator!=(const StPicStatusItem&l, const StPicStatusItem&r)
    {
        return !(l == r);
    }

    struct StHotPaper : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StHotPaper";
        }
        static string MD5()
        {
            return "4b749f14387d28bfd1f6bb2b419f1c94";
        }
        StHotPaper()
        :pic(""),feedid(""),datakey(""),downCnt(0),thumbPic("")
        {
        }
        void resetDefautlt()
        {
            pic = "";
            feedid = "";
            datakey = "";
            downCnt = 0;
            thumbPic = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pic, 0);
            _os.write(feedid, 1);
            _os.write(datakey, 2);
            _os.write(downCnt, 3);
            _os.write(thumbPic, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pic, 0, false);
            _is.read(feedid, 1, false);
            _is.read(datakey, 2, false);
            _is.read(downCnt, 3, false);
            _is.read(thumbPic, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pic,"pic");
            _ds.display(feedid,"feedid");
            _ds.display(datakey,"datakey");
            _ds.display(downCnt,"downCnt");
            _ds.display(thumbPic,"thumbPic");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pic, true);
            _ds.displaySimple(feedid, true);
            _ds.displaySimple(datakey, true);
            _ds.displaySimple(downCnt, true);
            _ds.displaySimple(thumbPic, false);
            return _os;
        }
    public:
        std::string pic;
        std::string feedid;
        std::string datakey;
        taf::Int64 downCnt;
        std::string thumbPic;
    };
    inline bool operator==(const StHotPaper&l, const StHotPaper&r)
    {
        return l.pic == r.pic && l.feedid == r.feedid && l.datakey == r.datakey && l.downCnt == r.downCnt && l.thumbPic == r.thumbPic;
    }
    inline bool operator!=(const StHotPaper&l, const StHotPaper&r)
    {
        return !(l == r);
    }

    struct StHotDoki : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StHotDoki";
        }
        static string MD5()
        {
            return "301e1080f07fb21632bb405cdb817bb3";
        }
        StHotDoki()
        :dokiid(""),datakey("")
        {
        }
        void resetDefautlt()
        {
            dokiid = "";
            datakey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dokiid, 0);
            _os.write(datakey, 1);
            _os.write(vctPaper, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dokiid, 0, false);
            _is.read(datakey, 1, false);
            _is.read(vctPaper, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dokiid,"dokiid");
            _ds.display(datakey,"datakey");
            _ds.display(vctPaper,"vctPaper");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dokiid, true);
            _ds.displaySimple(datakey, true);
            _ds.displaySimple(vctPaper, false);
            return _os;
        }
    public:
        std::string dokiid;
        std::string datakey;
        vector<WelfareClubInner::StHotPaper> vctPaper;
    };
    inline bool operator==(const StHotDoki&l, const StHotDoki&r)
    {
        return l.dokiid == r.dokiid && l.datakey == r.datakey && l.vctPaper == r.vctPaper;
    }
    inline bool operator!=(const StHotDoki&l, const StHotDoki&r)
    {
        return !(l == r);
    }

    struct StWelfareData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StWelfareData";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        StWelfareData()
        :url(""),id(""),feedid(""),datakey("")
        {
        }
        void resetDefautlt()
        {
            url = "";
            id = "";
            feedid = "";
            datakey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(url, 0);
            _os.write(id, 1);
            _os.write(feedid, 2);
            _os.write(datakey, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(url, 0, false);
            _is.read(id, 1, false);
            _is.read(feedid, 2, false);
            _is.read(datakey, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(url,"url");
            _ds.display(id,"id");
            _ds.display(feedid,"feedid");
            _ds.display(datakey,"datakey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(url, true);
            _ds.displaySimple(id, true);
            _ds.displaySimple(feedid, true);
            _ds.displaySimple(datakey, false);
            return _os;
        }
    public:
        std::string url;
        std::string id;
        std::string feedid;
        std::string datakey;
    };
    inline bool operator==(const StWelfareData&l, const StWelfareData&r)
    {
        return l.url == r.url && l.id == r.id && l.feedid == r.feedid && l.datakey == r.datakey;
    }
    inline bool operator!=(const StWelfareData&l, const StWelfareData&r)
    {
        return !(l == r);
    }

    struct StGetWelfareEntranceReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StGetWelfareEntranceReq";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        StGetWelfareEntranceReq()
        :curTime(0)
        {
        }
        void resetDefautlt()
        {
            curTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(curTime, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(curTime, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(curTime,"curTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(curTime, false);
            return _os;
        }
    public:
        taf::Int32 curTime;
    };
    inline bool operator==(const StGetWelfareEntranceReq&l, const StGetWelfareEntranceReq&r)
    {
        return l.curTime == r.curTime;
    }
    inline bool operator!=(const StGetWelfareEntranceReq&l, const StGetWelfareEntranceReq&r)
    {
        return !(l == r);
    }

    struct StGetWelfareEntranceRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StGetWelfareEntranceRsp";
        }
        static string MD5()
        {
            return "46ce8888385b36d0c5d72acb6ece7a5c";
        }
        StGetWelfareEntranceRsp()
        :errcode(0),errmsg("")
        {
        }
        void resetDefautlt()
        {
            errcode = 0;
            errmsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errcode, 0);
            _os.write(errmsg, 1);
            _os.write(stData, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errcode, 0, true);
            _is.read(errmsg, 1, true);
            _is.read(stData, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errcode,"errcode");
            _ds.display(errmsg,"errmsg");
            _ds.display(stData,"stData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errcode, true);
            _ds.displaySimple(errmsg, true);
            _ds.displaySimple(stData, false);
            return _os;
        }
    public:
        taf::Int32 errcode;
        std::string errmsg;
        WelfareClubInner::StWelfareEntrance stData;
    };
    inline bool operator==(const StGetWelfareEntranceRsp&l, const StGetWelfareEntranceRsp&r)
    {
        return l.errcode == r.errcode && l.errmsg == r.errmsg && l.stData == r.stData;
    }
    inline bool operator!=(const StGetWelfareEntranceRsp&l, const StGetWelfareEntranceRsp&r)
    {
        return !(l == r);
    }

    struct StWelfarePaperMsg : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StWelfarePaperMsg";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        StWelfarePaperMsg()
        :type(0),datakey("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            datakey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(datakey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(datakey, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(datakey,"datakey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(datakey, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string datakey;
    };
    inline bool operator==(const StWelfarePaperMsg&l, const StWelfarePaperMsg&r)
    {
        return l.type == r.type && l.datakey == r.datakey;
    }
    inline bool operator!=(const StWelfarePaperMsg&l, const StWelfarePaperMsg&r)
    {
        return !(l == r);
    }

    struct StWelfarePaperDownCntReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StWelfarePaperDownCntReq";
        }
        static string MD5()
        {
            return "feaeae1a37c5a733353b792e731ce13d";
        }
        StWelfarePaperDownCntReq()
        :datakey("")
        {
        }
        void resetDefautlt()
        {
            datakey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(datakey, 0);
            _os.write(vctCnt, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(datakey, 0, true);
            _is.read(vctCnt, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(datakey,"datakey");
            _ds.display(vctCnt,"vctCnt");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(datakey, true);
            _ds.displaySimple(vctCnt, false);
            return _os;
        }
    public:
        std::string datakey;
        vector<WelfareClubInner::StCntItem> vctCnt;
    };
    inline bool operator==(const StWelfarePaperDownCntReq&l, const StWelfarePaperDownCntReq&r)
    {
        return l.datakey == r.datakey && l.vctCnt == r.vctCnt;
    }
    inline bool operator!=(const StWelfarePaperDownCntReq&l, const StWelfarePaperDownCntReq&r)
    {
        return !(l == r);
    }

    struct StWelfarePaperDownCntRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StWelfarePaperDownCntRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        StWelfarePaperDownCntRsp()
        :errcode(0),errmsg("")
        {
        }
        void resetDefautlt()
        {
            errcode = 0;
            errmsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errcode, 0);
            _os.write(errmsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errcode, 0, true);
            _is.read(errmsg, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errcode,"errcode");
            _ds.display(errmsg,"errmsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errcode, true);
            _ds.displaySimple(errmsg, false);
            return _os;
        }
    public:
        taf::Int32 errcode;
        std::string errmsg;
    };
    inline bool operator==(const StWelfarePaperDownCntRsp&l, const StWelfarePaperDownCntRsp&r)
    {
        return l.errcode == r.errcode && l.errmsg == r.errmsg;
    }
    inline bool operator!=(const StWelfarePaperDownCntRsp&l, const StWelfarePaperDownCntRsp&r)
    {
        return !(l == r);
    }

    struct StWelfarePaperCheckResultReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StWelfarePaperCheckResultReq";
        }
        static string MD5()
        {
            return "b7a728da3a828ac05069e51f164d1b3e";
        }
        StWelfarePaperCheckResultReq()
        :feedid(""),status(0),type(0)
        {
        }
        void resetDefautlt()
        {
            feedid = "";
            status = 0;
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedid, 0);
            _os.write(status, 1);
            _os.write(type, 2);
            _os.write(vctStatus, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedid, 0, true);
            _is.read(status, 1, true);
            _is.read(type, 2, false);
            _is.read(vctStatus, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedid,"feedid");
            _ds.display(status,"status");
            _ds.display(type,"type");
            _ds.display(vctStatus,"vctStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedid, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(vctStatus, false);
            return _os;
        }
    public:
        std::string feedid;
        taf::Int32 status;
        taf::Int32 type;
        vector<WelfareClubInner::StPicStatusItem> vctStatus;
    };
    inline bool operator==(const StWelfarePaperCheckResultReq&l, const StWelfarePaperCheckResultReq&r)
    {
        return l.feedid == r.feedid && l.status == r.status && l.type == r.type && l.vctStatus == r.vctStatus;
    }
    inline bool operator!=(const StWelfarePaperCheckResultReq&l, const StWelfarePaperCheckResultReq&r)
    {
        return !(l == r);
    }

    struct StWelfarePaperCheckResultRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StWelfarePaperCheckResultRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        StWelfarePaperCheckResultRsp()
        :errcode(0),errmsg("")
        {
        }
        void resetDefautlt()
        {
            errcode = 0;
            errmsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errcode, 0);
            _os.write(errmsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errcode, 0, true);
            _is.read(errmsg, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errcode,"errcode");
            _ds.display(errmsg,"errmsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errcode, true);
            _ds.displaySimple(errmsg, false);
            return _os;
        }
    public:
        taf::Int32 errcode;
        std::string errmsg;
    };
    inline bool operator==(const StWelfarePaperCheckResultRsp&l, const StWelfarePaperCheckResultRsp&r)
    {
        return l.errcode == r.errcode && l.errmsg == r.errmsg;
    }
    inline bool operator!=(const StWelfarePaperCheckResultRsp&l, const StWelfarePaperCheckResultRsp&r)
    {
        return !(l == r);
    }

    struct StGetWelfareHotListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StGetWelfareHotListReq";
        }
        static string MD5()
        {
            return "1d6ab92946e708f09502dd74dc3510b0";
        }
        StGetWelfareHotListReq()
        :dokiid(""),cnt(0),eDType(WelfareClubInner::E_DATA_TYPE_DEFAULT)
        {
        }
        void resetDefautlt()
        {
            dokiid = "";
            cnt = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dokiid, 0);
            _os.write(cnt, 1);
            _os.write((taf::Int32)eDType, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dokiid, 0, false);
            _is.read(cnt, 1, false);
            taf::Int32 eTemp2 = WelfareClubInner::E_DATA_TYPE_DEFAULT;
            _is.read(eTemp2, 2, false);
            eDType = (WelfareClubInner::EDataType)eTemp2;
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dokiid,"dokiid");
            _ds.display(cnt,"cnt");
            _ds.display((taf::Int32)eDType,"eDType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dokiid, true);
            _ds.displaySimple(cnt, true);
            _ds.displaySimple((taf::Int32)eDType, false);
            return _os;
        }
    public:
        std::string dokiid;
        taf::Int32 cnt;
        WelfareClubInner::EDataType eDType;
    };
    inline bool operator==(const StGetWelfareHotListReq&l, const StGetWelfareHotListReq&r)
    {
        return l.dokiid == r.dokiid && l.cnt == r.cnt && l.eDType == r.eDType;
    }
    inline bool operator!=(const StGetWelfareHotListReq&l, const StGetWelfareHotListReq&r)
    {
        return !(l == r);
    }

    struct StGetWelfareHotListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StGetWelfareHotListRsp";
        }
        static string MD5()
        {
            return "75a75c7078823ebf5cdcd6efb0cb3012";
        }
        StGetWelfareHotListRsp()
        :errcode(0),errmsg("")
        {
        }
        void resetDefautlt()
        {
            errcode = 0;
            errmsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errcode, 0);
            _os.write(errmsg, 1);
            _os.write(vctData, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errcode, 0, true);
            _is.read(errmsg, 1, true);
            _is.read(vctData, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errcode,"errcode");
            _ds.display(errmsg,"errmsg");
            _ds.display(vctData,"vctData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errcode, true);
            _ds.displaySimple(errmsg, true);
            _ds.displaySimple(vctData, false);
            return _os;
        }
    public:
        taf::Int32 errcode;
        std::string errmsg;
        vector<WelfareClubInner::StHotDoki> vctData;
    };
    inline bool operator==(const StGetWelfareHotListRsp&l, const StGetWelfareHotListRsp&r)
    {
        return l.errcode == r.errcode && l.errmsg == r.errmsg && l.vctData == r.vctData;
    }
    inline bool operator!=(const StGetWelfareHotListRsp&l, const StGetWelfareHotListRsp&r)
    {
        return !(l == r);
    }

    struct StCheckPaperIsOffReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StCheckPaperIsOffReq";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        StCheckPaperIsOffReq()
        :datakey("")
        {
        }
        void resetDefautlt()
        {
            datakey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(datakey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(datakey, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(datakey,"datakey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(datakey, false);
            return _os;
        }
    public:
        std::string datakey;
    };
    inline bool operator==(const StCheckPaperIsOffReq&l, const StCheckPaperIsOffReq&r)
    {
        return l.datakey == r.datakey;
    }
    inline bool operator!=(const StCheckPaperIsOffReq&l, const StCheckPaperIsOffReq&r)
    {
        return !(l == r);
    }

    struct StCheckPaperIsOffRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StCheckPaperIsOffRsp";
        }
        static string MD5()
        {
            return "5776fd7103fcea055637c7e8b9708bb0";
        }
        StCheckPaperIsOffRsp()
        :errcode(0),errmsg(""),status(0)
        {
        }
        void resetDefautlt()
        {
            errcode = 0;
            errmsg = "";
            status = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errcode, 0);
            _os.write(errmsg, 1);
            _os.write(status, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errcode, 0, true);
            _is.read(errmsg, 1, true);
            _is.read(status, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errcode,"errcode");
            _ds.display(errmsg,"errmsg");
            _ds.display(status,"status");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errcode, true);
            _ds.displaySimple(errmsg, true);
            _ds.displaySimple(status, false);
            return _os;
        }
    public:
        taf::Int32 errcode;
        std::string errmsg;
        taf::Int32 status;
    };
    inline bool operator==(const StCheckPaperIsOffRsp&l, const StCheckPaperIsOffRsp&r)
    {
        return l.errcode == r.errcode && l.errmsg == r.errmsg && l.status == r.status;
    }
    inline bool operator!=(const StCheckPaperIsOffRsp&l, const StCheckPaperIsOffRsp&r)
    {
        return !(l == r);
    }

    struct StGetFeedPaperDecReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StGetFeedPaperDecReq";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        StGetFeedPaperDecReq()
        :feedid("")
        {
        }
        void resetDefautlt()
        {
            feedid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedid, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedid, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedid,"feedid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedid, false);
            return _os;
        }
    public:
        std::string feedid;
    };
    inline bool operator==(const StGetFeedPaperDecReq&l, const StGetFeedPaperDecReq&r)
    {
        return l.feedid == r.feedid;
    }
    inline bool operator!=(const StGetFeedPaperDecReq&l, const StGetFeedPaperDecReq&r)
    {
        return !(l == r);
    }

    struct StGetFeedPaperDecRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StGetFeedPaperDecRsp";
        }
        static string MD5()
        {
            return "bb1d80d5b189b4102c1f7cd3157de674";
        }
        StGetFeedPaperDecRsp()
        :errcode(0),errmsg("")
        {
        }
        void resetDefautlt()
        {
            errcode = 0;
            errmsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errcode, 0);
            _os.write(errmsg, 1);
            _os.write(mapResult, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errcode, 0, true);
            _is.read(errmsg, 1, true);
            _is.read(mapResult, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errcode,"errcode");
            _ds.display(errmsg,"errmsg");
            _ds.display(mapResult,"mapResult");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errcode, true);
            _ds.displaySimple(errmsg, true);
            _ds.displaySimple(mapResult, false);
            return _os;
        }
    public:
        taf::Int32 errcode;
        std::string errmsg;
        map<std::string, vector<WelfareClubInner::EPicStatus> > mapResult;
    };
    inline bool operator==(const StGetFeedPaperDecRsp&l, const StGetFeedPaperDecRsp&r)
    {
        return l.errcode == r.errcode && l.errmsg == r.errmsg && l.mapResult == r.mapResult;
    }
    inline bool operator!=(const StGetFeedPaperDecRsp&l, const StGetFeedPaperDecRsp&r)
    {
        return !(l == r);
    }

    struct LastlyDownItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.LastlyDownItem";
        }
        static string MD5()
        {
            return "8d61b639cda77ea57102c6b9cbb5aca2";
        }
        LastlyDownItem()
        :url(""),doki_id(""),lastly_down_cnt(0)
        {
        }
        void resetDefautlt()
        {
            url = "";
            doki_id = "";
            lastly_down_cnt = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(url, 0);
            _os.write(doki_id, 1);
            _os.write(lastly_down_cnt, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(url, 0, false);
            _is.read(doki_id, 1, false);
            _is.read(lastly_down_cnt, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(url,"url");
            _ds.display(doki_id,"doki_id");
            _ds.display(lastly_down_cnt,"lastly_down_cnt");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(url, true);
            _ds.displaySimple(doki_id, true);
            _ds.displaySimple(lastly_down_cnt, false);
            return _os;
        }
    public:
        std::string url;
        std::string doki_id;
        taf::Int32 lastly_down_cnt;
    };
    inline bool operator==(const LastlyDownItem&l, const LastlyDownItem&r)
    {
        return l.url == r.url && l.doki_id == r.doki_id && l.lastly_down_cnt == r.lastly_down_cnt;
    }
    inline bool operator!=(const LastlyDownItem&l, const LastlyDownItem&r)
    {
        return !(l == r);
    }

    struct GetWelfarePaperLastlyDownCntReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.GetWelfarePaperLastlyDownCntReq";
        }
        static string MD5()
        {
            return "72dfddf03422779b81fb661a3938fb92";
        }
        GetWelfarePaperLastlyDownCntReq()
        :type(0),page_num(0),page_context("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            page_num = 0;
            page_context = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(page_num, 1);
            _os.write(page_context, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(page_num, 1, false);
            _is.read(page_context, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(page_num,"page_num");
            _ds.display(page_context,"page_context");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_context, false);
            return _os;
        }
    public:
        taf::Int32 type;
        taf::Int32 page_num;
        std::string page_context;
    };
    inline bool operator==(const GetWelfarePaperLastlyDownCntReq&l, const GetWelfarePaperLastlyDownCntReq&r)
    {
        return l.type == r.type && l.page_num == r.page_num && l.page_context == r.page_context;
    }
    inline bool operator!=(const GetWelfarePaperLastlyDownCntReq&l, const GetWelfarePaperLastlyDownCntReq&r)
    {
        return !(l == r);
    }

    struct GetWelfarePaperLastlyDownCntRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.GetWelfarePaperLastlyDownCntRsp";
        }
        static string MD5()
        {
            return "6825677a0a4992f3234dd8db83820a9d";
        }
        GetWelfarePaperLastlyDownCntRsp()
        :errcode(0),errmsg(""),page_context("")
        {
        }
        void resetDefautlt()
        {
            errcode = 0;
            errmsg = "";
            page_context = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errcode, 0);
            _os.write(errmsg, 1);
            _os.write(vec_down_cnt, 2);
            _os.write(page_context, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errcode, 0, false);
            _is.read(errmsg, 1, false);
            _is.read(vec_down_cnt, 2, false);
            _is.read(page_context, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errcode,"errcode");
            _ds.display(errmsg,"errmsg");
            _ds.display(vec_down_cnt,"vec_down_cnt");
            _ds.display(page_context,"page_context");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errcode, true);
            _ds.displaySimple(errmsg, true);
            _ds.displaySimple(vec_down_cnt, true);
            _ds.displaySimple(page_context, false);
            return _os;
        }
    public:
        taf::Int32 errcode;
        std::string errmsg;
        vector<WelfareClubInner::LastlyDownItem> vec_down_cnt;
        std::string page_context;
    };
    inline bool operator==(const GetWelfarePaperLastlyDownCntRsp&l, const GetWelfarePaperLastlyDownCntRsp&r)
    {
        return l.errcode == r.errcode && l.errmsg == r.errmsg && l.vec_down_cnt == r.vec_down_cnt && l.page_context == r.page_context;
    }
    inline bool operator!=(const GetWelfarePaperLastlyDownCntRsp&l, const GetWelfarePaperLastlyDownCntRsp&r)
    {
        return !(l == r);
    }

    struct StDokiList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StDokiList";
        }
        static string MD5()
        {
            return "c0c55295846a835fde8fabbaa8f6adc8";
        }
        StDokiList()
        :timestamp(0)
        {
        }
        void resetDefautlt()
        {
            timestamp = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(timestamp, 0);
            _os.write(vctDokiId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(timestamp, 0, false);
            _is.read(vctDokiId, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(timestamp,"timestamp");
            _ds.display(vctDokiId,"vctDokiId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(timestamp, true);
            _ds.displaySimple(vctDokiId, false);
            return _os;
        }
    public:
        taf::Int32 timestamp;
        vector<std::string> vctDokiId;
    };
    inline bool operator==(const StDokiList&l, const StDokiList&r)
    {
        return l.timestamp == r.timestamp && l.vctDokiId == r.vctDokiId;
    }
    inline bool operator!=(const StDokiList&l, const StDokiList&r)
    {
        return !(l == r);
    }

    struct StStartPaperSortReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StStartPaperSortReq";
        }
        static string MD5()
        {
            return "c0c55295846a835fde8fabbaa8f6adc8";
        }
        StStartPaperSortReq()
        :timestamp(0)
        {
        }
        void resetDefautlt()
        {
            timestamp = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(timestamp, 0);
            _os.write(vctDoki, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(timestamp, 0, false);
            _is.read(vctDoki, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(timestamp,"timestamp");
            _ds.display(vctDoki,"vctDoki");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(timestamp, true);
            _ds.displaySimple(vctDoki, false);
            return _os;
        }
    public:
        taf::Int32 timestamp;
        vector<std::string> vctDoki;
    };
    inline bool operator==(const StStartPaperSortReq&l, const StStartPaperSortReq&r)
    {
        return l.timestamp == r.timestamp && l.vctDoki == r.vctDoki;
    }
    inline bool operator!=(const StStartPaperSortReq&l, const StStartPaperSortReq&r)
    {
        return !(l == r);
    }

    struct StStartPaperSortRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StStartPaperSortRsp";
        }
        static string MD5()
        {
            return "f121f570938d805b533e907e7e152cc5";
        }
        StStartPaperSortRsp()
        :errcode(0),errmsg("")
        {
        }
        void resetDefautlt()
        {
            errcode = 0;
            errmsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errcode, 0);
            _os.write(errmsg, 1);
            _os.write(vctSuccDoki, 2);
            _os.write(vctFailDoki, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errcode, 0, true);
            _is.read(errmsg, 1, true);
            _is.read(vctSuccDoki, 2, false);
            _is.read(vctFailDoki, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errcode,"errcode");
            _ds.display(errmsg,"errmsg");
            _ds.display(vctSuccDoki,"vctSuccDoki");
            _ds.display(vctFailDoki,"vctFailDoki");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errcode, true);
            _ds.displaySimple(errmsg, true);
            _ds.displaySimple(vctSuccDoki, true);
            _ds.displaySimple(vctFailDoki, false);
            return _os;
        }
    public:
        taf::Int32 errcode;
        std::string errmsg;
        vector<std::string> vctSuccDoki;
        vector<std::string> vctFailDoki;
    };
    inline bool operator==(const StStartPaperSortRsp&l, const StStartPaperSortRsp&r)
    {
        return l.errcode == r.errcode && l.errmsg == r.errmsg && l.vctSuccDoki == r.vctSuccDoki && l.vctFailDoki == r.vctFailDoki;
    }
    inline bool operator!=(const StStartPaperSortRsp&l, const StStartPaperSortRsp&r)
    {
        return !(l == r);
    }

    struct StWelfarePaperExtInfoReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StWelfarePaperExtInfoReq";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        StWelfarePaperExtInfoReq()
        :datakey("")
        {
        }
        void resetDefautlt()
        {
            datakey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(datakey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(datakey, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(datakey,"datakey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(datakey, false);
            return _os;
        }
    public:
        std::string datakey;
    };
    inline bool operator==(const StWelfarePaperExtInfoReq&l, const StWelfarePaperExtInfoReq&r)
    {
        return l.datakey == r.datakey;
    }
    inline bool operator!=(const StWelfarePaperExtInfoReq&l, const StWelfarePaperExtInfoReq&r)
    {
        return !(l == r);
    }

    struct StWelfarePaperExtInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StWelfarePaperExtInfoRsp";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        StWelfarePaperExtInfoRsp()
        :errcode(0),errmsg(""),feedid("")
        {
        }
        void resetDefautlt()
        {
            errcode = 0;
            errmsg = "";
            feedid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errcode, 0);
            _os.write(errmsg, 1);
            _os.write(feedid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errcode, 0, true);
            _is.read(errmsg, 1, true);
            _is.read(feedid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errcode,"errcode");
            _ds.display(errmsg,"errmsg");
            _ds.display(feedid,"feedid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errcode, true);
            _ds.displaySimple(errmsg, true);
            _ds.displaySimple(feedid, false);
            return _os;
        }
    public:
        taf::Int32 errcode;
        std::string errmsg;
        std::string feedid;
    };
    inline bool operator==(const StWelfarePaperExtInfoRsp&l, const StWelfarePaperExtInfoRsp&r)
    {
        return l.errcode == r.errcode && l.errmsg == r.errmsg && l.feedid == r.feedid;
    }
    inline bool operator!=(const StWelfarePaperExtInfoRsp&l, const StWelfarePaperExtInfoRsp&r)
    {
        return !(l == r);
    }

    struct StWelfareNewDataReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StWelfareNewDataReq";
        }
        static string MD5()
        {
            return "1d6ab92946e708f09502dd74dc3510b0";
        }
        StWelfareNewDataReq()
        :dokiid(""),cnt(3),eDType(WelfareClubInner::E_DATA_TYPE_DEFAULT)
        {
        }
        void resetDefautlt()
        {
            dokiid = "";
            cnt = 3;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dokiid, 0);
            _os.write(cnt, 1);
            _os.write((taf::Int32)eDType, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dokiid, 0, false);
            _is.read(cnt, 1, false);
            taf::Int32 eTemp2 = WelfareClubInner::E_DATA_TYPE_DEFAULT;
            _is.read(eTemp2, 2, false);
            eDType = (WelfareClubInner::EDataType)eTemp2;
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dokiid,"dokiid");
            _ds.display(cnt,"cnt");
            _ds.display((taf::Int32)eDType,"eDType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dokiid, true);
            _ds.displaySimple(cnt, true);
            _ds.displaySimple((taf::Int32)eDType, false);
            return _os;
        }
    public:
        std::string dokiid;
        taf::Int32 cnt;
        WelfareClubInner::EDataType eDType;
    };
    inline bool operator==(const StWelfareNewDataReq&l, const StWelfareNewDataReq&r)
    {
        return l.dokiid == r.dokiid && l.cnt == r.cnt && l.eDType == r.eDType;
    }
    inline bool operator!=(const StWelfareNewDataReq&l, const StWelfareNewDataReq&r)
    {
        return !(l == r);
    }

    struct StWelfareNewDataRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StWelfareNewDataRsp";
        }
        static string MD5()
        {
            return "b13b78a16118bb64ceaf4f787890f1a1";
        }
        StWelfareNewDataRsp()
        :errcode(0),errmsg("")
        {
        }
        void resetDefautlt()
        {
            errcode = 0;
            errmsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errcode, 0);
            _os.write(errmsg, 1);
            _os.write(vctData, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errcode, 0, true);
            _is.read(errmsg, 1, true);
            _is.read(vctData, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errcode,"errcode");
            _ds.display(errmsg,"errmsg");
            _ds.display(vctData,"vctData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errcode, true);
            _ds.displaySimple(errmsg, true);
            _ds.displaySimple(vctData, false);
            return _os;
        }
    public:
        taf::Int32 errcode;
        std::string errmsg;
        vector<WelfareClubInner::StWelfareData> vctData;
    };
    inline bool operator==(const StWelfareNewDataRsp&l, const StWelfareNewDataRsp&r)
    {
        return l.errcode == r.errcode && l.errmsg == r.errmsg && l.vctData == r.vctData;
    }
    inline bool operator!=(const StWelfareNewDataRsp&l, const StWelfareNewDataRsp&r)
    {
        return !(l == r);
    }

    struct StCheckHasWelfareReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StCheckHasWelfareReq";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        StCheckHasWelfareReq()
        :dokiid("")
        {
        }
        void resetDefautlt()
        {
            dokiid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dokiid, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dokiid, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dokiid,"dokiid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dokiid, false);
            return _os;
        }
    public:
        std::string dokiid;
    };
    inline bool operator==(const StCheckHasWelfareReq&l, const StCheckHasWelfareReq&r)
    {
        return l.dokiid == r.dokiid;
    }
    inline bool operator!=(const StCheckHasWelfareReq&l, const StCheckHasWelfareReq&r)
    {
        return !(l == r);
    }

    struct StCheckHasWelfareRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "WelfareClubInner.StCheckHasWelfareRsp";
        }
        static string MD5()
        {
            return "408e60de42621fb466c689ad63b72e43";
        }
        StCheckHasWelfareRsp()
        :errcode(0),errmsg(""),bHasWelfare(false)
        {
        }
        void resetDefautlt()
        {
            errcode = 0;
            errmsg = "";
            bHasWelfare = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errcode, 0);
            _os.write(errmsg, 1);
            _os.write(bHasWelfare, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errcode, 0, true);
            _is.read(errmsg, 1, true);
            _is.read(bHasWelfare, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errcode,"errcode");
            _ds.display(errmsg,"errmsg");
            _ds.display(bHasWelfare,"bHasWelfare");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errcode, true);
            _ds.displaySimple(errmsg, true);
            _ds.displaySimple(bHasWelfare, false);
            return _os;
        }
    public:
        taf::Int32 errcode;
        std::string errmsg;
        taf::Bool bHasWelfare;
    };
    inline bool operator==(const StCheckHasWelfareRsp&l, const StCheckHasWelfareRsp&r)
    {
        return l.errcode == r.errcode && l.errmsg == r.errmsg && l.bHasWelfare == r.bHasWelfare;
    }
    inline bool operator!=(const StCheckHasWelfareRsp&l, const StCheckHasWelfareRsp&r)
    {
        return !(l == r);
    }


}

#define WelfareClubInner_StUserId_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.utype,b.utype);jce_copy_struct(a.uid,b.uid);

#define WelfareClubInner_StUserInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.userid,b.userid);jce_copy_struct(a.head,b.head);jce_copy_struct(a.nick,b.nick);

#define WelfareClubInner_StWelfareEntrance_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pic,b.pic);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.url,b.url);jce_copy_struct(a.dokiId,b.dokiId);jce_copy_struct(a.downCnt,b.downCnt);jce_copy_struct(a.src,b.src);

#define WelfareClubInner_StCntItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.keyType,b.keyType);jce_copy_struct(a.keyId,b.keyId);jce_copy_struct(a.lCnt,b.lCnt);jce_copy_struct(a.lPartCnt,b.lPartCnt);

#define WelfareClubInner_StPicStatusItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pic,b.pic);jce_copy_struct(a.status,b.status);jce_copy_struct(a.dokiid,b.dokiid);

#define WelfareClubInner_StHotPaper_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pic,b.pic);jce_copy_struct(a.feedid,b.feedid);jce_copy_struct(a.datakey,b.datakey);jce_copy_struct(a.downCnt,b.downCnt);jce_copy_struct(a.thumbPic,b.thumbPic);

#define WelfareClubInner_StHotDoki_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dokiid,b.dokiid);jce_copy_struct(a.datakey,b.datakey);jce_copy_struct(a.vctPaper,b.vctPaper);

#define WelfareClubInner_StWelfareData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.url,b.url);jce_copy_struct(a.id,b.id);jce_copy_struct(a.feedid,b.feedid);jce_copy_struct(a.datakey,b.datakey);

#define WelfareClubInner_StGetWelfareEntranceReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.curTime,b.curTime);

#define WelfareClubInner_StGetWelfareEntranceRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errcode,b.errcode);jce_copy_struct(a.errmsg,b.errmsg);jce_copy_struct(a.stData,b.stData);

#define WelfareClubInner_StWelfarePaperMsg_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.datakey,b.datakey);

#define WelfareClubInner_StWelfarePaperDownCntReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.datakey,b.datakey);jce_copy_struct(a.vctCnt,b.vctCnt);

#define WelfareClubInner_StWelfarePaperDownCntRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errcode,b.errcode);jce_copy_struct(a.errmsg,b.errmsg);

#define WelfareClubInner_StWelfarePaperCheckResultReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedid,b.feedid);jce_copy_struct(a.status,b.status);jce_copy_struct(a.type,b.type);jce_copy_struct(a.vctStatus,b.vctStatus);

#define WelfareClubInner_StWelfarePaperCheckResultRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errcode,b.errcode);jce_copy_struct(a.errmsg,b.errmsg);

#define WelfareClubInner_StGetWelfareHotListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dokiid,b.dokiid);jce_copy_struct(a.cnt,b.cnt);jce_copy_struct(a.eDType,b.eDType);

#define WelfareClubInner_StGetWelfareHotListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errcode,b.errcode);jce_copy_struct(a.errmsg,b.errmsg);jce_copy_struct(a.vctData,b.vctData);

#define WelfareClubInner_StCheckPaperIsOffReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.datakey,b.datakey);

#define WelfareClubInner_StCheckPaperIsOffRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errcode,b.errcode);jce_copy_struct(a.errmsg,b.errmsg);jce_copy_struct(a.status,b.status);

#define WelfareClubInner_StGetFeedPaperDecReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedid,b.feedid);

#define WelfareClubInner_StGetFeedPaperDecRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errcode,b.errcode);jce_copy_struct(a.errmsg,b.errmsg);jce_copy_struct(a.mapResult,b.mapResult);

#define WelfareClubInner_LastlyDownItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.url,b.url);jce_copy_struct(a.doki_id,b.doki_id);jce_copy_struct(a.lastly_down_cnt,b.lastly_down_cnt);

#define WelfareClubInner_GetWelfarePaperLastlyDownCntReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_context,b.page_context);

#define WelfareClubInner_GetWelfarePaperLastlyDownCntRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errcode,b.errcode);jce_copy_struct(a.errmsg,b.errmsg);jce_copy_struct(a.vec_down_cnt,b.vec_down_cnt);jce_copy_struct(a.page_context,b.page_context);

#define WelfareClubInner_StDokiList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.timestamp,b.timestamp);jce_copy_struct(a.vctDokiId,b.vctDokiId);

#define WelfareClubInner_StStartPaperSortReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.timestamp,b.timestamp);jce_copy_struct(a.vctDoki,b.vctDoki);

#define WelfareClubInner_StStartPaperSortRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errcode,b.errcode);jce_copy_struct(a.errmsg,b.errmsg);jce_copy_struct(a.vctSuccDoki,b.vctSuccDoki);jce_copy_struct(a.vctFailDoki,b.vctFailDoki);

#define WelfareClubInner_StWelfarePaperExtInfoReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.datakey,b.datakey);

#define WelfareClubInner_StWelfarePaperExtInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errcode,b.errcode);jce_copy_struct(a.errmsg,b.errmsg);jce_copy_struct(a.feedid,b.feedid);

#define WelfareClubInner_StWelfareNewDataReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dokiid,b.dokiid);jce_copy_struct(a.cnt,b.cnt);jce_copy_struct(a.eDType,b.eDType);

#define WelfareClubInner_StWelfareNewDataRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errcode,b.errcode);jce_copy_struct(a.errmsg,b.errmsg);jce_copy_struct(a.vctData,b.vctData);

#define WelfareClubInner_StCheckHasWelfareReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dokiid,b.dokiid);

#define WelfareClubInner_StCheckHasWelfareRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errcode,b.errcode);jce_copy_struct(a.errmsg,b.errmsg);jce_copy_struct(a.bHasWelfare,b.bHasWelfare);



#endif
