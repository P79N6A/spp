// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_live.jce'
// **********************************************************************

#ifndef __QQVIDEO_LIVE_H_
#define __QQVIDEO_LIVE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_ona.h"
#include "qqvideo_common.h"
#include "qqvideo_user_info.h"


namespace jce
{
    enum ELiveBeforeSubStatus
    {
        EBeforeNormal = 1,
        EBeforeCanceled = 2,
        EBeforeDelayed = 3,
    };
    inline string etos(const ELiveBeforeSubStatus & e)
    {
        switch(e)
        {
            case EBeforeNormal: return "EBeforeNormal";
            case EBeforeCanceled: return "EBeforeCanceled";
            case EBeforeDelayed: return "EBeforeDelayed";
            default: return "";
        }
    }
    inline int stoe(const string & s, ELiveBeforeSubStatus & e)
    {
        if(s == "EBeforeNormal")  { e=EBeforeNormal; return 0;}
        if(s == "EBeforeCanceled")  { e=EBeforeCanceled; return 0;}
        if(s == "EBeforeDelayed")  { e=EBeforeDelayed; return 0;}

        return -1;
    }

    enum ELiveOnSubStatus
    {
        EOnNormal = 1,
        EOnInterrupt = 2,
    };
    inline string etos(const ELiveOnSubStatus & e)
    {
        switch(e)
        {
            case EOnNormal: return "EOnNormal";
            case EOnInterrupt: return "EOnInterrupt";
            default: return "";
        }
    }
    inline int stoe(const string & s, ELiveOnSubStatus & e)
    {
        if(s == "EOnNormal")  { e=EOnNormal; return 0;}
        if(s == "EOnInterrupt")  { e=EOnInterrupt; return 0;}

        return -1;
    }

    enum ELiveEndSubStatus
    {
        EEndVodProcessing = 1,
        EEndVodProcessed = 2,
        EEndVodProcessFailed = 3,
    };
    inline string etos(const ELiveEndSubStatus & e)
    {
        switch(e)
        {
            case EEndVodProcessing: return "EEndVodProcessing";
            case EEndVodProcessed: return "EEndVodProcessed";
            case EEndVodProcessFailed: return "EEndVodProcessFailed";
            default: return "";
        }
    }
    inline int stoe(const string & s, ELiveEndSubStatus & e)
    {
        if(s == "EEndVodProcessing")  { e=EEndVodProcessing; return 0;}
        if(s == "EEndVodProcessed")  { e=EEndVodProcessed; return 0;}
        if(s == "EEndVodProcessFailed")  { e=EEndVodProcessFailed; return 0;}

        return -1;
    }

    struct LiveColorMatching : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveColorMatching";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        LiveColorMatching()
        :globalBg(""),unDoneBg(""),floatBg(""),textColor("")
        {
        }
        void resetDefautlt()
        {
            globalBg = "";
            unDoneBg = "";
            floatBg = "";
            textColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(globalBg, 0);
            _os.write(unDoneBg, 1);
            _os.write(floatBg, 2);
            _os.write(textColor, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(globalBg, 0, true);
            _is.read(unDoneBg, 1, true);
            _is.read(floatBg, 2, true);
            _is.read(textColor, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(globalBg,"globalBg");
            _ds.display(unDoneBg,"unDoneBg");
            _ds.display(floatBg,"floatBg");
            _ds.display(textColor,"textColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(globalBg, true);
            _ds.displaySimple(unDoneBg, true);
            _ds.displaySimple(floatBg, true);
            _ds.displaySimple(textColor, false);
            return _os;
        }
    public:
        std::string globalBg;
        std::string unDoneBg;
        std::string floatBg;
        std::string textColor;
    };
    inline bool operator==(const LiveColorMatching&l, const LiveColorMatching&r)
    {
        return l.globalBg == r.globalBg && l.unDoneBg == r.unDoneBg && l.floatBg == r.floatBg && l.textColor == r.textColor;
    }
    inline bool operator!=(const LiveColorMatching&l, const LiveColorMatching&r)
    {
        return !(l == r);
    }

    struct LiveVIPRightItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveVIPRightItem";
        }
        static string MD5()
        {
            return "4a2ec867c6bdb6b8c52194c019779898";
        }
        LiveVIPRightItem()
        :title(""),imageUrl(""),des("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            imageUrl = "";
            des = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(imageUrl, 1);
            _os.write(des, 2);
            _os.write(action, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(imageUrl, 1, true);
            _is.read(des, 2, false);
            _is.read(action, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(des,"des");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(des, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string title;
        std::string imageUrl;
        std::string des;
        jce::Action action;
    };
    inline bool operator==(const LiveVIPRightItem&l, const LiveVIPRightItem&r)
    {
        return l.title == r.title && l.imageUrl == r.imageUrl && l.des == r.des && l.action == r.action;
    }
    inline bool operator!=(const LiveVIPRightItem&l, const LiveVIPRightItem&r)
    {
        return !(l == r);
    }

    struct LiveTicketInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveTicketInfo";
        }
        static string MD5()
        {
            return "fea7702506a3d307da182c5891e0a7e8";
        }
        LiveTicketInfo()
        :imageUrl(""),title(""),time(""),orderCount(0),address(""),btnTitle(""),attentKey(""),isAttent(true),isHasLottery(false)
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
            title = "";
            time = "";
            orderCount = 0;
            address = "";
            btnTitle = "";
            attentKey = "";
            isAttent = true;
            isHasLottery = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(title, 1);
            _os.write(time, 2);
            _os.write(orderCount, 3);
            _os.write(address, 4);
            _os.write(btnTitle, 5);
            _os.write(btnAction, 6);
            _os.write(attentKey, 7);
            _os.write(isAttent, 8);
            _os.write(isHasLottery, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, true);
            _is.read(title, 1, true);
            _is.read(time, 2, true);
            _is.read(orderCount, 3, true);
            _is.read(address, 4, false);
            _is.read(btnTitle, 5, false);
            _is.read(btnAction, 6, false);
            _is.read(attentKey, 7, true);
            _is.read(isAttent, 8, true);
            _is.read(isHasLottery, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(title,"title");
            _ds.display(time,"time");
            _ds.display(orderCount,"orderCount");
            _ds.display(address,"address");
            _ds.display(btnTitle,"btnTitle");
            _ds.display(btnAction,"btnAction");
            _ds.display(attentKey,"attentKey");
            _ds.display(isAttent,"isAttent");
            _ds.display(isHasLottery,"isHasLottery");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(orderCount, true);
            _ds.displaySimple(address, true);
            _ds.displaySimple(btnTitle, true);
            _ds.displaySimple(btnAction, true);
            _ds.displaySimple(attentKey, true);
            _ds.displaySimple(isAttent, true);
            _ds.displaySimple(isHasLottery, false);
            return _os;
        }
    public:
        std::string imageUrl;
        std::string title;
        std::string time;
        taf::Int64 orderCount;
        std::string address;
        std::string btnTitle;
        jce::Action btnAction;
        std::string attentKey;
        taf::Bool isAttent;
        taf::Bool isHasLottery;
    };
    inline bool operator==(const LiveTicketInfo&l, const LiveTicketInfo&r)
    {
        return l.imageUrl == r.imageUrl && l.title == r.title && l.time == r.time && l.orderCount == r.orderCount && l.address == r.address && l.btnTitle == r.btnTitle && l.btnAction == r.btnAction && l.attentKey == r.attentKey && l.isAttent == r.isAttent && l.isHasLottery == r.isHasLottery;
    }
    inline bool operator!=(const LiveTicketInfo&l, const LiveTicketInfo&r)
    {
        return !(l == r);
    }

    struct LiveBeforeInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveBeforeInfo";
        }
        static string MD5()
        {
            return "798a16a9019b46958def93e81c432cc5";
        }
        LiveBeforeInfo()
        :hasLotteryInfo(false)
        {
        }
        void resetDefautlt()
        {
            hasLotteryInfo = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiData, 0);
            _os.write(videoItemList, 1);
            _os.write(coverDataMap, 2);
            _os.write(shareItem, 3);
            _os.write(hasLotteryInfo, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiData, 0, true);
            _is.read(videoItemList, 1, false);
            _is.read(coverDataMap, 2, false);
            _is.read(shareItem, 3, false);
            _is.read(hasLotteryInfo, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiData,"uiData");
            _ds.display(videoItemList,"videoItemList");
            _ds.display(coverDataMap,"coverDataMap");
            _ds.display(shareItem,"shareItem");
            _ds.display(hasLotteryInfo,"hasLotteryInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(videoItemList, true);
            _ds.displaySimple(coverDataMap, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(hasLotteryInfo, false);
            return _os;
        }
    public:
        vector<jce::TempletLine> uiData;
        vector<jce::VideoItemData> videoItemList;
        map<std::string, jce::CoverDataList> coverDataMap;
        jce::ShareItem shareItem;
        taf::Bool hasLotteryInfo;
    };
    inline bool operator==(const LiveBeforeInfo&l, const LiveBeforeInfo&r)
    {
        return l.uiData == r.uiData && l.videoItemList == r.videoItemList && l.coverDataMap == r.coverDataMap && l.shareItem == r.shareItem && l.hasLotteryInfo == r.hasLotteryInfo;
    }
    inline bool operator!=(const LiveBeforeInfo&l, const LiveBeforeInfo&r)
    {
        return !(l == r);
    }

    struct LiveProcessInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveProcessInfo";
        }
        static string MD5()
        {
            return "0846691b4d07f3f582af54ccfbfcaa1e";
        }
        LiveProcessInfo()
        :isGiftUse(true),propsDatakey("")
        {
        }
        void resetDefautlt()
        {
            isGiftUse = true;
            propsDatakey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(moduleList, 0);
            _os.write(teamList, 1);
            _os.write(actorList, 2);
            _os.write(isGiftUse, 3);
            _os.write(shareItem, 4);
            _os.write(propsDatakey, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(moduleList, 0, true);
            _is.read(teamList, 1, false);
            _is.read(actorList, 2, false);
            _is.read(isGiftUse, 3, false);
            _is.read(shareItem, 4, false);
            _is.read(propsDatakey, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(moduleList,"moduleList");
            _ds.display(teamList,"teamList");
            _ds.display(actorList,"actorList");
            _ds.display(isGiftUse,"isGiftUse");
            _ds.display(shareItem,"shareItem");
            _ds.display(propsDatakey,"propsDatakey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(moduleList, true);
            _ds.displaySimple(teamList, true);
            _ds.displaySimple(actorList, true);
            _ds.displaySimple(isGiftUse, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(propsDatakey, false);
            return _os;
        }
    public:
        vector<jce::LiveTabModuleInfo> moduleList;
        jce::LiveVoteInfo teamList;
        vector<jce::ActorInfo> actorList;
        taf::Bool isGiftUse;
        jce::ShareItem shareItem;
        std::string propsDatakey;
    };
    inline bool operator==(const LiveProcessInfo&l, const LiveProcessInfo&r)
    {
        return l.moduleList == r.moduleList && l.teamList == r.teamList && l.actorList == r.actorList && l.isGiftUse == r.isGiftUse && l.shareItem == r.shareItem && l.propsDatakey == r.propsDatakey;
    }
    inline bool operator!=(const LiveProcessInfo&l, const LiveProcessInfo&r)
    {
        return !(l == r);
    }

    struct LiveWhyMeInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveWhyMeInfo";
        }
        static string MD5()
        {
            return "af6788a58889ccf6cbb48f958f9d054e";
        }
        LiveWhyMeInfo()
        :vid(""),zanNum(0),dataKey(""),title(""),isPraiseOpen(true)
        {
        }
        void resetDefautlt()
        {
            vid = "";
            zanNum = 0;
            dataKey = "";
            title = "";
            isPraiseOpen = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 1);
            _os.write(zanNum, 2);
            _os.write(dataKey, 3);
            _os.write(actors, 4);
            _os.write(poster, 5);
            _os.write(title, 6);
            _os.write(isPraiseOpen, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 1, false);
            _is.read(zanNum, 2, false);
            _is.read(dataKey, 3, false);
            _is.read(actors, 4, false);
            _is.read(poster, 5, false);
            _is.read(title, 6, false);
            _is.read(isPraiseOpen, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(zanNum,"zanNum");
            _ds.display(dataKey,"dataKey");
            _ds.display(actors,"actors");
            _ds.display(poster,"poster");
            _ds.display(title,"title");
            _ds.display(isPraiseOpen,"isPraiseOpen");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(zanNum, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(actors, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(isPraiseOpen, false);
            return _os;
        }
    public:
        std::string vid;
        taf::Int64 zanNum;
        std::string dataKey;
        vector<jce::ActorInfo> actors;
        jce::Poster poster;
        std::string title;
        taf::Bool isPraiseOpen;
    };
    inline bool operator==(const LiveWhyMeInfo&l, const LiveWhyMeInfo&r)
    {
        return l.vid == r.vid && l.zanNum == r.zanNum && l.dataKey == r.dataKey && l.actors == r.actors && l.poster == r.poster && l.title == r.title && l.isPraiseOpen == r.isPraiseOpen;
    }
    inline bool operator!=(const LiveWhyMeInfo&l, const LiveWhyMeInfo&r)
    {
        return !(l == r);
    }

    struct LiveCameraInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveCameraInfo";
        }
        static string MD5()
        {
            return "c26c150cf0eb4e7e26d5418accdf0d75";
        }
        LiveCameraInfo()
        :streamId(""),index(0),picUrl(""),title(""),isVip(true),action(""),chid(""),videoFlag(0),videoFileSize(0)
        {
        }
        void resetDefautlt()
        {
            streamId = "";
            index = 0;
            picUrl = "";
            title = "";
            isVip = true;
            action = "";
            chid = "";
            videoFlag = 0;
            videoFileSize = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(streamId, 0);
            _os.write(index, 1);
            _os.write(picUrl, 2);
            _os.write(title, 3);
            _os.write(isVip, 4);
            _os.write(action, 5);
            _os.write(specialAction, 6);
            _os.write(markLabelList, 7);
            _os.write(chid, 8);
            _os.write(realAction, 9);
            _os.write(videoFlag, 10);
            _os.write(videoFileSize, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(streamId, 0, true);
            _is.read(index, 1, true);
            _is.read(picUrl, 2, true);
            _is.read(title, 3, true);
            _is.read(isVip, 4, false);
            _is.read(action, 5, false);
            _is.read(specialAction, 6, false);
            _is.read(markLabelList, 7, false);
            _is.read(chid, 8, false);
            _is.read(realAction, 9, false);
            _is.read(videoFlag, 10, false);
            _is.read(videoFileSize, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(streamId,"streamId");
            _ds.display(index,"index");
            _ds.display(picUrl,"picUrl");
            _ds.display(title,"title");
            _ds.display(isVip,"isVip");
            _ds.display(action,"action");
            _ds.display(specialAction,"specialAction");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(chid,"chid");
            _ds.display(realAction,"realAction");
            _ds.display(videoFlag,"videoFlag");
            _ds.display(videoFileSize,"videoFileSize");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(streamId, true);
            _ds.displaySimple(index, true);
            _ds.displaySimple(picUrl, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(isVip, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(specialAction, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(chid, true);
            _ds.displaySimple(realAction, true);
            _ds.displaySimple(videoFlag, true);
            _ds.displaySimple(videoFileSize, false);
            return _os;
        }
    public:
        std::string streamId;
        taf::Int32 index;
        std::string picUrl;
        std::string title;
        taf::Bool isVip;
        std::string action;
        jce::SpecialAction specialAction;
        vector<jce::MarkLabel> markLabelList;
        std::string chid;
        jce::Action realAction;
        taf::Char videoFlag;
        taf::Int64 videoFileSize;
    };
    inline bool operator==(const LiveCameraInfo&l, const LiveCameraInfo&r)
    {
        return l.streamId == r.streamId && l.index == r.index && l.picUrl == r.picUrl && l.title == r.title && l.isVip == r.isVip && l.action == r.action && l.specialAction == r.specialAction && l.markLabelList == r.markLabelList && l.chid == r.chid && l.realAction == r.realAction && l.videoFlag == r.videoFlag && l.videoFileSize == r.videoFileSize;
    }
    inline bool operator!=(const LiveCameraInfo&l, const LiveCameraInfo&r)
    {
        return !(l == r);
    }

    struct ShowBillItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ShowBillItem";
        }
        static string MD5()
        {
            return "ce6603eea1832fbc44affad0e219f7dd";
        }
        ShowBillItem()
        :id(0),startTime(0),endTime(0),title("")
        {
        }
        void resetDefautlt()
        {
            id = 0;
            startTime = 0;
            endTime = 0;
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(startTime, 1);
            _os.write(endTime, 2);
            _os.write(title, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, true);
            _is.read(startTime, 1, true);
            _is.read(endTime, 2, true);
            _is.read(title, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        taf::Int32 id;
        taf::Int64 startTime;
        taf::Int64 endTime;
        std::string title;
    };
    inline bool operator==(const ShowBillItem&l, const ShowBillItem&r)
    {
        return l.id == r.id && l.startTime == r.startTime && l.endTime == r.endTime && l.title == r.title;
    }
    inline bool operator!=(const ShowBillItem&l, const ShowBillItem&r)
    {
        return !(l == r);
    }

    struct CMarkInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CMarkInfo";
        }
        static string MD5()
        {
            return "ecc84851595fb811c3666ce03d5738f0";
        }
        CMarkInfo()
        :id(0),cate(0),vbt(0),sid(""),plsimg(""),plsimglink(""),iu(""),t("")
        {
        }
        void resetDefautlt()
        {
            id = 0;
            cate = 0;
            vbt = 0;
            sid = "";
            plsimg = "";
            plsimglink = "";
            iu = "";
            t = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(cate, 1);
            _os.write(vbt, 2);
            _os.write(sid, 3);
            _os.write(plsimg, 4);
            _os.write(plsimglink, 5);
            _os.write(iu, 6);
            _os.write(t, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, true);
            _is.read(cate, 1, true);
            _is.read(vbt, 2, false);
            _is.read(sid, 3, false);
            _is.read(plsimg, 4, false);
            _is.read(plsimglink, 5, false);
            _is.read(iu, 6, false);
            _is.read(t, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(cate,"cate");
            _ds.display(vbt,"vbt");
            _ds.display(sid,"sid");
            _ds.display(plsimg,"plsimg");
            _ds.display(plsimglink,"plsimglink");
            _ds.display(iu,"iu");
            _ds.display(t,"t");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(cate, true);
            _ds.displaySimple(vbt, true);
            _ds.displaySimple(sid, true);
            _ds.displaySimple(plsimg, true);
            _ds.displaySimple(plsimglink, true);
            _ds.displaySimple(iu, true);
            _ds.displaySimple(t, false);
            return _os;
        }
    public:
        taf::Int64 id;
        taf::Int32 cate;
        taf::Int64 vbt;
        std::string sid;
        std::string plsimg;
        std::string plsimglink;
        std::string iu;
        std::string t;
    };
    inline bool operator==(const CMarkInfo&l, const CMarkInfo&r)
    {
        return l.id == r.id && l.cate == r.cate && l.vbt == r.vbt && l.sid == r.sid && l.plsimg == r.plsimg && l.plsimglink == r.plsimglink && l.iu == r.iu && l.t == r.t;
    }
    inline bool operator!=(const CMarkInfo&l, const CMarkInfo&r)
    {
        return !(l == r);
    }

    struct LiveBannerItemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveBannerItemData";
        }
        static string MD5()
        {
            return "063faa4f9026781ef116c2614f4c4f32";
        }
        LiveBannerItemData()
        :showType(0),title(""),subTitle(""),textColor(""),bgImgUrl("")
        {
        }
        void resetDefautlt()
        {
            showType = 0;
            title = "";
            subTitle = "";
            textColor = "";
            bgImgUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(showType, 0);
            _os.write(title, 1);
            _os.write(subTitle, 2);
            _os.write(guestList, 3);
            _os.write(textColor, 4);
            _os.write(bgImgUrl, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(showType, 0, true);
            _is.read(title, 1, false);
            _is.read(subTitle, 2, false);
            _is.read(guestList, 3, false);
            _is.read(textColor, 4, false);
            _is.read(bgImgUrl, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(showType,"showType");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(guestList,"guestList");
            _ds.display(textColor,"textColor");
            _ds.display(bgImgUrl,"bgImgUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(showType, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(guestList, true);
            _ds.displaySimple(textColor, true);
            _ds.displaySimple(bgImgUrl, false);
            return _os;
        }
    public:
        taf::Char showType;
        std::string title;
        std::string subTitle;
        vector<jce::ActorInfo> guestList;
        std::string textColor;
        std::string bgImgUrl;
    };
    inline bool operator==(const LiveBannerItemData&l, const LiveBannerItemData&r)
    {
        return l.showType == r.showType && l.title == r.title && l.subTitle == r.subTitle && l.guestList == r.guestList && l.textColor == r.textColor && l.bgImgUrl == r.bgImgUrl;
    }
    inline bool operator!=(const LiveBannerItemData&l, const LiveBannerItemData&r)
    {
        return !(l == r);
    }

    struct LiveStarChatRoomInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveStarChatRoomInfo";
        }
        static string MD5()
        {
            return "59ec633a0479e0c47e29ee571b0dc24d";
        }
        LiveStarChatRoomInfo()
        :noticeCount(0),interactiveCount(0),joinCount(0)
        {
        }
        void resetDefautlt()
        {
            noticeCount = 0;
            interactiveCount = 0;
            joinCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(noticeCount, 1);
            _os.write(interactiveCount, 2);
            _os.write(joinCount, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(noticeCount, 1, false);
            _is.read(interactiveCount, 2, false);
            _is.read(joinCount, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(noticeCount,"noticeCount");
            _ds.display(interactiveCount,"interactiveCount");
            _ds.display(joinCount,"joinCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(noticeCount, true);
            _ds.displaySimple(interactiveCount, true);
            _ds.displaySimple(joinCount, false);
            return _os;
        }
    public:
        taf::Int64 noticeCount;
        taf::Int64 interactiveCount;
        taf::Int64 joinCount;
    };
    inline bool operator==(const LiveStarChatRoomInfo&l, const LiveStarChatRoomInfo&r)
    {
        return l.noticeCount == r.noticeCount && l.interactiveCount == r.interactiveCount && l.joinCount == r.joinCount;
    }
    inline bool operator!=(const LiveStarChatRoomInfo&l, const LiveStarChatRoomInfo&r)
    {
        return !(l == r);
    }

    struct LiveShowRoomEntranceInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveShowRoomEntranceInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        LiveShowRoomEntranceInfo()
        :imageUrl(""),tipTitle("")
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
            tipTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(tipTitle, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, true);
            _is.read(tipTitle, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(tipTitle,"tipTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(tipTitle, false);
            return _os;
        }
    public:
        std::string imageUrl;
        std::string tipTitle;
    };
    inline bool operator==(const LiveShowRoomEntranceInfo&l, const LiveShowRoomEntranceInfo&r)
    {
        return l.imageUrl == r.imageUrl && l.tipTitle == r.tipTitle;
    }
    inline bool operator!=(const LiveShowRoomEntranceInfo&l, const LiveShowRoomEntranceInfo&r)
    {
        return !(l == r);
    }

    struct LiveShowRoomTheme : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveShowRoomTheme";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        LiveShowRoomTheme()
        :logoUrl(""),viewColor(""),gradientStartColor(""),gradientEndColor(""),textColor("")
        {
        }
        void resetDefautlt()
        {
            logoUrl = "";
            viewColor = "";
            gradientStartColor = "";
            gradientEndColor = "";
            textColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(logoUrl, 0);
            _os.write(viewColor, 1);
            _os.write(gradientStartColor, 2);
            _os.write(gradientEndColor, 3);
            _os.write(textColor, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(logoUrl, 0, true);
            _is.read(viewColor, 1, false);
            _is.read(gradientStartColor, 2, false);
            _is.read(gradientEndColor, 3, false);
            _is.read(textColor, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(logoUrl,"logoUrl");
            _ds.display(viewColor,"viewColor");
            _ds.display(gradientStartColor,"gradientStartColor");
            _ds.display(gradientEndColor,"gradientEndColor");
            _ds.display(textColor,"textColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(logoUrl, true);
            _ds.displaySimple(viewColor, true);
            _ds.displaySimple(gradientStartColor, true);
            _ds.displaySimple(gradientEndColor, true);
            _ds.displaySimple(textColor, false);
            return _os;
        }
    public:
        std::string logoUrl;
        std::string viewColor;
        std::string gradientStartColor;
        std::string gradientEndColor;
        std::string textColor;
    };
    inline bool operator==(const LiveShowRoomTheme&l, const LiveShowRoomTheme&r)
    {
        return l.logoUrl == r.logoUrl && l.viewColor == r.viewColor && l.gradientStartColor == r.gradientStartColor && l.gradientEndColor == r.gradientEndColor && l.textColor == r.textColor;
    }
    inline bool operator!=(const LiveShowRoomTheme&l, const LiveShowRoomTheme&r)
    {
        return !(l == r);
    }

    struct LiveShowRoomInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveShowRoomInfo";
        }
        static string MD5()
        {
            return "2ff21103881ca47666d69b26801d3a71";
        }
        LiveShowRoomInfo()
        :hasShowRoom(false),backgroundImageUrl(""),dollsH5Url(""),playIntroductionH5Url(""),storeRedDotPollKey(""),storeH5Url(""),rankTitle("")
        {
        }
        void resetDefautlt()
        {
            hasShowRoom = false;
            backgroundImageUrl = "";
            dollsH5Url = "";
            playIntroductionH5Url = "";
            storeRedDotPollKey = "";
            storeH5Url = "";
            rankTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(hasShowRoom, 0);
            _os.write(entranceInfo, 1);
            _os.write(backgroundImageUrl, 2);
            _os.write(dollsH5Url, 3);
            _os.write(playIntroductionH5Url, 4);
            _os.write(storeRedDotPollKey, 5);
            _os.write(storeH5Url, 6);
            _os.write(rankTitle, 7);
            _os.write(liveShowRoomTheme, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(hasShowRoom, 0, true);
            _is.read(entranceInfo, 1, false);
            _is.read(backgroundImageUrl, 2, false);
            _is.read(dollsH5Url, 3, false);
            _is.read(playIntroductionH5Url, 4, false);
            _is.read(storeRedDotPollKey, 5, false);
            _is.read(storeH5Url, 6, false);
            _is.read(rankTitle, 7, false);
            _is.read(liveShowRoomTheme, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(hasShowRoom,"hasShowRoom");
            _ds.display(entranceInfo,"entranceInfo");
            _ds.display(backgroundImageUrl,"backgroundImageUrl");
            _ds.display(dollsH5Url,"dollsH5Url");
            _ds.display(playIntroductionH5Url,"playIntroductionH5Url");
            _ds.display(storeRedDotPollKey,"storeRedDotPollKey");
            _ds.display(storeH5Url,"storeH5Url");
            _ds.display(rankTitle,"rankTitle");
            _ds.display(liveShowRoomTheme,"liveShowRoomTheme");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(hasShowRoom, true);
            _ds.displaySimple(entranceInfo, true);
            _ds.displaySimple(backgroundImageUrl, true);
            _ds.displaySimple(dollsH5Url, true);
            _ds.displaySimple(playIntroductionH5Url, true);
            _ds.displaySimple(storeRedDotPollKey, true);
            _ds.displaySimple(storeH5Url, true);
            _ds.displaySimple(rankTitle, true);
            _ds.displaySimple(liveShowRoomTheme, false);
            return _os;
        }
    public:
        taf::Bool hasShowRoom;
        jce::LiveShowRoomEntranceInfo entranceInfo;
        std::string backgroundImageUrl;
        std::string dollsH5Url;
        std::string playIntroductionH5Url;
        std::string storeRedDotPollKey;
        std::string storeH5Url;
        std::string rankTitle;
        jce::LiveShowRoomTheme liveShowRoomTheme;
    };
    inline bool operator==(const LiveShowRoomInfo&l, const LiveShowRoomInfo&r)
    {
        return l.hasShowRoom == r.hasShowRoom && l.entranceInfo == r.entranceInfo && l.backgroundImageUrl == r.backgroundImageUrl && l.dollsH5Url == r.dollsH5Url && l.playIntroductionH5Url == r.playIntroductionH5Url && l.storeRedDotPollKey == r.storeRedDotPollKey && l.storeH5Url == r.storeH5Url && l.rankTitle == r.rankTitle && l.liveShowRoomTheme == r.liveShowRoomTheme;
    }
    inline bool operator!=(const LiveShowRoomInfo&l, const LiveShowRoomInfo&r)
    {
        return !(l == r);
    }

    struct ONALiveTrailerCountdown : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONALiveTrailerCountdown";
        }
        static string MD5()
        {
            return "80d84ce8e7b159a738660a3060902aaf";
        }
        ONALiveTrailerCountdown()
        :startTime(0),serverTime(0),title(""),uiType(0)
        {
        }
        void resetDefautlt()
        {
            startTime = 0;
            serverTime = 0;
            title = "";
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(startTime, 0);
            _os.write(serverTime, 1);
            _os.write(title, 2);
            _os.write(uiType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(startTime, 0, true);
            _is.read(serverTime, 1, true);
            _is.read(title, 2, false);
            _is.read(uiType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(startTime,"startTime");
            _ds.display(serverTime,"serverTime");
            _ds.display(title,"title");
            _ds.display(uiType,"uiType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(serverTime, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(uiType, false);
            return _os;
        }
    public:
        taf::Int64 startTime;
        taf::Int64 serverTime;
        std::string title;
        taf::Int32 uiType;
    };
    inline bool operator==(const ONALiveTrailerCountdown&l, const ONALiveTrailerCountdown&r)
    {
        return l.startTime == r.startTime && l.serverTime == r.serverTime && l.title == r.title && l.uiType == r.uiType;
    }
    inline bool operator!=(const ONALiveTrailerCountdown&l, const ONALiveTrailerCountdown&r)
    {
        return !(l == r);
    }

    struct ONALiveAttentNumber : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONALiveAttentNumber";
        }
        static string MD5()
        {
            return "3c28d913d8b6de872104298ab7654818";
        }
        ONALiveAttentNumber()
        :attentNumber(0),title("")
        {
        }
        void resetDefautlt()
        {
            attentNumber = 0;
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(attentNumber, 0);
            _os.write(title, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(attentNumber, 0, true);
            _is.read(title, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(attentNumber,"attentNumber");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(attentNumber, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        taf::Int64 attentNumber;
        std::string title;
    };
    inline bool operator==(const ONALiveAttentNumber&l, const ONALiveAttentNumber&r)
    {
        return l.attentNumber == r.attentNumber && l.title == r.title;
    }
    inline bool operator!=(const ONALiveAttentNumber&l, const ONALiveAttentNumber&r)
    {
        return !(l == r);
    }

    struct ONALiveAttent : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONALiveAttent";
        }
        static string MD5()
        {
            return "1b4902473549048b5efdffc228984857";
        }
        ONALiveAttent()
        :attentTitle(""),origPrice(""),price("")
        {
        }
        void resetDefautlt()
        {
            attentTitle = "";
            origPrice = "";
            price = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(attentItem, 0);
            _os.write(attentTitle, 1);
            _os.write(origPrice, 2);
            _os.write(price, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(attentItem, 0, true);
            _is.read(attentTitle, 1, false);
            _is.read(origPrice, 2, false);
            _is.read(price, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(attentItem,"attentItem");
            _ds.display(attentTitle,"attentTitle");
            _ds.display(origPrice,"origPrice");
            _ds.display(price,"price");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(attentTitle, true);
            _ds.displaySimple(origPrice, true);
            _ds.displaySimple(price, false);
            return _os;
        }
    public:
        jce::VideoAttentItem attentItem;
        std::string attentTitle;
        std::string origPrice;
        std::string price;
    };
    inline bool operator==(const ONALiveAttent&l, const ONALiveAttent&r)
    {
        return l.attentItem == r.attentItem && l.attentTitle == r.attentTitle && l.origPrice == r.origPrice && l.price == r.price;
    }
    inline bool operator!=(const ONALiveAttent&l, const ONALiveAttent&r)
    {
        return !(l == r);
    }

    struct ONALiveVIPRights : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONALiveVIPRights";
        }
        static string MD5()
        {
            return "8c6cb04b07039eacc455b2048640fa66";
        }
        ONALiveVIPRights()
        :title("")
        {
        }
        void resetDefautlt()
        {
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(rightList, 0);
            _os.write(title, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(rightList, 0, true);
            _is.read(title, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(rightList,"rightList");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(rightList, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        vector<jce::LiveVIPRightItem> rightList;
        std::string title;
    };
    inline bool operator==(const ONALiveVIPRights&l, const ONALiveVIPRights&r)
    {
        return l.rightList == r.rightList && l.title == r.title;
    }
    inline bool operator!=(const ONALiveVIPRights&l, const ONALiveVIPRights&r)
    {
        return !(l == r);
    }

    struct ONALiveIntroduction : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONALiveIntroduction";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        ONALiveIntroduction()
        :introduction("")
        {
        }
        void resetDefautlt()
        {
            introduction = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(introduction, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(introduction, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(introduction,"introduction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(introduction, false);
            return _os;
        }
    public:
        std::string introduction;
    };
    inline bool operator==(const ONALiveIntroduction&l, const ONALiveIntroduction&r)
    {
        return l.introduction == r.introduction;
    }
    inline bool operator!=(const ONALiveIntroduction&l, const ONALiveIntroduction&r)
    {
        return !(l == r);
    }

    struct ONAVoteRank : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAVoteRank";
        }
        static string MD5()
        {
            return "3db862d2b9b70acc05755e7f8e486132";
        }
        ONAVoteRank()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commentItem, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commentItem, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commentItem,"commentItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commentItem, false);
            return _os;
        }
    public:
        jce::CommentItem commentItem;
    };
    inline bool operator==(const ONAVoteRank&l, const ONAVoteRank&r)
    {
        return l.commentItem == r.commentItem;
    }
    inline bool operator!=(const ONAVoteRank&l, const ONAVoteRank&r)
    {
        return !(l == r);
    }

    struct ONAActorRank : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAActorRank";
        }
        static string MD5()
        {
            return "9e5c79844d8fd004766618a6602cdee9";
        }
        ONAActorRank()
        :title(""),skipRankIndex(0),des(""),subPageContent(""),showCount(0),type(0)
        {
        }
        void resetDefautlt()
        {
            title = "";
            skipRankIndex = 0;
            des = "";
            subPageContent = "";
            showCount = 0;
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(itemList, 1);
            _os.write(skipRankIndex, 2);
            _os.write(des, 3);
            _os.write(subPageContent, 4);
            _os.write(showCount, 5);
            _os.write(type, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(itemList, 1, true);
            _is.read(skipRankIndex, 2, true);
            _is.read(des, 3, false);
            _is.read(subPageContent, 4, false);
            _is.read(showCount, 5, false);
            _is.read(type, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(itemList,"itemList");
            _ds.display(skipRankIndex,"skipRankIndex");
            _ds.display(des,"des");
            _ds.display(subPageContent,"subPageContent");
            _ds.display(showCount,"showCount");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(skipRankIndex, true);
            _ds.displaySimple(des, true);
            _ds.displaySimple(subPageContent, true);
            _ds.displaySimple(showCount, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        std::string title;
        vector<jce::ActorRankItem> itemList;
        taf::Int32 skipRankIndex;
        std::string des;
        std::string subPageContent;
        taf::Int32 showCount;
        taf::Int32 type;
    };
    inline bool operator==(const ONAActorRank&l, const ONAActorRank&r)
    {
        return l.title == r.title && l.itemList == r.itemList && l.skipRankIndex == r.skipRankIndex && l.des == r.des && l.subPageContent == r.subPageContent && l.showCount == r.showCount && l.type == r.type;
    }
    inline bool operator!=(const ONAActorRank&l, const ONAActorRank&r)
    {
        return !(l == r);
    }

    struct ONALiveCompeteSchedule : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONALiveCompeteSchedule";
        }
        static string MD5()
        {
            return "33ed4b36693f4c339ffb96f7ccc06b0d";
        }
        ONALiveCompeteSchedule()
        :status(0),leftIcon(""),leftTitle(""),leftScore(0),rightIcon(""),rightTitle(""),rightScore(0),info(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            status = 0;
            leftIcon = "";
            leftTitle = "";
            leftScore = 0;
            rightIcon = "";
            rightTitle = "";
            rightScore = 0;
            info = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
            _os.write(leftIcon, 1);
            _os.write(leftTitle, 2);
            _os.write(leftScore, 3);
            _os.write(rightIcon, 4);
            _os.write(rightTitle, 5);
            _os.write(rightScore, 6);
            _os.write(info, 7);
            _os.write(action, 8);
            _os.write(detailInfos, 9);
            _os.write(reportKey, 10);
            _os.write(reportParams, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
            _is.read(leftIcon, 1, true);
            _is.read(leftTitle, 2, true);
            _is.read(leftScore, 3, true);
            _is.read(rightIcon, 4, true);
            _is.read(rightTitle, 5, true);
            _is.read(rightScore, 6, true);
            _is.read(info, 7, false);
            _is.read(action, 8, false);
            _is.read(detailInfos, 9, false);
            _is.read(reportKey, 10, false);
            _is.read(reportParams, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            _ds.display(leftIcon,"leftIcon");
            _ds.display(leftTitle,"leftTitle");
            _ds.display(leftScore,"leftScore");
            _ds.display(rightIcon,"rightIcon");
            _ds.display(rightTitle,"rightTitle");
            _ds.display(rightScore,"rightScore");
            _ds.display(info,"info");
            _ds.display(action,"action");
            _ds.display(detailInfos,"detailInfos");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, true);
            _ds.displaySimple(leftIcon, true);
            _ds.displaySimple(leftTitle, true);
            _ds.displaySimple(leftScore, true);
            _ds.displaySimple(rightIcon, true);
            _ds.displaySimple(rightTitle, true);
            _ds.displaySimple(rightScore, true);
            _ds.displaySimple(info, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(detailInfos, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 status;
        std::string leftIcon;
        std::string leftTitle;
        taf::Int32 leftScore;
        std::string rightIcon;
        std::string rightTitle;
        taf::Int32 rightScore;
        std::string info;
        jce::Action action;
        vector<std::string> detailInfos;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONALiveCompeteSchedule&l, const ONALiveCompeteSchedule&r)
    {
        return l.status == r.status && l.leftIcon == r.leftIcon && l.leftTitle == r.leftTitle && l.leftScore == r.leftScore && l.rightIcon == r.rightIcon && l.rightTitle == r.rightTitle && l.rightScore == r.rightScore && l.info == r.info && l.action == r.action && l.detailInfos == r.detailInfos && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONALiveCompeteSchedule&l, const ONALiveCompeteSchedule&r)
    {
        return !(l == r);
    }

    struct ONALiveNewsItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONALiveNewsItem";
        }
        static string MD5()
        {
            return "c6e921c07b2e0c36f097a6bbe803e252";
        }
        ONALiveNewsItem()
        :newsContent(""),newsIcon(""),newsPoint(""),title(""),sorceIcon("")
        {
        }
        void resetDefautlt()
        {
            newsContent = "";
            newsIcon = "";
            newsPoint = "";
            title = "";
            sorceIcon = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(newsContent, 0);
            _os.write(newsIcon, 1);
            _os.write(newsPoint, 2);
            _os.write(title, 3);
            _os.write(sorceIcon, 4);
            _os.write(action, 5);
            _os.write(poster, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(newsContent, 0, true);
            _is.read(newsIcon, 1, false);
            _is.read(newsPoint, 2, false);
            _is.read(title, 3, false);
            _is.read(sorceIcon, 4, false);
            _is.read(action, 5, false);
            _is.read(poster, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(newsContent,"newsContent");
            _ds.display(newsIcon,"newsIcon");
            _ds.display(newsPoint,"newsPoint");
            _ds.display(title,"title");
            _ds.display(sorceIcon,"sorceIcon");
            _ds.display(action,"action");
            _ds.display(poster,"poster");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(newsContent, true);
            _ds.displaySimple(newsIcon, true);
            _ds.displaySimple(newsPoint, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(sorceIcon, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(poster, false);
            return _os;
        }
    public:
        std::string newsContent;
        std::string newsIcon;
        std::string newsPoint;
        std::string title;
        std::string sorceIcon;
        jce::Action action;
        jce::Poster poster;
    };
    inline bool operator==(const ONALiveNewsItem&l, const ONALiveNewsItem&r)
    {
        return l.newsContent == r.newsContent && l.newsIcon == r.newsIcon && l.newsPoint == r.newsPoint && l.title == r.title && l.sorceIcon == r.sorceIcon && l.action == r.action && l.poster == r.poster;
    }
    inline bool operator!=(const ONALiveNewsItem&l, const ONALiveNewsItem&r)
    {
        return !(l == r);
    }

    struct ONALiveActorNews : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONALiveActorNews";
        }
        static string MD5()
        {
            return "62be85e2d2dca6fa8c26cb225ebc89c4";
        }
        ONALiveActorNews()
        :newsContent(""),newsIcon(""),newsPoint(""),sorceIcon("")
        {
        }
        void resetDefautlt()
        {
            newsContent = "";
            newsIcon = "";
            newsPoint = "";
            sorceIcon = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actor, 0);
            _os.write(newsContent, 1);
            _os.write(newsIcon, 2);
            _os.write(newsPoint, 3);
            _os.write(sorceIcon, 4);
            _os.write(action, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actor, 0, true);
            _is.read(newsContent, 1, false);
            _is.read(newsIcon, 2, false);
            _is.read(newsPoint, 3, false);
            _is.read(sorceIcon, 4, false);
            _is.read(action, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actor,"actor");
            _ds.display(newsContent,"newsContent");
            _ds.display(newsIcon,"newsIcon");
            _ds.display(newsPoint,"newsPoint");
            _ds.display(sorceIcon,"sorceIcon");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actor, true);
            _ds.displaySimple(newsContent, true);
            _ds.displaySimple(newsIcon, true);
            _ds.displaySimple(newsPoint, true);
            _ds.displaySimple(sorceIcon, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        jce::ActorInfo actor;
        std::string newsContent;
        std::string newsIcon;
        std::string newsPoint;
        std::string sorceIcon;
        jce::Action action;
    };
    inline bool operator==(const ONALiveActorNews&l, const ONALiveActorNews&r)
    {
        return l.actor == r.actor && l.newsContent == r.newsContent && l.newsIcon == r.newsIcon && l.newsPoint == r.newsPoint && l.sorceIcon == r.sorceIcon && l.action == r.action;
    }
    inline bool operator!=(const ONALiveActorNews&l, const ONALiveActorNews&r)
    {
        return !(l == r);
    }

    struct ONACommunityEntrance : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONACommunityEntrance";
        }
        static string MD5()
        {
            return "bcde09685a049daeef6ad654b3a775f8";
        }
        ONACommunityEntrance()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(items, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(items, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(items,"items");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(items, false);
            return _os;
        }
    public:
        vector<jce::ActionBarInfo> items;
    };
    inline bool operator==(const ONACommunityEntrance&l, const ONACommunityEntrance&r)
    {
        return l.items == r.items;
    }
    inline bool operator!=(const ONACommunityEntrance&l, const ONACommunityEntrance&r)
    {
        return !(l == r);
    }

    struct LiveLightEffectInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveLightEffectInfo";
        }
        static string MD5()
        {
            return "1c3f64090157df9bd0122cd9ac61f279";
        }
        LiveLightEffectInfo()
        :effectId(""),starId(""),adImageUrl(""),starName(""),starHeadUrl(""),title(""),subTitle(""),effectH5Url("")
        {
        }
        void resetDefautlt()
        {
            effectId = "";
            starId = "";
            adImageUrl = "";
            starName = "";
            starHeadUrl = "";
            title = "";
            subTitle = "";
            effectH5Url = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(effectId, 0);
            _os.write(starId, 1);
            _os.write(adImageUrl, 2);
            _os.write(starName, 3);
            _os.write(starHeadUrl, 4);
            _os.write(title, 5);
            _os.write(subTitle, 6);
            _os.write(effectH5Url, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(effectId, 0, true);
            _is.read(starId, 1, false);
            _is.read(adImageUrl, 2, false);
            _is.read(starName, 3, false);
            _is.read(starHeadUrl, 4, false);
            _is.read(title, 5, false);
            _is.read(subTitle, 6, false);
            _is.read(effectH5Url, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(effectId,"effectId");
            _ds.display(starId,"starId");
            _ds.display(adImageUrl,"adImageUrl");
            _ds.display(starName,"starName");
            _ds.display(starHeadUrl,"starHeadUrl");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(effectH5Url,"effectH5Url");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(effectId, true);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(adImageUrl, true);
            _ds.displaySimple(starName, true);
            _ds.displaySimple(starHeadUrl, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(effectH5Url, false);
            return _os;
        }
    public:
        std::string effectId;
        std::string starId;
        std::string adImageUrl;
        std::string starName;
        std::string starHeadUrl;
        std::string title;
        std::string subTitle;
        std::string effectH5Url;
    };
    inline bool operator==(const LiveLightEffectInfo&l, const LiveLightEffectInfo&r)
    {
        return l.effectId == r.effectId && l.starId == r.starId && l.adImageUrl == r.adImageUrl && l.starName == r.starName && l.starHeadUrl == r.starHeadUrl && l.title == r.title && l.subTitle == r.subTitle && l.effectH5Url == r.effectH5Url;
    }
    inline bool operator!=(const LiveLightEffectInfo&l, const LiveLightEffectInfo&r)
    {
        return !(l == r);
    }

    struct LiveLightInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveLightInfo";
        }
        static string MD5()
        {
            return "03da8509d32facaf39e65f76ac4e7460";
        }
        LiveLightInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(curSupportMap, 0);
            _os.write(lightEffectInfoList, 1);
            _os.write(criticalValues, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(curSupportMap, 0, false);
            _is.read(lightEffectInfoList, 1, false);
            _is.read(criticalValues, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(curSupportMap,"curSupportMap");
            _ds.display(lightEffectInfoList,"lightEffectInfoList");
            _ds.display(criticalValues,"criticalValues");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(curSupportMap, true);
            _ds.displaySimple(lightEffectInfoList, true);
            _ds.displaySimple(criticalValues, false);
            return _os;
        }
    public:
        map<std::string, taf::Int64> curSupportMap;
        vector<jce::LiveLightEffectInfo> lightEffectInfoList;
        vector<taf::Int64> criticalValues;
    };
    inline bool operator==(const LiveLightInfo&l, const LiveLightInfo&r)
    {
        return l.curSupportMap == r.curSupportMap && l.lightEffectInfoList == r.lightEffectInfoList && l.criticalValues == r.criticalValues;
    }
    inline bool operator!=(const LiveLightInfo&l, const LiveLightInfo&r)
    {
        return !(l == r);
    }

    struct QAGameConfigInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QAGameConfigInfo";
        }
        static string MD5()
        {
            return "536dc2c2efa8b35bd79509dfd753eee1";
        }
        QAGameConfigInfo()
        :QAGameVersion(0),QADowngradeLevel(0)
        {
        }
        void resetDefautlt()
        {
            QAGameVersion = 0;
            QADowngradeLevel = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(QAGameVersion, 0);
            _os.write(QADowngradeLevel, 1);
            _os.write(forbidUseReviveQuestions, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(QAGameVersion, 0, true);
            _is.read(QADowngradeLevel, 1, false);
            _is.read(forbidUseReviveQuestions, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(QAGameVersion,"QAGameVersion");
            _ds.display(QADowngradeLevel,"QADowngradeLevel");
            _ds.display(forbidUseReviveQuestions,"forbidUseReviveQuestions");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(QAGameVersion, true);
            _ds.displaySimple(QADowngradeLevel, true);
            _ds.displaySimple(forbidUseReviveQuestions, false);
            return _os;
        }
    public:
        taf::Int32 QAGameVersion;
        taf::Int32 QADowngradeLevel;
        vector<taf::Int32> forbidUseReviveQuestions;
    };
    inline bool operator==(const QAGameConfigInfo&l, const QAGameConfigInfo&r)
    {
        return l.QAGameVersion == r.QAGameVersion && l.QADowngradeLevel == r.QADowngradeLevel && l.forbidUseReviveQuestions == r.forbidUseReviveQuestions;
    }
    inline bool operator!=(const QAGameConfigInfo&l, const QAGameConfigInfo&r)
    {
        return !(l == r);
    }

    struct QAGameLiveInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QAGameLiveInfo";
        }
        static string MD5()
        {
            return "0e995920f92ca08c0aa073f31673ce53";
        }
        QAGameLiveInfo()
        :gameId(""),gameStatus(0),offLiveH5(""),offGameH5(""),encryptType(0),encryptToken(""),maxUseRevives(0),totalBonus(""),winMenCounts(0),averageBonus(""),maxQuestionIdx(0),requestServerAtEnd(0)
        {
        }
        void resetDefautlt()
        {
            gameId = "";
            gameStatus = 0;
            offLiveH5 = "";
            offGameH5 = "";
            encryptType = 0;
            encryptToken = "";
            maxUseRevives = 0;
            totalBonus = "";
            winMenCounts = 0;
            averageBonus = "";
            maxQuestionIdx = 0;
            requestServerAtEnd = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(gameId, 0);
            _os.write(gameStatus, 1);
            _os.write(offLiveH5, 2);
            _os.write(offGameH5, 3);
            _os.write(encryptType, 4);
            _os.write(encryptToken, 5);
            _os.write(maxUseRevives, 6);
            _os.write(totalBonus, 7);
            _os.write(winMenCounts, 8);
            _os.write(averageBonus, 9);
            _os.write(maxQuestionIdx, 10);
            _os.write(requestServerAtEnd, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(gameId, 0, true);
            _is.read(gameStatus, 1, true);
            _is.read(offLiveH5, 2, false);
            _is.read(offGameH5, 3, false);
            _is.read(encryptType, 4, false);
            _is.read(encryptToken, 5, false);
            _is.read(maxUseRevives, 6, false);
            _is.read(totalBonus, 7, false);
            _is.read(winMenCounts, 8, false);
            _is.read(averageBonus, 9, false);
            _is.read(maxQuestionIdx, 10, false);
            _is.read(requestServerAtEnd, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(gameId,"gameId");
            _ds.display(gameStatus,"gameStatus");
            _ds.display(offLiveH5,"offLiveH5");
            _ds.display(offGameH5,"offGameH5");
            _ds.display(encryptType,"encryptType");
            _ds.display(encryptToken,"encryptToken");
            _ds.display(maxUseRevives,"maxUseRevives");
            _ds.display(totalBonus,"totalBonus");
            _ds.display(winMenCounts,"winMenCounts");
            _ds.display(averageBonus,"averageBonus");
            _ds.display(maxQuestionIdx,"maxQuestionIdx");
            _ds.display(requestServerAtEnd,"requestServerAtEnd");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(gameId, true);
            _ds.displaySimple(gameStatus, true);
            _ds.displaySimple(offLiveH5, true);
            _ds.displaySimple(offGameH5, true);
            _ds.displaySimple(encryptType, true);
            _ds.displaySimple(encryptToken, true);
            _ds.displaySimple(maxUseRevives, true);
            _ds.displaySimple(totalBonus, true);
            _ds.displaySimple(winMenCounts, true);
            _ds.displaySimple(averageBonus, true);
            _ds.displaySimple(maxQuestionIdx, true);
            _ds.displaySimple(requestServerAtEnd, false);
            return _os;
        }
    public:
        std::string gameId;
        taf::Int32 gameStatus;
        std::string offLiveH5;
        std::string offGameH5;
        taf::Int32 encryptType;
        std::string encryptToken;
        taf::Int32 maxUseRevives;
        std::string totalBonus;
        taf::Int64 winMenCounts;
        std::string averageBonus;
        taf::Int32 maxQuestionIdx;
        taf::Int32 requestServerAtEnd;
    };
    inline bool operator==(const QAGameLiveInfo&l, const QAGameLiveInfo&r)
    {
        return l.gameId == r.gameId && l.gameStatus == r.gameStatus && l.offLiveH5 == r.offLiveH5 && l.offGameH5 == r.offGameH5 && l.encryptType == r.encryptType && l.encryptToken == r.encryptToken && l.maxUseRevives == r.maxUseRevives && l.totalBonus == r.totalBonus && l.winMenCounts == r.winMenCounts && l.averageBonus == r.averageBonus && l.maxQuestionIdx == r.maxQuestionIdx && l.requestServerAtEnd == r.requestServerAtEnd;
    }
    inline bool operator!=(const QAGameLiveInfo&l, const QAGameLiveInfo&r)
    {
        return !(l == r);
    }

    struct QAGameUserParams : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QAGameUserParams";
        }
        static string MD5()
        {
            return "8c93d07367bac72d4f4c2892aae9f0e4";
        }
        QAGameUserParams()
        :userStatus(0),questionIdxState(0),avaliableRevives(0),hasRevives(0)
        {
        }
        void resetDefautlt()
        {
            userStatus = 0;
            questionIdxState = 0;
            avaliableRevives = 0;
            hasRevives = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(userStatus, 0);
            _os.write(questionIdxState, 1);
            _os.write(avaliableRevives, 2);
            _os.write(hasRevives, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(userStatus, 0, true);
            _is.read(questionIdxState, 1, true);
            _is.read(avaliableRevives, 2, false);
            _is.read(hasRevives, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(userStatus,"userStatus");
            _ds.display(questionIdxState,"questionIdxState");
            _ds.display(avaliableRevives,"avaliableRevives");
            _ds.display(hasRevives,"hasRevives");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(userStatus, true);
            _ds.displaySimple(questionIdxState, true);
            _ds.displaySimple(avaliableRevives, true);
            _ds.displaySimple(hasRevives, false);
            return _os;
        }
    public:
        taf::Int32 userStatus;
        taf::Int32 questionIdxState;
        taf::Int32 avaliableRevives;
        taf::Int32 hasRevives;
    };
    inline bool operator==(const QAGameUserParams&l, const QAGameUserParams&r)
    {
        return l.userStatus == r.userStatus && l.questionIdxState == r.questionIdxState && l.avaliableRevives == r.avaliableRevives && l.hasRevives == r.hasRevives;
    }
    inline bool operator!=(const QAGameUserParams&l, const QAGameUserParams&r)
    {
        return !(l == r);
    }

    struct GetQAGameUserInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetQAGameUserInfoRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        GetQAGameUserInfoRequest()
        :pid(""),gameId("")
        {
        }
        void resetDefautlt()
        {
            pid = "";
            gameId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pid, 0);
            _os.write(gameId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pid, 0, true);
            _is.read(gameId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pid,"pid");
            _ds.display(gameId,"gameId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(gameId, false);
            return _os;
        }
    public:
        std::string pid;
        std::string gameId;
    };
    inline bool operator==(const GetQAGameUserInfoRequest&l, const GetQAGameUserInfoRequest&r)
    {
        return l.pid == r.pid && l.gameId == r.gameId;
    }
    inline bool operator!=(const GetQAGameUserInfoRequest&l, const GetQAGameUserInfoRequest&r)
    {
        return !(l == r);
    }

    struct GetQAGameUserInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetQAGameUserInfoResponse";
        }
        static string MD5()
        {
            return "9da64d5b0dd9511dff1620665855492e";
        }
        GetQAGameUserInfoResponse()
        :errCode(0),personalBonus("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            personalBonus = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(params, 1);
            _os.write(personalBonus, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(params, 1, true);
            _is.read(personalBonus, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(params,"params");
            _ds.display(personalBonus,"personalBonus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(params, true);
            _ds.displaySimple(personalBonus, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::QAGameUserParams params;
        std::string personalBonus;
    };
    inline bool operator==(const GetQAGameUserInfoResponse&l, const GetQAGameUserInfoResponse&r)
    {
        return l.errCode == r.errCode && l.params == r.params && l.personalBonus == r.personalBonus;
    }
    inline bool operator!=(const GetQAGameUserInfoResponse&l, const GetQAGameUserInfoResponse&r)
    {
        return !(l == r);
    }

    struct PostQAGameUserOptionRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PostQAGameUserOptionRequest";
        }
        static string MD5()
        {
            return "a9273a406ec78942a070192f5f51799d";
        }
        PostQAGameUserOptionRequest()
        :pid(""),gameId(""),sessionKey(""),questionIdx(0),answerIdx(0)
        {
        }
        void resetDefautlt()
        {
            pid = "";
            gameId = "";
            sessionKey = "";
            questionIdx = 0;
            answerIdx = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pid, 0);
            _os.write(gameId, 1);
            _os.write(sessionKey, 2);
            _os.write(questionIdx, 3);
            _os.write(answerIdx, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pid, 0, true);
            _is.read(gameId, 1, true);
            _is.read(sessionKey, 2, true);
            _is.read(questionIdx, 3, true);
            _is.read(answerIdx, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pid,"pid");
            _ds.display(gameId,"gameId");
            _ds.display(sessionKey,"sessionKey");
            _ds.display(questionIdx,"questionIdx");
            _ds.display(answerIdx,"answerIdx");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(gameId, true);
            _ds.displaySimple(sessionKey, true);
            _ds.displaySimple(questionIdx, true);
            _ds.displaySimple(answerIdx, false);
            return _os;
        }
    public:
        std::string pid;
        std::string gameId;
        std::string sessionKey;
        taf::Int32 questionIdx;
        taf::Int32 answerIdx;
    };
    inline bool operator==(const PostQAGameUserOptionRequest&l, const PostQAGameUserOptionRequest&r)
    {
        return l.pid == r.pid && l.gameId == r.gameId && l.sessionKey == r.sessionKey && l.questionIdx == r.questionIdx && l.answerIdx == r.answerIdx;
    }
    inline bool operator!=(const PostQAGameUserOptionRequest&l, const PostQAGameUserOptionRequest&r)
    {
        return !(l == r);
    }

    struct PostQAGameUserOptionResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PostQAGameUserOptionResponse";
        }
        static string MD5()
        {
            return "1c985b4fe1d00c840bd94ab9aaa39f1e";
        }
        PostQAGameUserOptionResponse()
        :errCode(0),paramDisable(false)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            paramDisable = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(params, 1);
            _os.write(paramDisable, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(params, 1, true);
            _is.read(paramDisable, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(params,"params");
            _ds.display(paramDisable,"paramDisable");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(params, true);
            _ds.displaySimple(paramDisable, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::QAGameUserParams params;
        taf::Bool paramDisable;
    };
    inline bool operator==(const PostQAGameUserOptionResponse&l, const PostQAGameUserOptionResponse&r)
    {
        return l.errCode == r.errCode && l.params == r.params && l.paramDisable == r.paramDisable;
    }
    inline bool operator!=(const PostQAGameUserOptionResponse&l, const PostQAGameUserOptionResponse&r)
    {
        return !(l == r);
    }

    struct QAGameUserStatisticsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QAGameUserStatisticsRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        QAGameUserStatisticsRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const QAGameUserStatisticsRequest&l, const QAGameUserStatisticsRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const QAGameUserStatisticsRequest&l, const QAGameUserStatisticsRequest&r)
    {
        return !(l == r);
    }

    struct QAGameUserStatisticsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QAGameUserStatisticsResponse";
        }
        static string MD5()
        {
            return "6e278d4efe4f5916088654f628111e13";
        }
        QAGameUserStatisticsResponse()
        :errCode(0),shareCode(""),gameTakes(0),gameWins(0),sumBonus(""),leftBonus(""),leftRevives(0),shareCodeUsed(false)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            shareCode = "";
            gameTakes = 0;
            gameWins = 0;
            sumBonus = "";
            leftBonus = "";
            leftRevives = 0;
            shareCodeUsed = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(shareCode, 1);
            _os.write(gameTakes, 2);
            _os.write(gameWins, 3);
            _os.write(sumBonus, 4);
            _os.write(leftBonus, 5);
            _os.write(leftRevives, 6);
            _os.write(shareCodeUsed, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(shareCode, 1, true);
            _is.read(gameTakes, 2, false);
            _is.read(gameWins, 3, false);
            _is.read(sumBonus, 4, false);
            _is.read(leftBonus, 5, false);
            _is.read(leftRevives, 6, false);
            _is.read(shareCodeUsed, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(shareCode,"shareCode");
            _ds.display(gameTakes,"gameTakes");
            _ds.display(gameWins,"gameWins");
            _ds.display(sumBonus,"sumBonus");
            _ds.display(leftBonus,"leftBonus");
            _ds.display(leftRevives,"leftRevives");
            _ds.display(shareCodeUsed,"shareCodeUsed");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(shareCode, true);
            _ds.displaySimple(gameTakes, true);
            _ds.displaySimple(gameWins, true);
            _ds.displaySimple(sumBonus, true);
            _ds.displaySimple(leftBonus, true);
            _ds.displaySimple(leftRevives, true);
            _ds.displaySimple(shareCodeUsed, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string shareCode;
        taf::Int32 gameTakes;
        taf::Int32 gameWins;
        std::string sumBonus;
        std::string leftBonus;
        taf::Int64 leftRevives;
        taf::Bool shareCodeUsed;
    };
    inline bool operator==(const QAGameUserStatisticsResponse&l, const QAGameUserStatisticsResponse&r)
    {
        return l.errCode == r.errCode && l.shareCode == r.shareCode && l.gameTakes == r.gameTakes && l.gameWins == r.gameWins && l.sumBonus == r.sumBonus && l.leftBonus == r.leftBonus && l.leftRevives == r.leftRevives && l.shareCodeUsed == r.shareCodeUsed;
    }
    inline bool operator!=(const QAGameUserStatisticsResponse&l, const QAGameUserStatisticsResponse&r)
    {
        return !(l == r);
    }

    struct GetLiveTicketInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetLiveTicketInfoRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetLiveTicketInfoRequest()
        :pid("")
        {
        }
        void resetDefautlt()
        {
            pid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pid, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pid, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pid,"pid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pid, false);
            return _os;
        }
    public:
        std::string pid;
    };
    inline bool operator==(const GetLiveTicketInfoRequest&l, const GetLiveTicketInfoRequest&r)
    {
        return l.pid == r.pid;
    }
    inline bool operator!=(const GetLiveTicketInfoRequest&l, const GetLiveTicketInfoRequest&r)
    {
        return !(l == r);
    }

    struct GetLiveTicketInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetLiveTicketInfoResponse";
        }
        static string MD5()
        {
            return "29419df3b52db3f7783c3dbdf0abcfcd";
        }
        GetLiveTicketInfoResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(ticketInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(ticketInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(ticketInfo,"ticketInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(ticketInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::LiveTicketInfo ticketInfo;
    };
    inline bool operator==(const GetLiveTicketInfoResponse&l, const GetLiveTicketInfoResponse&r)
    {
        return l.errCode == r.errCode && l.ticketInfo == r.ticketInfo;
    }
    inline bool operator!=(const GetLiveTicketInfoResponse&l, const GetLiveTicketInfoResponse&r)
    {
        return !(l == r);
    }

    struct LivePostVoteRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LivePostVoteRequest";
        }
        static string MD5()
        {
            return "41638c2818f8e9dd704cca61286e9bb8";
        }
        LivePostVoteRequest()
        :voteId("")
        {
        }
        void resetDefautlt()
        {
            voteId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(voteId, 0);
            _os.write(voteSubjects, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(voteId, 0, true);
            _is.read(voteSubjects, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(voteId,"voteId");
            _ds.display(voteSubjects,"voteSubjects");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(voteId, true);
            _ds.displaySimple(voteSubjects, false);
            return _os;
        }
    public:
        std::string voteId;
        vector<jce::LiveVoteSubject> voteSubjects;
    };
    inline bool operator==(const LivePostVoteRequest&l, const LivePostVoteRequest&r)
    {
        return l.voteId == r.voteId && l.voteSubjects == r.voteSubjects;
    }
    inline bool operator!=(const LivePostVoteRequest&l, const LivePostVoteRequest&r)
    {
        return !(l == r);
    }

    struct LivePostVoteResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LivePostVoteResponse";
        }
        static string MD5()
        {
            return "1a8b935062c60563f25c2580b968f3d0";
        }
        LivePostVoteResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(voteInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(voteInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(voteInfo,"voteInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(voteInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::LiveVoteInfo voteInfo;
    };
    inline bool operator==(const LivePostVoteResponse&l, const LivePostVoteResponse&r)
    {
        return l.errCode == r.errCode && l.voteInfo == r.voteInfo;
    }
    inline bool operator!=(const LivePostVoteResponse&l, const LivePostVoteResponse&r)
    {
        return !(l == r);
    }

    struct LivePollRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LivePollRequest";
        }
        static string MD5()
        {
            return "0d37fa65d3e10ebf38b3a0f363d4ea8b";
        }
        LivePollRequest()
        :pollDataKey(""),pollContext(""),requestType(0),needMarkInfo(0),markContext(""),scene(0)
        {
        }
        void resetDefautlt()
        {
            pollDataKey = "";
            pollContext = "";
            requestType = 0;
            needMarkInfo = 0;
            markContext = "";
            scene = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pollDataKey, 0);
            _os.write(pollContext, 1);
            _os.write(requestType, 2);
            _os.write(needMarkInfo, 3);
            _os.write(markContext, 4);
            _os.write(curSupportMap, 5);
            _os.write(scene, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pollDataKey, 0, true);
            _is.read(pollContext, 1, false);
            _is.read(requestType, 2, false);
            _is.read(needMarkInfo, 3, false);
            _is.read(markContext, 4, false);
            _is.read(curSupportMap, 5, false);
            _is.read(scene, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pollDataKey,"pollDataKey");
            _ds.display(pollContext,"pollContext");
            _ds.display(requestType,"requestType");
            _ds.display(needMarkInfo,"needMarkInfo");
            _ds.display(markContext,"markContext");
            _ds.display(curSupportMap,"curSupportMap");
            _ds.display(scene,"scene");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pollDataKey, true);
            _ds.displaySimple(pollContext, true);
            _ds.displaySimple(requestType, true);
            _ds.displaySimple(needMarkInfo, true);
            _ds.displaySimple(markContext, true);
            _ds.displaySimple(curSupportMap, true);
            _ds.displaySimple(scene, false);
            return _os;
        }
    public:
        std::string pollDataKey;
        std::string pollContext;
        taf::Int32 requestType;
        taf::Int32 needMarkInfo;
        std::string markContext;
        map<std::string, taf::Int64> curSupportMap;
        taf::Char scene;
    };
    inline bool operator==(const LivePollRequest&l, const LivePollRequest&r)
    {
        return l.pollDataKey == r.pollDataKey && l.pollContext == r.pollContext && l.requestType == r.requestType && l.needMarkInfo == r.needMarkInfo && l.markContext == r.markContext && l.curSupportMap == r.curSupportMap && l.scene == r.scene;
    }
    inline bool operator!=(const LivePollRequest&l, const LivePollRequest&r)
    {
        return !(l == r);
    }

    struct LivePollResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LivePollResponse";
        }
        static string MD5()
        {
            return "4290f53c8ab6c4c3da20569f7f320bde";
        }
        LivePollResponse()
        :errCode(0),pollContext(""),onlineNumber(0),attentNumber(0),giftCount(0),myGiftCount(0),liveStatus(0),pollTimeOut(0),serverTime(0),liveStartTime(0),streamId(""),playCount(0),likeNum(0),liveSubStatus(0),markContext(""),isPraiseOpen(true),isGiftUse(true),popularity(0),onlineGuest("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pollContext = "";
            onlineNumber = 0;
            attentNumber = 0;
            giftCount = 0;
            myGiftCount = 0;
            liveStatus = 0;
            pollTimeOut = 0;
            serverTime = 0;
            liveStartTime = 0;
            streamId = "";
            playCount = 0;
            likeNum = 0;
            liveSubStatus = 0;
            markContext = "";
            isPraiseOpen = true;
            isGiftUse = true;
            popularity = 0;
            onlineGuest = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pollContext, 1);
            _os.write(refreshTimeOut, 2);
            _os.write(refreshFlag, 3);
            _os.write(onlineNumber, 4);
            _os.write(attentNumber, 5);
            _os.write(giftCount, 6);
            _os.write(myGiftCount, 7);
            _os.write(liveStatus, 8);
            _os.write(liveEndAction, 9);
            _os.write(pollTimeOut, 10);
            _os.write(serverTime, 11);
            _os.write(liveStartTime, 12);
            _os.write(streamId, 13);
            _os.write(playCount, 14);
            _os.write(likeNum, 15);
            _os.write(liveSubStatus, 16);
            _os.write(markList, 17);
            _os.write(markContext, 18);
            _os.write(isPraiseOpen, 19);
            _os.write(isGiftUse, 20);
            _os.write(popularity, 21);
            _os.write(lightInfo, 22);
            _os.write(onlineGuest, 23);
            _os.write(chatRoomInfo, 24);
            _os.write(qaGameInfo, 25);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pollContext, 1, false);
            _is.read(refreshTimeOut, 2, false);
            _is.read(refreshFlag, 3, false);
            _is.read(onlineNumber, 4, false);
            _is.read(attentNumber, 5, false);
            _is.read(giftCount, 6, false);
            _is.read(myGiftCount, 7, false);
            _is.read(liveStatus, 8, false);
            _is.read(liveEndAction, 9, false);
            _is.read(pollTimeOut, 10, false);
            _is.read(serverTime, 11, false);
            _is.read(liveStartTime, 12, false);
            _is.read(streamId, 13, false);
            _is.read(playCount, 14, false);
            _is.read(likeNum, 15, false);
            _is.read(liveSubStatus, 16, false);
            _is.read(markList, 17, false);
            _is.read(markContext, 18, false);
            _is.read(isPraiseOpen, 19, false);
            _is.read(isGiftUse, 20, false);
            _is.read(popularity, 21, false);
            _is.read(lightInfo, 22, false);
            _is.read(onlineGuest, 23, false);
            _is.read(chatRoomInfo, 24, false);
            _is.read(qaGameInfo, 25, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pollContext,"pollContext");
            _ds.display(refreshTimeOut,"refreshTimeOut");
            _ds.display(refreshFlag,"refreshFlag");
            _ds.display(onlineNumber,"onlineNumber");
            _ds.display(attentNumber,"attentNumber");
            _ds.display(giftCount,"giftCount");
            _ds.display(myGiftCount,"myGiftCount");
            _ds.display(liveStatus,"liveStatus");
            _ds.display(liveEndAction,"liveEndAction");
            _ds.display(pollTimeOut,"pollTimeOut");
            _ds.display(serverTime,"serverTime");
            _ds.display(liveStartTime,"liveStartTime");
            _ds.display(streamId,"streamId");
            _ds.display(playCount,"playCount");
            _ds.display(likeNum,"likeNum");
            _ds.display(liveSubStatus,"liveSubStatus");
            _ds.display(markList,"markList");
            _ds.display(markContext,"markContext");
            _ds.display(isPraiseOpen,"isPraiseOpen");
            _ds.display(isGiftUse,"isGiftUse");
            _ds.display(popularity,"popularity");
            _ds.display(lightInfo,"lightInfo");
            _ds.display(onlineGuest,"onlineGuest");
            _ds.display(chatRoomInfo,"chatRoomInfo");
            _ds.display(qaGameInfo,"qaGameInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pollContext, true);
            _ds.displaySimple(refreshTimeOut, true);
            _ds.displaySimple(refreshFlag, true);
            _ds.displaySimple(onlineNumber, true);
            _ds.displaySimple(attentNumber, true);
            _ds.displaySimple(giftCount, true);
            _ds.displaySimple(myGiftCount, true);
            _ds.displaySimple(liveStatus, true);
            _ds.displaySimple(liveEndAction, true);
            _ds.displaySimple(pollTimeOut, true);
            _ds.displaySimple(serverTime, true);
            _ds.displaySimple(liveStartTime, true);
            _ds.displaySimple(streamId, true);
            _ds.displaySimple(playCount, true);
            _ds.displaySimple(likeNum, true);
            _ds.displaySimple(liveSubStatus, true);
            _ds.displaySimple(markList, true);
            _ds.displaySimple(markContext, true);
            _ds.displaySimple(isPraiseOpen, true);
            _ds.displaySimple(isGiftUse, true);
            _ds.displaySimple(popularity, true);
            _ds.displaySimple(lightInfo, true);
            _ds.displaySimple(onlineGuest, true);
            _ds.displaySimple(chatRoomInfo, true);
            _ds.displaySimple(qaGameInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string pollContext;
        map<std::string, taf::Int32> refreshTimeOut;
        map<std::string, taf::Int32> refreshFlag;
        taf::Int64 onlineNumber;
        taf::Int64 attentNumber;
        taf::Int64 giftCount;
        taf::Int64 myGiftCount;
        taf::Int32 liveStatus;
        jce::Action liveEndAction;
        taf::Int32 pollTimeOut;
        taf::Int64 serverTime;
        taf::Int64 liveStartTime;
        std::string streamId;
        taf::Int64 playCount;
        taf::Int64 likeNum;
        taf::Int32 liveSubStatus;
        vector<jce::CMarkInfo> markList;
        std::string markContext;
        taf::Bool isPraiseOpen;
        taf::Bool isGiftUse;
        taf::Int64 popularity;
        jce::LiveLightInfo lightInfo;
        std::string onlineGuest;
        jce::LiveStarChatRoomInfo chatRoomInfo;
        jce::QAGameLiveInfo qaGameInfo;
    };
    inline bool operator==(const LivePollResponse&l, const LivePollResponse&r)
    {
        return l.errCode == r.errCode && l.pollContext == r.pollContext && l.refreshTimeOut == r.refreshTimeOut && l.refreshFlag == r.refreshFlag && l.onlineNumber == r.onlineNumber && l.attentNumber == r.attentNumber && l.giftCount == r.giftCount && l.myGiftCount == r.myGiftCount && l.liveStatus == r.liveStatus && l.liveEndAction == r.liveEndAction && l.pollTimeOut == r.pollTimeOut && l.serverTime == r.serverTime && l.liveStartTime == r.liveStartTime && l.streamId == r.streamId && l.playCount == r.playCount && l.likeNum == r.likeNum && l.liveSubStatus == r.liveSubStatus && l.markList == r.markList && l.markContext == r.markContext && l.isPraiseOpen == r.isPraiseOpen && l.isGiftUse == r.isGiftUse && l.popularity == r.popularity && l.lightInfo == r.lightInfo && l.onlineGuest == r.onlineGuest && l.chatRoomInfo == r.chatRoomInfo && l.qaGameInfo == r.qaGameInfo;
    }
    inline bool operator!=(const LivePollResponse&l, const LivePollResponse&r)
    {
        return !(l == r);
    }

    struct GetCommentDetailsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCommentDetailsRequest";
        }
        static string MD5()
        {
            return "a5c9019ea89f626dc426a978258ff1f1";
        }
        GetCommentDetailsRequest()
        :commentKey(""),originCommentId(""),pageContext(""),filterKey(""),pageFlag(0)
        {
        }
        void resetDefautlt()
        {
            commentKey = "";
            originCommentId = "";
            pageContext = "";
            filterKey = "";
            pageFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commentKey, 0);
            _os.write(originCommentId, 1);
            _os.write(pageContext, 2);
            _os.write(filterKey, 3);
            _os.write(pageFlag, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commentKey, 0, true);
            _is.read(originCommentId, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(filterKey, 3, false);
            _is.read(pageFlag, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commentKey,"commentKey");
            _ds.display(originCommentId,"originCommentId");
            _ds.display(pageContext,"pageContext");
            _ds.display(filterKey,"filterKey");
            _ds.display(pageFlag,"pageFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commentKey, true);
            _ds.displaySimple(originCommentId, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(filterKey, true);
            _ds.displaySimple(pageFlag, false);
            return _os;
        }
    public:
        std::string commentKey;
        std::string originCommentId;
        std::string pageContext;
        std::string filterKey;
        taf::Int32 pageFlag;
    };
    inline bool operator==(const GetCommentDetailsRequest&l, const GetCommentDetailsRequest&r)
    {
        return l.commentKey == r.commentKey && l.originCommentId == r.originCommentId && l.pageContext == r.pageContext && l.filterKey == r.filterKey && l.pageFlag == r.pageFlag;
    }
    inline bool operator!=(const GetCommentDetailsRequest&l, const GetCommentDetailsRequest&r)
    {
        return !(l == r);
    }

    struct GetCommentDetailsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCommentDetailsResponse";
        }
        static string MD5()
        {
            return "ec7c7ebf5fca9b42bc68f8d03aa79ea8";
        }
        GetCommentDetailsResponse()
        :errCode(0),hasNextPage(true),pageContext(""),commentCount(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasNextPage = true;
            pageContext = "";
            commentCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(hasNextPage, 1);
            _os.write(pageContext, 2);
            _os.write(commentCount, 3);
            _os.write(commentList, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(hasNextPage, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(commentCount, 3, false);
            _is.read(commentList, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(pageContext,"pageContext");
            _ds.display(commentCount,"commentCount");
            _ds.display(commentList,"commentList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(commentCount, true);
            _ds.displaySimple(commentList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Bool hasNextPage;
        std::string pageContext;
        taf::Int32 commentCount;
        vector<jce::CommentItem> commentList;
    };
    inline bool operator==(const GetCommentDetailsResponse&l, const GetCommentDetailsResponse&r)
    {
        return l.errCode == r.errCode && l.hasNextPage == r.hasNextPage && l.pageContext == r.pageContext && l.commentCount == r.commentCount && l.commentList == r.commentList;
    }
    inline bool operator!=(const GetCommentDetailsResponse&l, const GetCommentDetailsResponse&r)
    {
        return !(l == r);
    }

    struct LiveDokiRecommendStarListInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveDokiRecommendStarListInfo";
        }
        static string MD5()
        {
            return "151fa7a6822b7c628dd702f05b8b1696";
        }
        LiveDokiRecommendStarListInfo()
        :title(""),mainColor("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            mainColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(recommendStarList, 1);
            _os.write(mainColor, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(recommendStarList, 1, false);
            _is.read(mainColor, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(recommendStarList,"recommendStarList");
            _ds.display(mainColor,"mainColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(recommendStarList, true);
            _ds.displaySimple(mainColor, false);
            return _os;
        }
    public:
        std::string title;
        vector<jce::ActorInfo> recommendStarList;
        std::string mainColor;
    };
    inline bool operator==(const LiveDokiRecommendStarListInfo&l, const LiveDokiRecommendStarListInfo&r)
    {
        return l.title == r.title && l.recommendStarList == r.recommendStarList && l.mainColor == r.mainColor;
    }
    inline bool operator!=(const LiveDokiRecommendStarListInfo&l, const LiveDokiRecommendStarListInfo&r)
    {
        return !(l == r);
    }

    struct PlayerActivityInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PlayerActivityInfo";
        }
        static string MD5()
        {
            return "34b1211e02f0cd6b1dea3079f5c0dea3";
        }
        PlayerActivityInfo()
        :imageUrl(""),activityUrl("")
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
            activityUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(activityUrl, 1);
            _os.write(action, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, false);
            _is.read(activityUrl, 1, false);
            _is.read(action, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(activityUrl,"activityUrl");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(activityUrl, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string imageUrl;
        std::string activityUrl;
        jce::Action action;
    };
    inline bool operator==(const PlayerActivityInfo&l, const PlayerActivityInfo&r)
    {
        return l.imageUrl == r.imageUrl && l.activityUrl == r.activityUrl && l.action == r.action;
    }
    inline bool operator!=(const PlayerActivityInfo&l, const PlayerActivityInfo&r)
    {
        return !(l == r);
    }

    struct LiveRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveRequest";
        }
        static string MD5()
        {
            return "9d997e0d78b75a55f5d976efda3dbb1c";
        }
        LiveRequest()
        :pid(""),requestType(0),scene(0)
        {
        }
        void resetDefautlt()
        {
            pid = "";
            requestType = 0;
            scene = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pid, 0);
            _os.write(requestType, 1);
            _os.write(scene, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pid, 0, true);
            _is.read(requestType, 1, false);
            _is.read(scene, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pid,"pid");
            _ds.display(requestType,"requestType");
            _ds.display(scene,"scene");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(requestType, true);
            _ds.displaySimple(scene, false);
            return _os;
        }
    public:
        std::string pid;
        taf::Int32 requestType;
        taf::Char scene;
    };
    inline bool operator==(const LiveRequest&l, const LiveRequest&r)
    {
        return l.pid == r.pid && l.requestType == r.requestType && l.scene == r.scene;
    }
    inline bool operator!=(const LiveRequest&l, const LiveRequest&r)
    {
        return !(l == r);
    }

    struct LiveResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveResponse";
        }
        static string MD5()
        {
            return "d27529c538c684d1b4e35fae13335efc";
        }
        LiveResponse()
        :errCode(0),onlineNumber(0),pollDataKey(""),liveStatus(0),serverTime(0),responseType(0),multiCameraKey(""),isFullScreen(true),liveType(0),liveSubStatus(0),popularity(0),multiCameraTipsCount(0),multiCameraTips(""),pcid(""),liveStartTime(0),liveEndRecommendKey(""),routeType(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            onlineNumber = 0;
            pollDataKey = "";
            liveStatus = 0;
            serverTime = 0;
            responseType = 0;
            multiCameraKey = "";
            isFullScreen = true;
            liveType = 0;
            liveSubStatus = 0;
            popularity = 0;
            multiCameraTipsCount = 0;
            multiCameraTips = "";
            pcid = "";
            liveStartTime = 0;
            liveEndRecommendKey = "";
            routeType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(attentItem, 1);
            _os.write(liveItemData, 2);
            _os.write(onlineNumber, 3);
            _os.write(pollDataKey, 4);
            _os.write(liveStatus, 5);
            _os.write(liveBeforeInfo, 6);
            _os.write(liveProcessInfo, 7);
            _os.write(liveEndAction, 8);
            _os.write(serverTime, 9);
            _os.write(liveColor, 10);
            _os.write(shareItem, 11);
            _os.write(responseType, 12);
            _os.write(multiCameraKey, 13);
            _os.write(isFullScreen, 14);
            _os.write(liveType, 15);
            _os.write(liveInfo, 16);
            _os.write(liveSubStatus, 17);
            _os.write(popularity, 18);
            _os.write(multiCameraTipsCount, 19);
            _os.write(multiCameraTips, 20);
            _os.write(pcid, 21);
            _os.write(recommendAppInfo, 22);
            _os.write(liveStartTime, 23);
            _os.write(bannerItemData, 24);
            _os.write(showRoomInfo, 25);
            _os.write(liveEndRecommendKey, 26);
            _os.write(recommendStarListInfo, 27);
            _os.write(routeType, 28);
            _os.write(qagameConfig, 29);
            _os.write(qaGameInfo, 30);
            _os.write(playerActivityInfo, 31);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(attentItem, 1, true);
            _is.read(liveItemData, 2, false);
            _is.read(onlineNumber, 3, false);
            _is.read(pollDataKey, 4, false);
            _is.read(liveStatus, 5, false);
            _is.read(liveBeforeInfo, 6, false);
            _is.read(liveProcessInfo, 7, false);
            _is.read(liveEndAction, 8, false);
            _is.read(serverTime, 9, false);
            _is.read(liveColor, 10, false);
            _is.read(shareItem, 11, false);
            _is.read(responseType, 12, false);
            _is.read(multiCameraKey, 13, false);
            _is.read(isFullScreen, 14, false);
            _is.read(liveType, 15, false);
            _is.read(liveInfo, 16, false);
            _is.read(liveSubStatus, 17, false);
            _is.read(popularity, 18, false);
            _is.read(multiCameraTipsCount, 19, false);
            _is.read(multiCameraTips, 20, false);
            _is.read(pcid, 21, false);
            _is.read(recommendAppInfo, 22, false);
            _is.read(liveStartTime, 23, false);
            _is.read(bannerItemData, 24, false);
            _is.read(showRoomInfo, 25, false);
            _is.read(liveEndRecommendKey, 26, false);
            _is.read(recommendStarListInfo, 27, false);
            _is.read(routeType, 28, false);
            _is.read(qagameConfig, 29, false);
            _is.read(qaGameInfo, 30, false);
            _is.read(playerActivityInfo, 31, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(attentItem,"attentItem");
            _ds.display(liveItemData,"liveItemData");
            _ds.display(onlineNumber,"onlineNumber");
            _ds.display(pollDataKey,"pollDataKey");
            _ds.display(liveStatus,"liveStatus");
            _ds.display(liveBeforeInfo,"liveBeforeInfo");
            _ds.display(liveProcessInfo,"liveProcessInfo");
            _ds.display(liveEndAction,"liveEndAction");
            _ds.display(serverTime,"serverTime");
            _ds.display(liveColor,"liveColor");
            _ds.display(shareItem,"shareItem");
            _ds.display(responseType,"responseType");
            _ds.display(multiCameraKey,"multiCameraKey");
            _ds.display(isFullScreen,"isFullScreen");
            _ds.display(liveType,"liveType");
            _ds.display(liveInfo,"liveInfo");
            _ds.display(liveSubStatus,"liveSubStatus");
            _ds.display(popularity,"popularity");
            _ds.display(multiCameraTipsCount,"multiCameraTipsCount");
            _ds.display(multiCameraTips,"multiCameraTips");
            _ds.display(pcid,"pcid");
            _ds.display(recommendAppInfo,"recommendAppInfo");
            _ds.display(liveStartTime,"liveStartTime");
            _ds.display(bannerItemData,"bannerItemData");
            _ds.display(showRoomInfo,"showRoomInfo");
            _ds.display(liveEndRecommendKey,"liveEndRecommendKey");
            _ds.display(recommendStarListInfo,"recommendStarListInfo");
            _ds.display(routeType,"routeType");
            _ds.display(qagameConfig,"qagameConfig");
            _ds.display(qaGameInfo,"qaGameInfo");
            _ds.display(playerActivityInfo,"playerActivityInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(liveItemData, true);
            _ds.displaySimple(onlineNumber, true);
            _ds.displaySimple(pollDataKey, true);
            _ds.displaySimple(liveStatus, true);
            _ds.displaySimple(liveBeforeInfo, true);
            _ds.displaySimple(liveProcessInfo, true);
            _ds.displaySimple(liveEndAction, true);
            _ds.displaySimple(serverTime, true);
            _ds.displaySimple(liveColor, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(responseType, true);
            _ds.displaySimple(multiCameraKey, true);
            _ds.displaySimple(isFullScreen, true);
            _ds.displaySimple(liveType, true);
            _ds.displaySimple(liveInfo, true);
            _ds.displaySimple(liveSubStatus, true);
            _ds.displaySimple(popularity, true);
            _ds.displaySimple(multiCameraTipsCount, true);
            _ds.displaySimple(multiCameraTips, true);
            _ds.displaySimple(pcid, true);
            _ds.displaySimple(recommendAppInfo, true);
            _ds.displaySimple(liveStartTime, true);
            _ds.displaySimple(bannerItemData, true);
            _ds.displaySimple(showRoomInfo, true);
            _ds.displaySimple(liveEndRecommendKey, true);
            _ds.displaySimple(recommendStarListInfo, true);
            _ds.displaySimple(routeType, true);
            _ds.displaySimple(qagameConfig, true);
            _ds.displaySimple(qaGameInfo, true);
            _ds.displaySimple(playerActivityInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::VideoAttentItem attentItem;
        jce::LiveVideoItemData liveItemData;
        taf::Int64 onlineNumber;
        std::string pollDataKey;
        taf::Int32 liveStatus;
        jce::LiveBeforeInfo liveBeforeInfo;
        jce::LiveProcessInfo liveProcessInfo;
        jce::Action liveEndAction;
        taf::Int64 serverTime;
        jce::LiveColorMatching liveColor;
        jce::ShareItem shareItem;
        taf::Int32 responseType;
        std::string multiCameraKey;
        taf::Bool isFullScreen;
        taf::Int32 liveType;
        jce::LiveWhyMeInfo liveInfo;
        taf::Int32 liveSubStatus;
        taf::Int64 popularity;
        taf::Int32 multiCameraTipsCount;
        std::string multiCameraTips;
        std::string pcid;
        jce::AppInfo recommendAppInfo;
        taf::Int64 liveStartTime;
        jce::LiveBannerItemData bannerItemData;
        jce::LiveShowRoomInfo showRoomInfo;
        std::string liveEndRecommendKey;
        jce::LiveDokiRecommendStarListInfo recommendStarListInfo;
        taf::Int32 routeType;
        jce::QAGameConfigInfo qagameConfig;
        jce::QAGameLiveInfo qaGameInfo;
        jce::PlayerActivityInfo playerActivityInfo;
    };
    inline bool operator==(const LiveResponse&l, const LiveResponse&r)
    {
        return l.errCode == r.errCode && l.attentItem == r.attentItem && l.liveItemData == r.liveItemData && l.onlineNumber == r.onlineNumber && l.pollDataKey == r.pollDataKey && l.liveStatus == r.liveStatus && l.liveBeforeInfo == r.liveBeforeInfo && l.liveProcessInfo == r.liveProcessInfo && l.liveEndAction == r.liveEndAction && l.serverTime == r.serverTime && l.liveColor == r.liveColor && l.shareItem == r.shareItem && l.responseType == r.responseType && l.multiCameraKey == r.multiCameraKey && l.isFullScreen == r.isFullScreen && l.liveType == r.liveType && l.liveInfo == r.liveInfo && l.liveSubStatus == r.liveSubStatus && l.popularity == r.popularity && l.multiCameraTipsCount == r.multiCameraTipsCount && l.multiCameraTips == r.multiCameraTips && l.pcid == r.pcid && l.recommendAppInfo == r.recommendAppInfo && l.liveStartTime == r.liveStartTime && l.bannerItemData == r.bannerItemData && l.showRoomInfo == r.showRoomInfo && l.liveEndRecommendKey == r.liveEndRecommendKey && l.recommendStarListInfo == r.recommendStarListInfo && l.routeType == r.routeType && l.qagameConfig == r.qagameConfig && l.qaGameInfo == r.qaGameInfo && l.playerActivityInfo == r.playerActivityInfo;
    }
    inline bool operator!=(const LiveResponse&l, const LiveResponse&r)
    {
        return !(l == r);
    }

    struct LiveGetRankListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveGetRankListRequest";
        }
        static string MD5()
        {
            return "1efd54d3ec1e78e4b8868b1c7518f7b6";
        }
        LiveGetRankListRequest()
        :tabType(0),tabDataKey(""),dataType(0)
        {
        }
        void resetDefautlt()
        {
            tabType = 0;
            tabDataKey = "";
            dataType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tabType, 0);
            _os.write(tabDataKey, 1);
            _os.write(dataType, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tabType, 0, true);
            _is.read(tabDataKey, 1, true);
            _is.read(dataType, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tabType,"tabType");
            _ds.display(tabDataKey,"tabDataKey");
            _ds.display(dataType,"dataType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tabType, true);
            _ds.displaySimple(tabDataKey, true);
            _ds.displaySimple(dataType, false);
            return _os;
        }
    public:
        taf::Int32 tabType;
        std::string tabDataKey;
        taf::Char dataType;
    };
    inline bool operator==(const LiveGetRankListRequest&l, const LiveGetRankListRequest&r)
    {
        return l.tabType == r.tabType && l.tabDataKey == r.tabDataKey && l.dataType == r.dataType;
    }
    inline bool operator!=(const LiveGetRankListRequest&l, const LiveGetRankListRequest&r)
    {
        return !(l == r);
    }

    struct LiveGetRankListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveGetRankListResponse";
        }
        static string MD5()
        {
            return "30db60856c3f115ddfc036315f639a05";
        }
        LiveGetRankListResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
    };
    inline bool operator==(const LiveGetRankListResponse&l, const LiveGetRankListResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData;
    }
    inline bool operator!=(const LiveGetRankListResponse&l, const LiveGetRankListResponse&r)
    {
        return !(l == r);
    }

    struct LiveShowBillRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveShowBillRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        LiveShowBillRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const LiveShowBillRequest&l, const LiveShowBillRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const LiveShowBillRequest&l, const LiveShowBillRequest&r)
    {
        return !(l == r);
    }

    struct LiveShowBillResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveShowBillResponse";
        }
        static string MD5()
        {
            return "2d39e9c684fe7db3b0a2b144f0f781a6";
        }
        LiveShowBillResponse()
        :errCode(0),serverTime(0),pageContext(""),isHaveNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            serverTime = 0;
            pageContext = "";
            isHaveNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(serverTime, 1);
            _os.write(billItems, 2);
            _os.write(pageContext, 3);
            _os.write(isHaveNextPage, 4);
            _os.write(uiData, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(serverTime, 1, false);
            _is.read(billItems, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(isHaveNextPage, 4, false);
            _is.read(uiData, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(serverTime,"serverTime");
            _ds.display(billItems,"billItems");
            _ds.display(pageContext,"pageContext");
            _ds.display(isHaveNextPage,"isHaveNextPage");
            _ds.display(uiData,"uiData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(serverTime, true);
            _ds.displaySimple(billItems, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isHaveNextPage, true);
            _ds.displaySimple(uiData, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int64 serverTime;
        vector<jce::ShowBillItem> billItems;
        std::string pageContext;
        taf::Bool isHaveNextPage;
        vector<jce::TempletLine> uiData;
    };
    inline bool operator==(const LiveShowBillResponse&l, const LiveShowBillResponse&r)
    {
        return l.errCode == r.errCode && l.serverTime == r.serverTime && l.billItems == r.billItems && l.pageContext == r.pageContext && l.isHaveNextPage == r.isHaveNextPage && l.uiData == r.uiData;
    }
    inline bool operator!=(const LiveShowBillResponse&l, const LiveShowBillResponse&r)
    {
        return !(l == r);
    }

    struct LiveVideoListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveVideoListRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        LiveVideoListRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const LiveVideoListRequest&l, const LiveVideoListRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const LiveVideoListRequest&l, const LiveVideoListRequest&r)
    {
        return !(l == r);
    }

    struct LiveVideoListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveVideoListResponse";
        }
        static string MD5()
        {
            return "8e20d544570fc1e65bbb5ca7673ea635";
        }
        LiveVideoListResponse()
        :errCode(0),pageContext(""),isHaveNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            isHaveNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(isHaveNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(isHaveNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(isHaveNextPage,"isHaveNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isHaveNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool isHaveNextPage;
    };
    inline bool operator==(const LiveVideoListResponse&l, const LiveVideoListResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.isHaveNextPage == r.isHaveNextPage;
    }
    inline bool operator!=(const LiveVideoListResponse&l, const LiveVideoListResponse&r)
    {
        return !(l == r);
    }

    struct LiveMultiCameraInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveMultiCameraInfoRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        LiveMultiCameraInfoRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const LiveMultiCameraInfoRequest&l, const LiveMultiCameraInfoRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const LiveMultiCameraInfoRequest&l, const LiveMultiCameraInfoRequest&r)
    {
        return !(l == r);
    }

    struct LiveMultiCameraInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveMultiCameraInfoResponse";
        }
        static string MD5()
        {
            return "b5e6cff4952192e8f9113178450bcd62";
        }
        LiveMultiCameraInfoResponse()
        :refreshInterval(5),cameraInfoTips("")
        {
        }
        void resetDefautlt()
        {
            refreshInterval = 5;
            cameraInfoTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(refreshInterval, 0);
            _os.write(cameraInfos, 1);
            _os.write(cameraInfoTips, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(refreshInterval, 0, false);
            _is.read(cameraInfos, 1, true);
            _is.read(cameraInfoTips, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(refreshInterval,"refreshInterval");
            _ds.display(cameraInfos,"cameraInfos");
            _ds.display(cameraInfoTips,"cameraInfoTips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(refreshInterval, true);
            _ds.displaySimple(cameraInfos, true);
            _ds.displaySimple(cameraInfoTips, false);
            return _os;
        }
    public:
        taf::Int32 refreshInterval;
        vector<jce::LiveCameraInfo> cameraInfos;
        std::string cameraInfoTips;
    };
    inline bool operator==(const LiveMultiCameraInfoResponse&l, const LiveMultiCameraInfoResponse&r)
    {
        return l.refreshInterval == r.refreshInterval && l.cameraInfos == r.cameraInfos && l.cameraInfoTips == r.cameraInfoTips;
    }
    inline bool operator!=(const LiveMultiCameraInfoResponse&l, const LiveMultiCameraInfoResponse&r)
    {
        return !(l == r);
    }

    struct LiveWaitPollRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveWaitPollRequest";
        }
        static string MD5()
        {
            return "e9769a2cbe400e5acc45e0aadffd1d4a";
        }
        LiveWaitPollRequest()
        :pollDataKey(""),pollContext(""),requestType(0),waitSessionKey("")
        {
        }
        void resetDefautlt()
        {
            pollDataKey = "";
            pollContext = "";
            requestType = 0;
            waitSessionKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pollDataKey, 0);
            _os.write(pollContext, 1);
            _os.write(requestType, 2);
            _os.write(waitSessionKey, 3);
            _os.write(curSupportMap, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pollDataKey, 0, true);
            _is.read(pollContext, 1, false);
            _is.read(requestType, 2, false);
            _is.read(waitSessionKey, 3, false);
            _is.read(curSupportMap, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pollDataKey,"pollDataKey");
            _ds.display(pollContext,"pollContext");
            _ds.display(requestType,"requestType");
            _ds.display(waitSessionKey,"waitSessionKey");
            _ds.display(curSupportMap,"curSupportMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pollDataKey, true);
            _ds.displaySimple(pollContext, true);
            _ds.displaySimple(requestType, true);
            _ds.displaySimple(waitSessionKey, true);
            _ds.displaySimple(curSupportMap, false);
            return _os;
        }
    public:
        std::string pollDataKey;
        std::string pollContext;
        taf::Int32 requestType;
        std::string waitSessionKey;
        map<std::string, taf::Int64> curSupportMap;
    };
    inline bool operator==(const LiveWaitPollRequest&l, const LiveWaitPollRequest&r)
    {
        return l.pollDataKey == r.pollDataKey && l.pollContext == r.pollContext && l.requestType == r.requestType && l.waitSessionKey == r.waitSessionKey && l.curSupportMap == r.curSupportMap;
    }
    inline bool operator!=(const LiveWaitPollRequest&l, const LiveWaitPollRequest&r)
    {
        return !(l == r);
    }

    struct LiveWaitPollResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveWaitPollResponse";
        }
        static string MD5()
        {
            return "12f35dc9886a8f0ce1ca1333367be51c";
        }
        LiveWaitPollResponse()
        :errCode(0),pollContext(""),onlineNumber(0),attentNumber(0),giftCount(0),myGiftCount(0),liveStatus(0),pollTimeOut(0),serverTime(0),liveStartTime(0),streamId(""),playCount(0),likeNum(0),waitRank(0),vipJump(0),liveSubStatus(0),isPraiseOpen(true),isGiftUse(true),popularity(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pollContext = "";
            onlineNumber = 0;
            attentNumber = 0;
            giftCount = 0;
            myGiftCount = 0;
            liveStatus = 0;
            pollTimeOut = 0;
            serverTime = 0;
            liveStartTime = 0;
            streamId = "";
            playCount = 0;
            likeNum = 0;
            waitRank = 0;
            vipJump = 0;
            liveSubStatus = 0;
            isPraiseOpen = true;
            isGiftUse = true;
            popularity = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pollContext, 1);
            _os.write(refreshTimeOut, 2);
            _os.write(refreshFlag, 3);
            _os.write(onlineNumber, 4);
            _os.write(attentNumber, 5);
            _os.write(giftCount, 6);
            _os.write(myGiftCount, 7);
            _os.write(liveStatus, 8);
            _os.write(liveEndAction, 9);
            _os.write(pollTimeOut, 10);
            _os.write(serverTime, 11);
            _os.write(liveStartTime, 12);
            _os.write(streamId, 13);
            _os.write(playCount, 14);
            _os.write(likeNum, 15);
            _os.write(waitRank, 16);
            _os.write(vipJump, 17);
            _os.write(liveSubStatus, 18);
            _os.write(isPraiseOpen, 19);
            _os.write(isGiftUse, 20);
            _os.write(popularity, 21);
            _os.write(lightInfo, 22);
            _os.write(chatRoomInfo, 23);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pollContext, 1, false);
            _is.read(refreshTimeOut, 2, false);
            _is.read(refreshFlag, 3, false);
            _is.read(onlineNumber, 4, false);
            _is.read(attentNumber, 5, false);
            _is.read(giftCount, 6, false);
            _is.read(myGiftCount, 7, false);
            _is.read(liveStatus, 8, false);
            _is.read(liveEndAction, 9, false);
            _is.read(pollTimeOut, 10, false);
            _is.read(serverTime, 11, false);
            _is.read(liveStartTime, 12, false);
            _is.read(streamId, 13, false);
            _is.read(playCount, 14, false);
            _is.read(likeNum, 15, false);
            _is.read(waitRank, 16, false);
            _is.read(vipJump, 17, false);
            _is.read(liveSubStatus, 18, false);
            _is.read(isPraiseOpen, 19, false);
            _is.read(isGiftUse, 20, false);
            _is.read(popularity, 21, false);
            _is.read(lightInfo, 22, false);
            _is.read(chatRoomInfo, 23, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pollContext,"pollContext");
            _ds.display(refreshTimeOut,"refreshTimeOut");
            _ds.display(refreshFlag,"refreshFlag");
            _ds.display(onlineNumber,"onlineNumber");
            _ds.display(attentNumber,"attentNumber");
            _ds.display(giftCount,"giftCount");
            _ds.display(myGiftCount,"myGiftCount");
            _ds.display(liveStatus,"liveStatus");
            _ds.display(liveEndAction,"liveEndAction");
            _ds.display(pollTimeOut,"pollTimeOut");
            _ds.display(serverTime,"serverTime");
            _ds.display(liveStartTime,"liveStartTime");
            _ds.display(streamId,"streamId");
            _ds.display(playCount,"playCount");
            _ds.display(likeNum,"likeNum");
            _ds.display(waitRank,"waitRank");
            _ds.display(vipJump,"vipJump");
            _ds.display(liveSubStatus,"liveSubStatus");
            _ds.display(isPraiseOpen,"isPraiseOpen");
            _ds.display(isGiftUse,"isGiftUse");
            _ds.display(popularity,"popularity");
            _ds.display(lightInfo,"lightInfo");
            _ds.display(chatRoomInfo,"chatRoomInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pollContext, true);
            _ds.displaySimple(refreshTimeOut, true);
            _ds.displaySimple(refreshFlag, true);
            _ds.displaySimple(onlineNumber, true);
            _ds.displaySimple(attentNumber, true);
            _ds.displaySimple(giftCount, true);
            _ds.displaySimple(myGiftCount, true);
            _ds.displaySimple(liveStatus, true);
            _ds.displaySimple(liveEndAction, true);
            _ds.displaySimple(pollTimeOut, true);
            _ds.displaySimple(serverTime, true);
            _ds.displaySimple(liveStartTime, true);
            _ds.displaySimple(streamId, true);
            _ds.displaySimple(playCount, true);
            _ds.displaySimple(likeNum, true);
            _ds.displaySimple(waitRank, true);
            _ds.displaySimple(vipJump, true);
            _ds.displaySimple(liveSubStatus, true);
            _ds.displaySimple(isPraiseOpen, true);
            _ds.displaySimple(isGiftUse, true);
            _ds.displaySimple(popularity, true);
            _ds.displaySimple(lightInfo, true);
            _ds.displaySimple(chatRoomInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string pollContext;
        map<std::string, taf::Int32> refreshTimeOut;
        map<std::string, taf::Int32> refreshFlag;
        taf::Int64 onlineNumber;
        taf::Int64 attentNumber;
        taf::Int64 giftCount;
        taf::Int64 myGiftCount;
        taf::Int32 liveStatus;
        jce::Action liveEndAction;
        taf::Int32 pollTimeOut;
        taf::Int64 serverTime;
        taf::Int64 liveStartTime;
        std::string streamId;
        taf::Int64 playCount;
        taf::Int64 likeNum;
        taf::Int64 waitRank;
        taf::Int32 vipJump;
        taf::Int32 liveSubStatus;
        taf::Bool isPraiseOpen;
        taf::Bool isGiftUse;
        taf::Int64 popularity;
        jce::LiveLightInfo lightInfo;
        jce::LiveStarChatRoomInfo chatRoomInfo;
    };
    inline bool operator==(const LiveWaitPollResponse&l, const LiveWaitPollResponse&r)
    {
        return l.errCode == r.errCode && l.pollContext == r.pollContext && l.refreshTimeOut == r.refreshTimeOut && l.refreshFlag == r.refreshFlag && l.onlineNumber == r.onlineNumber && l.attentNumber == r.attentNumber && l.giftCount == r.giftCount && l.myGiftCount == r.myGiftCount && l.liveStatus == r.liveStatus && l.liveEndAction == r.liveEndAction && l.pollTimeOut == r.pollTimeOut && l.serverTime == r.serverTime && l.liveStartTime == r.liveStartTime && l.streamId == r.streamId && l.playCount == r.playCount && l.likeNum == r.likeNum && l.waitRank == r.waitRank && l.vipJump == r.vipJump && l.liveSubStatus == r.liveSubStatus && l.isPraiseOpen == r.isPraiseOpen && l.isGiftUse == r.isGiftUse && l.popularity == r.popularity && l.lightInfo == r.lightInfo && l.chatRoomInfo == r.chatRoomInfo;
    }
    inline bool operator!=(const LiveWaitPollResponse&l, const LiveWaitPollResponse&r)
    {
        return !(l == r);
    }

    struct LiveUpdateReportRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveUpdateReportRequest";
        }
        static string MD5()
        {
            return "36c2d153bfaace410e59539c658500ea";
        }
        LiveUpdateReportRequest()
        :pid(""),type(""),liveStatus(0),opStatus(0)
        {
        }
        void resetDefautlt()
        {
            pid = "";
            type = "";
            liveStatus = 0;
            opStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pid, 0);
            _os.write(type, 1);
            _os.write(liveStatus, 2);
            _os.write(opStatus, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pid, 0, true);
            _is.read(type, 1, true);
            _is.read(liveStatus, 2, false);
            _is.read(opStatus, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pid,"pid");
            _ds.display(type,"type");
            _ds.display(liveStatus,"liveStatus");
            _ds.display(opStatus,"opStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(liveStatus, true);
            _ds.displaySimple(opStatus, false);
            return _os;
        }
    public:
        std::string pid;
        std::string type;
        taf::Int32 liveStatus;
        taf::Int32 opStatus;
    };
    inline bool operator==(const LiveUpdateReportRequest&l, const LiveUpdateReportRequest&r)
    {
        return l.pid == r.pid && l.type == r.type && l.liveStatus == r.liveStatus && l.opStatus == r.opStatus;
    }
    inline bool operator!=(const LiveUpdateReportRequest&l, const LiveUpdateReportRequest&r)
    {
        return !(l == r);
    }

    struct GetLiveHasLotteryTicketInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetLiveHasLotteryTicketInfoRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetLiveHasLotteryTicketInfoRequest()
        :pid("")
        {
        }
        void resetDefautlt()
        {
            pid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pid, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pid, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pid,"pid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pid, false);
            return _os;
        }
    public:
        std::string pid;
    };
    inline bool operator==(const GetLiveHasLotteryTicketInfoRequest&l, const GetLiveHasLotteryTicketInfoRequest&r)
    {
        return l.pid == r.pid;
    }
    inline bool operator!=(const GetLiveHasLotteryTicketInfoRequest&l, const GetLiveHasLotteryTicketInfoRequest&r)
    {
        return !(l == r);
    }

    struct GetLiveHasLotteryTicketInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetLiveHasLotteryTicketInfoResponse";
        }
        static string MD5()
        {
            return "29419df3b52db3f7783c3dbdf0abcfcd";
        }
        GetLiveHasLotteryTicketInfoResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(ticketInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(ticketInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(ticketInfo,"ticketInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(ticketInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::LiveTicketInfo ticketInfo;
    };
    inline bool operator==(const GetLiveHasLotteryTicketInfoResponse&l, const GetLiveHasLotteryTicketInfoResponse&r)
    {
        return l.errCode == r.errCode && l.ticketInfo == r.ticketInfo;
    }
    inline bool operator!=(const GetLiveHasLotteryTicketInfoResponse&l, const GetLiveHasLotteryTicketInfoResponse&r)
    {
        return !(l == r);
    }

    struct LiveUserProfileRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveUserProfileRequest";
        }
        static string MD5()
        {
            return "30c83325855d16fb2e0261aa663ee22a";
        }
        LiveUserProfileRequest()
        :pid("")
        {
        }
        void resetDefautlt()
        {
            pid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pid, 0);
            _os.write(starInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pid, 0, false);
            _is.read(starInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pid,"pid");
            _ds.display(starInfo,"starInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(starInfo, false);
            return _os;
        }
    public:
        std::string pid;
        jce::STStarInfo starInfo;
    };
    inline bool operator==(const LiveUserProfileRequest&l, const LiveUserProfileRequest&r)
    {
        return l.pid == r.pid && l.starInfo == r.starInfo;
    }
    inline bool operator!=(const LiveUserProfileRequest&l, const LiveUserProfileRequest&r)
    {
        return !(l == r);
    }

    struct LiveUserProfileResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveUserProfileResponse";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        LiveUserProfileResponse()
        :errCode(0),userProfile(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            userProfile = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(userProfile, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(userProfile, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(userProfile,"userProfile");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(userProfile, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 userProfile;
    };
    inline bool operator==(const LiveUserProfileResponse&l, const LiveUserProfileResponse&r)
    {
        return l.errCode == r.errCode && l.userProfile == r.userProfile;
    }
    inline bool operator!=(const LiveUserProfileResponse&l, const LiveUserProfileResponse&r)
    {
        return !(l == r);
    }

    struct LiveStoreRedDotRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveStoreRedDotRequest";
        }
        static string MD5()
        {
            return "3b1bd806bd714bd2b345de1c78b242fa";
        }
        LiveStoreRedDotRequest()
        :score(0),pollDataKey(""),requestType(0)
        {
        }
        void resetDefautlt()
        {
            score = 0;
            pollDataKey = "";
            requestType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(score, 0);
            _os.write(pollDataKey, 1);
            _os.write(requestType, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(score, 0, true);
            _is.read(pollDataKey, 1, true);
            _is.read(requestType, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(score,"score");
            _ds.display(pollDataKey,"pollDataKey");
            _ds.display(requestType,"requestType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(score, true);
            _ds.displaySimple(pollDataKey, true);
            _ds.displaySimple(requestType, false);
            return _os;
        }
    public:
        taf::Int64 score;
        std::string pollDataKey;
        taf::Int32 requestType;
    };
    inline bool operator==(const LiveStoreRedDotRequest&l, const LiveStoreRedDotRequest&r)
    {
        return l.score == r.score && l.pollDataKey == r.pollDataKey && l.requestType == r.requestType;
    }
    inline bool operator!=(const LiveStoreRedDotRequest&l, const LiveStoreRedDotRequest&r)
    {
        return !(l == r);
    }

    struct LiveStoreRedDotResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveStoreRedDotResponse";
        }
        static string MD5()
        {
            return "df29dd2e097f1d22929a5764aa0cdae1";
        }
        LiveStoreRedDotResponse()
        :errCode(0),newScore(0),hasRedDot(true),pollTimeOut(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            newScore = 0;
            hasRedDot = true;
            pollTimeOut = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(newScore, 1);
            _os.write(hasRedDot, 2);
            _os.write(pollTimeOut, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(newScore, 1, true);
            _is.read(hasRedDot, 2, true);
            _is.read(pollTimeOut, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(newScore,"newScore");
            _ds.display(hasRedDot,"hasRedDot");
            _ds.display(pollTimeOut,"pollTimeOut");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(newScore, true);
            _ds.displaySimple(hasRedDot, true);
            _ds.displaySimple(pollTimeOut, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int64 newScore;
        taf::Bool hasRedDot;
        taf::Int32 pollTimeOut;
    };
    inline bool operator==(const LiveStoreRedDotResponse&l, const LiveStoreRedDotResponse&r)
    {
        return l.errCode == r.errCode && l.newScore == r.newScore && l.hasRedDot == r.hasRedDot && l.pollTimeOut == r.pollTimeOut;
    }
    inline bool operator!=(const LiveStoreRedDotResponse&l, const LiveStoreRedDotResponse&r)
    {
        return !(l == r);
    }


}

#define jce_LiveColorMatching_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.globalBg,b.globalBg);jce_copy_struct(a.unDoneBg,b.unDoneBg);jce_copy_struct(a.floatBg,b.floatBg);jce_copy_struct(a.textColor,b.textColor);

#define jce_LiveVIPRightItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.des,b.des);jce_copy_struct(a.action,b.action);

#define jce_LiveTicketInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.title,b.title);jce_copy_struct(a.time,b.time);jce_copy_struct(a.orderCount,b.orderCount);jce_copy_struct(a.address,b.address);jce_copy_struct(a.btnTitle,b.btnTitle);jce_copy_struct(a.btnAction,b.btnAction);jce_copy_struct(a.attentKey,b.attentKey);jce_copy_struct(a.isAttent,b.isAttent);jce_copy_struct(a.isHasLottery,b.isHasLottery);

#define jce_LiveBeforeInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.videoItemList,b.videoItemList);jce_copy_struct(a.coverDataMap,b.coverDataMap);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.hasLotteryInfo,b.hasLotteryInfo);

#define jce_LiveProcessInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.moduleList,b.moduleList);jce_copy_struct(a.teamList,b.teamList);jce_copy_struct(a.actorList,b.actorList);jce_copy_struct(a.isGiftUse,b.isGiftUse);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.propsDatakey,b.propsDatakey);

#define jce_LiveWhyMeInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.zanNum,b.zanNum);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.actors,b.actors);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.title,b.title);jce_copy_struct(a.isPraiseOpen,b.isPraiseOpen);

#define jce_LiveCameraInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.streamId,b.streamId);jce_copy_struct(a.index,b.index);jce_copy_struct(a.picUrl,b.picUrl);jce_copy_struct(a.title,b.title);jce_copy_struct(a.isVip,b.isVip);jce_copy_struct(a.action,b.action);jce_copy_struct(a.specialAction,b.specialAction);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.chid,b.chid);jce_copy_struct(a.realAction,b.realAction);jce_copy_struct(a.videoFlag,b.videoFlag);jce_copy_struct(a.videoFileSize,b.videoFileSize);

#define jce_ShowBillItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.title,b.title);

#define jce_CMarkInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.cate,b.cate);jce_copy_struct(a.vbt,b.vbt);jce_copy_struct(a.sid,b.sid);jce_copy_struct(a.plsimg,b.plsimg);jce_copy_struct(a.plsimglink,b.plsimglink);jce_copy_struct(a.iu,b.iu);jce_copy_struct(a.t,b.t);

#define jce_LiveBannerItemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.showType,b.showType);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.guestList,b.guestList);jce_copy_struct(a.textColor,b.textColor);jce_copy_struct(a.bgImgUrl,b.bgImgUrl);

#define jce_LiveStarChatRoomInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.noticeCount,b.noticeCount);jce_copy_struct(a.interactiveCount,b.interactiveCount);jce_copy_struct(a.joinCount,b.joinCount);

#define jce_LiveShowRoomEntranceInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.tipTitle,b.tipTitle);

#define jce_LiveShowRoomTheme_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.logoUrl,b.logoUrl);jce_copy_struct(a.viewColor,b.viewColor);jce_copy_struct(a.gradientStartColor,b.gradientStartColor);jce_copy_struct(a.gradientEndColor,b.gradientEndColor);jce_copy_struct(a.textColor,b.textColor);

#define jce_LiveShowRoomInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.hasShowRoom,b.hasShowRoom);jce_copy_struct(a.entranceInfo,b.entranceInfo);jce_copy_struct(a.backgroundImageUrl,b.backgroundImageUrl);jce_copy_struct(a.dollsH5Url,b.dollsH5Url);jce_copy_struct(a.playIntroductionH5Url,b.playIntroductionH5Url);jce_copy_struct(a.storeRedDotPollKey,b.storeRedDotPollKey);jce_copy_struct(a.storeH5Url,b.storeH5Url);jce_copy_struct(a.rankTitle,b.rankTitle);jce_copy_struct(a.liveShowRoomTheme,b.liveShowRoomTheme);

#define jce_ONALiveTrailerCountdown_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.serverTime,b.serverTime);jce_copy_struct(a.title,b.title);jce_copy_struct(a.uiType,b.uiType);

#define jce_ONALiveAttentNumber_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.attentNumber,b.attentNumber);jce_copy_struct(a.title,b.title);

#define jce_ONALiveAttent_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.attentTitle,b.attentTitle);jce_copy_struct(a.origPrice,b.origPrice);jce_copy_struct(a.price,b.price);

#define jce_ONALiveVIPRights_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.rightList,b.rightList);jce_copy_struct(a.title,b.title);

#define jce_ONALiveIntroduction_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.introduction,b.introduction);

#define jce_ONAVoteRank_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commentItem,b.commentItem);

#define jce_ONAActorRank_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.skipRankIndex,b.skipRankIndex);jce_copy_struct(a.des,b.des);jce_copy_struct(a.subPageContent,b.subPageContent);jce_copy_struct(a.showCount,b.showCount);jce_copy_struct(a.type,b.type);

#define jce_ONALiveCompeteSchedule_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);jce_copy_struct(a.leftIcon,b.leftIcon);jce_copy_struct(a.leftTitle,b.leftTitle);jce_copy_struct(a.leftScore,b.leftScore);jce_copy_struct(a.rightIcon,b.rightIcon);jce_copy_struct(a.rightTitle,b.rightTitle);jce_copy_struct(a.rightScore,b.rightScore);jce_copy_struct(a.info,b.info);jce_copy_struct(a.action,b.action);jce_copy_struct(a.detailInfos,b.detailInfos);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONALiveNewsItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.newsContent,b.newsContent);jce_copy_struct(a.newsIcon,b.newsIcon);jce_copy_struct(a.newsPoint,b.newsPoint);jce_copy_struct(a.title,b.title);jce_copy_struct(a.sorceIcon,b.sorceIcon);jce_copy_struct(a.action,b.action);jce_copy_struct(a.poster,b.poster);

#define jce_ONALiveActorNews_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actor,b.actor);jce_copy_struct(a.newsContent,b.newsContent);jce_copy_struct(a.newsIcon,b.newsIcon);jce_copy_struct(a.newsPoint,b.newsPoint);jce_copy_struct(a.sorceIcon,b.sorceIcon);jce_copy_struct(a.action,b.action);

#define jce_ONACommunityEntrance_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.items,b.items);

#define jce_LiveLightEffectInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.effectId,b.effectId);jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.adImageUrl,b.adImageUrl);jce_copy_struct(a.starName,b.starName);jce_copy_struct(a.starHeadUrl,b.starHeadUrl);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.effectH5Url,b.effectH5Url);

#define jce_LiveLightInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.curSupportMap,b.curSupportMap);jce_copy_struct(a.lightEffectInfoList,b.lightEffectInfoList);jce_copy_struct(a.criticalValues,b.criticalValues);

#define jce_QAGameConfigInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.QAGameVersion,b.QAGameVersion);jce_copy_struct(a.QADowngradeLevel,b.QADowngradeLevel);jce_copy_struct(a.forbidUseReviveQuestions,b.forbidUseReviveQuestions);

#define jce_QAGameLiveInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.gameId,b.gameId);jce_copy_struct(a.gameStatus,b.gameStatus);jce_copy_struct(a.offLiveH5,b.offLiveH5);jce_copy_struct(a.offGameH5,b.offGameH5);jce_copy_struct(a.encryptType,b.encryptType);jce_copy_struct(a.encryptToken,b.encryptToken);jce_copy_struct(a.maxUseRevives,b.maxUseRevives);jce_copy_struct(a.totalBonus,b.totalBonus);jce_copy_struct(a.winMenCounts,b.winMenCounts);jce_copy_struct(a.averageBonus,b.averageBonus);jce_copy_struct(a.maxQuestionIdx,b.maxQuestionIdx);jce_copy_struct(a.requestServerAtEnd,b.requestServerAtEnd);

#define jce_QAGameUserParams_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.userStatus,b.userStatus);jce_copy_struct(a.questionIdxState,b.questionIdxState);jce_copy_struct(a.avaliableRevives,b.avaliableRevives);jce_copy_struct(a.hasRevives,b.hasRevives);

#define jce_GetQAGameUserInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.gameId,b.gameId);

#define jce_GetQAGameUserInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.params,b.params);jce_copy_struct(a.personalBonus,b.personalBonus);

#define jce_PostQAGameUserOptionRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.gameId,b.gameId);jce_copy_struct(a.sessionKey,b.sessionKey);jce_copy_struct(a.questionIdx,b.questionIdx);jce_copy_struct(a.answerIdx,b.answerIdx);

#define jce_PostQAGameUserOptionResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.params,b.params);jce_copy_struct(a.paramDisable,b.paramDisable);

#define jce_QAGameUserStatisticsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_QAGameUserStatisticsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.shareCode,b.shareCode);jce_copy_struct(a.gameTakes,b.gameTakes);jce_copy_struct(a.gameWins,b.gameWins);jce_copy_struct(a.sumBonus,b.sumBonus);jce_copy_struct(a.leftBonus,b.leftBonus);jce_copy_struct(a.leftRevives,b.leftRevives);jce_copy_struct(a.shareCodeUsed,b.shareCodeUsed);

#define jce_GetLiveTicketInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pid,b.pid);

#define jce_GetLiveTicketInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.ticketInfo,b.ticketInfo);

#define jce_LivePostVoteRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.voteId,b.voteId);jce_copy_struct(a.voteSubjects,b.voteSubjects);

#define jce_LivePostVoteResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.voteInfo,b.voteInfo);

#define jce_LivePollRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pollDataKey,b.pollDataKey);jce_copy_struct(a.pollContext,b.pollContext);jce_copy_struct(a.requestType,b.requestType);jce_copy_struct(a.needMarkInfo,b.needMarkInfo);jce_copy_struct(a.markContext,b.markContext);jce_copy_struct(a.curSupportMap,b.curSupportMap);jce_copy_struct(a.scene,b.scene);

#define jce_LivePollResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pollContext,b.pollContext);jce_copy_struct(a.refreshTimeOut,b.refreshTimeOut);jce_copy_struct(a.refreshFlag,b.refreshFlag);jce_copy_struct(a.onlineNumber,b.onlineNumber);jce_copy_struct(a.attentNumber,b.attentNumber);jce_copy_struct(a.giftCount,b.giftCount);jce_copy_struct(a.myGiftCount,b.myGiftCount);jce_copy_struct(a.liveStatus,b.liveStatus);jce_copy_struct(a.liveEndAction,b.liveEndAction);jce_copy_struct(a.pollTimeOut,b.pollTimeOut);jce_copy_struct(a.serverTime,b.serverTime);jce_copy_struct(a.liveStartTime,b.liveStartTime);jce_copy_struct(a.streamId,b.streamId);jce_copy_struct(a.playCount,b.playCount);jce_copy_struct(a.likeNum,b.likeNum);jce_copy_struct(a.liveSubStatus,b.liveSubStatus);jce_copy_struct(a.markList,b.markList);jce_copy_struct(a.markContext,b.markContext);jce_copy_struct(a.isPraiseOpen,b.isPraiseOpen);jce_copy_struct(a.isGiftUse,b.isGiftUse);jce_copy_struct(a.popularity,b.popularity);jce_copy_struct(a.lightInfo,b.lightInfo);jce_copy_struct(a.onlineGuest,b.onlineGuest);jce_copy_struct(a.chatRoomInfo,b.chatRoomInfo);jce_copy_struct(a.qaGameInfo,b.qaGameInfo);

#define jce_GetCommentDetailsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commentKey,b.commentKey);jce_copy_struct(a.originCommentId,b.originCommentId);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.filterKey,b.filterKey);jce_copy_struct(a.pageFlag,b.pageFlag);

#define jce_GetCommentDetailsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.commentCount,b.commentCount);jce_copy_struct(a.commentList,b.commentList);

#define jce_LiveDokiRecommendStarListInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.recommendStarList,b.recommendStarList);jce_copy_struct(a.mainColor,b.mainColor);

#define jce_PlayerActivityInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.activityUrl,b.activityUrl);jce_copy_struct(a.action,b.action);

#define jce_LiveRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.requestType,b.requestType);jce_copy_struct(a.scene,b.scene);

#define jce_LiveResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.liveItemData,b.liveItemData);jce_copy_struct(a.onlineNumber,b.onlineNumber);jce_copy_struct(a.pollDataKey,b.pollDataKey);jce_copy_struct(a.liveStatus,b.liveStatus);jce_copy_struct(a.liveBeforeInfo,b.liveBeforeInfo);jce_copy_struct(a.liveProcessInfo,b.liveProcessInfo);jce_copy_struct(a.liveEndAction,b.liveEndAction);jce_copy_struct(a.serverTime,b.serverTime);jce_copy_struct(a.liveColor,b.liveColor);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.responseType,b.responseType);jce_copy_struct(a.multiCameraKey,b.multiCameraKey);jce_copy_struct(a.isFullScreen,b.isFullScreen);jce_copy_struct(a.liveType,b.liveType);jce_copy_struct(a.liveInfo,b.liveInfo);jce_copy_struct(a.liveSubStatus,b.liveSubStatus);jce_copy_struct(a.popularity,b.popularity);jce_copy_struct(a.multiCameraTipsCount,b.multiCameraTipsCount);jce_copy_struct(a.multiCameraTips,b.multiCameraTips);jce_copy_struct(a.pcid,b.pcid);jce_copy_struct(a.recommendAppInfo,b.recommendAppInfo);jce_copy_struct(a.liveStartTime,b.liveStartTime);jce_copy_struct(a.bannerItemData,b.bannerItemData);jce_copy_struct(a.showRoomInfo,b.showRoomInfo);jce_copy_struct(a.liveEndRecommendKey,b.liveEndRecommendKey);jce_copy_struct(a.recommendStarListInfo,b.recommendStarListInfo);jce_copy_struct(a.routeType,b.routeType);jce_copy_struct(a.qagameConfig,b.qagameConfig);jce_copy_struct(a.qaGameInfo,b.qaGameInfo);jce_copy_struct(a.playerActivityInfo,b.playerActivityInfo);

#define jce_LiveGetRankListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tabType,b.tabType);jce_copy_struct(a.tabDataKey,b.tabDataKey);jce_copy_struct(a.dataType,b.dataType);

#define jce_LiveGetRankListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);

#define jce_LiveShowBillRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_LiveShowBillResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.serverTime,b.serverTime);jce_copy_struct(a.billItems,b.billItems);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isHaveNextPage,b.isHaveNextPage);jce_copy_struct(a.uiData,b.uiData);

#define jce_LiveVideoListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_LiveVideoListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isHaveNextPage,b.isHaveNextPage);

#define jce_LiveMultiCameraInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_LiveMultiCameraInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.refreshInterval,b.refreshInterval);jce_copy_struct(a.cameraInfos,b.cameraInfos);jce_copy_struct(a.cameraInfoTips,b.cameraInfoTips);

#define jce_LiveWaitPollRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pollDataKey,b.pollDataKey);jce_copy_struct(a.pollContext,b.pollContext);jce_copy_struct(a.requestType,b.requestType);jce_copy_struct(a.waitSessionKey,b.waitSessionKey);jce_copy_struct(a.curSupportMap,b.curSupportMap);

#define jce_LiveWaitPollResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pollContext,b.pollContext);jce_copy_struct(a.refreshTimeOut,b.refreshTimeOut);jce_copy_struct(a.refreshFlag,b.refreshFlag);jce_copy_struct(a.onlineNumber,b.onlineNumber);jce_copy_struct(a.attentNumber,b.attentNumber);jce_copy_struct(a.giftCount,b.giftCount);jce_copy_struct(a.myGiftCount,b.myGiftCount);jce_copy_struct(a.liveStatus,b.liveStatus);jce_copy_struct(a.liveEndAction,b.liveEndAction);jce_copy_struct(a.pollTimeOut,b.pollTimeOut);jce_copy_struct(a.serverTime,b.serverTime);jce_copy_struct(a.liveStartTime,b.liveStartTime);jce_copy_struct(a.streamId,b.streamId);jce_copy_struct(a.playCount,b.playCount);jce_copy_struct(a.likeNum,b.likeNum);jce_copy_struct(a.waitRank,b.waitRank);jce_copy_struct(a.vipJump,b.vipJump);jce_copy_struct(a.liveSubStatus,b.liveSubStatus);jce_copy_struct(a.isPraiseOpen,b.isPraiseOpen);jce_copy_struct(a.isGiftUse,b.isGiftUse);jce_copy_struct(a.popularity,b.popularity);jce_copy_struct(a.lightInfo,b.lightInfo);jce_copy_struct(a.chatRoomInfo,b.chatRoomInfo);

#define jce_LiveUpdateReportRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.type,b.type);jce_copy_struct(a.liveStatus,b.liveStatus);jce_copy_struct(a.opStatus,b.opStatus);

#define jce_GetLiveHasLotteryTicketInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pid,b.pid);

#define jce_GetLiveHasLotteryTicketInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.ticketInfo,b.ticketInfo);

#define jce_LiveUserProfileRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.starInfo,b.starInfo);

#define jce_LiveUserProfileResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.userProfile,b.userProfile);

#define jce_LiveStoreRedDotRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.score,b.score);jce_copy_struct(a.pollDataKey,b.pollDataKey);jce_copy_struct(a.requestType,b.requestType);

#define jce_LiveStoreRedDotResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.newScore,b.newScore);jce_copy_struct(a.hasRedDot,b.hasRedDot);jce_copy_struct(a.pollTimeOut,b.pollTimeOut);



#endif
