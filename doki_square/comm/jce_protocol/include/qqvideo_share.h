// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_share.jce'
// **********************************************************************

#ifndef __QQVIDEO_SHARE_H_
#define __QQVIDEO_SHARE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_cmd.h"
#include "qqvideo_common.h"


namespace jce
{
    struct ShareCheckRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ShareCheckRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        ShareCheckRequest()
        :dest(0)
        {
        }
        void resetDefautlt()
        {
            dest = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dest, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dest, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dest,"dest");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dest, false);
            return _os;
        }
    public:
        taf::Int32 dest;
    };
    inline bool operator==(const ShareCheckRequest&l, const ShareCheckRequest&r)
    {
        return l.dest == r.dest;
    }
    inline bool operator!=(const ShareCheckRequest&l, const ShareCheckRequest&r)
    {
        return !(l == r);
    }

    struct ShareCheckResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ShareCheckResponse";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        ShareCheckResponse()
        :errCode(0),isOpen(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            isOpen = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(isOpen, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(isOpen, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(isOpen,"isOpen");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(isOpen, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 isOpen;
    };
    inline bool operator==(const ShareCheckResponse&l, const ShareCheckResponse&r)
    {
        return l.errCode == r.errCode && l.isOpen == r.isOpen;
    }
    inline bool operator!=(const ShareCheckResponse&l, const ShareCheckResponse&r)
    {
        return !(l == r);
    }

    struct ShareRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ShareRequest";
        }
        static string MD5()
        {
            return "63f63f769417518e319e0532c4ff7144";
        }
        ShareRequest()
        :dest(0),sinaAccessToken(""),title(""),summary(""),content(""),contentTail(""),url(""),vid(""),cid(""),payType(0)
        {
        }
        void resetDefautlt()
        {
            dest = 0;
            sinaAccessToken = "";
            title = "";
            summary = "";
            content = "";
            contentTail = "";
            url = "";
            vid = "";
            cid = "";
            payType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dest, 0);
            _os.write(sinaAccessToken, 1);
            _os.write(title, 2);
            _os.write(summary, 3);
            _os.write(content, 4);
            _os.write(contentTail, 5);
            _os.write(url, 6);
            _os.write(imgUrls, 7);
            _os.write(vid, 8);
            _os.write(cid, 9);
            _os.write(payType, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dest, 0, true);
            _is.read(sinaAccessToken, 1, false);
            _is.read(title, 2, false);
            _is.read(summary, 3, false);
            _is.read(content, 4, false);
            _is.read(contentTail, 5, false);
            _is.read(url, 6, false);
            _is.read(imgUrls, 7, false);
            _is.read(vid, 8, false);
            _is.read(cid, 9, false);
            _is.read(payType, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dest,"dest");
            _ds.display(sinaAccessToken,"sinaAccessToken");
            _ds.display(title,"title");
            _ds.display(summary,"summary");
            _ds.display(content,"content");
            _ds.display(contentTail,"contentTail");
            _ds.display(url,"url");
            _ds.display(imgUrls,"imgUrls");
            _ds.display(vid,"vid");
            _ds.display(cid,"cid");
            _ds.display(payType,"payType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dest, true);
            _ds.displaySimple(sinaAccessToken, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(summary, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(contentTail, true);
            _ds.displaySimple(url, true);
            _ds.displaySimple(imgUrls, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(payType, false);
            return _os;
        }
    public:
        taf::Int32 dest;
        std::string sinaAccessToken;
        std::string title;
        std::string summary;
        std::string content;
        std::string contentTail;
        std::string url;
        vector<jce::PicData> imgUrls;
        std::string vid;
        std::string cid;
        taf::Int32 payType;
    };
    inline bool operator==(const ShareRequest&l, const ShareRequest&r)
    {
        return l.dest == r.dest && l.sinaAccessToken == r.sinaAccessToken && l.title == r.title && l.summary == r.summary && l.content == r.content && l.contentTail == r.contentTail && l.url == r.url && l.imgUrls == r.imgUrls && l.vid == r.vid && l.cid == r.cid && l.payType == r.payType;
    }
    inline bool operator!=(const ShareRequest&l, const ShareRequest&r)
    {
        return !(l == r);
    }

    struct ShareResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ShareResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        ShareResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const ShareResponse&l, const ShareResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const ShareResponse&l, const ShareResponse&r)
    {
        return !(l == r);
    }


}

#define jce_ShareCheckRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dest,b.dest);

#define jce_ShareCheckResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.isOpen,b.isOpen);

#define jce_ShareRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dest,b.dest);jce_copy_struct(a.sinaAccessToken,b.sinaAccessToken);jce_copy_struct(a.title,b.title);jce_copy_struct(a.summary,b.summary);jce_copy_struct(a.content,b.content);jce_copy_struct(a.contentTail,b.contentTail);jce_copy_struct(a.url,b.url);jce_copy_struct(a.imgUrls,b.imgUrls);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.payType,b.payType);

#define jce_ShareResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);



#endif
