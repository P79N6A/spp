// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_game.jce'
// **********************************************************************

#ifndef __QQVIDEO_GAME_H_
#define __QQVIDEO_GAME_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_ona.h"
#include "qqvideo_common.h"


namespace jce
{
    struct GameGiftPackItemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameGiftPackItemData";
        }
        static string MD5()
        {
            return "e95fb8effca58c13403ae8d5f4398750";
        }
        GameGiftPackItemData()
        :state(0)
        {
        }
        void resetDefautlt()
        {
            state = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(state, 1);
            _os.write(action, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(state, 1, true);
            _is.read(action, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(state,"state");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(state, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        jce::Poster poster;
        taf::Int32 state;
        jce::Action action;
    };
    inline bool operator==(const GameGiftPackItemData&l, const GameGiftPackItemData&r)
    {
        return l.poster == r.poster && l.state == r.state && l.action == r.action;
    }
    inline bool operator!=(const GameGiftPackItemData&l, const GameGiftPackItemData&r)
    {
        return !(l == r);
    }

    struct ONAGameDownloadItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAGameDownloadItem";
        }
        static string MD5()
        {
            return "96e1d05c922020b694d5685345b80699";
        }
        ONAGameDownloadItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(gameItem, 0);
            _os.write(action, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(gameItem, 0, true);
            _is.read(action, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(gameItem,"gameItem");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(gameItem, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        jce::GameDownloadItemData gameItem;
        jce::Action action;
    };
    inline bool operator==(const ONAGameDownloadItem&l, const ONAGameDownloadItem&r)
    {
        return l.gameItem == r.gameItem && l.action == r.action;
    }
    inline bool operator!=(const ONAGameDownloadItem&l, const ONAGameDownloadItem&r)
    {
        return !(l == r);
    }

    struct ONAGameGiftPackItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAGameGiftPackItem";
        }
        static string MD5()
        {
            return "cfa856abc76d0ea8fad12bc4a49bd947";
        }
        ONAGameGiftPackItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(gameItem, 0);
            _os.write(action, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(gameItem, 0, true);
            _is.read(action, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(gameItem,"gameItem");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(gameItem, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        jce::GameGiftPackItemData gameItem;
        jce::Action action;
    };
    inline bool operator==(const ONAGameGiftPackItem&l, const ONAGameGiftPackItem&r)
    {
        return l.gameItem == r.gameItem && l.action == r.action;
    }
    inline bool operator!=(const ONAGameGiftPackItem&l, const ONAGameGiftPackItem&r)
    {
        return !(l == r);
    }

    struct ONAGameGiftPackNews : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAGameGiftPackNews";
        }
        static string MD5()
        {
            return "21fab9ea4eeb3ff7b9ddbac6c6c4d305";
        }
        ONAGameGiftPackNews()
        :content(""),state(0),iconUrl("")
        {
        }
        void resetDefautlt()
        {
            content = "";
            state = 0;
            iconUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(content, 0);
            _os.write(state, 1);
            _os.write(iconUrl, 2);
            _os.write(action, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(content, 0, true);
            _is.read(state, 1, true);
            _is.read(iconUrl, 2, false);
            _is.read(action, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(content,"content");
            _ds.display(state,"state");
            _ds.display(iconUrl,"iconUrl");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(content, true);
            _ds.displaySimple(state, true);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string content;
        taf::Int32 state;
        std::string iconUrl;
        jce::Action action;
    };
    inline bool operator==(const ONAGameGiftPackNews&l, const ONAGameGiftPackNews&r)
    {
        return l.content == r.content && l.state == r.state && l.iconUrl == r.iconUrl && l.action == r.action;
    }
    inline bool operator!=(const ONAGameGiftPackNews&l, const ONAGameGiftPackNews&r)
    {
        return !(l == r);
    }

    struct GameUpdateRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameUpdateRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GameUpdateRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const GameUpdateRequest&l, const GameUpdateRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GameUpdateRequest&l, const GameUpdateRequest&r)
    {
        return !(l == r);
    }

    struct GameUpdateResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameUpdateResponse";
        }
        static string MD5()
        {
            return "3f1d006ff5ee0075239385edf0bc442b";
        }
        GameUpdateResponse()
        :errCode(0),isNew(true),pageContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            isNew = true;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(isNew, 1);
            _os.write(poster, 2);
            _os.write(pageContext, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(isNew, 1, true);
            _is.read(poster, 2, false);
            _is.read(pageContext, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(isNew,"isNew");
            _ds.display(poster,"poster");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(isNew, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Bool isNew;
        jce::Poster poster;
        std::string pageContext;
    };
    inline bool operator==(const GameUpdateResponse&l, const GameUpdateResponse&r)
    {
        return l.errCode == r.errCode && l.isNew == r.isNew && l.poster == r.poster && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GameUpdateResponse&l, const GameUpdateResponse&r)
    {
        return !(l == r);
    }

    struct GameHomeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameHomeRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GameHomeRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const GameHomeRequest&l, const GameHomeRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GameHomeRequest&l, const GameHomeRequest&r)
    {
        return !(l == r);
    }

    struct GameHomeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameHomeResponse";
        }
        static string MD5()
        {
            return "8e20d544570fc1e65bbb5ca7673ea635";
        }
        GameHomeResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const GameHomeResponse&l, const GameHomeResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const GameHomeResponse&l, const GameHomeResponse&r)
    {
        return !(l == r);
    }

    struct GameDownloadListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameDownloadListRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        GameDownloadListRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const GameDownloadListRequest&l, const GameDownloadListRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GameDownloadListRequest&l, const GameDownloadListRequest&r)
    {
        return !(l == r);
    }

    struct GameDownloadListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameDownloadListResponse";
        }
        static string MD5()
        {
            return "8e20d544570fc1e65bbb5ca7673ea635";
        }
        GameDownloadListResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const GameDownloadListResponse&l, const GameDownloadListResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const GameDownloadListResponse&l, const GameDownloadListResponse&r)
    {
        return !(l == r);
    }

    struct GameGiftPackListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameGiftPackListRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        GameGiftPackListRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const GameGiftPackListRequest&l, const GameGiftPackListRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GameGiftPackListRequest&l, const GameGiftPackListRequest&r)
    {
        return !(l == r);
    }

    struct GameGiftPackListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameGiftPackListResponse";
        }
        static string MD5()
        {
            return "8e20d544570fc1e65bbb5ca7673ea635";
        }
        GameGiftPackListResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const GameGiftPackListResponse&l, const GameGiftPackListResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const GameGiftPackListResponse&l, const GameGiftPackListResponse&r)
    {
        return !(l == r);
    }

    struct GameMyGiftRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameMyGiftRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        GameMyGiftRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const GameMyGiftRequest&l, const GameMyGiftRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GameMyGiftRequest&l, const GameMyGiftRequest&r)
    {
        return !(l == r);
    }

    struct GameMyGiftResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameMyGiftResponse";
        }
        static string MD5()
        {
            return "4b52e19bb3aa6cf6cfc2551e6f700d27";
        }
        GameMyGiftResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(ItemData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(ItemData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(ItemData,"ItemData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(ItemData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::GameGiftPackItemData> ItemData;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const GameMyGiftResponse&l, const GameMyGiftResponse&r)
    {
        return l.errCode == r.errCode && l.ItemData == r.ItemData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const GameMyGiftResponse&l, const GameMyGiftResponse&r)
    {
        return !(l == r);
    }

    struct GameDetailsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameDetailsRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        GameDetailsRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const GameDetailsRequest&l, const GameDetailsRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GameDetailsRequest&l, const GameDetailsRequest&r)
    {
        return !(l == r);
    }

    struct GameDetailsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameDetailsResponse";
        }
        static string MD5()
        {
            return "8e20d544570fc1e65bbb5ca7673ea635";
        }
        GameDetailsResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const GameDetailsResponse&l, const GameDetailsResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const GameDetailsResponse&l, const GameDetailsResponse&r)
    {
        return !(l == r);
    }

    struct GameGiftPackDetailsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameGiftPackDetailsRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GameGiftPackDetailsRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const GameGiftPackDetailsRequest&l, const GameGiftPackDetailsRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const GameGiftPackDetailsRequest&l, const GameGiftPackDetailsRequest&r)
    {
        return !(l == r);
    }

    struct GameGiftPackDetailsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameGiftPackDetailsResponse";
        }
        static string MD5()
        {
            return "3e0e3a9002e29329ca797e464f2e913c";
        }
        GameGiftPackDetailsResponse()
        :errCode(0),cdKey(""),tips("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            cdKey = "";
            tips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(cdKey, 1);
            _os.write(kvItemList, 2);
            _os.write(keyWordList, 3);
            _os.write(tips, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(cdKey, 1, true);
            _is.read(kvItemList, 2, false);
            _is.read(keyWordList, 3, false);
            _is.read(tips, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(cdKey,"cdKey");
            _ds.display(kvItemList,"kvItemList");
            _ds.display(keyWordList,"keyWordList");
            _ds.display(tips,"tips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(cdKey, true);
            _ds.displaySimple(kvItemList, true);
            _ds.displaySimple(keyWordList, true);
            _ds.displaySimple(tips, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string cdKey;
        vector<jce::KVItem> kvItemList;
        vector<jce::HyperlinksKeyWord> keyWordList;
        std::string tips;
    };
    inline bool operator==(const GameGiftPackDetailsResponse&l, const GameGiftPackDetailsResponse&r)
    {
        return l.errCode == r.errCode && l.cdKey == r.cdKey && l.kvItemList == r.kvItemList && l.keyWordList == r.keyWordList && l.tips == r.tips;
    }
    inline bool operator!=(const GameGiftPackDetailsResponse&l, const GameGiftPackDetailsResponse&r)
    {
        return !(l == r);
    }

    struct GameIOSReportDownloadRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameIOSReportDownloadRequest";
        }
        static string MD5()
        {
            return "2d6621da659a171d0b436bb9bcfe09fe";
        }
        GameIOSReportDownloadRequest()
        :dtstatdate(""),vgameappid(""),gamename(""),splattye(""),idfa(""),downloadTime(""),entry(""),remark1(""),remark2("")
        {
        }
        void resetDefautlt()
        {
            dtstatdate = "";
            vgameappid = "";
            gamename = "";
            splattye = "";
            idfa = "";
            downloadTime = "";
            entry = "";
            remark1 = "";
            remark2 = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dtstatdate, 0);
            _os.write(vgameappid, 1);
            _os.write(gamename, 2);
            _os.write(splattye, 3);
            _os.write(idfa, 4);
            _os.write(downloadTime, 5);
            _os.write(entry, 6);
            _os.write(remark1, 7);
            _os.write(remark2, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dtstatdate, 0, true);
            _is.read(vgameappid, 1, true);
            _is.read(gamename, 2, true);
            _is.read(splattye, 3, true);
            _is.read(idfa, 4, true);
            _is.read(downloadTime, 5, true);
            _is.read(entry, 6, true);
            _is.read(remark1, 7, false);
            _is.read(remark2, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dtstatdate,"dtstatdate");
            _ds.display(vgameappid,"vgameappid");
            _ds.display(gamename,"gamename");
            _ds.display(splattye,"splattye");
            _ds.display(idfa,"idfa");
            _ds.display(downloadTime,"downloadTime");
            _ds.display(entry,"entry");
            _ds.display(remark1,"remark1");
            _ds.display(remark2,"remark2");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dtstatdate, true);
            _ds.displaySimple(vgameappid, true);
            _ds.displaySimple(gamename, true);
            _ds.displaySimple(splattye, true);
            _ds.displaySimple(idfa, true);
            _ds.displaySimple(downloadTime, true);
            _ds.displaySimple(entry, true);
            _ds.displaySimple(remark1, true);
            _ds.displaySimple(remark2, false);
            return _os;
        }
    public:
        std::string dtstatdate;
        std::string vgameappid;
        std::string gamename;
        std::string splattye;
        std::string idfa;
        std::string downloadTime;
        std::string entry;
        std::string remark1;
        std::string remark2;
    };
    inline bool operator==(const GameIOSReportDownloadRequest&l, const GameIOSReportDownloadRequest&r)
    {
        return l.dtstatdate == r.dtstatdate && l.vgameappid == r.vgameappid && l.gamename == r.gamename && l.splattye == r.splattye && l.idfa == r.idfa && l.downloadTime == r.downloadTime && l.entry == r.entry && l.remark1 == r.remark1 && l.remark2 == r.remark2;
    }
    inline bool operator!=(const GameIOSReportDownloadRequest&l, const GameIOSReportDownloadRequest&r)
    {
        return !(l == r);
    }

    struct GameIOSReportDownloadResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameIOSReportDownloadResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        GameIOSReportDownloadResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const GameIOSReportDownloadResponse&l, const GameIOSReportDownloadResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const GameIOSReportDownloadResponse&l, const GameIOSReportDownloadResponse&r)
    {
        return !(l == r);
    }


}

#define jce_GameGiftPackItemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.state,b.state);jce_copy_struct(a.action,b.action);

#define jce_ONAGameDownloadItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.gameItem,b.gameItem);jce_copy_struct(a.action,b.action);

#define jce_ONAGameGiftPackItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.gameItem,b.gameItem);jce_copy_struct(a.action,b.action);

#define jce_ONAGameGiftPackNews_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.content,b.content);jce_copy_struct(a.state,b.state);jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.action,b.action);

#define jce_GameUpdateRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_GameUpdateResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.isNew,b.isNew);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_GameHomeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_GameHomeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_GameDownloadListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_GameDownloadListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_GameGiftPackListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_GameGiftPackListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_GameMyGiftRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_GameMyGiftResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.ItemData,b.ItemData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_GameDetailsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_GameDetailsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_GameGiftPackDetailsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_GameGiftPackDetailsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.cdKey,b.cdKey);jce_copy_struct(a.kvItemList,b.kvItemList);jce_copy_struct(a.keyWordList,b.keyWordList);jce_copy_struct(a.tips,b.tips);

#define jce_GameIOSReportDownloadRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dtstatdate,b.dtstatdate);jce_copy_struct(a.vgameappid,b.vgameappid);jce_copy_struct(a.gamename,b.gamename);jce_copy_struct(a.splattye,b.splattye);jce_copy_struct(a.idfa,b.idfa);jce_copy_struct(a.downloadTime,b.downloadTime);jce_copy_struct(a.entry,b.entry);jce_copy_struct(a.remark1,b.remark1);jce_copy_struct(a.remark2,b.remark2);

#define jce_GameIOSReportDownloadResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);



#endif
