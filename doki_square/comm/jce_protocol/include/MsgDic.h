// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `MsgDic.jce'
// **********************************************************************

#ifndef __MSGDIC_H_
#define __MSGDIC_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace videocircle
{
    struct PlayImgUrl : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.PlayImgUrl";
        }
        static string MD5()
        {
            return "921ba68cc9db283680607ccf43809445";
        }
        PlayImgUrl()
        :dwPlayTime(0),strUrl(""),strWaterFlagUrl(""),strHandWriteInfo(""),cImageStyle(0),strThumbUrl(""),width(0),height(0)
        {
        }
        void resetDefautlt()
        {
            dwPlayTime = 0;
            strUrl = "";
            strWaterFlagUrl = "";
            strHandWriteInfo = "";
            cImageStyle = 0;
            strThumbUrl = "";
            width = 0;
            height = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwPlayTime, 0);
            _os.write(strUrl, 1);
            _os.write(strWaterFlagUrl, 2);
            _os.write(strHandWriteInfo, 3);
            _os.write(cImageStyle, 4);
            _os.write(strThumbUrl, 5);
            _os.write(width, 100);
            _os.write(height, 101);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwPlayTime, 0, true);
            _is.read(strUrl, 1, true);
            _is.read(strWaterFlagUrl, 2, false);
            _is.read(strHandWriteInfo, 3, false);
            _is.read(cImageStyle, 4, false);
            _is.read(strThumbUrl, 5, false);
            _is.read(width, 100, false);
            _is.read(height, 101, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwPlayTime,"dwPlayTime");
            _ds.display(strUrl,"strUrl");
            _ds.display(strWaterFlagUrl,"strWaterFlagUrl");
            _ds.display(strHandWriteInfo,"strHandWriteInfo");
            _ds.display(cImageStyle,"cImageStyle");
            _ds.display(strThumbUrl,"strThumbUrl");
            _ds.display(width,"width");
            _ds.display(height,"height");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwPlayTime, true);
            _ds.displaySimple(strUrl, true);
            _ds.displaySimple(strWaterFlagUrl, true);
            _ds.displaySimple(strHandWriteInfo, true);
            _ds.displaySimple(cImageStyle, true);
            _ds.displaySimple(strThumbUrl, true);
            _ds.displaySimple(width, true);
            _ds.displaySimple(height, false);
            return _os;
        }
    public:
        taf::UInt32 dwPlayTime;
        std::string strUrl;
        std::string strWaterFlagUrl;
        std::string strHandWriteInfo;
        taf::UInt8 cImageStyle;
        std::string strThumbUrl;
        taf::Int32 width;
        taf::Int32 height;
    };
    inline bool operator==(const PlayImgUrl&l, const PlayImgUrl&r)
    {
        return l.dwPlayTime == r.dwPlayTime && l.strUrl == r.strUrl && l.strWaterFlagUrl == r.strWaterFlagUrl && l.strHandWriteInfo == r.strHandWriteInfo && l.cImageStyle == r.cImageStyle && l.strThumbUrl == r.strThumbUrl && l.width == r.width && l.height == r.height;
    }
    inline bool operator!=(const PlayImgUrl&l, const PlayImgUrl&r)
    {
        return !(l == r);
    }

    struct VoiceInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.VoiceInfo";
        }
        static string MD5()
        {
            return "e700f148cc7d0f8c665bd4226635378f";
        }
        VoiceInfo()
        :strVoiceId(""),dwDuration(0),bPermanent(true),cStorageFlag(0)
        {
        }
        void resetDefautlt()
        {
            strVoiceId = "";
            dwDuration = 0;
            bPermanent = true;
            cStorageFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strVoiceId, 0);
            _os.write(dwDuration, 1);
            _os.write(bPermanent, 2);
            _os.write(cStorageFlag, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strVoiceId, 0, true);
            _is.read(dwDuration, 1, false);
            _is.read(bPermanent, 2, false);
            _is.read(cStorageFlag, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strVoiceId,"strVoiceId");
            _ds.display(dwDuration,"dwDuration");
            _ds.display(bPermanent,"bPermanent");
            _ds.display(cStorageFlag,"cStorageFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strVoiceId, true);
            _ds.displaySimple(dwDuration, true);
            _ds.displaySimple(bPermanent, true);
            _ds.displaySimple(cStorageFlag, false);
            return _os;
        }
    public:
        std::string strVoiceId;
        taf::UInt32 dwDuration;
        taf::Bool bPermanent;
        taf::Char cStorageFlag;
    };
    inline bool operator==(const VoiceInfo&l, const VoiceInfo&r)
    {
        return l.strVoiceId == r.strVoiceId && l.dwDuration == r.dwDuration && l.bPermanent == r.bPermanent && l.cStorageFlag == r.cStorageFlag;
    }
    inline bool operator!=(const VoiceInfo&l, const VoiceInfo&r)
    {
        return !(l == r);
    }

    struct TopicInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.TopicInfo";
        }
        static string MD5()
        {
            return "2f422b1a0ae6ac17bb655d8879a735ae";
        }
        TopicInfo()
        :strTopicId(""),strTopicText(""),cType(0),strExtraKey("")
        {
        }
        void resetDefautlt()
        {
            strTopicId = "";
            strTopicText = "";
            cType = 0;
            strExtraKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strTopicId, 0);
            _os.write(strTopicText, 1);
            _os.write(cType, 2);
            _os.write(strExtraKey, 3);
            _os.write(vecRelateFansId, 4);
            _os.write(vecRelateVid, 5);
            _os.write(vecRelateCid, 6);
            _os.write(vecRelateLid, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strTopicId, 0, false);
            _is.read(strTopicText, 1, false);
            _is.read(cType, 2, false);
            _is.read(strExtraKey, 3, false);
            _is.read(vecRelateFansId, 4, false);
            _is.read(vecRelateVid, 5, false);
            _is.read(vecRelateCid, 6, false);
            _is.read(vecRelateLid, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strTopicId,"strTopicId");
            _ds.display(strTopicText,"strTopicText");
            _ds.display(cType,"cType");
            _ds.display(strExtraKey,"strExtraKey");
            _ds.display(vecRelateFansId,"vecRelateFansId");
            _ds.display(vecRelateVid,"vecRelateVid");
            _ds.display(vecRelateCid,"vecRelateCid");
            _ds.display(vecRelateLid,"vecRelateLid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strTopicId, true);
            _ds.displaySimple(strTopicText, true);
            _ds.displaySimple(cType, true);
            _ds.displaySimple(strExtraKey, true);
            _ds.displaySimple(vecRelateFansId, true);
            _ds.displaySimple(vecRelateVid, true);
            _ds.displaySimple(vecRelateCid, true);
            _ds.displaySimple(vecRelateLid, false);
            return _os;
        }
    public:
        std::string strTopicId;
        std::string strTopicText;
        taf::Char cType;
        std::string strExtraKey;
        vector<std::string> vecRelateFansId;
        vector<std::string> vecRelateVid;
        vector<std::string> vecRelateCid;
        vector<std::string> vecRelateLid;
    };
    inline bool operator==(const TopicInfo&l, const TopicInfo&r)
    {
        return l.strTopicId == r.strTopicId && l.strTopicText == r.strTopicText && l.cType == r.cType && l.strExtraKey == r.strExtraKey && l.vecRelateFansId == r.vecRelateFansId && l.vecRelateVid == r.vecRelateVid && l.vecRelateCid == r.vecRelateCid && l.vecRelateLid == r.vecRelateLid;
    }
    inline bool operator!=(const TopicInfo&l, const TopicInfo&r)
    {
        return !(l == r);
    }

    struct SnsInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.SnsInfo";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        SnsInfo()
        :cstrWxScore("")
        {
        }
        void resetDefautlt()
        {
            cstrWxScore = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cstrWxScore, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cstrWxScore, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cstrWxScore,"cstrWxScore");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cstrWxScore, false);
            return _os;
        }
    public:
        std::string cstrWxScore;
    };
    inline bool operator==(const SnsInfo&l, const SnsInfo&r)
    {
        return l.cstrWxScore == r.cstrWxScore;
    }
    inline bool operator!=(const SnsInfo&l, const SnsInfo&r)
    {
        return !(l == r);
    }

    struct DanmuInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.DanmuInfo";
        }
        static string MD5()
        {
            return "abcbcdb76fb1d3b3e7aa22335b98147e";
        }
        DanmuInfo()
        :strDmDataKey(""),dwPlayTime(0)
        {
        }
        void resetDefautlt()
        {
            strDmDataKey = "";
            dwPlayTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDmDataKey, 0);
            _os.write(dwPlayTime, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDmDataKey, 0, false);
            _is.read(dwPlayTime, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDmDataKey,"strDmDataKey");
            _ds.display(dwPlayTime,"dwPlayTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDmDataKey, true);
            _ds.displaySimple(dwPlayTime, false);
            return _os;
        }
    public:
        std::string strDmDataKey;
        taf::UInt32 dwPlayTime;
    };
    inline bool operator==(const DanmuInfo&l, const DanmuInfo&r)
    {
        return l.strDmDataKey == r.strDmDataKey && l.dwPlayTime == r.dwPlayTime;
    }
    inline bool operator!=(const DanmuInfo&l, const DanmuInfo&r)
    {
        return !(l == r);
    }

    struct UserInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.UserInfo";
        }
        static string MD5()
        {
            return "14e370758a3940b847add86df2e5fad8";
        }
        UserInfo()
        :cUserType(0),strHead(""),strNick(""),strStarId(""),strFtId("")
        {
        }
        void resetDefautlt()
        {
            cUserType = 0;
            strHead = "";
            strNick = "";
            strStarId = "";
            strFtId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cUserType, 0);
            _os.write(strHead, 1);
            _os.write(strNick, 2);
            _os.write(strStarId, 3);
            _os.write(strFtId, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cUserType, 0, false);
            _is.read(strHead, 1, false);
            _is.read(strNick, 2, false);
            _is.read(strStarId, 3, false);
            _is.read(strFtId, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cUserType,"cUserType");
            _ds.display(strHead,"strHead");
            _ds.display(strNick,"strNick");
            _ds.display(strStarId,"strStarId");
            _ds.display(strFtId,"strFtId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cUserType, true);
            _ds.displaySimple(strHead, true);
            _ds.displaySimple(strNick, true);
            _ds.displaySimple(strStarId, true);
            _ds.displaySimple(strFtId, false);
            return _os;
        }
    public:
        taf::UInt8 cUserType;
        std::string strHead;
        std::string strNick;
        std::string strStarId;
        std::string strFtId;
    };
    inline bool operator==(const UserInfo&l, const UserInfo&r)
    {
        return l.cUserType == r.cUserType && l.strHead == r.strHead && l.strNick == r.strNick && l.strStarId == r.strStarId && l.strFtId == r.strFtId;
    }
    inline bool operator!=(const UserInfo&l, const UserInfo&r)
    {
        return !(l == r);
    }

    struct AppExtInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.AppExtInfo";
        }
        static string MD5()
        {
            return "95d528f0975422ffc8e3b739e9eaf8e6";
        }
        AppExtInfo()
        :dwAppId(0),wstrExtInfo("")
        {
        }
        void resetDefautlt()
        {
            dwAppId = 0;
            wstrExtInfo = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwAppId, 0);
            _os.write(wstrExtInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwAppId, 0, true);
            _is.read(wstrExtInfo, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwAppId,"dwAppId");
            _ds.display(wstrExtInfo,"wstrExtInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwAppId, true);
            _ds.displaySimple(wstrExtInfo, false);
            return _os;
        }
    public:
        taf::UInt32 dwAppId;
        std::string wstrExtInfo;
    };
    inline bool operator==(const AppExtInfo&l, const AppExtInfo&r)
    {
        return l.dwAppId == r.dwAppId && l.wstrExtInfo == r.wstrExtInfo;
    }
    inline bool operator!=(const AppExtInfo&l, const AppExtInfo&r)
    {
        return !(l == r);
    }

    struct VidInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.VidInfo";
        }
        static string MD5()
        {
            return "36f683a7c605a97b7d36350c09e70a51";
        }
        VidInfo()
        :strVid(""),strCid(""),strLid(""),vtype(0),strVidTitle(""),strPid(""),strJumpUrl("")
        {
        }
        void resetDefautlt()
        {
            strVid = "";
            strCid = "";
            strLid = "";
            vtype = 0;
            strVidTitle = "";
            strPid = "";
            strJumpUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strVid, 0);
            _os.write(strCid, 1);
            _os.write(strLid, 2);
            _os.write(vtype, 3);
            _os.write(strVidTitle, 4);
            _os.write(strPid, 5);
            _os.write(strJumpUrl, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strVid, 0, true);
            _is.read(strCid, 1, false);
            _is.read(strLid, 2, false);
            _is.read(vtype, 3, false);
            _is.read(strVidTitle, 4, false);
            _is.read(strPid, 5, false);
            _is.read(strJumpUrl, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strVid,"strVid");
            _ds.display(strCid,"strCid");
            _ds.display(strLid,"strLid");
            _ds.display(vtype,"vtype");
            _ds.display(strVidTitle,"strVidTitle");
            _ds.display(strPid,"strPid");
            _ds.display(strJumpUrl,"strJumpUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strVid, true);
            _ds.displaySimple(strCid, true);
            _ds.displaySimple(strLid, true);
            _ds.displaySimple(vtype, true);
            _ds.displaySimple(strVidTitle, true);
            _ds.displaySimple(strPid, true);
            _ds.displaySimple(strJumpUrl, false);
            return _os;
        }
    public:
        std::string strVid;
        std::string strCid;
        std::string strLid;
        taf::UInt32 vtype;
        std::string strVidTitle;
        std::string strPid;
        std::string strJumpUrl;
    };
    inline bool operator==(const VidInfo&l, const VidInfo&r)
    {
        return l.strVid == r.strVid && l.strCid == r.strCid && l.strLid == r.strLid && l.vtype == r.vtype && l.strVidTitle == r.strVidTitle && l.strPid == r.strPid && l.strJumpUrl == r.strJumpUrl;
    }
    inline bool operator!=(const VidInfo&l, const VidInfo&r)
    {
        return !(l == r);
    }

    struct BasicInfo1 : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.BasicInfo1";
        }
        static string MD5()
        {
            return "9a29685d257b53340aa208fded9ea274";
        }
        BasicInfo1()
        :ddwTweetID(0),dwTime(0),dwUserID(0),cStatus(0),cType(0),cContentType(0),cFrom(0),cAccessLevel(0)
        {
        }
        void resetDefautlt()
        {
            ddwTweetID = 0;
            dwTime = 0;
            dwUserID = 0;
            cStatus = 0;
            cType = 0;
            cContentType = 0;
            cFrom = 0;
            cAccessLevel = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwTweetID, 0);
            _os.write(dwTime, 1);
            _os.write(dwUserID, 2);
            _os.write(cStatus, 3);
            _os.write(cType, 4);
            _os.write(cContentType, 5);
            _os.write(cFrom, 6);
            _os.write(cAccessLevel, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwTweetID, 0, true);
            _is.read(dwTime, 1, true);
            _is.read(dwUserID, 2, true);
            _is.read(cStatus, 3, true);
            _is.read(cType, 4, true);
            _is.read(cContentType, 5, true);
            _is.read(cFrom, 6, true);
            _is.read(cAccessLevel, 7, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwTweetID,"ddwTweetID");
            _ds.display(dwTime,"dwTime");
            _ds.display(dwUserID,"dwUserID");
            _ds.display(cStatus,"cStatus");
            _ds.display(cType,"cType");
            _ds.display(cContentType,"cContentType");
            _ds.display(cFrom,"cFrom");
            _ds.display(cAccessLevel,"cAccessLevel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwTweetID, true);
            _ds.displaySimple(dwTime, true);
            _ds.displaySimple(dwUserID, true);
            _ds.displaySimple(cStatus, true);
            _ds.displaySimple(cType, true);
            _ds.displaySimple(cContentType, true);
            _ds.displaySimple(cFrom, true);
            _ds.displaySimple(cAccessLevel, false);
            return _os;
        }
    public:
        taf::Int64 ddwTweetID;
        taf::UInt32 dwTime;
        taf::Int64 dwUserID;
        taf::UInt8 cStatus;
        taf::UInt8 cType;
        taf::UInt8 cContentType;
        taf::UInt8 cFrom;
        taf::UInt8 cAccessLevel;
    };
    inline bool operator==(const BasicInfo1&l, const BasicInfo1&r)
    {
        return l.ddwTweetID == r.ddwTweetID && l.dwTime == r.dwTime && l.dwUserID == r.dwUserID && l.cStatus == r.cStatus && l.cType == r.cType && l.cContentType == r.cContentType && l.cFrom == r.cFrom && l.cAccessLevel == r.cAccessLevel;
    }
    inline bool operator!=(const BasicInfo1&l, const BasicInfo1&r)
    {
        return !(l == r);
    }

    struct ParentInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.ParentInfo";
        }
        static string MD5()
        {
            return "d74b1b0f5c206e5a4fa86be60d297f43";
        }
        ParentInfo()
        :ddwRootID(0),dwRootUserID(0),ddwParentID(0),dwParentUserID(0)
        {
        }
        void resetDefautlt()
        {
            ddwRootID = 0;
            dwRootUserID = 0;
            ddwParentID = 0;
            dwParentUserID = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwRootID, 0);
            _os.write(dwRootUserID, 1);
            _os.write(ddwParentID, 2);
            _os.write(dwParentUserID, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwRootID, 0, true);
            _is.read(dwRootUserID, 1, true);
            _is.read(ddwParentID, 2, true);
            _is.read(dwParentUserID, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwRootID,"ddwRootID");
            _ds.display(dwRootUserID,"dwRootUserID");
            _ds.display(ddwParentID,"ddwParentID");
            _ds.display(dwParentUserID,"dwParentUserID");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwRootID, true);
            _ds.displaySimple(dwRootUserID, true);
            _ds.displaySimple(ddwParentID, true);
            _ds.displaySimple(dwParentUserID, false);
            return _os;
        }
    public:
        taf::Int64 ddwRootID;
        taf::Int64 dwRootUserID;
        taf::Int64 ddwParentID;
        taf::Int64 dwParentUserID;
    };
    inline bool operator==(const ParentInfo&l, const ParentInfo&r)
    {
        return l.ddwRootID == r.ddwRootID && l.dwRootUserID == r.dwRootUserID && l.ddwParentID == r.ddwParentID && l.dwParentUserID == r.dwParentUserID;
    }
    inline bool operator!=(const ParentInfo&l, const ParentInfo&r)
    {
        return !(l == r);
    }

    struct CircleShortVideoUrl : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.CircleShortVideoUrl";
        }
        static string MD5()
        {
            return "ae4e6e9e48042deb9b83d4f2378379c1";
        }
        CircleShortVideoUrl()
        :vid(""),h5Url(""),time(0),imageUrl(""),playUrl(""),description("")
        {
        }
        void resetDefautlt()
        {
            vid = "";
            h5Url = "";
            time = 0;
            imageUrl = "";
            playUrl = "";
            description = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(h5Url, 1);
            _os.write(time, 2);
            _os.write(imageUrl, 3);
            _os.write(playUrl, 4);
            _os.write(description, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, true);
            _is.read(h5Url, 1, true);
            _is.read(time, 2, true);
            _is.read(imageUrl, 3, true);
            _is.read(playUrl, 4, false);
            _is.read(description, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(h5Url,"h5Url");
            _ds.display(time,"time");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(playUrl,"playUrl");
            _ds.display(description,"description");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(h5Url, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(playUrl, true);
            _ds.displaySimple(description, false);
            return _os;
        }
    public:
        std::string vid;
        std::string h5Url;
        taf::Int64 time;
        std::string imageUrl;
        std::string playUrl;
        std::string description;
    };
    inline bool operator==(const CircleShortVideoUrl&l, const CircleShortVideoUrl&r)
    {
        return l.vid == r.vid && l.h5Url == r.h5Url && l.time == r.time && l.imageUrl == r.imageUrl && l.playUrl == r.playUrl && l.description == r.description;
    }
    inline bool operator!=(const CircleShortVideoUrl&l, const CircleShortVideoUrl&r)
    {
        return !(l == r);
    }

    struct FtBasicInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.FtBasicInfo";
        }
        static string MD5()
        {
            return "0c5a585ee788a2a153ccd893f65617c8";
        }
        FtBasicInfo()
        :ddwTweetID(0),ddwFantuanID(0),strTitle(""),ddwFloorNum(0),dwFtCreatTime(0),dwFtFlags(0)
        {
        }
        void resetDefautlt()
        {
            ddwTweetID = 0;
            ddwFantuanID = 0;
            strTitle = "";
            ddwFloorNum = 0;
            dwFtCreatTime = 0;
            dwFtFlags = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwTweetID, 0);
            _os.write(ddwFantuanID, 1);
            _os.write(strTitle, 2);
            _os.write(ddwFloorNum, 3);
            _os.write(dwFtCreatTime, 4);
            _os.write(dwFtFlags, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwTweetID, 0, false);
            _is.read(ddwFantuanID, 1, false);
            _is.read(strTitle, 2, false);
            _is.read(ddwFloorNum, 3, false);
            _is.read(dwFtCreatTime, 4, false);
            _is.read(dwFtFlags, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwTweetID,"ddwTweetID");
            _ds.display(ddwFantuanID,"ddwFantuanID");
            _ds.display(strTitle,"strTitle");
            _ds.display(ddwFloorNum,"ddwFloorNum");
            _ds.display(dwFtCreatTime,"dwFtCreatTime");
            _ds.display(dwFtFlags,"dwFtFlags");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwTweetID, true);
            _ds.displaySimple(ddwFantuanID, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(ddwFloorNum, true);
            _ds.displaySimple(dwFtCreatTime, true);
            _ds.displaySimple(dwFtFlags, false);
            return _os;
        }
    public:
        taf::Int64 ddwTweetID;
        taf::Int64 ddwFantuanID;
        std::string strTitle;
        taf::Int64 ddwFloorNum;
        taf::Int64 dwFtCreatTime;
        taf::Int32 dwFtFlags;
    };
    inline bool operator==(const FtBasicInfo&l, const FtBasicInfo&r)
    {
        return l.ddwTweetID == r.ddwTweetID && l.ddwFantuanID == r.ddwFantuanID && l.strTitle == r.strTitle && l.ddwFloorNum == r.ddwFloorNum && l.dwFtCreatTime == r.dwFtCreatTime && l.dwFtFlags == r.dwFtFlags;
    }
    inline bool operator!=(const FtBasicInfo&l, const FtBasicInfo&r)
    {
        return !(l == r);
    }

    struct VoteInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.VoteInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        VoteInfo()
        :strVoteId(""),strVoteTitle("")
        {
        }
        void resetDefautlt()
        {
            strVoteId = "";
            strVoteTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strVoteId, 0);
            _os.write(strVoteTitle, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strVoteId, 0, false);
            _is.read(strVoteTitle, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strVoteId,"strVoteId");
            _ds.display(strVoteTitle,"strVoteTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strVoteId, true);
            _ds.displaySimple(strVoteTitle, false);
            return _os;
        }
    public:
        std::string strVoteId;
        std::string strVoteTitle;
    };
    inline bool operator==(const VoteInfo&l, const VoteInfo&r)
    {
        return l.strVoteId == r.strVoteId && l.strVoteTitle == r.strVoteTitle;
    }
    inline bool operator!=(const VoteInfo&l, const VoteInfo&r)
    {
        return !(l == r);
    }

    struct FanInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.FanInfo";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        FanInfo()
        :strFanId("")
        {
        }
        void resetDefautlt()
        {
            strFanId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strFanId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strFanId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strFanId,"strFanId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strFanId, false);
            return _os;
        }
    public:
        std::string strFanId;
    };
    inline bool operator==(const FanInfo&l, const FanInfo&r)
    {
        return l.strFanId == r.strFanId;
    }
    inline bool operator!=(const FanInfo&l, const FanInfo&r)
    {
        return !(l == r);
    }

    struct MiniVideoFromInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.MiniVideoFromInfo";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        MiniVideoFromInfo()
        :vid(""),cid(""),lid(""),title(""),url("")
        {
        }
        void resetDefautlt()
        {
            vid = "";
            cid = "";
            lid = "";
            title = "";
            url = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(cid, 1);
            _os.write(lid, 2);
            _os.write(title, 3);
            _os.write(url, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, false);
            _is.read(cid, 1, false);
            _is.read(lid, 2, false);
            _is.read(title, 3, false);
            _is.read(url, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(cid,"cid");
            _ds.display(lid,"lid");
            _ds.display(title,"title");
            _ds.display(url,"url");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(url, false);
            return _os;
        }
    public:
        std::string vid;
        std::string cid;
        std::string lid;
        std::string title;
        std::string url;
    };
    inline bool operator==(const MiniVideoFromInfo&l, const MiniVideoFromInfo&r)
    {
        return l.vid == r.vid && l.cid == r.cid && l.lid == r.lid && l.title == r.title && l.url == r.url;
    }
    inline bool operator!=(const MiniVideoFromInfo&l, const MiniVideoFromInfo&r)
    {
        return !(l == r);
    }

    struct FtExtInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.FtExtInfo";
        }
        static string MD5()
        {
            return "9faa4ff6fdbc06da4df322d532a37e65";
        }
        FtExtInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(videoInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(videoInfo, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(videoInfo,"videoInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(videoInfo, false);
            return _os;
        }
    public:
        videocircle::MiniVideoFromInfo videoInfo;
    };
    inline bool operator==(const FtExtInfo&l, const FtExtInfo&r)
    {
        return l.videoInfo == r.videoInfo;
    }
    inline bool operator!=(const FtExtInfo&l, const FtExtInfo&r)
    {
        return !(l == r);
    }

    struct OMInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.OMInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        OMInfo()
        :strArticleId(""),strArticleTitle("")
        {
        }
        void resetDefautlt()
        {
            strArticleId = "";
            strArticleTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strArticleId, 0);
            _os.write(strArticleTitle, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strArticleId, 0, false);
            _is.read(strArticleTitle, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strArticleId,"strArticleId");
            _ds.display(strArticleTitle,"strArticleTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strArticleId, true);
            _ds.displaySimple(strArticleTitle, false);
            return _os;
        }
    public:
        std::string strArticleId;
        std::string strArticleTitle;
    };
    inline bool operator==(const OMInfo&l, const OMInfo&r)
    {
        return l.strArticleId == r.strArticleId && l.strArticleTitle == r.strArticleTitle;
    }
    inline bool operator!=(const OMInfo&l, const OMInfo&r)
    {
        return !(l == r);
    }

    struct MgrInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.MgrInfo";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        MgrInfo()
        :identity(0)
        {
        }
        void resetDefautlt()
        {
            identity = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(identity, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(identity, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(identity,"identity");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(identity, false);
            return _os;
        }
    public:
        taf::Int32 identity;
    };
    inline bool operator==(const MgrInfo&l, const MgrInfo&r)
    {
        return l.identity == r.identity;
    }
    inline bool operator!=(const MgrInfo&l, const MgrInfo&r)
    {
        return !(l == r);
    }

    struct ScoreInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.ScoreInfo";
        }
        static string MD5()
        {
            return "df4c6f58b2f3029323df7fc1cae948a3";
        }
        ScoreInfo()
        :dwType(0),ddwScore(0)
        {
        }
        void resetDefautlt()
        {
            dwType = 0;
            ddwScore = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwType, 0);
            _os.write(ddwScore, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwType, 0, false);
            _is.read(ddwScore, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwType,"dwType");
            _ds.display(ddwScore,"ddwScore");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwType, true);
            _ds.displaySimple(ddwScore, false);
            return _os;
        }
    public:
        taf::Int32 dwType;
        taf::Double ddwScore;
    };
    inline bool operator==(const ScoreInfo&l, const ScoreInfo&r)
    {
        return l.dwType == r.dwType && l.ddwScore == r.ddwScore;
    }
    inline bool operator!=(const ScoreInfo&l, const ScoreInfo&r)
    {
        return !(l == r);
    }

    struct GoodScoreInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.GoodScoreInfo";
        }
        static string MD5()
        {
            return "593795f619bc32ca876d8075d954327b";
        }
        GoodScoreInfo()
        :strBussinessId(""),orderId(""),userType(0),commentType(0),isAnonymity(0),skuid(""),strFlowOrderId("")
        {
        }
        void resetDefautlt()
        {
            strBussinessId = "";
            orderId = "";
            userType = 0;
            commentType = 0;
            isAnonymity = 0;
            skuid = "";
            strFlowOrderId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strBussinessId, 0);
            _os.write(vecScores, 1);
            _os.write(orderId, 2);
            _os.write(userType, 3);
            _os.write(commentType, 4);
            _os.write(isAnonymity, 5);
            _os.write(skuid, 6);
            _os.write(strFlowOrderId, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strBussinessId, 0, false);
            _is.read(vecScores, 1, false);
            _is.read(orderId, 2, false);
            _is.read(userType, 3, false);
            _is.read(commentType, 4, false);
            _is.read(isAnonymity, 5, false);
            _is.read(skuid, 6, false);
            _is.read(strFlowOrderId, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strBussinessId,"strBussinessId");
            _ds.display(vecScores,"vecScores");
            _ds.display(orderId,"orderId");
            _ds.display(userType,"userType");
            _ds.display(commentType,"commentType");
            _ds.display(isAnonymity,"isAnonymity");
            _ds.display(skuid,"skuid");
            _ds.display(strFlowOrderId,"strFlowOrderId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strBussinessId, true);
            _ds.displaySimple(vecScores, true);
            _ds.displaySimple(orderId, true);
            _ds.displaySimple(userType, true);
            _ds.displaySimple(commentType, true);
            _ds.displaySimple(isAnonymity, true);
            _ds.displaySimple(skuid, true);
            _ds.displaySimple(strFlowOrderId, false);
            return _os;
        }
    public:
        std::string strBussinessId;
        vector<videocircle::ScoreInfo> vecScores;
        std::string orderId;
        taf::Char userType;
        taf::Char commentType;
        taf::Char isAnonymity;
        std::string skuid;
        std::string strFlowOrderId;
    };
    inline bool operator==(const GoodScoreInfo&l, const GoodScoreInfo&r)
    {
        return l.strBussinessId == r.strBussinessId && l.vecScores == r.vecScores && l.orderId == r.orderId && l.userType == r.userType && l.commentType == r.commentType && l.isAnonymity == r.isAnonymity && l.skuid == r.skuid && l.strFlowOrderId == r.strFlowOrderId;
    }
    inline bool operator!=(const GoodScoreInfo&l, const GoodScoreInfo&r)
    {
        return !(l == r);
    }


}

#define videocircle_PlayImgUrl_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwPlayTime,b.dwPlayTime);jce_copy_struct(a.strUrl,b.strUrl);jce_copy_struct(a.strWaterFlagUrl,b.strWaterFlagUrl);jce_copy_struct(a.strHandWriteInfo,b.strHandWriteInfo);jce_copy_struct(a.cImageStyle,b.cImageStyle);jce_copy_struct(a.strThumbUrl,b.strThumbUrl);jce_copy_struct(a.width,b.width);jce_copy_struct(a.height,b.height);

#define videocircle_VoiceInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strVoiceId,b.strVoiceId);jce_copy_struct(a.dwDuration,b.dwDuration);jce_copy_struct(a.bPermanent,b.bPermanent);jce_copy_struct(a.cStorageFlag,b.cStorageFlag);

#define videocircle_TopicInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strTopicId,b.strTopicId);jce_copy_struct(a.strTopicText,b.strTopicText);jce_copy_struct(a.cType,b.cType);jce_copy_struct(a.strExtraKey,b.strExtraKey);jce_copy_struct(a.vecRelateFansId,b.vecRelateFansId);jce_copy_struct(a.vecRelateVid,b.vecRelateVid);jce_copy_struct(a.vecRelateCid,b.vecRelateCid);jce_copy_struct(a.vecRelateLid,b.vecRelateLid);

#define videocircle_SnsInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cstrWxScore,b.cstrWxScore);

#define videocircle_DanmuInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDmDataKey,b.strDmDataKey);jce_copy_struct(a.dwPlayTime,b.dwPlayTime);

#define videocircle_UserInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cUserType,b.cUserType);jce_copy_struct(a.strHead,b.strHead);jce_copy_struct(a.strNick,b.strNick);jce_copy_struct(a.strStarId,b.strStarId);jce_copy_struct(a.strFtId,b.strFtId);

#define videocircle_AppExtInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwAppId,b.dwAppId);jce_copy_struct(a.wstrExtInfo,b.wstrExtInfo);

#define videocircle_VidInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strVid,b.strVid);jce_copy_struct(a.strCid,b.strCid);jce_copy_struct(a.strLid,b.strLid);jce_copy_struct(a.vtype,b.vtype);jce_copy_struct(a.strVidTitle,b.strVidTitle);jce_copy_struct(a.strPid,b.strPid);jce_copy_struct(a.strJumpUrl,b.strJumpUrl);

#define videocircle_BasicInfo1_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwTweetID,b.ddwTweetID);jce_copy_struct(a.dwTime,b.dwTime);jce_copy_struct(a.dwUserID,b.dwUserID);jce_copy_struct(a.cStatus,b.cStatus);jce_copy_struct(a.cType,b.cType);jce_copy_struct(a.cContentType,b.cContentType);jce_copy_struct(a.cFrom,b.cFrom);jce_copy_struct(a.cAccessLevel,b.cAccessLevel);

#define videocircle_ParentInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwRootID,b.ddwRootID);jce_copy_struct(a.dwRootUserID,b.dwRootUserID);jce_copy_struct(a.ddwParentID,b.ddwParentID);jce_copy_struct(a.dwParentUserID,b.dwParentUserID);

#define videocircle_CircleShortVideoUrl_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.h5Url,b.h5Url);jce_copy_struct(a.time,b.time);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.playUrl,b.playUrl);jce_copy_struct(a.description,b.description);

#define videocircle_FtBasicInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwTweetID,b.ddwTweetID);jce_copy_struct(a.ddwFantuanID,b.ddwFantuanID);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.ddwFloorNum,b.ddwFloorNum);jce_copy_struct(a.dwFtCreatTime,b.dwFtCreatTime);jce_copy_struct(a.dwFtFlags,b.dwFtFlags);

#define videocircle_VoteInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strVoteId,b.strVoteId);jce_copy_struct(a.strVoteTitle,b.strVoteTitle);

#define videocircle_FanInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strFanId,b.strFanId);

#define videocircle_MiniVideoFromInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.title,b.title);jce_copy_struct(a.url,b.url);

#define videocircle_FtExtInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.videoInfo,b.videoInfo);

#define videocircle_OMInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strArticleId,b.strArticleId);jce_copy_struct(a.strArticleTitle,b.strArticleTitle);

#define videocircle_MgrInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.identity,b.identity);

#define videocircle_ScoreInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwType,b.dwType);jce_copy_struct(a.ddwScore,b.ddwScore);

#define videocircle_GoodScoreInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strBussinessId,b.strBussinessId);jce_copy_struct(a.vecScores,b.vecScores);jce_copy_struct(a.orderId,b.orderId);jce_copy_struct(a.userType,b.userType);jce_copy_struct(a.commentType,b.commentType);jce_copy_struct(a.isAnonymity,b.isAnonymity);jce_copy_struct(a.skuid,b.skuid);jce_copy_struct(a.strFlowOrderId,b.strFlowOrderId);



#endif
