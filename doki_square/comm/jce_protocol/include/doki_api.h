// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `doki_api.jce'
// **********************************************************************

#ifndef __DOKI_API_H_
#define __DOKI_API_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace jce
{
    enum ECmd
    {
        CMD_GET_ACTIVITY_DOKI_LIST = 62765,
        CMD_GET_USR_DOKI_LIST = 63067,
        CMD_GET_DOKI_BASIC_INFO = 63315,
        CMD_GET_USR_IN_DOKI_INFO = 63314,
    };
    inline string etos(const ECmd & e)
    {
        switch(e)
        {
            case CMD_GET_ACTIVITY_DOKI_LIST: return "CMD_GET_ACTIVITY_DOKI_LIST";
            case CMD_GET_USR_DOKI_LIST: return "CMD_GET_USR_DOKI_LIST";
            case CMD_GET_DOKI_BASIC_INFO: return "CMD_GET_DOKI_BASIC_INFO";
            case CMD_GET_USR_IN_DOKI_INFO: return "CMD_GET_USR_IN_DOKI_INFO";
            default: return "";
        }
    }
    inline int stoe(const string & s, ECmd & e)
    {
        if(s == "CMD_GET_ACTIVITY_DOKI_LIST")  { e=CMD_GET_ACTIVITY_DOKI_LIST; return 0;}
        if(s == "CMD_GET_USR_DOKI_LIST")  { e=CMD_GET_USR_DOKI_LIST; return 0;}
        if(s == "CMD_GET_DOKI_BASIC_INFO")  { e=CMD_GET_DOKI_BASIC_INFO; return 0;}
        if(s == "CMD_GET_USR_IN_DOKI_INFO")  { e=CMD_GET_USR_IN_DOKI_INFO; return 0;}

        return -1;
    }

    enum EGetType
    {
        E_GET_BY_DOKIID = 1,
        E_GET_BY_VID = 2,
        E_GET_BY_ACTIVITY = 3,
        E_GET_BY_DOKIID_BRIEF = 4,
    };
    inline string etos(const EGetType & e)
    {
        switch(e)
        {
            case E_GET_BY_DOKIID: return "E_GET_BY_DOKIID";
            case E_GET_BY_VID: return "E_GET_BY_VID";
            case E_GET_BY_ACTIVITY: return "E_GET_BY_ACTIVITY";
            case E_GET_BY_DOKIID_BRIEF: return "E_GET_BY_DOKIID_BRIEF";
            default: return "";
        }
    }
    inline int stoe(const string & s, EGetType & e)
    {
        if(s == "E_GET_BY_DOKIID")  { e=E_GET_BY_DOKIID; return 0;}
        if(s == "E_GET_BY_VID")  { e=E_GET_BY_VID; return 0;}
        if(s == "E_GET_BY_ACTIVITY")  { e=E_GET_BY_ACTIVITY; return 0;}
        if(s == "E_GET_BY_DOKIID_BRIEF")  { e=E_GET_BY_DOKIID_BRIEF; return 0;}

        return -1;
    }

    enum EActivityId
    {
        E_ACT_ID_101 = 1657369,
        E_ACT_ID_FUTURE_STAR = 1672668,
        E_ACT_ID_CHAOYIN_BATTLE = 1674445,
    };
    inline string etos(const EActivityId & e)
    {
        switch(e)
        {
            case E_ACT_ID_101: return "E_ACT_ID_101";
            case E_ACT_ID_FUTURE_STAR: return "E_ACT_ID_FUTURE_STAR";
            case E_ACT_ID_CHAOYIN_BATTLE: return "E_ACT_ID_CHAOYIN_BATTLE";
            default: return "";
        }
    }
    inline int stoe(const string & s, EActivityId & e)
    {
        if(s == "E_ACT_ID_101")  { e=E_ACT_ID_101; return 0;}
        if(s == "E_ACT_ID_FUTURE_STAR")  { e=E_ACT_ID_FUTURE_STAR; return 0;}
        if(s == "E_ACT_ID_CHAOYIN_BATTLE")  { e=E_ACT_ID_CHAOYIN_BATTLE; return 0;}

        return -1;
    }

    struct stDokiImgInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.stDokiImgInfo";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        stDokiImgInfo()
        :strHeadImg(""),strBackImg(""),strColorImg("")
        {
        }
        void resetDefautlt()
        {
            strHeadImg = "";
            strBackImg = "";
            strColorImg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strHeadImg, 0);
            _os.write(strBackImg, 1);
            _os.write(strColorImg, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strHeadImg, 0, false);
            _is.read(strBackImg, 1, false);
            _is.read(strColorImg, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strHeadImg,"strHeadImg");
            _ds.display(strBackImg,"strBackImg");
            _ds.display(strColorImg,"strColorImg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strHeadImg, true);
            _ds.displaySimple(strBackImg, true);
            _ds.displaySimple(strColorImg, false);
            return _os;
        }
    public:
        std::string strHeadImg;
        std::string strBackImg;
        std::string strColorImg;
    };
    inline bool operator==(const stDokiImgInfo&l, const stDokiImgInfo&r)
    {
        return l.strHeadImg == r.strHeadImg && l.strBackImg == r.strBackImg && l.strColorImg == r.strColorImg;
    }
    inline bool operator!=(const stDokiImgInfo&l, const stDokiImgInfo&r)
    {
        return !(l == r);
    }

    struct stDokiInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.stDokiInfo";
        }
        static string MD5()
        {
            return "21b6243a8b97b05f9269a1a16ba42754";
        }
        stDokiInfo()
        :lDokiid(0),lStarId(0),iCategory(0),strName(""),lFansNum(0),bFlwStat(0),iSortVal(0)
        {
        }
        void resetDefautlt()
        {
            lDokiid = 0;
            lStarId = 0;
            iCategory = 0;
            strName = "";
            lFansNum = 0;
            bFlwStat = 0;
            iSortVal = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lDokiid, 0);
            _os.write(lStarId, 1);
            _os.write(iCategory, 2);
            _os.write(stImgInfo, 3);
            _os.write(strName, 4);
            _os.write(lFansNum, 5);
            _os.write(bFlwStat, 6);
            _os.write(mpExtData, 7);
            _os.write(iSortVal, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lDokiid, 0, true);
            _is.read(lStarId, 1, false);
            _is.read(iCategory, 2, true);
            _is.read(stImgInfo, 3, false);
            _is.read(strName, 4, false);
            _is.read(lFansNum, 5, false);
            _is.read(bFlwStat, 6, false);
            _is.read(mpExtData, 7, false);
            _is.read(iSortVal, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lDokiid,"lDokiid");
            _ds.display(lStarId,"lStarId");
            _ds.display(iCategory,"iCategory");
            _ds.display(stImgInfo,"stImgInfo");
            _ds.display(strName,"strName");
            _ds.display(lFansNum,"lFansNum");
            _ds.display(bFlwStat,"bFlwStat");
            _ds.display(mpExtData,"mpExtData");
            _ds.display(iSortVal,"iSortVal");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lDokiid, true);
            _ds.displaySimple(lStarId, true);
            _ds.displaySimple(iCategory, true);
            _ds.displaySimple(stImgInfo, true);
            _ds.displaySimple(strName, true);
            _ds.displaySimple(lFansNum, true);
            _ds.displaySimple(bFlwStat, true);
            _ds.displaySimple(mpExtData, true);
            _ds.displaySimple(iSortVal, false);
            return _os;
        }
    public:
        taf::Int64 lDokiid;
        taf::Int64 lStarId;
        taf::Int32 iCategory;
        jce::stDokiImgInfo stImgInfo;
        std::string strName;
        taf::Int64 lFansNum;
        taf::Char bFlwStat;
        map<std::string, std::string> mpExtData;
        taf::Int32 iSortVal;
    };
    inline bool operator==(const stDokiInfo&l, const stDokiInfo&r)
    {
        return l.lDokiid == r.lDokiid && l.lStarId == r.lStarId && l.iCategory == r.iCategory && l.stImgInfo == r.stImgInfo && l.strName == r.strName && l.lFansNum == r.lFansNum && l.bFlwStat == r.bFlwStat && l.mpExtData == r.mpExtData && l.iSortVal == r.iSortVal;
    }
    inline bool operator!=(const stDokiInfo&l, const stDokiInfo&r)
    {
        return !(l == r);
    }

    struct stGetDokiInfoReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.stGetDokiInfoReq";
        }
        static string MD5()
        {
            return "f4ffa5620ad7fe84895f9d4ed7045d61";
        }
        stGetDokiInfoReq()
        :bGetType(0),strDokiid(""),strVid(""),iActivityId(0),bGetExt(0),bFrom(0)
        {
        }
        void resetDefautlt()
        {
            bGetType = 0;
            strDokiid = "";
            strVid = "";
            iActivityId = 0;
            bGetExt = 0;
            bFrom = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bGetType, 0);
            _os.write(strDokiid, 1);
            _os.write(strVid, 2);
            _os.write(iActivityId, 3);
            _os.write(bGetExt, 4);
            _os.write(bFrom, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bGetType, 0, true);
            _is.read(strDokiid, 1, false);
            _is.read(strVid, 2, false);
            _is.read(iActivityId, 3, false);
            _is.read(bGetExt, 4, false);
            _is.read(bFrom, 5, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bGetType,"bGetType");
            _ds.display(strDokiid,"strDokiid");
            _ds.display(strVid,"strVid");
            _ds.display(iActivityId,"iActivityId");
            _ds.display(bGetExt,"bGetExt");
            _ds.display(bFrom,"bFrom");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bGetType, true);
            _ds.displaySimple(strDokiid, true);
            _ds.displaySimple(strVid, true);
            _ds.displaySimple(iActivityId, true);
            _ds.displaySimple(bGetExt, true);
            _ds.displaySimple(bFrom, false);
            return _os;
        }
    public:
        taf::Char bGetType;
        std::string strDokiid;
        std::string strVid;
        taf::Int32 iActivityId;
        taf::Char bGetExt;
        taf::Char bFrom;
    };
    inline bool operator==(const stGetDokiInfoReq&l, const stGetDokiInfoReq&r)
    {
        return l.bGetType == r.bGetType && l.strDokiid == r.strDokiid && l.strVid == r.strVid && l.iActivityId == r.iActivityId && l.bGetExt == r.bGetExt && l.bFrom == r.bFrom;
    }
    inline bool operator!=(const stGetDokiInfoReq&l, const stGetDokiInfoReq&r)
    {
        return !(l == r);
    }

    struct stGetDokiInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.stGetDokiInfoRsp";
        }
        static string MD5()
        {
            return "44acb21a3d5462263ae1a66a94049e8c";
        }
        stGetDokiInfoRsp()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(vecDokiList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, false);
            _is.read(vecDokiList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(vecDokiList,"vecDokiList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(vecDokiList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::stDokiInfo> vecDokiList;
    };
    inline bool operator==(const stGetDokiInfoRsp&l, const stGetDokiInfoRsp&r)
    {
        return l.errCode == r.errCode && l.vecDokiList == r.vecDokiList;
    }
    inline bool operator!=(const stGetDokiInfoRsp&l, const stGetDokiInfoRsp&r)
    {
        return !(l == r);
    }

    struct stGetUsrDokiListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.stGetUsrDokiListReq";
        }
        static string MD5()
        {
            return "31b837dee0e3f970aa2d14771bf49d74";
        }
        stGetUsrDokiListReq()
        :strVuid(""),iFlag(0),iDokiType(0),iSortFlag(0)
        {
        }
        void resetDefautlt()
        {
            strVuid = "";
            iFlag = 0;
            iDokiType = 0;
            iSortFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strVuid, 0);
            _os.write(iFlag, 1);
            _os.write(iDokiType, 2);
            _os.write(iSortFlag, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strVuid, 0, true);
            _is.read(iFlag, 1, false);
            _is.read(iDokiType, 2, false);
            _is.read(iSortFlag, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strVuid,"strVuid");
            _ds.display(iFlag,"iFlag");
            _ds.display(iDokiType,"iDokiType");
            _ds.display(iSortFlag,"iSortFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strVuid, true);
            _ds.displaySimple(iFlag, true);
            _ds.displaySimple(iDokiType, true);
            _ds.displaySimple(iSortFlag, false);
            return _os;
        }
    public:
        std::string strVuid;
        taf::Int32 iFlag;
        taf::Int32 iDokiType;
        taf::Int32 iSortFlag;
    };
    inline bool operator==(const stGetUsrDokiListReq&l, const stGetUsrDokiListReq&r)
    {
        return l.strVuid == r.strVuid && l.iFlag == r.iFlag && l.iDokiType == r.iDokiType && l.iSortFlag == r.iSortFlag;
    }
    inline bool operator!=(const stGetUsrDokiListReq&l, const stGetUsrDokiListReq&r)
    {
        return !(l == r);
    }

    struct stGetUsrDokiListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.stGetUsrDokiListRsp";
        }
        static string MD5()
        {
            return "b35fdadb9a92890476eda39b38adcb2e";
        }
        stGetUsrDokiListRsp()
        :errCode(0),iCount(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            iCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(vecDokiList, 1);
            _os.write(iCount, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, false);
            _is.read(vecDokiList, 1, false);
            _is.read(iCount, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(vecDokiList,"vecDokiList");
            _ds.display(iCount,"iCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(vecDokiList, true);
            _ds.displaySimple(iCount, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<std::string> vecDokiList;
        taf::Int32 iCount;
    };
    inline bool operator==(const stGetUsrDokiListRsp&l, const stGetUsrDokiListRsp&r)
    {
        return l.errCode == r.errCode && l.vecDokiList == r.vecDokiList && l.iCount == r.iCount;
    }
    inline bool operator!=(const stGetUsrDokiListRsp&l, const stGetUsrDokiListRsp&r)
    {
        return !(l == r);
    }

    struct DokiImageInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiImageInfo";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        DokiImageInfo()
        :strHeadImg(""),strBackImg(""),strColorImg("")
        {
        }
        void resetDefautlt()
        {
            strHeadImg = "";
            strBackImg = "";
            strColorImg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strHeadImg, 0);
            _os.write(strBackImg, 1);
            _os.write(strColorImg, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strHeadImg, 0, false);
            _is.read(strBackImg, 1, false);
            _is.read(strColorImg, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strHeadImg,"strHeadImg");
            _ds.display(strBackImg,"strBackImg");
            _ds.display(strColorImg,"strColorImg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strHeadImg, true);
            _ds.displaySimple(strBackImg, true);
            _ds.displaySimple(strColorImg, false);
            return _os;
        }
    public:
        std::string strHeadImg;
        std::string strBackImg;
        std::string strColorImg;
    };
    inline bool operator==(const DokiImageInfo&l, const DokiImageInfo&r)
    {
        return l.strHeadImg == r.strHeadImg && l.strBackImg == r.strBackImg && l.strColorImg == r.strColorImg;
    }
    inline bool operator!=(const DokiImageInfo&l, const DokiImageInfo&r)
    {
        return !(l == r);
    }

    struct VideoDokiInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoDokiInfo";
        }
        static string MD5()
        {
            return "a5c9019ea89f626dc426a978258ff1f1";
        }
        VideoDokiInfo()
        :strLids(""),strCids(""),strKeyWords(""),strLabel(""),dwStatus(0)
        {
        }
        void resetDefautlt()
        {
            strLids = "";
            strCids = "";
            strKeyWords = "";
            strLabel = "";
            dwStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strLids, 0);
            _os.write(strCids, 1);
            _os.write(strKeyWords, 2);
            _os.write(strLabel, 3);
            _os.write(dwStatus, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strLids, 0, false);
            _is.read(strCids, 1, false);
            _is.read(strKeyWords, 2, false);
            _is.read(strLabel, 3, false);
            _is.read(dwStatus, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strLids,"strLids");
            _ds.display(strCids,"strCids");
            _ds.display(strKeyWords,"strKeyWords");
            _ds.display(strLabel,"strLabel");
            _ds.display(dwStatus,"dwStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strLids, true);
            _ds.displaySimple(strCids, true);
            _ds.displaySimple(strKeyWords, true);
            _ds.displaySimple(strLabel, true);
            _ds.displaySimple(dwStatus, false);
            return _os;
        }
    public:
        std::string strLids;
        std::string strCids;
        std::string strKeyWords;
        std::string strLabel;
        taf::Int32 dwStatus;
    };
    inline bool operator==(const VideoDokiInfo&l, const VideoDokiInfo&r)
    {
        return l.strLids == r.strLids && l.strCids == r.strCids && l.strKeyWords == r.strKeyWords && l.strLabel == r.strLabel && l.dwStatus == r.dwStatus;
    }
    inline bool operator!=(const VideoDokiInfo&l, const VideoDokiInfo&r)
    {
        return !(l == r);
    }

    struct DokiBaseInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiBaseInfo";
        }
        static string MD5()
        {
            return "c723b139abc35492a7a024254e05f471";
        }
        DokiBaseInfo()
        :lDokiId(0),lStarId(0),iDokiType(0),strName(""),lFansNum(0),iDelFalg(0),lPostCount(0),lWeekFansNum(0)
        {
        }
        void resetDefautlt()
        {
            lDokiId = 0;
            lStarId = 0;
            iDokiType = 0;
            strName = "";
            lFansNum = 0;
            iDelFalg = 0;
            lPostCount = 0;
            lWeekFansNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lDokiId, 0);
            _os.write(lStarId, 1);
            _os.write(iDokiType, 2);
            _os.write(strName, 3);
            _os.write(lFansNum, 4);
            _os.write(iDelFalg, 5);
            _os.write(stFtImageInfo, 6);
            _os.write(stVideoDokiInfo, 7);
            _os.write(lPostCount, 8);
            _os.write(lWeekFansNum, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lDokiId, 0, true);
            _is.read(lStarId, 1, false);
            _is.read(iDokiType, 2, true);
            _is.read(strName, 3, false);
            _is.read(lFansNum, 4, false);
            _is.read(iDelFalg, 5, false);
            _is.read(stFtImageInfo, 6, false);
            _is.read(stVideoDokiInfo, 7, false);
            _is.read(lPostCount, 8, false);
            _is.read(lWeekFansNum, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lDokiId,"lDokiId");
            _ds.display(lStarId,"lStarId");
            _ds.display(iDokiType,"iDokiType");
            _ds.display(strName,"strName");
            _ds.display(lFansNum,"lFansNum");
            _ds.display(iDelFalg,"iDelFalg");
            _ds.display(stFtImageInfo,"stFtImageInfo");
            _ds.display(stVideoDokiInfo,"stVideoDokiInfo");
            _ds.display(lPostCount,"lPostCount");
            _ds.display(lWeekFansNum,"lWeekFansNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lDokiId, true);
            _ds.displaySimple(lStarId, true);
            _ds.displaySimple(iDokiType, true);
            _ds.displaySimple(strName, true);
            _ds.displaySimple(lFansNum, true);
            _ds.displaySimple(iDelFalg, true);
            _ds.displaySimple(stFtImageInfo, true);
            _ds.displaySimple(stVideoDokiInfo, true);
            _ds.displaySimple(lPostCount, true);
            _ds.displaySimple(lWeekFansNum, false);
            return _os;
        }
    public:
        taf::Int64 lDokiId;
        taf::Int64 lStarId;
        taf::Int32 iDokiType;
        std::string strName;
        taf::Int64 lFansNum;
        taf::Int32 iDelFalg;
        jce::DokiImageInfo stFtImageInfo;
        jce::VideoDokiInfo stVideoDokiInfo;
        taf::Int64 lPostCount;
        taf::Int64 lWeekFansNum;
    };
    inline bool operator==(const DokiBaseInfo&l, const DokiBaseInfo&r)
    {
        return l.lDokiId == r.lDokiId && l.lStarId == r.lStarId && l.iDokiType == r.iDokiType && l.strName == r.strName && l.lFansNum == r.lFansNum && l.iDelFalg == r.iDelFalg && l.stFtImageInfo == r.stFtImageInfo && l.stVideoDokiInfo == r.stVideoDokiInfo && l.lPostCount == r.lPostCount && l.lWeekFansNum == r.lWeekFansNum;
    }
    inline bool operator!=(const DokiBaseInfo&l, const DokiBaseInfo&r)
    {
        return !(l == r);
    }

    struct GetDokiInfoReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetDokiInfoReq";
        }
        static string MD5()
        {
            return "9bda4ac16227127f47ea815aed6f8d9e";
        }
        GetDokiInfoReq()
        :strDokiid(""),iFlag(0),iFrom(0)
        {
        }
        void resetDefautlt()
        {
            strDokiid = "";
            iFlag = 0;
            iFrom = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDokiid, 0);
            _os.write(iFlag, 1);
            _os.write(iFrom, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDokiid, 0, true);
            _is.read(iFlag, 1, false);
            _is.read(iFrom, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDokiid,"strDokiid");
            _ds.display(iFlag,"iFlag");
            _ds.display(iFrom,"iFrom");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDokiid, true);
            _ds.displaySimple(iFlag, true);
            _ds.displaySimple(iFrom, false);
            return _os;
        }
    public:
        std::string strDokiid;
        taf::Int32 iFlag;
        taf::Int32 iFrom;
    };
    inline bool operator==(const GetDokiInfoReq&l, const GetDokiInfoReq&r)
    {
        return l.strDokiid == r.strDokiid && l.iFlag == r.iFlag && l.iFrom == r.iFrom;
    }
    inline bool operator!=(const GetDokiInfoReq&l, const GetDokiInfoReq&r)
    {
        return !(l == r);
    }

    struct GetDokiInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetDokiInfoRsp";
        }
        static string MD5()
        {
            return "d961346a93dac536c16c0cd7f7fd806c";
        }
        GetDokiInfoRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(stDokiInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(stDokiInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stDokiInfo,"stDokiInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stDokiInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        jce::DokiBaseInfo stDokiInfo;
    };
    inline bool operator==(const GetDokiInfoRsp&l, const GetDokiInfoRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.stDokiInfo == r.stDokiInfo;
    }
    inline bool operator!=(const GetDokiInfoRsp&l, const GetDokiInfoRsp&r)
    {
        return !(l == r);
    }

    struct GetUsrUnderDokiInfoReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetUsrUnderDokiInfoReq";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        GetUsrUnderDokiInfoReq()
        :strDokiid(""),strVuid("")
        {
        }
        void resetDefautlt()
        {
            strDokiid = "";
            strVuid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDokiid, 0);
            _os.write(strVuid, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDokiid, 0, true);
            _is.read(strVuid, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDokiid,"strDokiid");
            _ds.display(strVuid,"strVuid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDokiid, true);
            _ds.displaySimple(strVuid, false);
            return _os;
        }
    public:
        std::string strDokiid;
        std::string strVuid;
    };
    inline bool operator==(const GetUsrUnderDokiInfoReq&l, const GetUsrUnderDokiInfoReq&r)
    {
        return l.strDokiid == r.strDokiid && l.strVuid == r.strVuid;
    }
    inline bool operator!=(const GetUsrUnderDokiInfoReq&l, const GetUsrUnderDokiInfoReq&r)
    {
        return !(l == r);
    }

    struct GetUsrUnderDokiInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetUsrUnderDokiInfoRsp";
        }
        static string MD5()
        {
            return "234f3dfe8bc0a120afe56bfc0fb75c24";
        }
        GetUsrUnderDokiInfoRsp()
        :errCode(0),strErrMsg(""),lAttentTime(0),lRank(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            lAttentTime = 0;
            lRank = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(lAttentTime, 2);
            _os.write(lRank, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(lAttentTime, 2, false);
            _is.read(lRank, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(lAttentTime,"lAttentTime");
            _ds.display(lRank,"lRank");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(lAttentTime, true);
            _ds.displaySimple(lRank, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        taf::Int64 lAttentTime;
        taf::Int64 lRank;
    };
    inline bool operator==(const GetUsrUnderDokiInfoRsp&l, const GetUsrUnderDokiInfoRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.lAttentTime == r.lAttentTime && l.lRank == r.lRank;
    }
    inline bool operator!=(const GetUsrUnderDokiInfoRsp&l, const GetUsrUnderDokiInfoRsp&r)
    {
        return !(l == r);
    }


}

#define jce_stDokiImgInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strHeadImg,b.strHeadImg);jce_copy_struct(a.strBackImg,b.strBackImg);jce_copy_struct(a.strColorImg,b.strColorImg);

#define jce_stDokiInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lDokiid,b.lDokiid);jce_copy_struct(a.lStarId,b.lStarId);jce_copy_struct(a.iCategory,b.iCategory);jce_copy_struct(a.stImgInfo,b.stImgInfo);jce_copy_struct(a.strName,b.strName);jce_copy_struct(a.lFansNum,b.lFansNum);jce_copy_struct(a.bFlwStat,b.bFlwStat);jce_copy_struct(a.mpExtData,b.mpExtData);jce_copy_struct(a.iSortVal,b.iSortVal);

#define jce_stGetDokiInfoReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bGetType,b.bGetType);jce_copy_struct(a.strDokiid,b.strDokiid);jce_copy_struct(a.strVid,b.strVid);jce_copy_struct(a.iActivityId,b.iActivityId);jce_copy_struct(a.bGetExt,b.bGetExt);jce_copy_struct(a.bFrom,b.bFrom);

#define jce_stGetDokiInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.vecDokiList,b.vecDokiList);

#define jce_stGetUsrDokiListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strVuid,b.strVuid);jce_copy_struct(a.iFlag,b.iFlag);jce_copy_struct(a.iDokiType,b.iDokiType);jce_copy_struct(a.iSortFlag,b.iSortFlag);

#define jce_stGetUsrDokiListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.vecDokiList,b.vecDokiList);jce_copy_struct(a.iCount,b.iCount);

#define jce_DokiImageInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strHeadImg,b.strHeadImg);jce_copy_struct(a.strBackImg,b.strBackImg);jce_copy_struct(a.strColorImg,b.strColorImg);

#define jce_VideoDokiInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strLids,b.strLids);jce_copy_struct(a.strCids,b.strCids);jce_copy_struct(a.strKeyWords,b.strKeyWords);jce_copy_struct(a.strLabel,b.strLabel);jce_copy_struct(a.dwStatus,b.dwStatus);

#define jce_DokiBaseInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lDokiId,b.lDokiId);jce_copy_struct(a.lStarId,b.lStarId);jce_copy_struct(a.iDokiType,b.iDokiType);jce_copy_struct(a.strName,b.strName);jce_copy_struct(a.lFansNum,b.lFansNum);jce_copy_struct(a.iDelFalg,b.iDelFalg);jce_copy_struct(a.stFtImageInfo,b.stFtImageInfo);jce_copy_struct(a.stVideoDokiInfo,b.stVideoDokiInfo);jce_copy_struct(a.lPostCount,b.lPostCount);jce_copy_struct(a.lWeekFansNum,b.lWeekFansNum);

#define jce_GetDokiInfoReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDokiid,b.strDokiid);jce_copy_struct(a.iFlag,b.iFlag);jce_copy_struct(a.iFrom,b.iFrom);

#define jce_GetDokiInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stDokiInfo,b.stDokiInfo);

#define jce_GetUsrUnderDokiInfoReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDokiid,b.strDokiid);jce_copy_struct(a.strVuid,b.strVuid);

#define jce_GetUsrUnderDokiInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.lAttentTime,b.lAttentTime);jce_copy_struct(a.lRank,b.lRank);



#endif
