// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_read.jce'
// **********************************************************************

#ifndef __QQVIDEO_READ_H_
#define __QQVIDEO_READ_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"


namespace jce
{
    struct ChapterInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChapterInfo";
        }
        static string MD5()
        {
            return "14bdc7dcdd0ea20af83013ef5c841a8d";
        }
        ChapterInfo()
        :sequence(0),title(""),chapterId(""),payState(0),pictureNumber(0),readState(0)
        {
        }
        void resetDefautlt()
        {
            sequence = 0;
            title = "";
            chapterId = "";
            payState = 0;
            pictureNumber = 0;
            readState = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sequence, 0);
            _os.write(title, 1);
            _os.write(chapterId, 2);
            _os.write(payState, 3);
            _os.write(pictureNumber, 4);
            _os.write(readState, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sequence, 0, false);
            _is.read(title, 1, false);
            _is.read(chapterId, 2, false);
            _is.read(payState, 3, false);
            _is.read(pictureNumber, 4, false);
            _is.read(readState, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sequence,"sequence");
            _ds.display(title,"title");
            _ds.display(chapterId,"chapterId");
            _ds.display(payState,"payState");
            _ds.display(pictureNumber,"pictureNumber");
            _ds.display(readState,"readState");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sequence, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(chapterId, true);
            _ds.displaySimple(payState, true);
            _ds.displaySimple(pictureNumber, true);
            _ds.displaySimple(readState, false);
            return _os;
        }
    public:
        taf::Int32 sequence;
        std::string title;
        std::string chapterId;
        taf::Int32 payState;
        taf::Int32 pictureNumber;
        taf::Int32 readState;
    };
    inline bool operator==(const ChapterInfo&l, const ChapterInfo&r)
    {
        return l.sequence == r.sequence && l.title == r.title && l.chapterId == r.chapterId && l.payState == r.payState && l.pictureNumber == r.pictureNumber && l.readState == r.readState;
    }
    inline bool operator!=(const ChapterInfo&l, const ChapterInfo&r)
    {
        return !(l == r);
    }

    struct BookChapterReadInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.BookChapterReadInfo";
        }
        static string MD5()
        {
            return "cb4558a7d1cbd8cbf583df7337cc71f1";
        }
        BookChapterReadInfo()
        :chapterId(""),timeInterval(0)
        {
        }
        void resetDefautlt()
        {
            chapterId = "";
            timeInterval = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(chapterId, 0);
            _os.write(timeInterval, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(chapterId, 0, true);
            _is.read(timeInterval, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(chapterId,"chapterId");
            _ds.display(timeInterval,"timeInterval");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(chapterId, true);
            _ds.displaySimple(timeInterval, false);
            return _os;
        }
    public:
        std::string chapterId;
        taf::Int64 timeInterval;
    };
    inline bool operator==(const BookChapterReadInfo&l, const BookChapterReadInfo&r)
    {
        return l.chapterId == r.chapterId && l.timeInterval == r.timeInterval;
    }
    inline bool operator!=(const BookChapterReadInfo&l, const BookChapterReadInfo&r)
    {
        return !(l == r);
    }

    struct BookHistoryInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.BookHistoryInfo";
        }
        static string MD5()
        {
            return "f4d086c0e8c1c26a244b0dc69dfe1fba";
        }
        BookHistoryInfo()
        :targetId(""),chapterId(""),pageIndex(""),updatetime(0)
        {
        }
        void resetDefautlt()
        {
            targetId = "";
            chapterId = "";
            pageIndex = "";
            updatetime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(targetId, 0);
            _os.write(chapterId, 1);
            _os.write(pageIndex, 2);
            _os.write(chapterReadInfo, 3);
            _os.write(updatetime, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(targetId, 0, true);
            _is.read(chapterId, 1, false);
            _is.read(pageIndex, 2, false);
            _is.read(chapterReadInfo, 3, false);
            _is.read(updatetime, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(targetId,"targetId");
            _ds.display(chapterId,"chapterId");
            _ds.display(pageIndex,"pageIndex");
            _ds.display(chapterReadInfo,"chapterReadInfo");
            _ds.display(updatetime,"updatetime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(targetId, true);
            _ds.displaySimple(chapterId, true);
            _ds.displaySimple(pageIndex, true);
            _ds.displaySimple(chapterReadInfo, true);
            _ds.displaySimple(updatetime, false);
            return _os;
        }
    public:
        std::string targetId;
        std::string chapterId;
        std::string pageIndex;
        vector<jce::BookChapterReadInfo> chapterReadInfo;
        taf::Int64 updatetime;
    };
    inline bool operator==(const BookHistoryInfo&l, const BookHistoryInfo&r)
    {
        return l.targetId == r.targetId && l.chapterId == r.chapterId && l.pageIndex == r.pageIndex && l.chapterReadInfo == r.chapterReadInfo && l.updatetime == r.updatetime;
    }
    inline bool operator!=(const BookHistoryInfo&l, const BookHistoryInfo&r)
    {
        return !(l == r);
    }

    struct YuewenHistoryInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.YuewenHistoryInfo";
        }
        static string MD5()
        {
            return "11c5dc564c73dcc1d96be662751a3cb5";
        }
        YuewenHistoryInfo()
        :yuewenId(""),type(0),chapterId(""),updatetime(0),progress(""),pageOffset("")
        {
        }
        void resetDefautlt()
        {
            yuewenId = "";
            type = 0;
            chapterId = "";
            updatetime = 0;
            progress = "";
            pageOffset = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(yuewenId, 0);
            _os.write(type, 1);
            _os.write(chapterId, 2);
            _os.write(updatetime, 3);
            _os.write(progress, 4);
            _os.write(pageOffset, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(yuewenId, 0, true);
            _is.read(type, 1, false);
            _is.read(chapterId, 2, false);
            _is.read(updatetime, 3, false);
            _is.read(progress, 4, false);
            _is.read(pageOffset, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(yuewenId,"yuewenId");
            _ds.display(type,"type");
            _ds.display(chapterId,"chapterId");
            _ds.display(updatetime,"updatetime");
            _ds.display(progress,"progress");
            _ds.display(pageOffset,"pageOffset");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(yuewenId, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(chapterId, true);
            _ds.displaySimple(updatetime, true);
            _ds.displaySimple(progress, true);
            _ds.displaySimple(pageOffset, false);
            return _os;
        }
    public:
        std::string yuewenId;
        taf::Int32 type;
        std::string chapterId;
        taf::Int64 updatetime;
        std::string progress;
        std::string pageOffset;
    };
    inline bool operator==(const YuewenHistoryInfo&l, const YuewenHistoryInfo&r)
    {
        return l.yuewenId == r.yuewenId && l.type == r.type && l.chapterId == r.chapterId && l.updatetime == r.updatetime && l.progress == r.progress && l.pageOffset == r.pageOffset;
    }
    inline bool operator!=(const YuewenHistoryInfo&l, const YuewenHistoryInfo&r)
    {
        return !(l == r);
    }

    struct ComicHistoryInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ComicHistoryInfo";
        }
        static string MD5()
        {
            return "4271f2f4595abf5181d2ef84389594fe";
        }
        ComicHistoryInfo()
        :comicId(""),chapterId(""),pageOffset(""),updatetime(0)
        {
        }
        void resetDefautlt()
        {
            comicId = "";
            chapterId = "";
            pageOffset = "";
            updatetime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(comicId, 0);
            _os.write(chapterId, 1);
            _os.write(pageOffset, 2);
            _os.write(updatetime, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(comicId, 0, true);
            _is.read(chapterId, 1, false);
            _is.read(pageOffset, 2, false);
            _is.read(updatetime, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(comicId,"comicId");
            _ds.display(chapterId,"chapterId");
            _ds.display(pageOffset,"pageOffset");
            _ds.display(updatetime,"updatetime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(comicId, true);
            _ds.displaySimple(chapterId, true);
            _ds.displaySimple(pageOffset, true);
            _ds.displaySimple(updatetime, false);
            return _os;
        }
    public:
        std::string comicId;
        std::string chapterId;
        std::string pageOffset;
        taf::Int64 updatetime;
    };
    inline bool operator==(const ComicHistoryInfo&l, const ComicHistoryInfo&r)
    {
        return l.comicId == r.comicId && l.chapterId == r.chapterId && l.pageOffset == r.pageOffset && l.updatetime == r.updatetime;
    }
    inline bool operator!=(const ComicHistoryInfo&l, const ComicHistoryInfo&r)
    {
        return !(l == r);
    }

    struct YuewenUiData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.YuewenUiData";
        }
        static string MD5()
        {
            return "743e74c7b9ed28fbb18042247cc024d9";
        }
        YuewenUiData()
        :yuewenId(""),status(0)
        {
        }
        void resetDefautlt()
        {
            yuewenId = "";
            status = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(yuewenId, 0);
            _os.write(poster, 1);
            _os.write(status, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(yuewenId, 0, false);
            _is.read(poster, 1, false);
            _is.read(status, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(yuewenId,"yuewenId");
            _ds.display(poster,"poster");
            _ds.display(status,"status");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(yuewenId, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(status, false);
            return _os;
        }
    public:
        std::string yuewenId;
        jce::Poster poster;
        taf::Int32 status;
    };
    inline bool operator==(const YuewenUiData&l, const YuewenUiData&r)
    {
        return l.yuewenId == r.yuewenId && l.poster == r.poster && l.status == r.status;
    }
    inline bool operator!=(const YuewenUiData&l, const YuewenUiData&r)
    {
        return !(l == r);
    }

    struct ComicUiData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ComicUiData";
        }
        static string MD5()
        {
            return "a23776b14e3b32c31116f04ed6618afe";
        }
        ComicUiData()
        :comicId(""),status(0),bookSrc(0)
        {
        }
        void resetDefautlt()
        {
            comicId = "";
            status = 0;
            bookSrc = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(comicId, 0);
            _os.write(poster, 1);
            _os.write(status, 2);
            _os.write(bookSrc, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(comicId, 0, false);
            _is.read(poster, 1, false);
            _is.read(status, 2, false);
            _is.read(bookSrc, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(comicId,"comicId");
            _ds.display(poster,"poster");
            _ds.display(status,"status");
            _ds.display(bookSrc,"bookSrc");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(comicId, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(bookSrc, false);
            return _os;
        }
    public:
        std::string comicId;
        jce::Poster poster;
        taf::Int32 status;
        taf::Int32 bookSrc;
    };
    inline bool operator==(const ComicUiData&l, const ComicUiData&r)
    {
        return l.comicId == r.comicId && l.poster == r.poster && l.status == r.status && l.bookSrc == r.bookSrc;
    }
    inline bool operator!=(const ComicUiData&l, const ComicUiData&r)
    {
        return !(l == r);
    }

    struct YuewenDeleteData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.YuewenDeleteData";
        }
        static string MD5()
        {
            return "cb4558a7d1cbd8cbf583df7337cc71f1";
        }
        YuewenDeleteData()
        :yuewenId(""),deletetime(0)
        {
        }
        void resetDefautlt()
        {
            yuewenId = "";
            deletetime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(yuewenId, 0);
            _os.write(deletetime, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(yuewenId, 0, false);
            _is.read(deletetime, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(yuewenId,"yuewenId");
            _ds.display(deletetime,"deletetime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(yuewenId, true);
            _ds.displaySimple(deletetime, false);
            return _os;
        }
    public:
        std::string yuewenId;
        taf::Int64 deletetime;
    };
    inline bool operator==(const YuewenDeleteData&l, const YuewenDeleteData&r)
    {
        return l.yuewenId == r.yuewenId && l.deletetime == r.deletetime;
    }
    inline bool operator!=(const YuewenDeleteData&l, const YuewenDeleteData&r)
    {
        return !(l == r);
    }

    struct ComicDeleteData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ComicDeleteData";
        }
        static string MD5()
        {
            return "cb4558a7d1cbd8cbf583df7337cc71f1";
        }
        ComicDeleteData()
        :comicId(""),deletetime(0)
        {
        }
        void resetDefautlt()
        {
            comicId = "";
            deletetime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(comicId, 0);
            _os.write(deletetime, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(comicId, 0, false);
            _is.read(deletetime, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(comicId,"comicId");
            _ds.display(deletetime,"deletetime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(comicId, true);
            _ds.displaySimple(deletetime, false);
            return _os;
        }
    public:
        std::string comicId;
        taf::Int64 deletetime;
    };
    inline bool operator==(const ComicDeleteData&l, const ComicDeleteData&r)
    {
        return l.comicId == r.comicId && l.deletetime == r.deletetime;
    }
    inline bool operator!=(const ComicDeleteData&l, const ComicDeleteData&r)
    {
        return !(l == r);
    }

    struct PictureInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PictureInfo";
        }
        static string MD5()
        {
            return "6b672b9f8a17c21f4ef821a430f7db7a";
        }
        PictureInfo()
        :pictureId(""),urlString(""),width(0),height(0),aspectRatio(0)
        {
        }
        void resetDefautlt()
        {
            pictureId = "";
            urlString = "";
            width = 0;
            height = 0;
            aspectRatio = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pictureId, 0);
            _os.write(urlString, 1);
            _os.write(width, 2);
            _os.write(height, 3);
            _os.write(aspectRatio, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pictureId, 0, true);
            _is.read(urlString, 1, true);
            _is.read(width, 2, false);
            _is.read(height, 3, false);
            _is.read(aspectRatio, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pictureId,"pictureId");
            _ds.display(urlString,"urlString");
            _ds.display(width,"width");
            _ds.display(height,"height");
            _ds.display(aspectRatio,"aspectRatio");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pictureId, true);
            _ds.displaySimple(urlString, true);
            _ds.displaySimple(width, true);
            _ds.displaySimple(height, true);
            _ds.displaySimple(aspectRatio, false);
            return _os;
        }
    public:
        std::string pictureId;
        std::string urlString;
        taf::Double width;
        taf::Double height;
        taf::Double aspectRatio;
    };
    inline bool operator==(const PictureInfo&l, const PictureInfo&r)
    {
        return l.pictureId == r.pictureId && l.urlString == r.urlString && l.width == r.width && l.height == r.height && l.aspectRatio == r.aspectRatio;
    }
    inline bool operator!=(const PictureInfo&l, const PictureInfo&r)
    {
        return !(l == r);
    }

    struct BookFollowRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.BookFollowRequest";
        }
        static string MD5()
        {
            return "bc856d89c2d562cfd8cd8989152629a7";
        }
        BookFollowRequest()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(targetIdList, 0);
            _os.write(type, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(targetIdList, 0, true);
            _is.read(type, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(targetIdList,"targetIdList");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(targetIdList, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        vector<std::string> targetIdList;
        taf::Int32 type;
    };
    inline bool operator==(const BookFollowRequest&l, const BookFollowRequest&r)
    {
        return l.targetIdList == r.targetIdList && l.type == r.type;
    }
    inline bool operator!=(const BookFollowRequest&l, const BookFollowRequest&r)
    {
        return !(l == r);
    }

    struct BookFollowResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.BookFollowResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        BookFollowResponse()
        :errorCode(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
    };
    inline bool operator==(const BookFollowResponse&l, const BookFollowResponse&r)
    {
        return l.errorCode == r.errorCode;
    }
    inline bool operator!=(const BookFollowResponse&l, const BookFollowResponse&r)
    {
        return !(l == r);
    }

    struct GetBookFollowStatusRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBookFollowStatusRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetBookFollowStatusRequest()
        :targetId("")
        {
        }
        void resetDefautlt()
        {
            targetId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(targetId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(targetId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(targetId,"targetId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(targetId, false);
            return _os;
        }
    public:
        std::string targetId;
    };
    inline bool operator==(const GetBookFollowStatusRequest&l, const GetBookFollowStatusRequest&r)
    {
        return l.targetId == r.targetId;
    }
    inline bool operator!=(const GetBookFollowStatusRequest&l, const GetBookFollowStatusRequest&r)
    {
        return !(l == r);
    }

    struct GetBookFollowStatusResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBookFollowStatusResponse";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        GetBookFollowStatusResponse()
        :errorCode(0),status(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            status = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(status, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(status, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(status,"status");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(status, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        taf::Int32 status;
    };
    inline bool operator==(const GetBookFollowStatusResponse&l, const GetBookFollowStatusResponse&r)
    {
        return l.errorCode == r.errorCode && l.status == r.status;
    }
    inline bool operator!=(const GetBookFollowStatusResponse&l, const GetBookFollowStatusResponse&r)
    {
        return !(l == r);
    }

    struct GetBookHistoryRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBookHistoryRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetBookHistoryRequest()
        :targetId("")
        {
        }
        void resetDefautlt()
        {
            targetId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(targetId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(targetId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(targetId,"targetId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(targetId, false);
            return _os;
        }
    public:
        std::string targetId;
    };
    inline bool operator==(const GetBookHistoryRequest&l, const GetBookHistoryRequest&r)
    {
        return l.targetId == r.targetId;
    }
    inline bool operator!=(const GetBookHistoryRequest&l, const GetBookHistoryRequest&r)
    {
        return !(l == r);
    }

    struct GetBookHistoryResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBookHistoryResponse";
        }
        static string MD5()
        {
            return "782eb58eee6691c96f85c3cc83299328";
        }
        GetBookHistoryResponse()
        :errorCode(0),chapterId(""),pageNumber(""),title("")
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            chapterId = "";
            pageNumber = "";
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(chapterId, 1);
            _os.write(pageNumber, 2);
            _os.write(title, 3);
            _os.write(chapterList, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(chapterId, 1, false);
            _is.read(pageNumber, 2, false);
            _is.read(title, 3, false);
            _is.read(chapterList, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(chapterId,"chapterId");
            _ds.display(pageNumber,"pageNumber");
            _ds.display(title,"title");
            _ds.display(chapterList,"chapterList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(chapterId, true);
            _ds.displaySimple(pageNumber, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(chapterList, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        std::string chapterId;
        std::string pageNumber;
        std::string title;
        vector<jce::ChapterInfo> chapterList;
    };
    inline bool operator==(const GetBookHistoryResponse&l, const GetBookHistoryResponse&r)
    {
        return l.errorCode == r.errorCode && l.chapterId == r.chapterId && l.pageNumber == r.pageNumber && l.title == r.title && l.chapterList == r.chapterList;
    }
    inline bool operator!=(const GetBookHistoryResponse&l, const GetBookHistoryResponse&r)
    {
        return !(l == r);
    }

    struct UploadBookHistoryRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UploadBookHistoryRequest";
        }
        static string MD5()
        {
            return "3a7782d2cc1986e5d78501dab7df2a95";
        }
        UploadBookHistoryRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(historyInfoList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(historyInfoList, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(historyInfoList,"historyInfoList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(historyInfoList, false);
            return _os;
        }
    public:
        vector<jce::BookHistoryInfo> historyInfoList;
    };
    inline bool operator==(const UploadBookHistoryRequest&l, const UploadBookHistoryRequest&r)
    {
        return l.historyInfoList == r.historyInfoList;
    }
    inline bool operator!=(const UploadBookHistoryRequest&l, const UploadBookHistoryRequest&r)
    {
        return !(l == r);
    }

    struct UploadBookHistoryResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UploadBookHistoryResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        UploadBookHistoryResponse()
        :errorCode(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
    };
    inline bool operator==(const UploadBookHistoryResponse&l, const UploadBookHistoryResponse&r)
    {
        return l.errorCode == r.errorCode;
    }
    inline bool operator!=(const UploadBookHistoryResponse&l, const UploadBookHistoryResponse&r)
    {
        return !(l == r);
    }

    struct GetChapterListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetChapterListRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        GetChapterListRequest()
        :targetId(""),chapterId("")
        {
        }
        void resetDefautlt()
        {
            targetId = "";
            chapterId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(targetId, 0);
            _os.write(chapterId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(targetId, 0, true);
            _is.read(chapterId, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(targetId,"targetId");
            _ds.display(chapterId,"chapterId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(targetId, true);
            _ds.displaySimple(chapterId, false);
            return _os;
        }
    public:
        std::string targetId;
        std::string chapterId;
    };
    inline bool operator==(const GetChapterListRequest&l, const GetChapterListRequest&r)
    {
        return l.targetId == r.targetId && l.chapterId == r.chapterId;
    }
    inline bool operator!=(const GetChapterListRequest&l, const GetChapterListRequest&r)
    {
        return !(l == r);
    }

    struct GetChapterListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetChapterListResponse";
        }
        static string MD5()
        {
            return "95f2a6f7fe29e080c7c9f9c8d69fef66";
        }
        GetChapterListResponse()
        :errorCode(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(chapterList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(chapterList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(chapterList,"chapterList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(chapterList, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        vector<jce::ChapterInfo> chapterList;
    };
    inline bool operator==(const GetChapterListResponse&l, const GetChapterListResponse&r)
    {
        return l.errorCode == r.errorCode && l.chapterList == r.chapterList;
    }
    inline bool operator!=(const GetChapterListResponse&l, const GetChapterListResponse&r)
    {
        return !(l == r);
    }

    struct GetBookInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBookInfoRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetBookInfoRequest()
        :targetId("")
        {
        }
        void resetDefautlt()
        {
            targetId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(targetId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(targetId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(targetId,"targetId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(targetId, false);
            return _os;
        }
    public:
        std::string targetId;
    };
    inline bool operator==(const GetBookInfoRequest&l, const GetBookInfoRequest&r)
    {
        return l.targetId == r.targetId;
    }
    inline bool operator!=(const GetBookInfoRequest&l, const GetBookInfoRequest&r)
    {
        return !(l == r);
    }

    struct GetBookInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBookInfoResponse";
        }
        static string MD5()
        {
            return "44f3af73797f24f99f3955f0b7393459";
        }
        GetBookInfoResponse()
        :errorCode(0),bookStatus(0),bookName(""),bookSrc(0),selectedReadMode(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            bookStatus = 0;
            bookName = "";
            bookSrc = 0;
            selectedReadMode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(bookStatus, 1);
            _os.write(bookName, 2);
            _os.write(bookSrc, 3);
            _os.write(selectedReadMode, 4);
            _os.write(providedReadModes, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(bookStatus, 1, true);
            _is.read(bookName, 2, true);
            _is.read(bookSrc, 3, false);
            _is.read(selectedReadMode, 4, false);
            _is.read(providedReadModes, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(bookStatus,"bookStatus");
            _ds.display(bookName,"bookName");
            _ds.display(bookSrc,"bookSrc");
            _ds.display(selectedReadMode,"selectedReadMode");
            _ds.display(providedReadModes,"providedReadModes");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(bookStatus, true);
            _ds.displaySimple(bookName, true);
            _ds.displaySimple(bookSrc, true);
            _ds.displaySimple(selectedReadMode, true);
            _ds.displaySimple(providedReadModes, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        taf::Int32 bookStatus;
        std::string bookName;
        taf::Int32 bookSrc;
        taf::Int32 selectedReadMode;
        vector<taf::Int32> providedReadModes;
    };
    inline bool operator==(const GetBookInfoResponse&l, const GetBookInfoResponse&r)
    {
        return l.errorCode == r.errorCode && l.bookStatus == r.bookStatus && l.bookName == r.bookName && l.bookSrc == r.bookSrc && l.selectedReadMode == r.selectedReadMode && l.providedReadModes == r.providedReadModes;
    }
    inline bool operator!=(const GetBookInfoResponse&l, const GetBookInfoResponse&r)
    {
        return !(l == r);
    }

    struct GetChapterChargeStatusRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetChapterChargeStatusRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        GetChapterChargeStatusRequest()
        :targetId(""),chapterId("")
        {
        }
        void resetDefautlt()
        {
            targetId = "";
            chapterId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(targetId, 0);
            _os.write(chapterId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(targetId, 0, true);
            _is.read(chapterId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(targetId,"targetId");
            _ds.display(chapterId,"chapterId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(targetId, true);
            _ds.displaySimple(chapterId, false);
            return _os;
        }
    public:
        std::string targetId;
        std::string chapterId;
    };
    inline bool operator==(const GetChapterChargeStatusRequest&l, const GetChapterChargeStatusRequest&r)
    {
        return l.targetId == r.targetId && l.chapterId == r.chapterId;
    }
    inline bool operator!=(const GetChapterChargeStatusRequest&l, const GetChapterChargeStatusRequest&r)
    {
        return !(l == r);
    }

    struct GetChapterChargeStatusResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetChapterChargeStatusResponse";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        GetChapterChargeStatusResponse()
        :errorCode(0),status(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            status = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(status, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(status, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(status,"status");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(status, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        taf::Int32 status;
    };
    inline bool operator==(const GetChapterChargeStatusResponse&l, const GetChapterChargeStatusResponse&r)
    {
        return l.errorCode == r.errorCode && l.status == r.status;
    }
    inline bool operator!=(const GetChapterChargeStatusResponse&l, const GetChapterChargeStatusResponse&r)
    {
        return !(l == r);
    }

    struct GetBookCouponRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBookCouponRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetBookCouponRequest()
        :bookId("")
        {
        }
        void resetDefautlt()
        {
            bookId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bookId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bookId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bookId,"bookId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bookId, false);
            return _os;
        }
    public:
        std::string bookId;
    };
    inline bool operator==(const GetBookCouponRequest&l, const GetBookCouponRequest&r)
    {
        return l.bookId == r.bookId;
    }
    inline bool operator!=(const GetBookCouponRequest&l, const GetBookCouponRequest&r)
    {
        return !(l == r);
    }

    struct GetBookCouponResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBookCouponResponse";
        }
        static string MD5()
        {
            return "309782aed2f570cb74841a7d410ade2f";
        }
        GetBookCouponResponse()
        :errorCode(0),count(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            count = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(count, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(count, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(count,"count");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(count, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        taf::Int64 count;
    };
    inline bool operator==(const GetBookCouponResponse&l, const GetBookCouponResponse&r)
    {
        return l.errorCode == r.errorCode && l.count == r.count;
    }
    inline bool operator!=(const GetBookCouponResponse&l, const GetBookCouponResponse&r)
    {
        return !(l == r);
    }

    struct UploadYuewenHistoryRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UploadYuewenHistoryRequest";
        }
        static string MD5()
        {
            return "c9b0df27d9b34acd72129612aafd0501";
        }
        UploadYuewenHistoryRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(yuewenBookInfos, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(yuewenBookInfos, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(yuewenBookInfos,"yuewenBookInfos");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(yuewenBookInfos, false);
            return _os;
        }
    public:
        vector<jce::YuewenHistoryInfo> yuewenBookInfos;
    };
    inline bool operator==(const UploadYuewenHistoryRequest&l, const UploadYuewenHistoryRequest&r)
    {
        return l.yuewenBookInfos == r.yuewenBookInfos;
    }
    inline bool operator!=(const UploadYuewenHistoryRequest&l, const UploadYuewenHistoryRequest&r)
    {
        return !(l == r);
    }

    struct UploadYuewenHistoryResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UploadYuewenHistoryResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        UploadYuewenHistoryResponse()
        :errorCode(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
    };
    inline bool operator==(const UploadYuewenHistoryResponse&l, const UploadYuewenHistoryResponse&r)
    {
        return l.errorCode == r.errorCode;
    }
    inline bool operator!=(const UploadYuewenHistoryResponse&l, const UploadYuewenHistoryResponse&r)
    {
        return !(l == r);
    }

    struct DeleteYuewenHistoryRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DeleteYuewenHistoryRequest";
        }
        static string MD5()
        {
            return "d303f565e8c09abb6edb0456d7b52e22";
        }
        DeleteYuewenHistoryRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(yuewenDeleteDatas, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(yuewenDeleteDatas, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(yuewenDeleteDatas,"yuewenDeleteDatas");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(yuewenDeleteDatas, false);
            return _os;
        }
    public:
        vector<jce::YuewenDeleteData> yuewenDeleteDatas;
    };
    inline bool operator==(const DeleteYuewenHistoryRequest&l, const DeleteYuewenHistoryRequest&r)
    {
        return l.yuewenDeleteDatas == r.yuewenDeleteDatas;
    }
    inline bool operator!=(const DeleteYuewenHistoryRequest&l, const DeleteYuewenHistoryRequest&r)
    {
        return !(l == r);
    }

    struct DeleteYuewenHistoryResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DeleteYuewenHistoryResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        DeleteYuewenHistoryResponse()
        :errorCode(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
    };
    inline bool operator==(const DeleteYuewenHistoryResponse&l, const DeleteYuewenHistoryResponse&r)
    {
        return l.errorCode == r.errorCode;
    }
    inline bool operator!=(const DeleteYuewenHistoryResponse&l, const DeleteYuewenHistoryResponse&r)
    {
        return !(l == r);
    }

    struct DeleteComicHistoryRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DeleteComicHistoryRequest";
        }
        static string MD5()
        {
            return "ec3b6d2ab8b80d29fc9acfadf22a6979";
        }
        DeleteComicHistoryRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(comicDeleteDatas, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(comicDeleteDatas, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(comicDeleteDatas,"comicDeleteDatas");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(comicDeleteDatas, false);
            return _os;
        }
    public:
        vector<jce::ComicDeleteData> comicDeleteDatas;
    };
    inline bool operator==(const DeleteComicHistoryRequest&l, const DeleteComicHistoryRequest&r)
    {
        return l.comicDeleteDatas == r.comicDeleteDatas;
    }
    inline bool operator!=(const DeleteComicHistoryRequest&l, const DeleteComicHistoryRequest&r)
    {
        return !(l == r);
    }

    struct DeleteComicHistoryResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DeleteComicHistoryResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        DeleteComicHistoryResponse()
        :errorCode(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
    };
    inline bool operator==(const DeleteComicHistoryResponse&l, const DeleteComicHistoryResponse&r)
    {
        return l.errorCode == r.errorCode;
    }
    inline bool operator!=(const DeleteComicHistoryResponse&l, const DeleteComicHistoryResponse&r)
    {
        return !(l == r);
    }

    struct GetYuewenHistoryListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetYuewenHistoryListRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetYuewenHistoryListRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const GetYuewenHistoryListRequest&l, const GetYuewenHistoryListRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetYuewenHistoryListRequest&l, const GetYuewenHistoryListRequest&r)
    {
        return !(l == r);
    }

    struct GetYuewenHistoryListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetYuewenHistoryListResponse";
        }
        static string MD5()
        {
            return "bdb16210b85107fac7dd1cdd84176a05";
        }
        GetYuewenHistoryListResponse()
        :errorCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(yuewenHistoryInfos, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(yuewenHistoryInfos, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(yuewenHistoryInfos,"yuewenHistoryInfos");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(yuewenHistoryInfos, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        vector<jce::YuewenHistoryInfo> yuewenHistoryInfos;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const GetYuewenHistoryListResponse&l, const GetYuewenHistoryListResponse&r)
    {
        return l.errorCode == r.errorCode && l.yuewenHistoryInfos == r.yuewenHistoryInfos && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const GetYuewenHistoryListResponse&l, const GetYuewenHistoryListResponse&r)
    {
        return !(l == r);
    }

    struct GetComicHistoryListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetComicHistoryListRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetComicHistoryListRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const GetComicHistoryListRequest&l, const GetComicHistoryListRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetComicHistoryListRequest&l, const GetComicHistoryListRequest&r)
    {
        return !(l == r);
    }

    struct GetComicHistoryListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetComicHistoryListResponse";
        }
        static string MD5()
        {
            return "c2489eb8171deab7c2ac571d81ca0310";
        }
        GetComicHistoryListResponse()
        :errorCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(comicHistoryInfos, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(comicHistoryInfos, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(comicHistoryInfos,"comicHistoryInfos");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(comicHistoryInfos, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        vector<jce::ComicHistoryInfo> comicHistoryInfos;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const GetComicHistoryListResponse&l, const GetComicHistoryListResponse&r)
    {
        return l.errorCode == r.errorCode && l.comicHistoryInfos == r.comicHistoryInfos && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const GetComicHistoryListResponse&l, const GetComicHistoryListResponse&r)
    {
        return !(l == r);
    }

    struct GetBooksUiDataRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBooksUiDataRequest";
        }
        static string MD5()
        {
            return "e4aee28a8ba53f90e1da446b3f4a73ed";
        }
        GetBooksUiDataRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(yuewenHistoryInfos, 0);
            _os.write(comicHistoryInfos, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(yuewenHistoryInfos, 0, false);
            _is.read(comicHistoryInfos, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(yuewenHistoryInfos,"yuewenHistoryInfos");
            _ds.display(comicHistoryInfos,"comicHistoryInfos");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(yuewenHistoryInfos, true);
            _ds.displaySimple(comicHistoryInfos, false);
            return _os;
        }
    public:
        vector<jce::YuewenHistoryInfo> yuewenHistoryInfos;
        vector<jce::ComicHistoryInfo> comicHistoryInfos;
    };
    inline bool operator==(const GetBooksUiDataRequest&l, const GetBooksUiDataRequest&r)
    {
        return l.yuewenHistoryInfos == r.yuewenHistoryInfos && l.comicHistoryInfos == r.comicHistoryInfos;
    }
    inline bool operator!=(const GetBooksUiDataRequest&l, const GetBooksUiDataRequest&r)
    {
        return !(l == r);
    }

    struct GetBooksUiDataResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBooksUiDataResponse";
        }
        static string MD5()
        {
            return "dfdba71fd50d3b3fbad779e9c9bcd8f1";
        }
        GetBooksUiDataResponse()
        :errorCode(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(yuewenUiData, 1);
            _os.write(comicUiData, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(yuewenUiData, 1, false);
            _is.read(comicUiData, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(yuewenUiData,"yuewenUiData");
            _ds.display(comicUiData,"comicUiData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(yuewenUiData, true);
            _ds.displaySimple(comicUiData, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        vector<jce::YuewenUiData> yuewenUiData;
        vector<jce::ComicUiData> comicUiData;
    };
    inline bool operator==(const GetBooksUiDataResponse&l, const GetBooksUiDataResponse&r)
    {
        return l.errorCode == r.errorCode && l.yuewenUiData == r.yuewenUiData && l.comicUiData == r.comicUiData;
    }
    inline bool operator!=(const GetBooksUiDataResponse&l, const GetBooksUiDataResponse&r)
    {
        return !(l == r);
    }

    struct GetBooksRecommendRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBooksRecommendRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        GetBooksRecommendRequest()
        :placeholder(0)
        {
        }
        void resetDefautlt()
        {
            placeholder = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(placeholder, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(placeholder, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(placeholder,"placeholder");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(placeholder, false);
            return _os;
        }
    public:
        taf::Int32 placeholder;
    };
    inline bool operator==(const GetBooksRecommendRequest&l, const GetBooksRecommendRequest&r)
    {
        return l.placeholder == r.placeholder;
    }
    inline bool operator!=(const GetBooksRecommendRequest&l, const GetBooksRecommendRequest&r)
    {
        return !(l == r);
    }

    struct GetBooksRecommendResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBooksRecommendResponse";
        }
        static string MD5()
        {
            return "5323fb9894e8f574db0792b406fd5b4e";
        }
        GetBooksRecommendResponse()
        :errorCode(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(multiPosterList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(multiPosterList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(multiPosterList,"multiPosterList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(multiPosterList, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        vector<jce::MultiPoster> multiPosterList;
    };
    inline bool operator==(const GetBooksRecommendResponse&l, const GetBooksRecommendResponse&r)
    {
        return l.errorCode == r.errorCode && l.multiPosterList == r.multiPosterList;
    }
    inline bool operator!=(const GetBooksRecommendResponse&l, const GetBooksRecommendResponse&r)
    {
        return !(l == r);
    }

    struct UploadUserReadModeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UploadUserReadModeRequest";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        UploadUserReadModeRequest()
        :selectedReadMode(0),targetId("")
        {
        }
        void resetDefautlt()
        {
            selectedReadMode = 0;
            targetId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(selectedReadMode, 0);
            _os.write(targetId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(selectedReadMode, 0, true);
            _is.read(targetId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(selectedReadMode,"selectedReadMode");
            _ds.display(targetId,"targetId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(selectedReadMode, true);
            _ds.displaySimple(targetId, false);
            return _os;
        }
    public:
        taf::Int32 selectedReadMode;
        std::string targetId;
    };
    inline bool operator==(const UploadUserReadModeRequest&l, const UploadUserReadModeRequest&r)
    {
        return l.selectedReadMode == r.selectedReadMode && l.targetId == r.targetId;
    }
    inline bool operator!=(const UploadUserReadModeRequest&l, const UploadUserReadModeRequest&r)
    {
        return !(l == r);
    }

    struct UploadUserReadModeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UploadUserReadModeResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        UploadUserReadModeResponse()
        :errorCode(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
    };
    inline bool operator==(const UploadUserReadModeResponse&l, const UploadUserReadModeResponse&r)
    {
        return l.errorCode == r.errorCode;
    }
    inline bool operator!=(const UploadUserReadModeResponse&l, const UploadUserReadModeResponse&r)
    {
        return !(l == r);
    }

    struct GetPictureListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetPictureListRequest";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        GetPictureListRequest()
        :targetId(""),chapterId(""),cKey(""),ckeyConfig("")
        {
        }
        void resetDefautlt()
        {
            targetId = "";
            chapterId = "";
            cKey = "";
            ckeyConfig = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(targetId, 0);
            _os.write(chapterId, 1);
            _os.write(cKey, 2);
            _os.write(ckeyConfig, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(targetId, 0, true);
            _is.read(chapterId, 1, true);
            _is.read(cKey, 2, false);
            _is.read(ckeyConfig, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(targetId,"targetId");
            _ds.display(chapterId,"chapterId");
            _ds.display(cKey,"cKey");
            _ds.display(ckeyConfig,"ckeyConfig");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(targetId, true);
            _ds.displaySimple(chapterId, true);
            _ds.displaySimple(cKey, true);
            _ds.displaySimple(ckeyConfig, false);
            return _os;
        }
    public:
        std::string targetId;
        std::string chapterId;
        std::string cKey;
        std::string ckeyConfig;
    };
    inline bool operator==(const GetPictureListRequest&l, const GetPictureListRequest&r)
    {
        return l.targetId == r.targetId && l.chapterId == r.chapterId && l.cKey == r.cKey && l.ckeyConfig == r.ckeyConfig;
    }
    inline bool operator!=(const GetPictureListRequest&l, const GetPictureListRequest&r)
    {
        return !(l == r);
    }

    struct GetPictureListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetPictureListResponse";
        }
        static string MD5()
        {
            return "151949358ce9defbe74ade18d633730b";
        }
        GetPictureListResponse()
        :errorCode(0),keyStr(""),keyStrBackup("")
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            keyStr = "";
            keyStrBackup = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(keyStr, 1);
            _os.write(keyStrBackup, 2);
            _os.write(pictureList, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(keyStr, 1, false);
            _is.read(keyStrBackup, 2, false);
            _is.read(pictureList, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(keyStr,"keyStr");
            _ds.display(keyStrBackup,"keyStrBackup");
            _ds.display(pictureList,"pictureList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(keyStr, true);
            _ds.displaySimple(keyStrBackup, true);
            _ds.displaySimple(pictureList, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        std::string keyStr;
        std::string keyStrBackup;
        vector<jce::PictureInfo> pictureList;
    };
    inline bool operator==(const GetPictureListResponse&l, const GetPictureListResponse&r)
    {
        return l.errorCode == r.errorCode && l.keyStr == r.keyStr && l.keyStrBackup == r.keyStrBackup && l.pictureList == r.pictureList;
    }
    inline bool operator!=(const GetPictureListResponse&l, const GetPictureListResponse&r)
    {
        return !(l == r);
    }


}

#define jce_ChapterInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sequence,b.sequence);jce_copy_struct(a.title,b.title);jce_copy_struct(a.chapterId,b.chapterId);jce_copy_struct(a.payState,b.payState);jce_copy_struct(a.pictureNumber,b.pictureNumber);jce_copy_struct(a.readState,b.readState);

#define jce_BookChapterReadInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.chapterId,b.chapterId);jce_copy_struct(a.timeInterval,b.timeInterval);

#define jce_BookHistoryInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.targetId,b.targetId);jce_copy_struct(a.chapterId,b.chapterId);jce_copy_struct(a.pageIndex,b.pageIndex);jce_copy_struct(a.chapterReadInfo,b.chapterReadInfo);jce_copy_struct(a.updatetime,b.updatetime);

#define jce_YuewenHistoryInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.yuewenId,b.yuewenId);jce_copy_struct(a.type,b.type);jce_copy_struct(a.chapterId,b.chapterId);jce_copy_struct(a.updatetime,b.updatetime);jce_copy_struct(a.progress,b.progress);jce_copy_struct(a.pageOffset,b.pageOffset);

#define jce_ComicHistoryInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.comicId,b.comicId);jce_copy_struct(a.chapterId,b.chapterId);jce_copy_struct(a.pageOffset,b.pageOffset);jce_copy_struct(a.updatetime,b.updatetime);

#define jce_YuewenUiData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.yuewenId,b.yuewenId);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.status,b.status);

#define jce_ComicUiData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.comicId,b.comicId);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.status,b.status);jce_copy_struct(a.bookSrc,b.bookSrc);

#define jce_YuewenDeleteData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.yuewenId,b.yuewenId);jce_copy_struct(a.deletetime,b.deletetime);

#define jce_ComicDeleteData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.comicId,b.comicId);jce_copy_struct(a.deletetime,b.deletetime);

#define jce_PictureInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pictureId,b.pictureId);jce_copy_struct(a.urlString,b.urlString);jce_copy_struct(a.width,b.width);jce_copy_struct(a.height,b.height);jce_copy_struct(a.aspectRatio,b.aspectRatio);

#define jce_BookFollowRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.targetIdList,b.targetIdList);jce_copy_struct(a.type,b.type);

#define jce_BookFollowResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);

#define jce_GetBookFollowStatusRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.targetId,b.targetId);

#define jce_GetBookFollowStatusResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.status,b.status);

#define jce_GetBookHistoryRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.targetId,b.targetId);

#define jce_GetBookHistoryResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.chapterId,b.chapterId);jce_copy_struct(a.pageNumber,b.pageNumber);jce_copy_struct(a.title,b.title);jce_copy_struct(a.chapterList,b.chapterList);

#define jce_UploadBookHistoryRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.historyInfoList,b.historyInfoList);

#define jce_UploadBookHistoryResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);

#define jce_GetChapterListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.targetId,b.targetId);jce_copy_struct(a.chapterId,b.chapterId);

#define jce_GetChapterListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.chapterList,b.chapterList);

#define jce_GetBookInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.targetId,b.targetId);

#define jce_GetBookInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.bookStatus,b.bookStatus);jce_copy_struct(a.bookName,b.bookName);jce_copy_struct(a.bookSrc,b.bookSrc);jce_copy_struct(a.selectedReadMode,b.selectedReadMode);jce_copy_struct(a.providedReadModes,b.providedReadModes);

#define jce_GetChapterChargeStatusRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.targetId,b.targetId);jce_copy_struct(a.chapterId,b.chapterId);

#define jce_GetChapterChargeStatusResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.status,b.status);

#define jce_GetBookCouponRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bookId,b.bookId);

#define jce_GetBookCouponResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.count,b.count);

#define jce_UploadYuewenHistoryRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.yuewenBookInfos,b.yuewenBookInfos);

#define jce_UploadYuewenHistoryResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);

#define jce_DeleteYuewenHistoryRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.yuewenDeleteDatas,b.yuewenDeleteDatas);

#define jce_DeleteYuewenHistoryResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);

#define jce_DeleteComicHistoryRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.comicDeleteDatas,b.comicDeleteDatas);

#define jce_DeleteComicHistoryResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);

#define jce_GetYuewenHistoryListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_GetYuewenHistoryListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.yuewenHistoryInfos,b.yuewenHistoryInfos);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_GetComicHistoryListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_GetComicHistoryListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.comicHistoryInfos,b.comicHistoryInfos);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_GetBooksUiDataRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.yuewenHistoryInfos,b.yuewenHistoryInfos);jce_copy_struct(a.comicHistoryInfos,b.comicHistoryInfos);

#define jce_GetBooksUiDataResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.yuewenUiData,b.yuewenUiData);jce_copy_struct(a.comicUiData,b.comicUiData);

#define jce_GetBooksRecommendRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.placeholder,b.placeholder);

#define jce_GetBooksRecommendResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.multiPosterList,b.multiPosterList);

#define jce_UploadUserReadModeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.selectedReadMode,b.selectedReadMode);jce_copy_struct(a.targetId,b.targetId);

#define jce_UploadUserReadModeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);

#define jce_GetPictureListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.targetId,b.targetId);jce_copy_struct(a.chapterId,b.chapterId);jce_copy_struct(a.cKey,b.cKey);jce_copy_struct(a.ckeyConfig,b.ckeyConfig);

#define jce_GetPictureListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.keyStr,b.keyStr);jce_copy_struct(a.keyStrBackup,b.keyStrBackup);jce_copy_struct(a.pictureList,b.pictureList);



#endif
