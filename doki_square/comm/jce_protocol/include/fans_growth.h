// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `fans_growth.jce'
// **********************************************************************

#ifndef __FANS_GROWTH_H_
#define __FANS_GROWTH_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace jceFansGrowth
{
    enum Command
    {
        CMD_FANS_TASK_QUERY = 61814,
        CMD_FANS_TASK_EXEC = 61815,
        CMD_FANS_RECV_TASK = 61816,
        CMD_FANS_GET_SIGN_PROPERTY = 61817,
        CMD_SIGN_TASK = 61828,
        CMD_FANS_DAY_RANK = 61878,
        CMD_FANS_CLEAR_SIGNINFO = 61922,
        CMD_FANS_TASK_TRANS = 62030,
        CMD_REPORT_FANS_CREATE_TASK = 62437,
        CMD_GET_FOLLOW_LIST_TOP_FANSVAL = 62542,
        CMD_BATCH_QUERY_FANSVAL = 62987,
    };
    inline string etos(const Command & e)
    {
        switch(e)
        {
            case CMD_FANS_TASK_QUERY: return "CMD_FANS_TASK_QUERY";
            case CMD_FANS_TASK_EXEC: return "CMD_FANS_TASK_EXEC";
            case CMD_FANS_RECV_TASK: return "CMD_FANS_RECV_TASK";
            case CMD_FANS_GET_SIGN_PROPERTY: return "CMD_FANS_GET_SIGN_PROPERTY";
            case CMD_SIGN_TASK: return "CMD_SIGN_TASK";
            case CMD_FANS_DAY_RANK: return "CMD_FANS_DAY_RANK";
            case CMD_FANS_CLEAR_SIGNINFO: return "CMD_FANS_CLEAR_SIGNINFO";
            case CMD_FANS_TASK_TRANS: return "CMD_FANS_TASK_TRANS";
            case CMD_REPORT_FANS_CREATE_TASK: return "CMD_REPORT_FANS_CREATE_TASK";
            case CMD_GET_FOLLOW_LIST_TOP_FANSVAL: return "CMD_GET_FOLLOW_LIST_TOP_FANSVAL";
            case CMD_BATCH_QUERY_FANSVAL: return "CMD_BATCH_QUERY_FANSVAL";
            default: return "";
        }
    }
    inline int stoe(const string & s, Command & e)
    {
        if(s == "CMD_FANS_TASK_QUERY")  { e=CMD_FANS_TASK_QUERY; return 0;}
        if(s == "CMD_FANS_TASK_EXEC")  { e=CMD_FANS_TASK_EXEC; return 0;}
        if(s == "CMD_FANS_RECV_TASK")  { e=CMD_FANS_RECV_TASK; return 0;}
        if(s == "CMD_FANS_GET_SIGN_PROPERTY")  { e=CMD_FANS_GET_SIGN_PROPERTY; return 0;}
        if(s == "CMD_SIGN_TASK")  { e=CMD_SIGN_TASK; return 0;}
        if(s == "CMD_FANS_DAY_RANK")  { e=CMD_FANS_DAY_RANK; return 0;}
        if(s == "CMD_FANS_CLEAR_SIGNINFO")  { e=CMD_FANS_CLEAR_SIGNINFO; return 0;}
        if(s == "CMD_FANS_TASK_TRANS")  { e=CMD_FANS_TASK_TRANS; return 0;}
        if(s == "CMD_REPORT_FANS_CREATE_TASK")  { e=CMD_REPORT_FANS_CREATE_TASK; return 0;}
        if(s == "CMD_GET_FOLLOW_LIST_TOP_FANSVAL")  { e=CMD_GET_FOLLOW_LIST_TOP_FANSVAL; return 0;}
        if(s == "CMD_BATCH_QUERY_FANSVAL")  { e=CMD_BATCH_QUERY_FANSVAL; return 0;}

        return -1;
    }

    struct stWelfare : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stWelfare";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        stWelfare()
        :dwGiftId(0)
        {
        }
        void resetDefautlt()
        {
            dwGiftId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwGiftId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwGiftId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwGiftId,"dwGiftId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwGiftId, false);
            return _os;
        }
    public:
        taf::Int32 dwGiftId;
    };
    inline bool operator==(const stWelfare&l, const stWelfare&r)
    {
        return l.dwGiftId == r.dwGiftId;
    }
    inline bool operator!=(const stWelfare&l, const stWelfare&r)
    {
        return !(l == r);
    }

    struct stTaskInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stTaskInfo";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        stTaskInfo()
        :strBillNo("")
        {
        }
        void resetDefautlt()
        {
            strBillNo = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strBillNo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strBillNo, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strBillNo,"strBillNo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strBillNo, false);
            return _os;
        }
    public:
        std::string strBillNo;
    };
    inline bool operator==(const stTaskInfo&l, const stTaskInfo&r)
    {
        return l.strBillNo == r.strBillNo;
    }
    inline bool operator!=(const stTaskInfo&l, const stTaskInfo&r)
    {
        return !(l == r);
    }

    struct stTaskItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stTaskItem";
        }
        static string MD5()
        {
            return "5e43723b5080903893fdccd3ae619bfd";
        }
        stTaskItem()
        :dwTaskId(0),dwOrderNum(0),dwMaxCount(0),dwFinishedCount(0),strTaskName(""),dwCategory(0),dwFansVal(0),dwVCoin(0),strSignExt(""),dwStatus(0),strIcon(""),strExt(""),ddwVersion(0),dwType(0),dwProps(0),can_resign(0)
        {
        }
        void resetDefautlt()
        {
            dwTaskId = 0;
            dwOrderNum = 0;
            dwMaxCount = 0;
            dwFinishedCount = 0;
            strTaskName = "";
            dwCategory = 0;
            dwFansVal = 0;
            dwVCoin = 0;
            strSignExt = "";
            dwStatus = 0;
            strIcon = "";
            strExt = "";
            ddwVersion = 0;
            dwType = 0;
            dwProps = 0;
            can_resign = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwTaskId, 0);
            _os.write(dwOrderNum, 1);
            _os.write(dwMaxCount, 2);
            _os.write(dwFinishedCount, 3);
            _os.write(strTaskName, 4);
            _os.write(dwCategory, 5);
            _os.write(dwFansVal, 6);
            _os.write(dwVCoin, 7);
            _os.write(vecReward, 8);
            _os.write(vecUnRecvTask, 9);
            _os.write(strSignExt, 10);
            _os.write(dwStatus, 11);
            _os.write(strIcon, 12);
            _os.write(strExt, 13);
            _os.write(ddwVersion, 14);
            _os.write(dwType, 15);
            _os.write(dwProps, 16);
            _os.write(can_resign, 17);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwTaskId, 0, true);
            _is.read(dwOrderNum, 1, false);
            _is.read(dwMaxCount, 2, false);
            _is.read(dwFinishedCount, 3, false);
            _is.read(strTaskName, 4, false);
            _is.read(dwCategory, 5, false);
            _is.read(dwFansVal, 6, false);
            _is.read(dwVCoin, 7, false);
            _is.read(vecReward, 8, false);
            _is.read(vecUnRecvTask, 9, false);
            _is.read(strSignExt, 10, false);
            _is.read(dwStatus, 11, false);
            _is.read(strIcon, 12, false);
            _is.read(strExt, 13, false);
            _is.read(ddwVersion, 14, false);
            _is.read(dwType, 15, false);
            _is.read(dwProps, 16, false);
            _is.read(can_resign, 17, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwTaskId,"dwTaskId");
            _ds.display(dwOrderNum,"dwOrderNum");
            _ds.display(dwMaxCount,"dwMaxCount");
            _ds.display(dwFinishedCount,"dwFinishedCount");
            _ds.display(strTaskName,"strTaskName");
            _ds.display(dwCategory,"dwCategory");
            _ds.display(dwFansVal,"dwFansVal");
            _ds.display(dwVCoin,"dwVCoin");
            _ds.display(vecReward,"vecReward");
            _ds.display(vecUnRecvTask,"vecUnRecvTask");
            _ds.display(strSignExt,"strSignExt");
            _ds.display(dwStatus,"dwStatus");
            _ds.display(strIcon,"strIcon");
            _ds.display(strExt,"strExt");
            _ds.display(ddwVersion,"ddwVersion");
            _ds.display(dwType,"dwType");
            _ds.display(dwProps,"dwProps");
            _ds.display(can_resign,"can_resign");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwTaskId, true);
            _ds.displaySimple(dwOrderNum, true);
            _ds.displaySimple(dwMaxCount, true);
            _ds.displaySimple(dwFinishedCount, true);
            _ds.displaySimple(strTaskName, true);
            _ds.displaySimple(dwCategory, true);
            _ds.displaySimple(dwFansVal, true);
            _ds.displaySimple(dwVCoin, true);
            _ds.displaySimple(vecReward, true);
            _ds.displaySimple(vecUnRecvTask, true);
            _ds.displaySimple(strSignExt, true);
            _ds.displaySimple(dwStatus, true);
            _ds.displaySimple(strIcon, true);
            _ds.displaySimple(strExt, true);
            _ds.displaySimple(ddwVersion, true);
            _ds.displaySimple(dwType, true);
            _ds.displaySimple(dwProps, true);
            _ds.displaySimple(can_resign, false);
            return _os;
        }
    public:
        taf::Int32 dwTaskId;
        taf::Int32 dwOrderNum;
        taf::Int32 dwMaxCount;
        taf::Int32 dwFinishedCount;
        std::string strTaskName;
        taf::Int32 dwCategory;
        taf::Int32 dwFansVal;
        taf::Int32 dwVCoin;
        vector<jceFansGrowth::stWelfare> vecReward;
        vector<jceFansGrowth::stTaskInfo> vecUnRecvTask;
        std::string strSignExt;
        taf::Int32 dwStatus;
        std::string strIcon;
        std::string strExt;
        taf::Int64 ddwVersion;
        taf::Int32 dwType;
        taf::Int32 dwProps;
        taf::Int32 can_resign;
    };
    inline bool operator==(const stTaskItem&l, const stTaskItem&r)
    {
        return l.dwTaskId == r.dwTaskId && l.dwOrderNum == r.dwOrderNum && l.dwMaxCount == r.dwMaxCount && l.dwFinishedCount == r.dwFinishedCount && l.strTaskName == r.strTaskName && l.dwCategory == r.dwCategory && l.dwFansVal == r.dwFansVal && l.dwVCoin == r.dwVCoin && l.vecReward == r.vecReward && l.vecUnRecvTask == r.vecUnRecvTask && l.strSignExt == r.strSignExt && l.dwStatus == r.dwStatus && l.strIcon == r.strIcon && l.strExt == r.strExt && l.ddwVersion == r.ddwVersion && l.dwType == r.dwType && l.dwProps == r.dwProps && l.can_resign == r.can_resign;
    }
    inline bool operator!=(const stTaskItem&l, const stTaskItem&r)
    {
        return !(l == r);
    }

    struct stUserReward : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stUserReward";
        }
        static string MD5()
        {
            return "f7c39bad4a632ba87f1285c07a4d86a9";
        }
        stUserReward()
        :ddwFansVal(0),ddwVCoin(0),ddwProps(0),iBonusTimes(0)
        {
        }
        void resetDefautlt()
        {
            ddwFansVal = 0;
            ddwVCoin = 0;
            ddwProps = 0;
            iBonusTimes = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwFansVal, 0);
            _os.write(ddwVCoin, 1);
            _os.write(vecWelfare, 2);
            _os.write(ddwProps, 3);
            _os.write(iBonusTimes, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwFansVal, 0, false);
            _is.read(ddwVCoin, 1, false);
            _is.read(vecWelfare, 2, false);
            _is.read(ddwProps, 3, false);
            _is.read(iBonusTimes, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwFansVal,"ddwFansVal");
            _ds.display(ddwVCoin,"ddwVCoin");
            _ds.display(vecWelfare,"vecWelfare");
            _ds.display(ddwProps,"ddwProps");
            _ds.display(iBonusTimes,"iBonusTimes");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwFansVal, true);
            _ds.displaySimple(ddwVCoin, true);
            _ds.displaySimple(vecWelfare, true);
            _ds.displaySimple(ddwProps, true);
            _ds.displaySimple(iBonusTimes, false);
            return _os;
        }
    public:
        taf::Int64 ddwFansVal;
        taf::Int64 ddwVCoin;
        vector<jceFansGrowth::stWelfare> vecWelfare;
        taf::Int64 ddwProps;
        taf::Int32 iBonusTimes;
    };
    inline bool operator==(const stUserReward&l, const stUserReward&r)
    {
        return l.ddwFansVal == r.ddwFansVal && l.ddwVCoin == r.ddwVCoin && l.vecWelfare == r.vecWelfare && l.ddwProps == r.ddwProps && l.iBonusTimes == r.iBonusTimes;
    }
    inline bool operator!=(const stUserReward&l, const stUserReward&r)
    {
        return !(l == r);
    }

    struct stQueryFansTaskInfoReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stQueryFansTaskInfoReq";
        }
        static string MD5()
        {
            return "bcdab25845af3d13d13a3ffa45b256bd";
        }
        stQueryFansTaskInfoReq()
        :ddwStarId(0),dwFlag(0)
        {
        }
        void resetDefautlt()
        {
            ddwStarId = 0;
            dwFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwStarId, 0);
            _os.write(dwFlag, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwStarId, 0, true);
            _is.read(dwFlag, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwStarId,"ddwStarId");
            _ds.display(dwFlag,"dwFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwStarId, true);
            _ds.displaySimple(dwFlag, false);
            return _os;
        }
    public:
        taf::Int64 ddwStarId;
        taf::Int32 dwFlag;
    };
    inline bool operator==(const stQueryFansTaskInfoReq&l, const stQueryFansTaskInfoReq&r)
    {
        return l.ddwStarId == r.ddwStarId && l.dwFlag == r.dwFlag;
    }
    inline bool operator!=(const stQueryFansTaskInfoReq&l, const stQueryFansTaskInfoReq&r)
    {
        return !(l == r);
    }

    struct stQueryFansTaskInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stQueryFansTaskInfoRsp";
        }
        static string MD5()
        {
            return "68952ad9cf08421872d97938a0f94ab1";
        }
        stQueryFansTaskInfoRsp()
        :iErrCode(0),strErrMsg(""),dwTotalFans(0),dwTotalVCoin(0),dwTotalProps(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            dwTotalFans = 0;
            dwTotalVCoin = 0;
            dwTotalProps = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(dwTotalFans, 2);
            _os.write(dwTotalVCoin, 3);
            _os.write(vecTaskStatus, 4);
            _os.write(stReward, 5);
            _os.write(dwTotalProps, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(dwTotalFans, 2, false);
            _is.read(dwTotalVCoin, 3, false);
            _is.read(vecTaskStatus, 4, false);
            _is.read(stReward, 5, false);
            _is.read(dwTotalProps, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(dwTotalFans,"dwTotalFans");
            _ds.display(dwTotalVCoin,"dwTotalVCoin");
            _ds.display(vecTaskStatus,"vecTaskStatus");
            _ds.display(stReward,"stReward");
            _ds.display(dwTotalProps,"dwTotalProps");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(dwTotalFans, true);
            _ds.displaySimple(dwTotalVCoin, true);
            _ds.displaySimple(vecTaskStatus, true);
            _ds.displaySimple(stReward, true);
            _ds.displaySimple(dwTotalProps, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        taf::Int32 dwTotalFans;
        taf::Int32 dwTotalVCoin;
        vector<jceFansGrowth::stTaskItem> vecTaskStatus;
        jceFansGrowth::stUserReward stReward;
        taf::Int32 dwTotalProps;
    };
    inline bool operator==(const stQueryFansTaskInfoRsp&l, const stQueryFansTaskInfoRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.dwTotalFans == r.dwTotalFans && l.dwTotalVCoin == r.dwTotalVCoin && l.vecTaskStatus == r.vecTaskStatus && l.stReward == r.stReward && l.dwTotalProps == r.dwTotalProps;
    }
    inline bool operator!=(const stQueryFansTaskInfoRsp&l, const stQueryFansTaskInfoRsp&r)
    {
        return !(l == r);
    }

    struct stExeFansTaskReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stExeFansTaskReq";
        }
        static string MD5()
        {
            return "227c2a453636b9061e1d71d332ace349";
        }
        stExeFansTaskReq()
        :ddwStarId(0),dwTaskId(0),strTaskKey(""),iReSign(0),num_with_create(0),record_with_create(0)
        {
        }
        void resetDefautlt()
        {
            ddwStarId = 0;
            dwTaskId = 0;
            strTaskKey = "";
            iReSign = 0;
            num_with_create = 0;
            record_with_create = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwStarId, 0);
            _os.write(dwTaskId, 1);
            _os.write(strTaskKey, 2);
            _os.write(iReSign, 3);
            _os.write(num_with_create, 4);
            _os.write(record_with_create, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwStarId, 0, true);
            _is.read(dwTaskId, 1, true);
            _is.read(strTaskKey, 2, false);
            _is.read(iReSign, 3, false);
            _is.read(num_with_create, 4, false);
            _is.read(record_with_create, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwStarId,"ddwStarId");
            _ds.display(dwTaskId,"dwTaskId");
            _ds.display(strTaskKey,"strTaskKey");
            _ds.display(iReSign,"iReSign");
            _ds.display(num_with_create,"num_with_create");
            _ds.display(record_with_create,"record_with_create");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwStarId, true);
            _ds.displaySimple(dwTaskId, true);
            _ds.displaySimple(strTaskKey, true);
            _ds.displaySimple(iReSign, true);
            _ds.displaySimple(num_with_create, true);
            _ds.displaySimple(record_with_create, false);
            return _os;
        }
    public:
        taf::Int64 ddwStarId;
        taf::Int32 dwTaskId;
        std::string strTaskKey;
        taf::Int32 iReSign;
        taf::Int32 num_with_create;
        taf::Int32 record_with_create;
    };
    inline bool operator==(const stExeFansTaskReq&l, const stExeFansTaskReq&r)
    {
        return l.ddwStarId == r.ddwStarId && l.dwTaskId == r.dwTaskId && l.strTaskKey == r.strTaskKey && l.iReSign == r.iReSign && l.num_with_create == r.num_with_create && l.record_with_create == r.record_with_create;
    }
    inline bool operator!=(const stExeFansTaskReq&l, const stExeFansTaskReq&r)
    {
        return !(l == r);
    }

    struct stExeFansTaskRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stExeFansTaskRsp";
        }
        static string MD5()
        {
            return "e71b3cd23a24e81a6c9c2d62ac5854f7";
        }
        stExeFansTaskRsp()
        :iErrCode(0),strErrMsg(""),iReSignLimit(0),iMissResign(0),iCurLevelResignNum(0),iMouth(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            iReSignLimit = 0;
            iMissResign = 0;
            iCurLevelResignNum = 0;
            iMouth = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(stBeforeReward, 2);
            _os.write(stAfterReward, 3);
            _os.write(vecWelfare, 4);
            _os.write(iReSignLimit, 5);
            _os.write(iMissResign, 6);
            _os.write(iCurLevelResignNum, 7);
            _os.write(iMouth, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(stBeforeReward, 2, false);
            _is.read(stAfterReward, 3, false);
            _is.read(vecWelfare, 4, false);
            _is.read(iReSignLimit, 5, false);
            _is.read(iMissResign, 6, false);
            _is.read(iCurLevelResignNum, 7, false);
            _is.read(iMouth, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stBeforeReward,"stBeforeReward");
            _ds.display(stAfterReward,"stAfterReward");
            _ds.display(vecWelfare,"vecWelfare");
            _ds.display(iReSignLimit,"iReSignLimit");
            _ds.display(iMissResign,"iMissResign");
            _ds.display(iCurLevelResignNum,"iCurLevelResignNum");
            _ds.display(iMouth,"iMouth");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stBeforeReward, true);
            _ds.displaySimple(stAfterReward, true);
            _ds.displaySimple(vecWelfare, true);
            _ds.displaySimple(iReSignLimit, true);
            _ds.displaySimple(iMissResign, true);
            _ds.displaySimple(iCurLevelResignNum, true);
            _ds.displaySimple(iMouth, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        jceFansGrowth::stUserReward stBeforeReward;
        jceFansGrowth::stUserReward stAfterReward;
        vector<jceFansGrowth::stWelfare> vecWelfare;
        taf::Int32 iReSignLimit;
        taf::Int32 iMissResign;
        taf::Int32 iCurLevelResignNum;
        taf::Int32 iMouth;
    };
    inline bool operator==(const stExeFansTaskRsp&l, const stExeFansTaskRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.stBeforeReward == r.stBeforeReward && l.stAfterReward == r.stAfterReward && l.vecWelfare == r.vecWelfare && l.iReSignLimit == r.iReSignLimit && l.iMissResign == r.iMissResign && l.iCurLevelResignNum == r.iCurLevelResignNum && l.iMouth == r.iMouth;
    }
    inline bool operator!=(const stExeFansTaskRsp&l, const stExeFansTaskRsp&r)
    {
        return !(l == r);
    }

    struct stRecvFansTaskReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stRecvFansTaskReq";
        }
        static string MD5()
        {
            return "95e92d0d885311fde82a95d4f3cb4783";
        }
        stRecvFansTaskReq()
        :ddwStarId(0),dwTaskId(0),iFlag(0)
        {
        }
        void resetDefautlt()
        {
            ddwStarId = 0;
            dwTaskId = 0;
            iFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwStarId, 0);
            _os.write(dwTaskId, 1);
            _os.write(vecUnRecvTask, 2);
            _os.write(iFlag, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwStarId, 0, true);
            _is.read(dwTaskId, 1, true);
            _is.read(vecUnRecvTask, 2, true);
            _is.read(iFlag, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwStarId,"ddwStarId");
            _ds.display(dwTaskId,"dwTaskId");
            _ds.display(vecUnRecvTask,"vecUnRecvTask");
            _ds.display(iFlag,"iFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwStarId, true);
            _ds.displaySimple(dwTaskId, true);
            _ds.displaySimple(vecUnRecvTask, true);
            _ds.displaySimple(iFlag, false);
            return _os;
        }
    public:
        taf::Int64 ddwStarId;
        taf::Int32 dwTaskId;
        vector<jceFansGrowth::stTaskInfo> vecUnRecvTask;
        taf::Int32 iFlag;
    };
    inline bool operator==(const stRecvFansTaskReq&l, const stRecvFansTaskReq&r)
    {
        return l.ddwStarId == r.ddwStarId && l.dwTaskId == r.dwTaskId && l.vecUnRecvTask == r.vecUnRecvTask && l.iFlag == r.iFlag;
    }
    inline bool operator!=(const stRecvFansTaskReq&l, const stRecvFansTaskReq&r)
    {
        return !(l == r);
    }

    struct stRecvFansTaskRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stRecvFansTaskRsp";
        }
        static string MD5()
        {
            return "3e84289d373d454bfe3d45a54ad80149";
        }
        stRecvFansTaskRsp()
        :iErrCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(stBeforeReward, 2);
            _os.write(stAfterReward, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(stBeforeReward, 2, false);
            _is.read(stAfterReward, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stBeforeReward,"stBeforeReward");
            _ds.display(stAfterReward,"stAfterReward");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stBeforeReward, true);
            _ds.displaySimple(stAfterReward, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        jceFansGrowth::stUserReward stBeforeReward;
        jceFansGrowth::stUserReward stAfterReward;
    };
    inline bool operator==(const stRecvFansTaskRsp&l, const stRecvFansTaskRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.stBeforeReward == r.stBeforeReward && l.stAfterReward == r.stAfterReward;
    }
    inline bool operator!=(const stRecvFansTaskRsp&l, const stRecvFansTaskRsp&r)
    {
        return !(l == r);
    }

    struct stGetSignRewardReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stGetSignRewardReq";
        }
        static string MD5()
        {
            return "bcdab25845af3d13d13a3ffa45b256bd";
        }
        stGetSignRewardReq()
        :ddwStarId(0),dwTaskId(0)
        {
        }
        void resetDefautlt()
        {
            ddwStarId = 0;
            dwTaskId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwStarId, 0);
            _os.write(dwTaskId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwStarId, 0, true);
            _is.read(dwTaskId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwStarId,"ddwStarId");
            _ds.display(dwTaskId,"dwTaskId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwStarId, true);
            _ds.displaySimple(dwTaskId, false);
            return _os;
        }
    public:
        taf::Int64 ddwStarId;
        taf::Int32 dwTaskId;
    };
    inline bool operator==(const stGetSignRewardReq&l, const stGetSignRewardReq&r)
    {
        return l.ddwStarId == r.ddwStarId && l.dwTaskId == r.dwTaskId;
    }
    inline bool operator!=(const stGetSignRewardReq&l, const stGetSignRewardReq&r)
    {
        return !(l == r);
    }

    struct stGetSignRewardRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stGetSignRewardRsp";
        }
        static string MD5()
        {
            return "2cefbe3e322484d0879a5f2bb35ee717";
        }
        stGetSignRewardRsp()
        :iErrCode(0),strErrMsg(""),iSignDay(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            iSignDay = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(iSignDay, 2);
            _os.write(stReward, 3);
            _os.write(vecSignConf, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(iSignDay, 2, false);
            _is.read(stReward, 3, false);
            _is.read(vecSignConf, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(iSignDay,"iSignDay");
            _ds.display(stReward,"stReward");
            _ds.display(vecSignConf,"vecSignConf");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(iSignDay, true);
            _ds.displaySimple(stReward, true);
            _ds.displaySimple(vecSignConf, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        taf::Int32 iSignDay;
        jceFansGrowth::stUserReward stReward;
        vector<jceFansGrowth::stUserReward> vecSignConf;
    };
    inline bool operator==(const stGetSignRewardRsp&l, const stGetSignRewardRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.iSignDay == r.iSignDay && l.stReward == r.stReward && l.vecSignConf == r.vecSignConf;
    }
    inline bool operator!=(const stGetSignRewardRsp&l, const stGetSignRewardRsp&r)
    {
        return !(l == r);
    }

    struct stFansDayRankInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stFansDayRankInfo";
        }
        static string MD5()
        {
            return "0606f64722877074b393a58f15db651f";
        }
        stFansDayRankInfo()
        :ddwVuid(0),dwFansVal(0)
        {
        }
        void resetDefautlt()
        {
            ddwVuid = 0;
            dwFansVal = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwVuid, 0);
            _os.write(dwFansVal, 1);
            _os.write(stReward, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwVuid, 0, true);
            _is.read(dwFansVal, 1, true);
            _is.read(stReward, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwVuid,"ddwVuid");
            _ds.display(dwFansVal,"dwFansVal");
            _ds.display(stReward,"stReward");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwVuid, true);
            _ds.displaySimple(dwFansVal, true);
            _ds.displaySimple(stReward, false);
            return _os;
        }
    public:
        taf::Int64 ddwVuid;
        taf::Int32 dwFansVal;
        jceFansGrowth::stUserReward stReward;
    };
    inline bool operator==(const stFansDayRankInfo&l, const stFansDayRankInfo&r)
    {
        return l.ddwVuid == r.ddwVuid && l.dwFansVal == r.dwFansVal && l.stReward == r.stReward;
    }
    inline bool operator!=(const stFansDayRankInfo&l, const stFansDayRankInfo&r)
    {
        return !(l == r);
    }

    struct stGetFansRankReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stGetFansRankReq";
        }
        static string MD5()
        {
            return "73fdddb66ea0f46eff5942043e8bbabd";
        }
        stGetFansRankReq()
        :ddwStarId(0),dwNum(0),pageContext("")
        {
        }
        void resetDefautlt()
        {
            ddwStarId = 0;
            dwNum = 0;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwStarId, 0);
            _os.write(dwNum, 1);
            _os.write(pageContext, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwStarId, 0, true);
            _is.read(dwNum, 1, false);
            _is.read(pageContext, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwStarId,"ddwStarId");
            _ds.display(dwNum,"dwNum");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwStarId, true);
            _ds.displaySimple(dwNum, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int64 ddwStarId;
        taf::Int32 dwNum;
        std::string pageContext;
    };
    inline bool operator==(const stGetFansRankReq&l, const stGetFansRankReq&r)
    {
        return l.ddwStarId == r.ddwStarId && l.dwNum == r.dwNum && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const stGetFansRankReq&l, const stGetFansRankReq&r)
    {
        return !(l == r);
    }

    struct stGetFansRankRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stGetFansRankRsp";
        }
        static string MD5()
        {
            return "99fc6e0783ca2f8ea4d528ee8d801571";
        }
        stGetFansRankRsp()
        :iErrCode(0),strErrMsg(""),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecFansRank, 2);
            _os.write(pageContext, 3);
            _os.write(hasNextPage, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(vecFansRank, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(hasNextPage, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFansRank,"vecFansRank");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFansRank, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<jceFansGrowth::stFansDayRankInfo> vecFansRank;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const stGetFansRankRsp&l, const stGetFansRankRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecFansRank == r.vecFansRank && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const stGetFansRankRsp&l, const stGetFansRankRsp&r)
    {
        return !(l == r);
    }

    struct stDelSignRewardReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stDelSignRewardReq";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        stDelSignRewardReq()
        :ddwStarId(0)
        {
        }
        void resetDefautlt()
        {
            ddwStarId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwStarId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwStarId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwStarId,"ddwStarId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwStarId, false);
            return _os;
        }
    public:
        taf::Int64 ddwStarId;
    };
    inline bool operator==(const stDelSignRewardReq&l, const stDelSignRewardReq&r)
    {
        return l.ddwStarId == r.ddwStarId;
    }
    inline bool operator!=(const stDelSignRewardReq&l, const stDelSignRewardReq&r)
    {
        return !(l == r);
    }

    struct stDelSignRewardRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stDelSignRewardRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stDelSignRewardRsp()
        :iErrCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stDelSignRewardRsp&l, const stDelSignRewardRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stDelSignRewardRsp&l, const stDelSignRewardRsp&r)
    {
        return !(l == r);
    }

    struct stFansTaskTransMsg : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stFansTaskTransMsg";
        }
        static string MD5()
        {
            return "b8c72bcbcd352686cfe0bc99c33a454b";
        }
        stFansTaskTransMsg()
        :dwTaskId(0),ddwStarId(0),ddwVuid(0),strBillNo(""),dwFansVal(0),dwVCoin(0),iRetCode(0),dwProps(0),ddwBeforeFansValue(0),ddwAfterFansValue(0),ddwBeforeFansLevel(0),ddwAfterFansLevel(0)
        {
        }
        void resetDefautlt()
        {
            dwTaskId = 0;
            ddwStarId = 0;
            ddwVuid = 0;
            strBillNo = "";
            dwFansVal = 0;
            dwVCoin = 0;
            iRetCode = 0;
            dwProps = 0;
            ddwBeforeFansValue = 0;
            ddwAfterFansValue = 0;
            ddwBeforeFansLevel = 0;
            ddwAfterFansLevel = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwTaskId, 0);
            _os.write(ddwStarId, 1);
            _os.write(ddwVuid, 2);
            _os.write(strBillNo, 3);
            _os.write(dwFansVal, 4);
            _os.write(dwVCoin, 5);
            _os.write(iRetCode, 6);
            _os.write(dwProps, 7);
            _os.write(ddwBeforeFansValue, 8);
            _os.write(ddwAfterFansValue, 9);
            _os.write(ddwBeforeFansLevel, 10);
            _os.write(ddwAfterFansLevel, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwTaskId, 0, true);
            _is.read(ddwStarId, 1, true);
            _is.read(ddwVuid, 2, true);
            _is.read(strBillNo, 3, false);
            _is.read(dwFansVal, 4, false);
            _is.read(dwVCoin, 5, false);
            _is.read(iRetCode, 6, false);
            _is.read(dwProps, 7, false);
            _is.read(ddwBeforeFansValue, 8, false);
            _is.read(ddwAfterFansValue, 9, false);
            _is.read(ddwBeforeFansLevel, 10, false);
            _is.read(ddwAfterFansLevel, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwTaskId,"dwTaskId");
            _ds.display(ddwStarId,"ddwStarId");
            _ds.display(ddwVuid,"ddwVuid");
            _ds.display(strBillNo,"strBillNo");
            _ds.display(dwFansVal,"dwFansVal");
            _ds.display(dwVCoin,"dwVCoin");
            _ds.display(iRetCode,"iRetCode");
            _ds.display(dwProps,"dwProps");
            _ds.display(ddwBeforeFansValue,"ddwBeforeFansValue");
            _ds.display(ddwAfterFansValue,"ddwAfterFansValue");
            _ds.display(ddwBeforeFansLevel,"ddwBeforeFansLevel");
            _ds.display(ddwAfterFansLevel,"ddwAfterFansLevel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwTaskId, true);
            _ds.displaySimple(ddwStarId, true);
            _ds.displaySimple(ddwVuid, true);
            _ds.displaySimple(strBillNo, true);
            _ds.displaySimple(dwFansVal, true);
            _ds.displaySimple(dwVCoin, true);
            _ds.displaySimple(iRetCode, true);
            _ds.displaySimple(dwProps, true);
            _ds.displaySimple(ddwBeforeFansValue, true);
            _ds.displaySimple(ddwAfterFansValue, true);
            _ds.displaySimple(ddwBeforeFansLevel, true);
            _ds.displaySimple(ddwAfterFansLevel, false);
            return _os;
        }
    public:
        taf::Int32 dwTaskId;
        taf::Int64 ddwStarId;
        taf::Int64 ddwVuid;
        std::string strBillNo;
        taf::Int32 dwFansVal;
        taf::Int32 dwVCoin;
        taf::Int32 iRetCode;
        taf::Int32 dwProps;
        taf::Int64 ddwBeforeFansValue;
        taf::Int64 ddwAfterFansValue;
        taf::Int32 ddwBeforeFansLevel;
        taf::Int32 ddwAfterFansLevel;
    };
    inline bool operator==(const stFansTaskTransMsg&l, const stFansTaskTransMsg&r)
    {
        return l.dwTaskId == r.dwTaskId && l.ddwStarId == r.ddwStarId && l.ddwVuid == r.ddwVuid && l.strBillNo == r.strBillNo && l.dwFansVal == r.dwFansVal && l.dwVCoin == r.dwVCoin && l.iRetCode == r.iRetCode && l.dwProps == r.dwProps && l.ddwBeforeFansValue == r.ddwBeforeFansValue && l.ddwAfterFansValue == r.ddwAfterFansValue && l.ddwBeforeFansLevel == r.ddwBeforeFansLevel && l.ddwAfterFansLevel == r.ddwAfterFansLevel;
    }
    inline bool operator!=(const stFansTaskTransMsg&l, const stFansTaskTransMsg&r)
    {
        return !(l == r);
    }

    struct stStarFansVal : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stStarFansVal";
        }
        static string MD5()
        {
            return "a0f7f1c70b82271b1f084e61faf77494";
        }
        stStarFansVal()
        :ddwStarId(0),ddwFansVal(0)
        {
        }
        void resetDefautlt()
        {
            ddwStarId = 0;
            ddwFansVal = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwStarId, 0);
            _os.write(ddwFansVal, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwStarId, 0, true);
            _is.read(ddwFansVal, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwStarId,"ddwStarId");
            _ds.display(ddwFansVal,"ddwFansVal");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwStarId, true);
            _ds.displaySimple(ddwFansVal, false);
            return _os;
        }
    public:
        taf::Int64 ddwStarId;
        taf::Int64 ddwFansVal;
    };
    inline bool operator==(const stStarFansVal&l, const stStarFansVal&r)
    {
        return l.ddwStarId == r.ddwStarId && l.ddwFansVal == r.ddwFansVal;
    }
    inline bool operator!=(const stStarFansVal&l, const stStarFansVal&r)
    {
        return !(l == r);
    }

    struct stFollowListTopFansValReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stFollowListTopFansValReq";
        }
        static string MD5()
        {
            return "bcdab25845af3d13d13a3ffa45b256bd";
        }
        stFollowListTopFansValReq()
        :ddwVuid(0),iReqNum(0)
        {
        }
        void resetDefautlt()
        {
            ddwVuid = 0;
            iReqNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwVuid, 0);
            _os.write(iReqNum, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwVuid, 0, true);
            _is.read(iReqNum, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwVuid,"ddwVuid");
            _ds.display(iReqNum,"iReqNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwVuid, true);
            _ds.displaySimple(iReqNum, false);
            return _os;
        }
    public:
        taf::Int64 ddwVuid;
        taf::Int32 iReqNum;
    };
    inline bool operator==(const stFollowListTopFansValReq&l, const stFollowListTopFansValReq&r)
    {
        return l.ddwVuid == r.ddwVuid && l.iReqNum == r.iReqNum;
    }
    inline bool operator!=(const stFollowListTopFansValReq&l, const stFollowListTopFansValReq&r)
    {
        return !(l == r);
    }

    struct stFollowListTopFansValRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.stFollowListTopFansValRsp";
        }
        static string MD5()
        {
            return "7137eadeac38fdf3f7b6c9b7ec73ee6d";
        }
        stFollowListTopFansValRsp()
        :iErrCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecStarFansVal, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(vecStarFansVal, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecStarFansVal,"vecStarFansVal");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecStarFansVal, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<jceFansGrowth::stStarFansVal> vecStarFansVal;
    };
    inline bool operator==(const stFollowListTopFansValRsp&l, const stFollowListTopFansValRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecStarFansVal == r.vecStarFansVal;
    }
    inline bool operator!=(const stFollowListTopFansValRsp&l, const stFollowListTopFansValRsp&r)
    {
        return !(l == r);
    }

    struct UsrFansVal : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.UsrFansVal";
        }
        static string MD5()
        {
            return "59ec633a0479e0c47e29ee571b0dc24d";
        }
        UsrFansVal()
        :lVuid(0),lStarId(0),lFansVal(0)
        {
        }
        void resetDefautlt()
        {
            lVuid = 0;
            lStarId = 0;
            lFansVal = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lVuid, 0);
            _os.write(lStarId, 1);
            _os.write(lFansVal, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lVuid, 0, true);
            _is.read(lStarId, 1, true);
            _is.read(lFansVal, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lVuid,"lVuid");
            _ds.display(lStarId,"lStarId");
            _ds.display(lFansVal,"lFansVal");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lVuid, true);
            _ds.displaySimple(lStarId, true);
            _ds.displaySimple(lFansVal, false);
            return _os;
        }
    public:
        taf::Int64 lVuid;
        taf::Int64 lStarId;
        taf::Int64 lFansVal;
    };
    inline bool operator==(const UsrFansVal&l, const UsrFansVal&r)
    {
        return l.lVuid == r.lVuid && l.lStarId == r.lStarId && l.lFansVal == r.lFansVal;
    }
    inline bool operator!=(const UsrFansVal&l, const UsrFansVal&r)
    {
        return !(l == r);
    }

    struct BatchQueryFansValReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.BatchQueryFansValReq";
        }
        static string MD5()
        {
            return "95e8f40fd28805ed3561ba6cfe9248bd";
        }
        BatchQueryFansValReq()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vecUsrFansVal, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vecUsrFansVal, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vecUsrFansVal,"vecUsrFansVal");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vecUsrFansVal, false);
            return _os;
        }
    public:
        vector<jceFansGrowth::UsrFansVal> vecUsrFansVal;
    };
    inline bool operator==(const BatchQueryFansValReq&l, const BatchQueryFansValReq&r)
    {
        return l.vecUsrFansVal == r.vecUsrFansVal;
    }
    inline bool operator!=(const BatchQueryFansValReq&l, const BatchQueryFansValReq&r)
    {
        return !(l == r);
    }

    struct BatchQueryFansValRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceFansGrowth.BatchQueryFansValRsp";
        }
        static string MD5()
        {
            return "fb2e009f41c9a32a3abfd18dca8a592e";
        }
        BatchQueryFansValRsp()
        :iErrCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecUsrFansVal, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(vecUsrFansVal, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecUsrFansVal,"vecUsrFansVal");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecUsrFansVal, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<jceFansGrowth::UsrFansVal> vecUsrFansVal;
    };
    inline bool operator==(const BatchQueryFansValRsp&l, const BatchQueryFansValRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecUsrFansVal == r.vecUsrFansVal;
    }
    inline bool operator!=(const BatchQueryFansValRsp&l, const BatchQueryFansValRsp&r)
    {
        return !(l == r);
    }


}

#define jceFansGrowth_stWelfare_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwGiftId,b.dwGiftId);

#define jceFansGrowth_stTaskInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strBillNo,b.strBillNo);

#define jceFansGrowth_stTaskItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwTaskId,b.dwTaskId);jce_copy_struct(a.dwOrderNum,b.dwOrderNum);jce_copy_struct(a.dwMaxCount,b.dwMaxCount);jce_copy_struct(a.dwFinishedCount,b.dwFinishedCount);jce_copy_struct(a.strTaskName,b.strTaskName);jce_copy_struct(a.dwCategory,b.dwCategory);jce_copy_struct(a.dwFansVal,b.dwFansVal);jce_copy_struct(a.dwVCoin,b.dwVCoin);jce_copy_struct(a.vecReward,b.vecReward);jce_copy_struct(a.vecUnRecvTask,b.vecUnRecvTask);jce_copy_struct(a.strSignExt,b.strSignExt);jce_copy_struct(a.dwStatus,b.dwStatus);jce_copy_struct(a.strIcon,b.strIcon);jce_copy_struct(a.strExt,b.strExt);jce_copy_struct(a.ddwVersion,b.ddwVersion);jce_copy_struct(a.dwType,b.dwType);jce_copy_struct(a.dwProps,b.dwProps);jce_copy_struct(a.can_resign,b.can_resign);

#define jceFansGrowth_stUserReward_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwFansVal,b.ddwFansVal);jce_copy_struct(a.ddwVCoin,b.ddwVCoin);jce_copy_struct(a.vecWelfare,b.vecWelfare);jce_copy_struct(a.ddwProps,b.ddwProps);jce_copy_struct(a.iBonusTimes,b.iBonusTimes);

#define jceFansGrowth_stQueryFansTaskInfoReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwStarId,b.ddwStarId);jce_copy_struct(a.dwFlag,b.dwFlag);

#define jceFansGrowth_stQueryFansTaskInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.dwTotalFans,b.dwTotalFans);jce_copy_struct(a.dwTotalVCoin,b.dwTotalVCoin);jce_copy_struct(a.vecTaskStatus,b.vecTaskStatus);jce_copy_struct(a.stReward,b.stReward);jce_copy_struct(a.dwTotalProps,b.dwTotalProps);

#define jceFansGrowth_stExeFansTaskReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwStarId,b.ddwStarId);jce_copy_struct(a.dwTaskId,b.dwTaskId);jce_copy_struct(a.strTaskKey,b.strTaskKey);jce_copy_struct(a.iReSign,b.iReSign);jce_copy_struct(a.num_with_create,b.num_with_create);jce_copy_struct(a.record_with_create,b.record_with_create);

#define jceFansGrowth_stExeFansTaskRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stBeforeReward,b.stBeforeReward);jce_copy_struct(a.stAfterReward,b.stAfterReward);jce_copy_struct(a.vecWelfare,b.vecWelfare);jce_copy_struct(a.iReSignLimit,b.iReSignLimit);jce_copy_struct(a.iMissResign,b.iMissResign);jce_copy_struct(a.iCurLevelResignNum,b.iCurLevelResignNum);jce_copy_struct(a.iMouth,b.iMouth);

#define jceFansGrowth_stRecvFansTaskReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwStarId,b.ddwStarId);jce_copy_struct(a.dwTaskId,b.dwTaskId);jce_copy_struct(a.vecUnRecvTask,b.vecUnRecvTask);jce_copy_struct(a.iFlag,b.iFlag);

#define jceFansGrowth_stRecvFansTaskRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stBeforeReward,b.stBeforeReward);jce_copy_struct(a.stAfterReward,b.stAfterReward);

#define jceFansGrowth_stGetSignRewardReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwStarId,b.ddwStarId);jce_copy_struct(a.dwTaskId,b.dwTaskId);

#define jceFansGrowth_stGetSignRewardRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.iSignDay,b.iSignDay);jce_copy_struct(a.stReward,b.stReward);jce_copy_struct(a.vecSignConf,b.vecSignConf);

#define jceFansGrowth_stFansDayRankInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwVuid,b.ddwVuid);jce_copy_struct(a.dwFansVal,b.dwFansVal);jce_copy_struct(a.stReward,b.stReward);

#define jceFansGrowth_stGetFansRankReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwStarId,b.ddwStarId);jce_copy_struct(a.dwNum,b.dwNum);jce_copy_struct(a.pageContext,b.pageContext);

#define jceFansGrowth_stGetFansRankRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFansRank,b.vecFansRank);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jceFansGrowth_stDelSignRewardReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwStarId,b.ddwStarId);

#define jceFansGrowth_stDelSignRewardRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define jceFansGrowth_stFansTaskTransMsg_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwTaskId,b.dwTaskId);jce_copy_struct(a.ddwStarId,b.ddwStarId);jce_copy_struct(a.ddwVuid,b.ddwVuid);jce_copy_struct(a.strBillNo,b.strBillNo);jce_copy_struct(a.dwFansVal,b.dwFansVal);jce_copy_struct(a.dwVCoin,b.dwVCoin);jce_copy_struct(a.iRetCode,b.iRetCode);jce_copy_struct(a.dwProps,b.dwProps);jce_copy_struct(a.ddwBeforeFansValue,b.ddwBeforeFansValue);jce_copy_struct(a.ddwAfterFansValue,b.ddwAfterFansValue);jce_copy_struct(a.ddwBeforeFansLevel,b.ddwBeforeFansLevel);jce_copy_struct(a.ddwAfterFansLevel,b.ddwAfterFansLevel);

#define jceFansGrowth_stStarFansVal_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwStarId,b.ddwStarId);jce_copy_struct(a.ddwFansVal,b.ddwFansVal);

#define jceFansGrowth_stFollowListTopFansValReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwVuid,b.ddwVuid);jce_copy_struct(a.iReqNum,b.iReqNum);

#define jceFansGrowth_stFollowListTopFansValRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecStarFansVal,b.vecStarFansVal);

#define jceFansGrowth_UsrFansVal_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lVuid,b.lVuid);jce_copy_struct(a.lStarId,b.lStarId);jce_copy_struct(a.lFansVal,b.lFansVal);

#define jceFansGrowth_BatchQueryFansValReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vecUsrFansVal,b.vecUsrFansVal);

#define jceFansGrowth_BatchQueryFansValRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecUsrFansVal,b.vecUsrFansVal);



#endif
