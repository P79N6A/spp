// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_common.jce'
// **********************************************************************

#ifndef __QQVIDEO_COMMON_H_
#define __QQVIDEO_COMMON_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_enum.h"
#include "qqvideo_ad_common.h"
#include "qqvideo_debug.h"


namespace jce
{
    enum ENavigationItemType
    {
        EnumNavigationItemVideo = 1,
        EnumNavigationItemCover = 2,
    };
    inline string etos(const ENavigationItemType & e)
    {
        switch(e)
        {
            case EnumNavigationItemVideo: return "EnumNavigationItemVideo";
            case EnumNavigationItemCover: return "EnumNavigationItemCover";
            default: return "";
        }
    }
    inline int stoe(const string & s, ENavigationItemType & e)
    {
        if(s == "EnumNavigationItemVideo")  { e=EnumNavigationItemVideo; return 0;}
        if(s == "EnumNavigationItemCover")  { e=EnumNavigationItemCover; return 0;}

        return -1;
    }

    struct ExtraReportKV : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ExtraReportKV";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        ExtraReportKV()
        :extraReportKey(""),extraReportParam(""),reportEventId("")
        {
        }
        void resetDefautlt()
        {
            extraReportKey = "";
            extraReportParam = "";
            reportEventId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(extraReportKey, 0);
            _os.write(extraReportParam, 1);
            _os.write(reportEventId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(extraReportKey, 0, true);
            _is.read(extraReportParam, 1, true);
            _is.read(reportEventId, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(extraReportKey,"extraReportKey");
            _ds.display(extraReportParam,"extraReportParam");
            _ds.display(reportEventId,"reportEventId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(extraReportKey, true);
            _ds.displaySimple(extraReportParam, true);
            _ds.displaySimple(reportEventId, false);
            return _os;
        }
    public:
        std::string extraReportKey;
        std::string extraReportParam;
        std::string reportEventId;
    };
    inline bool operator==(const ExtraReportKV&l, const ExtraReportKV&r)
    {
        return l.extraReportKey == r.extraReportKey && l.extraReportParam == r.extraReportParam && l.reportEventId == r.reportEventId;
    }
    inline bool operator!=(const ExtraReportKV&l, const ExtraReportKV&r)
    {
        return !(l == r);
    }

    struct Action : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.Action";
        }
        static string MD5()
        {
            return "9d9cd59f0e40e68c31bcbd8487817d6f";
        }
        Action()
        :url(""),cacheType(0),preReadType(0),reportParams(""),reportKey(""),reportEventId("")
        {
        }
        void resetDefautlt()
        {
            url = "";
            cacheType = 0;
            preReadType = 0;
            reportParams = "";
            reportKey = "";
            reportEventId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(url, 0);
            _os.write(cacheType, 1);
            _os.write(preReadType, 2);
            _os.write(reportParams, 3);
            _os.write(reportKey, 4);
            _os.write(extraReportKVs, 5);
            _os.write(reportEventId, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(url, 0, true);
            _is.read(cacheType, 1, true);
            _is.read(preReadType, 2, true);
            _is.read(reportParams, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(extraReportKVs, 5, false);
            _is.read(reportEventId, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(url,"url");
            _ds.display(cacheType,"cacheType");
            _ds.display(preReadType,"preReadType");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(extraReportKVs,"extraReportKVs");
            _ds.display(reportEventId,"reportEventId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(url, true);
            _ds.displaySimple(cacheType, true);
            _ds.displaySimple(preReadType, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(extraReportKVs, true);
            _ds.displaySimple(reportEventId, false);
            return _os;
        }
    public:
        std::string url;
        taf::Char cacheType;
        taf::Char preReadType;
        std::string reportParams;
        std::string reportKey;
        vector<jce::ExtraReportKV> extraReportKVs;
        std::string reportEventId;
    };
    inline bool operator==(const Action&l, const Action&r)
    {
        return l.url == r.url && l.cacheType == r.cacheType && l.preReadType == r.preReadType && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.extraReportKVs == r.extraReportKVs && l.reportEventId == r.reportEventId;
    }
    inline bool operator!=(const Action&l, const Action&r)
    {
        return !(l == r);
    }

    struct MarkLabel : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MarkLabel";
        }
        static string MD5()
        {
            return "526e8d27a0bfa4490af86f5a12939b8a";
        }
        MarkLabel()
        :type(0),position(0),bgColor(""),primeText(""),minorText(""),markImageUrl(""),optType(0),uiType(0),thirdText("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            position = 0;
            bgColor = "";
            primeText = "";
            minorText = "";
            markImageUrl = "";
            optType = 0;
            uiType = 0;
            thirdText = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(position, 1);
            _os.write(bgColor, 2);
            _os.write(primeText, 3);
            _os.write(minorText, 4);
            _os.write(markImageUrl, 5);
            _os.write(optType, 6);
            _os.write(uiType, 7);
            _os.write(thirdText, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(position, 1, true);
            _is.read(bgColor, 2, false);
            _is.read(primeText, 3, false);
            _is.read(minorText, 4, false);
            _is.read(markImageUrl, 5, false);
            _is.read(optType, 6, false);
            _is.read(uiType, 7, false);
            _is.read(thirdText, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(position,"position");
            _ds.display(bgColor,"bgColor");
            _ds.display(primeText,"primeText");
            _ds.display(minorText,"minorText");
            _ds.display(markImageUrl,"markImageUrl");
            _ds.display(optType,"optType");
            _ds.display(uiType,"uiType");
            _ds.display(thirdText,"thirdText");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(position, true);
            _ds.displaySimple(bgColor, true);
            _ds.displaySimple(primeText, true);
            _ds.displaySimple(minorText, true);
            _ds.displaySimple(markImageUrl, true);
            _ds.displaySimple(optType, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(thirdText, false);
            return _os;
        }
    public:
        taf::Char type;
        taf::Char position;
        std::string bgColor;
        std::string primeText;
        std::string minorText;
        std::string markImageUrl;
        taf::Char optType;
        taf::Int32 uiType;
        std::string thirdText;
    };
    inline bool operator==(const MarkLabel&l, const MarkLabel&r)
    {
        return l.type == r.type && l.position == r.position && l.bgColor == r.bgColor && l.primeText == r.primeText && l.minorText == r.minorText && l.markImageUrl == r.markImageUrl && l.optType == r.optType && l.uiType == r.uiType && l.thirdText == r.thirdText;
    }
    inline bool operator!=(const MarkLabel&l, const MarkLabel&r)
    {
        return !(l == r);
    }

    struct SimplePoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SimplePoster";
        }
        static string MD5()
        {
            return "840c17498a1903f2e0bbb1d77dda48e1";
        }
        SimplePoster()
        :title(""),imgUrl("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            imgUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(imgUrl, 1);
            _os.write(action, 2);
            _os.write(report, 3);
            _os.write(markLabel, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(imgUrl, 1, true);
            _is.read(action, 2, false);
            _is.read(report, 3, false);
            _is.read(markLabel, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(imgUrl,"imgUrl");
            _ds.display(action,"action");
            _ds.display(report,"report");
            _ds.display(markLabel,"markLabel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(imgUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(report, true);
            _ds.displaySimple(markLabel, false);
            return _os;
        }
    public:
        std::string title;
        std::string imgUrl;
        jce::Action action;
        jce::ExtraReportKV report;
        jce::MarkLabel markLabel;
    };
    inline bool operator==(const SimplePoster&l, const SimplePoster&r)
    {
        return l.title == r.title && l.imgUrl == r.imgUrl && l.action == r.action && l.report == r.report && l.markLabel == r.markLabel;
    }
    inline bool operator!=(const SimplePoster&l, const SimplePoster&r)
    {
        return !(l == r);
    }

    struct BusinessData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.BusinessData";
        }
        static string MD5()
        {
            return "f205d9430e1458c45dd1fad3288fddf7";
        }
        BusinessData()
        :businessType("")
        {
        }
        void resetDefautlt()
        {
            businessType = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(businessType, 0);
            _os.write(data, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(businessType, 0, true);
            _is.read(data, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(businessType,"businessType");
            _ds.display(data,"data");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(businessType, true);
            _ds.displaySimple(data, false);
            return _os;
        }
    public:
        std::string businessType;
        vector<taf::Char> data;
    };
    inline bool operator==(const BusinessData&l, const BusinessData&r)
    {
        return l.businessType == r.businessType && l.data == r.data;
    }
    inline bool operator!=(const BusinessData&l, const BusinessData&r)
    {
        return !(l == r);
    }

    struct ActionBarInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ActionBarInfo";
        }
        static string MD5()
        {
            return "42f8b83ddfe6f99c90ce210f6cb57aea";
        }
        ActionBarInfo()
        :title(""),bgColor(""),imgUrl(""),textColor(""),subTitle(""),titleForSelected(""),bgColorForSelected(""),imgUrlForSelected(""),textColorForSelected("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            bgColor = "";
            imgUrl = "";
            textColor = "";
            subTitle = "";
            titleForSelected = "";
            bgColorForSelected = "";
            imgUrlForSelected = "";
            textColorForSelected = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(bgColor, 1);
            _os.write(action, 2);
            _os.write(imgUrl, 3);
            _os.write(textColor, 4);
            _os.write(markLabelList, 5);
            _os.write(subTitle, 6);
            _os.write(titleForSelected, 7);
            _os.write(bgColorForSelected, 8);
            _os.write(imgUrlForSelected, 9);
            _os.write(textColorForSelected, 10);
            _os.write(extBusinessInfo, 11);
            _os.write(adSkinInfo, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(bgColor, 1, false);
            _is.read(action, 2, false);
            _is.read(imgUrl, 3, false);
            _is.read(textColor, 4, false);
            _is.read(markLabelList, 5, false);
            _is.read(subTitle, 6, false);
            _is.read(titleForSelected, 7, false);
            _is.read(bgColorForSelected, 8, false);
            _is.read(imgUrlForSelected, 9, false);
            _is.read(textColorForSelected, 10, false);
            _is.read(extBusinessInfo, 11, false);
            _is.read(adSkinInfo, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(bgColor,"bgColor");
            _ds.display(action,"action");
            _ds.display(imgUrl,"imgUrl");
            _ds.display(textColor,"textColor");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(subTitle,"subTitle");
            _ds.display(titleForSelected,"titleForSelected");
            _ds.display(bgColorForSelected,"bgColorForSelected");
            _ds.display(imgUrlForSelected,"imgUrlForSelected");
            _ds.display(textColorForSelected,"textColorForSelected");
            _ds.display(extBusinessInfo,"extBusinessInfo");
            _ds.display(adSkinInfo,"adSkinInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(bgColor, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(imgUrl, true);
            _ds.displaySimple(textColor, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(titleForSelected, true);
            _ds.displaySimple(bgColorForSelected, true);
            _ds.displaySimple(imgUrlForSelected, true);
            _ds.displaySimple(textColorForSelected, true);
            _ds.displaySimple(extBusinessInfo, true);
            _ds.displaySimple(adSkinInfo, false);
            return _os;
        }
    public:
        std::string title;
        std::string bgColor;
        jce::Action action;
        std::string imgUrl;
        std::string textColor;
        vector<jce::MarkLabel> markLabelList;
        std::string subTitle;
        std::string titleForSelected;
        std::string bgColorForSelected;
        std::string imgUrlForSelected;
        std::string textColorForSelected;
        jce::BusinessData extBusinessInfo;
        jce::AdSkinInfo adSkinInfo;
    };
    inline bool operator==(const ActionBarInfo&l, const ActionBarInfo&r)
    {
        return l.title == r.title && l.bgColor == r.bgColor && l.action == r.action && l.imgUrl == r.imgUrl && l.textColor == r.textColor && l.markLabelList == r.markLabelList && l.subTitle == r.subTitle && l.titleForSelected == r.titleForSelected && l.bgColorForSelected == r.bgColorForSelected && l.imgUrlForSelected == r.imgUrlForSelected && l.textColorForSelected == r.textColorForSelected && l.extBusinessInfo == r.extBusinessInfo && l.adSkinInfo == r.adSkinInfo;
    }
    inline bool operator!=(const ActionBarInfo&l, const ActionBarInfo&r)
    {
        return !(l == r);
    }

    struct KVActionBarItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.KVActionBarItem";
        }
        static string MD5()
        {
            return "81ea808fc83a43a73cc8669dfb05ebd7";
        }
        KVActionBarItem()
        :itemKey("")
        {
        }
        void resetDefautlt()
        {
            itemKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemKey, 0);
            _os.write(itemValue, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(itemKey, 0, true);
            _is.read(itemValue, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemKey,"itemKey");
            _ds.display(itemValue,"itemValue");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemKey, true);
            _ds.displaySimple(itemValue, false);
            return _os;
        }
    public:
        std::string itemKey;
        jce::ActionBarInfo itemValue;
    };
    inline bool operator==(const KVActionBarItem&l, const KVActionBarItem&r)
    {
        return l.itemKey == r.itemKey && l.itemValue == r.itemValue;
    }
    inline bool operator!=(const KVActionBarItem&l, const KVActionBarItem&r)
    {
        return !(l == r);
    }

    struct ImageAction : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ImageAction";
        }
        static string MD5()
        {
            return "99bbc0736cebebc4d7504126259e65fe";
        }
        ImageAction()
        :imageUrl("")
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(action, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, true);
            _is.read(action, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string imageUrl;
        jce::Action action;
    };
    inline bool operator==(const ImageAction&l, const ImageAction&r)
    {
        return l.imageUrl == r.imageUrl && l.action == r.action;
    }
    inline bool operator!=(const ImageAction&l, const ImageAction&r)
    {
        return !(l == r);
    }

    struct TextAction : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TextAction";
        }
        static string MD5()
        {
            return "7130c06b6f2ac3819fe77f3149d4204c";
        }
        TextAction()
        :text(""),textColor(""),subText(""),subTextColor("")
        {
        }
        void resetDefautlt()
        {
            text = "";
            textColor = "";
            subText = "";
            subTextColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(text, 0);
            _os.write(textColor, 1);
            _os.write(action, 2);
            _os.write(subText, 3);
            _os.write(subTextColor, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(text, 0, true);
            _is.read(textColor, 1, false);
            _is.read(action, 2, false);
            _is.read(subText, 3, false);
            _is.read(subTextColor, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(text,"text");
            _ds.display(textColor,"textColor");
            _ds.display(action,"action");
            _ds.display(subText,"subText");
            _ds.display(subTextColor,"subTextColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(text, true);
            _ds.displaySimple(textColor, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(subText, true);
            _ds.displaySimple(subTextColor, false);
            return _os;
        }
    public:
        std::string text;
        std::string textColor;
        jce::Action action;
        std::string subText;
        std::string subTextColor;
    };
    inline bool operator==(const TextAction&l, const TextAction&r)
    {
        return l.text == r.text && l.textColor == r.textColor && l.action == r.action && l.subText == r.subText && l.subTextColor == r.subTextColor;
    }
    inline bool operator!=(const TextAction&l, const TextAction&r)
    {
        return !(l == r);
    }

    struct PicData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PicData";
        }
        static string MD5()
        {
            return "92d1f4ec13f0a38c601db068ddff8a6e";
        }
        PicData()
        :imgUrl(""),thumbUrl(""),imgType(0)
        {
        }
        void resetDefautlt()
        {
            imgUrl = "";
            thumbUrl = "";
            imgType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imgUrl, 0);
            _os.write(thumbUrl, 1);
            _os.write(imgType, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imgUrl, 0, true);
            _is.read(thumbUrl, 1, false);
            _is.read(imgType, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imgUrl,"imgUrl");
            _ds.display(thumbUrl,"thumbUrl");
            _ds.display(imgType,"imgType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imgUrl, true);
            _ds.displaySimple(thumbUrl, true);
            _ds.displaySimple(imgType, false);
            return _os;
        }
    public:
        std::string imgUrl;
        std::string thumbUrl;
        taf::Char imgType;
    };
    inline bool operator==(const PicData&l, const PicData&r)
    {
        return l.imgUrl == r.imgUrl && l.thumbUrl == r.thumbUrl && l.imgType == r.imgType;
    }
    inline bool operator!=(const PicData&l, const PicData&r)
    {
        return !(l == r);
    }

    struct MiniProgramInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MiniProgramInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        MiniProgramInfo()
        :programName(""),path("")
        {
        }
        void resetDefautlt()
        {
            programName = "";
            path = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(programName, 0);
            _os.write(path, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(programName, 0, false);
            _is.read(path, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(programName,"programName");
            _ds.display(path,"path");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(programName, true);
            _ds.displaySimple(path, false);
            return _os;
        }
    public:
        std::string programName;
        std::string path;
    };
    inline bool operator==(const MiniProgramInfo&l, const MiniProgramInfo&r)
    {
        return l.programName == r.programName && l.path == r.path;
    }
    inline bool operator!=(const MiniProgramInfo&l, const MiniProgramInfo&r)
    {
        return !(l == r);
    }

    struct ShareItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ShareItem";
        }
        static string MD5()
        {
            return "8fd423ba932b5200fc1a41aeb19894f3";
        }
        ShareItem()
        :shareUrl(""),shareTitle(""),shareSubtitle(""),shareImgUrl(""),circleShareKey(""),shareSingleTitle(""),shareContent(""),shareContentTail(""),shareStyle(0),captionKey(""),shareIconType(0),knowledgeKey("")
        {
        }
        void resetDefautlt()
        {
            shareUrl = "";
            shareTitle = "";
            shareSubtitle = "";
            shareImgUrl = "";
            circleShareKey = "";
            shareSingleTitle = "";
            shareContent = "";
            shareContentTail = "";
            shareStyle = 0;
            captionKey = "";
            shareIconType = 0;
            knowledgeKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(shareUrl, 0);
            _os.write(shareTitle, 1);
            _os.write(shareSubtitle, 2);
            _os.write(shareImgUrl, 3);
            _os.write(circleShareKey, 4);
            _os.write(shareSingleTitle, 5);
            _os.write(shareContent, 6);
            _os.write(shareContentTail, 7);
            _os.write(shareStyle, 8);
            _os.write(sharePicList, 9);
            _os.write(miniProgramInfo, 10);
            _os.write(captionKey, 11);
            _os.write(shareIconType, 12);
            _os.write(knowledgeKey, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(shareUrl, 0, false);
            _is.read(shareTitle, 1, false);
            _is.read(shareSubtitle, 2, false);
            _is.read(shareImgUrl, 3, false);
            _is.read(circleShareKey, 4, false);
            _is.read(shareSingleTitle, 5, false);
            _is.read(shareContent, 6, false);
            _is.read(shareContentTail, 7, false);
            _is.read(shareStyle, 8, false);
            _is.read(sharePicList, 9, false);
            _is.read(miniProgramInfo, 10, false);
            _is.read(captionKey, 11, false);
            _is.read(shareIconType, 12, false);
            _is.read(knowledgeKey, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(shareUrl,"shareUrl");
            _ds.display(shareTitle,"shareTitle");
            _ds.display(shareSubtitle,"shareSubtitle");
            _ds.display(shareImgUrl,"shareImgUrl");
            _ds.display(circleShareKey,"circleShareKey");
            _ds.display(shareSingleTitle,"shareSingleTitle");
            _ds.display(shareContent,"shareContent");
            _ds.display(shareContentTail,"shareContentTail");
            _ds.display(shareStyle,"shareStyle");
            _ds.display(sharePicList,"sharePicList");
            _ds.display(miniProgramInfo,"miniProgramInfo");
            _ds.display(captionKey,"captionKey");
            _ds.display(shareIconType,"shareIconType");
            _ds.display(knowledgeKey,"knowledgeKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(shareUrl, true);
            _ds.displaySimple(shareTitle, true);
            _ds.displaySimple(shareSubtitle, true);
            _ds.displaySimple(shareImgUrl, true);
            _ds.displaySimple(circleShareKey, true);
            _ds.displaySimple(shareSingleTitle, true);
            _ds.displaySimple(shareContent, true);
            _ds.displaySimple(shareContentTail, true);
            _ds.displaySimple(shareStyle, true);
            _ds.displaySimple(sharePicList, true);
            _ds.displaySimple(miniProgramInfo, true);
            _ds.displaySimple(captionKey, true);
            _ds.displaySimple(shareIconType, true);
            _ds.displaySimple(knowledgeKey, false);
            return _os;
        }
    public:
        std::string shareUrl;
        std::string shareTitle;
        std::string shareSubtitle;
        std::string shareImgUrl;
        std::string circleShareKey;
        std::string shareSingleTitle;
        std::string shareContent;
        std::string shareContentTail;
        taf::Char shareStyle;
        vector<jce::PicData> sharePicList;
        jce::MiniProgramInfo miniProgramInfo;
        std::string captionKey;
        taf::Char shareIconType;
        std::string knowledgeKey;
    };
    inline bool operator==(const ShareItem&l, const ShareItem&r)
    {
        return l.shareUrl == r.shareUrl && l.shareTitle == r.shareTitle && l.shareSubtitle == r.shareSubtitle && l.shareImgUrl == r.shareImgUrl && l.circleShareKey == r.circleShareKey && l.shareSingleTitle == r.shareSingleTitle && l.shareContent == r.shareContent && l.shareContentTail == r.shareContentTail && l.shareStyle == r.shareStyle && l.sharePicList == r.sharePicList && l.miniProgramInfo == r.miniProgramInfo && l.captionKey == r.captionKey && l.shareIconType == r.shareIconType && l.knowledgeKey == r.knowledgeKey;
    }
    inline bool operator!=(const ShareItem&l, const ShareItem&r)
    {
        return !(l == r);
    }

    struct VoteData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VoteData";
        }
        static string MD5()
        {
            return "b408ff6725c4687c0281d3caf045d09c";
        }
        VoteData()
        :likeNumber(0),votedCount(0),voteLimit(0),voteKey(""),unlikeNumber(0)
        {
        }
        void resetDefautlt()
        {
            likeNumber = 0;
            votedCount = 0;
            voteLimit = 0;
            voteKey = "";
            unlikeNumber = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(likeNumber, 0);
            _os.write(votedCount, 1);
            _os.write(voteLimit, 2);
            _os.write(voteKey, 3);
            _os.write(unlikeNumber, 4);
            _os.write(voteAction, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(likeNumber, 0, false);
            _is.read(votedCount, 1, false);
            _is.read(voteLimit, 2, false);
            _is.read(voteKey, 3, false);
            _is.read(unlikeNumber, 4, false);
            _is.read(voteAction, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(likeNumber,"likeNumber");
            _ds.display(votedCount,"votedCount");
            _ds.display(voteLimit,"voteLimit");
            _ds.display(voteKey,"voteKey");
            _ds.display(unlikeNumber,"unlikeNumber");
            _ds.display(voteAction,"voteAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(likeNumber, true);
            _ds.displaySimple(votedCount, true);
            _ds.displaySimple(voteLimit, true);
            _ds.displaySimple(voteKey, true);
            _ds.displaySimple(unlikeNumber, true);
            _ds.displaySimple(voteAction, false);
            return _os;
        }
    public:
        taf::UInt32 likeNumber;
        taf::UInt32 votedCount;
        taf::UInt32 voteLimit;
        std::string voteKey;
        taf::UInt32 unlikeNumber;
        jce::Action voteAction;
    };
    inline bool operator==(const VoteData&l, const VoteData&r)
    {
        return l.likeNumber == r.likeNumber && l.votedCount == r.votedCount && l.voteLimit == r.voteLimit && l.voteKey == r.voteKey && l.unlikeNumber == r.unlikeNumber && l.voteAction == r.voteAction;
    }
    inline bool operator!=(const VoteData&l, const VoteData&r)
    {
        return !(l == r);
    }

    struct PosterExpansion : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PosterExpansion";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        PosterExpansion()
        :operationType(0),tagType(""),tagId("")
        {
        }
        void resetDefautlt()
        {
            operationType = 0;
            tagType = "";
            tagId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(operationType, 0);
            _os.write(tagType, 1);
            _os.write(tagId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(operationType, 0, false);
            _is.read(tagType, 1, false);
            _is.read(tagId, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(operationType,"operationType");
            _ds.display(tagType,"tagType");
            _ds.display(tagId,"tagId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(operationType, true);
            _ds.displaySimple(tagType, true);
            _ds.displaySimple(tagId, false);
            return _os;
        }
    public:
        taf::Int32 operationType;
        std::string tagType;
        std::string tagId;
    };
    inline bool operator==(const PosterExpansion&l, const PosterExpansion&r)
    {
        return l.operationType == r.operationType && l.tagType == r.tagType && l.tagId == r.tagId;
    }
    inline bool operator!=(const PosterExpansion&l, const PosterExpansion&r)
    {
        return !(l == r);
    }

    struct Poster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.Poster";
        }
        static string MD5()
        {
            return "fbfd79c9e4f3bf5d59db19df62158156";
        }
        Poster()
        :firstLine(""),secondLine(""),thirdLine(""),imageUrl(""),playCount(0),imageUiType(0),rating(0),reportParams(""),reportKey(""),playCountL(0),replaceType(0),replaceKey(""),style(0),adType(0),adKey(0),adExtend(""),fourthLine(""),gifUrl(""),pictureRatio(0),progress(0),titleColor("")
        {
        }
        void resetDefautlt()
        {
            firstLine = "";
            secondLine = "";
            thirdLine = "";
            imageUrl = "";
            playCount = 0;
            imageUiType = 0;
            rating = 0;
            reportParams = "";
            reportKey = "";
            playCountL = 0;
            replaceType = 0;
            replaceKey = "";
            style = 0;
            adType = 0;
            adKey = 0;
            adExtend = "";
            fourthLine = "";
            gifUrl = "";
            pictureRatio = 0;
            progress = 0;
            titleColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(firstLine, 0);
            _os.write(secondLine, 1);
            _os.write(thirdLine, 2);
            _os.write(markLabelList, 3);
            _os.write(imageUrl, 4);
            _os.write(playCount, 5);
            _os.write(action, 6);
            _os.write(imageUiType, 7);
            _os.write(rating, 8);
            _os.write(reportParams, 9);
            _os.write(voteData, 10);
            _os.write(reportKey, 11);
            _os.write(configstrs, 12);
            _os.write(playCountL, 13);
            _os.write(replaceType, 14);
            _os.write(replaceKey, 15);
            _os.write(style, 16);
            _os.write(debugInfo, 17);
            _os.write(adType, 18);
            _os.write(adKey, 19);
            _os.write(adExtend, 20);
            _os.write(posterExpansion, 21);
            _os.write(fourthLine, 22);
            _os.write(gifUrl, 23);
            _os.write(pictureRatio, 24);
            _os.write(progress, 25);
            _os.write(titleColor, 26);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(firstLine, 0, false);
            _is.read(secondLine, 1, false);
            _is.read(thirdLine, 2, false);
            _is.read(markLabelList, 3, false);
            _is.read(imageUrl, 4, false);
            _is.read(playCount, 5, false);
            _is.read(action, 6, false);
            _is.read(imageUiType, 7, false);
            _is.read(rating, 8, false);
            _is.read(reportParams, 9, false);
            _is.read(voteData, 10, false);
            _is.read(reportKey, 11, false);
            _is.read(configstrs, 12, false);
            _is.read(playCountL, 13, false);
            _is.read(replaceType, 14, false);
            _is.read(replaceKey, 15, false);
            _is.read(style, 16, false);
            _is.read(debugInfo, 17, false);
            _is.read(adType, 18, false);
            _is.read(adKey, 19, false);
            _is.read(adExtend, 20, false);
            _is.read(posterExpansion, 21, false);
            _is.read(fourthLine, 22, false);
            _is.read(gifUrl, 23, false);
            _is.read(pictureRatio, 24, false);
            _is.read(progress, 25, false);
            _is.read(titleColor, 26, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(firstLine,"firstLine");
            _ds.display(secondLine,"secondLine");
            _ds.display(thirdLine,"thirdLine");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(playCount,"playCount");
            _ds.display(action,"action");
            _ds.display(imageUiType,"imageUiType");
            _ds.display(rating,"rating");
            _ds.display(reportParams,"reportParams");
            _ds.display(voteData,"voteData");
            _ds.display(reportKey,"reportKey");
            _ds.display(configstrs,"configstrs");
            _ds.display(playCountL,"playCountL");
            _ds.display(replaceType,"replaceType");
            _ds.display(replaceKey,"replaceKey");
            _ds.display(style,"style");
            _ds.display(debugInfo,"debugInfo");
            _ds.display(adType,"adType");
            _ds.display(adKey,"adKey");
            _ds.display(adExtend,"adExtend");
            _ds.display(posterExpansion,"posterExpansion");
            _ds.display(fourthLine,"fourthLine");
            _ds.display(gifUrl,"gifUrl");
            _ds.display(pictureRatio,"pictureRatio");
            _ds.display(progress,"progress");
            _ds.display(titleColor,"titleColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(firstLine, true);
            _ds.displaySimple(secondLine, true);
            _ds.displaySimple(thirdLine, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(playCount, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(imageUiType, true);
            _ds.displaySimple(rating, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(voteData, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(configstrs, true);
            _ds.displaySimple(playCountL, true);
            _ds.displaySimple(replaceType, true);
            _ds.displaySimple(replaceKey, true);
            _ds.displaySimple(style, true);
            _ds.displaySimple(debugInfo, true);
            _ds.displaySimple(adType, true);
            _ds.displaySimple(adKey, true);
            _ds.displaySimple(adExtend, true);
            _ds.displaySimple(posterExpansion, true);
            _ds.displaySimple(fourthLine, true);
            _ds.displaySimple(gifUrl, true);
            _ds.displaySimple(pictureRatio, true);
            _ds.displaySimple(progress, true);
            _ds.displaySimple(titleColor, false);
            return _os;
        }
    public:
        std::string firstLine;
        std::string secondLine;
        std::string thirdLine;
        vector<jce::MarkLabel> markLabelList;
        std::string imageUrl;
        taf::UInt32 playCount;
        jce::Action action;
        taf::Char imageUiType;
        taf::Int32 rating;
        std::string reportParams;
        jce::VoteData voteData;
        std::string reportKey;
        map<std::string, std::string> configstrs;
        taf::Int64 playCountL;
        taf::Int32 replaceType;
        std::string replaceKey;
        taf::Int32 style;
        jce::DebugInfo debugInfo;
        taf::Char adType;
        taf::Int32 adKey;
        std::string adExtend;
        jce::PosterExpansion posterExpansion;
        std::string fourthLine;
        std::string gifUrl;
        taf::Float pictureRatio;
        taf::Float progress;
        std::string titleColor;
    };
    inline bool operator==(const Poster&l, const Poster&r)
    {
        return l.firstLine == r.firstLine && l.secondLine == r.secondLine && l.thirdLine == r.thirdLine && l.markLabelList == r.markLabelList && l.imageUrl == r.imageUrl && l.playCount == r.playCount && l.action == r.action && l.imageUiType == r.imageUiType && l.rating == r.rating && l.reportParams == r.reportParams && l.voteData == r.voteData && l.reportKey == r.reportKey && l.configstrs == r.configstrs && l.playCountL == r.playCountL && l.replaceType == r.replaceType && l.replaceKey == r.replaceKey && l.style == r.style && l.debugInfo == r.debugInfo && l.adType == r.adType && l.adKey == r.adKey && l.adExtend == r.adExtend && l.posterExpansion == r.posterExpansion && l.fourthLine == r.fourthLine && l.gifUrl == r.gifUrl && l.pictureRatio == r.pictureRatio && l.progress == r.progress && l.titleColor == r.titleColor;
    }
    inline bool operator!=(const Poster&l, const Poster&r)
    {
        return !(l == r);
    }

    struct KVItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.KVItem";
        }
        static string MD5()
        {
            return "aa6b9341b7d15117633209394582616f";
        }
        KVItem()
        :itemKey(""),itemValue(""),itemId("")
        {
        }
        void resetDefautlt()
        {
            itemKey = "";
            itemValue = "";
            itemId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemKey, 0);
            _os.write(itemValue, 1);
            _os.write(itemId, 2);
            _os.write(itemValues, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(itemKey, 0, true);
            _is.read(itemValue, 1, true);
            _is.read(itemId, 2, false);
            _is.read(itemValues, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemKey,"itemKey");
            _ds.display(itemValue,"itemValue");
            _ds.display(itemId,"itemId");
            _ds.display(itemValues,"itemValues");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemKey, true);
            _ds.displaySimple(itemValue, true);
            _ds.displaySimple(itemId, true);
            _ds.displaySimple(itemValues, false);
            return _os;
        }
    public:
        std::string itemKey;
        std::string itemValue;
        std::string itemId;
        vector<std::string> itemValues;
    };
    inline bool operator==(const KVItem&l, const KVItem&r)
    {
        return l.itemKey == r.itemKey && l.itemValue == r.itemValue && l.itemId == r.itemId && l.itemValues == r.itemValues;
    }
    inline bool operator!=(const KVItem&l, const KVItem&r)
    {
        return !(l == r);
    }

    struct VRSSItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VRSSItem";
        }
        static string MD5()
        {
            return "15edb3a3aaf978aa1c94effd284c9be3";
        }
        VRSSItem()
        :rssKey(""),rssId(""),rssState(0),updatetime(0),shortTitle(""),update(0),dataVersion(0),rssType(0)
        {
        }
        void resetDefautlt()
        {
            rssKey = "";
            rssId = "";
            rssState = 0;
            updatetime = 0;
            shortTitle = "";
            update = 0;
            dataVersion = 0;
            rssType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(rssKey, 0);
            _os.write(rssInfo, 1);
            _os.write(rssId, 2);
            _os.write(rssState, 3);
            _os.write(updatetime, 4);
            _os.write(shortTitle, 5);
            _os.write(detailInfo, 6);
            _os.write(update, 7);
            _os.write(dataVersion, 8);
            _os.write(rssType, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(rssKey, 0, true);
            _is.read(rssInfo, 1, true);
            _is.read(rssId, 2, false);
            _is.read(rssState, 3, false);
            _is.read(updatetime, 4, false);
            _is.read(shortTitle, 5, false);
            _is.read(detailInfo, 6, false);
            _is.read(update, 7, false);
            _is.read(dataVersion, 8, false);
            _is.read(rssType, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(rssKey,"rssKey");
            _ds.display(rssInfo,"rssInfo");
            _ds.display(rssId,"rssId");
            _ds.display(rssState,"rssState");
            _ds.display(updatetime,"updatetime");
            _ds.display(shortTitle,"shortTitle");
            _ds.display(detailInfo,"detailInfo");
            _ds.display(update,"update");
            _ds.display(dataVersion,"dataVersion");
            _ds.display(rssType,"rssType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(rssKey, true);
            _ds.displaySimple(rssInfo, true);
            _ds.displaySimple(rssId, true);
            _ds.displaySimple(rssState, true);
            _ds.displaySimple(updatetime, true);
            _ds.displaySimple(shortTitle, true);
            _ds.displaySimple(detailInfo, true);
            _ds.displaySimple(update, true);
            _ds.displaySimple(dataVersion, true);
            _ds.displaySimple(rssType, false);
            return _os;
        }
    public:
        std::string rssKey;
        jce::Poster rssInfo;
        std::string rssId;
        taf::Char rssState;
        taf::Int64 updatetime;
        std::string shortTitle;
        vector<jce::KVItem> detailInfo;
        taf::Int32 update;
        taf::Int64 dataVersion;
        taf::Char rssType;
    };
    inline bool operator==(const VRSSItem&l, const VRSSItem&r)
    {
        return l.rssKey == r.rssKey && l.rssInfo == r.rssInfo && l.rssId == r.rssId && l.rssState == r.rssState && l.updatetime == r.updatetime && l.shortTitle == r.shortTitle && l.detailInfo == r.detailInfo && l.update == r.update && l.dataVersion == r.dataVersion && l.rssType == r.rssType;
    }
    inline bool operator!=(const VRSSItem&l, const VRSSItem&r)
    {
        return !(l == r);
    }

    struct UIPadding : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UIPadding";
        }
        static string MD5()
        {
            return "8c93d07367bac72d4f4c2892aae9f0e4";
        }
        UIPadding()
        :leftPadding(0),topPadding(0),bottomPadding(0),rightPadding(0)
        {
        }
        void resetDefautlt()
        {
            leftPadding = 0;
            topPadding = 0;
            bottomPadding = 0;
            rightPadding = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(leftPadding, 0);
            _os.write(topPadding, 1);
            _os.write(bottomPadding, 2);
            _os.write(rightPadding, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(leftPadding, 0, false);
            _is.read(topPadding, 1, false);
            _is.read(bottomPadding, 2, false);
            _is.read(rightPadding, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(leftPadding,"leftPadding");
            _ds.display(topPadding,"topPadding");
            _ds.display(bottomPadding,"bottomPadding");
            _ds.display(rightPadding,"rightPadding");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(leftPadding, true);
            _ds.displaySimple(topPadding, true);
            _ds.displaySimple(bottomPadding, true);
            _ds.displaySimple(rightPadding, false);
            return _os;
        }
    public:
        taf::Int32 leftPadding;
        taf::Int32 topPadding;
        taf::Int32 bottomPadding;
        taf::Int32 rightPadding;
    };
    inline bool operator==(const UIPadding&l, const UIPadding&r)
    {
        return l.leftPadding == r.leftPadding && l.topPadding == r.topPadding && l.bottomPadding == r.bottomPadding && l.rightPadding == r.rightPadding;
    }
    inline bool operator!=(const UIPadding&l, const UIPadding&r)
    {
        return !(l == r);
    }

    struct AppInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AppInfo";
        }
        static string MD5()
        {
            return "ab4bfd65f2f1d1fb42c4b7bed0a97feb";
        }
        AppInfo()
        :downloadUrl(""),packageName(""),name(""),iconUrl(""),installTips(""),openTips(""),downloadingTips(""),bannerColor(""),description(""),openUrl(""),version(""),apkSize(""),channel(""),appId(""),versionCode(0),baseInfo(""),extInfo(""),via(""),md5(""),lauchAppExtral(""),installPolicy(0),playGameUrl(""),appType(0)
        {
        }
        void resetDefautlt()
        {
            downloadUrl = "";
            packageName = "";
            name = "";
            iconUrl = "";
            installTips = "";
            openTips = "";
            downloadingTips = "";
            bannerColor = "";
            description = "";
            openUrl = "";
            version = "";
            apkSize = "";
            channel = "";
            appId = "";
            versionCode = 0;
            baseInfo = "";
            extInfo = "";
            via = "";
            md5 = "";
            lauchAppExtral = "";
            installPolicy = 0;
            playGameUrl = "";
            appType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(downloadUrl, 0);
            _os.write(packageName, 1);
            _os.write(name, 2);
            _os.write(iconUrl, 3);
            _os.write(installTips, 4);
            _os.write(openTips, 5);
            _os.write(downloadingTips, 6);
            _os.write(bannerColor, 7);
            _os.write(description, 8);
            _os.write(openUrl, 9);
            _os.write(version, 10);
            _os.write(apkSize, 11);
            _os.write(channel, 12);
            _os.write(appId, 13);
            _os.write(versionCode, 14);
            _os.write(baseInfo, 15);
            _os.write(extInfo, 16);
            _os.write(via, 17);
            _os.write(md5, 18);
            _os.write(lauchAppExtral, 19);
            _os.write(installPolicy, 20);
            _os.write(playGameUrl, 21);
            _os.write(appType, 22);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(downloadUrl, 0, true);
            _is.read(packageName, 1, true);
            _is.read(name, 2, false);
            _is.read(iconUrl, 3, false);
            _is.read(installTips, 4, false);
            _is.read(openTips, 5, false);
            _is.read(downloadingTips, 6, false);
            _is.read(bannerColor, 7, false);
            _is.read(description, 8, false);
            _is.read(openUrl, 9, false);
            _is.read(version, 10, false);
            _is.read(apkSize, 11, false);
            _is.read(channel, 12, false);
            _is.read(appId, 13, false);
            _is.read(versionCode, 14, false);
            _is.read(baseInfo, 15, false);
            _is.read(extInfo, 16, false);
            _is.read(via, 17, false);
            _is.read(md5, 18, false);
            _is.read(lauchAppExtral, 19, false);
            _is.read(installPolicy, 20, false);
            _is.read(playGameUrl, 21, false);
            _is.read(appType, 22, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(downloadUrl,"downloadUrl");
            _ds.display(packageName,"packageName");
            _ds.display(name,"name");
            _ds.display(iconUrl,"iconUrl");
            _ds.display(installTips,"installTips");
            _ds.display(openTips,"openTips");
            _ds.display(downloadingTips,"downloadingTips");
            _ds.display(bannerColor,"bannerColor");
            _ds.display(description,"description");
            _ds.display(openUrl,"openUrl");
            _ds.display(version,"version");
            _ds.display(apkSize,"apkSize");
            _ds.display(channel,"channel");
            _ds.display(appId,"appId");
            _ds.display(versionCode,"versionCode");
            _ds.display(baseInfo,"baseInfo");
            _ds.display(extInfo,"extInfo");
            _ds.display(via,"via");
            _ds.display(md5,"md5");
            _ds.display(lauchAppExtral,"lauchAppExtral");
            _ds.display(installPolicy,"installPolicy");
            _ds.display(playGameUrl,"playGameUrl");
            _ds.display(appType,"appType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(downloadUrl, true);
            _ds.displaySimple(packageName, true);
            _ds.displaySimple(name, true);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(installTips, true);
            _ds.displaySimple(openTips, true);
            _ds.displaySimple(downloadingTips, true);
            _ds.displaySimple(bannerColor, true);
            _ds.displaySimple(description, true);
            _ds.displaySimple(openUrl, true);
            _ds.displaySimple(version, true);
            _ds.displaySimple(apkSize, true);
            _ds.displaySimple(channel, true);
            _ds.displaySimple(appId, true);
            _ds.displaySimple(versionCode, true);
            _ds.displaySimple(baseInfo, true);
            _ds.displaySimple(extInfo, true);
            _ds.displaySimple(via, true);
            _ds.displaySimple(md5, true);
            _ds.displaySimple(lauchAppExtral, true);
            _ds.displaySimple(installPolicy, true);
            _ds.displaySimple(playGameUrl, true);
            _ds.displaySimple(appType, false);
            return _os;
        }
    public:
        std::string downloadUrl;
        std::string packageName;
        std::string name;
        std::string iconUrl;
        std::string installTips;
        std::string openTips;
        std::string downloadingTips;
        std::string bannerColor;
        std::string description;
        std::string openUrl;
        std::string version;
        std::string apkSize;
        std::string channel;
        std::string appId;
        taf::Int32 versionCode;
        std::string baseInfo;
        std::string extInfo;
        std::string via;
        std::string md5;
        std::string lauchAppExtral;
        taf::Int32 installPolicy;
        std::string playGameUrl;
        taf::Int32 appType;
    };
    inline bool operator==(const AppInfo&l, const AppInfo&r)
    {
        return l.downloadUrl == r.downloadUrl && l.packageName == r.packageName && l.name == r.name && l.iconUrl == r.iconUrl && l.installTips == r.installTips && l.openTips == r.openTips && l.downloadingTips == r.downloadingTips && l.bannerColor == r.bannerColor && l.description == r.description && l.openUrl == r.openUrl && l.version == r.version && l.apkSize == r.apkSize && l.channel == r.channel && l.appId == r.appId && l.versionCode == r.versionCode && l.baseInfo == r.baseInfo && l.extInfo == r.extInfo && l.via == r.via && l.md5 == r.md5 && l.lauchAppExtral == r.lauchAppExtral && l.installPolicy == r.installPolicy && l.playGameUrl == r.playGameUrl && l.appType == r.appType;
    }
    inline bool operator!=(const AppInfo&l, const AppInfo&r)
    {
        return !(l == r);
    }

    struct RoundRecommentItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RoundRecommentItem";
        }
        static string MD5()
        {
            return "c27508c9c4c1857547422427082ff0dd";
        }
        RoundRecommentItem()
        :imageUrl(""),firstLine(""),secondLine(""),type(0),itemID(""),popTime(0),durationTime(0)
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
            firstLine = "";
            secondLine = "";
            type = 0;
            itemID = "";
            popTime = 0;
            durationTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(firstLine, 1);
            _os.write(secondLine, 2);
            _os.write(type, 3);
            _os.write(itemID, 4);
            _os.write(actionBarInfo, 5);
            _os.write(report, 6);
            _os.write(popTime, 7);
            _os.write(durationTime, 8);
            _os.write(apkInfo, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, false);
            _is.read(firstLine, 1, false);
            _is.read(secondLine, 2, false);
            _is.read(type, 3, false);
            _is.read(itemID, 4, false);
            _is.read(actionBarInfo, 5, false);
            _is.read(report, 6, false);
            _is.read(popTime, 7, false);
            _is.read(durationTime, 8, false);
            _is.read(apkInfo, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(firstLine,"firstLine");
            _ds.display(secondLine,"secondLine");
            _ds.display(type,"type");
            _ds.display(itemID,"itemID");
            _ds.display(actionBarInfo,"actionBarInfo");
            _ds.display(report,"report");
            _ds.display(popTime,"popTime");
            _ds.display(durationTime,"durationTime");
            _ds.display(apkInfo,"apkInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(firstLine, true);
            _ds.displaySimple(secondLine, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(itemID, true);
            _ds.displaySimple(actionBarInfo, true);
            _ds.displaySimple(report, true);
            _ds.displaySimple(popTime, true);
            _ds.displaySimple(durationTime, true);
            _ds.displaySimple(apkInfo, false);
            return _os;
        }
    public:
        std::string imageUrl;
        std::string firstLine;
        std::string secondLine;
        taf::Int32 type;
        std::string itemID;
        jce::ActionBarInfo actionBarInfo;
        jce::ExtraReportKV report;
        taf::Int32 popTime;
        taf::Float durationTime;
        jce::AppInfo apkInfo;
    };
    inline bool operator==(const RoundRecommentItem&l, const RoundRecommentItem&r)
    {
        return l.imageUrl == r.imageUrl && l.firstLine == r.firstLine && l.secondLine == r.secondLine && l.type == r.type && l.itemID == r.itemID && l.actionBarInfo == r.actionBarInfo && l.report == r.report && l.popTime == r.popTime && l.durationTime == r.durationTime && l.apkInfo == r.apkInfo;
    }
    inline bool operator!=(const RoundRecommentItem&l, const RoundRecommentItem&r)
    {
        return !(l == r);
    }

    struct IconTagText : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.IconTagText";
        }
        static string MD5()
        {
            return "907a8a0e42d52aabbf479e80b3992d73";
        }
        IconTagText()
        :text(""),imgUrl(""),extraType(""),tagClass(0),reportKey(""),reportParams(""),displayType(0),type(0),formattedTime("")
        {
        }
        void resetDefautlt()
        {
            text = "";
            imgUrl = "";
            extraType = "";
            tagClass = 0;
            reportKey = "";
            reportParams = "";
            displayType = 0;
            type = 0;
            formattedTime = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(text, 0);
            _os.write(markLabelList, 1);
            _os.write(action, 2);
            _os.write(imgUrl, 3);
            _os.write(extraType, 4);
            _os.write(actionBar, 5);
            _os.write(tagClass, 6);
            _os.write(reportKey, 7);
            _os.write(reportParams, 8);
            _os.write(shareItem, 9);
            _os.write(displayType, 10);
            _os.write(vRSSItem, 11);
            _os.write(type, 12);
            _os.write(adHotWordInfo, 13);
            _os.write(formattedTime, 14);
            _os.write(recommendItem, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(text, 0, true);
            _is.read(markLabelList, 1, false);
            _is.read(action, 2, false);
            _is.read(imgUrl, 3, false);
            _is.read(extraType, 4, false);
            _is.read(actionBar, 5, false);
            _is.read(tagClass, 6, false);
            _is.read(reportKey, 7, false);
            _is.read(reportParams, 8, false);
            _is.read(shareItem, 9, false);
            _is.read(displayType, 10, false);
            _is.read(vRSSItem, 11, false);
            _is.read(type, 12, false);
            _is.read(adHotWordInfo, 13, false);
            _is.read(formattedTime, 14, false);
            _is.read(recommendItem, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(text,"text");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(action,"action");
            _ds.display(imgUrl,"imgUrl");
            _ds.display(extraType,"extraType");
            _ds.display(actionBar,"actionBar");
            _ds.display(tagClass,"tagClass");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(shareItem,"shareItem");
            _ds.display(displayType,"displayType");
            _ds.display(vRSSItem,"vRSSItem");
            _ds.display(type,"type");
            _ds.display(adHotWordInfo,"adHotWordInfo");
            _ds.display(formattedTime,"formattedTime");
            _ds.display(recommendItem,"recommendItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(text, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(imgUrl, true);
            _ds.displaySimple(extraType, true);
            _ds.displaySimple(actionBar, true);
            _ds.displaySimple(tagClass, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(displayType, true);
            _ds.displaySimple(vRSSItem, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(adHotWordInfo, true);
            _ds.displaySimple(formattedTime, true);
            _ds.displaySimple(recommendItem, false);
            return _os;
        }
    public:
        std::string text;
        vector<jce::MarkLabel> markLabelList;
        jce::Action action;
        std::string imgUrl;
        std::string extraType;
        jce::ActionBarInfo actionBar;
        taf::Char tagClass;
        std::string reportKey;
        std::string reportParams;
        jce::ShareItem shareItem;
        taf::Char displayType;
        jce::VRSSItem vRSSItem;
        taf::Int32 type;
        jce::AdHotWordInfo adHotWordInfo;
        std::string formattedTime;
        jce::RoundRecommentItem recommendItem;
    };
    inline bool operator==(const IconTagText&l, const IconTagText&r)
    {
        return l.text == r.text && l.markLabelList == r.markLabelList && l.action == r.action && l.imgUrl == r.imgUrl && l.extraType == r.extraType && l.actionBar == r.actionBar && l.tagClass == r.tagClass && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.shareItem == r.shareItem && l.displayType == r.displayType && l.vRSSItem == r.vRSSItem && l.type == r.type && l.adHotWordInfo == r.adHotWordInfo && l.formattedTime == r.formattedTime && l.recommendItem == r.recommendItem;
    }
    inline bool operator!=(const IconTagText&l, const IconTagText&r)
    {
        return !(l == r);
    }

    struct TempletItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TempletItem";
        }
        static string MD5()
        {
            return "64f6139ff3caf95bd3854a56eae7c98e";
        }
        TempletItem()
        :itemType(jce::EnumONAMultPoster)
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)itemType, 0);
            _os.write(data, 1);
            _os.write(debugInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = jce::EnumONAMultPoster;
            _is.read(eTemp0, 0, true);
            itemType = (jce::EONAViewType)eTemp0;
            _is.read(data, 1, false);
            _is.read(debugInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)itemType,"itemType");
            _ds.display(data,"data");
            _ds.display(debugInfo,"debugInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)itemType, true);
            _ds.displaySimple(data, true);
            _ds.displaySimple(debugInfo, false);
            return _os;
        }
    public:
        jce::EONAViewType itemType;
        vector<taf::Char> data;
        jce::DebugInfo debugInfo;
    };
    inline bool operator==(const TempletItem&l, const TempletItem&r)
    {
        return l.itemType == r.itemType && l.data == r.data && l.debugInfo == r.debugInfo;
    }
    inline bool operator!=(const TempletItem&l, const TempletItem&r)
    {
        return !(l == r);
    }

    struct TempletLine : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TempletLine";
        }
        static string MD5()
        {
            return "6d25fa408b6252ec41200839fa56d5a0";
        }
        TempletLine()
        :lineId(""),groupId(""),increaseId(0)
        {
        }
        void resetDefautlt()
        {
            lineId = "";
            groupId = "";
            increaseId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lineId, 0);
            _os.write(groupId, 1);
            _os.write(item, 2);
            _os.write(increaseId, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lineId, 0, true);
            _is.read(groupId, 1, true);
            _is.read(item, 2, true);
            _is.read(increaseId, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lineId,"lineId");
            _ds.display(groupId,"groupId");
            _ds.display(item,"item");
            _ds.display(increaseId,"increaseId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lineId, true);
            _ds.displaySimple(groupId, true);
            _ds.displaySimple(item, true);
            _ds.displaySimple(increaseId, false);
            return _os;
        }
    public:
        std::string lineId;
        std::string groupId;
        jce::TempletItem item;
        taf::Int64 increaseId;
    };
    inline bool operator==(const TempletLine&l, const TempletLine&r)
    {
        return l.lineId == r.lineId && l.groupId == r.groupId && l.item == r.item && l.increaseId == r.increaseId;
    }
    inline bool operator!=(const TempletLine&l, const TempletLine&r)
    {
        return !(l == r);
    }

    struct ChannelTriggerType : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelTriggerType";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        ChannelTriggerType()
        :triggerName(""),index(0)
        {
        }
        void resetDefautlt()
        {
            triggerName = "";
            index = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(triggerName, 0);
            _os.write(index, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(triggerName, 0, true);
            _is.read(index, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(triggerName,"triggerName");
            _ds.display(index,"index");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(triggerName, true);
            _ds.displaySimple(index, false);
            return _os;
        }
    public:
        std::string triggerName;
        taf::Int32 index;
    };
    inline bool operator==(const ChannelTriggerType&l, const ChannelTriggerType&r)
    {
        return l.triggerName == r.triggerName && l.index == r.index;
    }
    inline bool operator!=(const ChannelTriggerType&l, const ChannelTriggerType&r)
    {
        return !(l == r);
    }

    struct ChannelTrigger : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelTrigger";
        }
        static string MD5()
        {
            return "1e41778d06c64175ad0a00e2de72c1d4";
        }
        ChannelTrigger()
        :prefixId(""),index(0)
        {
        }
        void resetDefautlt()
        {
            prefixId = "";
            index = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(channelTriggerType, 0);
            _os.write(prefixId, 1);
            _os.write(index, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(channelTriggerType, 0, true);
            _is.read(prefixId, 1, true);
            _is.read(index, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(channelTriggerType,"channelTriggerType");
            _ds.display(prefixId,"prefixId");
            _ds.display(index,"index");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(channelTriggerType, true);
            _ds.displaySimple(prefixId, true);
            _ds.displaySimple(index, false);
            return _os;
        }
    public:
        jce::ChannelTriggerType channelTriggerType;
        std::string prefixId;
        taf::Int32 index;
    };
    inline bool operator==(const ChannelTrigger&l, const ChannelTrigger&r)
    {
        return l.channelTriggerType == r.channelTriggerType && l.prefixId == r.prefixId && l.index == r.index;
    }
    inline bool operator!=(const ChannelTrigger&l, const ChannelTrigger&r)
    {
        return !(l == r);
    }

    struct ChannelItemInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelItemInfo";
        }
        static string MD5()
        {
            return "1efd54d3ec1e78e4b8868b1c7518f7b6";
        }
        ChannelItemInfo()
        :viewType(0),param(""),channelBusiness(0)
        {
        }
        void resetDefautlt()
        {
            viewType = 0;
            param = "";
            channelBusiness = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(viewType, 0);
            _os.write(param, 1);
            _os.write(channelBusiness, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(viewType, 0, true);
            _is.read(param, 1, true);
            _is.read(channelBusiness, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(viewType,"viewType");
            _ds.display(param,"param");
            _ds.display(channelBusiness,"channelBusiness");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(viewType, true);
            _ds.displaySimple(param, true);
            _ds.displaySimple(channelBusiness, false);
            return _os;
        }
    public:
        taf::Int32 viewType;
        std::string param;
        taf::Char channelBusiness;
    };
    inline bool operator==(const ChannelItemInfo&l, const ChannelItemInfo&r)
    {
        return l.viewType == r.viewType && l.param == r.param && l.channelBusiness == r.channelBusiness;
    }
    inline bool operator!=(const ChannelItemInfo&l, const ChannelItemInfo&r)
    {
        return !(l == r);
    }

    struct TabBarItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TabBarItem";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        TabBarItem()
        :text(""),normalTextColor(""),selectedTextColor(""),normalIconURL(""),selectedIconURL("")
        {
        }
        void resetDefautlt()
        {
            text = "";
            normalTextColor = "";
            selectedTextColor = "";
            normalIconURL = "";
            selectedIconURL = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(text, 0);
            _os.write(normalTextColor, 1);
            _os.write(selectedTextColor, 2);
            _os.write(normalIconURL, 3);
            _os.write(selectedIconURL, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(text, 0, false);
            _is.read(normalTextColor, 1, false);
            _is.read(selectedTextColor, 2, false);
            _is.read(normalIconURL, 3, false);
            _is.read(selectedIconURL, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(text,"text");
            _ds.display(normalTextColor,"normalTextColor");
            _ds.display(selectedTextColor,"selectedTextColor");
            _ds.display(normalIconURL,"normalIconURL");
            _ds.display(selectedIconURL,"selectedIconURL");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(text, true);
            _ds.displaySimple(normalTextColor, true);
            _ds.displaySimple(selectedTextColor, true);
            _ds.displaySimple(normalIconURL, true);
            _ds.displaySimple(selectedIconURL, false);
            return _os;
        }
    public:
        std::string text;
        std::string normalTextColor;
        std::string selectedTextColor;
        std::string normalIconURL;
        std::string selectedIconURL;
    };
    inline bool operator==(const TabBarItem&l, const TabBarItem&r)
    {
        return l.text == r.text && l.normalTextColor == r.normalTextColor && l.selectedTextColor == r.selectedTextColor && l.normalIconURL == r.normalIconURL && l.selectedIconURL == r.selectedIconURL;
    }
    inline bool operator!=(const TabBarItem&l, const TabBarItem&r)
    {
        return !(l == r);
    }

    struct TabBarItemsConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TabBarItemsConfig";
        }
        static string MD5()
        {
            return "718ee7d5028116c4f20690bc337e39c9";
        }
        TabBarItemsConfig()
        :backgroundColor(""),backgroundImageURL("")
        {
        }
        void resetDefautlt()
        {
            backgroundColor = "";
            backgroundImageURL = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(backgroundColor, 0);
            _os.write(backgroundImageURL, 1);
            _os.write(tabBarItemsMap, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(backgroundColor, 0, false);
            _is.read(backgroundImageURL, 1, false);
            _is.read(tabBarItemsMap, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(backgroundColor,"backgroundColor");
            _ds.display(backgroundImageURL,"backgroundImageURL");
            _ds.display(tabBarItemsMap,"tabBarItemsMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(backgroundColor, true);
            _ds.displaySimple(backgroundImageURL, true);
            _ds.displaySimple(tabBarItemsMap, false);
            return _os;
        }
    public:
        std::string backgroundColor;
        std::string backgroundImageURL;
        map<std::string, jce::TabBarItem> tabBarItemsMap;
    };
    inline bool operator==(const TabBarItemsConfig&l, const TabBarItemsConfig&r)
    {
        return l.backgroundColor == r.backgroundColor && l.backgroundImageURL == r.backgroundImageURL && l.tabBarItemsMap == r.tabBarItemsMap;
    }
    inline bool operator!=(const TabBarItemsConfig&l, const TabBarItemsConfig&r)
    {
        return !(l == r);
    }

    struct ChannelItemConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelItemConfig";
        }
        static string MD5()
        {
            return "8f9c3e5a570b8b1ed7729497f60b339f";
        }
        ChannelItemConfig()
        :backgroundColor(""),textSelectColor(""),textNormalColor(""),searchBarColor(""),iconColor(""),animationFileUrl(""),animationPlayTimes(1),animationShowLimit(1),bgImageUrl(""),textImageUrl("")
        {
        }
        void resetDefautlt()
        {
            backgroundColor = "";
            textSelectColor = "";
            textNormalColor = "";
            searchBarColor = "";
            iconColor = "";
            animationFileUrl = "";
            animationPlayTimes = 1;
            animationShowLimit = 1;
            bgImageUrl = "";
            textImageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(backgroundColor, 0);
            _os.write(textSelectColor, 1);
            _os.write(textNormalColor, 2);
            _os.write(searchBarColor, 3);
            _os.write(iconColor, 4);
            _os.write(animationFileUrl, 5);
            _os.write(animationPlayTimes, 6);
            _os.write(animationShowLimit, 7);
            _os.write(bgImageUrl, 8);
            _os.write(expandConfig, 9);
            _os.write(tabBarConfig, 10);
            _os.write(textImageUrl, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(backgroundColor, 0, false);
            _is.read(textSelectColor, 1, false);
            _is.read(textNormalColor, 2, false);
            _is.read(searchBarColor, 3, false);
            _is.read(iconColor, 4, false);
            _is.read(animationFileUrl, 5, false);
            _is.read(animationPlayTimes, 6, false);
            _is.read(animationShowLimit, 7, false);
            _is.read(bgImageUrl, 8, false);
            _is.read(expandConfig, 9, false);
            _is.read(tabBarConfig, 10, false);
            _is.read(textImageUrl, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(backgroundColor,"backgroundColor");
            _ds.display(textSelectColor,"textSelectColor");
            _ds.display(textNormalColor,"textNormalColor");
            _ds.display(searchBarColor,"searchBarColor");
            _ds.display(iconColor,"iconColor");
            _ds.display(animationFileUrl,"animationFileUrl");
            _ds.display(animationPlayTimes,"animationPlayTimes");
            _ds.display(animationShowLimit,"animationShowLimit");
            _ds.display(bgImageUrl,"bgImageUrl");
            _ds.display(expandConfig,"expandConfig");
            _ds.display(tabBarConfig,"tabBarConfig");
            _ds.display(textImageUrl,"textImageUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(backgroundColor, true);
            _ds.displaySimple(textSelectColor, true);
            _ds.displaySimple(textNormalColor, true);
            _ds.displaySimple(searchBarColor, true);
            _ds.displaySimple(iconColor, true);
            _ds.displaySimple(animationFileUrl, true);
            _ds.displaySimple(animationPlayTimes, true);
            _ds.displaySimple(animationShowLimit, true);
            _ds.displaySimple(bgImageUrl, true);
            _ds.displaySimple(expandConfig, true);
            _ds.displaySimple(tabBarConfig, true);
            _ds.displaySimple(textImageUrl, false);
            return _os;
        }
    public:
        std::string backgroundColor;
        std::string textSelectColor;
        std::string textNormalColor;
        std::string searchBarColor;
        std::string iconColor;
        std::string animationFileUrl;
        taf::Int32 animationPlayTimes;
        taf::Int32 animationShowLimit;
        std::string bgImageUrl;
        map<std::string, std::string> expandConfig;
        jce::TabBarItemsConfig tabBarConfig;
        std::string textImageUrl;
    };
    inline bool operator==(const ChannelItemConfig&l, const ChannelItemConfig&r)
    {
        return l.backgroundColor == r.backgroundColor && l.textSelectColor == r.textSelectColor && l.textNormalColor == r.textNormalColor && l.searchBarColor == r.searchBarColor && l.iconColor == r.iconColor && l.animationFileUrl == r.animationFileUrl && l.animationPlayTimes == r.animationPlayTimes && l.animationShowLimit == r.animationShowLimit && l.bgImageUrl == r.bgImageUrl && l.expandConfig == r.expandConfig && l.tabBarConfig == r.tabBarConfig && l.textImageUrl == r.textImageUrl;
    }
    inline bool operator!=(const ChannelItemConfig&l, const ChannelItemConfig&r)
    {
        return !(l == r);
    }

    struct ChannelInsertInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelInsertInfo";
        }
        static string MD5()
        {
            return "52b8ae173fed36231f7f192330d2b698";
        }
        ChannelInsertInfo()
        :id(""),position(0),insertTime(0)
        {
        }
        void resetDefautlt()
        {
            id = "";
            position = 0;
            insertTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(position, 1);
            _os.write(insertTime, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, true);
            _is.read(position, 1, true);
            _is.read(insertTime, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(position,"position");
            _ds.display(insertTime,"insertTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(position, true);
            _ds.displaySimple(insertTime, false);
            return _os;
        }
    public:
        std::string id;
        taf::Int32 position;
        taf::UInt32 insertTime;
    };
    inline bool operator==(const ChannelInsertInfo&l, const ChannelInsertInfo&r)
    {
        return l.id == r.id && l.position == r.position && l.insertTime == r.insertTime;
    }
    inline bool operator!=(const ChannelInsertInfo&l, const ChannelInsertInfo&r)
    {
        return !(l == r);
    }

    struct ChannelInsertItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelInsertItem";
        }
        static string MD5()
        {
            return "bd27b24f9277c2c011ece7af83cf2a21";
        }
        ChannelInsertItem()
        :normalTitle(""),selectedTitle(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            normalTitle = "";
            selectedTitle = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(info, 0);
            _os.write(normalTitle, 1);
            _os.write(selectedTitle, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(info, 0, true);
            _is.read(normalTitle, 1, false);
            _is.read(selectedTitle, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(info,"info");
            _ds.display(normalTitle,"normalTitle");
            _ds.display(selectedTitle,"selectedTitle");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(info, true);
            _ds.displaySimple(normalTitle, true);
            _ds.displaySimple(selectedTitle, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::ChannelInsertInfo info;
        std::string normalTitle;
        std::string selectedTitle;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ChannelInsertItem&l, const ChannelInsertItem&r)
    {
        return l.info == r.info && l.normalTitle == r.normalTitle && l.selectedTitle == r.selectedTitle && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ChannelInsertItem&l, const ChannelInsertItem&r)
    {
        return !(l == r);
    }

    struct ChannelListItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelListItem";
        }
        static string MD5()
        {
            return "cabd17f80243e40ba847b62b3d23365d";
        }
        ChannelListItem()
        :title(""),id(""),iconUrl(""),isHead(true),pos(0),searchType(0),timeOut(0),createdTime(0),searchDatakey(""),showLastReadPositionFlag(0),insertNewLineProgress(-1),headerVisiblityFlag(1),type(""),isFixPos(0),subTitle(""),subDataKey("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            id = "";
            iconUrl = "";
            isHead = true;
            pos = 0;
            searchType = 0;
            timeOut = 0;
            createdTime = 0;
            searchDatakey = "";
            showLastReadPositionFlag = 0;
            insertNewLineProgress = -1;
            headerVisiblityFlag = 1;
            type = "";
            isFixPos = 0;
            subTitle = "";
            subDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(id, 1);
            _os.write(iconUrl, 2);
            _os.write(action, 3);
            _os.write(isHead, 4);
            _os.write(pos, 5);
            _os.write(searchType, 6);
            _os.write(subChannelListItem, 7);
            _os.write(timeOut, 8);
            _os.write(labels, 9);
            _os.write(createdTime, 10);
            _os.write(searchTags, 11);
            _os.write(searchDatakey, 12);
            _os.write(showLastReadPositionFlag, 13);
            _os.write(insertNewLineProgress, 14);
            _os.write(headerVisiblityFlag, 15);
            _os.write(type, 16);
            _os.write(channelTrigger, 17);
            _os.write(channelItemInfo, 18);
            _os.write(isFixPos, 19);
            _os.write(channelItemConfig, 20);
            _os.write(categoryIdList, 21);
            _os.write(subTitle, 22);
            _os.write(channelInsertItem, 23);
            _os.write(subDataKey, 24);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(id, 1, true);
            _is.read(iconUrl, 2, true);
            _is.read(action, 3, true);
            _is.read(isHead, 4, true);
            _is.read(pos, 5, false);
            _is.read(searchType, 6, false);
            _is.read(subChannelListItem, 7, false);
            _is.read(timeOut, 8, false);
            _is.read(labels, 9, false);
            _is.read(createdTime, 10, false);
            _is.read(searchTags, 11, false);
            _is.read(searchDatakey, 12, false);
            _is.read(showLastReadPositionFlag, 13, false);
            _is.read(insertNewLineProgress, 14, false);
            _is.read(headerVisiblityFlag, 15, false);
            _is.read(type, 16, false);
            _is.read(channelTrigger, 17, false);
            _is.read(channelItemInfo, 18, false);
            _is.read(isFixPos, 19, false);
            _is.read(channelItemConfig, 20, false);
            _is.read(categoryIdList, 21, false);
            _is.read(subTitle, 22, false);
            _is.read(channelInsertItem, 23, false);
            _is.read(subDataKey, 24, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(id,"id");
            _ds.display(iconUrl,"iconUrl");
            _ds.display(action,"action");
            _ds.display(isHead,"isHead");
            _ds.display(pos,"pos");
            _ds.display(searchType,"searchType");
            _ds.display(subChannelListItem,"subChannelListItem");
            _ds.display(timeOut,"timeOut");
            _ds.display(labels,"labels");
            _ds.display(createdTime,"createdTime");
            _ds.display(searchTags,"searchTags");
            _ds.display(searchDatakey,"searchDatakey");
            _ds.display(showLastReadPositionFlag,"showLastReadPositionFlag");
            _ds.display(insertNewLineProgress,"insertNewLineProgress");
            _ds.display(headerVisiblityFlag,"headerVisiblityFlag");
            _ds.display(type,"type");
            _ds.display(channelTrigger,"channelTrigger");
            _ds.display(channelItemInfo,"channelItemInfo");
            _ds.display(isFixPos,"isFixPos");
            _ds.display(channelItemConfig,"channelItemConfig");
            _ds.display(categoryIdList,"categoryIdList");
            _ds.display(subTitle,"subTitle");
            _ds.display(channelInsertItem,"channelInsertItem");
            _ds.display(subDataKey,"subDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(id, true);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(isHead, true);
            _ds.displaySimple(pos, true);
            _ds.displaySimple(searchType, true);
            _ds.displaySimple(subChannelListItem, true);
            _ds.displaySimple(timeOut, true);
            _ds.displaySimple(labels, true);
            _ds.displaySimple(createdTime, true);
            _ds.displaySimple(searchTags, true);
            _ds.displaySimple(searchDatakey, true);
            _ds.displaySimple(showLastReadPositionFlag, true);
            _ds.displaySimple(insertNewLineProgress, true);
            _ds.displaySimple(headerVisiblityFlag, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(channelTrigger, true);
            _ds.displaySimple(channelItemInfo, true);
            _ds.displaySimple(isFixPos, true);
            _ds.displaySimple(channelItemConfig, true);
            _ds.displaySimple(categoryIdList, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(channelInsertItem, true);
            _ds.displaySimple(subDataKey, false);
            return _os;
        }
    public:
        std::string title;
        std::string id;
        std::string iconUrl;
        jce::Action action;
        taf::Bool isHead;
        taf::Int32 pos;
        taf::Int32 searchType;
        vector<jce::ChannelListItem> subChannelListItem;
        taf::Int32 timeOut;
        map<std::string, jce::IconTagText> labels;
        taf::Int64 createdTime;
        vector<jce::IconTagText> searchTags;
        std::string searchDatakey;
        taf::Int32 showLastReadPositionFlag;
        taf::Int32 insertNewLineProgress;
        taf::Int32 headerVisiblityFlag;
        std::string type;
        vector<jce::ChannelTrigger> channelTrigger;
        jce::ChannelItemInfo channelItemInfo;
        taf::Int32 isFixPos;
        jce::ChannelItemConfig channelItemConfig;
        vector<std::string> categoryIdList;
        std::string subTitle;
        jce::ChannelInsertItem channelInsertItem;
        std::string subDataKey;
    };
    inline bool operator==(const ChannelListItem&l, const ChannelListItem&r)
    {
        return l.title == r.title && l.id == r.id && l.iconUrl == r.iconUrl && l.action == r.action && l.isHead == r.isHead && l.pos == r.pos && l.searchType == r.searchType && l.subChannelListItem == r.subChannelListItem && l.timeOut == r.timeOut && l.labels == r.labels && l.createdTime == r.createdTime && l.searchTags == r.searchTags && l.searchDatakey == r.searchDatakey && l.showLastReadPositionFlag == r.showLastReadPositionFlag && l.insertNewLineProgress == r.insertNewLineProgress && l.headerVisiblityFlag == r.headerVisiblityFlag && l.type == r.type && l.channelTrigger == r.channelTrigger && l.channelItemInfo == r.channelItemInfo && l.isFixPos == r.isFixPos && l.channelItemConfig == r.channelItemConfig && l.categoryIdList == r.categoryIdList && l.subTitle == r.subTitle && l.channelInsertItem == r.channelInsertItem && l.subDataKey == r.subDataKey;
    }
    inline bool operator!=(const ChannelListItem&l, const ChannelListItem&r)
    {
        return !(l == r);
    }

    struct ChannelCategory : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelCategory";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        ChannelCategory()
        :id(""),name("")
        {
        }
        void resetDefautlt()
        {
            id = "";
            name = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(name, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, true);
            _is.read(name, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(name,"name");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(name, false);
            return _os;
        }
    public:
        std::string id;
        std::string name;
    };
    inline bool operator==(const ChannelCategory&l, const ChannelCategory&r)
    {
        return l.id == r.id && l.name == r.name;
    }
    inline bool operator!=(const ChannelCategory&l, const ChannelCategory&r)
    {
        return !(l == r);
    }

    struct Image : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.Image";
        }
        static string MD5()
        {
            return "31b837dee0e3f970aa2d14771bf49d74";
        }
        Image()
        :imageUrl(""),width(0),height(0),color(0)
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
            width = 0;
            height = 0;
            color = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(width, 1);
            _os.write(height, 2);
            _os.write(color, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, true);
            _is.read(width, 1, false);
            _is.read(height, 2, false);
            _is.read(color, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(width,"width");
            _ds.display(height,"height");
            _ds.display(color,"color");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(width, true);
            _ds.displaySimple(height, true);
            _ds.displaySimple(color, false);
            return _os;
        }
    public:
        std::string imageUrl;
        taf::Int32 width;
        taf::Int32 height;
        taf::Int32 color;
    };
    inline bool operator==(const Image&l, const Image&r)
    {
        return l.imageUrl == r.imageUrl && l.width == r.width && l.height == r.height && l.color == r.color;
    }
    inline bool operator!=(const Image&l, const Image&r)
    {
        return !(l == r);
    }

    struct CircleShortVideoUrl : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleShortVideoUrl";
        }
        static string MD5()
        {
            return "75b04c60306d275c56e77e9fe0f781d6";
        }
        CircleShortVideoUrl()
        :vid(""),h5Url(""),time(0),imageUrl(""),playUrl(""),description(""),isDemoVideo(false),reportParams(""),originVid(""),videoFileSize(0),reportKey(""),title(""),originCid("")
        {
        }
        void resetDefautlt()
        {
            vid = "";
            h5Url = "";
            time = 0;
            imageUrl = "";
            playUrl = "";
            description = "";
            isDemoVideo = false;
            reportParams = "";
            originVid = "";
            videoFileSize = 0;
            reportKey = "";
            title = "";
            originCid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(h5Url, 1);
            _os.write(time, 2);
            _os.write(imageUrl, 3);
            _os.write(playUrl, 4);
            _os.write(description, 5);
            _os.write(isDemoVideo, 6);
            _os.write(reportParams, 7);
            _os.write(originVid, 8);
            _os.write(videoFileSize, 9);
            _os.write(reportKey, 10);
            _os.write(title, 11);
            _os.write(originCid, 12);
            _os.write(immersiveAction, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, true);
            _is.read(h5Url, 1, true);
            _is.read(time, 2, true);
            _is.read(imageUrl, 3, true);
            _is.read(playUrl, 4, false);
            _is.read(description, 5, false);
            _is.read(isDemoVideo, 6, false);
            _is.read(reportParams, 7, false);
            _is.read(originVid, 8, false);
            _is.read(videoFileSize, 9, false);
            _is.read(reportKey, 10, false);
            _is.read(title, 11, false);
            _is.read(originCid, 12, false);
            _is.read(immersiveAction, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(h5Url,"h5Url");
            _ds.display(time,"time");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(playUrl,"playUrl");
            _ds.display(description,"description");
            _ds.display(isDemoVideo,"isDemoVideo");
            _ds.display(reportParams,"reportParams");
            _ds.display(originVid,"originVid");
            _ds.display(videoFileSize,"videoFileSize");
            _ds.display(reportKey,"reportKey");
            _ds.display(title,"title");
            _ds.display(originCid,"originCid");
            _ds.display(immersiveAction,"immersiveAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(h5Url, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(playUrl, true);
            _ds.displaySimple(description, true);
            _ds.displaySimple(isDemoVideo, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(originVid, true);
            _ds.displaySimple(videoFileSize, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(originCid, true);
            _ds.displaySimple(immersiveAction, false);
            return _os;
        }
    public:
        std::string vid;
        std::string h5Url;
        taf::Int64 time;
        std::string imageUrl;
        std::string playUrl;
        std::string description;
        taf::Bool isDemoVideo;
        std::string reportParams;
        std::string originVid;
        taf::Int64 videoFileSize;
        std::string reportKey;
        std::string title;
        std::string originCid;
        jce::Action immersiveAction;
    };
    inline bool operator==(const CircleShortVideoUrl&l, const CircleShortVideoUrl&r)
    {
        return l.vid == r.vid && l.h5Url == r.h5Url && l.time == r.time && l.imageUrl == r.imageUrl && l.playUrl == r.playUrl && l.description == r.description && l.isDemoVideo == r.isDemoVideo && l.reportParams == r.reportParams && l.originVid == r.originVid && l.videoFileSize == r.videoFileSize && l.reportKey == r.reportKey && l.title == r.title && l.originCid == r.originCid && l.immersiveAction == r.immersiveAction;
    }
    inline bool operator!=(const CircleShortVideoUrl&l, const CircleShortVideoUrl&r)
    {
        return !(l == r);
    }

    struct VideoImage : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoImage";
        }
        static string MD5()
        {
            return "4a6bd1190f8d912ef4ba511eb600d0d9";
        }
        VideoImage()
        :imageUrl(""),imagePreUrl(""),videoFlag(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
            imagePreUrl = "";
            videoFlag = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(imagePreUrl, 1);
            _os.write(videoFlag, 2);
            _os.write(action, 3);
            _os.write(markLabelList, 4);
            _os.write(image, 5);
            _os.write(imagePre, 6);
            _os.write(video, 7);
            _os.write(reportKey, 8);
            _os.write(reportParams, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, true);
            _is.read(imagePreUrl, 1, false);
            _is.read(videoFlag, 2, false);
            _is.read(action, 3, false);
            _is.read(markLabelList, 4, false);
            _is.read(image, 5, false);
            _is.read(imagePre, 6, false);
            _is.read(video, 7, false);
            _is.read(reportKey, 8, false);
            _is.read(reportParams, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(imagePreUrl,"imagePreUrl");
            _ds.display(videoFlag,"videoFlag");
            _ds.display(action,"action");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(image,"image");
            _ds.display(imagePre,"imagePre");
            _ds.display(video,"video");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(imagePreUrl, true);
            _ds.displaySimple(videoFlag, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(image, true);
            _ds.displaySimple(imagePre, true);
            _ds.displaySimple(video, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string imageUrl;
        std::string imagePreUrl;
        taf::Int32 videoFlag;
        jce::Action action;
        vector<jce::MarkLabel> markLabelList;
        jce::Image image;
        jce::Image imagePre;
        jce::CircleShortVideoUrl video;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const VideoImage&l, const VideoImage&r)
    {
        return l.imageUrl == r.imageUrl && l.imagePreUrl == r.imagePreUrl && l.videoFlag == r.videoFlag && l.action == r.action && l.markLabelList == r.markLabelList && l.image == r.image && l.imagePre == r.imagePre && l.video == r.video && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const VideoImage&l, const VideoImage&r)
    {
        return !(l == r);
    }

    struct LBSInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LBSInfo";
        }
        static string MD5()
        {
            return "4ae501e2053701239edaaa8317fe9a33";
        }
        LBSInfo()
        :poiName(""),lon(0),lat(0),address("")
        {
        }
        void resetDefautlt()
        {
            poiName = "";
            lon = 0;
            lat = 0;
            address = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poiName, 0);
            _os.write(lon, 1);
            _os.write(lat, 2);
            _os.write(address, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poiName, 0, true);
            _is.read(lon, 1, true);
            _is.read(lat, 2, true);
            _is.read(address, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poiName,"poiName");
            _ds.display(lon,"lon");
            _ds.display(lat,"lat");
            _ds.display(address,"address");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poiName, true);
            _ds.displaySimple(lon, true);
            _ds.displaySimple(lat, true);
            _ds.displaySimple(address, false);
            return _os;
        }
    public:
        std::string poiName;
        taf::Double lon;
        taf::Double lat;
        std::string address;
    };
    inline bool operator==(const LBSInfo&l, const LBSInfo&r)
    {
        return l.poiName == r.poiName && l.lon == r.lon && l.lat == r.lat && l.address == r.address;
    }
    inline bool operator!=(const LBSInfo&l, const LBSInfo&r)
    {
        return !(l == r);
    }

    struct CalendarItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CalendarItem";
        }
        static string MD5()
        {
            return "5b003c6bfa1f859a186d349ba5745d79";
        }
        CalendarItem()
        :startTime(0),isFullDay(true),description("")
        {
        }
        void resetDefautlt()
        {
            startTime = 0;
            isFullDay = true;
            description = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(startTime, 0);
            _os.write(isFullDay, 1);
            _os.write(description, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(startTime, 0, false);
            _is.read(isFullDay, 1, false);
            _is.read(description, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(startTime,"startTime");
            _ds.display(isFullDay,"isFullDay");
            _ds.display(description,"description");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(isFullDay, true);
            _ds.displaySimple(description, false);
            return _os;
        }
    public:
        taf::Int64 startTime;
        taf::Bool isFullDay;
        std::string description;
    };
    inline bool operator==(const CalendarItem&l, const CalendarItem&r)
    {
        return l.startTime == r.startTime && l.isFullDay == r.isFullDay && l.description == r.description;
    }
    inline bool operator!=(const CalendarItem&l, const CalendarItem&r)
    {
        return !(l == r);
    }

    struct VideoAttentItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoAttentItem";
        }
        static string MD5()
        {
            return "0558431d64bd7894372ce2c1469bb9e1";
        }
        VideoAttentItem()
        :attentKey(""),attentState(0),lid(""),cid(""),vid(""),updatetime(0),shortTitle(""),attentFrom(""),clickedTitle("")
        {
        }
        void resetDefautlt()
        {
            attentKey = "";
            attentState = 0;
            lid = "";
            cid = "";
            vid = "";
            updatetime = 0;
            shortTitle = "";
            attentFrom = "";
            clickedTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(attentKey, 0);
            _os.write(poster, 1);
            _os.write(attentState, 2);
            _os.write(lid, 3);
            _os.write(cid, 4);
            _os.write(vid, 5);
            _os.write(updatetime, 6);
            _os.write(shortTitle, 7);
            _os.write(attentFrom, 8);
            _os.write(calendarItem, 9);
            _os.write(clickedTitle, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(attentKey, 0, true);
            _is.read(poster, 1, true);
            _is.read(attentState, 2, true);
            _is.read(lid, 3, false);
            _is.read(cid, 4, false);
            _is.read(vid, 5, false);
            _is.read(updatetime, 6, false);
            _is.read(shortTitle, 7, false);
            _is.read(attentFrom, 8, false);
            _is.read(calendarItem, 9, false);
            _is.read(clickedTitle, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(attentKey,"attentKey");
            _ds.display(poster,"poster");
            _ds.display(attentState,"attentState");
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(updatetime,"updatetime");
            _ds.display(shortTitle,"shortTitle");
            _ds.display(attentFrom,"attentFrom");
            _ds.display(calendarItem,"calendarItem");
            _ds.display(clickedTitle,"clickedTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(attentKey, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(attentState, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(updatetime, true);
            _ds.displaySimple(shortTitle, true);
            _ds.displaySimple(attentFrom, true);
            _ds.displaySimple(calendarItem, true);
            _ds.displaySimple(clickedTitle, false);
            return _os;
        }
    public:
        std::string attentKey;
        jce::Poster poster;
        taf::Char attentState;
        std::string lid;
        std::string cid;
        std::string vid;
        taf::Int64 updatetime;
        std::string shortTitle;
        std::string attentFrom;
        jce::CalendarItem calendarItem;
        std::string clickedTitle;
    };
    inline bool operator==(const VideoAttentItem&l, const VideoAttentItem&r)
    {
        return l.attentKey == r.attentKey && l.poster == r.poster && l.attentState == r.attentState && l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.updatetime == r.updatetime && l.shortTitle == r.shortTitle && l.attentFrom == r.attentFrom && l.calendarItem == r.calendarItem && l.clickedTitle == r.clickedTitle;
    }
    inline bool operator!=(const VideoAttentItem&l, const VideoAttentItem&r)
    {
        return !(l == r);
    }

    struct NewAttentKey : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NewAttentKey";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        NewAttentKey()
        :lid(""),cid(""),vid(""),pid(""),attentFrom("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
            pid = "";
            attentFrom = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 1);
            _os.write(cid, 2);
            _os.write(vid, 3);
            _os.write(pid, 4);
            _os.write(attentFrom, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 1, false);
            _is.read(cid, 2, false);
            _is.read(vid, 3, false);
            _is.read(pid, 4, false);
            _is.read(attentFrom, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(pid,"pid");
            _ds.display(attentFrom,"attentFrom");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(attentFrom, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
        std::string pid;
        std::string attentFrom;
    };
    inline bool operator==(const NewAttentKey&l, const NewAttentKey&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.pid == r.pid && l.attentFrom == r.attentFrom;
    }
    inline bool operator!=(const NewAttentKey&l, const NewAttentKey&r)
    {
        return !(l == r);
    }

    struct NewAttentItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NewAttentItem";
        }
        static string MD5()
        {
            return "d7450656102b3cc917888aca21cc7cd3";
        }
        NewAttentItem()
        :attentState(0),shortTitle(""),updateTime(0)
        {
        }
        void resetDefautlt()
        {
            attentState = 0;
            shortTitle = "";
            updateTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(attentKey, 1);
            _os.write(attentState, 2);
            _os.write(poster, 3);
            _os.write(shortTitle, 4);
            _os.write(updateTime, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(attentKey, 1, true);
            _is.read(attentState, 2, true);
            _is.read(poster, 3, false);
            _is.read(shortTitle, 4, false);
            _is.read(updateTime, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(attentKey,"attentKey");
            _ds.display(attentState,"attentState");
            _ds.display(poster,"poster");
            _ds.display(shortTitle,"shortTitle");
            _ds.display(updateTime,"updateTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(attentKey, true);
            _ds.displaySimple(attentState, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(shortTitle, true);
            _ds.displaySimple(updateTime, false);
            return _os;
        }
    public:
        jce::NewAttentKey attentKey;
        taf::Char attentState;
        jce::Poster poster;
        std::string shortTitle;
        taf::Int64 updateTime;
    };
    inline bool operator==(const NewAttentItem&l, const NewAttentItem&r)
    {
        return l.attentKey == r.attentKey && l.attentState == r.attentState && l.poster == r.poster && l.shortTitle == r.shortTitle && l.updateTime == r.updateTime;
    }
    inline bool operator!=(const NewAttentItem&l, const NewAttentItem&r)
    {
        return !(l == r);
    }

    struct AttentPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AttentPoster";
        }
        static string MD5()
        {
            return "5c5b8b0c2cc3466f99db6e906a5a73e9";
        }
        AttentPoster()
        :style(0),showTime(""),attentContentColor(""),attentBgColor("")
        {
        }
        void resetDefautlt()
        {
            style = 0;
            showTime = "";
            attentContentColor = "";
            attentBgColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(attentItem, 1);
            _os.write(style, 2);
            _os.write(showTime, 3);
            _os.write(attentContentColor, 4);
            _os.write(attentBgColor, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(attentItem, 1, false);
            _is.read(style, 2, false);
            _is.read(showTime, 3, false);
            _is.read(attentContentColor, 4, false);
            _is.read(attentBgColor, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(attentItem,"attentItem");
            _ds.display(style,"style");
            _ds.display(showTime,"showTime");
            _ds.display(attentContentColor,"attentContentColor");
            _ds.display(attentBgColor,"attentBgColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(style, true);
            _ds.displaySimple(showTime, true);
            _ds.displaySimple(attentContentColor, true);
            _ds.displaySimple(attentBgColor, false);
            return _os;
        }
    public:
        jce::Poster poster;
        jce::VideoAttentItem attentItem;
        taf::Int32 style;
        std::string showTime;
        std::string attentContentColor;
        std::string attentBgColor;
    };
    inline bool operator==(const AttentPoster&l, const AttentPoster&r)
    {
        return l.poster == r.poster && l.attentItem == r.attentItem && l.style == r.style && l.showTime == r.showTime && l.attentContentColor == r.attentContentColor && l.attentBgColor == r.attentBgColor;
    }
    inline bool operator!=(const AttentPoster&l, const AttentPoster&r)
    {
        return !(l == r);
    }

    struct GridItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GridItem";
        }
        static string MD5()
        {
            return "c8a4bffa3a678b8d8768d29021121490";
        }
        GridItem()
        :text(""),iconUrl(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            text = "";
            iconUrl = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(text, 0);
            _os.write(action, 1);
            _os.write(iconUrl, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(text, 0, true);
            _is.read(action, 1, false);
            _is.read(iconUrl, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(text,"text");
            _ds.display(action,"action");
            _ds.display(iconUrl,"iconUrl");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(text, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string text;
        jce::Action action;
        std::string iconUrl;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const GridItem&l, const GridItem&r)
    {
        return l.text == r.text && l.action == r.action && l.iconUrl == r.iconUrl && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const GridItem&l, const GridItem&r)
    {
        return !(l == r);
    }

    struct BatchData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.BatchData";
        }
        static string MD5()
        {
            return "bc9cc6af24d41be3fc4e0b8f5aad12f8";
        }
        BatchData()
        :optType(0),dataType(""),dataKey(""),pageNum(0),autoRefresh(0),pageContext(""),tips(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            optType = 0;
            dataType = "";
            dataKey = "";
            pageNum = 0;
            autoRefresh = 0;
            pageContext = "";
            tips = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(optType, 0);
            _os.write(dataType, 1);
            _os.write(dataKey, 2);
            _os.write(pageNum, 3);
            _os.write(autoRefresh, 4);
            _os.write(pageContext, 5);
            _os.write(tips, 6);
            _os.write(hasNextPage, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(optType, 0, true);
            _is.read(dataType, 1, true);
            _is.read(dataKey, 2, false);
            _is.read(pageNum, 3, false);
            _is.read(autoRefresh, 4, false);
            _is.read(pageContext, 5, false);
            _is.read(tips, 6, false);
            _is.read(hasNextPage, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(optType,"optType");
            _ds.display(dataType,"dataType");
            _ds.display(dataKey,"dataKey");
            _ds.display(pageNum,"pageNum");
            _ds.display(autoRefresh,"autoRefresh");
            _ds.display(pageContext,"pageContext");
            _ds.display(tips,"tips");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(optType, true);
            _ds.displaySimple(dataType, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageNum, true);
            _ds.displaySimple(autoRefresh, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(tips, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 optType;
        std::string dataType;
        std::string dataKey;
        taf::Int32 pageNum;
        taf::Int64 autoRefresh;
        std::string pageContext;
        std::string tips;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const BatchData&l, const BatchData&r)
    {
        return l.optType == r.optType && l.dataType == r.dataType && l.dataKey == r.dataKey && l.pageNum == r.pageNum && l.autoRefresh == r.autoRefresh && l.pageContext == r.pageContext && l.tips == r.tips && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const BatchData&l, const BatchData&r)
    {
        return !(l == r);
    }

    struct BasicVideoInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.BasicVideoInfo";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        BasicVideoInfo()
        :lid(""),cid(""),vid(""),title(""),posterUrl("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
            title = "";
            posterUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
            _os.write(title, 3);
            _os.write(posterUrl, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, false);
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
            _is.read(title, 3, false);
            _is.read(posterUrl, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(title,"title");
            _ds.display(posterUrl,"posterUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(posterUrl, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
        std::string title;
        std::string posterUrl;
    };
    inline bool operator==(const BasicVideoInfo&l, const BasicVideoInfo&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.title == r.title && l.posterUrl == r.posterUrl;
    }
    inline bool operator!=(const BasicVideoInfo&l, const BasicVideoInfo&r)
    {
        return !(l == r);
    }

    struct LanguageInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LanguageInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        LanguageInfo()
        :id(""),name("")
        {
        }
        void resetDefautlt()
        {
            id = "";
            name = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(name, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, true);
            _is.read(name, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(name,"name");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(name, false);
            return _os;
        }
    public:
        std::string id;
        std::string name;
    };
    inline bool operator==(const LanguageInfo&l, const LanguageInfo&r)
    {
        return l.id == r.id && l.name == r.name;
    }
    inline bool operator!=(const LanguageInfo&l, const LanguageInfo&r)
    {
        return !(l == r);
    }

    struct LanguageSwitchInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LanguageSwitchInfo";
        }
        static string MD5()
        {
            return "0db7ca378a95a1fe582aeedf102c88a8";
        }
        LanguageSwitchInfo()
        :languageId(""),vid("")
        {
        }
        void resetDefautlt()
        {
            languageId = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(languageId, 0);
            _os.write(action, 1);
            _os.write(vid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(languageId, 0, true);
            _is.read(action, 1, true);
            _is.read(vid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(languageId,"languageId");
            _ds.display(action,"action");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(languageId, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string languageId;
        jce::Action action;
        std::string vid;
    };
    inline bool operator==(const LanguageSwitchInfo&l, const LanguageSwitchInfo&r)
    {
        return l.languageId == r.languageId && l.action == r.action && l.vid == r.vid;
    }
    inline bool operator!=(const LanguageSwitchInfo&l, const LanguageSwitchInfo&r)
    {
        return !(l == r);
    }

    struct VipDownloadRightConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipDownloadRightConfig";
        }
        static string MD5()
        {
            return "50607a37b174d190f87d0064edaae700";
        }
        VipDownloadRightConfig()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actionBarInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actionBarInfo, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actionBarInfo,"actionBarInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actionBarInfo, false);
            return _os;
        }
    public:
        jce::ActionBarInfo actionBarInfo;
    };
    inline bool operator==(const VipDownloadRightConfig&l, const VipDownloadRightConfig&r)
    {
        return l.actionBarInfo == r.actionBarInfo;
    }
    inline bool operator!=(const VipDownloadRightConfig&l, const VipDownloadRightConfig&r)
    {
        return !(l == r);
    }

    struct VipPlayerTipsConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipPlayerTipsConfig";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        VipPlayerTipsConfig()
        :topText(""),rightButtonText(""),rightButtonMarkText(""),rightButtonMarkImageUrl(""),topRightTitleText("")
        {
        }
        void resetDefautlt()
        {
            topText = "";
            rightButtonText = "";
            rightButtonMarkText = "";
            rightButtonMarkImageUrl = "";
            topRightTitleText = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(topText, 0);
            _os.write(rightButtonText, 1);
            _os.write(rightButtonMarkText, 2);
            _os.write(rightButtonMarkImageUrl, 3);
            _os.write(topRightTitleText, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(topText, 0, false);
            _is.read(rightButtonText, 1, false);
            _is.read(rightButtonMarkText, 2, false);
            _is.read(rightButtonMarkImageUrl, 3, false);
            _is.read(topRightTitleText, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(topText,"topText");
            _ds.display(rightButtonText,"rightButtonText");
            _ds.display(rightButtonMarkText,"rightButtonMarkText");
            _ds.display(rightButtonMarkImageUrl,"rightButtonMarkImageUrl");
            _ds.display(topRightTitleText,"topRightTitleText");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(topText, true);
            _ds.displaySimple(rightButtonText, true);
            _ds.displaySimple(rightButtonMarkText, true);
            _ds.displaySimple(rightButtonMarkImageUrl, true);
            _ds.displaySimple(topRightTitleText, false);
            return _os;
        }
    public:
        std::string topText;
        std::string rightButtonText;
        std::string rightButtonMarkText;
        std::string rightButtonMarkImageUrl;
        std::string topRightTitleText;
    };
    inline bool operator==(const VipPlayerTipsConfig&l, const VipPlayerTipsConfig&r)
    {
        return l.topText == r.topText && l.rightButtonText == r.rightButtonText && l.rightButtonMarkText == r.rightButtonMarkText && l.rightButtonMarkImageUrl == r.rightButtonMarkImageUrl && l.topRightTitleText == r.topRightTitleText;
    }
    inline bool operator!=(const VipPlayerTipsConfig&l, const VipPlayerTipsConfig&r)
    {
        return !(l == r);
    }

    struct VideoItemExtra : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoItemExtra";
        }
        static string MD5()
        {
            return "2a2f7a004385b62463871252bb135c7d";
        }
        VideoItemExtra()
        :nextVideoKey(""),nextCoverKey(""),isHaveBubbleDM(true),videoFileSize(0),tryWatchBtnTitle(""),videoFlag(0),isHaveTrailerVideo(true),livePollDataKey(""),liveStatus(0),liveAttentNum(0),liveOnlineNum(0),videoTitleUiType(0),page(""),channelId(""),style(0),audioFileSize(0)
        {
        }
        void resetDefautlt()
        {
            nextVideoKey = "";
            nextCoverKey = "";
            isHaveBubbleDM = true;
            videoFileSize = 0;
            tryWatchBtnTitle = "";
            videoFlag = 0;
            isHaveTrailerVideo = true;
            livePollDataKey = "";
            liveStatus = 0;
            liveAttentNum = 0;
            liveOnlineNum = 0;
            videoTitleUiType = 0;
            page = "";
            channelId = "";
            style = 0;
            audioFileSize = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(nextVideoKey, 0);
            _os.write(nextAction, 1);
            _os.write(nextCoverKey, 2);
            _os.write(isHaveBubbleDM, 3);
            _os.write(playCopyRightTip, 4);
            _os.write(videoFileSize, 5);
            _os.write(tryWatchBtnTitle, 6);
            _os.write(videoFlag, 7);
            _os.write(isHaveTrailerVideo, 8);
            _os.write(livePollDataKey, 9);
            _os.write(liveStatus, 10);
            _os.write(liveAttentNum, 11);
            _os.write(liveOnlineNum, 12);
            _os.write(videoTitleUiType, 13);
            _os.write(page, 14);
            _os.write(channelId, 15);
            _os.write(style, 16);
            _os.write(complaintAction, 17);
            _os.write(languageSwitchInfos, 18);
            _os.write(nextVideoPoster, 19);
            _os.write(audioFileSize, 20);
            _os.write(vipPlayerTipsConfig, 21);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(nextVideoKey, 0, false);
            _is.read(nextAction, 1, false);
            _is.read(nextCoverKey, 2, false);
            _is.read(isHaveBubbleDM, 3, false);
            _is.read(playCopyRightTip, 4, false);
            _is.read(videoFileSize, 5, false);
            _is.read(tryWatchBtnTitle, 6, false);
            _is.read(videoFlag, 7, false);
            _is.read(isHaveTrailerVideo, 8, false);
            _is.read(livePollDataKey, 9, false);
            _is.read(liveStatus, 10, false);
            _is.read(liveAttentNum, 11, false);
            _is.read(liveOnlineNum, 12, false);
            _is.read(videoTitleUiType, 13, false);
            _is.read(page, 14, false);
            _is.read(channelId, 15, false);
            _is.read(style, 16, false);
            _is.read(complaintAction, 17, false);
            _is.read(languageSwitchInfos, 18, false);
            _is.read(nextVideoPoster, 19, false);
            _is.read(audioFileSize, 20, false);
            _is.read(vipPlayerTipsConfig, 21, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(nextVideoKey,"nextVideoKey");
            _ds.display(nextAction,"nextAction");
            _ds.display(nextCoverKey,"nextCoverKey");
            _ds.display(isHaveBubbleDM,"isHaveBubbleDM");
            _ds.display(playCopyRightTip,"playCopyRightTip");
            _ds.display(videoFileSize,"videoFileSize");
            _ds.display(tryWatchBtnTitle,"tryWatchBtnTitle");
            _ds.display(videoFlag,"videoFlag");
            _ds.display(isHaveTrailerVideo,"isHaveTrailerVideo");
            _ds.display(livePollDataKey,"livePollDataKey");
            _ds.display(liveStatus,"liveStatus");
            _ds.display(liveAttentNum,"liveAttentNum");
            _ds.display(liveOnlineNum,"liveOnlineNum");
            _ds.display(videoTitleUiType,"videoTitleUiType");
            _ds.display(page,"page");
            _ds.display(channelId,"channelId");
            _ds.display(style,"style");
            _ds.display(complaintAction,"complaintAction");
            _ds.display(languageSwitchInfos,"languageSwitchInfos");
            _ds.display(nextVideoPoster,"nextVideoPoster");
            _ds.display(audioFileSize,"audioFileSize");
            _ds.display(vipPlayerTipsConfig,"vipPlayerTipsConfig");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(nextVideoKey, true);
            _ds.displaySimple(nextAction, true);
            _ds.displaySimple(nextCoverKey, true);
            _ds.displaySimple(isHaveBubbleDM, true);
            _ds.displaySimple(playCopyRightTip, true);
            _ds.displaySimple(videoFileSize, true);
            _ds.displaySimple(tryWatchBtnTitle, true);
            _ds.displaySimple(videoFlag, true);
            _ds.displaySimple(isHaveTrailerVideo, true);
            _ds.displaySimple(livePollDataKey, true);
            _ds.displaySimple(liveStatus, true);
            _ds.displaySimple(liveAttentNum, true);
            _ds.displaySimple(liveOnlineNum, true);
            _ds.displaySimple(videoTitleUiType, true);
            _ds.displaySimple(page, true);
            _ds.displaySimple(channelId, true);
            _ds.displaySimple(style, true);
            _ds.displaySimple(complaintAction, true);
            _ds.displaySimple(languageSwitchInfos, true);
            _ds.displaySimple(nextVideoPoster, true);
            _ds.displaySimple(audioFileSize, true);
            _ds.displaySimple(vipPlayerTipsConfig, false);
            return _os;
        }
    public:
        std::string nextVideoKey;
        jce::Action nextAction;
        std::string nextCoverKey;
        taf::Bool isHaveBubbleDM;
        jce::IconTagText playCopyRightTip;
        taf::Int64 videoFileSize;
        std::string tryWatchBtnTitle;
        taf::Char videoFlag;
        taf::Bool isHaveTrailerVideo;
        std::string livePollDataKey;
        taf::Int32 liveStatus;
        taf::Int64 liveAttentNum;
        taf::Int64 liveOnlineNum;
        taf::Int32 videoTitleUiType;
        std::string page;
        std::string channelId;
        taf::Int32 style;
        jce::Action complaintAction;
        vector<jce::LanguageSwitchInfo> languageSwitchInfos;
        jce::Poster nextVideoPoster;
        taf::Int64 audioFileSize;
        jce::VipPlayerTipsConfig vipPlayerTipsConfig;
    };
    inline bool operator==(const VideoItemExtra&l, const VideoItemExtra&r)
    {
        return l.nextVideoKey == r.nextVideoKey && l.nextAction == r.nextAction && l.nextCoverKey == r.nextCoverKey && l.isHaveBubbleDM == r.isHaveBubbleDM && l.playCopyRightTip == r.playCopyRightTip && l.videoFileSize == r.videoFileSize && l.tryWatchBtnTitle == r.tryWatchBtnTitle && l.videoFlag == r.videoFlag && l.isHaveTrailerVideo == r.isHaveTrailerVideo && l.livePollDataKey == r.livePollDataKey && l.liveStatus == r.liveStatus && l.liveAttentNum == r.liveAttentNum && l.liveOnlineNum == r.liveOnlineNum && l.videoTitleUiType == r.videoTitleUiType && l.page == r.page && l.channelId == r.channelId && l.style == r.style && l.complaintAction == r.complaintAction && l.languageSwitchInfos == r.languageSwitchInfos && l.nextVideoPoster == r.nextVideoPoster && l.audioFileSize == r.audioFileSize && l.vipPlayerTipsConfig == r.vipPlayerTipsConfig;
    }
    inline bool operator!=(const VideoItemExtra&l, const VideoItemExtra&r)
    {
        return !(l == r);
    }

    struct VideoPlayReportInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoPlayReportInfo";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        VideoPlayReportInfo()
        :autoPlayReportKey(""),autoPlayReportParams(""),detailPlayReportKey(""),detailPlayReportParams("")
        {
        }
        void resetDefautlt()
        {
            autoPlayReportKey = "";
            autoPlayReportParams = "";
            detailPlayReportKey = "";
            detailPlayReportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(autoPlayReportKey, 0);
            _os.write(autoPlayReportParams, 1);
            _os.write(detailPlayReportKey, 2);
            _os.write(detailPlayReportParams, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(autoPlayReportKey, 0, false);
            _is.read(autoPlayReportParams, 1, false);
            _is.read(detailPlayReportKey, 2, false);
            _is.read(detailPlayReportParams, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(autoPlayReportKey,"autoPlayReportKey");
            _ds.display(autoPlayReportParams,"autoPlayReportParams");
            _ds.display(detailPlayReportKey,"detailPlayReportKey");
            _ds.display(detailPlayReportParams,"detailPlayReportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(autoPlayReportKey, true);
            _ds.displaySimple(autoPlayReportParams, true);
            _ds.displaySimple(detailPlayReportKey, true);
            _ds.displaySimple(detailPlayReportParams, false);
            return _os;
        }
    public:
        std::string autoPlayReportKey;
        std::string autoPlayReportParams;
        std::string detailPlayReportKey;
        std::string detailPlayReportParams;
    };
    inline bool operator==(const VideoPlayReportInfo&l, const VideoPlayReportInfo&r)
    {
        return l.autoPlayReportKey == r.autoPlayReportKey && l.autoPlayReportParams == r.autoPlayReportParams && l.detailPlayReportKey == r.detailPlayReportKey && l.detailPlayReportParams == r.detailPlayReportParams;
    }
    inline bool operator!=(const VideoPlayReportInfo&l, const VideoPlayReportInfo&r)
    {
        return !(l == r);
    }

    struct VideoItemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoItemData";
        }
        static string MD5()
        {
            return "2df93bf1ba46d8bca531320d0f374566";
        }
        VideoItemData()
        :vid(""),payStatus(0),skipStart(0),skipEnd(0),isTrailor(true),title(""),playCopyRight(0),webPlayUrl(""),downloadCopyRight(0),isIpLimit(true),DMContentKey(""),isHaveDM(true),DMIsOpen(true),horizontalPosterImgUrl(""),shareUrl(""),shareTitle(""),shareSubtitle(""),shareImgUrl(""),isHaveInteract(true),circleShareKey(""),isNoStroeWatchedHistory(true),cid(""),isVideoOverview(true),videoType(0),parentId(""),tryPlayTime(0),videoShowFlags(0),videoEndRecommendKey(""),specialOpt(0),nickName(""),streamRatio(0),episodeNum(0),castPolicy(0),sceneInformation(""),pUgcKnowledgeType(false),promotionAppKey(""),pUgcPayBarPromationTips("")
        {
        }
        void resetDefautlt()
        {
            vid = "";
            payStatus = 0;
            skipStart = 0;
            skipEnd = 0;
            isTrailor = true;
            title = "";
            playCopyRight = 0;
            webPlayUrl = "";
            downloadCopyRight = 0;
            isIpLimit = true;
            DMContentKey = "";
            isHaveDM = true;
            DMIsOpen = true;
            horizontalPosterImgUrl = "";
            shareUrl = "";
            shareTitle = "";
            shareSubtitle = "";
            shareImgUrl = "";
            isHaveInteract = true;
            circleShareKey = "";
            isNoStroeWatchedHistory = true;
            cid = "";
            isVideoOverview = true;
            videoType = 0;
            parentId = "";
            tryPlayTime = 0;
            videoShowFlags = 0;
            videoEndRecommendKey = "";
            specialOpt = 0;
            nickName = "";
            streamRatio = 0;
            episodeNum = 0;
            castPolicy = 0;
            sceneInformation = "";
            pUgcKnowledgeType = false;
            promotionAppKey = "";
            pUgcPayBarPromationTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(payStatus, 1);
            _os.write(poster, 2);
            _os.write(skipStart, 3);
            _os.write(skipEnd, 4);
            _os.write(isTrailor, 5);
            _os.write(action, 6);
            _os.write(keyPointList, 7);
            _os.write(title, 8);
            _os.write(titleMarkLabelList, 9);
            _os.write(playCopyRight, 10);
            _os.write(webPlayUrl, 11);
            _os.write(downloadCopyRight, 12);
            _os.write(isIpLimit, 13);
            _os.write(DMContentKey, 14);
            _os.write(isHaveDM, 15);
            _os.write(DMIsOpen, 16);
            _os.write(horizontalPosterImgUrl, 17);
            _os.write(shareUrl, 18);
            _os.write(shareTitle, 19);
            _os.write(shareSubtitle, 20);
            _os.write(shareImgUrl, 21);
            _os.write(isHaveInteract, 22);
            _os.write(circleShareKey, 23);
            _os.write(isNoStroeWatchedHistory, 24);
            _os.write(watchRecordPoster, 25);
            _os.write(cid, 26);
            _os.write(isVideoOverview, 27);
            _os.write(videoType, 28);
            _os.write(shareItem, 29);
            _os.write(parentId, 30);
            _os.write(tryPlayTime, 31);
            _os.write(videoShowFlags, 32);
            _os.write(videoEndRecommendKey, 33);
            _os.write(specialOpt, 34);
            _os.write(nickName, 35);
            _os.write(referKeys, 36);
            _os.write(streamRatio, 37);
            _os.write(etraData, 38);
            _os.write(playReportInfo, 39);
            _os.write(episodeNum, 40);
            _os.write(castPolicy, 41);
            _os.write(sceneInformation, 42);
            _os.write(pUgcKnowledgeType, 43);
            _os.write(promotionAppKey, 44);
            _os.write(pUgcPayBarPromationTips, 45);
            _os.write(fullIconAction, 46);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, true);
            _is.read(payStatus, 1, true);
            _is.read(poster, 2, true);
            _is.read(skipStart, 3, false);
            _is.read(skipEnd, 4, false);
            _is.read(isTrailor, 5, false);
            _is.read(action, 6, false);
            _is.read(keyPointList, 7, false);
            _is.read(title, 8, false);
            _is.read(titleMarkLabelList, 9, false);
            _is.read(playCopyRight, 10, false);
            _is.read(webPlayUrl, 11, false);
            _is.read(downloadCopyRight, 12, false);
            _is.read(isIpLimit, 13, false);
            _is.read(DMContentKey, 14, false);
            _is.read(isHaveDM, 15, false);
            _is.read(DMIsOpen, 16, false);
            _is.read(horizontalPosterImgUrl, 17, false);
            _is.read(shareUrl, 18, false);
            _is.read(shareTitle, 19, false);
            _is.read(shareSubtitle, 20, false);
            _is.read(shareImgUrl, 21, false);
            _is.read(isHaveInteract, 22, false);
            _is.read(circleShareKey, 23, false);
            _is.read(isNoStroeWatchedHistory, 24, false);
            _is.read(watchRecordPoster, 25, false);
            _is.read(cid, 26, false);
            _is.read(isVideoOverview, 27, false);
            _is.read(videoType, 28, false);
            _is.read(shareItem, 29, false);
            _is.read(parentId, 30, false);
            _is.read(tryPlayTime, 31, false);
            _is.read(videoShowFlags, 32, false);
            _is.read(videoEndRecommendKey, 33, false);
            _is.read(specialOpt, 34, false);
            _is.read(nickName, 35, false);
            _is.read(referKeys, 36, false);
            _is.read(streamRatio, 37, false);
            _is.read(etraData, 38, false);
            _is.read(playReportInfo, 39, false);
            _is.read(episodeNum, 40, false);
            _is.read(castPolicy, 41, false);
            _is.read(sceneInformation, 42, false);
            _is.read(pUgcKnowledgeType, 43, false);
            _is.read(promotionAppKey, 44, false);
            _is.read(pUgcPayBarPromationTips, 45, false);
            _is.read(fullIconAction, 46, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(payStatus,"payStatus");
            _ds.display(poster,"poster");
            _ds.display(skipStart,"skipStart");
            _ds.display(skipEnd,"skipEnd");
            _ds.display(isTrailor,"isTrailor");
            _ds.display(action,"action");
            _ds.display(keyPointList,"keyPointList");
            _ds.display(title,"title");
            _ds.display(titleMarkLabelList,"titleMarkLabelList");
            _ds.display(playCopyRight,"playCopyRight");
            _ds.display(webPlayUrl,"webPlayUrl");
            _ds.display(downloadCopyRight,"downloadCopyRight");
            _ds.display(isIpLimit,"isIpLimit");
            _ds.display(DMContentKey,"DMContentKey");
            _ds.display(isHaveDM,"isHaveDM");
            _ds.display(DMIsOpen,"DMIsOpen");
            _ds.display(horizontalPosterImgUrl,"horizontalPosterImgUrl");
            _ds.display(shareUrl,"shareUrl");
            _ds.display(shareTitle,"shareTitle");
            _ds.display(shareSubtitle,"shareSubtitle");
            _ds.display(shareImgUrl,"shareImgUrl");
            _ds.display(isHaveInteract,"isHaveInteract");
            _ds.display(circleShareKey,"circleShareKey");
            _ds.display(isNoStroeWatchedHistory,"isNoStroeWatchedHistory");
            _ds.display(watchRecordPoster,"watchRecordPoster");
            _ds.display(cid,"cid");
            _ds.display(isVideoOverview,"isVideoOverview");
            _ds.display(videoType,"videoType");
            _ds.display(shareItem,"shareItem");
            _ds.display(parentId,"parentId");
            _ds.display(tryPlayTime,"tryPlayTime");
            _ds.display(videoShowFlags,"videoShowFlags");
            _ds.display(videoEndRecommendKey,"videoEndRecommendKey");
            _ds.display(specialOpt,"specialOpt");
            _ds.display(nickName,"nickName");
            _ds.display(referKeys,"referKeys");
            _ds.display(streamRatio,"streamRatio");
            _ds.display(etraData,"etraData");
            _ds.display(playReportInfo,"playReportInfo");
            _ds.display(episodeNum,"episodeNum");
            _ds.display(castPolicy,"castPolicy");
            _ds.display(sceneInformation,"sceneInformation");
            _ds.display(pUgcKnowledgeType,"pUgcKnowledgeType");
            _ds.display(promotionAppKey,"promotionAppKey");
            _ds.display(pUgcPayBarPromationTips,"pUgcPayBarPromationTips");
            _ds.display(fullIconAction,"fullIconAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(payStatus, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(skipStart, true);
            _ds.displaySimple(skipEnd, true);
            _ds.displaySimple(isTrailor, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(keyPointList, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(titleMarkLabelList, true);
            _ds.displaySimple(playCopyRight, true);
            _ds.displaySimple(webPlayUrl, true);
            _ds.displaySimple(downloadCopyRight, true);
            _ds.displaySimple(isIpLimit, true);
            _ds.displaySimple(DMContentKey, true);
            _ds.displaySimple(isHaveDM, true);
            _ds.displaySimple(DMIsOpen, true);
            _ds.displaySimple(horizontalPosterImgUrl, true);
            _ds.displaySimple(shareUrl, true);
            _ds.displaySimple(shareTitle, true);
            _ds.displaySimple(shareSubtitle, true);
            _ds.displaySimple(shareImgUrl, true);
            _ds.displaySimple(isHaveInteract, true);
            _ds.displaySimple(circleShareKey, true);
            _ds.displaySimple(isNoStroeWatchedHistory, true);
            _ds.displaySimple(watchRecordPoster, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(isVideoOverview, true);
            _ds.displaySimple(videoType, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(parentId, true);
            _ds.displaySimple(tryPlayTime, true);
            _ds.displaySimple(videoShowFlags, true);
            _ds.displaySimple(videoEndRecommendKey, true);
            _ds.displaySimple(specialOpt, true);
            _ds.displaySimple(nickName, true);
            _ds.displaySimple(referKeys, true);
            _ds.displaySimple(streamRatio, true);
            _ds.displaySimple(etraData, true);
            _ds.displaySimple(playReportInfo, true);
            _ds.displaySimple(episodeNum, true);
            _ds.displaySimple(castPolicy, true);
            _ds.displaySimple(sceneInformation, true);
            _ds.displaySimple(pUgcKnowledgeType, true);
            _ds.displaySimple(promotionAppKey, true);
            _ds.displaySimple(pUgcPayBarPromationTips, true);
            _ds.displaySimple(fullIconAction, false);
            return _os;
        }
    public:
        std::string vid;
        taf::Int32 payStatus;
        jce::Poster poster;
        taf::Int32 skipStart;
        taf::Int32 skipEnd;
        taf::Bool isTrailor;
        jce::Action action;
        vector<taf::Int32> keyPointList;
        std::string title;
        vector<jce::MarkLabel> titleMarkLabelList;
        taf::Int32 playCopyRight;
        std::string webPlayUrl;
        taf::Int32 downloadCopyRight;
        taf::Bool isIpLimit;
        std::string DMContentKey;
        taf::Bool isHaveDM;
        taf::Bool DMIsOpen;
        std::string horizontalPosterImgUrl;
        std::string shareUrl;
        std::string shareTitle;
        std::string shareSubtitle;
        std::string shareImgUrl;
        taf::Bool isHaveInteract;
        std::string circleShareKey;
        taf::Bool isNoStroeWatchedHistory;
        jce::Poster watchRecordPoster;
        std::string cid;
        taf::Bool isVideoOverview;
        taf::Int64 videoType;
        jce::ShareItem shareItem;
        std::string parentId;
        taf::Int64 tryPlayTime;
        taf::Int32 videoShowFlags;
        std::string videoEndRecommendKey;
        taf::Int32 specialOpt;
        std::string nickName;
        map<std::string, std::string> referKeys;
        taf::Float streamRatio;
        jce::VideoItemExtra etraData;
        jce::VideoPlayReportInfo playReportInfo;
        taf::Int32 episodeNum;
        taf::Int32 castPolicy;
        std::string sceneInformation;
        taf::Bool pUgcKnowledgeType;
        std::string promotionAppKey;
        std::string pUgcPayBarPromationTips;
        jce::Action fullIconAction;
    };
    inline bool operator==(const VideoItemData&l, const VideoItemData&r)
    {
        return l.vid == r.vid && l.payStatus == r.payStatus && l.poster == r.poster && l.skipStart == r.skipStart && l.skipEnd == r.skipEnd && l.isTrailor == r.isTrailor && l.action == r.action && l.keyPointList == r.keyPointList && l.title == r.title && l.titleMarkLabelList == r.titleMarkLabelList && l.playCopyRight == r.playCopyRight && l.webPlayUrl == r.webPlayUrl && l.downloadCopyRight == r.downloadCopyRight && l.isIpLimit == r.isIpLimit && l.DMContentKey == r.DMContentKey && l.isHaveDM == r.isHaveDM && l.DMIsOpen == r.DMIsOpen && l.horizontalPosterImgUrl == r.horizontalPosterImgUrl && l.shareUrl == r.shareUrl && l.shareTitle == r.shareTitle && l.shareSubtitle == r.shareSubtitle && l.shareImgUrl == r.shareImgUrl && l.isHaveInteract == r.isHaveInteract && l.circleShareKey == r.circleShareKey && l.isNoStroeWatchedHistory == r.isNoStroeWatchedHistory && l.watchRecordPoster == r.watchRecordPoster && l.cid == r.cid && l.isVideoOverview == r.isVideoOverview && l.videoType == r.videoType && l.shareItem == r.shareItem && l.parentId == r.parentId && l.tryPlayTime == r.tryPlayTime && l.videoShowFlags == r.videoShowFlags && l.videoEndRecommendKey == r.videoEndRecommendKey && l.specialOpt == r.specialOpt && l.nickName == r.nickName && l.referKeys == r.referKeys && l.streamRatio == r.streamRatio && l.etraData == r.etraData && l.playReportInfo == r.playReportInfo && l.episodeNum == r.episodeNum && l.castPolicy == r.castPolicy && l.sceneInformation == r.sceneInformation && l.pUgcKnowledgeType == r.pUgcKnowledgeType && l.promotionAppKey == r.promotionAppKey && l.pUgcPayBarPromationTips == r.pUgcPayBarPromationTips && l.fullIconAction == r.fullIconAction;
    }
    inline bool operator!=(const VideoItemData&l, const VideoItemData&r)
    {
        return !(l == r);
    }

    struct CoverItemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CoverItemData";
        }
        static string MD5()
        {
            return "80b0d18167d86a412d8b747c3e8676ec";
        }
        CoverItemData()
        :cid(""),date(""),num(0),payStatus(0),playCopyRight(0),downloadCopyRight(0),cacheDataKey(""),videoShowFlags(0),lid(""),parentId(""),albumDate(""),albumIndex(0)
        {
        }
        void resetDefautlt()
        {
            cid = "";
            date = "";
            num = 0;
            payStatus = 0;
            playCopyRight = 0;
            downloadCopyRight = 0;
            cacheDataKey = "";
            videoShowFlags = 0;
            lid = "";
            parentId = "";
            albumDate = "";
            albumIndex = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cid, 0);
            _os.write(poster, 1);
            _os.write(date, 2);
            _os.write(num, 3);
            _os.write(payStatus, 4);
            _os.write(playCopyRight, 5);
            _os.write(downloadCopyRight, 6);
            _os.write(cacheDataKey, 7);
            _os.write(shareItem, 8);
            _os.write(videoShowFlags, 9);
            _os.write(lid, 10);
            _os.write(parentId, 11);
            _os.write(nextVideoAction, 12);
            _os.write(nextVideoPoster, 13);
            _os.write(albumDate, 14);
            _os.write(albumIndex, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cid, 0, true);
            _is.read(poster, 1, true);
            _is.read(date, 2, false);
            _is.read(num, 3, false);
            _is.read(payStatus, 4, false);
            _is.read(playCopyRight, 5, false);
            _is.read(downloadCopyRight, 6, false);
            _is.read(cacheDataKey, 7, false);
            _is.read(shareItem, 8, false);
            _is.read(videoShowFlags, 9, false);
            _is.read(lid, 10, false);
            _is.read(parentId, 11, false);
            _is.read(nextVideoAction, 12, false);
            _is.read(nextVideoPoster, 13, false);
            _is.read(albumDate, 14, false);
            _is.read(albumIndex, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cid,"cid");
            _ds.display(poster,"poster");
            _ds.display(date,"date");
            _ds.display(num,"num");
            _ds.display(payStatus,"payStatus");
            _ds.display(playCopyRight,"playCopyRight");
            _ds.display(downloadCopyRight,"downloadCopyRight");
            _ds.display(cacheDataKey,"cacheDataKey");
            _ds.display(shareItem,"shareItem");
            _ds.display(videoShowFlags,"videoShowFlags");
            _ds.display(lid,"lid");
            _ds.display(parentId,"parentId");
            _ds.display(nextVideoAction,"nextVideoAction");
            _ds.display(nextVideoPoster,"nextVideoPoster");
            _ds.display(albumDate,"albumDate");
            _ds.display(albumIndex,"albumIndex");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(date, true);
            _ds.displaySimple(num, true);
            _ds.displaySimple(payStatus, true);
            _ds.displaySimple(playCopyRight, true);
            _ds.displaySimple(downloadCopyRight, true);
            _ds.displaySimple(cacheDataKey, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(videoShowFlags, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(parentId, true);
            _ds.displaySimple(nextVideoAction, true);
            _ds.displaySimple(nextVideoPoster, true);
            _ds.displaySimple(albumDate, true);
            _ds.displaySimple(albumIndex, false);
            return _os;
        }
    public:
        std::string cid;
        jce::Poster poster;
        std::string date;
        taf::Int64 num;
        taf::Int32 payStatus;
        taf::Int32 playCopyRight;
        taf::Int32 downloadCopyRight;
        std::string cacheDataKey;
        jce::ShareItem shareItem;
        taf::Int32 videoShowFlags;
        std::string lid;
        std::string parentId;
        jce::Action nextVideoAction;
        jce::Poster nextVideoPoster;
        std::string albumDate;
        taf::Int32 albumIndex;
    };
    inline bool operator==(const CoverItemData&l, const CoverItemData&r)
    {
        return l.cid == r.cid && l.poster == r.poster && l.date == r.date && l.num == r.num && l.payStatus == r.payStatus && l.playCopyRight == r.playCopyRight && l.downloadCopyRight == r.downloadCopyRight && l.cacheDataKey == r.cacheDataKey && l.shareItem == r.shareItem && l.videoShowFlags == r.videoShowFlags && l.lid == r.lid && l.parentId == r.parentId && l.nextVideoAction == r.nextVideoAction && l.nextVideoPoster == r.nextVideoPoster && l.albumDate == r.albumDate && l.albumIndex == r.albumIndex;
    }
    inline bool operator!=(const CoverItemData&l, const CoverItemData&r)
    {
        return !(l == r);
    }

    struct ColumnItemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ColumnItemData";
        }
        static string MD5()
        {
            return "f8ed57cb3de7413b3550a15dbbe92f9b";
        }
        ColumnItemData()
        :lid(""),date(""),num(0),payStatus(0),playCopyRight(0),downloadCopyRight(0),cacheDataKey(""),videoShowFlags(0),parentId("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            date = "";
            num = 0;
            payStatus = 0;
            playCopyRight = 0;
            downloadCopyRight = 0;
            cacheDataKey = "";
            videoShowFlags = 0;
            parentId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(poster, 1);
            _os.write(date, 2);
            _os.write(num, 3);
            _os.write(payStatus, 4);
            _os.write(playCopyRight, 5);
            _os.write(downloadCopyRight, 6);
            _os.write(cacheDataKey, 7);
            _os.write(shareItem, 8);
            _os.write(videoShowFlags, 9);
            _os.write(parentId, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, true);
            _is.read(poster, 1, false);
            _is.read(date, 2, false);
            _is.read(num, 3, false);
            _is.read(payStatus, 4, false);
            _is.read(playCopyRight, 5, false);
            _is.read(downloadCopyRight, 6, false);
            _is.read(cacheDataKey, 7, false);
            _is.read(shareItem, 8, false);
            _is.read(videoShowFlags, 9, false);
            _is.read(parentId, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(poster,"poster");
            _ds.display(date,"date");
            _ds.display(num,"num");
            _ds.display(payStatus,"payStatus");
            _ds.display(playCopyRight,"playCopyRight");
            _ds.display(downloadCopyRight,"downloadCopyRight");
            _ds.display(cacheDataKey,"cacheDataKey");
            _ds.display(shareItem,"shareItem");
            _ds.display(videoShowFlags,"videoShowFlags");
            _ds.display(parentId,"parentId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(date, true);
            _ds.displaySimple(num, true);
            _ds.displaySimple(payStatus, true);
            _ds.displaySimple(playCopyRight, true);
            _ds.displaySimple(downloadCopyRight, true);
            _ds.displaySimple(cacheDataKey, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(videoShowFlags, true);
            _ds.displaySimple(parentId, false);
            return _os;
        }
    public:
        std::string lid;
        jce::Poster poster;
        std::string date;
        taf::Int64 num;
        taf::Int32 payStatus;
        taf::Int32 playCopyRight;
        taf::Int32 downloadCopyRight;
        std::string cacheDataKey;
        jce::ShareItem shareItem;
        taf::Int32 videoShowFlags;
        std::string parentId;
    };
    inline bool operator==(const ColumnItemData&l, const ColumnItemData&r)
    {
        return l.lid == r.lid && l.poster == r.poster && l.date == r.date && l.num == r.num && l.payStatus == r.payStatus && l.playCopyRight == r.playCopyRight && l.downloadCopyRight == r.downloadCopyRight && l.cacheDataKey == r.cacheDataKey && l.shareItem == r.shareItem && l.videoShowFlags == r.videoShowFlags && l.parentId == r.parentId;
    }
    inline bool operator!=(const ColumnItemData&l, const ColumnItemData&r)
    {
        return !(l == r);
    }

    struct ExpansionData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ExpansionData";
        }
        static string MD5()
        {
            return "7d93da8e7b750aa2aa672965ef33cba4";
        }
        ExpansionData()
        :introKey(""),vrssKey("")
        {
        }
        void resetDefautlt()
        {
            introKey = "";
            vrssKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(attentItem, 0);
            _os.write(introKey, 1);
            _os.write(vrssKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(attentItem, 0, false);
            _is.read(introKey, 1, false);
            _is.read(vrssKey, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(attentItem,"attentItem");
            _ds.display(introKey,"introKey");
            _ds.display(vrssKey,"vrssKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(introKey, true);
            _ds.displaySimple(vrssKey, false);
            return _os;
        }
    public:
        jce::VideoAttentItem attentItem;
        std::string introKey;
        std::string vrssKey;
    };
    inline bool operator==(const ExpansionData&l, const ExpansionData&r)
    {
        return l.attentItem == r.attentItem && l.introKey == r.introKey && l.vrssKey == r.vrssKey;
    }
    inline bool operator!=(const ExpansionData&l, const ExpansionData&r)
    {
        return !(l == r);
    }

    struct VideoMoreDetails : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoMoreDetails";
        }
        static string MD5()
        {
            return "fd515c79de6e391c0499a0ff16b9edaf";
        }
        VideoMoreDetails()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lidNodeMap, 0);
            _os.write(cidNodeMap, 1);
            _os.write(expansionMap, 2);
            _os.write(vrssItemMap, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lidNodeMap, 0, false);
            _is.read(cidNodeMap, 1, false);
            _is.read(expansionMap, 2, false);
            _is.read(vrssItemMap, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lidNodeMap,"lidNodeMap");
            _ds.display(cidNodeMap,"cidNodeMap");
            _ds.display(expansionMap,"expansionMap");
            _ds.display(vrssItemMap,"vrssItemMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lidNodeMap, true);
            _ds.displaySimple(cidNodeMap, true);
            _ds.displaySimple(expansionMap, true);
            _ds.displaySimple(vrssItemMap, false);
            return _os;
        }
    public:
        map<std::string, jce::ColumnItemData> lidNodeMap;
        map<std::string, jce::CoverItemData> cidNodeMap;
        map<std::string, jce::ExpansionData> expansionMap;
        map<std::string, jce::VRSSItem> vrssItemMap;
    };
    inline bool operator==(const VideoMoreDetails&l, const VideoMoreDetails&r)
    {
        return l.lidNodeMap == r.lidNodeMap && l.cidNodeMap == r.cidNodeMap && l.expansionMap == r.expansionMap && l.vrssItemMap == r.vrssItemMap;
    }
    inline bool operator!=(const VideoMoreDetails&l, const VideoMoreDetails&r)
    {
        return !(l == r);
    }

    struct LoadingConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LoadingConfig";
        }
        static string MD5()
        {
            return "5130eb7d1c01198989f2c409fd064845";
        }
        LoadingConfig()
        :imageUrl(""),bgColor(""),speedTextColor(""),startTime(0),endTime(0),configId(""),showTimes(0)
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
            bgColor = "";
            speedTextColor = "";
            startTime = 0;
            endTime = 0;
            configId = "";
            showTimes = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(bgColor, 1);
            _os.write(speedTextColor, 2);
            _os.write(startTime, 3);
            _os.write(endTime, 4);
            _os.write(configId, 5);
            _os.write(showTimes, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, false);
            _is.read(bgColor, 1, false);
            _is.read(speedTextColor, 2, false);
            _is.read(startTime, 3, false);
            _is.read(endTime, 4, false);
            _is.read(configId, 5, false);
            _is.read(showTimes, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(bgColor,"bgColor");
            _ds.display(speedTextColor,"speedTextColor");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(configId,"configId");
            _ds.display(showTimes,"showTimes");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(bgColor, true);
            _ds.displaySimple(speedTextColor, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(configId, true);
            _ds.displaySimple(showTimes, false);
            return _os;
        }
    public:
        std::string imageUrl;
        std::string bgColor;
        std::string speedTextColor;
        taf::Int64 startTime;
        taf::Int64 endTime;
        std::string configId;
        taf::Int32 showTimes;
    };
    inline bool operator==(const LoadingConfig&l, const LoadingConfig&r)
    {
        return l.imageUrl == r.imageUrl && l.bgColor == r.bgColor && l.speedTextColor == r.speedTextColor && l.startTime == r.startTime && l.endTime == r.endTime && l.configId == r.configId && l.showTimes == r.showTimes;
    }
    inline bool operator!=(const LoadingConfig&l, const LoadingConfig&r)
    {
        return !(l == r);
    }

    struct VideoDataList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoDataList";
        }
        static string MD5()
        {
            return "ddc709be1ec4bbab5462d078ba0b8f35";
        }
        VideoDataList()
        :pageContext(""),isAllData(true),uiType(0),belongKey(""),downloadCopyRight(0),cacheDataKey(""),moduleTitle(""),priority(0),dataType(""),cacheItemsCount(0),nextVideoKey(""),nextCoverKey(""),hasPreDownload(0),updateDetail(""),extraInfoFlag(0)
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
            isAllData = true;
            uiType = 0;
            belongKey = "";
            downloadCopyRight = 0;
            cacheDataKey = "";
            moduleTitle = "";
            priority = 0;
            dataType = "";
            cacheItemsCount = 0;
            nextVideoKey = "";
            nextCoverKey = "";
            hasPreDownload = 0;
            updateDetail = "";
            extraInfoFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(videoList, 0);
            _os.write(pageContext, 1);
            _os.write(isAllData, 2);
            _os.write(uiType, 3);
            _os.write(belongKey, 4);
            _os.write(downloadCopyRight, 5);
            _os.write(cacheDataKey, 6);
            _os.write(moduleTitle, 7);
            _os.write(batchData, 8);
            _os.write(priority, 9);
            _os.write(dataType, 10);
            _os.write(cacheItemsCount, 11);
            _os.write(nextVideoKey, 12);
            _os.write(nextAction, 13);
            _os.write(nextTipsPoster, 14);
            _os.write(nextCoverKey, 15);
            _os.write(hasPreDownload, 16);
            _os.write(loadingConfig, 17);
            _os.write(updateDetail, 18);
            _os.write(extraInfoFlag, 19);
            _os.write(vipPlayerTipsConfig, 20);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(videoList, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(isAllData, 2, false);
            _is.read(uiType, 3, false);
            _is.read(belongKey, 4, false);
            _is.read(downloadCopyRight, 5, false);
            _is.read(cacheDataKey, 6, false);
            _is.read(moduleTitle, 7, false);
            _is.read(batchData, 8, false);
            _is.read(priority, 9, false);
            _is.read(dataType, 10, false);
            _is.read(cacheItemsCount, 11, false);
            _is.read(nextVideoKey, 12, false);
            _is.read(nextAction, 13, false);
            _is.read(nextTipsPoster, 14, false);
            _is.read(nextCoverKey, 15, false);
            _is.read(hasPreDownload, 16, false);
            _is.read(loadingConfig, 17, false);
            _is.read(updateDetail, 18, false);
            _is.read(extraInfoFlag, 19, false);
            _is.read(vipPlayerTipsConfig, 20, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(videoList,"videoList");
            _ds.display(pageContext,"pageContext");
            _ds.display(isAllData,"isAllData");
            _ds.display(uiType,"uiType");
            _ds.display(belongKey,"belongKey");
            _ds.display(downloadCopyRight,"downloadCopyRight");
            _ds.display(cacheDataKey,"cacheDataKey");
            _ds.display(moduleTitle,"moduleTitle");
            _ds.display(batchData,"batchData");
            _ds.display(priority,"priority");
            _ds.display(dataType,"dataType");
            _ds.display(cacheItemsCount,"cacheItemsCount");
            _ds.display(nextVideoKey,"nextVideoKey");
            _ds.display(nextAction,"nextAction");
            _ds.display(nextTipsPoster,"nextTipsPoster");
            _ds.display(nextCoverKey,"nextCoverKey");
            _ds.display(hasPreDownload,"hasPreDownload");
            _ds.display(loadingConfig,"loadingConfig");
            _ds.display(updateDetail,"updateDetail");
            _ds.display(extraInfoFlag,"extraInfoFlag");
            _ds.display(vipPlayerTipsConfig,"vipPlayerTipsConfig");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(videoList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isAllData, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(belongKey, true);
            _ds.displaySimple(downloadCopyRight, true);
            _ds.displaySimple(cacheDataKey, true);
            _ds.displaySimple(moduleTitle, true);
            _ds.displaySimple(batchData, true);
            _ds.displaySimple(priority, true);
            _ds.displaySimple(dataType, true);
            _ds.displaySimple(cacheItemsCount, true);
            _ds.displaySimple(nextVideoKey, true);
            _ds.displaySimple(nextAction, true);
            _ds.displaySimple(nextTipsPoster, true);
            _ds.displaySimple(nextCoverKey, true);
            _ds.displaySimple(hasPreDownload, true);
            _ds.displaySimple(loadingConfig, true);
            _ds.displaySimple(updateDetail, true);
            _ds.displaySimple(extraInfoFlag, true);
            _ds.displaySimple(vipPlayerTipsConfig, false);
            return _os;
        }
    public:
        vector<jce::VideoItemData> videoList;
        std::string pageContext;
        taf::Bool isAllData;
        taf::Int32 uiType;
        std::string belongKey;
        taf::Int32 downloadCopyRight;
        std::string cacheDataKey;
        std::string moduleTitle;
        jce::BatchData batchData;
        taf::Int32 priority;
        std::string dataType;
        taf::Int32 cacheItemsCount;
        std::string nextVideoKey;
        jce::Action nextAction;
        jce::Poster nextTipsPoster;
        std::string nextCoverKey;
        taf::Int32 hasPreDownload;
        jce::LoadingConfig loadingConfig;
        std::string updateDetail;
        taf::Int32 extraInfoFlag;
        jce::VipPlayerTipsConfig vipPlayerTipsConfig;
    };
    inline bool operator==(const VideoDataList&l, const VideoDataList&r)
    {
        return l.videoList == r.videoList && l.pageContext == r.pageContext && l.isAllData == r.isAllData && l.uiType == r.uiType && l.belongKey == r.belongKey && l.downloadCopyRight == r.downloadCopyRight && l.cacheDataKey == r.cacheDataKey && l.moduleTitle == r.moduleTitle && l.batchData == r.batchData && l.priority == r.priority && l.dataType == r.dataType && l.cacheItemsCount == r.cacheItemsCount && l.nextVideoKey == r.nextVideoKey && l.nextAction == r.nextAction && l.nextTipsPoster == r.nextTipsPoster && l.nextCoverKey == r.nextCoverKey && l.hasPreDownload == r.hasPreDownload && l.loadingConfig == r.loadingConfig && l.updateDetail == r.updateDetail && l.extraInfoFlag == r.extraInfoFlag && l.vipPlayerTipsConfig == r.vipPlayerTipsConfig;
    }
    inline bool operator!=(const VideoDataList&l, const VideoDataList&r)
    {
        return !(l == r);
    }

    struct CoverDataList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CoverDataList";
        }
        static string MD5()
        {
            return "39f8c0e7e980ce8e57b1313637f77bb9";
        }
        CoverDataList()
        :pageContext(""),uiType(0),isAllData(true),dataType(""),priority(0)
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
            uiType = 0;
            isAllData = true;
            dataType = "";
            priority = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(coverList, 0);
            _os.write(pageContext, 1);
            _os.write(uiType, 2);
            _os.write(isAllData, 3);
            _os.write(dataType, 4);
            _os.write(batchData, 5);
            _os.write(priority, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(coverList, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(uiType, 2, false);
            _is.read(isAllData, 3, false);
            _is.read(dataType, 4, false);
            _is.read(batchData, 5, false);
            _is.read(priority, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(coverList,"coverList");
            _ds.display(pageContext,"pageContext");
            _ds.display(uiType,"uiType");
            _ds.display(isAllData,"isAllData");
            _ds.display(dataType,"dataType");
            _ds.display(batchData,"batchData");
            _ds.display(priority,"priority");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(coverList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(isAllData, true);
            _ds.displaySimple(dataType, true);
            _ds.displaySimple(batchData, true);
            _ds.displaySimple(priority, false);
            return _os;
        }
    public:
        vector<jce::CoverItemData> coverList;
        std::string pageContext;
        taf::Int32 uiType;
        taf::Bool isAllData;
        std::string dataType;
        jce::BatchData batchData;
        taf::Int32 priority;
    };
    inline bool operator==(const CoverDataList&l, const CoverDataList&r)
    {
        return l.coverList == r.coverList && l.pageContext == r.pageContext && l.uiType == r.uiType && l.isAllData == r.isAllData && l.dataType == r.dataType && l.batchData == r.batchData && l.priority == r.priority;
    }
    inline bool operator!=(const CoverDataList&l, const CoverDataList&r)
    {
        return !(l == r);
    }

    struct LiveVideoItemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveVideoItemData";
        }
        static string MD5()
        {
            return "e28ec569621f9e9d5e2a619839b50801";
        }
        LiveVideoItemData()
        :pid(""),streamId(""),payStatus(0),startTime(0),title(""),subTitle(""),isIpLimit(true),DMContentKey(""),isHaveDM(true),DMIsOpen(true),horizontalPosterImgUrl(""),shareUrl(""),shareTitle(""),shareSubtitle(""),shareImgUrl(""),price(""),vipPrice(""),dataKey(""),endTime(0),isNoStroeWatchedHistory(true),streamRatio(0),isHaveBubbleDM(true)
        {
        }
        void resetDefautlt()
        {
            pid = "";
            streamId = "";
            payStatus = 0;
            startTime = 0;
            title = "";
            subTitle = "";
            isIpLimit = true;
            DMContentKey = "";
            isHaveDM = true;
            DMIsOpen = true;
            horizontalPosterImgUrl = "";
            shareUrl = "";
            shareTitle = "";
            shareSubtitle = "";
            shareImgUrl = "";
            price = "";
            vipPrice = "";
            dataKey = "";
            endTime = 0;
            isNoStroeWatchedHistory = true;
            streamRatio = 0;
            isHaveBubbleDM = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pid, 0);
            _os.write(streamId, 1);
            _os.write(payStatus, 2);
            _os.write(startTime, 3);
            _os.write(keyPointList, 4);
            _os.write(title, 5);
            _os.write(subTitle, 6);
            _os.write(titleMarkLabelList, 7);
            _os.write(isIpLimit, 8);
            _os.write(DMContentKey, 9);
            _os.write(isHaveDM, 10);
            _os.write(DMIsOpen, 11);
            _os.write(horizontalPosterImgUrl, 12);
            _os.write(shareUrl, 13);
            _os.write(shareTitle, 14);
            _os.write(shareSubtitle, 15);
            _os.write(shareImgUrl, 16);
            _os.write(price, 17);
            _os.write(vipPrice, 18);
            _os.write(dataKey, 19);
            _os.write(endTime, 20);
            _os.write(isNoStroeWatchedHistory, 21);
            _os.write(sharItem, 22);
            _os.write(streamRatio, 23);
            _os.write(isHaveBubbleDM, 24);
            _os.write(extra, 25);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pid, 0, true);
            _is.read(streamId, 1, true);
            _is.read(payStatus, 2, true);
            _is.read(startTime, 3, true);
            _is.read(keyPointList, 4, false);
            _is.read(title, 5, false);
            _is.read(subTitle, 6, false);
            _is.read(titleMarkLabelList, 7, false);
            _is.read(isIpLimit, 8, false);
            _is.read(DMContentKey, 9, false);
            _is.read(isHaveDM, 10, false);
            _is.read(DMIsOpen, 11, false);
            _is.read(horizontalPosterImgUrl, 12, false);
            _is.read(shareUrl, 13, false);
            _is.read(shareTitle, 14, false);
            _is.read(shareSubtitle, 15, false);
            _is.read(shareImgUrl, 16, false);
            _is.read(price, 17, false);
            _is.read(vipPrice, 18, false);
            _is.read(dataKey, 19, false);
            _is.read(endTime, 20, false);
            _is.read(isNoStroeWatchedHistory, 21, false);
            _is.read(sharItem, 22, false);
            _is.read(streamRatio, 23, false);
            _is.read(isHaveBubbleDM, 24, false);
            _is.read(extra, 25, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pid,"pid");
            _ds.display(streamId,"streamId");
            _ds.display(payStatus,"payStatus");
            _ds.display(startTime,"startTime");
            _ds.display(keyPointList,"keyPointList");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(titleMarkLabelList,"titleMarkLabelList");
            _ds.display(isIpLimit,"isIpLimit");
            _ds.display(DMContentKey,"DMContentKey");
            _ds.display(isHaveDM,"isHaveDM");
            _ds.display(DMIsOpen,"DMIsOpen");
            _ds.display(horizontalPosterImgUrl,"horizontalPosterImgUrl");
            _ds.display(shareUrl,"shareUrl");
            _ds.display(shareTitle,"shareTitle");
            _ds.display(shareSubtitle,"shareSubtitle");
            _ds.display(shareImgUrl,"shareImgUrl");
            _ds.display(price,"price");
            _ds.display(vipPrice,"vipPrice");
            _ds.display(dataKey,"dataKey");
            _ds.display(endTime,"endTime");
            _ds.display(isNoStroeWatchedHistory,"isNoStroeWatchedHistory");
            _ds.display(sharItem,"sharItem");
            _ds.display(streamRatio,"streamRatio");
            _ds.display(isHaveBubbleDM,"isHaveBubbleDM");
            _ds.display(extra,"extra");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(streamId, true);
            _ds.displaySimple(payStatus, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(keyPointList, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(titleMarkLabelList, true);
            _ds.displaySimple(isIpLimit, true);
            _ds.displaySimple(DMContentKey, true);
            _ds.displaySimple(isHaveDM, true);
            _ds.displaySimple(DMIsOpen, true);
            _ds.displaySimple(horizontalPosterImgUrl, true);
            _ds.displaySimple(shareUrl, true);
            _ds.displaySimple(shareTitle, true);
            _ds.displaySimple(shareSubtitle, true);
            _ds.displaySimple(shareImgUrl, true);
            _ds.displaySimple(price, true);
            _ds.displaySimple(vipPrice, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(isNoStroeWatchedHistory, true);
            _ds.displaySimple(sharItem, true);
            _ds.displaySimple(streamRatio, true);
            _ds.displaySimple(isHaveBubbleDM, true);
            _ds.displaySimple(extra, false);
            return _os;
        }
    public:
        std::string pid;
        std::string streamId;
        taf::Int32 payStatus;
        taf::Int64 startTime;
        vector<taf::Int32> keyPointList;
        std::string title;
        std::string subTitle;
        vector<jce::MarkLabel> titleMarkLabelList;
        taf::Bool isIpLimit;
        std::string DMContentKey;
        taf::Bool isHaveDM;
        taf::Bool DMIsOpen;
        std::string horizontalPosterImgUrl;
        std::string shareUrl;
        std::string shareTitle;
        std::string shareSubtitle;
        std::string shareImgUrl;
        std::string price;
        std::string vipPrice;
        std::string dataKey;
        taf::Int64 endTime;
        taf::Bool isNoStroeWatchedHistory;
        jce::ShareItem sharItem;
        taf::Float streamRatio;
        taf::Bool isHaveBubbleDM;
        jce::VideoItemExtra extra;
    };
    inline bool operator==(const LiveVideoItemData&l, const LiveVideoItemData&r)
    {
        return l.pid == r.pid && l.streamId == r.streamId && l.payStatus == r.payStatus && l.startTime == r.startTime && l.keyPointList == r.keyPointList && l.title == r.title && l.subTitle == r.subTitle && l.titleMarkLabelList == r.titleMarkLabelList && l.isIpLimit == r.isIpLimit && l.DMContentKey == r.DMContentKey && l.isHaveDM == r.isHaveDM && l.DMIsOpen == r.DMIsOpen && l.horizontalPosterImgUrl == r.horizontalPosterImgUrl && l.shareUrl == r.shareUrl && l.shareTitle == r.shareTitle && l.shareSubtitle == r.shareSubtitle && l.shareImgUrl == r.shareImgUrl && l.price == r.price && l.vipPrice == r.vipPrice && l.dataKey == r.dataKey && l.endTime == r.endTime && l.isNoStroeWatchedHistory == r.isNoStroeWatchedHistory && l.sharItem == r.sharItem && l.streamRatio == r.streamRatio && l.isHaveBubbleDM == r.isHaveBubbleDM && l.extra == r.extra;
    }
    inline bool operator!=(const LiveVideoItemData&l, const LiveVideoItemData&r)
    {
        return !(l == r);
    }

    struct PortraitInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PortraitInfo";
        }
        static string MD5()
        {
            return "4e875b97385505b76ce0ecd420632539";
        }
        PortraitInfo()
        :actorName(""),actorId(""),faceImageUrl("")
        {
        }
        void resetDefautlt()
        {
            actorName = "";
            actorId = "";
            faceImageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actorName, 0);
            _os.write(actorId, 1);
            _os.write(faceImageUrl, 2);
            _os.write(detailInfo, 3);
            _os.write(voteData, 4);
            _os.write(action, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actorName, 0, true);
            _is.read(actorId, 1, false);
            _is.read(faceImageUrl, 2, false);
            _is.read(detailInfo, 3, false);
            _is.read(voteData, 4, false);
            _is.read(action, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actorName,"actorName");
            _ds.display(actorId,"actorId");
            _ds.display(faceImageUrl,"faceImageUrl");
            _ds.display(detailInfo,"detailInfo");
            _ds.display(voteData,"voteData");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actorName, true);
            _ds.displaySimple(actorId, true);
            _ds.displaySimple(faceImageUrl, true);
            _ds.displaySimple(detailInfo, true);
            _ds.displaySimple(voteData, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string actorName;
        std::string actorId;
        std::string faceImageUrl;
        vector<jce::KVItem> detailInfo;
        jce::VoteData voteData;
        jce::Action action;
    };
    inline bool operator==(const PortraitInfo&l, const PortraitInfo&r)
    {
        return l.actorName == r.actorName && l.actorId == r.actorId && l.faceImageUrl == r.faceImageUrl && l.detailInfo == r.detailInfo && l.voteData == r.voteData && l.action == r.action;
    }
    inline bool operator!=(const PortraitInfo&l, const PortraitInfo&r)
    {
        return !(l == r);
    }

    struct FanInvolveItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanInvolveItem";
        }
        static string MD5()
        {
            return "0a9830fc3289cbca78dc249b20b3d794";
        }
        FanInvolveItem()
        :fanId(""),fanAttendKey(""),fansFlag(0),fanType(0),fanTitle(""),faceImageUrl(""),backgroundUrl(""),signCount(0),artImageUrl("")
        {
        }
        void resetDefautlt()
        {
            fanId = "";
            fanAttendKey = "";
            fansFlag = 0;
            fanType = 0;
            fanTitle = "";
            faceImageUrl = "";
            backgroundUrl = "";
            signCount = 0;
            artImageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fanId, 0);
            _os.write(fanAttendKey, 1);
            _os.write(detailInfo, 2);
            _os.write(relateFans, 3);
            _os.write(fansFlag, 4);
            _os.write(fanType, 5);
            _os.write(fanTitle, 6);
            _os.write(faceImageUrl, 7);
            _os.write(backgroundUrl, 8);
            _os.write(moreAction, 9);
            _os.write(signCount, 10);
            _os.write(signMoreAction, 11);
            _os.write(signedAction, 12);
            _os.write(artImageUrl, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fanId, 0, true);
            _is.read(fanAttendKey, 1, false);
            _is.read(detailInfo, 2, false);
            _is.read(relateFans, 3, false);
            _is.read(fansFlag, 4, false);
            _is.read(fanType, 5, false);
            _is.read(fanTitle, 6, false);
            _is.read(faceImageUrl, 7, false);
            _is.read(backgroundUrl, 8, false);
            _is.read(moreAction, 9, false);
            _is.read(signCount, 10, false);
            _is.read(signMoreAction, 11, false);
            _is.read(signedAction, 12, false);
            _is.read(artImageUrl, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fanId,"fanId");
            _ds.display(fanAttendKey,"fanAttendKey");
            _ds.display(detailInfo,"detailInfo");
            _ds.display(relateFans,"relateFans");
            _ds.display(fansFlag,"fansFlag");
            _ds.display(fanType,"fanType");
            _ds.display(fanTitle,"fanTitle");
            _ds.display(faceImageUrl,"faceImageUrl");
            _ds.display(backgroundUrl,"backgroundUrl");
            _ds.display(moreAction,"moreAction");
            _ds.display(signCount,"signCount");
            _ds.display(signMoreAction,"signMoreAction");
            _ds.display(signedAction,"signedAction");
            _ds.display(artImageUrl,"artImageUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fanId, true);
            _ds.displaySimple(fanAttendKey, true);
            _ds.displaySimple(detailInfo, true);
            _ds.displaySimple(relateFans, true);
            _ds.displaySimple(fansFlag, true);
            _ds.displaySimple(fanType, true);
            _ds.displaySimple(fanTitle, true);
            _ds.displaySimple(faceImageUrl, true);
            _ds.displaySimple(backgroundUrl, true);
            _ds.displaySimple(moreAction, true);
            _ds.displaySimple(signCount, true);
            _ds.displaySimple(signMoreAction, true);
            _ds.displaySimple(signedAction, true);
            _ds.displaySimple(artImageUrl, false);
            return _os;
        }
    public:
        std::string fanId;
        std::string fanAttendKey;
        vector<jce::KVItem> detailInfo;
        vector<jce::PortraitInfo> relateFans;
        taf::Int32 fansFlag;
        taf::Int32 fanType;
        std::string fanTitle;
        std::string faceImageUrl;
        std::string backgroundUrl;
        jce::ActionBarInfo moreAction;
        taf::Int32 signCount;
        jce::ActionBarInfo signMoreAction;
        jce::Action signedAction;
        std::string artImageUrl;
    };
    inline bool operator==(const FanInvolveItem&l, const FanInvolveItem&r)
    {
        return l.fanId == r.fanId && l.fanAttendKey == r.fanAttendKey && l.detailInfo == r.detailInfo && l.relateFans == r.relateFans && l.fansFlag == r.fansFlag && l.fanType == r.fanType && l.fanTitle == r.fanTitle && l.faceImageUrl == r.faceImageUrl && l.backgroundUrl == r.backgroundUrl && l.moreAction == r.moreAction && l.signCount == r.signCount && l.signMoreAction == r.signMoreAction && l.signedAction == r.signedAction && l.artImageUrl == r.artImageUrl;
    }
    inline bool operator!=(const FanInvolveItem&l, const FanInvolveItem&r)
    {
        return !(l == r);
    }

    struct UserBasicVipInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserBasicVipInfo";
        }
        static string MD5()
        {
            return "c5e0fc9dc53288a614a8920b849d83a0";
        }
        UserBasicVipInfo()
        :isVip(false),isAnnualVip(false),level(0),vipIcon("")
        {
        }
        void resetDefautlt()
        {
            isVip = false;
            isAnnualVip = false;
            level = 0;
            vipIcon = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(isVip, 0);
            _os.write(isAnnualVip, 1);
            _os.write(level, 2);
            _os.write(vipIcon, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(isVip, 0, false);
            _is.read(isAnnualVip, 1, false);
            _is.read(level, 2, false);
            _is.read(vipIcon, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(isVip,"isVip");
            _ds.display(isAnnualVip,"isAnnualVip");
            _ds.display(level,"level");
            _ds.display(vipIcon,"vipIcon");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(isVip, true);
            _ds.displaySimple(isAnnualVip, true);
            _ds.displaySimple(level, true);
            _ds.displaySimple(vipIcon, false);
            return _os;
        }
    public:
        taf::Bool isVip;
        taf::Bool isAnnualVip;
        taf::Int32 level;
        std::string vipIcon;
    };
    inline bool operator==(const UserBasicVipInfo&l, const UserBasicVipInfo&r)
    {
        return l.isVip == r.isVip && l.isAnnualVip == r.isAnnualVip && l.level == r.level && l.vipIcon == r.vipIcon;
    }
    inline bool operator!=(const UserBasicVipInfo&l, const UserBasicVipInfo&r)
    {
        return !(l == r);
    }

    struct DegreeLabel : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DegreeLabel";
        }
        static string MD5()
        {
            return "4f8f2305ba2199c8ee257d271459680d";
        }
        DegreeLabel()
        :degree(0),iconUrl("")
        {
        }
        void resetDefautlt()
        {
            degree = 0;
            iconUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(degree, 0);
            _os.write(iconUrl, 1);
            _os.write(tapAction, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(degree, 0, true);
            _is.read(iconUrl, 1, true);
            _is.read(tapAction, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(degree,"degree");
            _ds.display(iconUrl,"iconUrl");
            _ds.display(tapAction,"tapAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(degree, true);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(tapAction, false);
            return _os;
        }
    public:
        taf::Int32 degree;
        std::string iconUrl;
        jce::Action tapAction;
    };
    inline bool operator==(const DegreeLabel&l, const DegreeLabel&r)
    {
        return l.degree == r.degree && l.iconUrl == r.iconUrl && l.tapAction == r.tapAction;
    }
    inline bool operator!=(const DegreeLabel&l, const DegreeLabel&r)
    {
        return !(l == r);
    }

    struct IdentityInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.IdentityInfo";
        }
        static string MD5()
        {
            return "0c5d344c1a12f98a624e8012e018a332";
        }
        IdentityInfo()
        :identityType(0),richLabel("")
        {
        }
        void resetDefautlt()
        {
            identityType = 0;
            richLabel = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(identityType, 0);
            _os.write(richLabel, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(identityType, 0, false);
            _is.read(richLabel, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(identityType,"identityType");
            _ds.display(richLabel,"richLabel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(identityType, true);
            _ds.displaySimple(richLabel, false);
            return _os;
        }
    public:
        taf::Char identityType;
        std::string richLabel;
    };
    inline bool operator==(const IdentityInfo&l, const IdentityInfo&r)
    {
        return l.identityType == r.identityType && l.richLabel == r.richLabel;
    }
    inline bool operator!=(const IdentityInfo&l, const IdentityInfo&r)
    {
        return !(l == r);
    }

    struct ActorInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ActorInfo";
        }
        static string MD5()
        {
            return "bed56fbbe161f8592b123d6ee675fd09";
        }
        ActorInfo()
        :actorName(""),actorId(""),faceImageUrl(""),voteId(""),voteSubjectId(""),voteOptionId(""),acountType(0),actorAliases(""),idType(0),reportKey(""),reportParams(""),userType(0),signatureText("")
        {
        }
        void resetDefautlt()
        {
            actorName = "";
            actorId = "";
            faceImageUrl = "";
            voteId = "";
            voteSubjectId = "";
            voteOptionId = "";
            acountType = 0;
            actorAliases = "";
            idType = 0;
            reportKey = "";
            reportParams = "";
            userType = 0;
            signatureText = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actorName, 0);
            _os.write(actorId, 1);
            _os.write(faceImageUrl, 2);
            _os.write(detailInfo, 3);
            _os.write(voteData, 4);
            _os.write(action, 5);
            _os.write(voteId, 6);
            _os.write(voteSubjectId, 7);
            _os.write(voteOptionId, 8);
            _os.write(nameMarkLable, 9);
            _os.write(markLable, 10);
            _os.write(fanItem, 11);
            _os.write(userBasicVipInfo, 12);
            _os.write(acountType, 13);
            _os.write(vrssItem, 14);
            _os.write(actorAliases, 15);
            _os.write(idType, 16);
            _os.write(medalInfo, 17);
            _os.write(reportKey, 18);
            _os.write(reportParams, 19);
            _os.write(userType, 20);
            _os.write(dokiDegreeInfo, 21);
            _os.write(adminDegreeInfo, 22);
            _os.write(signatureText, 23);
            _os.write(animDegreeInfo, 24);
            _os.write(identityInfo, 25);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actorName, 0, true);
            _is.read(actorId, 1, false);
            _is.read(faceImageUrl, 2, false);
            _is.read(detailInfo, 3, false);
            _is.read(voteData, 4, false);
            _is.read(action, 5, false);
            _is.read(voteId, 6, false);
            _is.read(voteSubjectId, 7, false);
            _is.read(voteOptionId, 8, false);
            _is.read(nameMarkLable, 9, false);
            _is.read(markLable, 10, false);
            _is.read(fanItem, 11, false);
            _is.read(userBasicVipInfo, 12, false);
            _is.read(acountType, 13, false);
            _is.read(vrssItem, 14, false);
            _is.read(actorAliases, 15, false);
            _is.read(idType, 16, false);
            _is.read(medalInfo, 17, false);
            _is.read(reportKey, 18, false);
            _is.read(reportParams, 19, false);
            _is.read(userType, 20, false);
            _is.read(dokiDegreeInfo, 21, false);
            _is.read(adminDegreeInfo, 22, false);
            _is.read(signatureText, 23, false);
            _is.read(animDegreeInfo, 24, false);
            _is.read(identityInfo, 25, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actorName,"actorName");
            _ds.display(actorId,"actorId");
            _ds.display(faceImageUrl,"faceImageUrl");
            _ds.display(detailInfo,"detailInfo");
            _ds.display(voteData,"voteData");
            _ds.display(action,"action");
            _ds.display(voteId,"voteId");
            _ds.display(voteSubjectId,"voteSubjectId");
            _ds.display(voteOptionId,"voteOptionId");
            _ds.display(nameMarkLable,"nameMarkLable");
            _ds.display(markLable,"markLable");
            _ds.display(fanItem,"fanItem");
            _ds.display(userBasicVipInfo,"userBasicVipInfo");
            _ds.display(acountType,"acountType");
            _ds.display(vrssItem,"vrssItem");
            _ds.display(actorAliases,"actorAliases");
            _ds.display(idType,"idType");
            _ds.display(medalInfo,"medalInfo");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(userType,"userType");
            _ds.display(dokiDegreeInfo,"dokiDegreeInfo");
            _ds.display(adminDegreeInfo,"adminDegreeInfo");
            _ds.display(signatureText,"signatureText");
            _ds.display(animDegreeInfo,"animDegreeInfo");
            _ds.display(identityInfo,"identityInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actorName, true);
            _ds.displaySimple(actorId, true);
            _ds.displaySimple(faceImageUrl, true);
            _ds.displaySimple(detailInfo, true);
            _ds.displaySimple(voteData, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(voteId, true);
            _ds.displaySimple(voteSubjectId, true);
            _ds.displaySimple(voteOptionId, true);
            _ds.displaySimple(nameMarkLable, true);
            _ds.displaySimple(markLable, true);
            _ds.displaySimple(fanItem, true);
            _ds.displaySimple(userBasicVipInfo, true);
            _ds.displaySimple(acountType, true);
            _ds.displaySimple(vrssItem, true);
            _ds.displaySimple(actorAliases, true);
            _ds.displaySimple(idType, true);
            _ds.displaySimple(medalInfo, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(userType, true);
            _ds.displaySimple(dokiDegreeInfo, true);
            _ds.displaySimple(adminDegreeInfo, true);
            _ds.displaySimple(signatureText, true);
            _ds.displaySimple(animDegreeInfo, true);
            _ds.displaySimple(identityInfo, false);
            return _os;
        }
    public:
        std::string actorName;
        std::string actorId;
        std::string faceImageUrl;
        vector<jce::KVItem> detailInfo;
        jce::VoteData voteData;
        jce::Action action;
        std::string voteId;
        std::string voteSubjectId;
        std::string voteOptionId;
        jce::MarkLabel nameMarkLable;
        vector<jce::MarkLabel> markLable;
        jce::FanInvolveItem fanItem;
        jce::UserBasicVipInfo userBasicVipInfo;
        taf::Int32 acountType;
        jce::VRSSItem vrssItem;
        std::string actorAliases;
        taf::Int32 idType;
        jce::ActionBarInfo medalInfo;
        std::string reportKey;
        std::string reportParams;
        taf::Char userType;
        jce::DegreeLabel dokiDegreeInfo;
        jce::DegreeLabel adminDegreeInfo;
        std::string signatureText;
        jce::DegreeLabel animDegreeInfo;
        jce::IdentityInfo identityInfo;
    };
    inline bool operator==(const ActorInfo&l, const ActorInfo&r)
    {
        return l.actorName == r.actorName && l.actorId == r.actorId && l.faceImageUrl == r.faceImageUrl && l.detailInfo == r.detailInfo && l.voteData == r.voteData && l.action == r.action && l.voteId == r.voteId && l.voteSubjectId == r.voteSubjectId && l.voteOptionId == r.voteOptionId && l.nameMarkLable == r.nameMarkLable && l.markLable == r.markLable && l.fanItem == r.fanItem && l.userBasicVipInfo == r.userBasicVipInfo && l.acountType == r.acountType && l.vrssItem == r.vrssItem && l.actorAliases == r.actorAliases && l.idType == r.idType && l.medalInfo == r.medalInfo && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.userType == r.userType && l.dokiDegreeInfo == r.dokiDegreeInfo && l.adminDegreeInfo == r.adminDegreeInfo && l.signatureText == r.signatureText && l.animDegreeInfo == r.animDegreeInfo && l.identityInfo == r.identityInfo;
    }
    inline bool operator!=(const ActorInfo&l, const ActorInfo&r)
    {
        return !(l == r);
    }

    struct ActorList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ActorList";
        }
        static string MD5()
        {
            return "769763433976c40b5dc8b782e5f7666a";
        }
        ActorList()
        :title(""),pageContext(""),groupKey("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            pageContext = "";
            groupKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(actorInfoList, 1);
            _os.write(pageContext, 2);
            _os.write(groupKey, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(actorInfoList, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(groupKey, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(actorInfoList,"actorInfoList");
            _ds.display(pageContext,"pageContext");
            _ds.display(groupKey,"groupKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(actorInfoList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(groupKey, false);
            return _os;
        }
    public:
        std::string title;
        vector<jce::ActorInfo> actorInfoList;
        std::string pageContext;
        std::string groupKey;
    };
    inline bool operator==(const ActorList&l, const ActorList&r)
    {
        return l.title == r.title && l.actorInfoList == r.actorInfoList && l.pageContext == r.pageContext && l.groupKey == r.groupKey;
    }
    inline bool operator!=(const ActorList&l, const ActorList&r)
    {
        return !(l == r);
    }

    struct VideoIntroduction : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoIntroduction";
        }
        static string MD5()
        {
            return "b9b07a066e94c2fab3421304d9a77fae";
        }
        VideoIntroduction()
        :text(""),datakey(""),subhead("")
        {
        }
        void resetDefautlt()
        {
            text = "";
            datakey = "";
            subhead = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(text, 1);
            _os.write(actorInfo, 2);
            _os.write(lineLabel, 3);
            _os.write(datakey, 4);
            _os.write(relateDataKey, 5);
            _os.write(detailInfo, 6);
            _os.write(subhead, 7);
            _os.write(action, 8);
            _os.write(subMarkLabelList, 9);
            _os.write(subDetailInfo, 10);
            _os.write(markLabelList, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(text, 1, false);
            _is.read(actorInfo, 2, false);
            _is.read(lineLabel, 3, false);
            _is.read(datakey, 4, false);
            _is.read(relateDataKey, 5, false);
            _is.read(detailInfo, 6, false);
            _is.read(subhead, 7, false);
            _is.read(action, 8, false);
            _is.read(subMarkLabelList, 9, false);
            _is.read(subDetailInfo, 10, false);
            _is.read(markLabelList, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(text,"text");
            _ds.display(actorInfo,"actorInfo");
            _ds.display(lineLabel,"lineLabel");
            _ds.display(datakey,"datakey");
            _ds.display(relateDataKey,"relateDataKey");
            _ds.display(detailInfo,"detailInfo");
            _ds.display(subhead,"subhead");
            _ds.display(action,"action");
            _ds.display(subMarkLabelList,"subMarkLabelList");
            _ds.display(subDetailInfo,"subDetailInfo");
            _ds.display(markLabelList,"markLabelList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(text, true);
            _ds.displaySimple(actorInfo, true);
            _ds.displaySimple(lineLabel, true);
            _ds.displaySimple(datakey, true);
            _ds.displaySimple(relateDataKey, true);
            _ds.displaySimple(detailInfo, true);
            _ds.displaySimple(subhead, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(subMarkLabelList, true);
            _ds.displaySimple(subDetailInfo, true);
            _ds.displaySimple(markLabelList, false);
            return _os;
        }
    public:
        jce::Poster poster;
        std::string text;
        vector<jce::ActorList> actorInfo;
        vector<std::string> lineLabel;
        std::string datakey;
        vector<std::string> relateDataKey;
        vector<jce::KVItem> detailInfo;
        std::string subhead;
        jce::Action action;
        vector<jce::MarkLabel> subMarkLabelList;
        vector<jce::KVItem> subDetailInfo;
        vector<jce::MarkLabel> markLabelList;
    };
    inline bool operator==(const VideoIntroduction&l, const VideoIntroduction&r)
    {
        return l.poster == r.poster && l.text == r.text && l.actorInfo == r.actorInfo && l.lineLabel == r.lineLabel && l.datakey == r.datakey && l.relateDataKey == r.relateDataKey && l.detailInfo == r.detailInfo && l.subhead == r.subhead && l.action == r.action && l.subMarkLabelList == r.subMarkLabelList && l.subDetailInfo == r.subDetailInfo && l.markLabelList == r.markLabelList;
    }
    inline bool operator!=(const VideoIntroduction&l, const VideoIntroduction&r)
    {
        return !(l == r);
    }

    struct FilterOption : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FilterOption";
        }
        static string MD5()
        {
            return "41127c51916ef2230d4f139bd7f8f6f5";
        }
        FilterOption()
        :optionName(""),optionValue(""),isSelected(true),type(0),h5url("")
        {
        }
        void resetDefautlt()
        {
            optionName = "";
            optionValue = "";
            isSelected = true;
            type = 0;
            h5url = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(optionName, 0);
            _os.write(optionValue, 1);
            _os.write(isSelected, 2);
            _os.write(type, 3);
            _os.write(h5url, 4);
            _os.write(clickReport, 5);
            _os.write(exposureReport, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(optionName, 0, true);
            _is.read(optionValue, 1, true);
            _is.read(isSelected, 2, true);
            _is.read(type, 3, false);
            _is.read(h5url, 4, false);
            _is.read(clickReport, 5, false);
            _is.read(exposureReport, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(optionName,"optionName");
            _ds.display(optionValue,"optionValue");
            _ds.display(isSelected,"isSelected");
            _ds.display(type,"type");
            _ds.display(h5url,"h5url");
            _ds.display(clickReport,"clickReport");
            _ds.display(exposureReport,"exposureReport");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(optionName, true);
            _ds.displaySimple(optionValue, true);
            _ds.displaySimple(isSelected, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(h5url, true);
            _ds.displaySimple(clickReport, true);
            _ds.displaySimple(exposureReport, false);
            return _os;
        }
    public:
        std::string optionName;
        std::string optionValue;
        taf::Bool isSelected;
        taf::Int32 type;
        std::string h5url;
        jce::ExtraReportKV clickReport;
        jce::ExtraReportKV exposureReport;
    };
    inline bool operator==(const FilterOption&l, const FilterOption&r)
    {
        return l.optionName == r.optionName && l.optionValue == r.optionValue && l.isSelected == r.isSelected && l.type == r.type && l.h5url == r.h5url && l.clickReport == r.clickReport && l.exposureReport == r.exposureReport;
    }
    inline bool operator!=(const FilterOption&l, const FilterOption&r)
    {
        return !(l == r);
    }

    struct VideoFilterItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoFilterItem";
        }
        static string MD5()
        {
            return "e0ab73b4747d7622524ca488a03bb5fc";
        }
        VideoFilterItem()
        :fileterItemKey(""),fileterName("")
        {
        }
        void resetDefautlt()
        {
            fileterItemKey = "";
            fileterName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fileterItemKey, 0);
            _os.write(optionList, 1);
            _os.write(fileterName, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fileterItemKey, 0, true);
            _is.read(optionList, 1, true);
            _is.read(fileterName, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fileterItemKey,"fileterItemKey");
            _ds.display(optionList,"optionList");
            _ds.display(fileterName,"fileterName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fileterItemKey, true);
            _ds.displaySimple(optionList, true);
            _ds.displaySimple(fileterName, false);
            return _os;
        }
    public:
        std::string fileterItemKey;
        vector<jce::FilterOption> optionList;
        std::string fileterName;
    };
    inline bool operator==(const VideoFilterItem&l, const VideoFilterItem&r)
    {
        return l.fileterItemKey == r.fileterItemKey && l.optionList == r.optionList && l.fileterName == r.fileterName;
    }
    inline bool operator!=(const VideoFilterItem&l, const VideoFilterItem&r)
    {
        return !(l == r);
    }

    struct VideoFilter : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoFilter";
        }
        static string MD5()
        {
            return "a54c29027ce0ad99432245eca4f46cde";
        }
        VideoFilter()
        :reportParam(""),type(""),dataKey("")
        {
        }
        void resetDefautlt()
        {
            reportParam = "";
            type = "";
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(filterItemList, 0);
            _os.write(reportParam, 1);
            _os.write(type, 2);
            _os.write(dataKey, 3);
            _os.write(exposureReport, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(filterItemList, 0, true);
            _is.read(reportParam, 1, false);
            _is.read(type, 2, false);
            _is.read(dataKey, 3, false);
            _is.read(exposureReport, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(filterItemList,"filterItemList");
            _ds.display(reportParam,"reportParam");
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            _ds.display(exposureReport,"exposureReport");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(filterItemList, true);
            _ds.displaySimple(reportParam, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(exposureReport, false);
            return _os;
        }
    public:
        vector<jce::VideoFilterItem> filterItemList;
        std::string reportParam;
        std::string type;
        std::string dataKey;
        jce::ExtraReportKV exposureReport;
    };
    inline bool operator==(const VideoFilter&l, const VideoFilter&r)
    {
        return l.filterItemList == r.filterItemList && l.reportParam == r.reportParam && l.type == r.type && l.dataKey == r.dataKey && l.exposureReport == r.exposureReport;
    }
    inline bool operator!=(const VideoFilter&l, const VideoFilter&r)
    {
        return !(l == r);
    }

    struct LiveLotteryInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveLotteryInfo";
        }
        static string MD5()
        {
            return "106b995fea95229786acf5ddf3f07d07";
        }
        LiveLotteryInfo()
        :title(""),iconUrl(""),bgColor(""),desc("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            iconUrl = "";
            bgColor = "";
            desc = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(iconUrl, 1);
            _os.write(bgColor, 2);
            _os.write(action, 3);
            _os.write(desc, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(iconUrl, 1, false);
            _is.read(bgColor, 2, false);
            _is.read(action, 3, false);
            _is.read(desc, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(iconUrl,"iconUrl");
            _ds.display(bgColor,"bgColor");
            _ds.display(action,"action");
            _ds.display(desc,"desc");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(bgColor, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(desc, false);
            return _os;
        }
    public:
        std::string title;
        std::string iconUrl;
        std::string bgColor;
        jce::Action action;
        std::string desc;
    };
    inline bool operator==(const LiveLotteryInfo&l, const LiveLotteryInfo&r)
    {
        return l.title == r.title && l.iconUrl == r.iconUrl && l.bgColor == r.bgColor && l.action == r.action && l.desc == r.desc;
    }
    inline bool operator!=(const LiveLotteryInfo&l, const LiveLotteryInfo&r)
    {
        return !(l == r);
    }

    struct LiveH5RichInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveH5RichInfo";
        }
        static string MD5()
        {
            return "de305ea73d3ed4fbbbceb75506f67f47";
        }
        LiveH5RichInfo()
        :icon(""),title(""),desc(""),imageUiType(0)
        {
        }
        void resetDefautlt()
        {
            icon = "";
            title = "";
            desc = "";
            imageUiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(icon, 0);
            _os.write(title, 1);
            _os.write(desc, 2);
            _os.write(action, 3);
            _os.write(imageUiType, 4);
            _os.write(markLable, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(icon, 0, false);
            _is.read(title, 1, false);
            _is.read(desc, 2, false);
            _is.read(action, 3, false);
            _is.read(imageUiType, 4, false);
            _is.read(markLable, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(icon,"icon");
            _ds.display(title,"title");
            _ds.display(desc,"desc");
            _ds.display(action,"action");
            _ds.display(imageUiType,"imageUiType");
            _ds.display(markLable,"markLable");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(icon, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(desc, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(imageUiType, true);
            _ds.displaySimple(markLable, false);
            return _os;
        }
    public:
        std::string icon;
        std::string title;
        std::string desc;
        jce::Action action;
        taf::Int32 imageUiType;
        vector<jce::MarkLabel> markLable;
    };
    inline bool operator==(const LiveH5RichInfo&l, const LiveH5RichInfo&r)
    {
        return l.icon == r.icon && l.title == r.title && l.desc == r.desc && l.action == r.action && l.imageUiType == r.imageUiType && l.markLable == r.markLable;
    }
    inline bool operator!=(const LiveH5RichInfo&l, const LiveH5RichInfo&r)
    {
        return !(l == r);
    }

    struct LiveVoteOptionInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveVoteOptionInfo";
        }
        static string MD5()
        {
            return "7f008b94bb4b2525cfc8796233781b95";
        }
        LiveVoteOptionInfo()
        :optionId(""),title(""),desc(""),voteCount(0),percent(0),imageUrl(""),richType(0)
        {
        }
        void resetDefautlt()
        {
            optionId = "";
            title = "";
            desc = "";
            voteCount = 0;
            percent = 0;
            imageUrl = "";
            richType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(optionId, 0);
            _os.write(title, 1);
            _os.write(desc, 2);
            _os.write(voteCount, 3);
            _os.write(percent, 4);
            _os.write(imageUrl, 5);
            _os.write(richType, 6);
            _os.write(action, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(optionId, 0, true);
            _is.read(title, 1, true);
            _is.read(desc, 2, false);
            _is.read(voteCount, 3, false);
            _is.read(percent, 4, false);
            _is.read(imageUrl, 5, false);
            _is.read(richType, 6, false);
            _is.read(action, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(optionId,"optionId");
            _ds.display(title,"title");
            _ds.display(desc,"desc");
            _ds.display(voteCount,"voteCount");
            _ds.display(percent,"percent");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(richType,"richType");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(optionId, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(desc, true);
            _ds.displaySimple(voteCount, true);
            _ds.displaySimple(percent, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(richType, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string optionId;
        std::string title;
        std::string desc;
        taf::Int32 voteCount;
        taf::Int32 percent;
        std::string imageUrl;
        taf::Int32 richType;
        jce::Action action;
    };
    inline bool operator==(const LiveVoteOptionInfo&l, const LiveVoteOptionInfo&r)
    {
        return l.optionId == r.optionId && l.title == r.title && l.desc == r.desc && l.voteCount == r.voteCount && l.percent == r.percent && l.imageUrl == r.imageUrl && l.richType == r.richType && l.action == r.action;
    }
    inline bool operator!=(const LiveVoteOptionInfo&l, const LiveVoteOptionInfo&r)
    {
        return !(l == r);
    }

    struct LiveVoteSubject : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveVoteSubject";
        }
        static string MD5()
        {
            return "8c61d547eaebaeda44552239770f8886";
        }
        LiveVoteSubject()
        :optionType(0),title(""),subjectId(""),dataType(0),desc(""),voteCount(0),subjectImage(""),selectMax(0)
        {
        }
        void resetDefautlt()
        {
            optionType = 0;
            title = "";
            subjectId = "";
            dataType = 0;
            desc = "";
            voteCount = 0;
            subjectImage = "";
            selectMax = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(optionType, 0);
            _os.write(title, 1);
            _os.write(subjectId, 2);
            _os.write(options, 3);
            _os.write(dataType, 4);
            _os.write(desc, 5);
            _os.write(voteResultOptionIds, 6);
            _os.write(voteOptionIds, 7);
            _os.write(voteCount, 8);
            _os.write(subjectImage, 9);
            _os.write(selectMax, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(optionType, 0, true);
            _is.read(title, 1, true);
            _is.read(subjectId, 2, true);
            _is.read(options, 3, true);
            _is.read(dataType, 4, true);
            _is.read(desc, 5, false);
            _is.read(voteResultOptionIds, 6, false);
            _is.read(voteOptionIds, 7, false);
            _is.read(voteCount, 8, false);
            _is.read(subjectImage, 9, false);
            _is.read(selectMax, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(optionType,"optionType");
            _ds.display(title,"title");
            _ds.display(subjectId,"subjectId");
            _ds.display(options,"options");
            _ds.display(dataType,"dataType");
            _ds.display(desc,"desc");
            _ds.display(voteResultOptionIds,"voteResultOptionIds");
            _ds.display(voteOptionIds,"voteOptionIds");
            _ds.display(voteCount,"voteCount");
            _ds.display(subjectImage,"subjectImage");
            _ds.display(selectMax,"selectMax");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(optionType, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subjectId, true);
            _ds.displaySimple(options, true);
            _ds.displaySimple(dataType, true);
            _ds.displaySimple(desc, true);
            _ds.displaySimple(voteResultOptionIds, true);
            _ds.displaySimple(voteOptionIds, true);
            _ds.displaySimple(voteCount, true);
            _ds.displaySimple(subjectImage, true);
            _ds.displaySimple(selectMax, false);
            return _os;
        }
    public:
        taf::Int32 optionType;
        std::string title;
        std::string subjectId;
        vector<jce::LiveVoteOptionInfo> options;
        taf::Int32 dataType;
        std::string desc;
        vector<std::string> voteResultOptionIds;
        vector<std::string> voteOptionIds;
        taf::Int32 voteCount;
        std::string subjectImage;
        taf::Int32 selectMax;
    };
    inline bool operator==(const LiveVoteSubject&l, const LiveVoteSubject&r)
    {
        return l.optionType == r.optionType && l.title == r.title && l.subjectId == r.subjectId && l.options == r.options && l.dataType == r.dataType && l.desc == r.desc && l.voteResultOptionIds == r.voteResultOptionIds && l.voteOptionIds == r.voteOptionIds && l.voteCount == r.voteCount && l.subjectImage == r.subjectImage && l.selectMax == r.selectMax;
    }
    inline bool operator!=(const LiveVoteSubject&l, const LiveVoteSubject&r)
    {
        return !(l == r);
    }

    struct LiveVoteInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveVoteInfo";
        }
        static string MD5()
        {
            return "edb915df6b592a1ce42d9ffb56bf9425";
        }
        LiveVoteInfo()
        :voteId(""),title(""),desc(""),isFinish(0),endTime(0),isShare(0),shareUrl(""),shareTitle(""),shareDesc(""),shareImage("")
        {
        }
        void resetDefautlt()
        {
            voteId = "";
            title = "";
            desc = "";
            isFinish = 0;
            endTime = 0;
            isShare = 0;
            shareUrl = "";
            shareTitle = "";
            shareDesc = "";
            shareImage = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(voteId, 0);
            _os.write(title, 1);
            _os.write(subjectList, 2);
            _os.write(desc, 3);
            _os.write(isFinish, 4);
            _os.write(endTime, 5);
            _os.write(lotteryInfo, 6);
            _os.write(isShare, 7);
            _os.write(shareUrl, 8);
            _os.write(shareTitle, 9);
            _os.write(shareDesc, 10);
            _os.write(shareImage, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(voteId, 0, true);
            _is.read(title, 1, true);
            _is.read(subjectList, 2, true);
            _is.read(desc, 3, false);
            _is.read(isFinish, 4, false);
            _is.read(endTime, 5, false);
            _is.read(lotteryInfo, 6, false);
            _is.read(isShare, 7, false);
            _is.read(shareUrl, 8, false);
            _is.read(shareTitle, 9, false);
            _is.read(shareDesc, 10, false);
            _is.read(shareImage, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(voteId,"voteId");
            _ds.display(title,"title");
            _ds.display(subjectList,"subjectList");
            _ds.display(desc,"desc");
            _ds.display(isFinish,"isFinish");
            _ds.display(endTime,"endTime");
            _ds.display(lotteryInfo,"lotteryInfo");
            _ds.display(isShare,"isShare");
            _ds.display(shareUrl,"shareUrl");
            _ds.display(shareTitle,"shareTitle");
            _ds.display(shareDesc,"shareDesc");
            _ds.display(shareImage,"shareImage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(voteId, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subjectList, true);
            _ds.displaySimple(desc, true);
            _ds.displaySimple(isFinish, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(lotteryInfo, true);
            _ds.displaySimple(isShare, true);
            _ds.displaySimple(shareUrl, true);
            _ds.displaySimple(shareTitle, true);
            _ds.displaySimple(shareDesc, true);
            _ds.displaySimple(shareImage, false);
            return _os;
        }
    public:
        std::string voteId;
        std::string title;
        vector<jce::LiveVoteSubject> subjectList;
        std::string desc;
        taf::Char isFinish;
        taf::Int64 endTime;
        jce::LiveLotteryInfo lotteryInfo;
        taf::Int32 isShare;
        std::string shareUrl;
        std::string shareTitle;
        std::string shareDesc;
        std::string shareImage;
    };
    inline bool operator==(const LiveVoteInfo&l, const LiveVoteInfo&r)
    {
        return l.voteId == r.voteId && l.title == r.title && l.subjectList == r.subjectList && l.desc == r.desc && l.isFinish == r.isFinish && l.endTime == r.endTime && l.lotteryInfo == r.lotteryInfo && l.isShare == r.isShare && l.shareUrl == r.shareUrl && l.shareTitle == r.shareTitle && l.shareDesc == r.shareDesc && l.shareImage == r.shareImage;
    }
    inline bool operator!=(const LiveVoteInfo&l, const LiveVoteInfo&r)
    {
        return !(l == r);
    }

    struct InteractionInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.InteractionInfo";
        }
        static string MD5()
        {
            return "f44cf864235b5bccdc97bdc2d437e166";
        }
        InteractionInfo()
        :type(""),id(""),title(""),desc(""),pic(""),transValue(0),feedBorderColor("")
        {
        }
        void resetDefautlt()
        {
            type = "";
            id = "";
            title = "";
            desc = "";
            pic = "";
            transValue = 0;
            feedBorderColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(id, 1);
            _os.write(title, 2);
            _os.write(desc, 3);
            _os.write(pic, 4);
            _os.write(action, 5);
            _os.write(transValue, 7);
            _os.write(feedBorderColor, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(id, 1, false);
            _is.read(title, 2, false);
            _is.read(desc, 3, false);
            _is.read(pic, 4, false);
            _is.read(action, 5, false);
            _is.read(transValue, 7, false);
            _is.read(feedBorderColor, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(id,"id");
            _ds.display(title,"title");
            _ds.display(desc,"desc");
            _ds.display(pic,"pic");
            _ds.display(action,"action");
            _ds.display(transValue,"transValue");
            _ds.display(feedBorderColor,"feedBorderColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(id, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(desc, true);
            _ds.displaySimple(pic, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(transValue, true);
            _ds.displaySimple(feedBorderColor, false);
            return _os;
        }
    public:
        std::string type;
        std::string id;
        std::string title;
        std::string desc;
        std::string pic;
        jce::Action action;
        taf::Int32 transValue;
        std::string feedBorderColor;
    };
    inline bool operator==(const InteractionInfo&l, const InteractionInfo&r)
    {
        return l.type == r.type && l.id == r.id && l.title == r.title && l.desc == r.desc && l.pic == r.pic && l.action == r.action && l.transValue == r.transValue && l.feedBorderColor == r.feedBorderColor;
    }
    inline bool operator!=(const InteractionInfo&l, const InteractionInfo&r)
    {
        return !(l == r);
    }

    struct GiftOverRankItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GiftOverRankItem";
        }
        static string MD5()
        {
            return "a9273a406ec78942a070192f5f51799d";
        }
        GiftOverRankItem()
        :hostTips(""),pid(""),overTips(""),keyType(0),tipsColor(0)
        {
        }
        void resetDefautlt()
        {
            hostTips = "";
            pid = "";
            overTips = "";
            keyType = 0;
            tipsColor = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(hostTips, 0);
            _os.write(pid, 1);
            _os.write(overTips, 2);
            _os.write(keyType, 3);
            _os.write(tipsColor, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(hostTips, 0, true);
            _is.read(pid, 1, true);
            _is.read(overTips, 2, true);
            _is.read(keyType, 3, true);
            _is.read(tipsColor, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(hostTips,"hostTips");
            _ds.display(pid,"pid");
            _ds.display(overTips,"overTips");
            _ds.display(keyType,"keyType");
            _ds.display(tipsColor,"tipsColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(hostTips, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(overTips, true);
            _ds.displaySimple(keyType, true);
            _ds.displaySimple(tipsColor, false);
            return _os;
        }
    public:
        std::string hostTips;
        std::string pid;
        std::string overTips;
        taf::Int32 keyType;
        taf::Int32 tipsColor;
    };
    inline bool operator==(const GiftOverRankItem&l, const GiftOverRankItem&r)
    {
        return l.hostTips == r.hostTips && l.pid == r.pid && l.overTips == r.overTips && l.keyType == r.keyType && l.tipsColor == r.tipsColor;
    }
    inline bool operator!=(const GiftOverRankItem&l, const GiftOverRankItem&r)
    {
        return !(l == r);
    }

    struct ApolloVoiceData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ApolloVoiceData";
        }
        static string MD5()
        {
            return "0e0d21decfd3baedbf16a88143a2d9f9";
        }
        ApolloVoiceData()
        :voiceId(""),duration(0),permanent(true),storageFlag(0)
        {
        }
        void resetDefautlt()
        {
            voiceId = "";
            duration = 0;
            permanent = true;
            storageFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(voiceId, 0);
            _os.write(duration, 1);
            _os.write(permanent, 2);
            _os.write(storageFlag, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(voiceId, 0, true);
            _is.read(duration, 1, false);
            _is.read(permanent, 2, false);
            _is.read(storageFlag, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(voiceId,"voiceId");
            _ds.display(duration,"duration");
            _ds.display(permanent,"permanent");
            _ds.display(storageFlag,"storageFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(voiceId, true);
            _ds.displaySimple(duration, true);
            _ds.displaySimple(permanent, true);
            _ds.displaySimple(storageFlag, false);
            return _os;
        }
    public:
        std::string voiceId;
        taf::Int32 duration;
        taf::Bool permanent;
        taf::Char storageFlag;
    };
    inline bool operator==(const ApolloVoiceData&l, const ApolloVoiceData&r)
    {
        return l.voiceId == r.voiceId && l.duration == r.duration && l.permanent == r.permanent && l.storageFlag == r.storageFlag;
    }
    inline bool operator!=(const ApolloVoiceData&l, const ApolloVoiceData&r)
    {
        return !(l == r);
    }

    struct CommentParentInfoExtra : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommentParentInfoExtra";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        CommentParentInfoExtra()
        :commentId(""),nickname("")
        {
        }
        void resetDefautlt()
        {
            commentId = "";
            nickname = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commentId, 0);
            _os.write(nickname, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commentId, 0, false);
            _is.read(nickname, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commentId,"commentId");
            _ds.display(nickname,"nickname");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commentId, true);
            _ds.displaySimple(nickname, false);
            return _os;
        }
    public:
        std::string commentId;
        std::string nickname;
    };
    inline bool operator==(const CommentParentInfoExtra&l, const CommentParentInfoExtra&r)
    {
        return l.commentId == r.commentId && l.nickname == r.nickname;
    }
    inline bool operator!=(const CommentParentInfoExtra&l, const CommentParentInfoExtra&r)
    {
        return !(l == r);
    }

    struct CommentItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommentItem";
        }
        static string MD5()
        {
            return "50bb7ed5227e3f8e2c33251937565f3e";
        }
        CommentItem()
        :commentId(""),content(""),time(0),parentId(""),rootId(""),msgId(""),type(0),upCount(0),richType(0),replyCount(0),oriReplyCount(0),commentFlag(0),oriParentId(""),oriRootId(""),showType(0),upTime(0),topIndex(0),status(0)
        {
        }
        void resetDefautlt()
        {
            commentId = "";
            content = "";
            time = 0;
            parentId = "";
            rootId = "";
            msgId = "";
            type = 0;
            upCount = 0;
            richType = 0;
            replyCount = 0;
            oriReplyCount = 0;
            commentFlag = 0;
            oriParentId = "";
            oriRootId = "";
            showType = 0;
            upTime = 0;
            topIndex = 0;
            status = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commentId, 0);
            _os.write(content, 1);
            _os.write(time, 2);
            _os.write(userInfo, 3);
            _os.write(parentId, 4);
            _os.write(rootId, 5);
            _os.write(msgId, 6);
            _os.write(type, 7);
            _os.write(upCount, 8);
            _os.write(richType, 9);
            _os.write(imageList, 10);
            _os.write(voteInfo, 11);
            _os.write(lbsInfo, 12);
            _os.write(lotteryInfo, 13);
            _os.write(h5RichInfo, 14);
            _os.write(replyCount, 15);
            _os.write(oriReplyCount, 16);
            _os.write(commentFlag, 17);
            _os.write(oriParentId, 18);
            _os.write(oriRootId, 19);
            _os.write(showType, 20);
            _os.write(interInfo, 21);
            _os.write(upTime, 22);
            _os.write(giftOverRankItem, 23);
            _os.write(topIndex, 24);
            _os.write(voiceData, 25);
            _os.write(status, 26);
            _os.write(extraParentInfo, 27);
            _os.write(richAction, 28);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commentId, 0, true);
            _is.read(content, 1, true);
            _is.read(time, 2, true);
            _is.read(userInfo, 3, true);
            _is.read(parentId, 4, false);
            _is.read(rootId, 5, false);
            _is.read(msgId, 6, false);
            _is.read(type, 7, false);
            _is.read(upCount, 8, false);
            _is.read(richType, 9, false);
            _is.read(imageList, 10, false);
            _is.read(voteInfo, 11, false);
            _is.read(lbsInfo, 12, false);
            _is.read(lotteryInfo, 13, false);
            _is.read(h5RichInfo, 14, false);
            _is.read(replyCount, 15, false);
            _is.read(oriReplyCount, 16, false);
            _is.read(commentFlag, 17, false);
            _is.read(oriParentId, 18, false);
            _is.read(oriRootId, 19, false);
            _is.read(showType, 20, false);
            _is.read(interInfo, 21, false);
            _is.read(upTime, 22, false);
            _is.read(giftOverRankItem, 23, false);
            _is.read(topIndex, 24, false);
            _is.read(voiceData, 25, false);
            _is.read(status, 26, false);
            _is.read(extraParentInfo, 27, false);
            _is.read(richAction, 28, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commentId,"commentId");
            _ds.display(content,"content");
            _ds.display(time,"time");
            _ds.display(userInfo,"userInfo");
            _ds.display(parentId,"parentId");
            _ds.display(rootId,"rootId");
            _ds.display(msgId,"msgId");
            _ds.display(type,"type");
            _ds.display(upCount,"upCount");
            _ds.display(richType,"richType");
            _ds.display(imageList,"imageList");
            _ds.display(voteInfo,"voteInfo");
            _ds.display(lbsInfo,"lbsInfo");
            _ds.display(lotteryInfo,"lotteryInfo");
            _ds.display(h5RichInfo,"h5RichInfo");
            _ds.display(replyCount,"replyCount");
            _ds.display(oriReplyCount,"oriReplyCount");
            _ds.display(commentFlag,"commentFlag");
            _ds.display(oriParentId,"oriParentId");
            _ds.display(oriRootId,"oriRootId");
            _ds.display(showType,"showType");
            _ds.display(interInfo,"interInfo");
            _ds.display(upTime,"upTime");
            _ds.display(giftOverRankItem,"giftOverRankItem");
            _ds.display(topIndex,"topIndex");
            _ds.display(voiceData,"voiceData");
            _ds.display(status,"status");
            _ds.display(extraParentInfo,"extraParentInfo");
            _ds.display(richAction,"richAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commentId, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(parentId, true);
            _ds.displaySimple(rootId, true);
            _ds.displaySimple(msgId, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(upCount, true);
            _ds.displaySimple(richType, true);
            _ds.displaySimple(imageList, true);
            _ds.displaySimple(voteInfo, true);
            _ds.displaySimple(lbsInfo, true);
            _ds.displaySimple(lotteryInfo, true);
            _ds.displaySimple(h5RichInfo, true);
            _ds.displaySimple(replyCount, true);
            _ds.displaySimple(oriReplyCount, true);
            _ds.displaySimple(commentFlag, true);
            _ds.displaySimple(oriParentId, true);
            _ds.displaySimple(oriRootId, true);
            _ds.displaySimple(showType, true);
            _ds.displaySimple(interInfo, true);
            _ds.displaySimple(upTime, true);
            _ds.displaySimple(giftOverRankItem, true);
            _ds.displaySimple(topIndex, true);
            _ds.displaySimple(voiceData, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(extraParentInfo, true);
            _ds.displaySimple(richAction, false);
            return _os;
        }
    public:
        std::string commentId;
        std::string content;
        taf::Int64 time;
        jce::ActorInfo userInfo;
        std::string parentId;
        std::string rootId;
        std::string msgId;
        taf::Char type;
        taf::Int32 upCount;
        taf::Int32 richType;
        vector<jce::VideoImage> imageList;
        jce::LiveVoteInfo voteInfo;
        jce::LBSInfo lbsInfo;
        jce::LiveLotteryInfo lotteryInfo;
        jce::LiveH5RichInfo h5RichInfo;
        taf::Int32 replyCount;
        taf::Int32 oriReplyCount;
        taf::Int32 commentFlag;
        std::string oriParentId;
        std::string oriRootId;
        taf::Int32 showType;
        jce::InteractionInfo interInfo;
        taf::Int64 upTime;
        jce::GiftOverRankItem giftOverRankItem;
        taf::Int32 topIndex;
        jce::ApolloVoiceData voiceData;
        taf::Int32 status;
        jce::CommentParentInfoExtra extraParentInfo;
        jce::Action richAction;
    };
    inline bool operator==(const CommentItem&l, const CommentItem&r)
    {
        return l.commentId == r.commentId && l.content == r.content && l.time == r.time && l.userInfo == r.userInfo && l.parentId == r.parentId && l.rootId == r.rootId && l.msgId == r.msgId && l.type == r.type && l.upCount == r.upCount && l.richType == r.richType && l.imageList == r.imageList && l.voteInfo == r.voteInfo && l.lbsInfo == r.lbsInfo && l.lotteryInfo == r.lotteryInfo && l.h5RichInfo == r.h5RichInfo && l.replyCount == r.replyCount && l.oriReplyCount == r.oriReplyCount && l.commentFlag == r.commentFlag && l.oriParentId == r.oriParentId && l.oriRootId == r.oriRootId && l.showType == r.showType && l.interInfo == r.interInfo && l.upTime == r.upTime && l.giftOverRankItem == r.giftOverRankItem && l.topIndex == r.topIndex && l.voiceData == r.voiceData && l.status == r.status && l.extraParentInfo == r.extraParentInfo && l.richAction == r.richAction;
    }
    inline bool operator!=(const CommentItem&l, const CommentItem&r)
    {
        return !(l == r);
    }

    struct SortAttentItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SortAttentItem";
        }
        static string MD5()
        {
            return "87c550305f27926839d17be7d4c15ebf";
        }
        SortAttentItem()
        :iAttentType(0),sRid("")
        {
        }
        void resetDefautlt()
        {
            iAttentType = 0;
            sRid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iAttentType, 0);
            _os.write(sRid, 1);
            _os.write(stItem, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iAttentType, 0, true);
            _is.read(sRid, 1, true);
            _is.read(stItem, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iAttentType,"iAttentType");
            _ds.display(sRid,"sRid");
            _ds.display(stItem,"stItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iAttentType, true);
            _ds.displaySimple(sRid, true);
            _ds.displaySimple(stItem, false);
            return _os;
        }
    public:
        taf::Int32 iAttentType;
        std::string sRid;
        jce::VideoAttentItem stItem;
    };
    inline bool operator==(const SortAttentItem&l, const SortAttentItem&r)
    {
        return l.iAttentType == r.iAttentType && l.sRid == r.sRid && l.stItem == r.stItem;
    }
    inline bool operator!=(const SortAttentItem&l, const SortAttentItem&r)
    {
        return !(l == r);
    }

    struct SortAttentItemList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SortAttentItemList";
        }
        static string MD5()
        {
            return "376896819d88a076563288b213fbf5be";
        }
        SortAttentItemList()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vecSortedAttentList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vecSortedAttentList, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vecSortedAttentList,"vecSortedAttentList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vecSortedAttentList, false);
            return _os;
        }
    public:
        vector<jce::SortAttentItem> vecSortedAttentList;
    };
    inline bool operator==(const SortAttentItemList&l, const SortAttentItemList&r)
    {
        return l.vecSortedAttentList == r.vecSortedAttentList;
    }
    inline bool operator!=(const SortAttentItemList&l, const SortAttentItemList&r)
    {
        return !(l == r);
    }

    struct WatchRecord : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecord";
        }
        static string MD5()
        {
            return "3570c87beffed39ee88f8f22f0228c2d";
        }
        WatchRecord()
        :recordId(""),lid(""),cid(""),vid(""),strTime(0),uiDate(0),iHD(0),playFrom(0),seriesText(""),pid(""),reportParam(""),isAutoPlay(true),recordType(0),fromCtx(""),totalTime(0),totalWatchTime(0),showLocation(0)
        {
        }
        void resetDefautlt()
        {
            recordId = "";
            lid = "";
            cid = "";
            vid = "";
            strTime = 0;
            uiDate = 0;
            iHD = 0;
            playFrom = 0;
            seriesText = "";
            pid = "";
            reportParam = "";
            isAutoPlay = true;
            recordType = 0;
            fromCtx = "";
            totalTime = 0;
            totalWatchTime = 0;
            showLocation = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(recordId, 0);
            _os.write(lid, 1);
            _os.write(cid, 2);
            _os.write(vid, 3);
            _os.write(poster, 4);
            _os.write(strTime, 5);
            _os.write(uiDate, 6);
            _os.write(iHD, 7);
            _os.write(playFrom, 8);
            _os.write(seriesText, 9);
            _os.write(pid, 10);
            _os.write(reportParam, 11);
            _os.write(isAutoPlay, 12);
            _os.write(recordType, 13);
            _os.write(fromCtx, 14);
            _os.write(totalTime, 15);
            _os.write(totalWatchTime, 16);
            _os.write(showLocation, 17);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(recordId, 0, true);
            _is.read(lid, 1, false);
            _is.read(cid, 2, false);
            _is.read(vid, 3, false);
            _is.read(poster, 4, false);
            _is.read(strTime, 5, false);
            _is.read(uiDate, 6, false);
            _is.read(iHD, 7, false);
            _is.read(playFrom, 8, false);
            _is.read(seriesText, 9, false);
            _is.read(pid, 10, false);
            _is.read(reportParam, 11, false);
            _is.read(isAutoPlay, 12, false);
            _is.read(recordType, 13, false);
            _is.read(fromCtx, 14, false);
            _is.read(totalTime, 15, false);
            _is.read(totalWatchTime, 16, false);
            _is.read(showLocation, 17, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(recordId,"recordId");
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(poster,"poster");
            _ds.display(strTime,"strTime");
            _ds.display(uiDate,"uiDate");
            _ds.display(iHD,"iHD");
            _ds.display(playFrom,"playFrom");
            _ds.display(seriesText,"seriesText");
            _ds.display(pid,"pid");
            _ds.display(reportParam,"reportParam");
            _ds.display(isAutoPlay,"isAutoPlay");
            _ds.display(recordType,"recordType");
            _ds.display(fromCtx,"fromCtx");
            _ds.display(totalTime,"totalTime");
            _ds.display(totalWatchTime,"totalWatchTime");
            _ds.display(showLocation,"showLocation");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(recordId, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(strTime, true);
            _ds.displaySimple(uiDate, true);
            _ds.displaySimple(iHD, true);
            _ds.displaySimple(playFrom, true);
            _ds.displaySimple(seriesText, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(reportParam, true);
            _ds.displaySimple(isAutoPlay, true);
            _ds.displaySimple(recordType, true);
            _ds.displaySimple(fromCtx, true);
            _ds.displaySimple(totalTime, true);
            _ds.displaySimple(totalWatchTime, true);
            _ds.displaySimple(showLocation, false);
            return _os;
        }
    public:
        std::string recordId;
        std::string lid;
        std::string cid;
        std::string vid;
        jce::Poster poster;
        taf::Int32 strTime;
        taf::Int32 uiDate;
        taf::Int32 iHD;
        taf::Int32 playFrom;
        std::string seriesText;
        std::string pid;
        std::string reportParam;
        taf::Bool isAutoPlay;
        taf::Int32 recordType;
        std::string fromCtx;
        taf::Int32 totalTime;
        taf::Int32 totalWatchTime;
        taf::Int32 showLocation;
    };
    inline bool operator==(const WatchRecord&l, const WatchRecord&r)
    {
        return l.recordId == r.recordId && l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.poster == r.poster && l.strTime == r.strTime && l.uiDate == r.uiDate && l.iHD == r.iHD && l.playFrom == r.playFrom && l.seriesText == r.seriesText && l.pid == r.pid && l.reportParam == r.reportParam && l.isAutoPlay == r.isAutoPlay && l.recordType == r.recordType && l.fromCtx == r.fromCtx && l.totalTime == r.totalTime && l.totalWatchTime == r.totalWatchTime && l.showLocation == r.showLocation;
    }
    inline bool operator!=(const WatchRecord&l, const WatchRecord&r)
    {
        return !(l == r);
    }

    struct CacheItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CacheItem";
        }
        static string MD5()
        {
            return "1c83ff945875ac6217e906faaf0376d5";
        }
        CacheItem()
        :lid(""),cid(""),vid(""),downloadRight(0),fileSize(0),videoName(""),isCharge(0),expansion(""),index(0),drmFlag(0),streamRatio(0),preStatus(0),preTime(""),videoShowFlags(0),videoFlag(0),offlineLimitTime(0),preKey(""),detailCode(0),detailTips(""),skipStart(0),skipEnd(0),confirmDownloadToast("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
            downloadRight = 0;
            fileSize = 0;
            videoName = "";
            isCharge = 0;
            expansion = "";
            index = 0;
            drmFlag = 0;
            streamRatio = 0;
            preStatus = 0;
            preTime = "";
            videoShowFlags = 0;
            videoFlag = 0;
            offlineLimitTime = 0;
            preKey = "";
            detailCode = 0;
            detailTips = "";
            skipStart = 0;
            skipEnd = 0;
            confirmDownloadToast = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
            _os.write(poster, 3);
            _os.write(downloadRight, 4);
            _os.write(fileSize, 5);
            _os.write(videoName, 6);
            _os.write(isCharge, 7);
            _os.write(expansion, 8);
            _os.write(index, 9);
            _os.write(drmFlag, 10);
            _os.write(streamRatio, 11);
            _os.write(preStatus, 12);
            _os.write(preTime, 13);
            _os.write(videoShowFlags, 14);
            _os.write(videoFlag, 15);
            _os.write(offlineLimitTime, 16);
            _os.write(preKey, 17);
            _os.write(detailCode, 18);
            _os.write(detailTips, 19);
            _os.write(skipStart, 20);
            _os.write(skipEnd, 21);
            _os.write(confirmDownloadToast, 22);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, false);
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
            _is.read(poster, 3, false);
            _is.read(downloadRight, 4, false);
            _is.read(fileSize, 5, false);
            _is.read(videoName, 6, false);
            _is.read(isCharge, 7, false);
            _is.read(expansion, 8, false);
            _is.read(index, 9, false);
            _is.read(drmFlag, 10, false);
            _is.read(streamRatio, 11, false);
            _is.read(preStatus, 12, false);
            _is.read(preTime, 13, false);
            _is.read(videoShowFlags, 14, false);
            _is.read(videoFlag, 15, false);
            _is.read(offlineLimitTime, 16, false);
            _is.read(preKey, 17, false);
            _is.read(detailCode, 18, false);
            _is.read(detailTips, 19, false);
            _is.read(skipStart, 20, false);
            _is.read(skipEnd, 21, false);
            _is.read(confirmDownloadToast, 22, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(poster,"poster");
            _ds.display(downloadRight,"downloadRight");
            _ds.display(fileSize,"fileSize");
            _ds.display(videoName,"videoName");
            _ds.display(isCharge,"isCharge");
            _ds.display(expansion,"expansion");
            _ds.display(index,"index");
            _ds.display(drmFlag,"drmFlag");
            _ds.display(streamRatio,"streamRatio");
            _ds.display(preStatus,"preStatus");
            _ds.display(preTime,"preTime");
            _ds.display(videoShowFlags,"videoShowFlags");
            _ds.display(videoFlag,"videoFlag");
            _ds.display(offlineLimitTime,"offlineLimitTime");
            _ds.display(preKey,"preKey");
            _ds.display(detailCode,"detailCode");
            _ds.display(detailTips,"detailTips");
            _ds.display(skipStart,"skipStart");
            _ds.display(skipEnd,"skipEnd");
            _ds.display(confirmDownloadToast,"confirmDownloadToast");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(downloadRight, true);
            _ds.displaySimple(fileSize, true);
            _ds.displaySimple(videoName, true);
            _ds.displaySimple(isCharge, true);
            _ds.displaySimple(expansion, true);
            _ds.displaySimple(index, true);
            _ds.displaySimple(drmFlag, true);
            _ds.displaySimple(streamRatio, true);
            _ds.displaySimple(preStatus, true);
            _ds.displaySimple(preTime, true);
            _ds.displaySimple(videoShowFlags, true);
            _ds.displaySimple(videoFlag, true);
            _ds.displaySimple(offlineLimitTime, true);
            _ds.displaySimple(preKey, true);
            _ds.displaySimple(detailCode, true);
            _ds.displaySimple(detailTips, true);
            _ds.displaySimple(skipStart, true);
            _ds.displaySimple(skipEnd, true);
            _ds.displaySimple(confirmDownloadToast, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
        jce::Poster poster;
        taf::Int32 downloadRight;
        taf::Int64 fileSize;
        std::string videoName;
        taf::Int32 isCharge;
        std::string expansion;
        taf::Int32 index;
        taf::Int32 drmFlag;
        taf::Float streamRatio;
        taf::Int32 preStatus;
        std::string preTime;
        taf::Int32 videoShowFlags;
        taf::Char videoFlag;
        taf::Int64 offlineLimitTime;
        std::string preKey;
        taf::Int32 detailCode;
        std::string detailTips;
        taf::Int64 skipStart;
        taf::Int64 skipEnd;
        std::string confirmDownloadToast;
    };
    inline bool operator==(const CacheItem&l, const CacheItem&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.poster == r.poster && l.downloadRight == r.downloadRight && l.fileSize == r.fileSize && l.videoName == r.videoName && l.isCharge == r.isCharge && l.expansion == r.expansion && l.index == r.index && l.drmFlag == r.drmFlag && l.streamRatio == r.streamRatio && l.preStatus == r.preStatus && l.preTime == r.preTime && l.videoShowFlags == r.videoShowFlags && l.videoFlag == r.videoFlag && l.offlineLimitTime == r.offlineLimitTime && l.preKey == r.preKey && l.detailCode == r.detailCode && l.detailTips == r.detailTips && l.skipStart == r.skipStart && l.skipEnd == r.skipEnd && l.confirmDownloadToast == r.confirmDownloadToast;
    }
    inline bool operator!=(const CacheItem&l, const CacheItem&r)
    {
        return !(l == r);
    }

    struct PreCacheRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PreCacheRequest";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        PreCacheRequest()
        :vid(""),cid(""),preTime(""),preKey("")
        {
        }
        void resetDefautlt()
        {
            vid = "";
            cid = "";
            preTime = "";
            preKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(cid, 1);
            _os.write(preTime, 2);
            _os.write(preKey, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, true);
            _is.read(cid, 1, false);
            _is.read(preTime, 2, false);
            _is.read(preKey, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(cid,"cid");
            _ds.display(preTime,"preTime");
            _ds.display(preKey,"preKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(preTime, true);
            _ds.displaySimple(preKey, false);
            return _os;
        }
    public:
        std::string vid;
        std::string cid;
        std::string preTime;
        std::string preKey;
    };
    inline bool operator==(const PreCacheRequest&l, const PreCacheRequest&r)
    {
        return l.vid == r.vid && l.cid == r.cid && l.preTime == r.preTime && l.preKey == r.preKey;
    }
    inline bool operator!=(const PreCacheRequest&l, const PreCacheRequest&r)
    {
        return !(l == r);
    }

    struct RankItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RankItem";
        }
        static string MD5()
        {
            return "25ebd0ab391e6e6ad35112d7f5b05b45";
        }
        RankItem()
        :title(""),position(""),changeOrder(0)
        {
        }
        void resetDefautlt()
        {
            title = "";
            position = "";
            changeOrder = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(position, 1);
            _os.write(markLabelList, 2);
            _os.write(changeOrder, 3);
            _os.write(action, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(position, 1, false);
            _is.read(markLabelList, 2, false);
            _is.read(changeOrder, 3, false);
            _is.read(action, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(position,"position");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(changeOrder,"changeOrder");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(position, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(changeOrder, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string title;
        std::string position;
        vector<jce::MarkLabel> markLabelList;
        taf::Int32 changeOrder;
        jce::Action action;
    };
    inline bool operator==(const RankItem&l, const RankItem&r)
    {
        return l.title == r.title && l.position == r.position && l.markLabelList == r.markLabelList && l.changeOrder == r.changeOrder && l.action == r.action;
    }
    inline bool operator!=(const RankItem&l, const RankItem&r)
    {
        return !(l == r);
    }

    struct MyCommentItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MyCommentItem";
        }
        static string MD5()
        {
            return "e0c96e1cea4663b4ef382600c09e8c84";
        }
        MyCommentItem()
        :commentId(""),content(""),time(0),voideImageUrl(""),commentDataKey(""),videoTitle(""),pageContext(""),upNumber(0),replyNumber(0)
        {
        }
        void resetDefautlt()
        {
            commentId = "";
            content = "";
            time = 0;
            voideImageUrl = "";
            commentDataKey = "";
            videoTitle = "";
            pageContext = "";
            upNumber = 0;
            replyNumber = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commentId, 0);
            _os.write(content, 1);
            _os.write(time, 2);
            _os.write(voideImageUrl, 3);
            _os.write(commentDataKey, 4);
            _os.write(videoTitle, 5);
            _os.write(pageContext, 6);
            _os.write(upNumber, 7);
            _os.write(replyNumber, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commentId, 0, true);
            _is.read(content, 1, true);
            _is.read(time, 2, true);
            _is.read(voideImageUrl, 3, true);
            _is.read(commentDataKey, 4, true);
            _is.read(videoTitle, 5, true);
            _is.read(pageContext, 6, true);
            _is.read(upNumber, 7, false);
            _is.read(replyNumber, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commentId,"commentId");
            _ds.display(content,"content");
            _ds.display(time,"time");
            _ds.display(voideImageUrl,"voideImageUrl");
            _ds.display(commentDataKey,"commentDataKey");
            _ds.display(videoTitle,"videoTitle");
            _ds.display(pageContext,"pageContext");
            _ds.display(upNumber,"upNumber");
            _ds.display(replyNumber,"replyNumber");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commentId, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(voideImageUrl, true);
            _ds.displaySimple(commentDataKey, true);
            _ds.displaySimple(videoTitle, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(upNumber, true);
            _ds.displaySimple(replyNumber, false);
            return _os;
        }
    public:
        std::string commentId;
        std::string content;
        taf::Int64 time;
        std::string voideImageUrl;
        std::string commentDataKey;
        std::string videoTitle;
        std::string pageContext;
        taf::Int32 upNumber;
        taf::Int32 replyNumber;
    };
    inline bool operator==(const MyCommentItem&l, const MyCommentItem&r)
    {
        return l.commentId == r.commentId && l.content == r.content && l.time == r.time && l.voideImageUrl == r.voideImageUrl && l.commentDataKey == r.commentDataKey && l.videoTitle == r.videoTitle && l.pageContext == r.pageContext && l.upNumber == r.upNumber && l.replyNumber == r.replyNumber;
    }
    inline bool operator!=(const MyCommentItem&l, const MyCommentItem&r)
    {
        return !(l == r);
    }

    struct ShareToken : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ShareToken";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        ShareToken()
        :sinaAccessToken("")
        {
        }
        void resetDefautlt()
        {
            sinaAccessToken = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sinaAccessToken, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sinaAccessToken, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sinaAccessToken,"sinaAccessToken");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sinaAccessToken, false);
            return _os;
        }
    public:
        std::string sinaAccessToken;
    };
    inline bool operator==(const ShareToken&l, const ShareToken&r)
    {
        return l.sinaAccessToken == r.sinaAccessToken;
    }
    inline bool operator!=(const ShareToken&l, const ShareToken&r)
    {
        return !(l == r);
    }

    struct HyperlinksKeyWord : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.HyperlinksKeyWord";
        }
        static string MD5()
        {
            return "99bbc0736cebebc4d7504126259e65fe";
        }
        HyperlinksKeyWord()
        :word("")
        {
        }
        void resetDefautlt()
        {
            word = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(word, 0);
            _os.write(action, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(word, 0, true);
            _is.read(action, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(word,"word");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(word, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string word;
        jce::Action action;
    };
    inline bool operator==(const HyperlinksKeyWord&l, const HyperlinksKeyWord&r)
    {
        return l.word == r.word && l.action == r.action;
    }
    inline bool operator!=(const HyperlinksKeyWord&l, const HyperlinksKeyWord&r)
    {
        return !(l == r);
    }

    struct PersonalizeVideoItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PersonalizeVideoItem";
        }
        static string MD5()
        {
            return "4825050e91967ff607bbe58b16e185e6";
        }
        PersonalizeVideoItem()
        :imageUrl(""),id(""),title(""),subTitle(""),reportKey(""),validTime(0),playerImgUrl(""),watched(0),reportParams("")
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
            id = "";
            title = "";
            subTitle = "";
            reportKey = "";
            validTime = 0;
            playerImgUrl = "";
            watched = 0;
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(id, 1);
            _os.write(title, 2);
            _os.write(subTitle, 3);
            _os.write(keyWordList, 4);
            _os.write(action, 5);
            _os.write(reportKey, 6);
            _os.write(attentItem, 7);
            _os.write(validTime, 8);
            _os.write(playerImgUrl, 9);
            _os.write(watched, 10);
            _os.write(markLabelList, 11);
            _os.write(shareItem, 12);
            _os.write(reportParams, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, true);
            _is.read(id, 1, true);
            _is.read(title, 2, true);
            _is.read(subTitle, 3, true);
            _is.read(keyWordList, 4, false);
            _is.read(action, 5, false);
            _is.read(reportKey, 6, false);
            _is.read(attentItem, 7, false);
            _is.read(validTime, 8, false);
            _is.read(playerImgUrl, 9, false);
            _is.read(watched, 10, false);
            _is.read(markLabelList, 11, false);
            _is.read(shareItem, 12, false);
            _is.read(reportParams, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(id,"id");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(keyWordList,"keyWordList");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(attentItem,"attentItem");
            _ds.display(validTime,"validTime");
            _ds.display(playerImgUrl,"playerImgUrl");
            _ds.display(watched,"watched");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(shareItem,"shareItem");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(id, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(keyWordList, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(validTime, true);
            _ds.displaySimple(playerImgUrl, true);
            _ds.displaySimple(watched, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string imageUrl;
        std::string id;
        std::string title;
        std::string subTitle;
        vector<jce::HyperlinksKeyWord> keyWordList;
        jce::Action action;
        std::string reportKey;
        jce::VideoAttentItem attentItem;
        taf::Int64 validTime;
        std::string playerImgUrl;
        taf::Char watched;
        vector<jce::MarkLabel> markLabelList;
        jce::ShareItem shareItem;
        std::string reportParams;
    };
    inline bool operator==(const PersonalizeVideoItem&l, const PersonalizeVideoItem&r)
    {
        return l.imageUrl == r.imageUrl && l.id == r.id && l.title == r.title && l.subTitle == r.subTitle && l.keyWordList == r.keyWordList && l.action == r.action && l.reportKey == r.reportKey && l.attentItem == r.attentItem && l.validTime == r.validTime && l.playerImgUrl == r.playerImgUrl && l.watched == r.watched && l.markLabelList == r.markLabelList && l.shareItem == r.shareItem && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const PersonalizeVideoItem&l, const PersonalizeVideoItem&r)
    {
        return !(l == r);
    }

    struct PursuitItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PursuitItem";
        }
        static string MD5()
        {
            return "f0108da3fdb9b445fa237c47fad381c3";
        }
        PursuitItem()
        :headImageUrl(""),location(0),tips("")
        {
        }
        void resetDefautlt()
        {
            headImageUrl = "";
            location = 0;
            tips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(headImageUrl, 0);
            _os.write(location, 1);
            _os.write(tips, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(headImageUrl, 0, true);
            _is.read(location, 1, true);
            _is.read(tips, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(headImageUrl,"headImageUrl");
            _ds.display(location,"location");
            _ds.display(tips,"tips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(headImageUrl, true);
            _ds.displaySimple(location, true);
            _ds.displaySimple(tips, false);
            return _os;
        }
    public:
        std::string headImageUrl;
        taf::Float location;
        std::string tips;
    };
    inline bool operator==(const PursuitItem&l, const PursuitItem&r)
    {
        return l.headImageUrl == r.headImageUrl && l.location == r.location && l.tips == r.tips;
    }
    inline bool operator!=(const PursuitItem&l, const PursuitItem&r)
    {
        return !(l == r);
    }

    struct DiscoveryTabItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DiscoveryTabItem";
        }
        static string MD5()
        {
            return "9ebd2dfb95a267513b2db0c3dba9fbe5";
        }
        DiscoveryTabItem()
        :itemType(0),bgImageUrl(""),title(""),titleColor(""),titleBgColor(""),subTitleColor(""),subTitle(""),userImageUrl("")
        {
        }
        void resetDefautlt()
        {
            itemType = 0;
            bgImageUrl = "";
            title = "";
            titleColor = "";
            titleBgColor = "";
            subTitleColor = "";
            subTitle = "";
            userImageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemType, 0);
            _os.write(bgImageUrl, 1);
            _os.write(title, 2);
            _os.write(titleColor, 3);
            _os.write(titleBgColor, 4);
            _os.write(subTitleColor, 5);
            _os.write(subTitle, 6);
            _os.write(userImageUrl, 7);
            _os.write(action, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(itemType, 0, true);
            _is.read(bgImageUrl, 1, true);
            _is.read(title, 2, true);
            _is.read(titleColor, 3, true);
            _is.read(titleBgColor, 4, true);
            _is.read(subTitleColor, 5, true);
            _is.read(subTitle, 6, true);
            _is.read(userImageUrl, 7, false);
            _is.read(action, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemType,"itemType");
            _ds.display(bgImageUrl,"bgImageUrl");
            _ds.display(title,"title");
            _ds.display(titleColor,"titleColor");
            _ds.display(titleBgColor,"titleBgColor");
            _ds.display(subTitleColor,"subTitleColor");
            _ds.display(subTitle,"subTitle");
            _ds.display(userImageUrl,"userImageUrl");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemType, true);
            _ds.displaySimple(bgImageUrl, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(titleColor, true);
            _ds.displaySimple(titleBgColor, true);
            _ds.displaySimple(subTitleColor, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(userImageUrl, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        taf::Int32 itemType;
        std::string bgImageUrl;
        std::string title;
        std::string titleColor;
        std::string titleBgColor;
        std::string subTitleColor;
        std::string subTitle;
        std::string userImageUrl;
        jce::Action action;
    };
    inline bool operator==(const DiscoveryTabItem&l, const DiscoveryTabItem&r)
    {
        return l.itemType == r.itemType && l.bgImageUrl == r.bgImageUrl && l.title == r.title && l.titleColor == r.titleColor && l.titleBgColor == r.titleBgColor && l.subTitleColor == r.subTitleColor && l.subTitle == r.subTitle && l.userImageUrl == r.userImageUrl && l.action == r.action;
    }
    inline bool operator!=(const DiscoveryTabItem&l, const DiscoveryTabItem&r)
    {
        return !(l == r);
    }

    struct UIStyle : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UIStyle";
        }
        static string MD5()
        {
            return "c919105cd2dd4730dffeb2598c9683d4";
        }
        UIStyle()
        :themeColor(""),subThemeColor(""),floatThemeColor(""),fontColor(""),fontSize(""),contentGravity(0),backgroundRes(""),x(0),y(0),minX(0),minY(0),maxX(0),maxY(0),xyScale(0)
        {
        }
        void resetDefautlt()
        {
            themeColor = "";
            subThemeColor = "";
            floatThemeColor = "";
            fontColor = "";
            fontSize = "";
            contentGravity = 0;
            backgroundRes = "";
            x = 0;
            y = 0;
            minX = 0;
            minY = 0;
            maxX = 0;
            maxY = 0;
            xyScale = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(themeColor, 0);
            _os.write(subThemeColor, 1);
            _os.write(floatThemeColor, 2);
            _os.write(fontColor, 3);
            _os.write(fontSize, 4);
            _os.write(contentGravity, 5);
            _os.write(backgroundRes, 6);
            _os.write(x, 7);
            _os.write(y, 8);
            _os.write(minX, 9);
            _os.write(minY, 10);
            _os.write(maxX, 11);
            _os.write(maxY, 12);
            _os.write(xyScale, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(themeColor, 0, false);
            _is.read(subThemeColor, 1, false);
            _is.read(floatThemeColor, 2, false);
            _is.read(fontColor, 3, false);
            _is.read(fontSize, 4, false);
            _is.read(contentGravity, 5, false);
            _is.read(backgroundRes, 6, false);
            _is.read(x, 7, false);
            _is.read(y, 8, false);
            _is.read(minX, 9, false);
            _is.read(minY, 10, false);
            _is.read(maxX, 11, false);
            _is.read(maxY, 12, false);
            _is.read(xyScale, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(themeColor,"themeColor");
            _ds.display(subThemeColor,"subThemeColor");
            _ds.display(floatThemeColor,"floatThemeColor");
            _ds.display(fontColor,"fontColor");
            _ds.display(fontSize,"fontSize");
            _ds.display(contentGravity,"contentGravity");
            _ds.display(backgroundRes,"backgroundRes");
            _ds.display(x,"x");
            _ds.display(y,"y");
            _ds.display(minX,"minX");
            _ds.display(minY,"minY");
            _ds.display(maxX,"maxX");
            _ds.display(maxY,"maxY");
            _ds.display(xyScale,"xyScale");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(themeColor, true);
            _ds.displaySimple(subThemeColor, true);
            _ds.displaySimple(floatThemeColor, true);
            _ds.displaySimple(fontColor, true);
            _ds.displaySimple(fontSize, true);
            _ds.displaySimple(contentGravity, true);
            _ds.displaySimple(backgroundRes, true);
            _ds.displaySimple(x, true);
            _ds.displaySimple(y, true);
            _ds.displaySimple(minX, true);
            _ds.displaySimple(minY, true);
            _ds.displaySimple(maxX, true);
            _ds.displaySimple(maxY, true);
            _ds.displaySimple(xyScale, false);
            return _os;
        }
    public:
        std::string themeColor;
        std::string subThemeColor;
        std::string floatThemeColor;
        std::string fontColor;
        std::string fontSize;
        taf::Int32 contentGravity;
        std::string backgroundRes;
        taf::Int32 x;
        taf::Int32 y;
        taf::Int32 minX;
        taf::Int32 minY;
        taf::Int32 maxX;
        taf::Int32 maxY;
        taf::Int32 xyScale;
    };
    inline bool operator==(const UIStyle&l, const UIStyle&r)
    {
        return l.themeColor == r.themeColor && l.subThemeColor == r.subThemeColor && l.floatThemeColor == r.floatThemeColor && l.fontColor == r.fontColor && l.fontSize == r.fontSize && l.contentGravity == r.contentGravity && l.backgroundRes == r.backgroundRes && l.x == r.x && l.y == r.y && l.minX == r.minX && l.minY == r.minY && l.maxX == r.maxX && l.maxY == r.maxY && l.xyScale == r.xyScale;
    }
    inline bool operator!=(const UIStyle&l, const UIStyle&r)
    {
        return !(l == r);
    }

    struct GiftAnimation : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GiftAnimation";
        }
        static string MD5()
        {
            return "19cfb41a66359c894f1dcce10dba2a65";
        }
        GiftAnimation()
        :animUrl(""),animDuration(0),animId("")
        {
        }
        void resetDefautlt()
        {
            animUrl = "";
            animDuration = 0;
            animId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(animUrl, 0);
            _os.write(animDuration, 1);
            _os.write(animId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(animUrl, 0, true);
            _is.read(animDuration, 1, true);
            _is.read(animId, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(animUrl,"animUrl");
            _ds.display(animDuration,"animDuration");
            _ds.display(animId,"animId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(animUrl, true);
            _ds.displaySimple(animDuration, true);
            _ds.displaySimple(animId, false);
            return _os;
        }
    public:
        std::string animUrl;
        taf::Int32 animDuration;
        std::string animId;
    };
    inline bool operator==(const GiftAnimation&l, const GiftAnimation&r)
    {
        return l.animUrl == r.animUrl && l.animDuration == r.animDuration && l.animId == r.animId;
    }
    inline bool operator!=(const GiftAnimation&l, const GiftAnimation&r)
    {
        return !(l == r);
    }

    struct LiveGiftItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveGiftItem";
        }
        static string MD5()
        {
            return "2f3dca2da9a1192ea977ebecc3f9328b";
        }
        LiveGiftItem()
        :productId(""),iconUrl(""),payStatus(0),title(""),des(""),price(""),canUsedCount(0),addupStepCount(0),payFlag(0),payDes(""),payPrice(0),activityId(""),strToolUnit("")
        {
        }
        void resetDefautlt()
        {
            productId = "";
            iconUrl = "";
            payStatus = 0;
            title = "";
            des = "";
            price = "";
            canUsedCount = 0;
            addupStepCount = 0;
            payFlag = 0;
            payDes = "";
            payPrice = 0;
            activityId = "";
            strToolUnit = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(productId, 0);
            _os.write(iconUrl, 1);
            _os.write(payStatus, 2);
            _os.write(title, 3);
            _os.write(des, 4);
            _os.write(price, 5);
            _os.write(animation, 6);
            _os.write(canUsedCount, 7);
            _os.write(addupStepCount, 8);
            _os.write(payFlag, 9);
            _os.write(payDes, 10);
            _os.write(payPrice, 11);
            _os.write(activityId, 12);
            _os.write(strToolUnit, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(productId, 0, true);
            _is.read(iconUrl, 1, true);
            _is.read(payStatus, 2, true);
            _is.read(title, 3, true);
            _is.read(des, 4, true);
            _is.read(price, 5, true);
            _is.read(animation, 6, false);
            _is.read(canUsedCount, 7, false);
            _is.read(addupStepCount, 8, false);
            _is.read(payFlag, 9, false);
            _is.read(payDes, 10, false);
            _is.read(payPrice, 11, false);
            _is.read(activityId, 12, false);
            _is.read(strToolUnit, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(productId,"productId");
            _ds.display(iconUrl,"iconUrl");
            _ds.display(payStatus,"payStatus");
            _ds.display(title,"title");
            _ds.display(des,"des");
            _ds.display(price,"price");
            _ds.display(animation,"animation");
            _ds.display(canUsedCount,"canUsedCount");
            _ds.display(addupStepCount,"addupStepCount");
            _ds.display(payFlag,"payFlag");
            _ds.display(payDes,"payDes");
            _ds.display(payPrice,"payPrice");
            _ds.display(activityId,"activityId");
            _ds.display(strToolUnit,"strToolUnit");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(productId, true);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(payStatus, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(des, true);
            _ds.displaySimple(price, true);
            _ds.displaySimple(animation, true);
            _ds.displaySimple(canUsedCount, true);
            _ds.displaySimple(addupStepCount, true);
            _ds.displaySimple(payFlag, true);
            _ds.displaySimple(payDes, true);
            _ds.displaySimple(payPrice, true);
            _ds.displaySimple(activityId, true);
            _ds.displaySimple(strToolUnit, false);
            return _os;
        }
    public:
        std::string productId;
        std::string iconUrl;
        taf::Int32 payStatus;
        std::string title;
        std::string des;
        std::string price;
        jce::GiftAnimation animation;
        taf::Int32 canUsedCount;
        taf::Int32 addupStepCount;
        taf::Int32 payFlag;
        std::string payDes;
        taf::Int32 payPrice;
        std::string activityId;
        std::string strToolUnit;
    };
    inline bool operator==(const LiveGiftItem&l, const LiveGiftItem&r)
    {
        return l.productId == r.productId && l.iconUrl == r.iconUrl && l.payStatus == r.payStatus && l.title == r.title && l.des == r.des && l.price == r.price && l.animation == r.animation && l.canUsedCount == r.canUsedCount && l.addupStepCount == r.addupStepCount && l.payFlag == r.payFlag && l.payDes == r.payDes && l.payPrice == r.payPrice && l.activityId == r.activityId && l.strToolUnit == r.strToolUnit;
    }
    inline bool operator!=(const LiveGiftItem&l, const LiveGiftItem&r)
    {
        return !(l == r);
    }

    struct ActorRankItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ActorRankItem";
        }
        static string MD5()
        {
            return "ca7f5a206e86775314e1d4505d0d6104";
        }
        ActorRankItem()
        :rankIndex(0),giftNumber(0),giftImageUrl(""),actorFlag(0)
        {
        }
        void resetDefautlt()
        {
            rankIndex = 0;
            giftNumber = 0;
            giftImageUrl = "";
            actorFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(rankIndex, 0);
            _os.write(actorinfo, 1);
            _os.write(giftNumber, 2);
            _os.write(giftImageUrl, 3);
            _os.write(actorFlag, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(rankIndex, 0, true);
            _is.read(actorinfo, 1, true);
            _is.read(giftNumber, 2, true);
            _is.read(giftImageUrl, 3, true);
            _is.read(actorFlag, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(rankIndex,"rankIndex");
            _ds.display(actorinfo,"actorinfo");
            _ds.display(giftNumber,"giftNumber");
            _ds.display(giftImageUrl,"giftImageUrl");
            _ds.display(actorFlag,"actorFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(rankIndex, true);
            _ds.displaySimple(actorinfo, true);
            _ds.displaySimple(giftNumber, true);
            _ds.displaySimple(giftImageUrl, true);
            _ds.displaySimple(actorFlag, false);
            return _os;
        }
    public:
        taf::Int32 rankIndex;
        jce::ActorInfo actorinfo;
        taf::Int64 giftNumber;
        std::string giftImageUrl;
        taf::Char actorFlag;
    };
    inline bool operator==(const ActorRankItem&l, const ActorRankItem&r)
    {
        return l.rankIndex == r.rankIndex && l.actorinfo == r.actorinfo && l.giftNumber == r.giftNumber && l.giftImageUrl == r.giftImageUrl && l.actorFlag == r.actorFlag;
    }
    inline bool operator!=(const ActorRankItem&l, const ActorRankItem&r)
    {
        return !(l == r);
    }

    struct FollowTVPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FollowTVPoster";
        }
        static string MD5()
        {
            return "a11e83e0724c2a7bc2e82ecb4c27206c";
        }
        FollowTVPoster()
        :lid(""),cid(""),vid(""),attentKey("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
            attentKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(lid, 1);
            _os.write(cid, 2);
            _os.write(vid, 3);
            _os.write(attentKey, 4);
            _os.write(shareItem, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(lid, 1, false);
            _is.read(cid, 2, false);
            _is.read(vid, 3, false);
            _is.read(attentKey, 4, false);
            _is.read(shareItem, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(attentKey,"attentKey");
            _ds.display(shareItem,"shareItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(attentKey, true);
            _ds.displaySimple(shareItem, false);
            return _os;
        }
    public:
        jce::Poster poster;
        std::string lid;
        std::string cid;
        std::string vid;
        std::string attentKey;
        jce::ShareItem shareItem;
    };
    inline bool operator==(const FollowTVPoster&l, const FollowTVPoster&r)
    {
        return l.poster == r.poster && l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.attentKey == r.attentKey && l.shareItem == r.shareItem;
    }
    inline bool operator!=(const FollowTVPoster&l, const FollowTVPoster&r)
    {
        return !(l == r);
    }

    struct ServerInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ServerInfo";
        }
        static string MD5()
        {
            return "19cfb41a66359c894f1dcce10dba2a65";
        }
        ServerInfo()
        :ip(""),netMode(0),host("")
        {
        }
        void resetDefautlt()
        {
            ip = "";
            netMode = 0;
            host = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ip, 0);
            _os.write(netMode, 1);
            _os.write(host, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ip, 0, true);
            _is.read(netMode, 1, false);
            _is.read(host, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ip,"ip");
            _ds.display(netMode,"netMode");
            _ds.display(host,"host");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ip, true);
            _ds.displaySimple(netMode, true);
            _ds.displaySimple(host, false);
            return _os;
        }
    public:
        std::string ip;
        taf::Int32 netMode;
        std::string host;
    };
    inline bool operator==(const ServerInfo&l, const ServerInfo&r)
    {
        return l.ip == r.ip && l.netMode == r.netMode && l.host == r.host;
    }
    inline bool operator!=(const ServerInfo&l, const ServerInfo&r)
    {
        return !(l == r);
    }

    struct CommonDialogInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommonDialogInfo";
        }
        static string MD5()
        {
            return "3e9b87fb36ba296f541ae05def027473";
        }
        CommonDialogInfo()
        :content(""),title(""),left(""),right("")
        {
        }
        void resetDefautlt()
        {
            content = "";
            title = "";
            left = "";
            right = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(content, 0);
            _os.write(title, 1);
            _os.write(left, 2);
            _os.write(right, 3);
            _os.write(leftAction, 4);
            _os.write(negativeAction, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(content, 0, true);
            _is.read(title, 1, false);
            _is.read(left, 2, false);
            _is.read(right, 3, false);
            _is.read(leftAction, 4, false);
            _is.read(negativeAction, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(content,"content");
            _ds.display(title,"title");
            _ds.display(left,"left");
            _ds.display(right,"right");
            _ds.display(leftAction,"leftAction");
            _ds.display(negativeAction,"negativeAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(content, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(left, true);
            _ds.displaySimple(right, true);
            _ds.displaySimple(leftAction, true);
            _ds.displaySimple(negativeAction, false);
            return _os;
        }
    public:
        std::string content;
        std::string title;
        std::string left;
        std::string right;
        jce::Action leftAction;
        jce::Action negativeAction;
    };
    inline bool operator==(const CommonDialogInfo&l, const CommonDialogInfo&r)
    {
        return l.content == r.content && l.title == r.title && l.left == r.left && l.right == r.right && l.leftAction == r.leftAction && l.negativeAction == r.negativeAction;
    }
    inline bool operator!=(const CommonDialogInfo&l, const CommonDialogInfo&r)
    {
        return !(l == r);
    }

    struct DynamicItemInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DynamicItemInfo";
        }
        static string MD5()
        {
            return "d663addfbb4640e879960b18c7885364";
        }
        DynamicItemInfo()
        :title(""),iconUrl(""),redHotId(""),redHotVersion(0),redHotStatus(true),itemId(""),tipsText(""),tipsIcon(""),selectedIconUrl(""),showLocation(0)
        {
        }
        void resetDefautlt()
        {
            title = "";
            iconUrl = "";
            redHotId = "";
            redHotVersion = 0;
            redHotStatus = true;
            itemId = "";
            tipsText = "";
            tipsIcon = "";
            selectedIconUrl = "";
            showLocation = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(iconUrl, 1);
            _os.write(action, 2);
            _os.write(redHotId, 3);
            _os.write(redHotVersion, 4);
            _os.write(redHotStatus, 5);
            _os.write(itemId, 6);
            _os.write(tipsText, 7);
            _os.write(tipsIcon, 8);
            _os.write(selectedIconUrl, 9);
            _os.write(showLocation, 10);
            _os.write(signInTextMap, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(iconUrl, 1, false);
            _is.read(action, 2, false);
            _is.read(redHotId, 3, false);
            _is.read(redHotVersion, 4, false);
            _is.read(redHotStatus, 5, false);
            _is.read(itemId, 6, false);
            _is.read(tipsText, 7, false);
            _is.read(tipsIcon, 8, false);
            _is.read(selectedIconUrl, 9, false);
            _is.read(showLocation, 10, false);
            _is.read(signInTextMap, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(iconUrl,"iconUrl");
            _ds.display(action,"action");
            _ds.display(redHotId,"redHotId");
            _ds.display(redHotVersion,"redHotVersion");
            _ds.display(redHotStatus,"redHotStatus");
            _ds.display(itemId,"itemId");
            _ds.display(tipsText,"tipsText");
            _ds.display(tipsIcon,"tipsIcon");
            _ds.display(selectedIconUrl,"selectedIconUrl");
            _ds.display(showLocation,"showLocation");
            _ds.display(signInTextMap,"signInTextMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(redHotId, true);
            _ds.displaySimple(redHotVersion, true);
            _ds.displaySimple(redHotStatus, true);
            _ds.displaySimple(itemId, true);
            _ds.displaySimple(tipsText, true);
            _ds.displaySimple(tipsIcon, true);
            _ds.displaySimple(selectedIconUrl, true);
            _ds.displaySimple(showLocation, true);
            _ds.displaySimple(signInTextMap, false);
            return _os;
        }
    public:
        std::string title;
        std::string iconUrl;
        jce::Action action;
        std::string redHotId;
        taf::Int64 redHotVersion;
        taf::Bool redHotStatus;
        std::string itemId;
        std::string tipsText;
        std::string tipsIcon;
        std::string selectedIconUrl;
        taf::Int32 showLocation;
        map<std::string, std::string> signInTextMap;
    };
    inline bool operator==(const DynamicItemInfo&l, const DynamicItemInfo&r)
    {
        return l.title == r.title && l.iconUrl == r.iconUrl && l.action == r.action && l.redHotId == r.redHotId && l.redHotVersion == r.redHotVersion && l.redHotStatus == r.redHotStatus && l.itemId == r.itemId && l.tipsText == r.tipsText && l.tipsIcon == r.tipsIcon && l.selectedIconUrl == r.selectedIconUrl && l.showLocation == r.showLocation && l.signInTextMap == r.signInTextMap;
    }
    inline bool operator!=(const DynamicItemInfo&l, const DynamicItemInfo&r)
    {
        return !(l == r);
    }

    struct RecommendReqExtInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RecommendReqExtInfo";
        }
        static string MD5()
        {
            return "72dfddf03422779b81fb661a3938fb92";
        }
        RecommendReqExtInfo()
        :loadType(0),refreshType(0),refreshContext("")
        {
        }
        void resetDefautlt()
        {
            loadType = 0;
            refreshType = 0;
            refreshContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(loadType, 0);
            _os.write(refreshType, 1);
            _os.write(refreshContext, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(loadType, 0, false);
            _is.read(refreshType, 1, false);
            _is.read(refreshContext, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(loadType,"loadType");
            _ds.display(refreshType,"refreshType");
            _ds.display(refreshContext,"refreshContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(loadType, true);
            _ds.displaySimple(refreshType, true);
            _ds.displaySimple(refreshContext, false);
            return _os;
        }
    public:
        taf::Int32 loadType;
        taf::Int32 refreshType;
        std::string refreshContext;
    };
    inline bool operator==(const RecommendReqExtInfo&l, const RecommendReqExtInfo&r)
    {
        return l.loadType == r.loadType && l.refreshType == r.refreshType && l.refreshContext == r.refreshContext;
    }
    inline bool operator!=(const RecommendReqExtInfo&l, const RecommendReqExtInfo&r)
    {
        return !(l == r);
    }

    struct RecommendRespExtInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RecommendRespExtInfo";
        }
        static string MD5()
        {
            return "4005fedab9408b5d87379bafb5f19562";
        }
        RecommendRespExtInfo()
        :timeout(0),refreshWording(""),historyReadFlag(0),refreshContext(""),tipsIconColor("")
        {
        }
        void resetDefautlt()
        {
            timeout = 0;
            refreshWording = "";
            historyReadFlag = 0;
            refreshContext = "";
            tipsIconColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(timeout, 0);
            _os.write(refreshWording, 1);
            _os.write(historyReadFlag, 2);
            _os.write(refreshContext, 3);
            _os.write(tipsIconColor, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(timeout, 0, false);
            _is.read(refreshWording, 1, false);
            _is.read(historyReadFlag, 2, false);
            _is.read(refreshContext, 3, false);
            _is.read(tipsIconColor, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(timeout,"timeout");
            _ds.display(refreshWording,"refreshWording");
            _ds.display(historyReadFlag,"historyReadFlag");
            _ds.display(refreshContext,"refreshContext");
            _ds.display(tipsIconColor,"tipsIconColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(timeout, true);
            _ds.displaySimple(refreshWording, true);
            _ds.displaySimple(historyReadFlag, true);
            _ds.displaySimple(refreshContext, true);
            _ds.displaySimple(tipsIconColor, false);
            return _os;
        }
    public:
        taf::Int64 timeout;
        std::string refreshWording;
        taf::Int32 historyReadFlag;
        std::string refreshContext;
        std::string tipsIconColor;
    };
    inline bool operator==(const RecommendRespExtInfo&l, const RecommendRespExtInfo&r)
    {
        return l.timeout == r.timeout && l.refreshWording == r.refreshWording && l.historyReadFlag == r.historyReadFlag && l.refreshContext == r.refreshContext && l.tipsIconColor == r.tipsIconColor;
    }
    inline bool operator!=(const RecommendRespExtInfo&l, const RecommendRespExtInfo&r)
    {
        return !(l == r);
    }

    struct EventValidateInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EventValidateInfo";
        }
        static string MD5()
        {
            return "ea962c4d27cce506da001793d17d8ef9";
        }
        EventValidateInfo()
        :uniqueId(""),eventType(0),businessId(""),frequency(0),maxExposeCount(0),startTime(0),endTime(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            uniqueId = "";
            eventType = 0;
            businessId = "";
            frequency = 0;
            maxExposeCount = 0;
            startTime = 0;
            endTime = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uniqueId, 0);
            _os.write(eventType, 1);
            _os.write(businessId, 2);
            _os.write(frequency, 3);
            _os.write(maxExposeCount, 4);
            _os.write(startTime, 5);
            _os.write(endTime, 6);
            _os.write(reportKey, 7);
            _os.write(reportParams, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uniqueId, 0, true);
            _is.read(eventType, 1, true);
            _is.read(businessId, 2, false);
            _is.read(frequency, 3, false);
            _is.read(maxExposeCount, 4, false);
            _is.read(startTime, 5, false);
            _is.read(endTime, 6, false);
            _is.read(reportKey, 7, false);
            _is.read(reportParams, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uniqueId,"uniqueId");
            _ds.display(eventType,"eventType");
            _ds.display(businessId,"businessId");
            _ds.display(frequency,"frequency");
            _ds.display(maxExposeCount,"maxExposeCount");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uniqueId, true);
            _ds.displaySimple(eventType, true);
            _ds.displaySimple(businessId, true);
            _ds.displaySimple(frequency, true);
            _ds.displaySimple(maxExposeCount, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string uniqueId;
        taf::Int32 eventType;
        std::string businessId;
        taf::Int64 frequency;
        taf::Int32 maxExposeCount;
        taf::Int64 startTime;
        taf::Int64 endTime;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const EventValidateInfo&l, const EventValidateInfo&r)
    {
        return l.uniqueId == r.uniqueId && l.eventType == r.eventType && l.businessId == r.businessId && l.frequency == r.frequency && l.maxExposeCount == r.maxExposeCount && l.startTime == r.startTime && l.endTime == r.endTime && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const EventValidateInfo&l, const EventValidateInfo&r)
    {
        return !(l == r);
    }

    struct PullRefreshText : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PullRefreshText";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        PullRefreshText()
        :text(""),textColor(""),leftIconUrl("")
        {
        }
        void resetDefautlt()
        {
            text = "";
            textColor = "";
            leftIconUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(text, 0);
            _os.write(textColor, 1);
            _os.write(leftIconUrl, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(text, 0, false);
            _is.read(textColor, 1, false);
            _is.read(leftIconUrl, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(text,"text");
            _ds.display(textColor,"textColor");
            _ds.display(leftIconUrl,"leftIconUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(text, true);
            _ds.displaySimple(textColor, true);
            _ds.displaySimple(leftIconUrl, false);
            return _os;
        }
    public:
        std::string text;
        std::string textColor;
        std::string leftIconUrl;
    };
    inline bool operator==(const PullRefreshText&l, const PullRefreshText&r)
    {
        return l.text == r.text && l.textColor == r.textColor && l.leftIconUrl == r.leftIconUrl;
    }
    inline bool operator!=(const PullRefreshText&l, const PullRefreshText&r)
    {
        return !(l == r);
    }

    struct WidgetInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WidgetInfo";
        }
        static string MD5()
        {
            return "4cf53f670bb64963290f491d553d6dd2";
        }
        WidgetInfo()
        :lottieUrl(""),aspectRatio(5),position(0),scrollWithList(false),clickAreaXStart(0),clickAreaXEnd(0)
        {
        }
        void resetDefautlt()
        {
            lottieUrl = "";
            aspectRatio = 5;
            position = 0;
            scrollWithList = false;
            clickAreaXStart = 0;
            clickAreaXEnd = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lottieUrl, 0);
            _os.write(aspectRatio, 1);
            _os.write(position, 2);
            _os.write(scrollWithList, 3);
            _os.write(clickAreaXStart, 4);
            _os.write(clickAreaXEnd, 5);
            _os.write(clickAction, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lottieUrl, 0, false);
            _is.read(aspectRatio, 1, false);
            _is.read(position, 2, false);
            _is.read(scrollWithList, 3, false);
            _is.read(clickAreaXStart, 4, false);
            _is.read(clickAreaXEnd, 5, false);
            _is.read(clickAction, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lottieUrl,"lottieUrl");
            _ds.display(aspectRatio,"aspectRatio");
            _ds.display(position,"position");
            _ds.display(scrollWithList,"scrollWithList");
            _ds.display(clickAreaXStart,"clickAreaXStart");
            _ds.display(clickAreaXEnd,"clickAreaXEnd");
            _ds.display(clickAction,"clickAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lottieUrl, true);
            _ds.displaySimple(aspectRatio, true);
            _ds.displaySimple(position, true);
            _ds.displaySimple(scrollWithList, true);
            _ds.displaySimple(clickAreaXStart, true);
            _ds.displaySimple(clickAreaXEnd, true);
            _ds.displaySimple(clickAction, false);
            return _os;
        }
    public:
        std::string lottieUrl;
        taf::Float aspectRatio;
        taf::Int32 position;
        taf::Bool scrollWithList;
        taf::Float clickAreaXStart;
        taf::Float clickAreaXEnd;
        jce::Action clickAction;
    };
    inline bool operator==(const WidgetInfo&l, const WidgetInfo&r)
    {
        return l.lottieUrl == r.lottieUrl && l.aspectRatio == r.aspectRatio && l.position == r.position && l.scrollWithList == r.scrollWithList && l.clickAreaXStart == r.clickAreaXStart && l.clickAreaXEnd == r.clickAreaXEnd && l.clickAction == r.clickAction;
    }
    inline bool operator!=(const WidgetInfo&l, const WidgetInfo&r)
    {
        return !(l == r);
    }

    struct PullRefreshConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PullRefreshConfig";
        }
        static string MD5()
        {
            return "2841be99345ae6fdefb88a52f918ce79";
        }
        PullRefreshConfig()
        :imageUrl(""),bgColor(""),startTime(0),endTime(0),bgImageUrl(""),configType(0),bgAspectRatio(1.875)
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
            bgColor = "";
            startTime = 0;
            endTime = 0;
            bgImageUrl = "";
            configType = 0;
            bgAspectRatio = 1.875;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(bgColor, 1);
            _os.write(action, 2);
            _os.write(startTime, 3);
            _os.write(endTime, 4);
            _os.write(textList, 5);
            _os.write(bgImageUrl, 6);
            _os.write(validateInfo, 7);
            _os.write(pullAction, 8);
            _os.write(configType, 9);
            _os.write(bgAspectRatio, 10);
            _os.write(widget, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, false);
            _is.read(bgColor, 1, false);
            _is.read(action, 2, false);
            _is.read(startTime, 3, false);
            _is.read(endTime, 4, false);
            _is.read(textList, 5, false);
            _is.read(bgImageUrl, 6, false);
            _is.read(validateInfo, 7, false);
            _is.read(pullAction, 8, false);
            _is.read(configType, 9, false);
            _is.read(bgAspectRatio, 10, false);
            _is.read(widget, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(bgColor,"bgColor");
            _ds.display(action,"action");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(textList,"textList");
            _ds.display(bgImageUrl,"bgImageUrl");
            _ds.display(validateInfo,"validateInfo");
            _ds.display(pullAction,"pullAction");
            _ds.display(configType,"configType");
            _ds.display(bgAspectRatio,"bgAspectRatio");
            _ds.display(widget,"widget");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(bgColor, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(textList, true);
            _ds.displaySimple(bgImageUrl, true);
            _ds.displaySimple(validateInfo, true);
            _ds.displaySimple(pullAction, true);
            _ds.displaySimple(configType, true);
            _ds.displaySimple(bgAspectRatio, true);
            _ds.displaySimple(widget, false);
            return _os;
        }
    public:
        std::string imageUrl;
        std::string bgColor;
        jce::Action action;
        taf::Int64 startTime;
        taf::Int64 endTime;
        vector<jce::PullRefreshText> textList;
        std::string bgImageUrl;
        jce::EventValidateInfo validateInfo;
        jce::Action pullAction;
        taf::Int32 configType;
        taf::Float bgAspectRatio;
        jce::WidgetInfo widget;
    };
    inline bool operator==(const PullRefreshConfig&l, const PullRefreshConfig&r)
    {
        return l.imageUrl == r.imageUrl && l.bgColor == r.bgColor && l.action == r.action && l.startTime == r.startTime && l.endTime == r.endTime && l.textList == r.textList && l.bgImageUrl == r.bgImageUrl && l.validateInfo == r.validateInfo && l.pullAction == r.pullAction && l.configType == r.configType && l.bgAspectRatio == r.bgAspectRatio && l.widget == r.widget;
    }
    inline bool operator!=(const PullRefreshConfig&l, const PullRefreshConfig&r)
    {
        return !(l == r);
    }

    struct BigH5EventConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.BigH5EventConfig";
        }
        static string MD5()
        {
            return "092ff69d1fcc494258df1991cacac7ed";
        }
        BigH5EventConfig()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(validateInfo, 0);
            _os.write(action, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(validateInfo, 0, false);
            _is.read(action, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(validateInfo,"validateInfo");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(validateInfo, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        jce::EventValidateInfo validateInfo;
        jce::Action action;
    };
    inline bool operator==(const BigH5EventConfig&l, const BigH5EventConfig&r)
    {
        return l.validateInfo == r.validateInfo && l.action == r.action;
    }
    inline bool operator!=(const BigH5EventConfig&l, const BigH5EventConfig&r)
    {
        return !(l == r);
    }

    struct BannerEventConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.BannerEventConfig";
        }
        static string MD5()
        {
            return "89d4445e594a240b13b295af4dc8ea9c";
        }
        BannerEventConfig()
        :imageUrl("")
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(validateInfo, 0);
            _os.write(imageUrl, 1);
            _os.write(moreAction, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(validateInfo, 0, false);
            _is.read(imageUrl, 1, false);
            _is.read(moreAction, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(validateInfo,"validateInfo");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(moreAction,"moreAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(validateInfo, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(moreAction, false);
            return _os;
        }
    public:
        jce::EventValidateInfo validateInfo;
        std::string imageUrl;
        jce::ActionBarInfo moreAction;
    };
    inline bool operator==(const BannerEventConfig&l, const BannerEventConfig&r)
    {
        return l.validateInfo == r.validateInfo && l.imageUrl == r.imageUrl && l.moreAction == r.moreAction;
    }
    inline bool operator!=(const BannerEventConfig&l, const BannerEventConfig&r)
    {
        return !(l == r);
    }

    struct LottieEventConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LottieEventConfig";
        }
        static string MD5()
        {
            return "e2d08acaaf6b02ae0f30273c45a5dc3b";
        }
        LottieEventConfig()
        :lottieFileUrl(""),cycleTimes(1),playTimes(1)
        {
        }
        void resetDefautlt()
        {
            lottieFileUrl = "";
            cycleTimes = 1;
            playTimes = 1;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(validateInfo, 0);
            _os.write(lottieFileUrl, 1);
            _os.write(cycleTimes, 2);
            _os.write(playTimes, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(validateInfo, 0, false);
            _is.read(lottieFileUrl, 1, false);
            _is.read(cycleTimes, 2, false);
            _is.read(playTimes, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(validateInfo,"validateInfo");
            _ds.display(lottieFileUrl,"lottieFileUrl");
            _ds.display(cycleTimes,"cycleTimes");
            _ds.display(playTimes,"playTimes");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(validateInfo, true);
            _ds.displaySimple(lottieFileUrl, true);
            _ds.displaySimple(cycleTimes, true);
            _ds.displaySimple(playTimes, false);
            return _os;
        }
    public:
        jce::EventValidateInfo validateInfo;
        std::string lottieFileUrl;
        taf::Int32 cycleTimes;
        taf::Int32 playTimes;
    };
    inline bool operator==(const LottieEventConfig&l, const LottieEventConfig&r)
    {
        return l.validateInfo == r.validateInfo && l.lottieFileUrl == r.lottieFileUrl && l.cycleTimes == r.cycleTimes && l.playTimes == r.playTimes;
    }
    inline bool operator!=(const LottieEventConfig&l, const LottieEventConfig&r)
    {
        return !(l == r);
    }

    struct PromotionEventInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PromotionEventInfo";
        }
        static string MD5()
        {
            return "2b83b551cd1ae2fee3aa72ef8959a472";
        }
        PromotionEventInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bigBannerConfigs, 0);
            _os.write(headBannerConfigs, 1);
            _os.write(footBannerConfigs, 2);
            _os.write(bigH5Configs, 3);
            _os.write(lottieConfigs, 4);
            _os.write(refreshConfigs, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bigBannerConfigs, 0, false);
            _is.read(headBannerConfigs, 1, false);
            _is.read(footBannerConfigs, 2, false);
            _is.read(bigH5Configs, 3, false);
            _is.read(lottieConfigs, 4, false);
            _is.read(refreshConfigs, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bigBannerConfigs,"bigBannerConfigs");
            _ds.display(headBannerConfigs,"headBannerConfigs");
            _ds.display(footBannerConfigs,"footBannerConfigs");
            _ds.display(bigH5Configs,"bigH5Configs");
            _ds.display(lottieConfigs,"lottieConfigs");
            _ds.display(refreshConfigs,"refreshConfigs");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bigBannerConfigs, true);
            _ds.displaySimple(headBannerConfigs, true);
            _ds.displaySimple(footBannerConfigs, true);
            _ds.displaySimple(bigH5Configs, true);
            _ds.displaySimple(lottieConfigs, true);
            _ds.displaySimple(refreshConfigs, false);
            return _os;
        }
    public:
        vector<jce::BannerEventConfig> bigBannerConfigs;
        vector<jce::BannerEventConfig> headBannerConfigs;
        vector<jce::BannerEventConfig> footBannerConfigs;
        vector<jce::BigH5EventConfig> bigH5Configs;
        vector<jce::LottieEventConfig> lottieConfigs;
        vector<jce::PullRefreshConfig> refreshConfigs;
    };
    inline bool operator==(const PromotionEventInfo&l, const PromotionEventInfo&r)
    {
        return l.bigBannerConfigs == r.bigBannerConfigs && l.headBannerConfigs == r.headBannerConfigs && l.footBannerConfigs == r.footBannerConfigs && l.bigH5Configs == r.bigH5Configs && l.lottieConfigs == r.lottieConfigs && l.refreshConfigs == r.refreshConfigs;
    }
    inline bool operator!=(const PromotionEventInfo&l, const PromotionEventInfo&r)
    {
        return !(l == r);
    }

    struct ChannelEventInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelEventInfo";
        }
        static string MD5()
        {
            return "2fdf3ff0039f90daf3d28a9d390d6dc3";
        }
        ChannelEventInfo()
        :eventType(0),uniqueId(""),version(0),faceImageUrl("")
        {
        }
        void resetDefautlt()
        {
            eventType = 0;
            uniqueId = "";
            version = 0;
            faceImageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(eventType, 0);
            _os.write(uniqueId, 1);
            _os.write(version, 2);
            _os.write(faceImageUrl, 3);
            _os.write(moreAction, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(eventType, 0, true);
            _is.read(uniqueId, 1, true);
            _is.read(version, 2, true);
            _is.read(faceImageUrl, 3, false);
            _is.read(moreAction, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(eventType,"eventType");
            _ds.display(uniqueId,"uniqueId");
            _ds.display(version,"version");
            _ds.display(faceImageUrl,"faceImageUrl");
            _ds.display(moreAction,"moreAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(eventType, true);
            _ds.displaySimple(uniqueId, true);
            _ds.displaySimple(version, true);
            _ds.displaySimple(faceImageUrl, true);
            _ds.displaySimple(moreAction, false);
            return _os;
        }
    public:
        taf::Int32 eventType;
        std::string uniqueId;
        taf::Int64 version;
        std::string faceImageUrl;
        jce::ActionBarInfo moreAction;
    };
    inline bool operator==(const ChannelEventInfo&l, const ChannelEventInfo&r)
    {
        return l.eventType == r.eventType && l.uniqueId == r.uniqueId && l.version == r.version && l.faceImageUrl == r.faceImageUrl && l.moreAction == r.moreAction;
    }
    inline bool operator!=(const ChannelEventInfo&l, const ChannelEventInfo&r)
    {
        return !(l == r);
    }

    struct DiscoveryEntryItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DiscoveryEntryItem";
        }
        static string MD5()
        {
            return "0b3413e3f7a4339afa341bf67e4bd5c2";
        }
        DiscoveryEntryItem()
        :imageUrl(""),title(""),itemType(0)
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
            title = "";
            itemType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(title, 1);
            _os.write(action, 2);
            _os.write(itemType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, true);
            _is.read(title, 1, true);
            _is.read(action, 2, false);
            _is.read(itemType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(title,"title");
            _ds.display(action,"action");
            _ds.display(itemType,"itemType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(itemType, false);
            return _os;
        }
    public:
        std::string imageUrl;
        std::string title;
        jce::Action action;
        taf::Int32 itemType;
    };
    inline bool operator==(const DiscoveryEntryItem&l, const DiscoveryEntryItem&r)
    {
        return l.imageUrl == r.imageUrl && l.title == r.title && l.action == r.action && l.itemType == r.itemType;
    }
    inline bool operator!=(const DiscoveryEntryItem&l, const DiscoveryEntryItem&r)
    {
        return !(l == r);
    }

    struct LiveTabModuleInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveTabModuleInfo";
        }
        static string MD5()
        {
            return "3c862bc91129ccf820e8a0c3df1da1ac";
        }
        LiveTabModuleInfo()
        :modType(0),title(""),dataKey(""),subtitle(""),desc(""),timeOut(0),tabId(""),dataType(""),showOnNav(1),iconUrl(""),isSelected(0),reportParams(""),location(0),unReadCount(0),postionRange("")
        {
        }
        void resetDefautlt()
        {
            modType = 0;
            title = "";
            dataKey = "";
            subtitle = "";
            desc = "";
            timeOut = 0;
            tabId = "";
            dataType = "";
            showOnNav = 1;
            iconUrl = "";
            isSelected = 0;
            reportParams = "";
            location = 0;
            unReadCount = 0;
            postionRange = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(modType, 0);
            _os.write(title, 1);
            _os.write(dataKey, 2);
            _os.write(subtitle, 3);
            _os.write(desc, 4);
            _os.write(timeOut, 5);
            _os.write(tabId, 6);
            _os.write(dataType, 7);
            _os.write(shareItem, 8);
            _os.write(showOnNav, 9);
            _os.write(iconUrl, 10);
            _os.write(isSelected, 11);
            _os.write(reportParams, 12);
            _os.write(location, 13);
            _os.write(unReadCount, 14);
            _os.write(postionRange, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(modType, 0, true);
            _is.read(title, 1, true);
            _is.read(dataKey, 2, true);
            _is.read(subtitle, 3, false);
            _is.read(desc, 4, false);
            _is.read(timeOut, 5, false);
            _is.read(tabId, 6, false);
            _is.read(dataType, 7, false);
            _is.read(shareItem, 8, false);
            _is.read(showOnNav, 9, false);
            _is.read(iconUrl, 10, false);
            _is.read(isSelected, 11, false);
            _is.read(reportParams, 12, false);
            _is.read(location, 13, false);
            _is.read(unReadCount, 14, false);
            _is.read(postionRange, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(modType,"modType");
            _ds.display(title,"title");
            _ds.display(dataKey,"dataKey");
            _ds.display(subtitle,"subtitle");
            _ds.display(desc,"desc");
            _ds.display(timeOut,"timeOut");
            _ds.display(tabId,"tabId");
            _ds.display(dataType,"dataType");
            _ds.display(shareItem,"shareItem");
            _ds.display(showOnNav,"showOnNav");
            _ds.display(iconUrl,"iconUrl");
            _ds.display(isSelected,"isSelected");
            _ds.display(reportParams,"reportParams");
            _ds.display(location,"location");
            _ds.display(unReadCount,"unReadCount");
            _ds.display(postionRange,"postionRange");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(modType, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(subtitle, true);
            _ds.displaySimple(desc, true);
            _ds.displaySimple(timeOut, true);
            _ds.displaySimple(tabId, true);
            _ds.displaySimple(dataType, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(showOnNav, true);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(isSelected, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(location, true);
            _ds.displaySimple(unReadCount, true);
            _ds.displaySimple(postionRange, false);
            return _os;
        }
    public:
        taf::Int32 modType;
        std::string title;
        std::string dataKey;
        std::string subtitle;
        std::string desc;
        taf::Int32 timeOut;
        std::string tabId;
        std::string dataType;
        jce::ShareItem shareItem;
        taf::Char showOnNav;
        std::string iconUrl;
        taf::Char isSelected;
        std::string reportParams;
        taf::Int32 location;
        taf::Int32 unReadCount;
        std::string postionRange;
    };
    inline bool operator==(const LiveTabModuleInfo&l, const LiveTabModuleInfo&r)
    {
        return l.modType == r.modType && l.title == r.title && l.dataKey == r.dataKey && l.subtitle == r.subtitle && l.desc == r.desc && l.timeOut == r.timeOut && l.tabId == r.tabId && l.dataType == r.dataType && l.shareItem == r.shareItem && l.showOnNav == r.showOnNav && l.iconUrl == r.iconUrl && l.isSelected == r.isSelected && l.reportParams == r.reportParams && l.location == r.location && l.unReadCount == r.unReadCount && l.postionRange == r.postionRange;
    }
    inline bool operator!=(const LiveTabModuleInfo&l, const LiveTabModuleInfo&r)
    {
        return !(l == r);
    }

    struct OptionItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.OptionItem";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        OptionItem()
        :id(""),title("")
        {
        }
        void resetDefautlt()
        {
            id = "";
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(title, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, true);
            _is.read(title, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        std::string id;
        std::string title;
    };
    inline bool operator==(const OptionItem&l, const OptionItem&r)
    {
        return l.id == r.id && l.title == r.title;
    }
    inline bool operator!=(const OptionItem&l, const OptionItem&r)
    {
        return !(l == r);
    }

    struct OptionGroup : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.OptionGroup";
        }
        static string MD5()
        {
            return "e67c4868d6f6f9a5600c050477fb227c";
        }
        OptionGroup()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(optionList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(optionList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(optionList,"optionList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(optionList, false);
            return _os;
        }
    public:
        std::string dataKey;
        vector<jce::OptionItem> optionList;
    };
    inline bool operator==(const OptionGroup&l, const OptionGroup&r)
    {
        return l.dataKey == r.dataKey && l.optionList == r.optionList;
    }
    inline bool operator!=(const OptionGroup&l, const OptionGroup&r)
    {
        return !(l == r);
    }

    struct GameDownloadItemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameDownloadItemData";
        }
        static string MD5()
        {
            return "8ae37e00e50a65880a495fb1615bd4ae";
        }
        GameDownloadItemData()
        :sourceId(0)
        {
        }
        void resetDefautlt()
        {
            sourceId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(apkInfo, 1);
            _os.write(action, 2);
            _os.write(sourceId, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(apkInfo, 1, true);
            _is.read(action, 2, false);
            _is.read(sourceId, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(apkInfo,"apkInfo");
            _ds.display(action,"action");
            _ds.display(sourceId,"sourceId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(apkInfo, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(sourceId, false);
            return _os;
        }
    public:
        jce::Poster poster;
        jce::AppInfo apkInfo;
        jce::Action action;
        taf::Int32 sourceId;
    };
    inline bool operator==(const GameDownloadItemData&l, const GameDownloadItemData&r)
    {
        return l.poster == r.poster && l.apkInfo == r.apkInfo && l.action == r.action && l.sourceId == r.sourceId;
    }
    inline bool operator!=(const GameDownloadItemData&l, const GameDownloadItemData&r)
    {
        return !(l == r);
    }

    struct VideoInfoPosterItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoInfoPosterItem";
        }
        static string MD5()
        {
            return "d8e2d0166fef8fa1ef9de0243488e0c6";
        }
        VideoInfoPosterItem()
        :names(""),isAutoPlay(true)
        {
        }
        void resetDefautlt()
        {
            names = "";
            isAutoPlay = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(videoItem, 0);
            _os.write(attentItem, 1);
            _os.write(actions, 2);
            _os.write(names, 3);
            _os.write(poster, 4);
            _os.write(isAutoPlay, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(videoItem, 0, false);
            _is.read(attentItem, 1, false);
            _is.read(actions, 2, false);
            _is.read(names, 3, false);
            _is.read(poster, 4, false);
            _is.read(isAutoPlay, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(videoItem,"videoItem");
            _ds.display(attentItem,"attentItem");
            _ds.display(actions,"actions");
            _ds.display(names,"names");
            _ds.display(poster,"poster");
            _ds.display(isAutoPlay,"isAutoPlay");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(videoItem, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(actions, true);
            _ds.displaySimple(names, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(isAutoPlay, false);
            return _os;
        }
    public:
        jce::VideoItemData videoItem;
        jce::VideoAttentItem attentItem;
        jce::Action actions;
        std::string names;
        jce::Poster poster;
        taf::Bool isAutoPlay;
    };
    inline bool operator==(const VideoInfoPosterItem&l, const VideoInfoPosterItem&r)
    {
        return l.videoItem == r.videoItem && l.attentItem == r.attentItem && l.actions == r.actions && l.names == r.names && l.poster == r.poster && l.isAutoPlay == r.isAutoPlay;
    }
    inline bool operator!=(const VideoInfoPosterItem&l, const VideoInfoPosterItem&r)
    {
        return !(l == r);
    }

    struct VideoKeyItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoKeyItem";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        VideoKeyItem()
        :vid(""),cid(""),lid("")
        {
        }
        void resetDefautlt()
        {
            vid = "";
            cid = "";
            lid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(cid, 1);
            _os.write(lid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, false);
            _is.read(cid, 1, false);
            _is.read(lid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(cid,"cid");
            _ds.display(lid,"lid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(lid, false);
            return _os;
        }
    public:
        std::string vid;
        std::string cid;
        std::string lid;
    };
    inline bool operator==(const VideoKeyItem&l, const VideoKeyItem&r)
    {
        return l.vid == r.vid && l.cid == r.cid && l.lid == r.lid;
    }
    inline bool operator!=(const VideoKeyItem&l, const VideoKeyItem&r)
    {
        return !(l == r);
    }

    struct LiveSubscribeInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveSubscribeInfo";
        }
        static string MD5()
        {
            return "72dfbcdd3c88a74b352339ad6f54b2fe";
        }
        LiveSubscribeInfo()
        :actorImageUrl(""),startTime(0),pollDataKey(""),pid(""),title("")
        {
        }
        void resetDefautlt()
        {
            actorImageUrl = "";
            startTime = 0;
            pollDataKey = "";
            pid = "";
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actorImageUrl, 0);
            _os.write(startTime, 1);
            _os.write(pollDataKey, 2);
            _os.write(attentItem, 3);
            _os.write(shareItem, 4);
            _os.write(markLabel, 5);
            _os.write(actors, 6);
            _os.write(pid, 7);
            _os.write(title, 8);
            _os.write(action, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actorImageUrl, 0, true);
            _is.read(startTime, 1, true);
            _is.read(pollDataKey, 2, true);
            _is.read(attentItem, 3, false);
            _is.read(shareItem, 4, false);
            _is.read(markLabel, 5, false);
            _is.read(actors, 6, false);
            _is.read(pid, 7, false);
            _is.read(title, 8, false);
            _is.read(action, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actorImageUrl,"actorImageUrl");
            _ds.display(startTime,"startTime");
            _ds.display(pollDataKey,"pollDataKey");
            _ds.display(attentItem,"attentItem");
            _ds.display(shareItem,"shareItem");
            _ds.display(markLabel,"markLabel");
            _ds.display(actors,"actors");
            _ds.display(pid,"pid");
            _ds.display(title,"title");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actorImageUrl, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(pollDataKey, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(markLabel, true);
            _ds.displaySimple(actors, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string actorImageUrl;
        taf::Int64 startTime;
        std::string pollDataKey;
        jce::VideoAttentItem attentItem;
        jce::ShareItem shareItem;
        jce::MarkLabel markLabel;
        vector<jce::ActorInfo> actors;
        std::string pid;
        std::string title;
        jce::Action action;
    };
    inline bool operator==(const LiveSubscribeInfo&l, const LiveSubscribeInfo&r)
    {
        return l.actorImageUrl == r.actorImageUrl && l.startTime == r.startTime && l.pollDataKey == r.pollDataKey && l.attentItem == r.attentItem && l.shareItem == r.shareItem && l.markLabel == r.markLabel && l.actors == r.actors && l.pid == r.pid && l.title == r.title && l.action == r.action;
    }
    inline bool operator!=(const LiveSubscribeInfo&l, const LiveSubscribeInfo&r)
    {
        return !(l == r);
    }

    struct RelatedRecommenVideoData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RelatedRecommenVideoData";
        }
        static string MD5()
        {
            return "b04f02376a90462235fdd85e3ec6c5f2";
        }
        RelatedRecommenVideoData()
        :pid(""),vid(""),streamId(""),startTime(0),endTime(0),praiseCnt(0),streamStyle(0)
        {
        }
        void resetDefautlt()
        {
            pid = "";
            vid = "";
            streamId = "";
            startTime = 0;
            endTime = 0;
            praiseCnt = 0;
            streamStyle = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pid, 0);
            _os.write(vid, 1);
            _os.write(streamId, 2);
            _os.write(poster, 3);
            _os.write(action, 4);
            _os.write(startTime, 5);
            _os.write(endTime, 6);
            _os.write(praiseCnt, 7);
            _os.write(streamStyle, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pid, 0, true);
            _is.read(vid, 1, false);
            _is.read(streamId, 2, false);
            _is.read(poster, 3, false);
            _is.read(action, 4, false);
            _is.read(startTime, 5, false);
            _is.read(endTime, 6, false);
            _is.read(praiseCnt, 7, false);
            _is.read(streamStyle, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pid,"pid");
            _ds.display(vid,"vid");
            _ds.display(streamId,"streamId");
            _ds.display(poster,"poster");
            _ds.display(action,"action");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(praiseCnt,"praiseCnt");
            _ds.display(streamStyle,"streamStyle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(streamId, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(praiseCnt, true);
            _ds.displaySimple(streamStyle, false);
            return _os;
        }
    public:
        std::string pid;
        std::string vid;
        std::string streamId;
        jce::Poster poster;
        jce::Action action;
        taf::Int64 startTime;
        taf::Int64 endTime;
        taf::Int64 praiseCnt;
        taf::Int32 streamStyle;
    };
    inline bool operator==(const RelatedRecommenVideoData&l, const RelatedRecommenVideoData&r)
    {
        return l.pid == r.pid && l.vid == r.vid && l.streamId == r.streamId && l.poster == r.poster && l.action == r.action && l.startTime == r.startTime && l.endTime == r.endTime && l.praiseCnt == r.praiseCnt && l.streamStyle == r.streamStyle;
    }
    inline bool operator!=(const RelatedRecommenVideoData&l, const RelatedRecommenVideoData&r)
    {
        return !(l == r);
    }

    struct LiveRlativeRecommendVideoItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveRlativeRecommendVideoItem";
        }
        static string MD5()
        {
            return "8629def604c3ca40512f1e0187ba2fb9";
        }
        LiveRlativeRecommendVideoItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actor, 0);
            _os.write(videoInfos, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actor, 0, true);
            _is.read(videoInfos, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actor,"actor");
            _ds.display(videoInfos,"videoInfos");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actor, true);
            _ds.displaySimple(videoInfos, false);
            return _os;
        }
    public:
        jce::ActorInfo actor;
        vector<jce::RelatedRecommenVideoData> videoInfos;
    };
    inline bool operator==(const LiveRlativeRecommendVideoItem&l, const LiveRlativeRecommendVideoItem&r)
    {
        return l.actor == r.actor && l.videoInfos == r.videoInfos;
    }
    inline bool operator!=(const LiveRlativeRecommendVideoItem&l, const LiveRlativeRecommendVideoItem&r)
    {
        return !(l == r);
    }

    struct PKGroupInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PKGroupInfo";
        }
        static string MD5()
        {
            return "e7bb628b2c3e9ff5dc65dc96a2ff0069";
        }
        PKGroupInfo()
        :strGroupID(""),strGroupName(""),strGroupLogoPic(""),lTotalRenqi(0)
        {
        }
        void resetDefautlt()
        {
            strGroupID = "";
            strGroupName = "";
            strGroupLogoPic = "";
            lTotalRenqi = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strGroupID, 0);
            _os.write(strGroupName, 1);
            _os.write(strGroupLogoPic, 2);
            _os.write(lTotalRenqi, 3);
            _os.write(actorList, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strGroupID, 0, false);
            _is.read(strGroupName, 1, false);
            _is.read(strGroupLogoPic, 2, false);
            _is.read(lTotalRenqi, 3, false);
            _is.read(actorList, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strGroupID,"strGroupID");
            _ds.display(strGroupName,"strGroupName");
            _ds.display(strGroupLogoPic,"strGroupLogoPic");
            _ds.display(lTotalRenqi,"lTotalRenqi");
            _ds.display(actorList,"actorList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strGroupID, true);
            _ds.displaySimple(strGroupName, true);
            _ds.displaySimple(strGroupLogoPic, true);
            _ds.displaySimple(lTotalRenqi, true);
            _ds.displaySimple(actorList, false);
            return _os;
        }
    public:
        std::string strGroupID;
        std::string strGroupName;
        std::string strGroupLogoPic;
        taf::Int64 lTotalRenqi;
        map<taf::Int32, jce::ActorList> actorList;
    };
    inline bool operator==(const PKGroupInfo&l, const PKGroupInfo&r)
    {
        return l.strGroupID == r.strGroupID && l.strGroupName == r.strGroupName && l.strGroupLogoPic == r.strGroupLogoPic && l.lTotalRenqi == r.lTotalRenqi && l.actorList == r.actorList;
    }
    inline bool operator!=(const PKGroupInfo&l, const PKGroupInfo&r)
    {
        return !(l == r);
    }

    struct CommonVideoData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommonVideoData";
        }
        static string MD5()
        {
            return "e8fa62462c0b3692c32035dd13954094";
        }
        CommonVideoData()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(vodVideoData, 1);
            _os.write(liveVideoData, 2);
            _os.write(attentItem, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(vodVideoData, 1, false);
            _is.read(liveVideoData, 2, false);
            _is.read(attentItem, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(vodVideoData,"vodVideoData");
            _ds.display(liveVideoData,"liveVideoData");
            _ds.display(attentItem,"attentItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(vodVideoData, true);
            _ds.displaySimple(liveVideoData, true);
            _ds.displaySimple(attentItem, false);
            return _os;
        }
    public:
        jce::Poster poster;
        jce::VideoItemData vodVideoData;
        jce::LiveVideoItemData liveVideoData;
        jce::VideoAttentItem attentItem;
    };
    inline bool operator==(const CommonVideoData&l, const CommonVideoData&r)
    {
        return l.poster == r.poster && l.vodVideoData == r.vodVideoData && l.liveVideoData == r.liveVideoData && l.attentItem == r.attentItem;
    }
    inline bool operator!=(const CommonVideoData&l, const CommonVideoData&r)
    {
        return !(l == r);
    }

    struct CommonDownloadImageData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommonDownloadImageData";
        }
        static string MD5()
        {
            return "92d1f4ec13f0a38c601db068ddff8a6e";
        }
        CommonDownloadImageData()
        :url(""),thumbUrl(""),imgType(0)
        {
        }
        void resetDefautlt()
        {
            url = "";
            thumbUrl = "";
            imgType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(url, 0);
            _os.write(thumbUrl, 1);
            _os.write(imgType, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(url, 0, true);
            _is.read(thumbUrl, 1, false);
            _is.read(imgType, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(url,"url");
            _ds.display(thumbUrl,"thumbUrl");
            _ds.display(imgType,"imgType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(url, true);
            _ds.displaySimple(thumbUrl, true);
            _ds.displaySimple(imgType, false);
            return _os;
        }
    public:
        std::string url;
        std::string thumbUrl;
        taf::Char imgType;
    };
    inline bool operator==(const CommonDownloadImageData&l, const CommonDownloadImageData&r)
    {
        return l.url == r.url && l.thumbUrl == r.thumbUrl && l.imgType == r.imgType;
    }
    inline bool operator!=(const CommonDownloadImageData&l, const CommonDownloadImageData&r)
    {
        return !(l == r);
    }

    struct IdData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.IdData";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        IdData()
        :sId(""),iType(0)
        {
        }
        void resetDefautlt()
        {
            sId = "";
            iType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sId, 0);
            _os.write(iType, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sId, 0, true);
            _is.read(iType, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sId,"sId");
            _ds.display(iType,"iType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sId, true);
            _ds.displaySimple(iType, false);
            return _os;
        }
    public:
        std::string sId;
        taf::Int32 iType;
    };
    inline bool operator==(const IdData&l, const IdData&r)
    {
        return l.sId == r.sId && l.iType == r.iType;
    }
    inline bool operator!=(const IdData&l, const IdData&r)
    {
        return !(l == r);
    }

    struct IdPraise : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.IdPraise";
        }
        static string MD5()
        {
            return "1b685a3702fac8b83d07a89af94c5504";
        }
        IdPraise()
        :sId(""),iType(0),lPraiseNum(0),sRid(""),lRidPraiseNum(0)
        {
        }
        void resetDefautlt()
        {
            sId = "";
            iType = 0;
            lPraiseNum = 0;
            sRid = "";
            lRidPraiseNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sId, 0);
            _os.write(iType, 1);
            _os.write(lPraiseNum, 2);
            _os.write(sRid, 3);
            _os.write(lRidPraiseNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sId, 0, true);
            _is.read(iType, 1, true);
            _is.read(lPraiseNum, 2, true);
            _is.read(sRid, 3, true);
            _is.read(lRidPraiseNum, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sId,"sId");
            _ds.display(iType,"iType");
            _ds.display(lPraiseNum,"lPraiseNum");
            _ds.display(sRid,"sRid");
            _ds.display(lRidPraiseNum,"lRidPraiseNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sId, true);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(lPraiseNum, true);
            _ds.displaySimple(sRid, true);
            _ds.displaySimple(lRidPraiseNum, false);
            return _os;
        }
    public:
        std::string sId;
        taf::Int32 iType;
        taf::Int64 lPraiseNum;
        std::string sRid;
        taf::Int64 lRidPraiseNum;
    };
    inline bool operator==(const IdPraise&l, const IdPraise&r)
    {
        return l.sId == r.sId && l.iType == r.iType && l.lPraiseNum == r.lPraiseNum && l.sRid == r.sRid && l.lRidPraiseNum == r.lRidPraiseNum;
    }
    inline bool operator!=(const IdPraise&l, const IdPraise&r)
    {
        return !(l == r);
    }

    struct DefinitionAction : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DefinitionAction";
        }
        static string MD5()
        {
            return "c4d7e629c0ca65edfd0bf3b3fb53b7d1";
        }
        DefinitionAction()
        :action(0),actionOneApp(""),actionOneScheme(""),actionOneH5Url(""),actionOneLabel("")
        {
        }
        void resetDefautlt()
        {
            action = 0;
            actionOneApp = "";
            actionOneScheme = "";
            actionOneH5Url = "";
            actionOneLabel = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(action, 0);
            _os.write(actionOneApp, 1);
            _os.write(actionOneScheme, 2);
            _os.write(actionOneH5Url, 3);
            _os.write(actionOneLabel, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(action, 0, true);
            _is.read(actionOneApp, 1, false);
            _is.read(actionOneScheme, 2, false);
            _is.read(actionOneH5Url, 3, false);
            _is.read(actionOneLabel, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(action,"action");
            _ds.display(actionOneApp,"actionOneApp");
            _ds.display(actionOneScheme,"actionOneScheme");
            _ds.display(actionOneH5Url,"actionOneH5Url");
            _ds.display(actionOneLabel,"actionOneLabel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(action, true);
            _ds.displaySimple(actionOneApp, true);
            _ds.displaySimple(actionOneScheme, true);
            _ds.displaySimple(actionOneH5Url, true);
            _ds.displaySimple(actionOneLabel, false);
            return _os;
        }
    public:
        taf::Int32 action;
        std::string actionOneApp;
        std::string actionOneScheme;
        std::string actionOneH5Url;
        std::string actionOneLabel;
    };
    inline bool operator==(const DefinitionAction&l, const DefinitionAction&r)
    {
        return l.action == r.action && l.actionOneApp == r.actionOneApp && l.actionOneScheme == r.actionOneScheme && l.actionOneH5Url == r.actionOneH5Url && l.actionOneLabel == r.actionOneLabel;
    }
    inline bool operator!=(const DefinitionAction&l, const DefinitionAction&r)
    {
        return !(l == r);
    }

    struct SpecailActionOne : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SpecailActionOne";
        }
        static string MD5()
        {
            return "6cf1348cdd69f924109dd734bc911528";
        }
        SpecailActionOne()
        :actionAppForAndroid(""),actionAppForIOS(""),actionSchemeForAndroid(""),actionSchemeForIOS(""),actionH5Url(""),actionLabel("")
        {
        }
        void resetDefautlt()
        {
            actionAppForAndroid = "";
            actionAppForIOS = "";
            actionSchemeForAndroid = "";
            actionSchemeForIOS = "";
            actionH5Url = "";
            actionLabel = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actionAppForAndroid, 1);
            _os.write(actionAppForIOS, 2);
            _os.write(actionSchemeForAndroid, 3);
            _os.write(actionSchemeForIOS, 4);
            _os.write(actionH5Url, 5);
            _os.write(actionLabel, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actionAppForAndroid, 1, false);
            _is.read(actionAppForIOS, 2, false);
            _is.read(actionSchemeForAndroid, 3, false);
            _is.read(actionSchemeForIOS, 4, false);
            _is.read(actionH5Url, 5, false);
            _is.read(actionLabel, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actionAppForAndroid,"actionAppForAndroid");
            _ds.display(actionAppForIOS,"actionAppForIOS");
            _ds.display(actionSchemeForAndroid,"actionSchemeForAndroid");
            _ds.display(actionSchemeForIOS,"actionSchemeForIOS");
            _ds.display(actionH5Url,"actionH5Url");
            _ds.display(actionLabel,"actionLabel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actionAppForAndroid, true);
            _ds.displaySimple(actionAppForIOS, true);
            _ds.displaySimple(actionSchemeForAndroid, true);
            _ds.displaySimple(actionSchemeForIOS, true);
            _ds.displaySimple(actionH5Url, true);
            _ds.displaySimple(actionLabel, false);
            return _os;
        }
    public:
        std::string actionAppForAndroid;
        std::string actionAppForIOS;
        std::string actionSchemeForAndroid;
        std::string actionSchemeForIOS;
        std::string actionH5Url;
        std::string actionLabel;
    };
    inline bool operator==(const SpecailActionOne&l, const SpecailActionOne&r)
    {
        return l.actionAppForAndroid == r.actionAppForAndroid && l.actionAppForIOS == r.actionAppForIOS && l.actionSchemeForAndroid == r.actionSchemeForAndroid && l.actionSchemeForIOS == r.actionSchemeForIOS && l.actionH5Url == r.actionH5Url && l.actionLabel == r.actionLabel;
    }
    inline bool operator!=(const SpecailActionOne&l, const SpecailActionOne&r)
    {
        return !(l == r);
    }

    struct SpecailActionTwo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SpecailActionTwo";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        SpecailActionTwo()
        :payState(0)
        {
        }
        void resetDefautlt()
        {
            payState = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(payState, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(payState, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(payState,"payState");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(payState, false);
            return _os;
        }
    public:
        taf::Int32 payState;
    };
    inline bool operator==(const SpecailActionTwo&l, const SpecailActionTwo&r)
    {
        return l.payState == r.payState;
    }
    inline bool operator!=(const SpecailActionTwo&l, const SpecailActionTwo&r)
    {
        return !(l == r);
    }

    struct SpecialAction : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SpecialAction";
        }
        static string MD5()
        {
            return "1fae29d95fe1581d7b2ceb923576ca73";
        }
        SpecialAction()
        :actionType(0)
        {
        }
        void resetDefautlt()
        {
            actionType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actionType, 0);
            _os.write(actionOne, 1);
            _os.write(actionTwo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actionType, 0, true);
            _is.read(actionOne, 1, false);
            _is.read(actionTwo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actionType,"actionType");
            _ds.display(actionOne,"actionOne");
            _ds.display(actionTwo,"actionTwo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actionType, true);
            _ds.displaySimple(actionOne, true);
            _ds.displaySimple(actionTwo, false);
            return _os;
        }
    public:
        taf::Int32 actionType;
        jce::SpecailActionOne actionOne;
        jce::SpecailActionTwo actionTwo;
    };
    inline bool operator==(const SpecialAction&l, const SpecialAction&r)
    {
        return l.actionType == r.actionType && l.actionOne == r.actionOne && l.actionTwo == r.actionTwo;
    }
    inline bool operator!=(const SpecialAction&l, const SpecialAction&r)
    {
        return !(l == r);
    }

    struct CircleUploadImageUrl : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleUploadImageUrl";
        }
        static string MD5()
        {
            return "fc0d20c467aaededb02a55bbbb7836f0";
        }
        CircleUploadImageUrl()
        :playTime(0),url(""),waterFlagUrl(""),handWriteInfo(""),width(0),height(0),imgType(0),thumbUrl(""),businessType(0)
        {
        }
        void resetDefautlt()
        {
            playTime = 0;
            url = "";
            waterFlagUrl = "";
            handWriteInfo = "";
            width = 0;
            height = 0;
            imgType = 0;
            thumbUrl = "";
            businessType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(playTime, 0);
            _os.write(url, 1);
            _os.write(waterFlagUrl, 2);
            _os.write(handWriteInfo, 3);
            _os.write(width, 4);
            _os.write(height, 5);
            _os.write(imgType, 6);
            _os.write(thumbUrl, 7);
            _os.write(businessType, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(playTime, 0, true);
            _is.read(url, 1, true);
            _is.read(waterFlagUrl, 2, false);
            _is.read(handWriteInfo, 3, false);
            _is.read(width, 4, false);
            _is.read(height, 5, false);
            _is.read(imgType, 6, false);
            _is.read(thumbUrl, 7, false);
            _is.read(businessType, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(playTime,"playTime");
            _ds.display(url,"url");
            _ds.display(waterFlagUrl,"waterFlagUrl");
            _ds.display(handWriteInfo,"handWriteInfo");
            _ds.display(width,"width");
            _ds.display(height,"height");
            _ds.display(imgType,"imgType");
            _ds.display(thumbUrl,"thumbUrl");
            _ds.display(businessType,"businessType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(playTime, true);
            _ds.displaySimple(url, true);
            _ds.displaySimple(waterFlagUrl, true);
            _ds.displaySimple(handWriteInfo, true);
            _ds.displaySimple(width, true);
            _ds.displaySimple(height, true);
            _ds.displaySimple(imgType, true);
            _ds.displaySimple(thumbUrl, true);
            _ds.displaySimple(businessType, false);
            return _os;
        }
    public:
        taf::Int64 playTime;
        std::string url;
        std::string waterFlagUrl;
        std::string handWriteInfo;
        taf::Int32 width;
        taf::Int32 height;
        taf::Char imgType;
        std::string thumbUrl;
        taf::Int32 businessType;
    };
    inline bool operator==(const CircleUploadImageUrl&l, const CircleUploadImageUrl&r)
    {
        return l.playTime == r.playTime && l.url == r.url && l.waterFlagUrl == r.waterFlagUrl && l.handWriteInfo == r.handWriteInfo && l.width == r.width && l.height == r.height && l.imgType == r.imgType && l.thumbUrl == r.thumbUrl && l.businessType == r.businessType;
    }
    inline bool operator!=(const CircleUploadImageUrl&l, const CircleUploadImageUrl&r)
    {
        return !(l == r);
    }

    struct ChannelListPersonalizeData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelListPersonalizeData";
        }
        static string MD5()
        {
            return "38e3be6d1913e2cd2838326b057f038e";
        }
        ChannelListPersonalizeData()
        :createdTime(0),tips(""),seqKey("")
        {
        }
        void resetDefautlt()
        {
            createdTime = 0;
            tips = "";
            seqKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(list, 0);
            _os.write(createdTime, 1);
            _os.write(tips, 2);
            _os.write(seqKey, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(list, 0, false);
            _is.read(createdTime, 1, false);
            _is.read(tips, 2, false);
            _is.read(seqKey, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(list,"list");
            _ds.display(createdTime,"createdTime");
            _ds.display(tips,"tips");
            _ds.display(seqKey,"seqKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(list, true);
            _ds.displaySimple(createdTime, true);
            _ds.displaySimple(tips, true);
            _ds.displaySimple(seqKey, false);
            return _os;
        }
    public:
        vector<jce::ChannelListItem> list;
        taf::Int64 createdTime;
        std::string tips;
        std::string seqKey;
    };
    inline bool operator==(const ChannelListPersonalizeData&l, const ChannelListPersonalizeData&r)
    {
        return l.list == r.list && l.createdTime == r.createdTime && l.tips == r.tips && l.seqKey == r.seqKey;
    }
    inline bool operator!=(const ChannelListPersonalizeData&l, const ChannelListPersonalizeData&r)
    {
        return !(l == r);
    }

    struct Definition : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.Definition";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        Definition()
        :value(""),sName(""),lName("")
        {
        }
        void resetDefautlt()
        {
            value = "";
            sName = "";
            lName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(value, 0);
            _os.write(sName, 1);
            _os.write(lName, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(value, 0, true);
            _is.read(sName, 1, true);
            _is.read(lName, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(value,"value");
            _ds.display(sName,"sName");
            _ds.display(lName,"lName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(value, true);
            _ds.displaySimple(sName, true);
            _ds.displaySimple(lName, false);
            return _os;
        }
    public:
        std::string value;
        std::string sName;
        std::string lName;
    };
    inline bool operator==(const Definition&l, const Definition&r)
    {
        return l.value == r.value && l.sName == r.sName && l.lName == r.lName;
    }
    inline bool operator!=(const Definition&l, const Definition&r)
    {
        return !(l == r);
    }

    struct MarketAttentItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MarketAttentItem";
        }
        static string MD5()
        {
            return "57d3119bddcb35c305e8a07d152e047c";
        }
        MarketAttentItem()
        :attentKey(""),attentState(0)
        {
        }
        void resetDefautlt()
        {
            attentKey = "";
            attentState = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(attentKey, 0);
            _os.write(attentState, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(attentKey, 0, true);
            _is.read(attentState, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(attentKey,"attentKey");
            _ds.display(attentState,"attentState");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(attentKey, true);
            _ds.displaySimple(attentState, false);
            return _os;
        }
    public:
        std::string attentKey;
        taf::Char attentState;
    };
    inline bool operator==(const MarketAttentItem&l, const MarketAttentItem&r)
    {
        return l.attentKey == r.attentKey && l.attentState == r.attentState;
    }
    inline bool operator!=(const MarketAttentItem&l, const MarketAttentItem&r)
    {
        return !(l == r);
    }

    struct MarketingAttentPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MarketingAttentPoster";
        }
        static string MD5()
        {
            return "833f30777865fc094b93f6796fb8d1db";
        }
        MarketingAttentPoster()
        :type(0),line(""),startTime(0),endTime(0),uiType(0),activityId("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            line = "";
            startTime = 0;
            endTime = 0;
            uiType = 0;
            activityId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(type, 1);
            _os.write(line, 2);
            _os.write(startTime, 3);
            _os.write(endTime, 4);
            _os.write(attentItem, 5);
            _os.write(uiType, 6);
            _os.write(activityId, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(type, 1, false);
            _is.read(line, 2, false);
            _is.read(startTime, 3, false);
            _is.read(endTime, 4, false);
            _is.read(attentItem, 5, false);
            _is.read(uiType, 6, false);
            _is.read(activityId, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(type,"type");
            _ds.display(line,"line");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(attentItem,"attentItem");
            _ds.display(uiType,"uiType");
            _ds.display(activityId,"activityId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(line, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(activityId, false);
            return _os;
        }
    public:
        jce::Poster poster;
        taf::Int32 type;
        std::string line;
        taf::Int64 startTime;
        taf::Int64 endTime;
        jce::MarketAttentItem attentItem;
        taf::Int32 uiType;
        std::string activityId;
    };
    inline bool operator==(const MarketingAttentPoster&l, const MarketingAttentPoster&r)
    {
        return l.poster == r.poster && l.type == r.type && l.line == r.line && l.startTime == r.startTime && l.endTime == r.endTime && l.attentItem == r.attentItem && l.uiType == r.uiType && l.activityId == r.activityId;
    }
    inline bool operator!=(const MarketingAttentPoster&l, const MarketingAttentPoster&r)
    {
        return !(l == r);
    }

    struct SPChannelItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SPChannelItem";
        }
        static string MD5()
        {
            return "1ec5c0ce4392af6f7ce94496896e67d7";
        }
        SPChannelItem()
        :channelId(""),isHead(true)
        {
        }
        void resetDefautlt()
        {
            channelId = "";
            isHead = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(channelId, 0);
            _os.write(isHead, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(channelId, 0, true);
            _is.read(isHead, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(channelId,"channelId");
            _ds.display(isHead,"isHead");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(channelId, true);
            _ds.displaySimple(isHead, false);
            return _os;
        }
    public:
        std::string channelId;
        taf::Bool isHead;
    };
    inline bool operator==(const SPChannelItem&l, const SPChannelItem&r)
    {
        return l.channelId == r.channelId && l.isHead == r.isHead;
    }
    inline bool operator!=(const SPChannelItem&l, const SPChannelItem&r)
    {
        return !(l == r);
    }

    struct SearchSmartItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SearchSmartItem";
        }
        static string MD5()
        {
            return "6f7b99f3ec178575aec8b9f5f88df60c";
        }
        SearchSmartItem()
        :playBtn(""),clickReportKey("")
        {
        }
        void resetDefautlt()
        {
            playBtn = "";
            clickReportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(playBtn, 1);
            _os.write(action, 2);
            _os.write(lineTag, 3);
            _os.write(clickReportKey, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(playBtn, 1, false);
            _is.read(action, 2, false);
            _is.read(lineTag, 3, false);
            _is.read(clickReportKey, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(playBtn,"playBtn");
            _ds.display(action,"action");
            _ds.display(lineTag,"lineTag");
            _ds.display(clickReportKey,"clickReportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(playBtn, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(lineTag, true);
            _ds.displaySimple(clickReportKey, false);
            return _os;
        }
    public:
        jce::Poster poster;
        std::string playBtn;
        jce::Action action;
        vector<jce::IconTagText> lineTag;
        std::string clickReportKey;
    };
    inline bool operator==(const SearchSmartItem&l, const SearchSmartItem&r)
    {
        return l.poster == r.poster && l.playBtn == r.playBtn && l.action == r.action && l.lineTag == r.lineTag && l.clickReportKey == r.clickReportKey;
    }
    inline bool operator!=(const SearchSmartItem&l, const SearchSmartItem&r)
    {
        return !(l == r);
    }

    struct CircleLikeInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleLikeInfo";
        }
        static string MD5()
        {
            return "59bdc29cca5f9c963ac3830e3f1af3b0";
        }
        CircleLikeInfo()
        :likeId(""),time(0),dataKey("")
        {
        }
        void resetDefautlt()
        {
            likeId = "";
            time = 0;
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(likeId, 0);
            _os.write(userinfo, 1);
            _os.write(time, 2);
            _os.write(dataKey, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(likeId, 0, true);
            _is.read(userinfo, 1, true);
            _is.read(time, 2, false);
            _is.read(dataKey, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(likeId,"likeId");
            _ds.display(userinfo,"userinfo");
            _ds.display(time,"time");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(likeId, true);
            _ds.displaySimple(userinfo, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string likeId;
        jce::ActorInfo userinfo;
        taf::Int64 time;
        std::string dataKey;
    };
    inline bool operator==(const CircleLikeInfo&l, const CircleLikeInfo&r)
    {
        return l.likeId == r.likeId && l.userinfo == r.userinfo && l.time == r.time && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const CircleLikeInfo&l, const CircleLikeInfo&r)
    {
        return !(l == r);
    }

    struct ImgFaceArea : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ImgFaceArea";
        }
        static string MD5()
        {
            return "a0b53cb490ba790bf1c0bc3a68cfebd2";
        }
        ImgFaceArea()
        :xFloat(0),yFloat(0)
        {
        }
        void resetDefautlt()
        {
            xFloat = 0;
            yFloat = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(xFloat, 0);
            _os.write(yFloat, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(xFloat, 0, false);
            _is.read(yFloat, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(xFloat,"xFloat");
            _ds.display(yFloat,"yFloat");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(xFloat, true);
            _ds.displaySimple(yFloat, false);
            return _os;
        }
    public:
        taf::Float xFloat;
        taf::Float yFloat;
    };
    inline bool operator==(const ImgFaceArea&l, const ImgFaceArea&r)
    {
        return l.xFloat == r.xFloat && l.yFloat == r.yFloat;
    }
    inline bool operator!=(const ImgFaceArea&l, const ImgFaceArea&r)
    {
        return !(l == r);
    }

    struct CircleMsgImageUrl : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleMsgImageUrl";
        }
        static string MD5()
        {
            return "a329bfc5f854ef0495519263809635e0";
        }
        CircleMsgImageUrl()
        :url(""),thumbUrl(""),time(0),imgType(0),maskType(0),aspectRatio(0),businessType(0),dataKey("")
        {
        }
        void resetDefautlt()
        {
            url = "";
            thumbUrl = "";
            time = 0;
            imgType = 0;
            maskType = 0;
            aspectRatio = 0;
            businessType = 0;
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(url, 0);
            _os.write(thumbUrl, 1);
            _os.write(time, 2);
            _os.write(imgType, 3);
            _os.write(maskType, 4);
            _os.write(aspectRatio, 5);
            _os.write(faceArea, 6);
            _os.write(businessType, 7);
            _os.write(dataKey, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(url, 0, true);
            _is.read(thumbUrl, 1, false);
            _is.read(time, 2, false);
            _is.read(imgType, 3, false);
            _is.read(maskType, 4, false);
            _is.read(aspectRatio, 5, false);
            _is.read(faceArea, 6, false);
            _is.read(businessType, 7, false);
            _is.read(dataKey, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(url,"url");
            _ds.display(thumbUrl,"thumbUrl");
            _ds.display(time,"time");
            _ds.display(imgType,"imgType");
            _ds.display(maskType,"maskType");
            _ds.display(aspectRatio,"aspectRatio");
            _ds.display(faceArea,"faceArea");
            _ds.display(businessType,"businessType");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(url, true);
            _ds.displaySimple(thumbUrl, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(imgType, true);
            _ds.displaySimple(maskType, true);
            _ds.displaySimple(aspectRatio, true);
            _ds.displaySimple(faceArea, true);
            _ds.displaySimple(businessType, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string url;
        std::string thumbUrl;
        taf::Int64 time;
        taf::Char imgType;
        taf::Char maskType;
        taf::Float aspectRatio;
        jce::ImgFaceArea faceArea;
        taf::Int32 businessType;
        std::string dataKey;
    };
    inline bool operator==(const CircleMsgImageUrl&l, const CircleMsgImageUrl&r)
    {
        return l.url == r.url && l.thumbUrl == r.thumbUrl && l.time == r.time && l.imgType == r.imgType && l.maskType == r.maskType && l.aspectRatio == r.aspectRatio && l.faceArea == r.faceArea && l.businessType == r.businessType && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const CircleMsgImageUrl&l, const CircleMsgImageUrl&r)
    {
        return !(l == r);
    }

    struct CircleCommentFeed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleCommentFeed";
        }
        static string MD5()
        {
            return "bd75399e1c602b3a9e925e45a2d6ad50";
        }
        CircleCommentFeed()
        :feedId(""),content(""),time(0),parentCommentId(""),seq(""),dataKey(""),commentCount(0),likeCount(0),isLike(false),displayLevel(0),additionalStyle(0),hasMoreComments(false),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            content = "";
            time = 0;
            parentCommentId = "";
            seq = "";
            dataKey = "";
            commentCount = 0;
            likeCount = 0;
            isLike = false;
            displayLevel = 0;
            additionalStyle = 0;
            hasMoreComments = false;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(content, 1);
            _os.write(time, 2);
            _os.write(userInfo, 3);
            _os.write(parentUserInfo, 4);
            _os.write(parentCommentId, 5);
            _os.write(seq, 6);
            _os.write(dataKey, 7);
            _os.write(commentCount, 8);
            _os.write(likeCount, 9);
            _os.write(photos, 10);
            _os.write(action, 11);
            _os.write(isLike, 12);
            _os.write(displayLevel, 13);
            _os.write(additionalStyle, 14);
            _os.write(hasMoreComments, 15);
            _os.write(reportKey, 16);
            _os.write(reportParams, 17);
            _os.write(extraInfo, 18);
            _os.write(voiceData, 19);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(content, 1, true);
            _is.read(time, 2, true);
            _is.read(userInfo, 3, true);
            _is.read(parentUserInfo, 4, false);
            _is.read(parentCommentId, 5, false);
            _is.read(seq, 6, false);
            _is.read(dataKey, 7, false);
            _is.read(commentCount, 8, false);
            _is.read(likeCount, 9, false);
            _is.read(photos, 10, false);
            _is.read(action, 11, false);
            _is.read(isLike, 12, false);
            _is.read(displayLevel, 13, false);
            _is.read(additionalStyle, 14, false);
            _is.read(hasMoreComments, 15, false);
            _is.read(reportKey, 16, false);
            _is.read(reportParams, 17, false);
            _is.read(extraInfo, 18, false);
            _is.read(voiceData, 19, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(content,"content");
            _ds.display(time,"time");
            _ds.display(userInfo,"userInfo");
            _ds.display(parentUserInfo,"parentUserInfo");
            _ds.display(parentCommentId,"parentCommentId");
            _ds.display(seq,"seq");
            _ds.display(dataKey,"dataKey");
            _ds.display(commentCount,"commentCount");
            _ds.display(likeCount,"likeCount");
            _ds.display(photos,"photos");
            _ds.display(action,"action");
            _ds.display(isLike,"isLike");
            _ds.display(displayLevel,"displayLevel");
            _ds.display(additionalStyle,"additionalStyle");
            _ds.display(hasMoreComments,"hasMoreComments");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(extraInfo,"extraInfo");
            _ds.display(voiceData,"voiceData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(parentUserInfo, true);
            _ds.displaySimple(parentCommentId, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(commentCount, true);
            _ds.displaySimple(likeCount, true);
            _ds.displaySimple(photos, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(isLike, true);
            _ds.displaySimple(displayLevel, true);
            _ds.displaySimple(additionalStyle, true);
            _ds.displaySimple(hasMoreComments, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(extraInfo, true);
            _ds.displaySimple(voiceData, false);
            return _os;
        }
    public:
        std::string feedId;
        std::string content;
        taf::Int64 time;
        jce::ActorInfo userInfo;
        jce::ActorInfo parentUserInfo;
        std::string parentCommentId;
        std::string seq;
        std::string dataKey;
        taf::Int64 commentCount;
        taf::Int64 likeCount;
        vector<jce::CircleMsgImageUrl> photos;
        jce::Action action;
        taf::Bool isLike;
        taf::Int32 displayLevel;
        taf::Int32 additionalStyle;
        taf::Bool hasMoreComments;
        std::string reportKey;
        std::string reportParams;
        map<std::string, std::string> extraInfo;
        jce::ApolloVoiceData voiceData;
    };
    inline bool operator==(const CircleCommentFeed&l, const CircleCommentFeed&r)
    {
        return l.feedId == r.feedId && l.content == r.content && l.time == r.time && l.userInfo == r.userInfo && l.parentUserInfo == r.parentUserInfo && l.parentCommentId == r.parentCommentId && l.seq == r.seq && l.dataKey == r.dataKey && l.commentCount == r.commentCount && l.likeCount == r.likeCount && l.photos == r.photos && l.action == r.action && l.isLike == r.isLike && l.displayLevel == r.displayLevel && l.additionalStyle == r.additionalStyle && l.hasMoreComments == r.hasMoreComments && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.extraInfo == r.extraInfo && l.voiceData == r.voiceData;
    }
    inline bool operator!=(const CircleCommentFeed&l, const CircleCommentFeed&r)
    {
        return !(l == r);
    }

    struct PosterList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PosterList";
        }
        static string MD5()
        {
            return "28b9edfd4f4ecf96a132b2a97ca30960";
        }
        PosterList()
        :uiTag(0),title(""),pageContext(""),groupKey("")
        {
        }
        void resetDefautlt()
        {
            uiTag = 0;
            title = "";
            pageContext = "";
            groupKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiTag, 0);
            _os.write(posters, 1);
            _os.write(title, 2);
            _os.write(pageContext, 3);
            _os.write(groupKey, 4);
            _os.write(groupAction, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiTag, 0, true);
            _is.read(posters, 1, true);
            _is.read(title, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(groupKey, 4, false);
            _is.read(groupAction, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiTag,"uiTag");
            _ds.display(posters,"posters");
            _ds.display(title,"title");
            _ds.display(pageContext,"pageContext");
            _ds.display(groupKey,"groupKey");
            _ds.display(groupAction,"groupAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiTag, true);
            _ds.displaySimple(posters, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(groupKey, true);
            _ds.displaySimple(groupAction, false);
            return _os;
        }
    public:
        taf::Int32 uiTag;
        vector<jce::Poster> posters;
        std::string title;
        std::string pageContext;
        std::string groupKey;
        jce::Action groupAction;
    };
    inline bool operator==(const PosterList&l, const PosterList&r)
    {
        return l.uiTag == r.uiTag && l.posters == r.posters && l.title == r.title && l.pageContext == r.pageContext && l.groupKey == r.groupKey && l.groupAction == r.groupAction;
    }
    inline bool operator!=(const PosterList&l, const PosterList&r)
    {
        return !(l == r);
    }

    struct SearchHotWordInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SearchHotWordInfo";
        }
        static string MD5()
        {
            return "2a8a2905e1df462e0c35cb9b768865f0";
        }
        SearchHotWordInfo()
        :timeStamp("")
        {
        }
        void resetDefautlt()
        {
            timeStamp = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(timeStamp, 0);
            _os.write(searchOperateHotWordList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(timeStamp, 0, true);
            _is.read(searchOperateHotWordList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(timeStamp,"timeStamp");
            _ds.display(searchOperateHotWordList,"searchOperateHotWordList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(timeStamp, true);
            _ds.displaySimple(searchOperateHotWordList, false);
            return _os;
        }
    public:
        std::string timeStamp;
        vector<jce::IconTagText> searchOperateHotWordList;
    };
    inline bool operator==(const SearchHotWordInfo&l, const SearchHotWordInfo&r)
    {
        return l.timeStamp == r.timeStamp && l.searchOperateHotWordList == r.searchOperateHotWordList;
    }
    inline bool operator!=(const SearchHotWordInfo&l, const SearchHotWordInfo&r)
    {
        return !(l == r);
    }

    struct ScoreListItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ScoreListItem";
        }
        static string MD5()
        {
            return "3452482a27a5a06af516e7bbf0930626";
        }
        ScoreListItem()
        :rankId(0),rankBgImgUrl(""),rankTitle(""),medalBgImgUrl(""),medalNums(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            rankId = 0;
            rankBgImgUrl = "";
            rankTitle = "";
            medalBgImgUrl = "";
            medalNums = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(rankId, 0);
            _os.write(rankBgImgUrl, 1);
            _os.write(rankTitle, 2);
            _os.write(medalBgImgUrl, 3);
            _os.write(medalNums, 4);
            _os.write(reportKey, 5);
            _os.write(reportParams, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(rankId, 0, true);
            _is.read(rankBgImgUrl, 1, true);
            _is.read(rankTitle, 2, true);
            _is.read(medalBgImgUrl, 3, true);
            _is.read(medalNums, 4, true);
            _is.read(reportKey, 5, false);
            _is.read(reportParams, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(rankId,"rankId");
            _ds.display(rankBgImgUrl,"rankBgImgUrl");
            _ds.display(rankTitle,"rankTitle");
            _ds.display(medalBgImgUrl,"medalBgImgUrl");
            _ds.display(medalNums,"medalNums");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(rankId, true);
            _ds.displaySimple(rankBgImgUrl, true);
            _ds.displaySimple(rankTitle, true);
            _ds.displaySimple(medalBgImgUrl, true);
            _ds.displaySimple(medalNums, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 rankId;
        std::string rankBgImgUrl;
        std::string rankTitle;
        std::string medalBgImgUrl;
        taf::Int32 medalNums;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ScoreListItem&l, const ScoreListItem&r)
    {
        return l.rankId == r.rankId && l.rankBgImgUrl == r.rankBgImgUrl && l.rankTitle == r.rankTitle && l.medalBgImgUrl == r.medalBgImgUrl && l.medalNums == r.medalNums && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ScoreListItem&l, const ScoreListItem&r)
    {
        return !(l == r);
    }

    struct AttentActionBar : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AttentActionBar";
        }
        static string MD5()
        {
            return "9161e16b3f06029f7fb5ba466835145e";
        }
        AttentActionBar()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actionBar, 0);
            _os.write(attentItem, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actionBar, 0, true);
            _is.read(attentItem, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actionBar,"actionBar");
            _ds.display(attentItem,"attentItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actionBar, true);
            _ds.displaySimple(attentItem, false);
            return _os;
        }
    public:
        jce::ActionBarInfo actionBar;
        jce::VideoAttentItem attentItem;
    };
    inline bool operator==(const AttentActionBar&l, const AttentActionBar&r)
    {
        return l.actionBar == r.actionBar && l.attentItem == r.attentItem;
    }
    inline bool operator!=(const AttentActionBar&l, const AttentActionBar&r)
    {
        return !(l == r);
    }

    struct StarMeetInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarMeetInfo";
        }
        static string MD5()
        {
            return "622515325965b22e847683b244250791";
        }
        StarMeetInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(posterInfo, 0);
            _os.write(attentItem, 1);
            _os.write(actorInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(posterInfo, 0, false);
            _is.read(attentItem, 1, false);
            _is.read(actorInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(posterInfo,"posterInfo");
            _ds.display(attentItem,"attentItem");
            _ds.display(actorInfo,"actorInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(posterInfo, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(actorInfo, false);
            return _os;
        }
    public:
        jce::Poster posterInfo;
        jce::VideoAttentItem attentItem;
        jce::ActorInfo actorInfo;
    };
    inline bool operator==(const StarMeetInfo&l, const StarMeetInfo&r)
    {
        return l.posterInfo == r.posterInfo && l.attentItem == r.attentItem && l.actorInfo == r.actorInfo;
    }
    inline bool operator!=(const StarMeetInfo&l, const StarMeetInfo&r)
    {
        return !(l == r);
    }

    struct AgendaTime : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AgendaTime";
        }
        static string MD5()
        {
            return "e47b2ff87e29c9760e2260376fd25d71";
        }
        AgendaTime()
        :year(0),month(0),date(0),week(""),timepoint("")
        {
        }
        void resetDefautlt()
        {
            year = 0;
            month = 0;
            date = 0;
            week = "";
            timepoint = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(year, 0);
            _os.write(month, 1);
            _os.write(date, 2);
            _os.write(week, 3);
            _os.write(timepoint, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(year, 0, false);
            _is.read(month, 1, false);
            _is.read(date, 2, false);
            _is.read(week, 3, false);
            _is.read(timepoint, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(year,"year");
            _ds.display(month,"month");
            _ds.display(date,"date");
            _ds.display(week,"week");
            _ds.display(timepoint,"timepoint");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(year, true);
            _ds.displaySimple(month, true);
            _ds.displaySimple(date, true);
            _ds.displaySimple(week, true);
            _ds.displaySimple(timepoint, false);
            return _os;
        }
    public:
        taf::Int32 year;
        taf::Int32 month;
        taf::Int32 date;
        std::string week;
        std::string timepoint;
    };
    inline bool operator==(const AgendaTime&l, const AgendaTime&r)
    {
        return l.year == r.year && l.month == r.month && l.date == r.date && l.week == r.week && l.timepoint == r.timepoint;
    }
    inline bool operator!=(const AgendaTime&l, const AgendaTime&r)
    {
        return !(l == r);
    }

    struct StarTopicInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarTopicInfo";
        }
        static string MD5()
        {
            return "bf545f91f3f0ffad2980cc12e5b18bf6";
        }
        StarTopicInfo()
        :type(0),reportKey(""),reportParams(""),userImageUrl("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            reportKey = "";
            reportParams = "";
            userImageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(topic, 0);
            _os.write(type, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
            _os.write(userImageUrl, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(topic, 0, false);
            _is.read(type, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
            _is.read(userImageUrl, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(topic,"topic");
            _ds.display(type,"type");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(userImageUrl,"userImageUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(topic, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(userImageUrl, false);
            return _os;
        }
    public:
        jce::ActionBarInfo topic;
        taf::Int32 type;
        std::string reportKey;
        std::string reportParams;
        std::string userImageUrl;
    };
    inline bool operator==(const StarTopicInfo&l, const StarTopicInfo&r)
    {
        return l.topic == r.topic && l.type == r.type && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.userImageUrl == r.userImageUrl;
    }
    inline bool operator!=(const StarTopicInfo&l, const StarTopicInfo&r)
    {
        return !(l == r);
    }

    struct VideoBaseParams : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoBaseParams";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        VideoBaseParams()
        :lid(""),cid(""),vid("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, false);
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
    };
    inline bool operator==(const VideoBaseParams&l, const VideoBaseParams&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid;
    }
    inline bool operator!=(const VideoBaseParams&l, const VideoBaseParams&r)
    {
        return !(l == r);
    }

    struct HomeTabData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.HomeTabData";
        }
        static string MD5()
        {
            return "98079ed83c43e06203107284aa61bf12";
        }
        HomeTabData()
        :pageType(0),requestType(0),tabName(""),unSelectIcon(""),selectIcon(""),dataKey(""),selectColor(""),unSelectColor(""),lottieUrl("")
        {
        }
        void resetDefautlt()
        {
            pageType = 0;
            requestType = 0;
            tabName = "";
            unSelectIcon = "";
            selectIcon = "";
            dataKey = "";
            selectColor = "";
            unSelectColor = "";
            lottieUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageType, 0);
            _os.write(requestType, 1);
            _os.write(tabName, 2);
            _os.write(unSelectIcon, 3);
            _os.write(selectIcon, 4);
            _os.write(dataKey, 5);
            _os.write(selectColor, 6);
            _os.write(unSelectColor, 7);
            _os.write(lottieUrl, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageType, 0, true);
            _is.read(requestType, 1, true);
            _is.read(tabName, 2, true);
            _is.read(unSelectIcon, 3, true);
            _is.read(selectIcon, 4, true);
            _is.read(dataKey, 5, false);
            _is.read(selectColor, 6, false);
            _is.read(unSelectColor, 7, false);
            _is.read(lottieUrl, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageType,"pageType");
            _ds.display(requestType,"requestType");
            _ds.display(tabName,"tabName");
            _ds.display(unSelectIcon,"unSelectIcon");
            _ds.display(selectIcon,"selectIcon");
            _ds.display(dataKey,"dataKey");
            _ds.display(selectColor,"selectColor");
            _ds.display(unSelectColor,"unSelectColor");
            _ds.display(lottieUrl,"lottieUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageType, true);
            _ds.displaySimple(requestType, true);
            _ds.displaySimple(tabName, true);
            _ds.displaySimple(unSelectIcon, true);
            _ds.displaySimple(selectIcon, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(selectColor, true);
            _ds.displaySimple(unSelectColor, true);
            _ds.displaySimple(lottieUrl, false);
            return _os;
        }
    public:
        taf::Int32 pageType;
        taf::Int32 requestType;
        std::string tabName;
        std::string unSelectIcon;
        std::string selectIcon;
        std::string dataKey;
        std::string selectColor;
        std::string unSelectColor;
        std::string lottieUrl;
    };
    inline bool operator==(const HomeTabData&l, const HomeTabData&r)
    {
        return l.pageType == r.pageType && l.requestType == r.requestType && l.tabName == r.tabName && l.unSelectIcon == r.unSelectIcon && l.selectIcon == r.selectIcon && l.dataKey == r.dataKey && l.selectColor == r.selectColor && l.unSelectColor == r.unSelectColor && l.lottieUrl == r.lottieUrl;
    }
    inline bool operator!=(const HomeTabData&l, const HomeTabData&r)
    {
        return !(l == r);
    }

    struct MarkScore : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MarkScore";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        MarkScore()
        :score(""),scoreWording("")
        {
        }
        void resetDefautlt()
        {
            score = "";
            scoreWording = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(score, 0);
            _os.write(scoreWording, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(score, 0, true);
            _is.read(scoreWording, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(score,"score");
            _ds.display(scoreWording,"scoreWording");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(score, true);
            _ds.displaySimple(scoreWording, false);
            return _os;
        }
    public:
        std::string score;
        std::string scoreWording;
    };
    inline bool operator==(const MarkScore&l, const MarkScore&r)
    {
        return l.score == r.score && l.scoreWording == r.scoreWording;
    }
    inline bool operator!=(const MarkScore&l, const MarkScore&r)
    {
        return !(l == r);
    }

    struct CommentNoticeContent : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommentNoticeContent";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        CommentNoticeContent()
        :text(""),headUrl(""),nickName("")
        {
        }
        void resetDefautlt()
        {
            text = "";
            headUrl = "";
            nickName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(text, 0);
            _os.write(headUrl, 1);
            _os.write(nickName, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(text, 0, false);
            _is.read(headUrl, 1, false);
            _is.read(nickName, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(text,"text");
            _ds.display(headUrl,"headUrl");
            _ds.display(nickName,"nickName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(text, true);
            _ds.displaySimple(headUrl, true);
            _ds.displaySimple(nickName, false);
            return _os;
        }
    public:
        std::string text;
        std::string headUrl;
        std::string nickName;
    };
    inline bool operator==(const CommentNoticeContent&l, const CommentNoticeContent&r)
    {
        return l.text == r.text && l.headUrl == r.headUrl && l.nickName == r.nickName;
    }
    inline bool operator!=(const CommentNoticeContent&l, const CommentNoticeContent&r)
    {
        return !(l == r);
    }

    struct CommentNoticeItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommentNoticeItem";
        }
        static string MD5()
        {
            return "7929ef490d680d56918a84626ac27d3e";
        }
        CommentNoticeItem()
        :type(0),id(""),index(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
            id = "";
            index = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(id, 1);
            _os.write(index, 2);
            _os.write(content, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(id, 1, false);
            _is.read(index, 2, false);
            _is.read(content, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(id,"id");
            _ds.display(index,"index");
            _ds.display(content,"content");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(id, true);
            _ds.displaySimple(index, true);
            _ds.displaySimple(content, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string id;
        taf::Int64 index;
        jce::CommentNoticeContent content;
    };
    inline bool operator==(const CommentNoticeItem&l, const CommentNoticeItem&r)
    {
        return l.type == r.type && l.id == r.id && l.index == r.index && l.content == r.content;
    }
    inline bool operator!=(const CommentNoticeItem&l, const CommentNoticeItem&r)
    {
        return !(l == r);
    }

    struct FeedVoteInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedVoteInfo";
        }
        static string MD5()
        {
            return "1d9993b86cf1d33f9afac7dbd0b14039";
        }
        FeedVoteInfo()
        :title(""),subTitle(""),voteId(""),imageUrl(""),reportKey(""),reportParams(""),voteType(0)
        {
        }
        void resetDefautlt()
        {
            title = "";
            subTitle = "";
            voteId = "";
            imageUrl = "";
            reportKey = "";
            reportParams = "";
            voteType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(subTitle, 1);
            _os.write(action, 2);
            _os.write(voteId, 3);
            _os.write(imageUrl, 4);
            _os.write(reportKey, 5);
            _os.write(reportParams, 6);
            _os.write(voteType, 7);
            _os.write(voteItemInfos, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(subTitle, 1, false);
            _is.read(action, 2, false);
            _is.read(voteId, 3, false);
            _is.read(imageUrl, 4, false);
            _is.read(reportKey, 5, false);
            _is.read(reportParams, 6, false);
            _is.read(voteType, 7, false);
            _is.read(voteItemInfos, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(action,"action");
            _ds.display(voteId,"voteId");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(voteType,"voteType");
            _ds.display(voteItemInfos,"voteItemInfos");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(voteId, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(voteType, true);
            _ds.displaySimple(voteItemInfos, false);
            return _os;
        }
    public:
        std::string title;
        std::string subTitle;
        jce::Action action;
        std::string voteId;
        std::string imageUrl;
        std::string reportKey;
        std::string reportParams;
        taf::Int32 voteType;
        vector<jce::SimplePoster> voteItemInfos;
    };
    inline bool operator==(const FeedVoteInfo&l, const FeedVoteInfo&r)
    {
        return l.title == r.title && l.subTitle == r.subTitle && l.action == r.action && l.voteId == r.voteId && l.imageUrl == r.imageUrl && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.voteType == r.voteType && l.voteItemInfos == r.voteItemInfos;
    }
    inline bool operator!=(const FeedVoteInfo&l, const FeedVoteInfo&r)
    {
        return !(l == r);
    }

    struct FeedInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedInfo";
        }
        static string MD5()
        {
            return "be1724f1191c23ad71dc2f26c34bf14f";
        }
        FeedInfo()
        :feedId(""),feedType(0),commentCount(0),likeCount(0),isLike(0)
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            feedType = 0;
            commentCount = 0;
            likeCount = 0;
            isLike = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(feedType, 1);
            _os.write(commentCount, 2);
            _os.write(likeCount, 3);
            _os.write(isLike, 4);
            _os.write(action, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(feedType, 1, true);
            _is.read(commentCount, 2, false);
            _is.read(likeCount, 3, false);
            _is.read(isLike, 4, false);
            _is.read(action, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(feedType,"feedType");
            _ds.display(commentCount,"commentCount");
            _ds.display(likeCount,"likeCount");
            _ds.display(isLike,"isLike");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(feedType, true);
            _ds.displaySimple(commentCount, true);
            _ds.displaySimple(likeCount, true);
            _ds.displaySimple(isLike, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string feedId;
        taf::Int32 feedType;
        taf::Int32 commentCount;
        taf::Int32 likeCount;
        taf::Char isLike;
        jce::Action action;
    };
    inline bool operator==(const FeedInfo&l, const FeedInfo&r)
    {
        return l.feedId == r.feedId && l.feedType == r.feedType && l.commentCount == r.commentCount && l.likeCount == r.likeCount && l.isLike == r.isLike && l.action == r.action;
    }
    inline bool operator!=(const FeedInfo&l, const FeedInfo&r)
    {
        return !(l == r);
    }

    struct ExploreTag : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ExploreTag";
        }
        static string MD5()
        {
            return "a57f8da986bead0d2d4516c7a94ee89c";
        }
        ExploreTag()
        :type(0),tagName(""),dataKey(""),imgUrl(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            tagName = "";
            dataKey = "";
            imgUrl = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(tagName, 1);
            _os.write(dataKey, 2);
            _os.write(imgUrl, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(tagName, 1, true);
            _is.read(dataKey, 2, true);
            _is.read(imgUrl, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(tagName,"tagName");
            _ds.display(dataKey,"dataKey");
            _ds.display(imgUrl,"imgUrl");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(tagName, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(imgUrl, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string tagName;
        std::string dataKey;
        std::string imgUrl;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ExploreTag&l, const ExploreTag&r)
    {
        return l.type == r.type && l.tagName == r.tagName && l.dataKey == r.dataKey && l.imgUrl == r.imgUrl && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ExploreTag&l, const ExploreTag&r)
    {
        return !(l == r);
    }

    struct FrameRect : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FrameRect";
        }
        static string MD5()
        {
            return "d74b1b0f5c206e5a4fa86be60d297f43";
        }
        FrameRect()
        :width(0),height(0),pointX(0),pointY(0)
        {
        }
        void resetDefautlt()
        {
            width = 0;
            height = 0;
            pointX = 0;
            pointY = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(width, 0);
            _os.write(height, 1);
            _os.write(pointX, 2);
            _os.write(pointY, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(width, 0, false);
            _is.read(height, 1, false);
            _is.read(pointX, 2, false);
            _is.read(pointY, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(width,"width");
            _ds.display(height,"height");
            _ds.display(pointX,"pointX");
            _ds.display(pointY,"pointY");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(width, true);
            _ds.displaySimple(height, true);
            _ds.displaySimple(pointX, true);
            _ds.displaySimple(pointY, false);
            return _os;
        }
    public:
        taf::Int64 width;
        taf::Int64 height;
        taf::Int64 pointX;
        taf::Int64 pointY;
    };
    inline bool operator==(const FrameRect&l, const FrameRect&r)
    {
        return l.width == r.width && l.height == r.height && l.pointX == r.pointX && l.pointY == r.pointY;
    }
    inline bool operator!=(const FrameRect&l, const FrameRect&r)
    {
        return !(l == r);
    }

    struct FeedbackReason : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedbackReason";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        FeedbackReason()
        :reasonDataKey(""),reason(""),reportKey(""),reportParam(""),feedbackType("")
        {
        }
        void resetDefautlt()
        {
            reasonDataKey = "";
            reason = "";
            reportKey = "";
            reportParam = "";
            feedbackType = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(reasonDataKey, 0);
            _os.write(reason, 1);
            _os.write(reportKey, 2);
            _os.write(reportParam, 3);
            _os.write(feedbackType, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(reasonDataKey, 0, true);
            _is.read(reason, 1, true);
            _is.read(reportKey, 2, false);
            _is.read(reportParam, 3, false);
            _is.read(feedbackType, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(reasonDataKey,"reasonDataKey");
            _ds.display(reason,"reason");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParam,"reportParam");
            _ds.display(feedbackType,"feedbackType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(reasonDataKey, true);
            _ds.displaySimple(reason, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParam, true);
            _ds.displaySimple(feedbackType, false);
            return _os;
        }
    public:
        std::string reasonDataKey;
        std::string reason;
        std::string reportKey;
        std::string reportParam;
        std::string feedbackType;
    };
    inline bool operator==(const FeedbackReason&l, const FeedbackReason&r)
    {
        return l.reasonDataKey == r.reasonDataKey && l.reason == r.reason && l.reportKey == r.reportKey && l.reportParam == r.reportParam && l.feedbackType == r.feedbackType;
    }
    inline bool operator!=(const FeedbackReason&l, const FeedbackReason&r)
    {
        return !(l == r);
    }

    struct FeedbackBoard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedbackBoard";
        }
        static string MD5()
        {
            return "fc103f3613eaea18f634cdc261781e3b";
        }
        FeedbackBoard()
        :mainTitle(""),subTitle("")
        {
        }
        void resetDefautlt()
        {
            mainTitle = "";
            subTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(reasons, 0);
            _os.write(mainTitle, 1);
            _os.write(subTitle, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(reasons, 0, true);
            _is.read(mainTitle, 1, false);
            _is.read(subTitle, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(reasons,"reasons");
            _ds.display(mainTitle,"mainTitle");
            _ds.display(subTitle,"subTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(reasons, true);
            _ds.displaySimple(mainTitle, true);
            _ds.displaySimple(subTitle, false);
            return _os;
        }
    public:
        vector<jce::FeedbackReason> reasons;
        std::string mainTitle;
        std::string subTitle;
    };
    inline bool operator==(const FeedbackBoard&l, const FeedbackBoard&r)
    {
        return l.reasons == r.reasons && l.mainTitle == r.mainTitle && l.subTitle == r.subTitle;
    }
    inline bool operator!=(const FeedbackBoard&l, const FeedbackBoard&r)
    {
        return !(l == r);
    }

    struct CaptionInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CaptionInfo";
        }
        static string MD5()
        {
            return "46d109e6ccb6337022981ac6d12b3d57";
        }
        CaptionInfo()
        :captionId(""),captionTime(0),caption(""),status(0),captionDispearTime(0)
        {
        }
        void resetDefautlt()
        {
            captionId = "";
            captionTime = 0;
            caption = "";
            status = 0;
            captionDispearTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(captionId, 0);
            _os.write(captionTime, 1);
            _os.write(caption, 2);
            _os.write(status, 3);
            _os.write(captionDispearTime, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(captionId, 0, true);
            _is.read(captionTime, 1, true);
            _is.read(caption, 2, true);
            _is.read(status, 3, true);
            _is.read(captionDispearTime, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(captionId,"captionId");
            _ds.display(captionTime,"captionTime");
            _ds.display(caption,"caption");
            _ds.display(status,"status");
            _ds.display(captionDispearTime,"captionDispearTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(captionId, true);
            _ds.displaySimple(captionTime, true);
            _ds.displaySimple(caption, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(captionDispearTime, false);
            return _os;
        }
    public:
        std::string captionId;
        taf::Int64 captionTime;
        std::string caption;
        taf::Int32 status;
        taf::Int64 captionDispearTime;
    };
    inline bool operator==(const CaptionInfo&l, const CaptionInfo&r)
    {
        return l.captionId == r.captionId && l.captionTime == r.captionTime && l.caption == r.caption && l.status == r.status && l.captionDispearTime == r.captionDispearTime;
    }
    inline bool operator!=(const CaptionInfo&l, const CaptionInfo&r)
    {
        return !(l == r);
    }

    struct PresentGiftParam : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PresentGiftParam";
        }
        static string MD5()
        {
            return "8649d0ddd79d231b7162cef4edbcbd32";
        }
        PresentGiftParam()
        :propsDataKey(""),desc(""),unit("")
        {
        }
        void resetDefautlt()
        {
            propsDataKey = "";
            desc = "";
            unit = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(propsDataKey, 0);
            _os.write(shareItem, 1);
            _os.write(desc, 2);
            _os.write(unit, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(propsDataKey, 0, false);
            _is.read(shareItem, 1, false);
            _is.read(desc, 2, false);
            _is.read(unit, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(propsDataKey,"propsDataKey");
            _ds.display(shareItem,"shareItem");
            _ds.display(desc,"desc");
            _ds.display(unit,"unit");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(propsDataKey, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(desc, true);
            _ds.displaySimple(unit, false);
            return _os;
        }
    public:
        std::string propsDataKey;
        jce::ShareItem shareItem;
        std::string desc;
        std::string unit;
    };
    inline bool operator==(const PresentGiftParam&l, const PresentGiftParam&r)
    {
        return l.propsDataKey == r.propsDataKey && l.shareItem == r.shareItem && l.desc == r.desc && l.unit == r.unit;
    }
    inline bool operator!=(const PresentGiftParam&l, const PresentGiftParam&r)
    {
        return !(l == r);
    }

    struct FeedOMInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedOMInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        FeedOMInfo()
        :omArticleId(""),omArticleTitle("")
        {
        }
        void resetDefautlt()
        {
            omArticleId = "";
            omArticleTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(omArticleId, 0);
            _os.write(omArticleTitle, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(omArticleId, 0, false);
            _is.read(omArticleTitle, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(omArticleId,"omArticleId");
            _ds.display(omArticleTitle,"omArticleTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(omArticleId, true);
            _ds.displaySimple(omArticleTitle, false);
            return _os;
        }
    public:
        std::string omArticleId;
        std::string omArticleTitle;
    };
    inline bool operator==(const FeedOMInfo&l, const FeedOMInfo&r)
    {
        return l.omArticleId == r.omArticleId && l.omArticleTitle == r.omArticleTitle;
    }
    inline bool operator!=(const FeedOMInfo&l, const FeedOMInfo&r)
    {
        return !(l == r);
    }

    struct MultiLanguageInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MultiLanguageInfo";
        }
        static string MD5()
        {
            return "33590fa6629925593328ddb64c767ef1";
        }
        MultiLanguageInfo()
        :curLanguageId("")
        {
        }
        void resetDefautlt()
        {
            curLanguageId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(curLanguageId, 0);
            _os.write(allLanguages, 1);
            _os.write(languageSwitchInfos, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(curLanguageId, 0, false);
            _is.read(allLanguages, 1, false);
            _is.read(languageSwitchInfos, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(curLanguageId,"curLanguageId");
            _ds.display(allLanguages,"allLanguages");
            _ds.display(languageSwitchInfos,"languageSwitchInfos");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(curLanguageId, true);
            _ds.displaySimple(allLanguages, true);
            _ds.displaySimple(languageSwitchInfos, false);
            return _os;
        }
    public:
        std::string curLanguageId;
        vector<jce::LanguageInfo> allLanguages;
        vector<jce::LanguageSwitchInfo> languageSwitchInfos;
    };
    inline bool operator==(const MultiLanguageInfo&l, const MultiLanguageInfo&r)
    {
        return l.curLanguageId == r.curLanguageId && l.allLanguages == r.allLanguages && l.languageSwitchInfos == r.languageSwitchInfos;
    }
    inline bool operator!=(const MultiLanguageInfo&l, const MultiLanguageInfo&r)
    {
        return !(l == r);
    }

    struct NavigationItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NavigationItem";
        }
        static string MD5()
        {
            return "f09a7b3fabcda55e777c54c16a362741";
        }
        NavigationItem()
        :title(""),dataKey(""),navigationItemType(jce::EnumNavigationItemVideo),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            dataKey = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(dataKey, 1);
            _os.write((taf::Int32)navigationItemType, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(dataKey, 1, true);
            taf::Int32 eTemp2 = jce::EnumNavigationItemVideo;
            _is.read(eTemp2, 2, true);
            navigationItemType = (jce::ENavigationItemType)eTemp2;
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(dataKey,"dataKey");
            _ds.display((taf::Int32)navigationItemType,"navigationItemType");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple((taf::Int32)navigationItemType, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string title;
        std::string dataKey;
        jce::ENavigationItemType navigationItemType;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const NavigationItem&l, const NavigationItem&r)
    {
        return l.title == r.title && l.dataKey == r.dataKey && l.navigationItemType == r.navigationItemType && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const NavigationItem&l, const NavigationItem&r)
    {
        return !(l == r);
    }

    struct Navigation : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.Navigation";
        }
        static string MD5()
        {
            return "9566e66243efe74e4cf6706a37369f29";
        }
        Navigation()
        :defaultDataKey("")
        {
        }
        void resetDefautlt()
        {
            defaultDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(navigationItemList, 0);
            _os.write(defaultDataKey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(navigationItemList, 0, false);
            _is.read(defaultDataKey, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(navigationItemList,"navigationItemList");
            _ds.display(defaultDataKey,"defaultDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(navigationItemList, true);
            _ds.displaySimple(defaultDataKey, false);
            return _os;
        }
    public:
        vector<jce::NavigationItem> navigationItemList;
        std::string defaultDataKey;
    };
    inline bool operator==(const Navigation&l, const Navigation&r)
    {
        return l.navigationItemList == r.navigationItemList && l.defaultDataKey == r.defaultDataKey;
    }
    inline bool operator!=(const Navigation&l, const Navigation&r)
    {
        return !(l == r);
    }

    struct VideoPosterInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoPosterInfo";
        }
        static string MD5()
        {
            return "8aef3711ca93f682d5e01ca071c1d888";
        }
        VideoPosterInfo()
        :dateString(""),imgUrl(""),videoTypeInfo(""),directorInfo(""),mainActorInfo(""),detailInfo(""),videoTitle("")
        {
        }
        void resetDefautlt()
        {
            dateString = "";
            imgUrl = "";
            videoTypeInfo = "";
            directorInfo = "";
            mainActorInfo = "";
            detailInfo = "";
            videoTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dateString, 0);
            _os.write(imgUrl, 1);
            _os.write(videoTypeInfo, 2);
            _os.write(directorInfo, 3);
            _os.write(mainActorInfo, 4);
            _os.write(detailInfo, 5);
            _os.write(videoTitle, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dateString, 0, false);
            _is.read(imgUrl, 1, false);
            _is.read(videoTypeInfo, 2, false);
            _is.read(directorInfo, 3, false);
            _is.read(mainActorInfo, 4, false);
            _is.read(detailInfo, 5, false);
            _is.read(videoTitle, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dateString,"dateString");
            _ds.display(imgUrl,"imgUrl");
            _ds.display(videoTypeInfo,"videoTypeInfo");
            _ds.display(directorInfo,"directorInfo");
            _ds.display(mainActorInfo,"mainActorInfo");
            _ds.display(detailInfo,"detailInfo");
            _ds.display(videoTitle,"videoTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dateString, true);
            _ds.displaySimple(imgUrl, true);
            _ds.displaySimple(videoTypeInfo, true);
            _ds.displaySimple(directorInfo, true);
            _ds.displaySimple(mainActorInfo, true);
            _ds.displaySimple(detailInfo, true);
            _ds.displaySimple(videoTitle, false);
            return _os;
        }
    public:
        std::string dateString;
        std::string imgUrl;
        std::string videoTypeInfo;
        std::string directorInfo;
        std::string mainActorInfo;
        std::string detailInfo;
        std::string videoTitle;
    };
    inline bool operator==(const VideoPosterInfo&l, const VideoPosterInfo&r)
    {
        return l.dateString == r.dateString && l.imgUrl == r.imgUrl && l.videoTypeInfo == r.videoTypeInfo && l.directorInfo == r.directorInfo && l.mainActorInfo == r.mainActorInfo && l.detailInfo == r.detailInfo && l.videoTitle == r.videoTitle;
    }
    inline bool operator!=(const VideoPosterInfo&l, const VideoPosterInfo&r)
    {
        return !(l == r);
    }

    struct DayVideoPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DayVideoPoster";
        }
        static string MD5()
        {
            return "e8362e2106b38fa303e35da66491c2b7";
        }
        DayVideoPoster()
        :reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(videoPosterInfo, 1);
            _os.write(reportParams, 2);
            _os.write(reportKey, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(videoPosterInfo, 1, true);
            _is.read(reportParams, 2, false);
            _is.read(reportKey, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(videoPosterInfo,"videoPosterInfo");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(videoPosterInfo, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        jce::Poster poster;
        jce::VideoPosterInfo videoPosterInfo;
        std::string reportParams;
        std::string reportKey;
    };
    inline bool operator==(const DayVideoPoster&l, const DayVideoPoster&r)
    {
        return l.poster == r.poster && l.videoPosterInfo == r.videoPosterInfo && l.reportParams == r.reportParams && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const DayVideoPoster&l, const DayVideoPoster&r)
    {
        return !(l == r);
    }

    struct DialogViewCopyWriting : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DialogViewCopyWriting";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        DialogViewCopyWriting()
        :title(""),content("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            content = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(content, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(content, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(content,"content");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(content, false);
            return _os;
        }
    public:
        std::string title;
        std::string content;
    };
    inline bool operator==(const DialogViewCopyWriting&l, const DialogViewCopyWriting&r)
    {
        return l.title == r.title && l.content == r.content;
    }
    inline bool operator!=(const DialogViewCopyWriting&l, const DialogViewCopyWriting&r)
    {
        return !(l == r);
    }

    struct ONASplitSpace : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASplitSpace";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        ONASplitSpace()
        :color(""),height(0)
        {
        }
        void resetDefautlt()
        {
            color = "";
            height = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(color, 0);
            _os.write(height, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(color, 0, false);
            _is.read(height, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(color,"color");
            _ds.display(height,"height");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(color, true);
            _ds.displaySimple(height, false);
            return _os;
        }
    public:
        std::string color;
        taf::Int32 height;
    };
    inline bool operator==(const ONASplitSpace&l, const ONASplitSpace&r)
    {
        return l.color == r.color && l.height == r.height;
    }
    inline bool operator!=(const ONASplitSpace&l, const ONASplitSpace&r)
    {
        return !(l == r);
    }

    struct PosterGroup : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PosterGroup";
        }
        static string MD5()
        {
            return "8e6437594eee25ca68e37202ed1f48ae";
        }
        PosterGroup()
        :groupIndex(0)
        {
        }
        void resetDefautlt()
        {
            groupIndex = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(posterList, 0);
            _os.write(groupIndex, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(posterList, 0, true);
            _is.read(groupIndex, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(posterList,"posterList");
            _ds.display(groupIndex,"groupIndex");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(posterList, true);
            _ds.displaySimple(groupIndex, false);
            return _os;
        }
    public:
        vector<jce::Poster> posterList;
        taf::Int32 groupIndex;
    };
    inline bool operator==(const PosterGroup&l, const PosterGroup&r)
    {
        return l.posterList == r.posterList && l.groupIndex == r.groupIndex;
    }
    inline bool operator!=(const PosterGroup&l, const PosterGroup&r)
    {
        return !(l == r);
    }

    struct ONAGalleryPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAGalleryPoster";
        }
        static string MD5()
        {
            return "86eabc404cffcf8b23594026810495e5";
        }
        ONAGalleryPoster()
        :uiType(0),bottomPadding(0)
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            bottomPadding = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(posterList, 0);
            _os.write(uiType, 1);
            _os.write(insertPosterGroup, 2);
            _os.write(bottomPadding, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(posterList, 0, true);
            _is.read(uiType, 1, false);
            _is.read(insertPosterGroup, 2, false);
            _is.read(bottomPadding, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(posterList,"posterList");
            _ds.display(uiType,"uiType");
            _ds.display(insertPosterGroup,"insertPosterGroup");
            _ds.display(bottomPadding,"bottomPadding");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(posterList, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(insertPosterGroup, true);
            _ds.displaySimple(bottomPadding, false);
            return _os;
        }
    public:
        vector<jce::Poster> posterList;
        taf::Char uiType;
        vector<jce::PosterGroup> insertPosterGroup;
        taf::Int32 bottomPadding;
    };
    inline bool operator==(const ONAGalleryPoster&l, const ONAGalleryPoster&r)
    {
        return l.posterList == r.posterList && l.uiType == r.uiType && l.insertPosterGroup == r.insertPosterGroup && l.bottomPadding == r.bottomPadding;
    }
    inline bool operator!=(const ONAGalleryPoster&l, const ONAGalleryPoster&r)
    {
        return !(l == r);
    }

    struct PickTaskItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PickTaskItem";
        }
        static string MD5()
        {
            return "8d61b639cda77ea57102c6b9cbb5aca2";
        }
        PickTaskItem()
        :dataKey(""),description(""),taskType(0)
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            description = "";
            taskType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(description, 1);
            _os.write(taskType, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(description, 1, false);
            _is.read(taskType, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(description,"description");
            _ds.display(taskType,"taskType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(description, true);
            _ds.displaySimple(taskType, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string description;
        taf::Int32 taskType;
    };
    inline bool operator==(const PickTaskItem&l, const PickTaskItem&r)
    {
        return l.dataKey == r.dataKey && l.description == r.description && l.taskType == r.taskType;
    }
    inline bool operator!=(const PickTaskItem&l, const PickTaskItem&r)
    {
        return !(l == r);
    }

    struct ImmersivePromotionInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ImmersivePromotionInfo";
        }
        static string MD5()
        {
            return "0431debc02bb2f0bf5f23df08d593808";
        }
        ImmersivePromotionInfo()
        :imageUrl(""),text(""),reportKey(""),reportParams(""),isPullGrowth(true),pullGrowthProtocolType(0)
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
            text = "";
            reportKey = "";
            reportParams = "";
            isPullGrowth = true;
            pullGrowthProtocolType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(text, 1);
            _os.write(appInfo, 2);
            _os.write(action, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
            _os.write(isPullGrowth, 6);
            _os.write(pullGrowthProtocolType, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, false);
            _is.read(text, 1, false);
            _is.read(appInfo, 2, false);
            _is.read(action, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
            _is.read(isPullGrowth, 6, false);
            _is.read(pullGrowthProtocolType, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(text,"text");
            _ds.display(appInfo,"appInfo");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(isPullGrowth,"isPullGrowth");
            _ds.display(pullGrowthProtocolType,"pullGrowthProtocolType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(text, true);
            _ds.displaySimple(appInfo, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(isPullGrowth, true);
            _ds.displaySimple(pullGrowthProtocolType, false);
            return _os;
        }
    public:
        std::string imageUrl;
        std::string text;
        jce::AppInfo appInfo;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
        taf::Bool isPullGrowth;
        taf::Int32 pullGrowthProtocolType;
    };
    inline bool operator==(const ImmersivePromotionInfo&l, const ImmersivePromotionInfo&r)
    {
        return l.imageUrl == r.imageUrl && l.text == r.text && l.appInfo == r.appInfo && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.isPullGrowth == r.isPullGrowth && l.pullGrowthProtocolType == r.pullGrowthProtocolType;
    }
    inline bool operator!=(const ImmersivePromotionInfo&l, const ImmersivePromotionInfo&r)
    {
        return !(l == r);
    }

    struct PickInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PickInfo";
        }
        static string MD5()
        {
            return "c4b9a3c23ed29e225899eaeccf88147d";
        }
        PickInfo()
        :dataKey(""),trackName(""),trackSubject(""),rank(0),totalPickCount(0),expandPullAppDesc(""),pickSwitch(0),reportKey(""),reportParams(""),needCertify(0)
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            trackName = "";
            trackSubject = "";
            rank = 0;
            totalPickCount = 0;
            expandPullAppDesc = "";
            pickSwitch = 0;
            reportKey = "";
            reportParams = "";
            needCertify = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(trackName, 1);
            _os.write(trackSubject, 2);
            _os.write(rank, 3);
            _os.write(totalPickCount, 4);
            _os.write(expandPullAppDesc, 5);
            _os.write(pickAppInfo, 6);
            _os.write(pickSwitch, 7);
            _os.write(reportKey, 8);
            _os.write(reportParams, 9);
            _os.write(needCertify, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(trackName, 1, false);
            _is.read(trackSubject, 2, false);
            _is.read(rank, 3, false);
            _is.read(totalPickCount, 4, false);
            _is.read(expandPullAppDesc, 5, false);
            _is.read(pickAppInfo, 6, false);
            _is.read(pickSwitch, 7, false);
            _is.read(reportKey, 8, false);
            _is.read(reportParams, 9, false);
            _is.read(needCertify, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(trackName,"trackName");
            _ds.display(trackSubject,"trackSubject");
            _ds.display(rank,"rank");
            _ds.display(totalPickCount,"totalPickCount");
            _ds.display(expandPullAppDesc,"expandPullAppDesc");
            _ds.display(pickAppInfo,"pickAppInfo");
            _ds.display(pickSwitch,"pickSwitch");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(needCertify,"needCertify");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(trackName, true);
            _ds.displaySimple(trackSubject, true);
            _ds.displaySimple(rank, true);
            _ds.displaySimple(totalPickCount, true);
            _ds.displaySimple(expandPullAppDesc, true);
            _ds.displaySimple(pickAppInfo, true);
            _ds.displaySimple(pickSwitch, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(needCertify, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string trackName;
        std::string trackSubject;
        taf::Int32 rank;
        taf::Int64 totalPickCount;
        std::string expandPullAppDesc;
        jce::ImmersivePromotionInfo pickAppInfo;
        taf::Char pickSwitch;
        std::string reportKey;
        std::string reportParams;
        taf::Char needCertify;
    };
    inline bool operator==(const PickInfo&l, const PickInfo&r)
    {
        return l.dataKey == r.dataKey && l.trackName == r.trackName && l.trackSubject == r.trackSubject && l.rank == r.rank && l.totalPickCount == r.totalPickCount && l.expandPullAppDesc == r.expandPullAppDesc && l.pickAppInfo == r.pickAppInfo && l.pickSwitch == r.pickSwitch && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.needCertify == r.needCertify;
    }
    inline bool operator!=(const PickInfo&l, const PickInfo&r)
    {
        return !(l == r);
    }

    struct ImmersiveInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ImmersiveInfo";
        }
        static string MD5()
        {
            return "8be7e1a104e4513e60e9f9c1617d4428";
        }
        ImmersiveInfo()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(action, 0);
            _os.write(type, 1);
            _os.write(userInfo, 2);
            _os.write(promotionInfo, 3);
            _os.write(floatPromotionInfo, 4);
            _os.write(pickInfo, 5);
            _os.write(immersiveAdInfo, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(action, 0, false);
            _is.read(type, 1, false);
            _is.read(userInfo, 2, false);
            _is.read(promotionInfo, 3, false);
            _is.read(floatPromotionInfo, 4, false);
            _is.read(pickInfo, 5, false);
            _is.read(immersiveAdInfo, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(action,"action");
            _ds.display(type,"type");
            _ds.display(userInfo,"userInfo");
            _ds.display(promotionInfo,"promotionInfo");
            _ds.display(floatPromotionInfo,"floatPromotionInfo");
            _ds.display(pickInfo,"pickInfo");
            _ds.display(immersiveAdInfo,"immersiveAdInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(action, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(promotionInfo, true);
            _ds.displaySimple(floatPromotionInfo, true);
            _ds.displaySimple(pickInfo, true);
            _ds.displaySimple(immersiveAdInfo, false);
            return _os;
        }
    public:
        jce::Action action;
        taf::Int32 type;
        jce::ActorInfo userInfo;
        jce::ImmersivePromotionInfo promotionInfo;
        jce::ImmersivePromotionInfo floatPromotionInfo;
        jce::PickInfo pickInfo;
        jce::ImmersiveAdInfo immersiveAdInfo;
    };
    inline bool operator==(const ImmersiveInfo&l, const ImmersiveInfo&r)
    {
        return l.action == r.action && l.type == r.type && l.userInfo == r.userInfo && l.promotionInfo == r.promotionInfo && l.floatPromotionInfo == r.floatPromotionInfo && l.pickInfo == r.pickInfo && l.immersiveAdInfo == r.immersiveAdInfo;
    }
    inline bool operator!=(const ImmersiveInfo&l, const ImmersiveInfo&r)
    {
        return !(l == r);
    }

    struct ONABulletinBoardV2 : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONABulletinBoardV2";
        }
        static string MD5()
        {
            return "8031c372de689ba33b2f9e37f91d1cf4";
        }
        ONABulletinBoardV2()
        :isAutoPlayer(true),isLiveVideo(true),pid(""),streamId(""),startTime(0),endTime(0),dislikeMark(true),uiStyle(0),feedbackDataKey(""),insertNewLineDataKey(""),feedbackType(""),insertNewLineProgress(0),isAutoPlayNext(false),isNeedShowFloatWindow(false),isContinuePlayOutOfWindow(false),cid(""),getALineDataKey(""),isLoopPlayBack(false),recommendReason(""),playEndType(0)
        {
        }
        void resetDefautlt()
        {
            isAutoPlayer = true;
            isLiveVideo = true;
            pid = "";
            streamId = "";
            startTime = 0;
            endTime = 0;
            dislikeMark = true;
            uiStyle = 0;
            feedbackDataKey = "";
            insertNewLineDataKey = "";
            feedbackType = "";
            insertNewLineProgress = 0;
            isAutoPlayNext = false;
            isNeedShowFloatWindow = false;
            isContinuePlayOutOfWindow = false;
            cid = "";
            getALineDataKey = "";
            isLoopPlayBack = false;
            recommendReason = "";
            playEndType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(tagTexts, 1);
            _os.write(action, 2);
            _os.write(attentItem, 3);
            _os.write(videoData, 4);
            _os.write(isAutoPlayer, 5);
            _os.write(isLiveVideo, 6);
            _os.write(pid, 7);
            _os.write(streamId, 8);
            _os.write(startTime, 9);
            _os.write(endTime, 10);
            _os.write(dislikeMark, 11);
            _os.write(dislikeOptionGroup, 12);
            _os.write(uiStyle, 13);
            _os.write(feedbackDataKey, 14);
            _os.write(insertNewLineDataKey, 15);
            _os.write(feedbackType, 16);
            _os.write(recommendList, 17);
            _os.write(insertNewLineProgress, 18);
            _os.write(liveExtra, 19);
            _os.write(isAutoPlayNext, 20);
            _os.write(commentTag, 21);
            _os.write(isNeedShowFloatWindow, 22);
            _os.write(isContinuePlayOutOfWindow, 23);
            _os.write(cid, 24);
            _os.write(feedbackBorad, 25);
            _os.write(getALineDataKey, 26);
            _os.write(isLoopPlayBack, 27);
            _os.write(vRSSItem, 28);
            _os.write(immersiveInfo, 29);
            _os.write(recommendReason, 30);
            _os.write(playEndType, 31);
            _os.write(recommendItem, 32);
            _os.write(immersiveAction, 33);
            _os.write(apkInfo, 34);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(tagTexts, 1, false);
            _is.read(action, 2, false);
            _is.read(attentItem, 3, false);
            _is.read(videoData, 4, false);
            _is.read(isAutoPlayer, 5, false);
            _is.read(isLiveVideo, 6, false);
            _is.read(pid, 7, false);
            _is.read(streamId, 8, false);
            _is.read(startTime, 9, false);
            _is.read(endTime, 10, false);
            _is.read(dislikeMark, 11, false);
            _is.read(dislikeOptionGroup, 12, false);
            _is.read(uiStyle, 13, false);
            _is.read(feedbackDataKey, 14, false);
            _is.read(insertNewLineDataKey, 15, false);
            _is.read(feedbackType, 16, false);
            _is.read(recommendList, 17, false);
            _is.read(insertNewLineProgress, 18, false);
            _is.read(liveExtra, 19, false);
            _is.read(isAutoPlayNext, 20, false);
            _is.read(commentTag, 21, false);
            _is.read(isNeedShowFloatWindow, 22, false);
            _is.read(isContinuePlayOutOfWindow, 23, false);
            _is.read(cid, 24, false);
            _is.read(feedbackBorad, 25, false);
            _is.read(getALineDataKey, 26, false);
            _is.read(isLoopPlayBack, 27, false);
            _is.read(vRSSItem, 28, false);
            _is.read(immersiveInfo, 29, false);
            _is.read(recommendReason, 30, false);
            _is.read(playEndType, 31, false);
            _is.read(recommendItem, 32, false);
            _is.read(immersiveAction, 33, false);
            _is.read(apkInfo, 34, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(tagTexts,"tagTexts");
            _ds.display(action,"action");
            _ds.display(attentItem,"attentItem");
            _ds.display(videoData,"videoData");
            _ds.display(isAutoPlayer,"isAutoPlayer");
            _ds.display(isLiveVideo,"isLiveVideo");
            _ds.display(pid,"pid");
            _ds.display(streamId,"streamId");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(dislikeMark,"dislikeMark");
            _ds.display(dislikeOptionGroup,"dislikeOptionGroup");
            _ds.display(uiStyle,"uiStyle");
            _ds.display(feedbackDataKey,"feedbackDataKey");
            _ds.display(insertNewLineDataKey,"insertNewLineDataKey");
            _ds.display(feedbackType,"feedbackType");
            _ds.display(recommendList,"recommendList");
            _ds.display(insertNewLineProgress,"insertNewLineProgress");
            _ds.display(liveExtra,"liveExtra");
            _ds.display(isAutoPlayNext,"isAutoPlayNext");
            _ds.display(commentTag,"commentTag");
            _ds.display(isNeedShowFloatWindow,"isNeedShowFloatWindow");
            _ds.display(isContinuePlayOutOfWindow,"isContinuePlayOutOfWindow");
            _ds.display(cid,"cid");
            _ds.display(feedbackBorad,"feedbackBorad");
            _ds.display(getALineDataKey,"getALineDataKey");
            _ds.display(isLoopPlayBack,"isLoopPlayBack");
            _ds.display(vRSSItem,"vRSSItem");
            _ds.display(immersiveInfo,"immersiveInfo");
            _ds.display(recommendReason,"recommendReason");
            _ds.display(playEndType,"playEndType");
            _ds.display(recommendItem,"recommendItem");
            _ds.display(immersiveAction,"immersiveAction");
            _ds.display(apkInfo,"apkInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(tagTexts, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(videoData, true);
            _ds.displaySimple(isAutoPlayer, true);
            _ds.displaySimple(isLiveVideo, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(streamId, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(dislikeMark, true);
            _ds.displaySimple(dislikeOptionGroup, true);
            _ds.displaySimple(uiStyle, true);
            _ds.displaySimple(feedbackDataKey, true);
            _ds.displaySimple(insertNewLineDataKey, true);
            _ds.displaySimple(feedbackType, true);
            _ds.displaySimple(recommendList, true);
            _ds.displaySimple(insertNewLineProgress, true);
            _ds.displaySimple(liveExtra, true);
            _ds.displaySimple(isAutoPlayNext, true);
            _ds.displaySimple(commentTag, true);
            _ds.displaySimple(isNeedShowFloatWindow, true);
            _ds.displaySimple(isContinuePlayOutOfWindow, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(feedbackBorad, true);
            _ds.displaySimple(getALineDataKey, true);
            _ds.displaySimple(isLoopPlayBack, true);
            _ds.displaySimple(vRSSItem, true);
            _ds.displaySimple(immersiveInfo, true);
            _ds.displaySimple(recommendReason, true);
            _ds.displaySimple(playEndType, true);
            _ds.displaySimple(recommendItem, true);
            _ds.displaySimple(immersiveAction, true);
            _ds.displaySimple(apkInfo, false);
            return _os;
        }
    public:
        jce::Poster poster;
        vector<jce::IconTagText> tagTexts;
        jce::Action action;
        jce::VideoAttentItem attentItem;
        jce::VideoItemData videoData;
        taf::Bool isAutoPlayer;
        taf::Bool isLiveVideo;
        std::string pid;
        std::string streamId;
        taf::Int64 startTime;
        taf::Int64 endTime;
        taf::Bool dislikeMark;
        jce::OptionGroup dislikeOptionGroup;
        taf::Int32 uiStyle;
        std::string feedbackDataKey;
        std::string insertNewLineDataKey;
        std::string feedbackType;
        vector<jce::Poster> recommendList;
        taf::Int32 insertNewLineProgress;
        jce::VideoItemExtra liveExtra;
        taf::Bool isAutoPlayNext;
        jce::IconTagText commentTag;
        taf::Bool isNeedShowFloatWindow;
        taf::Bool isContinuePlayOutOfWindow;
        std::string cid;
        jce::FeedbackBoard feedbackBorad;
        std::string getALineDataKey;
        taf::Bool isLoopPlayBack;
        jce::VRSSItem vRSSItem;
        jce::ImmersiveInfo immersiveInfo;
        std::string recommendReason;
        taf::Char playEndType;
        jce::RoundRecommentItem recommendItem;
        jce::Action immersiveAction;
        jce::AppInfo apkInfo;
    };
    inline bool operator==(const ONABulletinBoardV2&l, const ONABulletinBoardV2&r)
    {
        return l.poster == r.poster && l.tagTexts == r.tagTexts && l.action == r.action && l.attentItem == r.attentItem && l.videoData == r.videoData && l.isAutoPlayer == r.isAutoPlayer && l.isLiveVideo == r.isLiveVideo && l.pid == r.pid && l.streamId == r.streamId && l.startTime == r.startTime && l.endTime == r.endTime && l.dislikeMark == r.dislikeMark && l.dislikeOptionGroup == r.dislikeOptionGroup && l.uiStyle == r.uiStyle && l.feedbackDataKey == r.feedbackDataKey && l.insertNewLineDataKey == r.insertNewLineDataKey && l.feedbackType == r.feedbackType && l.recommendList == r.recommendList && l.insertNewLineProgress == r.insertNewLineProgress && l.liveExtra == r.liveExtra && l.isAutoPlayNext == r.isAutoPlayNext && l.commentTag == r.commentTag && l.isNeedShowFloatWindow == r.isNeedShowFloatWindow && l.isContinuePlayOutOfWindow == r.isContinuePlayOutOfWindow && l.cid == r.cid && l.feedbackBorad == r.feedbackBorad && l.getALineDataKey == r.getALineDataKey && l.isLoopPlayBack == r.isLoopPlayBack && l.vRSSItem == r.vRSSItem && l.immersiveInfo == r.immersiveInfo && l.recommendReason == r.recommendReason && l.playEndType == r.playEndType && l.recommendItem == r.recommendItem && l.immersiveAction == r.immersiveAction && l.apkInfo == r.apkInfo;
    }
    inline bool operator!=(const ONABulletinBoardV2&l, const ONABulletinBoardV2&r)
    {
        return !(l == r);
    }

    struct TopicHead : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TopicHead";
        }
        static string MD5()
        {
            return "a01388a48ba3cfb4d715cfbf546cc65d";
        }
        TopicHead()
        :imageUrl(""),secondLine(""),thirdLine(""),desc(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
            secondLine = "";
            thirdLine = "";
            desc = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(firstLine, 1);
            _os.write(secondLine, 2);
            _os.write(thirdLine, 3);
            _os.write(tagList, 4);
            _os.write(desc, 5);
            _os.write(reportKey, 6);
            _os.write(reportParams, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, false);
            _is.read(firstLine, 1, false);
            _is.read(secondLine, 2, false);
            _is.read(thirdLine, 3, false);
            _is.read(tagList, 4, false);
            _is.read(desc, 5, false);
            _is.read(reportKey, 6, false);
            _is.read(reportParams, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(firstLine,"firstLine");
            _ds.display(secondLine,"secondLine");
            _ds.display(thirdLine,"thirdLine");
            _ds.display(tagList,"tagList");
            _ds.display(desc,"desc");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(firstLine, true);
            _ds.displaySimple(secondLine, true);
            _ds.displaySimple(thirdLine, true);
            _ds.displaySimple(tagList, true);
            _ds.displaySimple(desc, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string imageUrl;
        jce::ActionBarInfo firstLine;
        std::string secondLine;
        std::string thirdLine;
        vector<jce::IconTagText> tagList;
        std::string desc;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const TopicHead&l, const TopicHead&r)
    {
        return l.imageUrl == r.imageUrl && l.firstLine == r.firstLine && l.secondLine == r.secondLine && l.thirdLine == r.thirdLine && l.tagList == r.tagList && l.desc == r.desc && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const TopicHead&l, const TopicHead&r)
    {
        return !(l == r);
    }

    struct TopicInfoLite : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TopicInfoLite";
        }
        static string MD5()
        {
            return "f4b83f59b5ebf8cb28ee72deb00d6916";
        }
        TopicInfoLite()
        :id(""),text(""),extraKey(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            id = "";
            text = "";
            extraKey = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(text, 1);
            _os.write(action, 2);
            _os.write(extraKey, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, true);
            _is.read(text, 1, true);
            _is.read(action, 2, false);
            _is.read(extraKey, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(text,"text");
            _ds.display(action,"action");
            _ds.display(extraKey,"extraKey");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(text, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(extraKey, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string id;
        std::string text;
        jce::Action action;
        std::string extraKey;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const TopicInfoLite&l, const TopicInfoLite&r)
    {
        return l.id == r.id && l.text == r.text && l.action == r.action && l.extraKey == r.extraKey && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const TopicInfoLite&l, const TopicInfoLite&r)
    {
        return !(l == r);
    }

    struct CirclePosterInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CirclePosterInfo";
        }
        static string MD5()
        {
            return "abcbcdb76fb1d3b3e7aa22335b98147e";
        }
        CirclePosterInfo()
        :Url(""),timestamp(0)
        {
        }
        void resetDefautlt()
        {
            Url = "";
            timestamp = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(Url, 0);
            _os.write(timestamp, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(Url, 0, false);
            _is.read(timestamp, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(Url,"Url");
            _ds.display(timestamp,"timestamp");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(Url, true);
            _ds.displaySimple(timestamp, false);
            return _os;
        }
    public:
        std::string Url;
        taf::UInt32 timestamp;
    };
    inline bool operator==(const CirclePosterInfo&l, const CirclePosterInfo&r)
    {
        return l.Url == r.Url && l.timestamp == r.timestamp;
    }
    inline bool operator!=(const CirclePosterInfo&l, const CirclePosterInfo&r)
    {
        return !(l == r);
    }

    struct MixedContent : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MixedContent";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        MixedContent()
        :htmlUrl("")
        {
        }
        void resetDefautlt()
        {
            htmlUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(htmlUrl, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(htmlUrl, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(htmlUrl,"htmlUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(htmlUrl, false);
            return _os;
        }
    public:
        std::string htmlUrl;
    };
    inline bool operator==(const MixedContent&l, const MixedContent&r)
    {
        return l.htmlUrl == r.htmlUrl;
    }
    inline bool operator!=(const MixedContent&l, const MixedContent&r)
    {
        return !(l == r);
    }

    struct FeedSource : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedSource";
        }
        static string MD5()
        {
            return "4e144b2efa717cf4c6476dfb40cd08cf";
        }
        FeedSource()
        :type(0),text(""),imageUrl("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            text = "";
            imageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(text, 1);
            _os.write(imageUrl, 2);
            _os.write(action, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(text, 1, false);
            _is.read(imageUrl, 2, false);
            _is.read(action, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(text,"text");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(text, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string text;
        std::string imageUrl;
        jce::Action action;
    };
    inline bool operator==(const FeedSource&l, const FeedSource&r)
    {
        return l.type == r.type && l.text == r.text && l.imageUrl == r.imageUrl && l.action == r.action;
    }
    inline bool operator!=(const FeedSource&l, const FeedSource&r)
    {
        return !(l == r);
    }

    struct MediaPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MediaPoster";
        }
        static string MD5()
        {
            return "df167e235726042ac6c7d83b8ae14406";
        }
        MediaPoster()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(actionBarList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, false);
            _is.read(actionBarList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(actionBarList,"actionBarList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(actionBarList, false);
            return _os;
        }
    public:
        jce::Poster poster;
        vector<jce::KVActionBarItem> actionBarList;
    };
    inline bool operator==(const MediaPoster&l, const MediaPoster&r)
    {
        return l.poster == r.poster && l.actionBarList == r.actionBarList;
    }
    inline bool operator!=(const MediaPoster&l, const MediaPoster&r)
    {
        return !(l == r);
    }

    struct ONAImageText : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAImageText";
        }
        static string MD5()
        {
            return "cd0b2164d2ff392e3250cc579277c378";
        }
        ONAImageText()
        :reportKey(""),reportParams(""),uiType(0),title("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            uiType = 0;
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(jumpInfo, 1);
            _os.write(action, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
            _os.write(uiType, 5);
            _os.write(title, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(jumpInfo, 1, false);
            _is.read(action, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
            _is.read(uiType, 5, false);
            _is.read(title, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(jumpInfo,"jumpInfo");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(uiType,"uiType");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(jumpInfo, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        jce::Poster poster;
        jce::ActionBarInfo jumpInfo;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
        taf::Int32 uiType;
        std::string title;
    };
    inline bool operator==(const ONAImageText&l, const ONAImageText&r)
    {
        return l.poster == r.poster && l.jumpInfo == r.jumpInfo && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.uiType == r.uiType && l.title == r.title;
    }
    inline bool operator!=(const ONAImageText&l, const ONAImageText&r)
    {
        return !(l == r);
    }

    struct MediaContentInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MediaContentInfo";
        }
        static string MD5()
        {
            return "de0aa797806f5b2171637551d3aa7af0";
        }
        MediaContentInfo()
        :text("")
        {
        }
        void resetDefautlt()
        {
            text = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(text, 0);
            _os.write(photos, 1);
            _os.write(videos, 2);
            _os.write(voices, 3);
            _os.write(action, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(text, 0, false);
            _is.read(photos, 1, false);
            _is.read(videos, 2, false);
            _is.read(voices, 3, false);
            _is.read(action, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(text,"text");
            _ds.display(photos,"photos");
            _ds.display(videos,"videos");
            _ds.display(voices,"voices");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(text, true);
            _ds.displaySimple(photos, true);
            _ds.displaySimple(videos, true);
            _ds.displaySimple(voices, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string text;
        vector<jce::CircleMsgImageUrl> photos;
        vector<jce::CircleShortVideoUrl> videos;
        vector<jce::ApolloVoiceData> voices;
        jce::Action action;
    };
    inline bool operator==(const MediaContentInfo&l, const MediaContentInfo&r)
    {
        return l.text == r.text && l.photos == r.photos && l.videos == r.videos && l.voices == r.voices && l.action == r.action;
    }
    inline bool operator!=(const MediaContentInfo&l, const MediaContentInfo&r)
    {
        return !(l == r);
    }

    struct DokiRankInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiRankInfo";
        }
        static string MD5()
        {
            return "7283f2d10be5ffa5bfb7084904e45fe0";
        }
        DokiRankInfo()
        :rankNum(""),rankStatus(0),description("")
        {
        }
        void resetDefautlt()
        {
            rankNum = "";
            rankStatus = 0;
            description = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(rankNum, 0);
            _os.write(rankStatus, 1);
            _os.write(description, 2);
            _os.write(actionBar, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(rankNum, 0, true);
            _is.read(rankStatus, 1, false);
            _is.read(description, 2, false);
            _is.read(actionBar, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(rankNum,"rankNum");
            _ds.display(rankStatus,"rankStatus");
            _ds.display(description,"description");
            _ds.display(actionBar,"actionBar");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(rankNum, true);
            _ds.displaySimple(rankStatus, true);
            _ds.displaySimple(description, true);
            _ds.displaySimple(actionBar, false);
            return _os;
        }
    public:
        std::string rankNum;
        taf::Char rankStatus;
        std::string description;
        jce::ActionBarInfo actionBar;
    };
    inline bool operator==(const DokiRankInfo&l, const DokiRankInfo&r)
    {
        return l.rankNum == r.rankNum && l.rankStatus == r.rankStatus && l.description == r.description && l.actionBar == r.actionBar;
    }
    inline bool operator!=(const DokiRankInfo&l, const DokiRankInfo&r)
    {
        return !(l == r);
    }

    struct RankBroadcastItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RankBroadcastItem";
        }
        static string MD5()
        {
            return "09e028b8f643f994d4ae325d58c32f3b";
        }
        RankBroadcastItem()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actor, 0);
            _os.write(rankInfo, 1);
            _os.write(actorBorderColors, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
            _os.write(actionBar, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actor, 0, true);
            _is.read(rankInfo, 1, true);
            _is.read(actorBorderColors, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
            _is.read(actionBar, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actor,"actor");
            _ds.display(rankInfo,"rankInfo");
            _ds.display(actorBorderColors,"actorBorderColors");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(actionBar,"actionBar");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actor, true);
            _ds.displaySimple(rankInfo, true);
            _ds.displaySimple(actorBorderColors, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(actionBar, false);
            return _os;
        }
    public:
        jce::ActorInfo actor;
        jce::DokiRankInfo rankInfo;
        vector<std::string> actorBorderColors;
        std::string reportKey;
        std::string reportParams;
        jce::ActionBarInfo actionBar;
    };
    inline bool operator==(const RankBroadcastItem&l, const RankBroadcastItem&r)
    {
        return l.actor == r.actor && l.rankInfo == r.rankInfo && l.actorBorderColors == r.actorBorderColors && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.actionBar == r.actionBar;
    }
    inline bool operator!=(const RankBroadcastItem&l, const RankBroadcastItem&r)
    {
        return !(l == r);
    }

    struct PrimaryFeedSpecialContent : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PrimaryFeedSpecialContent";
        }
        static string MD5()
        {
            return "3c5062db0ecabb056bc9a20159c015fa";
        }
        PrimaryFeedSpecialContent()
        :maxNum(0)
        {
        }
        void resetDefautlt()
        {
            maxNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(rankBroadcastList, 0);
            _os.write(maxNum, 1);
            _os.write(moreAction, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(rankBroadcastList, 0, false);
            _is.read(maxNum, 1, false);
            _is.read(moreAction, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(rankBroadcastList,"rankBroadcastList");
            _ds.display(maxNum,"maxNum");
            _ds.display(moreAction,"moreAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(rankBroadcastList, true);
            _ds.displaySimple(maxNum, true);
            _ds.displaySimple(moreAction, false);
            return _os;
        }
    public:
        vector<jce::RankBroadcastItem> rankBroadcastList;
        taf::Int32 maxNum;
        jce::Action moreAction;
    };
    inline bool operator==(const PrimaryFeedSpecialContent&l, const PrimaryFeedSpecialContent&r)
    {
        return l.rankBroadcastList == r.rankBroadcastList && l.maxNum == r.maxNum && l.moreAction == r.moreAction;
    }
    inline bool operator!=(const PrimaryFeedSpecialContent&l, const PrimaryFeedSpecialContent&r)
    {
        return !(l == r);
    }

    struct VerifyInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VerifyInfo";
        }
        static string MD5()
        {
            return "f391f1fd94f4822252067031d9c3a7ff";
        }
        VerifyInfo()
        :status(0),tipText(""),clickTipText("")
        {
        }
        void resetDefautlt()
        {
            status = 0;
            tipText = "";
            clickTipText = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
            _os.write(tipText, 1);
            _os.write(clickTipText, 2);
            _os.write(action, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, false);
            _is.read(tipText, 1, false);
            _is.read(clickTipText, 2, false);
            _is.read(action, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            _ds.display(tipText,"tipText");
            _ds.display(clickTipText,"clickTipText");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, true);
            _ds.displaySimple(tipText, true);
            _ds.displaySimple(clickTipText, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        taf::Char status;
        std::string tipText;
        std::string clickTipText;
        jce::Action action;
    };
    inline bool operator==(const VerifyInfo&l, const VerifyInfo&r)
    {
        return l.status == r.status && l.tipText == r.tipText && l.clickTipText == r.clickTipText && l.action == r.action;
    }
    inline bool operator!=(const VerifyInfo&l, const VerifyInfo&r)
    {
        return !(l == r);
    }

    struct MediaItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MediaItem";
        }
        static string MD5()
        {
            return "e1bb20c9c0d4d68d5ee12f9b5d7066d2";
        }
        MediaItem()
        :vid("")
        {
        }
        void resetDefautlt()
        {
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(poster, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, true);
            _is.read(poster, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(poster,"poster");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(poster, false);
            return _os;
        }
    public:
        std::string vid;
        jce::Poster poster;
    };
    inline bool operator==(const MediaItem&l, const MediaItem&r)
    {
        return l.vid == r.vid && l.poster == r.poster;
    }
    inline bool operator!=(const MediaItem&l, const MediaItem&r)
    {
        return !(l == r);
    }

    struct SelfTakeVideoInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SelfTakeVideoInfo";
        }
        static string MD5()
        {
            return "2f403771a6ea2bf1c8c6b0bb342e5751";
        }
        SelfTakeVideoInfo()
        :postDataKey("")
        {
        }
        void resetDefautlt()
        {
            postDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(coverPoster, 0);
            _os.write(gifPoster, 1);
            _os.write(videoData, 2);
            _os.write(mediaData, 3);
            _os.write(postDataKey, 4);
            _os.write(actionBarInfo, 5);
            _os.write(immersiveAction, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(coverPoster, 0, true);
            _is.read(gifPoster, 1, false);
            _is.read(videoData, 2, false);
            _is.read(mediaData, 3, false);
            _is.read(postDataKey, 4, false);
            _is.read(actionBarInfo, 5, false);
            _is.read(immersiveAction, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(coverPoster,"coverPoster");
            _ds.display(gifPoster,"gifPoster");
            _ds.display(videoData,"videoData");
            _ds.display(mediaData,"mediaData");
            _ds.display(postDataKey,"postDataKey");
            _ds.display(actionBarInfo,"actionBarInfo");
            _ds.display(immersiveAction,"immersiveAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(coverPoster, true);
            _ds.displaySimple(gifPoster, true);
            _ds.displaySimple(videoData, true);
            _ds.displaySimple(mediaData, true);
            _ds.displaySimple(postDataKey, true);
            _ds.displaySimple(actionBarInfo, true);
            _ds.displaySimple(immersiveAction, false);
            return _os;
        }
    public:
        jce::Poster coverPoster;
        jce::Poster gifPoster;
        jce::VideoItemData videoData;
        jce::MediaItem mediaData;
        std::string postDataKey;
        jce::ActionBarInfo actionBarInfo;
        jce::Action immersiveAction;
    };
    inline bool operator==(const SelfTakeVideoInfo&l, const SelfTakeVideoInfo&r)
    {
        return l.coverPoster == r.coverPoster && l.gifPoster == r.gifPoster && l.videoData == r.videoData && l.mediaData == r.mediaData && l.postDataKey == r.postDataKey && l.actionBarInfo == r.actionBarInfo && l.immersiveAction == r.immersiveAction;
    }
    inline bool operator!=(const SelfTakeVideoInfo&l, const SelfTakeVideoInfo&r)
    {
        return !(l == r);
    }

    struct SimpleFeedNode : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SimpleFeedNode";
        }
        static string MD5()
        {
            return "cf234cb1e2713300a6d8c6258c3b9e07";
        }
        SimpleFeedNode()
        :content(""),mediaType(0)
        {
        }
        void resetDefautlt()
        {
            content = "";
            mediaType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(userInfo, 0);
            _os.write(content, 1);
            _os.write(photos, 2);
            _os.write(action, 3);
            _os.write(mediaType, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(userInfo, 0, true);
            _is.read(content, 1, false);
            _is.read(photos, 2, false);
            _is.read(action, 3, false);
            _is.read(mediaType, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(userInfo,"userInfo");
            _ds.display(content,"content");
            _ds.display(photos,"photos");
            _ds.display(action,"action");
            _ds.display(mediaType,"mediaType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(photos, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(mediaType, false);
            return _os;
        }
    public:
        jce::ActorInfo userInfo;
        std::string content;
        vector<jce::CircleMsgImageUrl> photos;
        jce::Action action;
        taf::Int32 mediaType;
    };
    inline bool operator==(const SimpleFeedNode&l, const SimpleFeedNode&r)
    {
        return l.userInfo == r.userInfo && l.content == r.content && l.photos == r.photos && l.action == r.action && l.mediaType == r.mediaType;
    }
    inline bool operator!=(const SimpleFeedNode&l, const SimpleFeedNode&r)
    {
        return !(l == r);
    }

    struct DokiFeedCircleInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiFeedCircleInfo";
        }
        static string MD5()
        {
            return "47d877be2b27a575a8906fc6f7a714b1";
        }
        DokiFeedCircleInfo()
        :feedText(""),dokiName(""),exposureNum(0),fansNum(0),feedType(0),commentNum(0)
        {
        }
        void resetDefautlt()
        {
            feedText = "";
            dokiName = "";
            exposureNum = 0;
            fansNum = 0;
            feedType = 0;
            commentNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedText, 0);
            _os.write(dokiName, 1);
            _os.write(exposureNum, 2);
            _os.write(fansNum, 3);
            _os.write(feedType, 4);
            _os.write(commentNum, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedText, 0, false);
            _is.read(dokiName, 1, false);
            _is.read(exposureNum, 2, false);
            _is.read(fansNum, 3, false);
            _is.read(feedType, 4, false);
            _is.read(commentNum, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedText,"feedText");
            _ds.display(dokiName,"dokiName");
            _ds.display(exposureNum,"exposureNum");
            _ds.display(fansNum,"fansNum");
            _ds.display(feedType,"feedType");
            _ds.display(commentNum,"commentNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedText, true);
            _ds.displaySimple(dokiName, true);
            _ds.displaySimple(exposureNum, true);
            _ds.displaySimple(fansNum, true);
            _ds.displaySimple(feedType, true);
            _ds.displaySimple(commentNum, false);
            return _os;
        }
    public:
        std::string feedText;
        std::string dokiName;
        taf::Int64 exposureNum;
        taf::Int64 fansNum;
        taf::Int32 feedType;
        taf::Int64 commentNum;
    };
    inline bool operator==(const DokiFeedCircleInfo&l, const DokiFeedCircleInfo&r)
    {
        return l.feedText == r.feedText && l.dokiName == r.dokiName && l.exposureNum == r.exposureNum && l.fansNum == r.fansNum && l.feedType == r.feedType && l.commentNum == r.commentNum;
    }
    inline bool operator!=(const DokiFeedCircleInfo&l, const DokiFeedCircleInfo&r)
    {
        return !(l == r);
    }

    struct DokiBaseLiteInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiBaseLiteInfo";
        }
        static string MD5()
        {
            return "a71c089ae654c3fc84baecb6b27625a4";
        }
        DokiBaseLiteInfo()
        :dokiId(""),dokiName(""),dokiImgUrl("")
        {
        }
        void resetDefautlt()
        {
            dokiId = "";
            dokiName = "";
            dokiImgUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dokiId, 0);
            _os.write(dokiName, 1);
            _os.write(dokiImgUrl, 2);
            _os.write(starCircleColors, 3);
            _os.write(action, 4);
            _os.write(badgeInfo, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dokiId, 0, true);
            _is.read(dokiName, 1, false);
            _is.read(dokiImgUrl, 2, false);
            _is.read(starCircleColors, 3, false);
            _is.read(action, 4, false);
            _is.read(badgeInfo, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dokiId,"dokiId");
            _ds.display(dokiName,"dokiName");
            _ds.display(dokiImgUrl,"dokiImgUrl");
            _ds.display(starCircleColors,"starCircleColors");
            _ds.display(action,"action");
            _ds.display(badgeInfo,"badgeInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dokiId, true);
            _ds.displaySimple(dokiName, true);
            _ds.displaySimple(dokiImgUrl, true);
            _ds.displaySimple(starCircleColors, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(badgeInfo, false);
            return _os;
        }
    public:
        std::string dokiId;
        std::string dokiName;
        std::string dokiImgUrl;
        vector<std::string> starCircleColors;
        jce::Action action;
        jce::DegreeLabel badgeInfo;
    };
    inline bool operator==(const DokiBaseLiteInfo&l, const DokiBaseLiteInfo&r)
    {
        return l.dokiId == r.dokiId && l.dokiName == r.dokiName && l.dokiImgUrl == r.dokiImgUrl && l.starCircleColors == r.starCircleColors && l.action == r.action && l.badgeInfo == r.badgeInfo;
    }
    inline bool operator!=(const DokiBaseLiteInfo&l, const DokiBaseLiteInfo&r)
    {
        return !(l == r);
    }

    struct DokiFeedRelatedStarItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiFeedRelatedStarItem";
        }
        static string MD5()
        {
            return "a6a811726f75c277408703d7337fe79b";
        }
        DokiFeedRelatedStarItem()
        :followDataKey(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            followDataKey = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starDoki, 0);
            _os.write(circleInfo, 1);
            _os.write(followBtn, 2);
            _os.write(goDokiBtn, 3);
            _os.write(followDataKey, 4);
            _os.write(reportKey, 5);
            _os.write(reportParams, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starDoki, 0, false);
            _is.read(circleInfo, 1, false);
            _is.read(followBtn, 2, false);
            _is.read(goDokiBtn, 3, false);
            _is.read(followDataKey, 4, false);
            _is.read(reportKey, 5, false);
            _is.read(reportParams, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starDoki,"starDoki");
            _ds.display(circleInfo,"circleInfo");
            _ds.display(followBtn,"followBtn");
            _ds.display(goDokiBtn,"goDokiBtn");
            _ds.display(followDataKey,"followDataKey");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starDoki, true);
            _ds.displaySimple(circleInfo, true);
            _ds.displaySimple(followBtn, true);
            _ds.displaySimple(goDokiBtn, true);
            _ds.displaySimple(followDataKey, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::DokiBaseLiteInfo starDoki;
        jce::DokiFeedCircleInfo circleInfo;
        jce::TextAction followBtn;
        jce::TextAction goDokiBtn;
        std::string followDataKey;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const DokiFeedRelatedStarItem&l, const DokiFeedRelatedStarItem&r)
    {
        return l.starDoki == r.starDoki && l.circleInfo == r.circleInfo && l.followBtn == r.followBtn && l.goDokiBtn == r.goDokiBtn && l.followDataKey == r.followDataKey && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const DokiFeedRelatedStarItem&l, const DokiFeedRelatedStarItem&r)
    {
        return !(l == r);
    }

    struct DokiFeedRelatedStarsList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiFeedRelatedStarsList";
        }
        static string MD5()
        {
            return "a5b950c6aadad11dda02e28996351ee8";
        }
        DokiFeedRelatedStarsList()
        :reportKey(""),reportParams(""),uiType(0)
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starsList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
            _os.write(uiType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starsList, 0, false);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
            _is.read(uiType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starsList,"starsList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(uiType,"uiType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starsList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(uiType, false);
            return _os;
        }
    public:
        vector<jce::DokiFeedRelatedStarItem> starsList;
        std::string reportKey;
        std::string reportParams;
        taf::Int32 uiType;
    };
    inline bool operator==(const DokiFeedRelatedStarsList&l, const DokiFeedRelatedStarsList&r)
    {
        return l.starsList == r.starsList && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.uiType == r.uiType;
    }
    inline bool operator!=(const DokiFeedRelatedStarsList&l, const DokiFeedRelatedStarsList&r)
    {
        return !(l == r);
    }

    struct GpsAddressInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GpsAddressInfo";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        GpsAddressInfo()
        :dataKey(""),addressName(""),addressDescribe("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            addressName = "";
            addressDescribe = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 1);
            _os.write(addressName, 2);
            _os.write(addressDescribe, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 1, true);
            _is.read(addressName, 2, true);
            _is.read(addressDescribe, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(addressName,"addressName");
            _ds.display(addressDescribe,"addressDescribe");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(addressName, true);
            _ds.displaySimple(addressDescribe, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string addressName;
        std::string addressDescribe;
    };
    inline bool operator==(const GpsAddressInfo&l, const GpsAddressInfo&r)
    {
        return l.dataKey == r.dataKey && l.addressName == r.addressName && l.addressDescribe == r.addressDescribe;
    }
    inline bool operator!=(const GpsAddressInfo&l, const GpsAddressInfo&r)
    {
        return !(l == r);
    }

    struct RichTextLabelInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RichTextLabelInfo";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        RichTextLabelInfo()
        :labelType(0),richText("")
        {
        }
        void resetDefautlt()
        {
            labelType = 0;
            richText = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(labelType, 0);
            _os.write(richText, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(labelType, 0, false);
            _is.read(richText, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(labelType,"labelType");
            _ds.display(richText,"richText");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(labelType, true);
            _ds.displaySimple(richText, false);
            return _os;
        }
    public:
        taf::Int32 labelType;
        std::string richText;
    };
    inline bool operator==(const RichTextLabelInfo&l, const RichTextLabelInfo&r)
    {
        return l.labelType == r.labelType && l.richText == r.richText;
    }
    inline bool operator!=(const RichTextLabelInfo&l, const RichTextLabelInfo&r)
    {
        return !(l == r);
    }

    struct QAPrimaryFeed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QAPrimaryFeed";
        }
        static string MD5()
        {
            return "16a79943237ed11c6975d76c76c46ead";
        }
        QAPrimaryFeed()
        :dataKey(""),qaFeedId(""),qaTitle(""),qaContent(""),time(0),seq(""),cfrom(0),lookCount(0),qaCount(0),qaTips(""),h5ShareUrl(""),reportKey(""),reportParams(""),status(0),isFavorite(false)
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            qaFeedId = "";
            qaTitle = "";
            qaContent = "";
            time = 0;
            seq = "";
            cfrom = 0;
            lookCount = 0;
            qaCount = 0;
            qaTips = "";
            h5ShareUrl = "";
            reportKey = "";
            reportParams = "";
            status = 0;
            isFavorite = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(qaFeedId, 1);
            _os.write(qaTitle, 2);
            _os.write(qaContent, 3);
            _os.write(imageList, 4);
            _os.write(user, 5);
            _os.write(time, 6);
            _os.write(seq, 7);
            _os.write(cfrom, 8);
            _os.write(actorInfoList, 9);
            _os.write(sourceInfoList, 10);
            _os.write(qaFeedAction, 11);
            _os.write(lookCount, 12);
            _os.write(qaCount, 13);
            _os.write(qaTips, 14);
            _os.write(h5ShareUrl, 15);
            _os.write(reportKey, 16);
            _os.write(reportParams, 17);
            _os.write(status, 18);
            _os.write(mixedContent, 19);
            _os.write(isFavorite, 20);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(qaFeedId, 1, true);
            _is.read(qaTitle, 2, false);
            _is.read(qaContent, 3, false);
            _is.read(imageList, 4, false);
            _is.read(user, 5, false);
            _is.read(time, 6, false);
            _is.read(seq, 7, false);
            _is.read(cfrom, 8, false);
            _is.read(actorInfoList, 9, false);
            _is.read(sourceInfoList, 10, false);
            _is.read(qaFeedAction, 11, false);
            _is.read(lookCount, 12, false);
            _is.read(qaCount, 13, false);
            _is.read(qaTips, 14, false);
            _is.read(h5ShareUrl, 15, false);
            _is.read(reportKey, 16, false);
            _is.read(reportParams, 17, false);
            _is.read(status, 18, false);
            _is.read(mixedContent, 19, false);
            _is.read(isFavorite, 20, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(qaFeedId,"qaFeedId");
            _ds.display(qaTitle,"qaTitle");
            _ds.display(qaContent,"qaContent");
            _ds.display(imageList,"imageList");
            _ds.display(user,"user");
            _ds.display(time,"time");
            _ds.display(seq,"seq");
            _ds.display(cfrom,"cfrom");
            _ds.display(actorInfoList,"actorInfoList");
            _ds.display(sourceInfoList,"sourceInfoList");
            _ds.display(qaFeedAction,"qaFeedAction");
            _ds.display(lookCount,"lookCount");
            _ds.display(qaCount,"qaCount");
            _ds.display(qaTips,"qaTips");
            _ds.display(h5ShareUrl,"h5ShareUrl");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(status,"status");
            _ds.display(mixedContent,"mixedContent");
            _ds.display(isFavorite,"isFavorite");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(qaFeedId, true);
            _ds.displaySimple(qaTitle, true);
            _ds.displaySimple(qaContent, true);
            _ds.displaySimple(imageList, true);
            _ds.displaySimple(user, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(cfrom, true);
            _ds.displaySimple(actorInfoList, true);
            _ds.displaySimple(sourceInfoList, true);
            _ds.displaySimple(qaFeedAction, true);
            _ds.displaySimple(lookCount, true);
            _ds.displaySimple(qaCount, true);
            _ds.displaySimple(qaTips, true);
            _ds.displaySimple(h5ShareUrl, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(mixedContent, true);
            _ds.displaySimple(isFavorite, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string qaFeedId;
        std::string qaTitle;
        std::string qaContent;
        vector<jce::CircleMsgImageUrl> imageList;
        jce::ActorInfo user;
        taf::Int64 time;
        std::string seq;
        taf::Int32 cfrom;
        vector<jce::ActorInfo> actorInfoList;
        vector<jce::FeedSource> sourceInfoList;
        jce::Action qaFeedAction;
        taf::Int32 lookCount;
        taf::Int32 qaCount;
        std::string qaTips;
        std::string h5ShareUrl;
        std::string reportKey;
        std::string reportParams;
        taf::Char status;
        jce::MixedContent mixedContent;
        taf::Bool isFavorite;
    };
    inline bool operator==(const QAPrimaryFeed&l, const QAPrimaryFeed&r)
    {
        return l.dataKey == r.dataKey && l.qaFeedId == r.qaFeedId && l.qaTitle == r.qaTitle && l.qaContent == r.qaContent && l.imageList == r.imageList && l.user == r.user && l.time == r.time && l.seq == r.seq && l.cfrom == r.cfrom && l.actorInfoList == r.actorInfoList && l.sourceInfoList == r.sourceInfoList && l.qaFeedAction == r.qaFeedAction && l.lookCount == r.lookCount && l.qaCount == r.qaCount && l.qaTips == r.qaTips && l.h5ShareUrl == r.h5ShareUrl && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.status == r.status && l.mixedContent == r.mixedContent && l.isFavorite == r.isFavorite;
    }
    inline bool operator!=(const QAPrimaryFeed&l, const QAPrimaryFeed&r)
    {
        return !(l == r);
    }

    struct FeedStarTrackInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedStarTrackInfo";
        }
        static string MD5()
        {
            return "beac2d8238cab10b406dbc39b18a620f";
        }
        FeedStarTrackInfo()
        :title(""),subTitle(""),reportEventId("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            subTitle = "";
            reportEventId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dokiInfo, 0);
            _os.write(title, 1);
            _os.write(subTitle, 2);
            _os.write(rightAction, 3);
            _os.write(reportEventId, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dokiInfo, 0, false);
            _is.read(title, 1, false);
            _is.read(subTitle, 2, false);
            _is.read(rightAction, 3, false);
            _is.read(reportEventId, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dokiInfo,"dokiInfo");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(rightAction,"rightAction");
            _ds.display(reportEventId,"reportEventId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dokiInfo, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(rightAction, true);
            _ds.displaySimple(reportEventId, false);
            return _os;
        }
    public:
        jce::DokiBaseLiteInfo dokiInfo;
        std::string title;
        std::string subTitle;
        jce::TextAction rightAction;
        std::string reportEventId;
    };
    inline bool operator==(const FeedStarTrackInfo&l, const FeedStarTrackInfo&r)
    {
        return l.dokiInfo == r.dokiInfo && l.title == r.title && l.subTitle == r.subTitle && l.rightAction == r.rightAction && l.reportEventId == r.reportEventId;
    }
    inline bool operator!=(const FeedStarTrackInfo&l, const FeedStarTrackInfo&r)
    {
        return !(l == r);
    }

    struct FeedRecommendInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedRecommendInfo";
        }
        static string MD5()
        {
            return "94a58391b6eb7998de77ba7fd89b42f8";
        }
        FeedRecommendInfo()
        :prefixStr(""),suffixStr("")
        {
        }
        void resetDefautlt()
        {
            prefixStr = "";
            suffixStr = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(prefixStr, 0);
            _os.write(suffixStr, 1);
            _os.write(recommendList, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(prefixStr, 0, false);
            _is.read(suffixStr, 1, false);
            _is.read(recommendList, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(prefixStr,"prefixStr");
            _ds.display(suffixStr,"suffixStr");
            _ds.display(recommendList,"recommendList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(prefixStr, true);
            _ds.displaySimple(suffixStr, true);
            _ds.displaySimple(recommendList, false);
            return _os;
        }
    public:
        std::string prefixStr;
        std::string suffixStr;
        vector<jce::TextAction> recommendList;
    };
    inline bool operator==(const FeedRecommendInfo&l, const FeedRecommendInfo&r)
    {
        return l.prefixStr == r.prefixStr && l.suffixStr == r.suffixStr && l.recommendList == r.recommendList;
    }
    inline bool operator!=(const FeedRecommendInfo&l, const FeedRecommendInfo&r)
    {
        return !(l == r);
    }

    struct CirclePrimaryFeed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CirclePrimaryFeed";
        }
        static string MD5()
        {
            return "53bbedc9a8b23f6c0fe89d6e0f3b6fbe";
        }
        CirclePrimaryFeed()
        :feedId(""),content(""),time(0),videoTitle(""),followCount(0),isFollowed(0),h5ShareUrl(""),status(0),seq(""),commentCount(0),likeCount(0),dataKey(""),hasMoreComments(false),hasMoreLikes(false),hotFeedType(0),feedType(0),feedTitle(""),mediaType(0),isLike(false),additionalStyle(0),reportKey(""),reportParams(""),readCount(0),fakeReadCount(0),contentRowCount(0),qaTips(""),feedFeatureType(0),isFavorite(false),favoriteCount(0)
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            content = "";
            time = 0;
            videoTitle = "";
            followCount = 0;
            isFollowed = 0;
            h5ShareUrl = "";
            status = 0;
            seq = "";
            commentCount = 0;
            likeCount = 0;
            dataKey = "";
            hasMoreComments = false;
            hasMoreLikes = false;
            hotFeedType = 0;
            feedType = 0;
            feedTitle = "";
            mediaType = 0;
            isLike = false;
            additionalStyle = 0;
            reportKey = "";
            reportParams = "";
            readCount = 0;
            fakeReadCount = 0;
            contentRowCount = 0;
            qaTips = "";
            feedFeatureType = 0;
            isFavorite = false;
            favoriteCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(videoAttentItem, 1);
            _os.write(content, 2);
            _os.write(user, 3);
            _os.write(time, 4);
            _os.write(videoTitle, 5);
            _os.write(followCount, 6);
            _os.write(isFollowed, 7);
            _os.write(photos, 8);
            _os.write(comments, 9);
            _os.write(likes, 10);
            _os.write(action, 11);
            _os.write(h5ShareUrl, 12);
            _os.write(status, 13);
            _os.write(seq, 14);
            _os.write(commentCount, 15);
            _os.write(likeCount, 16);
            _os.write(badgeLabel, 17);
            _os.write(videos, 18);
            _os.write(dataKey, 19);
            _os.write(videoInfo, 20);
            _os.write(tagLabel, 21);
            _os.write(hasMoreComments, 22);
            _os.write(hasMoreLikes, 23);
            _os.write(hotFeedType, 24);
            _os.write(feedAction, 25);
            _os.write(feedType, 26);
            _os.write(feedTitle, 27);
            _os.write(voices, 28);
            _os.write(mediaType, 29);
            _os.write(score, 30);
            _os.write(isLike, 31);
            _os.write(contentSource, 32);
            _os.write(bulletinBoardV2, 33);
            _os.write(mediaPoster, 34);
            _os.write(sourceInfoList, 35);
            _os.write(topicInfoList, 36);
            _os.write(additionalStyle, 37);
            _os.write(mixedContent, 38);
            _os.write(reportKey, 39);
            _os.write(reportParams, 40);
            _os.write(readCount, 41);
            _os.write(fakeReadCount, 42);
            _os.write(specialContentInfo, 43);
            _os.write(imageText, 44);
            _os.write(verifyInfo, 45);
            _os.write(selfVideo, 46);
            _os.write(simpleFeed, 47);
            _os.write(extraInfo, 48);
            _os.write(relatedDokiList, 49);
            _os.write(imageTagList, 50);
            _os.write(subTitleInfoList, 51);
            _os.write(gpsAddressInfo, 52);
            _os.write(contentRowCount, 53);
            _os.write(qaPrimaryFeed, 54);
            _os.write(qaTips, 55);
            _os.write(voteInfo, 56);
            _os.write(richTextLabelInfo, 57);
            _os.write(starTrackInfo, 58);
            _os.write(feedFeatureType, 59);
            _os.write(isFavorite, 60);
            _os.write(favoriteCount, 61);
            _os.write(starComment, 62);
            _os.write(feedRecommendInfo, 63);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(videoAttentItem, 1, true);
            _is.read(content, 2, true);
            _is.read(user, 3, true);
            _is.read(time, 4, true);
            _is.read(videoTitle, 5, false);
            _is.read(followCount, 6, false);
            _is.read(isFollowed, 7, false);
            _is.read(photos, 8, false);
            _is.read(comments, 9, false);
            _is.read(likes, 10, false);
            _is.read(action, 11, false);
            _is.read(h5ShareUrl, 12, false);
            _is.read(status, 13, false);
            _is.read(seq, 14, false);
            _is.read(commentCount, 15, false);
            _is.read(likeCount, 16, false);
            _is.read(badgeLabel, 17, false);
            _is.read(videos, 18, false);
            _is.read(dataKey, 19, false);
            _is.read(videoInfo, 20, false);
            _is.read(tagLabel, 21, false);
            _is.read(hasMoreComments, 22, false);
            _is.read(hasMoreLikes, 23, false);
            _is.read(hotFeedType, 24, false);
            _is.read(feedAction, 25, false);
            _is.read(feedType, 26, false);
            _is.read(feedTitle, 27, false);
            _is.read(voices, 28, false);
            _is.read(mediaType, 29, false);
            _is.read(score, 30, false);
            _is.read(isLike, 31, false);
            _is.read(contentSource, 32, false);
            _is.read(bulletinBoardV2, 33, false);
            _is.read(mediaPoster, 34, false);
            _is.read(sourceInfoList, 35, false);
            _is.read(topicInfoList, 36, false);
            _is.read(additionalStyle, 37, false);
            _is.read(mixedContent, 38, false);
            _is.read(reportKey, 39, false);
            _is.read(reportParams, 40, false);
            _is.read(readCount, 41, false);
            _is.read(fakeReadCount, 42, false);
            _is.read(specialContentInfo, 43, false);
            _is.read(imageText, 44, false);
            _is.read(verifyInfo, 45, false);
            _is.read(selfVideo, 46, false);
            _is.read(simpleFeed, 47, false);
            _is.read(extraInfo, 48, false);
            _is.read(relatedDokiList, 49, false);
            _is.read(imageTagList, 50, false);
            _is.read(subTitleInfoList, 51, false);
            _is.read(gpsAddressInfo, 52, false);
            _is.read(contentRowCount, 53, false);
            _is.read(qaPrimaryFeed, 54, false);
            _is.read(qaTips, 55, false);
            _is.read(voteInfo, 56, false);
            _is.read(richTextLabelInfo, 57, false);
            _is.read(starTrackInfo, 58, false);
            _is.read(feedFeatureType, 59, false);
            _is.read(isFavorite, 60, false);
            _is.read(favoriteCount, 61, false);
            _is.read(starComment, 62, false);
            _is.read(feedRecommendInfo, 63, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(videoAttentItem,"videoAttentItem");
            _ds.display(content,"content");
            _ds.display(user,"user");
            _ds.display(time,"time");
            _ds.display(videoTitle,"videoTitle");
            _ds.display(followCount,"followCount");
            _ds.display(isFollowed,"isFollowed");
            _ds.display(photos,"photos");
            _ds.display(comments,"comments");
            _ds.display(likes,"likes");
            _ds.display(action,"action");
            _ds.display(h5ShareUrl,"h5ShareUrl");
            _ds.display(status,"status");
            _ds.display(seq,"seq");
            _ds.display(commentCount,"commentCount");
            _ds.display(likeCount,"likeCount");
            _ds.display(badgeLabel,"badgeLabel");
            _ds.display(videos,"videos");
            _ds.display(dataKey,"dataKey");
            _ds.display(videoInfo,"videoInfo");
            _ds.display(tagLabel,"tagLabel");
            _ds.display(hasMoreComments,"hasMoreComments");
            _ds.display(hasMoreLikes,"hasMoreLikes");
            _ds.display(hotFeedType,"hotFeedType");
            _ds.display(feedAction,"feedAction");
            _ds.display(feedType,"feedType");
            _ds.display(feedTitle,"feedTitle");
            _ds.display(voices,"voices");
            _ds.display(mediaType,"mediaType");
            _ds.display(score,"score");
            _ds.display(isLike,"isLike");
            _ds.display(contentSource,"contentSource");
            _ds.display(bulletinBoardV2,"bulletinBoardV2");
            _ds.display(mediaPoster,"mediaPoster");
            _ds.display(sourceInfoList,"sourceInfoList");
            _ds.display(topicInfoList,"topicInfoList");
            _ds.display(additionalStyle,"additionalStyle");
            _ds.display(mixedContent,"mixedContent");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(readCount,"readCount");
            _ds.display(fakeReadCount,"fakeReadCount");
            _ds.display(specialContentInfo,"specialContentInfo");
            _ds.display(imageText,"imageText");
            _ds.display(verifyInfo,"verifyInfo");
            _ds.display(selfVideo,"selfVideo");
            _ds.display(simpleFeed,"simpleFeed");
            _ds.display(extraInfo,"extraInfo");
            _ds.display(relatedDokiList,"relatedDokiList");
            _ds.display(imageTagList,"imageTagList");
            _ds.display(subTitleInfoList,"subTitleInfoList");
            _ds.display(gpsAddressInfo,"gpsAddressInfo");
            _ds.display(contentRowCount,"contentRowCount");
            _ds.display(qaPrimaryFeed,"qaPrimaryFeed");
            _ds.display(qaTips,"qaTips");
            _ds.display(voteInfo,"voteInfo");
            _ds.display(richTextLabelInfo,"richTextLabelInfo");
            _ds.display(starTrackInfo,"starTrackInfo");
            _ds.display(feedFeatureType,"feedFeatureType");
            _ds.display(isFavorite,"isFavorite");
            _ds.display(favoriteCount,"favoriteCount");
            _ds.display(starComment,"starComment");
            _ds.display(feedRecommendInfo,"feedRecommendInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(videoAttentItem, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(user, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(videoTitle, true);
            _ds.displaySimple(followCount, true);
            _ds.displaySimple(isFollowed, true);
            _ds.displaySimple(photos, true);
            _ds.displaySimple(comments, true);
            _ds.displaySimple(likes, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(h5ShareUrl, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(commentCount, true);
            _ds.displaySimple(likeCount, true);
            _ds.displaySimple(badgeLabel, true);
            _ds.displaySimple(videos, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(videoInfo, true);
            _ds.displaySimple(tagLabel, true);
            _ds.displaySimple(hasMoreComments, true);
            _ds.displaySimple(hasMoreLikes, true);
            _ds.displaySimple(hotFeedType, true);
            _ds.displaySimple(feedAction, true);
            _ds.displaySimple(feedType, true);
            _ds.displaySimple(feedTitle, true);
            _ds.displaySimple(voices, true);
            _ds.displaySimple(mediaType, true);
            _ds.displaySimple(score, true);
            _ds.displaySimple(isLike, true);
            _ds.displaySimple(contentSource, true);
            _ds.displaySimple(bulletinBoardV2, true);
            _ds.displaySimple(mediaPoster, true);
            _ds.displaySimple(sourceInfoList, true);
            _ds.displaySimple(topicInfoList, true);
            _ds.displaySimple(additionalStyle, true);
            _ds.displaySimple(mixedContent, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(readCount, true);
            _ds.displaySimple(fakeReadCount, true);
            _ds.displaySimple(specialContentInfo, true);
            _ds.displaySimple(imageText, true);
            _ds.displaySimple(verifyInfo, true);
            _ds.displaySimple(selfVideo, true);
            _ds.displaySimple(simpleFeed, true);
            _ds.displaySimple(extraInfo, true);
            _ds.displaySimple(relatedDokiList, true);
            _ds.displaySimple(imageTagList, true);
            _ds.displaySimple(subTitleInfoList, true);
            _ds.displaySimple(gpsAddressInfo, true);
            _ds.displaySimple(contentRowCount, true);
            _ds.displaySimple(qaPrimaryFeed, true);
            _ds.displaySimple(qaTips, true);
            _ds.displaySimple(voteInfo, true);
            _ds.displaySimple(richTextLabelInfo, true);
            _ds.displaySimple(starTrackInfo, true);
            _ds.displaySimple(feedFeatureType, true);
            _ds.displaySimple(isFavorite, true);
            _ds.displaySimple(favoriteCount, true);
            _ds.displaySimple(starComment, true);
            _ds.displaySimple(feedRecommendInfo, false);
            return _os;
        }
    public:
        std::string feedId;
        jce::VideoAttentItem videoAttentItem;
        std::string content;
        jce::ActorInfo user;
        taf::Int64 time;
        std::string videoTitle;
        taf::Int32 followCount;
        taf::Char isFollowed;
        vector<jce::CircleMsgImageUrl> photos;
        vector<jce::CircleCommentFeed> comments;
        vector<jce::CircleLikeInfo> likes;
        jce::Action action;
        std::string h5ShareUrl;
        taf::Char status;
        std::string seq;
        taf::Int32 commentCount;
        taf::Int32 likeCount;
        jce::MarkLabel badgeLabel;
        vector<jce::CircleShortVideoUrl> videos;
        std::string dataKey;
        jce::CirclePosterInfo videoInfo;
        jce::MarkLabel tagLabel;
        taf::Bool hasMoreComments;
        taf::Bool hasMoreLikes;
        taf::Int32 hotFeedType;
        jce::Action feedAction;
        taf::Int32 feedType;
        std::string feedTitle;
        vector<jce::ApolloVoiceData> voices;
        taf::Int32 mediaType;
        jce::MarkScore score;
        taf::Bool isLike;
        jce::FeedSource contentSource;
        jce::ONABulletinBoardV2 bulletinBoardV2;
        jce::MediaPoster mediaPoster;
        vector<jce::FeedSource> sourceInfoList;
        vector<jce::TopicInfoLite> topicInfoList;
        taf::Int32 additionalStyle;
        jce::MixedContent mixedContent;
        std::string reportKey;
        std::string reportParams;
        taf::Int64 readCount;
        taf::Int64 fakeReadCount;
        jce::PrimaryFeedSpecialContent specialContentInfo;
        jce::ONAImageText imageText;
        jce::VerifyInfo verifyInfo;
        jce::SelfTakeVideoInfo selfVideo;
        jce::SimpleFeedNode simpleFeed;
        map<std::string, std::string> extraInfo;
        jce::DokiFeedRelatedStarsList relatedDokiList;
        vector<jce::ImageAction> imageTagList;
        vector<std::string> subTitleInfoList;
        jce::GpsAddressInfo gpsAddressInfo;
        taf::Int32 contentRowCount;
        jce::QAPrimaryFeed qaPrimaryFeed;
        std::string qaTips;
        jce::FeedVoteInfo voteInfo;
        vector<jce::RichTextLabelInfo> richTextLabelInfo;
        jce::FeedStarTrackInfo starTrackInfo;
        taf::Int32 feedFeatureType;
        taf::Bool isFavorite;
        taf::Int32 favoriteCount;
        jce::CircleCommentFeed starComment;
        jce::FeedRecommendInfo feedRecommendInfo;
    };
    inline bool operator==(const CirclePrimaryFeed&l, const CirclePrimaryFeed&r)
    {
        return l.feedId == r.feedId && l.videoAttentItem == r.videoAttentItem && l.content == r.content && l.user == r.user && l.time == r.time && l.videoTitle == r.videoTitle && l.followCount == r.followCount && l.isFollowed == r.isFollowed && l.photos == r.photos && l.comments == r.comments && l.likes == r.likes && l.action == r.action && l.h5ShareUrl == r.h5ShareUrl && l.status == r.status && l.seq == r.seq && l.commentCount == r.commentCount && l.likeCount == r.likeCount && l.badgeLabel == r.badgeLabel && l.videos == r.videos && l.dataKey == r.dataKey && l.videoInfo == r.videoInfo && l.tagLabel == r.tagLabel && l.hasMoreComments == r.hasMoreComments && l.hasMoreLikes == r.hasMoreLikes && l.hotFeedType == r.hotFeedType && l.feedAction == r.feedAction && l.feedType == r.feedType && l.feedTitle == r.feedTitle && l.voices == r.voices && l.mediaType == r.mediaType && l.score == r.score && l.isLike == r.isLike && l.contentSource == r.contentSource && l.bulletinBoardV2 == r.bulletinBoardV2 && l.mediaPoster == r.mediaPoster && l.sourceInfoList == r.sourceInfoList && l.topicInfoList == r.topicInfoList && l.additionalStyle == r.additionalStyle && l.mixedContent == r.mixedContent && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.readCount == r.readCount && l.fakeReadCount == r.fakeReadCount && l.specialContentInfo == r.specialContentInfo && l.imageText == r.imageText && l.verifyInfo == r.verifyInfo && l.selfVideo == r.selfVideo && l.simpleFeed == r.simpleFeed && l.extraInfo == r.extraInfo && l.relatedDokiList == r.relatedDokiList && l.imageTagList == r.imageTagList && l.subTitleInfoList == r.subTitleInfoList && l.gpsAddressInfo == r.gpsAddressInfo && l.contentRowCount == r.contentRowCount && l.qaPrimaryFeed == r.qaPrimaryFeed && l.qaTips == r.qaTips && l.voteInfo == r.voteInfo && l.richTextLabelInfo == r.richTextLabelInfo && l.starTrackInfo == r.starTrackInfo && l.feedFeatureType == r.feedFeatureType && l.isFavorite == r.isFavorite && l.favoriteCount == r.favoriteCount && l.starComment == r.starComment && l.feedRecommendInfo == r.feedRecommendInfo;
    }
    inline bool operator!=(const CirclePrimaryFeed&l, const CirclePrimaryFeed&r)
    {
        return !(l == r);
    }

    struct GroupSwitchItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GroupSwitchItem";
        }
        static string MD5()
        {
            return "807405acb2bfcc4c0ef138ba14b80f8c";
        }
        GroupSwitchItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tagInfo, 0);
            _os.write(uiData, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tagInfo, 0, true);
            _is.read(uiData, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tagInfo,"tagInfo");
            _ds.display(uiData,"uiData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tagInfo, true);
            _ds.displaySimple(uiData, false);
            return _os;
        }
    public:
        jce::IconTagText tagInfo;
        vector<jce::TempletLine> uiData;
    };
    inline bool operator==(const GroupSwitchItem&l, const GroupSwitchItem&r)
    {
        return l.tagInfo == r.tagInfo && l.uiData == r.uiData;
    }
    inline bool operator!=(const GroupSwitchItem&l, const GroupSwitchItem&r)
    {
        return !(l == r);
    }

    struct EventTimeLineItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EventTimeLineItem";
        }
        static string MD5()
        {
            return "34b1211e02f0cd6b1dea3079f5c0dea3";
        }
        EventTimeLineItem()
        :firstLine(""),secondLine("")
        {
        }
        void resetDefautlt()
        {
            firstLine = "";
            secondLine = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(firstLine, 0);
            _os.write(secondLine, 1);
            _os.write(action, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(firstLine, 0, true);
            _is.read(secondLine, 1, true);
            _is.read(action, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(firstLine,"firstLine");
            _ds.display(secondLine,"secondLine");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(firstLine, true);
            _ds.displaySimple(secondLine, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string firstLine;
        std::string secondLine;
        jce::Action action;
    };
    inline bool operator==(const EventTimeLineItem&l, const EventTimeLineItem&r)
    {
        return l.firstLine == r.firstLine && l.secondLine == r.secondLine && l.action == r.action;
    }
    inline bool operator!=(const EventTimeLineItem&l, const EventTimeLineItem&r)
    {
        return !(l == r);
    }

    struct OptionalItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.OptionalItem";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        OptionalItem()
        :showText(""),contentText(""),dataKey("")
        {
        }
        void resetDefautlt()
        {
            showText = "";
            contentText = "";
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(showText, 0);
            _os.write(contentText, 1);
            _os.write(dataKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(showText, 0, true);
            _is.read(contentText, 1, true);
            _is.read(dataKey, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(showText,"showText");
            _ds.display(contentText,"contentText");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(showText, true);
            _ds.displaySimple(contentText, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string showText;
        std::string contentText;
        std::string dataKey;
    };
    inline bool operator==(const OptionalItem&l, const OptionalItem&r)
    {
        return l.showText == r.showText && l.contentText == r.contentText && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const OptionalItem&l, const OptionalItem&r)
    {
        return !(l == r);
    }

    struct PromotionBannerInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PromotionBannerInfo";
        }
        static string MD5()
        {
            return "3aff0782bd7bbd517b1f229b0cf73dc5";
        }
        PromotionBannerInfo()
        :tapTitle(""),title(""),subTitle(""),imageUrl(""),type(0)
        {
        }
        void resetDefautlt()
        {
            tapTitle = "";
            title = "";
            subTitle = "";
            imageUrl = "";
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tapAction, 0);
            _os.write(tapTitle, 1);
            _os.write(title, 2);
            _os.write(subTitle, 3);
            _os.write(imageUrl, 4);
            _os.write(type, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tapAction, 0, true);
            _is.read(tapTitle, 1, false);
            _is.read(title, 2, false);
            _is.read(subTitle, 3, false);
            _is.read(imageUrl, 4, false);
            _is.read(type, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tapAction,"tapAction");
            _ds.display(tapTitle,"tapTitle");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tapAction, true);
            _ds.displaySimple(tapTitle, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        jce::Action tapAction;
        std::string tapTitle;
        std::string title;
        std::string subTitle;
        std::string imageUrl;
        taf::Int32 type;
    };
    inline bool operator==(const PromotionBannerInfo&l, const PromotionBannerInfo&r)
    {
        return l.tapAction == r.tapAction && l.tapTitle == r.tapTitle && l.title == r.title && l.subTitle == r.subTitle && l.imageUrl == r.imageUrl && l.type == r.type;
    }
    inline bool operator!=(const PromotionBannerInfo&l, const PromotionBannerInfo&r)
    {
        return !(l == r);
    }

    struct TVShowWeeklyList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TVShowWeeklyList";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        TVShowWeeklyList()
        :datakey(""),title(""),subtitle(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            datakey = "";
            title = "";
            subtitle = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(datakey, 0);
            _os.write(title, 1);
            _os.write(subtitle, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(datakey, 0, true);
            _is.read(title, 1, false);
            _is.read(subtitle, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(datakey,"datakey");
            _ds.display(title,"title");
            _ds.display(subtitle,"subtitle");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(datakey, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subtitle, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string datakey;
        std::string title;
        std::string subtitle;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const TVShowWeeklyList&l, const TVShowWeeklyList&r)
    {
        return l.datakey == r.datakey && l.title == r.title && l.subtitle == r.subtitle && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const TVShowWeeklyList&l, const TVShowWeeklyList&r)
    {
        return !(l == r);
    }

    struct WillReleasePoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WillReleasePoster";
        }
        static string MD5()
        {
            return "86b9e590399c4a8dbaf31aa1cb98d2be";
        }
        WillReleasePoster()
        :buttonType(0),releaseTime("")
        {
        }
        void resetDefautlt()
        {
            buttonType = 0;
            releaseTime = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(attentItem, 1);
            _os.write(buttonType, 2);
            _os.write(releaseTime, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(attentItem, 1, false);
            _is.read(buttonType, 2, false);
            _is.read(releaseTime, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(attentItem,"attentItem");
            _ds.display(buttonType,"buttonType");
            _ds.display(releaseTime,"releaseTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(buttonType, true);
            _ds.displaySimple(releaseTime, false);
            return _os;
        }
    public:
        jce::Poster poster;
        jce::VideoAttentItem attentItem;
        taf::Int32 buttonType;
        std::string releaseTime;
    };
    inline bool operator==(const WillReleasePoster&l, const WillReleasePoster&r)
    {
        return l.poster == r.poster && l.attentItem == r.attentItem && l.buttonType == r.buttonType && l.releaseTime == r.releaseTime;
    }
    inline bool operator!=(const WillReleasePoster&l, const WillReleasePoster&r)
    {
        return !(l == r);
    }

    struct CoralSummaryInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CoralSummaryInfo";
        }
        static string MD5()
        {
            return "a40a35259af25c306a070bae6abf5fd8";
        }
        CoralSummaryInfo()
        :commentCount(0),summaryTitle(""),commentType(0)
        {
        }
        void resetDefautlt()
        {
            commentCount = 0;
            summaryTitle = "";
            commentType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commentCount, 0);
            _os.write(actorList, 1);
            _os.write(summaryTitle, 2);
            _os.write(commentType, 3);
            _os.write(action, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commentCount, 0, false);
            _is.read(actorList, 1, false);
            _is.read(summaryTitle, 2, false);
            _is.read(commentType, 3, false);
            _is.read(action, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commentCount,"commentCount");
            _ds.display(actorList,"actorList");
            _ds.display(summaryTitle,"summaryTitle");
            _ds.display(commentType,"commentType");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commentCount, true);
            _ds.displaySimple(actorList, true);
            _ds.displaySimple(summaryTitle, true);
            _ds.displaySimple(commentType, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        taf::Int32 commentCount;
        vector<jce::ActorInfo> actorList;
        std::string summaryTitle;
        taf::Char commentType;
        jce::Action action;
    };
    inline bool operator==(const CoralSummaryInfo&l, const CoralSummaryInfo&r)
    {
        return l.commentCount == r.commentCount && l.actorList == r.actorList && l.summaryTitle == r.summaryTitle && l.commentType == r.commentType && l.action == r.action;
    }
    inline bool operator!=(const CoralSummaryInfo&l, const CoralSummaryInfo&r)
    {
        return !(l == r);
    }

    struct ChannnelExtraInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannnelExtraInfo";
        }
        static string MD5()
        {
            return "6f9bbe5ace26b7b7f6916c52b00462f6";
        }
        ChannnelExtraInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(extraInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(extraInfo, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(extraInfo,"extraInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(extraInfo, false);
            return _os;
        }
    public:
        map<std::string, std::string> extraInfo;
    };
    inline bool operator==(const ChannnelExtraInfo&l, const ChannnelExtraInfo&r)
    {
        return l.extraInfo == r.extraInfo;
    }
    inline bool operator!=(const ChannnelExtraInfo&l, const ChannnelExtraInfo&r)
    {
        return !(l == r);
    }

    struct EnterTipItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EnterTipItem";
        }
        static string MD5()
        {
            return "ac771eb652e9cb390c544282d6d5ef76";
        }
        EnterTipItem()
        :itemId(""),buttonType(0),title(""),imgUrl(""),bgImgUrl(""),btnText(""),reportKey(""),reportParams(""),titleColor(""),btnTextColor("")
        {
        }
        void resetDefautlt()
        {
            itemId = "";
            buttonType = 0;
            title = "";
            imgUrl = "";
            bgImgUrl = "";
            btnText = "";
            reportKey = "";
            reportParams = "";
            titleColor = "";
            btnTextColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemId, 0);
            _os.write(buttonType, 1);
            _os.write(title, 2);
            _os.write(imgUrl, 3);
            _os.write(bgImgUrl, 4);
            _os.write(attentItem, 5);
            _os.write(btnText, 6);
            _os.write(action, 7);
            _os.write(reportKey, 8);
            _os.write(reportParams, 9);
            _os.write(titleColor, 10);
            _os.write(btnTextColor, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(itemId, 0, true);
            _is.read(buttonType, 1, true);
            _is.read(title, 2, true);
            _is.read(imgUrl, 3, false);
            _is.read(bgImgUrl, 4, false);
            _is.read(attentItem, 5, false);
            _is.read(btnText, 6, false);
            _is.read(action, 7, false);
            _is.read(reportKey, 8, false);
            _is.read(reportParams, 9, false);
            _is.read(titleColor, 10, false);
            _is.read(btnTextColor, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemId,"itemId");
            _ds.display(buttonType,"buttonType");
            _ds.display(title,"title");
            _ds.display(imgUrl,"imgUrl");
            _ds.display(bgImgUrl,"bgImgUrl");
            _ds.display(attentItem,"attentItem");
            _ds.display(btnText,"btnText");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(titleColor,"titleColor");
            _ds.display(btnTextColor,"btnTextColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemId, true);
            _ds.displaySimple(buttonType, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(imgUrl, true);
            _ds.displaySimple(bgImgUrl, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(btnText, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(titleColor, true);
            _ds.displaySimple(btnTextColor, false);
            return _os;
        }
    public:
        std::string itemId;
        taf::Int32 buttonType;
        std::string title;
        std::string imgUrl;
        std::string bgImgUrl;
        jce::VideoAttentItem attentItem;
        std::string btnText;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
        std::string titleColor;
        std::string btnTextColor;
    };
    inline bool operator==(const EnterTipItem&l, const EnterTipItem&r)
    {
        return l.itemId == r.itemId && l.buttonType == r.buttonType && l.title == r.title && l.imgUrl == r.imgUrl && l.bgImgUrl == r.bgImgUrl && l.attentItem == r.attentItem && l.btnText == r.btnText && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.titleColor == r.titleColor && l.btnTextColor == r.btnTextColor;
    }
    inline bool operator!=(const EnterTipItem&l, const EnterTipItem&r)
    {
        return !(l == r);
    }

    struct RecommendItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RecommendItem";
        }
        static string MD5()
        {
            return "8a33ce55218e3f61ddbee88dd8e597da";
        }
        RecommendItem()
        :firstLine(""),secondLine(""),thirdLine(""),type(0),itemID(""),isPullGrowth(true),pullGrowthProtocolType(0),dynamicImageUrl(""),isShowDownload(true),uiType(0)
        {
        }
        void resetDefautlt()
        {
            firstLine = "";
            secondLine = "";
            thirdLine = "";
            type = 0;
            itemID = "";
            isPullGrowth = true;
            pullGrowthProtocolType = 0;
            dynamicImageUrl = "";
            isShowDownload = true;
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrlList, 0);
            _os.write(firstLine, 1);
            _os.write(secondLine, 2);
            _os.write(thirdLine, 3);
            _os.write(type, 4);
            _os.write(itemID, 5);
            _os.write(actionBarInfo, 6);
            _os.write(report, 7);
            _os.write(apkInfo, 8);
            _os.write(isPullGrowth, 9);
            _os.write(pullGrowthProtocolType, 10);
            _os.write(videoItemData, 11);
            _os.write(dynamicImageUrl, 12);
            _os.write(isShowDownload, 13);
            _os.write(uiType, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrlList, 0, false);
            _is.read(firstLine, 1, false);
            _is.read(secondLine, 2, false);
            _is.read(thirdLine, 3, false);
            _is.read(type, 4, false);
            _is.read(itemID, 5, false);
            _is.read(actionBarInfo, 6, false);
            _is.read(report, 7, false);
            _is.read(apkInfo, 8, false);
            _is.read(isPullGrowth, 9, false);
            _is.read(pullGrowthProtocolType, 10, false);
            _is.read(videoItemData, 11, false);
            _is.read(dynamicImageUrl, 12, false);
            _is.read(isShowDownload, 13, false);
            _is.read(uiType, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrlList,"imageUrlList");
            _ds.display(firstLine,"firstLine");
            _ds.display(secondLine,"secondLine");
            _ds.display(thirdLine,"thirdLine");
            _ds.display(type,"type");
            _ds.display(itemID,"itemID");
            _ds.display(actionBarInfo,"actionBarInfo");
            _ds.display(report,"report");
            _ds.display(apkInfo,"apkInfo");
            _ds.display(isPullGrowth,"isPullGrowth");
            _ds.display(pullGrowthProtocolType,"pullGrowthProtocolType");
            _ds.display(videoItemData,"videoItemData");
            _ds.display(dynamicImageUrl,"dynamicImageUrl");
            _ds.display(isShowDownload,"isShowDownload");
            _ds.display(uiType,"uiType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrlList, true);
            _ds.displaySimple(firstLine, true);
            _ds.displaySimple(secondLine, true);
            _ds.displaySimple(thirdLine, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(itemID, true);
            _ds.displaySimple(actionBarInfo, true);
            _ds.displaySimple(report, true);
            _ds.displaySimple(apkInfo, true);
            _ds.displaySimple(isPullGrowth, true);
            _ds.displaySimple(pullGrowthProtocolType, true);
            _ds.displaySimple(videoItemData, true);
            _ds.displaySimple(dynamicImageUrl, true);
            _ds.displaySimple(isShowDownload, true);
            _ds.displaySimple(uiType, false);
            return _os;
        }
    public:
        vector<std::string> imageUrlList;
        std::string firstLine;
        std::string secondLine;
        std::string thirdLine;
        taf::Int32 type;
        std::string itemID;
        jce::ActionBarInfo actionBarInfo;
        jce::ExtraReportKV report;
        jce::AppInfo apkInfo;
        taf::Bool isPullGrowth;
        taf::Int32 pullGrowthProtocolType;
        jce::VideoItemData videoItemData;
        std::string dynamicImageUrl;
        taf::Bool isShowDownload;
        taf::Int32 uiType;
    };
    inline bool operator==(const RecommendItem&l, const RecommendItem&r)
    {
        return l.imageUrlList == r.imageUrlList && l.firstLine == r.firstLine && l.secondLine == r.secondLine && l.thirdLine == r.thirdLine && l.type == r.type && l.itemID == r.itemID && l.actionBarInfo == r.actionBarInfo && l.report == r.report && l.apkInfo == r.apkInfo && l.isPullGrowth == r.isPullGrowth && l.pullGrowthProtocolType == r.pullGrowthProtocolType && l.videoItemData == r.videoItemData && l.dynamicImageUrl == r.dynamicImageUrl && l.isShowDownload == r.isShowDownload && l.uiType == r.uiType;
    }
    inline bool operator!=(const RecommendItem&l, const RecommendItem&r)
    {
        return !(l == r);
    }

    struct SearchFilterItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SearchFilterItem";
        }
        static string MD5()
        {
            return "760592c3a03d9f89db32875282292eb3";
        }
        SearchFilterItem()
        :name("")
        {
        }
        void resetDefautlt()
        {
            name = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(recommendList, 0);
            _os.write(name, 1);
            _os.write(report, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(recommendList, 0, true);
            _is.read(name, 1, true);
            _is.read(report, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(recommendList,"recommendList");
            _ds.display(name,"name");
            _ds.display(report,"report");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(recommendList, true);
            _ds.displaySimple(name, true);
            _ds.displaySimple(report, false);
            return _os;
        }
    public:
        vector<jce::RecommendItem> recommendList;
        std::string name;
        jce::ExtraReportKV report;
    };
    inline bool operator==(const SearchFilterItem&l, const SearchFilterItem&r)
    {
        return l.recommendList == r.recommendList && l.name == r.name && l.report == r.report;
    }
    inline bool operator!=(const SearchFilterItem&l, const SearchFilterItem&r)
    {
        return !(l == r);
    }

    struct VideoTopicCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoTopicCard";
        }
        static string MD5()
        {
            return "0c27f493ff36e4b50c271e67e5589f92";
        }
        VideoTopicCard()
        :dataKey(""),topicTitle(""),iconUrl(""),reportKey(""),reportParams(""),actionType(0),topicDataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            topicTitle = "";
            iconUrl = "";
            reportKey = "";
            reportParams = "";
            actionType = 0;
            topicDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(topicTitle, 1);
            _os.write(iconUrl, 2);
            _os.write(videoList, 3);
            _os.write(rightActionBar, 4);
            _os.write(reportKey, 5);
            _os.write(reportParams, 6);
            _os.write(action, 7);
            _os.write(actionType, 8);
            _os.write(topicDataKey, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(topicTitle, 1, false);
            _is.read(iconUrl, 2, false);
            _is.read(videoList, 3, false);
            _is.read(rightActionBar, 4, false);
            _is.read(reportKey, 5, false);
            _is.read(reportParams, 6, false);
            _is.read(action, 7, false);
            _is.read(actionType, 8, false);
            _is.read(topicDataKey, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(topicTitle,"topicTitle");
            _ds.display(iconUrl,"iconUrl");
            _ds.display(videoList,"videoList");
            _ds.display(rightActionBar,"rightActionBar");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(action,"action");
            _ds.display(actionType,"actionType");
            _ds.display(topicDataKey,"topicDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(topicTitle, true);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(videoList, true);
            _ds.displaySimple(rightActionBar, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(actionType, true);
            _ds.displaySimple(topicDataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string topicTitle;
        std::string iconUrl;
        vector<jce::CirclePrimaryFeed> videoList;
        jce::ActionBarInfo rightActionBar;
        std::string reportKey;
        std::string reportParams;
        jce::Action action;
        taf::Int32 actionType;
        std::string topicDataKey;
    };
    inline bool operator==(const VideoTopicCard&l, const VideoTopicCard&r)
    {
        return l.dataKey == r.dataKey && l.topicTitle == r.topicTitle && l.iconUrl == r.iconUrl && l.videoList == r.videoList && l.rightActionBar == r.rightActionBar && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.action == r.action && l.actionType == r.actionType && l.topicDataKey == r.topicDataKey;
    }
    inline bool operator!=(const VideoTopicCard&l, const VideoTopicCard&r)
    {
        return !(l == r);
    }

    struct SpokesPersonRecommend : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SpokesPersonRecommend";
        }
        static string MD5()
        {
            return "3de756588f9099b73d5a6717e727187d";
        }
        SpokesPersonRecommend()
        :message(""),messageColor(""),spokesPersonImageUrl(""),spokesPersonBGImageUrl(""),bgImageUrl("")
        {
        }
        void resetDefautlt()
        {
            message = "";
            messageColor = "";
            spokesPersonImageUrl = "";
            spokesPersonBGImageUrl = "";
            bgImageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(posterList, 0);
            _os.write(message, 1);
            _os.write(messageColor, 2);
            _os.write(spokesPersonImageUrl, 3);
            _os.write(spokesPersonBGImageUrl, 4);
            _os.write(bgImageUrl, 5);
            _os.write(actionBar, 6);
            _os.write(reportInfo, 7);
            _os.write(spokesPersonReportInfo, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(posterList, 0, true);
            _is.read(message, 1, false);
            _is.read(messageColor, 2, false);
            _is.read(spokesPersonImageUrl, 3, false);
            _is.read(spokesPersonBGImageUrl, 4, false);
            _is.read(bgImageUrl, 5, false);
            _is.read(actionBar, 6, false);
            _is.read(reportInfo, 7, false);
            _is.read(spokesPersonReportInfo, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(posterList,"posterList");
            _ds.display(message,"message");
            _ds.display(messageColor,"messageColor");
            _ds.display(spokesPersonImageUrl,"spokesPersonImageUrl");
            _ds.display(spokesPersonBGImageUrl,"spokesPersonBGImageUrl");
            _ds.display(bgImageUrl,"bgImageUrl");
            _ds.display(actionBar,"actionBar");
            _ds.display(reportInfo,"reportInfo");
            _ds.display(spokesPersonReportInfo,"spokesPersonReportInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(posterList, true);
            _ds.displaySimple(message, true);
            _ds.displaySimple(messageColor, true);
            _ds.displaySimple(spokesPersonImageUrl, true);
            _ds.displaySimple(spokesPersonBGImageUrl, true);
            _ds.displaySimple(bgImageUrl, true);
            _ds.displaySimple(actionBar, true);
            _ds.displaySimple(reportInfo, true);
            _ds.displaySimple(spokesPersonReportInfo, false);
            return _os;
        }
    public:
        vector<jce::Poster> posterList;
        std::string message;
        std::string messageColor;
        std::string spokesPersonImageUrl;
        std::string spokesPersonBGImageUrl;
        std::string bgImageUrl;
        jce::ActionBarInfo actionBar;
        jce::ExtraReportKV reportInfo;
        jce::ExtraReportKV spokesPersonReportInfo;
    };
    inline bool operator==(const SpokesPersonRecommend&l, const SpokesPersonRecommend&r)
    {
        return l.posterList == r.posterList && l.message == r.message && l.messageColor == r.messageColor && l.spokesPersonImageUrl == r.spokesPersonImageUrl && l.spokesPersonBGImageUrl == r.spokesPersonBGImageUrl && l.bgImageUrl == r.bgImageUrl && l.actionBar == r.actionBar && l.reportInfo == r.reportInfo && l.spokesPersonReportInfo == r.spokesPersonReportInfo;
    }
    inline bool operator!=(const SpokesPersonRecommend&l, const SpokesPersonRecommend&r)
    {
        return !(l == r);
    }

    struct VIPLevelEntry : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VIPLevelEntry";
        }
        static string MD5()
        {
            return "8f61a8dd9e913921bcac99393ba34163";
        }
        VIPLevelEntry()
        :title(""),titleColor("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            titleColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(levelEntrys, 0);
            _os.write(title, 1);
            _os.write(titleColor, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(levelEntrys, 0, true);
            _is.read(title, 1, false);
            _is.read(titleColor, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(levelEntrys,"levelEntrys");
            _ds.display(title,"title");
            _ds.display(titleColor,"titleColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(levelEntrys, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(titleColor, false);
            return _os;
        }
    public:
        vector<jce::ActionBarInfo> levelEntrys;
        std::string title;
        std::string titleColor;
    };
    inline bool operator==(const VIPLevelEntry&l, const VIPLevelEntry&r)
    {
        return l.levelEntrys == r.levelEntrys && l.title == r.title && l.titleColor == r.titleColor;
    }
    inline bool operator!=(const VIPLevelEntry&l, const VIPLevelEntry&r)
    {
        return !(l == r);
    }

    struct RelatedDoki : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RelatedDoki";
        }
        static string MD5()
        {
            return "2fdf6963991f1b032af61477fe72caf0";
        }
        RelatedDoki()
        :imageUrl(""),name(""),btnTitle(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
            name = "";
            btnTitle = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(name, 1);
            _os.write(btnTitle, 2);
            _os.write(action, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, true);
            _is.read(name, 1, true);
            _is.read(btnTitle, 2, false);
            _is.read(action, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(name,"name");
            _ds.display(btnTitle,"btnTitle");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(name, true);
            _ds.displaySimple(btnTitle, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string imageUrl;
        std::string name;
        std::string btnTitle;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const RelatedDoki&l, const RelatedDoki&r)
    {
        return l.imageUrl == r.imageUrl && l.name == r.name && l.btnTitle == r.btnTitle && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const RelatedDoki&l, const RelatedDoki&r)
    {
        return !(l == r);
    }

    struct CommonTopicCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommonTopicCard";
        }
        static string MD5()
        {
            return "f0ae817f5ed6e42851d99db16bd8c834";
        }
        CommonTopicCard()
        :dataKey(""),topicTitle(""),iconUrl(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            topicTitle = "";
            iconUrl = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(topicTitle, 1);
            _os.write(iconUrl, 2);
            _os.write(content, 3);
            _os.write(rightActionBar, 4);
            _os.write(reportKey, 5);
            _os.write(reportParams, 6);
            _os.write(action, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(topicTitle, 1, false);
            _is.read(iconUrl, 2, false);
            _is.read(content, 3, false);
            _is.read(rightActionBar, 4, false);
            _is.read(reportKey, 5, false);
            _is.read(reportParams, 6, false);
            _is.read(action, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(topicTitle,"topicTitle");
            _ds.display(iconUrl,"iconUrl");
            _ds.display(content,"content");
            _ds.display(rightActionBar,"rightActionBar");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(topicTitle, true);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(rightActionBar, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string topicTitle;
        std::string iconUrl;
        jce::MediaContentInfo content;
        jce::ActionBarInfo rightActionBar;
        std::string reportKey;
        std::string reportParams;
        jce::Action action;
    };
    inline bool operator==(const CommonTopicCard&l, const CommonTopicCard&r)
    {
        return l.dataKey == r.dataKey && l.topicTitle == r.topicTitle && l.iconUrl == r.iconUrl && l.content == r.content && l.rightActionBar == r.rightActionBar && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.action == r.action;
    }
    inline bool operator!=(const CommonTopicCard&l, const CommonTopicCard&r)
    {
        return !(l == r);
    }

    struct CommonActorRankItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommonActorRankItem";
        }
        static string MD5()
        {
            return "a70e890bcf09f86f592f6ac70396f79d";
        }
        CommonActorRankItem()
        :title(""),subTitle(""),rankNum(""),rankTextColor(""),rankBgColor(""),btnText(""),btnColor(""),uiFlag(0)
        {
        }
        void resetDefautlt()
        {
            title = "";
            subTitle = "";
            rankNum = "";
            rankTextColor = "";
            rankBgColor = "";
            btnText = "";
            btnColor = "";
            uiFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actor, 0);
            _os.write(title, 1);
            _os.write(subTitle, 2);
            _os.write(rankNum, 3);
            _os.write(rankTextColor, 4);
            _os.write(rankBgColor, 5);
            _os.write(btnText, 6);
            _os.write(btnAction, 7);
            _os.write(btnColor, 8);
            _os.write(uiFlag, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actor, 0, true);
            _is.read(title, 1, false);
            _is.read(subTitle, 2, false);
            _is.read(rankNum, 3, false);
            _is.read(rankTextColor, 4, false);
            _is.read(rankBgColor, 5, false);
            _is.read(btnText, 6, false);
            _is.read(btnAction, 7, false);
            _is.read(btnColor, 8, false);
            _is.read(uiFlag, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actor,"actor");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(rankNum,"rankNum");
            _ds.display(rankTextColor,"rankTextColor");
            _ds.display(rankBgColor,"rankBgColor");
            _ds.display(btnText,"btnText");
            _ds.display(btnAction,"btnAction");
            _ds.display(btnColor,"btnColor");
            _ds.display(uiFlag,"uiFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actor, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(rankNum, true);
            _ds.displaySimple(rankTextColor, true);
            _ds.displaySimple(rankBgColor, true);
            _ds.displaySimple(btnText, true);
            _ds.displaySimple(btnAction, true);
            _ds.displaySimple(btnColor, true);
            _ds.displaySimple(uiFlag, false);
            return _os;
        }
    public:
        jce::ActorInfo actor;
        std::string title;
        std::string subTitle;
        std::string rankNum;
        std::string rankTextColor;
        std::string rankBgColor;
        std::string btnText;
        jce::Action btnAction;
        std::string btnColor;
        taf::Char uiFlag;
    };
    inline bool operator==(const CommonActorRankItem&l, const CommonActorRankItem&r)
    {
        return l.actor == r.actor && l.title == r.title && l.subTitle == r.subTitle && l.rankNum == r.rankNum && l.rankTextColor == r.rankTextColor && l.rankBgColor == r.rankBgColor && l.btnText == r.btnText && l.btnAction == r.btnAction && l.btnColor == r.btnColor && l.uiFlag == r.uiFlag;
    }
    inline bool operator!=(const CommonActorRankItem&l, const CommonActorRankItem&r)
    {
        return !(l == r);
    }

    struct ONACommonActorRankList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONACommonActorRankList";
        }
        static string MD5()
        {
            return "5aafc6958344264e94211a8085c9d2ed";
        }
        ONACommonActorRankList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(itemList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemList,"itemList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::CommonActorRankItem> itemList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONACommonActorRankList&l, const ONACommonActorRankList&r)
    {
        return l.itemList == r.itemList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONACommonActorRankList&l, const ONACommonActorRankList&r)
    {
        return !(l == r);
    }

    struct YooUser : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.YooUser";
        }
        static string MD5()
        {
            return "7130c06b6f2ac3819fe77f3149d4204c";
        }
        YooUser()
        :title(""),imgUrl(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            imgUrl = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(imgUrl, 1);
            _os.write(action, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(imgUrl, 1, true);
            _is.read(action, 2, true);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(imgUrl,"imgUrl");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(imgUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string title;
        std::string imgUrl;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const YooUser&l, const YooUser&r)
    {
        return l.title == r.title && l.imgUrl == r.imgUrl && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const YooUser&l, const YooUser&r)
    {
        return !(l == r);
    }

    struct YooFollowCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.YooFollowCard";
        }
        static string MD5()
        {
            return "a209ce0abffdce46c3f6e3e22547e896";
        }
        YooFollowCard()
        :title(""),imgUrl(""),lastUpdateTime(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            imgUrl = "";
            lastUpdateTime = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(imgUrl, 1);
            _os.write(action, 2);
            _os.write(lastUpdateTime, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(imgUrl, 1, true);
            _is.read(action, 2, true);
            _is.read(lastUpdateTime, 3, true);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(imgUrl,"imgUrl");
            _ds.display(action,"action");
            _ds.display(lastUpdateTime,"lastUpdateTime");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(imgUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(lastUpdateTime, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string title;
        std::string imgUrl;
        jce::Action action;
        taf::Int64 lastUpdateTime;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const YooFollowCard&l, const YooFollowCard&r)
    {
        return l.title == r.title && l.imgUrl == r.imgUrl && l.action == r.action && l.lastUpdateTime == r.lastUpdateTime && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const YooFollowCard&l, const YooFollowCard&r)
    {
        return !(l == r);
    }

    struct YooGameCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.YooGameCard";
        }
        static string MD5()
        {
            return "098f8ed2f67fd1b3f44b94dde7efb8e7";
        }
        YooGameCard()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(picker, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, false);
            _is.read(picker, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(picker,"picker");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(picker, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::Poster poster;
        jce::YooUser picker;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const YooGameCard&l, const YooGameCard&r)
    {
        return l.poster == r.poster && l.picker == r.picker && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const YooGameCard&l, const YooGameCard&r)
    {
        return !(l == r);
    }

    struct ONAYooFollowList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAYooFollowList";
        }
        static string MD5()
        {
            return "2593cfa9fe8e99c3521f4babaa896387";
        }
        ONAYooFollowList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cardList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cardList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cardList,"cardList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cardList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::YooFollowCard> cardList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAYooFollowList&l, const ONAYooFollowList&r)
    {
        return l.cardList == r.cardList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAYooFollowList&l, const ONAYooFollowList&r)
    {
        return !(l == r);
    }

    struct ONAYooEmpty : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAYooEmpty";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        ONAYooEmpty()
        :title(""),subTitle(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            subTitle = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(subTitle, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(subTitle, 1, true);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string title;
        std::string subTitle;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAYooEmpty&l, const ONAYooEmpty&r)
    {
        return l.title == r.title && l.subTitle == r.subTitle && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAYooEmpty&l, const ONAYooEmpty&r)
    {
        return !(l == r);
    }

    struct ONAYooRecommendItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAYooRecommendItem";
        }
        static string MD5()
        {
            return "7afccb5d6138a012ecfa48d4a970b3a3";
        }
        ONAYooRecommendItem()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(user, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(user, 1, true);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(user,"user");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(user, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::Poster poster;
        jce::ActorInfo user;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAYooRecommendItem&l, const ONAYooRecommendItem&r)
    {
        return l.poster == r.poster && l.user == r.user && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAYooRecommendItem&l, const ONAYooRecommendItem&r)
    {
        return !(l == r);
    }

    struct ONAYooRecommendGroup : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAYooRecommendGroup";
        }
        static string MD5()
        {
            return "c9c3e84269cc5f7b6a6d0678381a9dc8";
        }
        ONAYooRecommendGroup()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(recommendList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(recommendList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(recommendList,"recommendList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(recommendList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::ONAYooRecommendItem> recommendList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAYooRecommendGroup&l, const ONAYooRecommendGroup&r)
    {
        return l.recommendList == r.recommendList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAYooRecommendGroup&l, const ONAYooRecommendGroup&r)
    {
        return !(l == r);
    }

    struct DokiFeedPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiFeedPoster";
        }
        static string MD5()
        {
            return "1e5738705b9984d8c5f3373562c82043";
        }
        DokiFeedPoster()
        :posterUrl(""),type(0),title(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            posterUrl = "";
            type = 0;
            title = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(posterUrl, 0);
            _os.write(type, 1);
            _os.write(title, 2);
            _os.write(author, 3);
            _os.write(action, 4);
            _os.write(reportKey, 5);
            _os.write(reportParams, 6);
            _os.write(imgFaceArea, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(posterUrl, 0, false);
            _is.read(type, 1, false);
            _is.read(title, 2, false);
            _is.read(author, 3, false);
            _is.read(action, 4, false);
            _is.read(reportKey, 5, false);
            _is.read(reportParams, 6, false);
            _is.read(imgFaceArea, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(posterUrl,"posterUrl");
            _ds.display(type,"type");
            _ds.display(title,"title");
            _ds.display(author,"author");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(imgFaceArea,"imgFaceArea");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(posterUrl, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(author, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(imgFaceArea, false);
            return _os;
        }
    public:
        std::string posterUrl;
        taf::Int32 type;
        std::string title;
        jce::ActorInfo author;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
        jce::ImgFaceArea imgFaceArea;
    };
    inline bool operator==(const DokiFeedPoster&l, const DokiFeedPoster&r)
    {
        return l.posterUrl == r.posterUrl && l.type == r.type && l.title == r.title && l.author == r.author && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.imgFaceArea == r.imgFaceArea;
    }
    inline bool operator!=(const DokiFeedPoster&l, const DokiFeedPoster&r)
    {
        return !(l == r);
    }

    struct MultiPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MultiPoster";
        }
        static string MD5()
        {
            return "648412ebe8b5b94e811aba3c1a041deb";
        }
        MultiPoster()
        :groupTitle(""),groupActionText(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            groupTitle = "";
            groupActionText = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(groupTitle, 0);
            _os.write(groupActionText, 1);
            _os.write(groupAction, 2);
            _os.write(posterList, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(groupTitle, 0, false);
            _is.read(groupActionText, 1, false);
            _is.read(groupAction, 2, false);
            _is.read(posterList, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(groupTitle,"groupTitle");
            _ds.display(groupActionText,"groupActionText");
            _ds.display(groupAction,"groupAction");
            _ds.display(posterList,"posterList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(groupTitle, true);
            _ds.displaySimple(groupActionText, true);
            _ds.displaySimple(groupAction, true);
            _ds.displaySimple(posterList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string groupTitle;
        std::string groupActionText;
        jce::Action groupAction;
        vector<jce::Poster> posterList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const MultiPoster&l, const MultiPoster&r)
    {
        return l.groupTitle == r.groupTitle && l.groupActionText == r.groupActionText && l.groupAction == r.groupAction && l.posterList == r.posterList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const MultiPoster&l, const MultiPoster&r)
    {
        return !(l == r);
    }

    struct KnowledgePayBarVipOnlyInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.KnowledgePayBarVipOnlyInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        KnowledgePayBarVipOnlyInfo()
        :needloginTips(""),loginedNonVipTips("")
        {
        }
        void resetDefautlt()
        {
            needloginTips = "";
            loginedNonVipTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(needloginTips, 0);
            _os.write(loginedNonVipTips, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(needloginTips, 0, false);
            _is.read(loginedNonVipTips, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(needloginTips,"needloginTips");
            _ds.display(loginedNonVipTips,"loginedNonVipTips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(needloginTips, true);
            _ds.displaySimple(loginedNonVipTips, false);
            return _os;
        }
    public:
        std::string needloginTips;
        std::string loginedNonVipTips;
    };
    inline bool operator==(const KnowledgePayBarVipOnlyInfo&l, const KnowledgePayBarVipOnlyInfo&r)
    {
        return l.needloginTips == r.needloginTips && l.loginedNonVipTips == r.loginedNonVipTips;
    }
    inline bool operator!=(const KnowledgePayBarVipOnlyInfo&l, const KnowledgePayBarVipOnlyInfo&r)
    {
        return !(l == r);
    }

    struct KnowledgePayBarSingleInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.KnowledgePayBarSingleInfo";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        KnowledgePayBarSingleInfo()
        :needloginTips(""),loginedNonVipTips(""),loginedIsVipTips("")
        {
        }
        void resetDefautlt()
        {
            needloginTips = "";
            loginedNonVipTips = "";
            loginedIsVipTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(needloginTips, 0);
            _os.write(loginedNonVipTips, 1);
            _os.write(loginedIsVipTips, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(needloginTips, 0, false);
            _is.read(loginedNonVipTips, 1, false);
            _is.read(loginedIsVipTips, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(needloginTips,"needloginTips");
            _ds.display(loginedNonVipTips,"loginedNonVipTips");
            _ds.display(loginedIsVipTips,"loginedIsVipTips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(needloginTips, true);
            _ds.displaySimple(loginedNonVipTips, true);
            _ds.displaySimple(loginedIsVipTips, false);
            return _os;
        }
    public:
        std::string needloginTips;
        std::string loginedNonVipTips;
        std::string loginedIsVipTips;
    };
    inline bool operator==(const KnowledgePayBarSingleInfo&l, const KnowledgePayBarSingleInfo&r)
    {
        return l.needloginTips == r.needloginTips && l.loginedNonVipTips == r.loginedNonVipTips && l.loginedIsVipTips == r.loginedIsVipTips;
    }
    inline bool operator!=(const KnowledgePayBarSingleInfo&l, const KnowledgePayBarSingleInfo&r)
    {
        return !(l == r);
    }

    struct ActorData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ActorData";
        }
        static string MD5()
        {
            return "da37e18647cd990eb0be1c457f434b84";
        }
        ActorData()
        :secondLine(""),thirdLine("")
        {
        }
        void resetDefautlt()
        {
            secondLine = "";
            thirdLine = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actorInfo, 0);
            _os.write(secondLine, 1);
            _os.write(thirdLine, 2);
            _os.write(actorCircleColors, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actorInfo, 0, true);
            _is.read(secondLine, 1, false);
            _is.read(thirdLine, 2, false);
            _is.read(actorCircleColors, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actorInfo,"actorInfo");
            _ds.display(secondLine,"secondLine");
            _ds.display(thirdLine,"thirdLine");
            _ds.display(actorCircleColors,"actorCircleColors");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actorInfo, true);
            _ds.displaySimple(secondLine, true);
            _ds.displaySimple(thirdLine, true);
            _ds.displaySimple(actorCircleColors, false);
            return _os;
        }
    public:
        jce::ActorInfo actorInfo;
        std::string secondLine;
        std::string thirdLine;
        vector<std::string> actorCircleColors;
    };
    inline bool operator==(const ActorData&l, const ActorData&r)
    {
        return l.actorInfo == r.actorInfo && l.secondLine == r.secondLine && l.thirdLine == r.thirdLine && l.actorCircleColors == r.actorCircleColors;
    }
    inline bool operator!=(const ActorData&l, const ActorData&r)
    {
        return !(l == r);
    }

    struct PromotionAppDetail : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PromotionAppDetail";
        }
        static string MD5()
        {
            return "faa7a569d92323c1a10116920b693095";
        }
        PromotionAppDetail()
        :title(""),imageUrl(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            imageUrl = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(imageUrl, 1);
            _os.write(action, 2);
            _os.write(appInfo, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(imageUrl, 1, false);
            _is.read(action, 2, false);
            _is.read(appInfo, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(action,"action");
            _ds.display(appInfo,"appInfo");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(appInfo, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string title;
        std::string imageUrl;
        jce::Action action;
        jce::AppInfo appInfo;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const PromotionAppDetail&l, const PromotionAppDetail&r)
    {
        return l.title == r.title && l.imageUrl == r.imageUrl && l.action == r.action && l.appInfo == r.appInfo && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const PromotionAppDetail&l, const PromotionAppDetail&r)
    {
        return !(l == r);
    }

    struct TopicLeftImageCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TopicLeftImageCard";
        }
        static string MD5()
        {
            return "6ae88755cd8b3b8678dd8ce6ea35d0f0";
        }
        TopicLeftImageCard()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::Poster poster;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const TopicLeftImageCard&l, const TopicLeftImageCard&r)
    {
        return l.poster == r.poster && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const TopicLeftImageCard&l, const TopicLeftImageCard&r)
    {
        return !(l == r);
    }

    struct TopicCoverPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TopicCoverPoster";
        }
        static string MD5()
        {
            return "703278c7b829bb111b4fe47be7359ed5";
        }
        TopicCoverPoster()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
            _os.write(imageUrls, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
            _is.read(imageUrls, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(imageUrls,"imageUrls");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(imageUrls, false);
            return _os;
        }
    public:
        jce::Poster poster;
        std::string reportKey;
        std::string reportParams;
        vector<std::string> imageUrls;
    };
    inline bool operator==(const TopicCoverPoster&l, const TopicCoverPoster&r)
    {
        return l.poster == r.poster && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.imageUrls == r.imageUrls;
    }
    inline bool operator!=(const TopicCoverPoster&l, const TopicCoverPoster&r)
    {
        return !(l == r);
    }


}

#define jce_ExtraReportKV_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.extraReportKey,b.extraReportKey);jce_copy_struct(a.extraReportParam,b.extraReportParam);jce_copy_struct(a.reportEventId,b.reportEventId);

#define jce_Action_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.url,b.url);jce_copy_struct(a.cacheType,b.cacheType);jce_copy_struct(a.preReadType,b.preReadType);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.extraReportKVs,b.extraReportKVs);jce_copy_struct(a.reportEventId,b.reportEventId);

#define jce_MarkLabel_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.position,b.position);jce_copy_struct(a.bgColor,b.bgColor);jce_copy_struct(a.primeText,b.primeText);jce_copy_struct(a.minorText,b.minorText);jce_copy_struct(a.markImageUrl,b.markImageUrl);jce_copy_struct(a.optType,b.optType);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.thirdText,b.thirdText);

#define jce_SimplePoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.imgUrl,b.imgUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.report,b.report);jce_copy_struct(a.markLabel,b.markLabel);

#define jce_BusinessData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.businessType,b.businessType);jce_copy_struct(a.data,b.data);

#define jce_ActionBarInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.bgColor,b.bgColor);jce_copy_struct(a.action,b.action);jce_copy_struct(a.imgUrl,b.imgUrl);jce_copy_struct(a.textColor,b.textColor);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.titleForSelected,b.titleForSelected);jce_copy_struct(a.bgColorForSelected,b.bgColorForSelected);jce_copy_struct(a.imgUrlForSelected,b.imgUrlForSelected);jce_copy_struct(a.textColorForSelected,b.textColorForSelected);jce_copy_struct(a.extBusinessInfo,b.extBusinessInfo);jce_copy_struct(a.adSkinInfo,b.adSkinInfo);

#define jce_KVActionBarItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemKey,b.itemKey);jce_copy_struct(a.itemValue,b.itemValue);

#define jce_ImageAction_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.action,b.action);

#define jce_TextAction_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.text,b.text);jce_copy_struct(a.textColor,b.textColor);jce_copy_struct(a.action,b.action);jce_copy_struct(a.subText,b.subText);jce_copy_struct(a.subTextColor,b.subTextColor);

#define jce_PicData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imgUrl,b.imgUrl);jce_copy_struct(a.thumbUrl,b.thumbUrl);jce_copy_struct(a.imgType,b.imgType);

#define jce_MiniProgramInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.programName,b.programName);jce_copy_struct(a.path,b.path);

#define jce_ShareItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.shareUrl,b.shareUrl);jce_copy_struct(a.shareTitle,b.shareTitle);jce_copy_struct(a.shareSubtitle,b.shareSubtitle);jce_copy_struct(a.shareImgUrl,b.shareImgUrl);jce_copy_struct(a.circleShareKey,b.circleShareKey);jce_copy_struct(a.shareSingleTitle,b.shareSingleTitle);jce_copy_struct(a.shareContent,b.shareContent);jce_copy_struct(a.shareContentTail,b.shareContentTail);jce_copy_struct(a.shareStyle,b.shareStyle);jce_copy_struct(a.sharePicList,b.sharePicList);jce_copy_struct(a.miniProgramInfo,b.miniProgramInfo);jce_copy_struct(a.captionKey,b.captionKey);jce_copy_struct(a.shareIconType,b.shareIconType);jce_copy_struct(a.knowledgeKey,b.knowledgeKey);

#define jce_VoteData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.likeNumber,b.likeNumber);jce_copy_struct(a.votedCount,b.votedCount);jce_copy_struct(a.voteLimit,b.voteLimit);jce_copy_struct(a.voteKey,b.voteKey);jce_copy_struct(a.unlikeNumber,b.unlikeNumber);jce_copy_struct(a.voteAction,b.voteAction);

#define jce_PosterExpansion_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.operationType,b.operationType);jce_copy_struct(a.tagType,b.tagType);jce_copy_struct(a.tagId,b.tagId);

#define jce_Poster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.firstLine,b.firstLine);jce_copy_struct(a.secondLine,b.secondLine);jce_copy_struct(a.thirdLine,b.thirdLine);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.playCount,b.playCount);jce_copy_struct(a.action,b.action);jce_copy_struct(a.imageUiType,b.imageUiType);jce_copy_struct(a.rating,b.rating);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.voteData,b.voteData);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.configstrs,b.configstrs);jce_copy_struct(a.playCountL,b.playCountL);jce_copy_struct(a.replaceType,b.replaceType);jce_copy_struct(a.replaceKey,b.replaceKey);jce_copy_struct(a.style,b.style);jce_copy_struct(a.debugInfo,b.debugInfo);jce_copy_struct(a.adType,b.adType);jce_copy_struct(a.adKey,b.adKey);jce_copy_struct(a.adExtend,b.adExtend);jce_copy_struct(a.posterExpansion,b.posterExpansion);jce_copy_struct(a.fourthLine,b.fourthLine);jce_copy_struct(a.gifUrl,b.gifUrl);jce_copy_struct(a.pictureRatio,b.pictureRatio);jce_copy_struct(a.progress,b.progress);jce_copy_struct(a.titleColor,b.titleColor);

#define jce_KVItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemKey,b.itemKey);jce_copy_struct(a.itemValue,b.itemValue);jce_copy_struct(a.itemId,b.itemId);jce_copy_struct(a.itemValues,b.itemValues);

#define jce_VRSSItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.rssKey,b.rssKey);jce_copy_struct(a.rssInfo,b.rssInfo);jce_copy_struct(a.rssId,b.rssId);jce_copy_struct(a.rssState,b.rssState);jce_copy_struct(a.updatetime,b.updatetime);jce_copy_struct(a.shortTitle,b.shortTitle);jce_copy_struct(a.detailInfo,b.detailInfo);jce_copy_struct(a.update,b.update);jce_copy_struct(a.dataVersion,b.dataVersion);jce_copy_struct(a.rssType,b.rssType);

#define jce_UIPadding_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.leftPadding,b.leftPadding);jce_copy_struct(a.topPadding,b.topPadding);jce_copy_struct(a.bottomPadding,b.bottomPadding);jce_copy_struct(a.rightPadding,b.rightPadding);

#define jce_AppInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.downloadUrl,b.downloadUrl);jce_copy_struct(a.packageName,b.packageName);jce_copy_struct(a.name,b.name);jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.installTips,b.installTips);jce_copy_struct(a.openTips,b.openTips);jce_copy_struct(a.downloadingTips,b.downloadingTips);jce_copy_struct(a.bannerColor,b.bannerColor);jce_copy_struct(a.description,b.description);jce_copy_struct(a.openUrl,b.openUrl);jce_copy_struct(a.version,b.version);jce_copy_struct(a.apkSize,b.apkSize);jce_copy_struct(a.channel,b.channel);jce_copy_struct(a.appId,b.appId);jce_copy_struct(a.versionCode,b.versionCode);jce_copy_struct(a.baseInfo,b.baseInfo);jce_copy_struct(a.extInfo,b.extInfo);jce_copy_struct(a.via,b.via);jce_copy_struct(a.md5,b.md5);jce_copy_struct(a.lauchAppExtral,b.lauchAppExtral);jce_copy_struct(a.installPolicy,b.installPolicy);jce_copy_struct(a.playGameUrl,b.playGameUrl);jce_copy_struct(a.appType,b.appType);

#define jce_RoundRecommentItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.firstLine,b.firstLine);jce_copy_struct(a.secondLine,b.secondLine);jce_copy_struct(a.type,b.type);jce_copy_struct(a.itemID,b.itemID);jce_copy_struct(a.actionBarInfo,b.actionBarInfo);jce_copy_struct(a.report,b.report);jce_copy_struct(a.popTime,b.popTime);jce_copy_struct(a.durationTime,b.durationTime);jce_copy_struct(a.apkInfo,b.apkInfo);

#define jce_IconTagText_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.text,b.text);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.action,b.action);jce_copy_struct(a.imgUrl,b.imgUrl);jce_copy_struct(a.extraType,b.extraType);jce_copy_struct(a.actionBar,b.actionBar);jce_copy_struct(a.tagClass,b.tagClass);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.displayType,b.displayType);jce_copy_struct(a.vRSSItem,b.vRSSItem);jce_copy_struct(a.type,b.type);jce_copy_struct(a.adHotWordInfo,b.adHotWordInfo);jce_copy_struct(a.formattedTime,b.formattedTime);jce_copy_struct(a.recommendItem,b.recommendItem);

#define jce_TempletItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemType,b.itemType);jce_copy_struct(a.data,b.data);jce_copy_struct(a.debugInfo,b.debugInfo);

#define jce_TempletLine_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lineId,b.lineId);jce_copy_struct(a.groupId,b.groupId);jce_copy_struct(a.item,b.item);jce_copy_struct(a.increaseId,b.increaseId);

#define jce_ChannelTriggerType_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.triggerName,b.triggerName);jce_copy_struct(a.index,b.index);

#define jce_ChannelTrigger_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.channelTriggerType,b.channelTriggerType);jce_copy_struct(a.prefixId,b.prefixId);jce_copy_struct(a.index,b.index);

#define jce_ChannelItemInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.viewType,b.viewType);jce_copy_struct(a.param,b.param);jce_copy_struct(a.channelBusiness,b.channelBusiness);

#define jce_TabBarItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.text,b.text);jce_copy_struct(a.normalTextColor,b.normalTextColor);jce_copy_struct(a.selectedTextColor,b.selectedTextColor);jce_copy_struct(a.normalIconURL,b.normalIconURL);jce_copy_struct(a.selectedIconURL,b.selectedIconURL);

#define jce_TabBarItemsConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.backgroundColor,b.backgroundColor);jce_copy_struct(a.backgroundImageURL,b.backgroundImageURL);jce_copy_struct(a.tabBarItemsMap,b.tabBarItemsMap);

#define jce_ChannelItemConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.backgroundColor,b.backgroundColor);jce_copy_struct(a.textSelectColor,b.textSelectColor);jce_copy_struct(a.textNormalColor,b.textNormalColor);jce_copy_struct(a.searchBarColor,b.searchBarColor);jce_copy_struct(a.iconColor,b.iconColor);jce_copy_struct(a.animationFileUrl,b.animationFileUrl);jce_copy_struct(a.animationPlayTimes,b.animationPlayTimes);jce_copy_struct(a.animationShowLimit,b.animationShowLimit);jce_copy_struct(a.bgImageUrl,b.bgImageUrl);jce_copy_struct(a.expandConfig,b.expandConfig);jce_copy_struct(a.tabBarConfig,b.tabBarConfig);jce_copy_struct(a.textImageUrl,b.textImageUrl);

#define jce_ChannelInsertInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.position,b.position);jce_copy_struct(a.insertTime,b.insertTime);

#define jce_ChannelInsertItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.info,b.info);jce_copy_struct(a.normalTitle,b.normalTitle);jce_copy_struct(a.selectedTitle,b.selectedTitle);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ChannelListItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.id,b.id);jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.isHead,b.isHead);jce_copy_struct(a.pos,b.pos);jce_copy_struct(a.searchType,b.searchType);jce_copy_struct(a.subChannelListItem,b.subChannelListItem);jce_copy_struct(a.timeOut,b.timeOut);jce_copy_struct(a.labels,b.labels);jce_copy_struct(a.createdTime,b.createdTime);jce_copy_struct(a.searchTags,b.searchTags);jce_copy_struct(a.searchDatakey,b.searchDatakey);jce_copy_struct(a.showLastReadPositionFlag,b.showLastReadPositionFlag);jce_copy_struct(a.insertNewLineProgress,b.insertNewLineProgress);jce_copy_struct(a.headerVisiblityFlag,b.headerVisiblityFlag);jce_copy_struct(a.type,b.type);jce_copy_struct(a.channelTrigger,b.channelTrigger);jce_copy_struct(a.channelItemInfo,b.channelItemInfo);jce_copy_struct(a.isFixPos,b.isFixPos);jce_copy_struct(a.channelItemConfig,b.channelItemConfig);jce_copy_struct(a.categoryIdList,b.categoryIdList);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.channelInsertItem,b.channelInsertItem);jce_copy_struct(a.subDataKey,b.subDataKey);

#define jce_ChannelCategory_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.name,b.name);

#define jce_Image_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.width,b.width);jce_copy_struct(a.height,b.height);jce_copy_struct(a.color,b.color);

#define jce_CircleShortVideoUrl_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.h5Url,b.h5Url);jce_copy_struct(a.time,b.time);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.playUrl,b.playUrl);jce_copy_struct(a.description,b.description);jce_copy_struct(a.isDemoVideo,b.isDemoVideo);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.originVid,b.originVid);jce_copy_struct(a.videoFileSize,b.videoFileSize);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.title,b.title);jce_copy_struct(a.originCid,b.originCid);jce_copy_struct(a.immersiveAction,b.immersiveAction);

#define jce_VideoImage_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.imagePreUrl,b.imagePreUrl);jce_copy_struct(a.videoFlag,b.videoFlag);jce_copy_struct(a.action,b.action);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.image,b.image);jce_copy_struct(a.imagePre,b.imagePre);jce_copy_struct(a.video,b.video);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_LBSInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poiName,b.poiName);jce_copy_struct(a.lon,b.lon);jce_copy_struct(a.lat,b.lat);jce_copy_struct(a.address,b.address);

#define jce_CalendarItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.isFullDay,b.isFullDay);jce_copy_struct(a.description,b.description);

#define jce_VideoAttentItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.attentKey,b.attentKey);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.attentState,b.attentState);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.updatetime,b.updatetime);jce_copy_struct(a.shortTitle,b.shortTitle);jce_copy_struct(a.attentFrom,b.attentFrom);jce_copy_struct(a.calendarItem,b.calendarItem);jce_copy_struct(a.clickedTitle,b.clickedTitle);

#define jce_NewAttentKey_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.attentFrom,b.attentFrom);

#define jce_NewAttentItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.attentKey,b.attentKey);jce_copy_struct(a.attentState,b.attentState);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.shortTitle,b.shortTitle);jce_copy_struct(a.updateTime,b.updateTime);

#define jce_AttentPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.style,b.style);jce_copy_struct(a.showTime,b.showTime);jce_copy_struct(a.attentContentColor,b.attentContentColor);jce_copy_struct(a.attentBgColor,b.attentBgColor);

#define jce_GridItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.text,b.text);jce_copy_struct(a.action,b.action);jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_BatchData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.optType,b.optType);jce_copy_struct(a.dataType,b.dataType);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageNum,b.pageNum);jce_copy_struct(a.autoRefresh,b.autoRefresh);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.tips,b.tips);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_BasicVideoInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.title,b.title);jce_copy_struct(a.posterUrl,b.posterUrl);

#define jce_LanguageInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.name,b.name);

#define jce_LanguageSwitchInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.languageId,b.languageId);jce_copy_struct(a.action,b.action);jce_copy_struct(a.vid,b.vid);

#define jce_VipDownloadRightConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actionBarInfo,b.actionBarInfo);

#define jce_VipPlayerTipsConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.topText,b.topText);jce_copy_struct(a.rightButtonText,b.rightButtonText);jce_copy_struct(a.rightButtonMarkText,b.rightButtonMarkText);jce_copy_struct(a.rightButtonMarkImageUrl,b.rightButtonMarkImageUrl);jce_copy_struct(a.topRightTitleText,b.topRightTitleText);

#define jce_VideoItemExtra_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.nextVideoKey,b.nextVideoKey);jce_copy_struct(a.nextAction,b.nextAction);jce_copy_struct(a.nextCoverKey,b.nextCoverKey);jce_copy_struct(a.isHaveBubbleDM,b.isHaveBubbleDM);jce_copy_struct(a.playCopyRightTip,b.playCopyRightTip);jce_copy_struct(a.videoFileSize,b.videoFileSize);jce_copy_struct(a.tryWatchBtnTitle,b.tryWatchBtnTitle);jce_copy_struct(a.videoFlag,b.videoFlag);jce_copy_struct(a.isHaveTrailerVideo,b.isHaveTrailerVideo);jce_copy_struct(a.livePollDataKey,b.livePollDataKey);jce_copy_struct(a.liveStatus,b.liveStatus);jce_copy_struct(a.liveAttentNum,b.liveAttentNum);jce_copy_struct(a.liveOnlineNum,b.liveOnlineNum);jce_copy_struct(a.videoTitleUiType,b.videoTitleUiType);jce_copy_struct(a.page,b.page);jce_copy_struct(a.channelId,b.channelId);jce_copy_struct(a.style,b.style);jce_copy_struct(a.complaintAction,b.complaintAction);jce_copy_struct(a.languageSwitchInfos,b.languageSwitchInfos);jce_copy_struct(a.nextVideoPoster,b.nextVideoPoster);jce_copy_struct(a.audioFileSize,b.audioFileSize);jce_copy_struct(a.vipPlayerTipsConfig,b.vipPlayerTipsConfig);

#define jce_VideoPlayReportInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.autoPlayReportKey,b.autoPlayReportKey);jce_copy_struct(a.autoPlayReportParams,b.autoPlayReportParams);jce_copy_struct(a.detailPlayReportKey,b.detailPlayReportKey);jce_copy_struct(a.detailPlayReportParams,b.detailPlayReportParams);

#define jce_VideoItemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.payStatus,b.payStatus);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.skipStart,b.skipStart);jce_copy_struct(a.skipEnd,b.skipEnd);jce_copy_struct(a.isTrailor,b.isTrailor);jce_copy_struct(a.action,b.action);jce_copy_struct(a.keyPointList,b.keyPointList);jce_copy_struct(a.title,b.title);jce_copy_struct(a.titleMarkLabelList,b.titleMarkLabelList);jce_copy_struct(a.playCopyRight,b.playCopyRight);jce_copy_struct(a.webPlayUrl,b.webPlayUrl);jce_copy_struct(a.downloadCopyRight,b.downloadCopyRight);jce_copy_struct(a.isIpLimit,b.isIpLimit);jce_copy_struct(a.DMContentKey,b.DMContentKey);jce_copy_struct(a.isHaveDM,b.isHaveDM);jce_copy_struct(a.DMIsOpen,b.DMIsOpen);jce_copy_struct(a.horizontalPosterImgUrl,b.horizontalPosterImgUrl);jce_copy_struct(a.shareUrl,b.shareUrl);jce_copy_struct(a.shareTitle,b.shareTitle);jce_copy_struct(a.shareSubtitle,b.shareSubtitle);jce_copy_struct(a.shareImgUrl,b.shareImgUrl);jce_copy_struct(a.isHaveInteract,b.isHaveInteract);jce_copy_struct(a.circleShareKey,b.circleShareKey);jce_copy_struct(a.isNoStroeWatchedHistory,b.isNoStroeWatchedHistory);jce_copy_struct(a.watchRecordPoster,b.watchRecordPoster);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.isVideoOverview,b.isVideoOverview);jce_copy_struct(a.videoType,b.videoType);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.parentId,b.parentId);jce_copy_struct(a.tryPlayTime,b.tryPlayTime);jce_copy_struct(a.videoShowFlags,b.videoShowFlags);jce_copy_struct(a.videoEndRecommendKey,b.videoEndRecommendKey);jce_copy_struct(a.specialOpt,b.specialOpt);jce_copy_struct(a.nickName,b.nickName);jce_copy_struct(a.referKeys,b.referKeys);jce_copy_struct(a.streamRatio,b.streamRatio);jce_copy_struct(a.etraData,b.etraData);jce_copy_struct(a.playReportInfo,b.playReportInfo);jce_copy_struct(a.episodeNum,b.episodeNum);jce_copy_struct(a.castPolicy,b.castPolicy);jce_copy_struct(a.sceneInformation,b.sceneInformation);jce_copy_struct(a.pUgcKnowledgeType,b.pUgcKnowledgeType);jce_copy_struct(a.promotionAppKey,b.promotionAppKey);jce_copy_struct(a.pUgcPayBarPromationTips,b.pUgcPayBarPromationTips);jce_copy_struct(a.fullIconAction,b.fullIconAction);

#define jce_CoverItemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.date,b.date);jce_copy_struct(a.num,b.num);jce_copy_struct(a.payStatus,b.payStatus);jce_copy_struct(a.playCopyRight,b.playCopyRight);jce_copy_struct(a.downloadCopyRight,b.downloadCopyRight);jce_copy_struct(a.cacheDataKey,b.cacheDataKey);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.videoShowFlags,b.videoShowFlags);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.parentId,b.parentId);jce_copy_struct(a.nextVideoAction,b.nextVideoAction);jce_copy_struct(a.nextVideoPoster,b.nextVideoPoster);jce_copy_struct(a.albumDate,b.albumDate);jce_copy_struct(a.albumIndex,b.albumIndex);

#define jce_ColumnItemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.date,b.date);jce_copy_struct(a.num,b.num);jce_copy_struct(a.payStatus,b.payStatus);jce_copy_struct(a.playCopyRight,b.playCopyRight);jce_copy_struct(a.downloadCopyRight,b.downloadCopyRight);jce_copy_struct(a.cacheDataKey,b.cacheDataKey);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.videoShowFlags,b.videoShowFlags);jce_copy_struct(a.parentId,b.parentId);

#define jce_ExpansionData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.introKey,b.introKey);jce_copy_struct(a.vrssKey,b.vrssKey);

#define jce_VideoMoreDetails_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lidNodeMap,b.lidNodeMap);jce_copy_struct(a.cidNodeMap,b.cidNodeMap);jce_copy_struct(a.expansionMap,b.expansionMap);jce_copy_struct(a.vrssItemMap,b.vrssItemMap);

#define jce_LoadingConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.bgColor,b.bgColor);jce_copy_struct(a.speedTextColor,b.speedTextColor);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.configId,b.configId);jce_copy_struct(a.showTimes,b.showTimes);

#define jce_VideoDataList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.videoList,b.videoList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isAllData,b.isAllData);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.belongKey,b.belongKey);jce_copy_struct(a.downloadCopyRight,b.downloadCopyRight);jce_copy_struct(a.cacheDataKey,b.cacheDataKey);jce_copy_struct(a.moduleTitle,b.moduleTitle);jce_copy_struct(a.batchData,b.batchData);jce_copy_struct(a.priority,b.priority);jce_copy_struct(a.dataType,b.dataType);jce_copy_struct(a.cacheItemsCount,b.cacheItemsCount);jce_copy_struct(a.nextVideoKey,b.nextVideoKey);jce_copy_struct(a.nextAction,b.nextAction);jce_copy_struct(a.nextTipsPoster,b.nextTipsPoster);jce_copy_struct(a.nextCoverKey,b.nextCoverKey);jce_copy_struct(a.hasPreDownload,b.hasPreDownload);jce_copy_struct(a.loadingConfig,b.loadingConfig);jce_copy_struct(a.updateDetail,b.updateDetail);jce_copy_struct(a.extraInfoFlag,b.extraInfoFlag);jce_copy_struct(a.vipPlayerTipsConfig,b.vipPlayerTipsConfig);

#define jce_CoverDataList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.coverList,b.coverList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.isAllData,b.isAllData);jce_copy_struct(a.dataType,b.dataType);jce_copy_struct(a.batchData,b.batchData);jce_copy_struct(a.priority,b.priority);

#define jce_LiveVideoItemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.streamId,b.streamId);jce_copy_struct(a.payStatus,b.payStatus);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.keyPointList,b.keyPointList);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.titleMarkLabelList,b.titleMarkLabelList);jce_copy_struct(a.isIpLimit,b.isIpLimit);jce_copy_struct(a.DMContentKey,b.DMContentKey);jce_copy_struct(a.isHaveDM,b.isHaveDM);jce_copy_struct(a.DMIsOpen,b.DMIsOpen);jce_copy_struct(a.horizontalPosterImgUrl,b.horizontalPosterImgUrl);jce_copy_struct(a.shareUrl,b.shareUrl);jce_copy_struct(a.shareTitle,b.shareTitle);jce_copy_struct(a.shareSubtitle,b.shareSubtitle);jce_copy_struct(a.shareImgUrl,b.shareImgUrl);jce_copy_struct(a.price,b.price);jce_copy_struct(a.vipPrice,b.vipPrice);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.isNoStroeWatchedHistory,b.isNoStroeWatchedHistory);jce_copy_struct(a.sharItem,b.sharItem);jce_copy_struct(a.streamRatio,b.streamRatio);jce_copy_struct(a.isHaveBubbleDM,b.isHaveBubbleDM);jce_copy_struct(a.extra,b.extra);

#define jce_PortraitInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actorName,b.actorName);jce_copy_struct(a.actorId,b.actorId);jce_copy_struct(a.faceImageUrl,b.faceImageUrl);jce_copy_struct(a.detailInfo,b.detailInfo);jce_copy_struct(a.voteData,b.voteData);jce_copy_struct(a.action,b.action);

#define jce_FanInvolveItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fanId,b.fanId);jce_copy_struct(a.fanAttendKey,b.fanAttendKey);jce_copy_struct(a.detailInfo,b.detailInfo);jce_copy_struct(a.relateFans,b.relateFans);jce_copy_struct(a.fansFlag,b.fansFlag);jce_copy_struct(a.fanType,b.fanType);jce_copy_struct(a.fanTitle,b.fanTitle);jce_copy_struct(a.faceImageUrl,b.faceImageUrl);jce_copy_struct(a.backgroundUrl,b.backgroundUrl);jce_copy_struct(a.moreAction,b.moreAction);jce_copy_struct(a.signCount,b.signCount);jce_copy_struct(a.signMoreAction,b.signMoreAction);jce_copy_struct(a.signedAction,b.signedAction);jce_copy_struct(a.artImageUrl,b.artImageUrl);

#define jce_UserBasicVipInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.isVip,b.isVip);jce_copy_struct(a.isAnnualVip,b.isAnnualVip);jce_copy_struct(a.level,b.level);jce_copy_struct(a.vipIcon,b.vipIcon);

#define jce_DegreeLabel_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.degree,b.degree);jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.tapAction,b.tapAction);

#define jce_IdentityInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.identityType,b.identityType);jce_copy_struct(a.richLabel,b.richLabel);

#define jce_ActorInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actorName,b.actorName);jce_copy_struct(a.actorId,b.actorId);jce_copy_struct(a.faceImageUrl,b.faceImageUrl);jce_copy_struct(a.detailInfo,b.detailInfo);jce_copy_struct(a.voteData,b.voteData);jce_copy_struct(a.action,b.action);jce_copy_struct(a.voteId,b.voteId);jce_copy_struct(a.voteSubjectId,b.voteSubjectId);jce_copy_struct(a.voteOptionId,b.voteOptionId);jce_copy_struct(a.nameMarkLable,b.nameMarkLable);jce_copy_struct(a.markLable,b.markLable);jce_copy_struct(a.fanItem,b.fanItem);jce_copy_struct(a.userBasicVipInfo,b.userBasicVipInfo);jce_copy_struct(a.acountType,b.acountType);jce_copy_struct(a.vrssItem,b.vrssItem);jce_copy_struct(a.actorAliases,b.actorAliases);jce_copy_struct(a.idType,b.idType);jce_copy_struct(a.medalInfo,b.medalInfo);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.userType,b.userType);jce_copy_struct(a.dokiDegreeInfo,b.dokiDegreeInfo);jce_copy_struct(a.adminDegreeInfo,b.adminDegreeInfo);jce_copy_struct(a.signatureText,b.signatureText);jce_copy_struct(a.animDegreeInfo,b.animDegreeInfo);jce_copy_struct(a.identityInfo,b.identityInfo);

#define jce_ActorList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.actorInfoList,b.actorInfoList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.groupKey,b.groupKey);

#define jce_VideoIntroduction_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.text,b.text);jce_copy_struct(a.actorInfo,b.actorInfo);jce_copy_struct(a.lineLabel,b.lineLabel);jce_copy_struct(a.datakey,b.datakey);jce_copy_struct(a.relateDataKey,b.relateDataKey);jce_copy_struct(a.detailInfo,b.detailInfo);jce_copy_struct(a.subhead,b.subhead);jce_copy_struct(a.action,b.action);jce_copy_struct(a.subMarkLabelList,b.subMarkLabelList);jce_copy_struct(a.subDetailInfo,b.subDetailInfo);jce_copy_struct(a.markLabelList,b.markLabelList);

#define jce_FilterOption_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.optionName,b.optionName);jce_copy_struct(a.optionValue,b.optionValue);jce_copy_struct(a.isSelected,b.isSelected);jce_copy_struct(a.type,b.type);jce_copy_struct(a.h5url,b.h5url);jce_copy_struct(a.clickReport,b.clickReport);jce_copy_struct(a.exposureReport,b.exposureReport);

#define jce_VideoFilterItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fileterItemKey,b.fileterItemKey);jce_copy_struct(a.optionList,b.optionList);jce_copy_struct(a.fileterName,b.fileterName);

#define jce_VideoFilter_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.filterItemList,b.filterItemList);jce_copy_struct(a.reportParam,b.reportParam);jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.exposureReport,b.exposureReport);

#define jce_LiveLotteryInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.bgColor,b.bgColor);jce_copy_struct(a.action,b.action);jce_copy_struct(a.desc,b.desc);

#define jce_LiveH5RichInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.icon,b.icon);jce_copy_struct(a.title,b.title);jce_copy_struct(a.desc,b.desc);jce_copy_struct(a.action,b.action);jce_copy_struct(a.imageUiType,b.imageUiType);jce_copy_struct(a.markLable,b.markLable);

#define jce_LiveVoteOptionInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.optionId,b.optionId);jce_copy_struct(a.title,b.title);jce_copy_struct(a.desc,b.desc);jce_copy_struct(a.voteCount,b.voteCount);jce_copy_struct(a.percent,b.percent);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.richType,b.richType);jce_copy_struct(a.action,b.action);

#define jce_LiveVoteSubject_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.optionType,b.optionType);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subjectId,b.subjectId);jce_copy_struct(a.options,b.options);jce_copy_struct(a.dataType,b.dataType);jce_copy_struct(a.desc,b.desc);jce_copy_struct(a.voteResultOptionIds,b.voteResultOptionIds);jce_copy_struct(a.voteOptionIds,b.voteOptionIds);jce_copy_struct(a.voteCount,b.voteCount);jce_copy_struct(a.subjectImage,b.subjectImage);jce_copy_struct(a.selectMax,b.selectMax);

#define jce_LiveVoteInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.voteId,b.voteId);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subjectList,b.subjectList);jce_copy_struct(a.desc,b.desc);jce_copy_struct(a.isFinish,b.isFinish);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.lotteryInfo,b.lotteryInfo);jce_copy_struct(a.isShare,b.isShare);jce_copy_struct(a.shareUrl,b.shareUrl);jce_copy_struct(a.shareTitle,b.shareTitle);jce_copy_struct(a.shareDesc,b.shareDesc);jce_copy_struct(a.shareImage,b.shareImage);

#define jce_InteractionInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.id,b.id);jce_copy_struct(a.title,b.title);jce_copy_struct(a.desc,b.desc);jce_copy_struct(a.pic,b.pic);jce_copy_struct(a.action,b.action);jce_copy_struct(a.transValue,b.transValue);jce_copy_struct(a.feedBorderColor,b.feedBorderColor);

#define jce_GiftOverRankItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.hostTips,b.hostTips);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.overTips,b.overTips);jce_copy_struct(a.keyType,b.keyType);jce_copy_struct(a.tipsColor,b.tipsColor);

#define jce_ApolloVoiceData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.voiceId,b.voiceId);jce_copy_struct(a.duration,b.duration);jce_copy_struct(a.permanent,b.permanent);jce_copy_struct(a.storageFlag,b.storageFlag);

#define jce_CommentParentInfoExtra_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commentId,b.commentId);jce_copy_struct(a.nickname,b.nickname);

#define jce_CommentItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commentId,b.commentId);jce_copy_struct(a.content,b.content);jce_copy_struct(a.time,b.time);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.parentId,b.parentId);jce_copy_struct(a.rootId,b.rootId);jce_copy_struct(a.msgId,b.msgId);jce_copy_struct(a.type,b.type);jce_copy_struct(a.upCount,b.upCount);jce_copy_struct(a.richType,b.richType);jce_copy_struct(a.imageList,b.imageList);jce_copy_struct(a.voteInfo,b.voteInfo);jce_copy_struct(a.lbsInfo,b.lbsInfo);jce_copy_struct(a.lotteryInfo,b.lotteryInfo);jce_copy_struct(a.h5RichInfo,b.h5RichInfo);jce_copy_struct(a.replyCount,b.replyCount);jce_copy_struct(a.oriReplyCount,b.oriReplyCount);jce_copy_struct(a.commentFlag,b.commentFlag);jce_copy_struct(a.oriParentId,b.oriParentId);jce_copy_struct(a.oriRootId,b.oriRootId);jce_copy_struct(a.showType,b.showType);jce_copy_struct(a.interInfo,b.interInfo);jce_copy_struct(a.upTime,b.upTime);jce_copy_struct(a.giftOverRankItem,b.giftOverRankItem);jce_copy_struct(a.topIndex,b.topIndex);jce_copy_struct(a.voiceData,b.voiceData);jce_copy_struct(a.status,b.status);jce_copy_struct(a.extraParentInfo,b.extraParentInfo);jce_copy_struct(a.richAction,b.richAction);

#define jce_SortAttentItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iAttentType,b.iAttentType);jce_copy_struct(a.sRid,b.sRid);jce_copy_struct(a.stItem,b.stItem);

#define jce_SortAttentItemList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vecSortedAttentList,b.vecSortedAttentList);

#define jce_WatchRecord_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.recordId,b.recordId);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.strTime,b.strTime);jce_copy_struct(a.uiDate,b.uiDate);jce_copy_struct(a.iHD,b.iHD);jce_copy_struct(a.playFrom,b.playFrom);jce_copy_struct(a.seriesText,b.seriesText);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.reportParam,b.reportParam);jce_copy_struct(a.isAutoPlay,b.isAutoPlay);jce_copy_struct(a.recordType,b.recordType);jce_copy_struct(a.fromCtx,b.fromCtx);jce_copy_struct(a.totalTime,b.totalTime);jce_copy_struct(a.totalWatchTime,b.totalWatchTime);jce_copy_struct(a.showLocation,b.showLocation);

#define jce_CacheItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.downloadRight,b.downloadRight);jce_copy_struct(a.fileSize,b.fileSize);jce_copy_struct(a.videoName,b.videoName);jce_copy_struct(a.isCharge,b.isCharge);jce_copy_struct(a.expansion,b.expansion);jce_copy_struct(a.index,b.index);jce_copy_struct(a.drmFlag,b.drmFlag);jce_copy_struct(a.streamRatio,b.streamRatio);jce_copy_struct(a.preStatus,b.preStatus);jce_copy_struct(a.preTime,b.preTime);jce_copy_struct(a.videoShowFlags,b.videoShowFlags);jce_copy_struct(a.videoFlag,b.videoFlag);jce_copy_struct(a.offlineLimitTime,b.offlineLimitTime);jce_copy_struct(a.preKey,b.preKey);jce_copy_struct(a.detailCode,b.detailCode);jce_copy_struct(a.detailTips,b.detailTips);jce_copy_struct(a.skipStart,b.skipStart);jce_copy_struct(a.skipEnd,b.skipEnd);jce_copy_struct(a.confirmDownloadToast,b.confirmDownloadToast);

#define jce_PreCacheRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.preTime,b.preTime);jce_copy_struct(a.preKey,b.preKey);

#define jce_RankItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.position,b.position);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.changeOrder,b.changeOrder);jce_copy_struct(a.action,b.action);

#define jce_MyCommentItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commentId,b.commentId);jce_copy_struct(a.content,b.content);jce_copy_struct(a.time,b.time);jce_copy_struct(a.voideImageUrl,b.voideImageUrl);jce_copy_struct(a.commentDataKey,b.commentDataKey);jce_copy_struct(a.videoTitle,b.videoTitle);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.upNumber,b.upNumber);jce_copy_struct(a.replyNumber,b.replyNumber);

#define jce_ShareToken_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sinaAccessToken,b.sinaAccessToken);

#define jce_HyperlinksKeyWord_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.word,b.word);jce_copy_struct(a.action,b.action);

#define jce_PersonalizeVideoItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.id,b.id);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.keyWordList,b.keyWordList);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.validTime,b.validTime);jce_copy_struct(a.playerImgUrl,b.playerImgUrl);jce_copy_struct(a.watched,b.watched);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_PursuitItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.headImageUrl,b.headImageUrl);jce_copy_struct(a.location,b.location);jce_copy_struct(a.tips,b.tips);

#define jce_DiscoveryTabItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemType,b.itemType);jce_copy_struct(a.bgImageUrl,b.bgImageUrl);jce_copy_struct(a.title,b.title);jce_copy_struct(a.titleColor,b.titleColor);jce_copy_struct(a.titleBgColor,b.titleBgColor);jce_copy_struct(a.subTitleColor,b.subTitleColor);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.userImageUrl,b.userImageUrl);jce_copy_struct(a.action,b.action);

#define jce_UIStyle_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.themeColor,b.themeColor);jce_copy_struct(a.subThemeColor,b.subThemeColor);jce_copy_struct(a.floatThemeColor,b.floatThemeColor);jce_copy_struct(a.fontColor,b.fontColor);jce_copy_struct(a.fontSize,b.fontSize);jce_copy_struct(a.contentGravity,b.contentGravity);jce_copy_struct(a.backgroundRes,b.backgroundRes);jce_copy_struct(a.x,b.x);jce_copy_struct(a.y,b.y);jce_copy_struct(a.minX,b.minX);jce_copy_struct(a.minY,b.minY);jce_copy_struct(a.maxX,b.maxX);jce_copy_struct(a.maxY,b.maxY);jce_copy_struct(a.xyScale,b.xyScale);

#define jce_GiftAnimation_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.animUrl,b.animUrl);jce_copy_struct(a.animDuration,b.animDuration);jce_copy_struct(a.animId,b.animId);

#define jce_LiveGiftItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.productId,b.productId);jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.payStatus,b.payStatus);jce_copy_struct(a.title,b.title);jce_copy_struct(a.des,b.des);jce_copy_struct(a.price,b.price);jce_copy_struct(a.animation,b.animation);jce_copy_struct(a.canUsedCount,b.canUsedCount);jce_copy_struct(a.addupStepCount,b.addupStepCount);jce_copy_struct(a.payFlag,b.payFlag);jce_copy_struct(a.payDes,b.payDes);jce_copy_struct(a.payPrice,b.payPrice);jce_copy_struct(a.activityId,b.activityId);jce_copy_struct(a.strToolUnit,b.strToolUnit);

#define jce_ActorRankItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.rankIndex,b.rankIndex);jce_copy_struct(a.actorinfo,b.actorinfo);jce_copy_struct(a.giftNumber,b.giftNumber);jce_copy_struct(a.giftImageUrl,b.giftImageUrl);jce_copy_struct(a.actorFlag,b.actorFlag);

#define jce_FollowTVPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.attentKey,b.attentKey);jce_copy_struct(a.shareItem,b.shareItem);

#define jce_ServerInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ip,b.ip);jce_copy_struct(a.netMode,b.netMode);jce_copy_struct(a.host,b.host);

#define jce_CommonDialogInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.content,b.content);jce_copy_struct(a.title,b.title);jce_copy_struct(a.left,b.left);jce_copy_struct(a.right,b.right);jce_copy_struct(a.leftAction,b.leftAction);jce_copy_struct(a.negativeAction,b.negativeAction);

#define jce_DynamicItemInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.redHotId,b.redHotId);jce_copy_struct(a.redHotVersion,b.redHotVersion);jce_copy_struct(a.redHotStatus,b.redHotStatus);jce_copy_struct(a.itemId,b.itemId);jce_copy_struct(a.tipsText,b.tipsText);jce_copy_struct(a.tipsIcon,b.tipsIcon);jce_copy_struct(a.selectedIconUrl,b.selectedIconUrl);jce_copy_struct(a.showLocation,b.showLocation);jce_copy_struct(a.signInTextMap,b.signInTextMap);

#define jce_RecommendReqExtInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.loadType,b.loadType);jce_copy_struct(a.refreshType,b.refreshType);jce_copy_struct(a.refreshContext,b.refreshContext);

#define jce_RecommendRespExtInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.timeout,b.timeout);jce_copy_struct(a.refreshWording,b.refreshWording);jce_copy_struct(a.historyReadFlag,b.historyReadFlag);jce_copy_struct(a.refreshContext,b.refreshContext);jce_copy_struct(a.tipsIconColor,b.tipsIconColor);

#define jce_EventValidateInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uniqueId,b.uniqueId);jce_copy_struct(a.eventType,b.eventType);jce_copy_struct(a.businessId,b.businessId);jce_copy_struct(a.frequency,b.frequency);jce_copy_struct(a.maxExposeCount,b.maxExposeCount);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_PullRefreshText_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.text,b.text);jce_copy_struct(a.textColor,b.textColor);jce_copy_struct(a.leftIconUrl,b.leftIconUrl);

#define jce_WidgetInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lottieUrl,b.lottieUrl);jce_copy_struct(a.aspectRatio,b.aspectRatio);jce_copy_struct(a.position,b.position);jce_copy_struct(a.scrollWithList,b.scrollWithList);jce_copy_struct(a.clickAreaXStart,b.clickAreaXStart);jce_copy_struct(a.clickAreaXEnd,b.clickAreaXEnd);jce_copy_struct(a.clickAction,b.clickAction);

#define jce_PullRefreshConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.bgColor,b.bgColor);jce_copy_struct(a.action,b.action);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.textList,b.textList);jce_copy_struct(a.bgImageUrl,b.bgImageUrl);jce_copy_struct(a.validateInfo,b.validateInfo);jce_copy_struct(a.pullAction,b.pullAction);jce_copy_struct(a.configType,b.configType);jce_copy_struct(a.bgAspectRatio,b.bgAspectRatio);jce_copy_struct(a.widget,b.widget);

#define jce_BigH5EventConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.validateInfo,b.validateInfo);jce_copy_struct(a.action,b.action);

#define jce_BannerEventConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.validateInfo,b.validateInfo);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.moreAction,b.moreAction);

#define jce_LottieEventConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.validateInfo,b.validateInfo);jce_copy_struct(a.lottieFileUrl,b.lottieFileUrl);jce_copy_struct(a.cycleTimes,b.cycleTimes);jce_copy_struct(a.playTimes,b.playTimes);

#define jce_PromotionEventInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bigBannerConfigs,b.bigBannerConfigs);jce_copy_struct(a.headBannerConfigs,b.headBannerConfigs);jce_copy_struct(a.footBannerConfigs,b.footBannerConfigs);jce_copy_struct(a.bigH5Configs,b.bigH5Configs);jce_copy_struct(a.lottieConfigs,b.lottieConfigs);jce_copy_struct(a.refreshConfigs,b.refreshConfigs);

#define jce_ChannelEventInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.eventType,b.eventType);jce_copy_struct(a.uniqueId,b.uniqueId);jce_copy_struct(a.version,b.version);jce_copy_struct(a.faceImageUrl,b.faceImageUrl);jce_copy_struct(a.moreAction,b.moreAction);

#define jce_DiscoveryEntryItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.title,b.title);jce_copy_struct(a.action,b.action);jce_copy_struct(a.itemType,b.itemType);

#define jce_LiveTabModuleInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.modType,b.modType);jce_copy_struct(a.title,b.title);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.subtitle,b.subtitle);jce_copy_struct(a.desc,b.desc);jce_copy_struct(a.timeOut,b.timeOut);jce_copy_struct(a.tabId,b.tabId);jce_copy_struct(a.dataType,b.dataType);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.showOnNav,b.showOnNav);jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.isSelected,b.isSelected);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.location,b.location);jce_copy_struct(a.unReadCount,b.unReadCount);jce_copy_struct(a.postionRange,b.postionRange);

#define jce_OptionItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.title,b.title);

#define jce_OptionGroup_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.optionList,b.optionList);

#define jce_GameDownloadItemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.apkInfo,b.apkInfo);jce_copy_struct(a.action,b.action);jce_copy_struct(a.sourceId,b.sourceId);

#define jce_VideoInfoPosterItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.videoItem,b.videoItem);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.actions,b.actions);jce_copy_struct(a.names,b.names);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.isAutoPlay,b.isAutoPlay);

#define jce_VideoKeyItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.lid,b.lid);

#define jce_LiveSubscribeInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actorImageUrl,b.actorImageUrl);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.pollDataKey,b.pollDataKey);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.markLabel,b.markLabel);jce_copy_struct(a.actors,b.actors);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.title,b.title);jce_copy_struct(a.action,b.action);

#define jce_RelatedRecommenVideoData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.streamId,b.streamId);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.action,b.action);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.praiseCnt,b.praiseCnt);jce_copy_struct(a.streamStyle,b.streamStyle);

#define jce_LiveRlativeRecommendVideoItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actor,b.actor);jce_copy_struct(a.videoInfos,b.videoInfos);

#define jce_PKGroupInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strGroupID,b.strGroupID);jce_copy_struct(a.strGroupName,b.strGroupName);jce_copy_struct(a.strGroupLogoPic,b.strGroupLogoPic);jce_copy_struct(a.lTotalRenqi,b.lTotalRenqi);jce_copy_struct(a.actorList,b.actorList);

#define jce_CommonVideoData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.vodVideoData,b.vodVideoData);jce_copy_struct(a.liveVideoData,b.liveVideoData);jce_copy_struct(a.attentItem,b.attentItem);

#define jce_CommonDownloadImageData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.url,b.url);jce_copy_struct(a.thumbUrl,b.thumbUrl);jce_copy_struct(a.imgType,b.imgType);

#define jce_IdData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sId,b.sId);jce_copy_struct(a.iType,b.iType);

#define jce_IdPraise_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sId,b.sId);jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.lPraiseNum,b.lPraiseNum);jce_copy_struct(a.sRid,b.sRid);jce_copy_struct(a.lRidPraiseNum,b.lRidPraiseNum);

#define jce_DefinitionAction_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.action,b.action);jce_copy_struct(a.actionOneApp,b.actionOneApp);jce_copy_struct(a.actionOneScheme,b.actionOneScheme);jce_copy_struct(a.actionOneH5Url,b.actionOneH5Url);jce_copy_struct(a.actionOneLabel,b.actionOneLabel);

#define jce_SpecailActionOne_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actionAppForAndroid,b.actionAppForAndroid);jce_copy_struct(a.actionAppForIOS,b.actionAppForIOS);jce_copy_struct(a.actionSchemeForAndroid,b.actionSchemeForAndroid);jce_copy_struct(a.actionSchemeForIOS,b.actionSchemeForIOS);jce_copy_struct(a.actionH5Url,b.actionH5Url);jce_copy_struct(a.actionLabel,b.actionLabel);

#define jce_SpecailActionTwo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.payState,b.payState);

#define jce_SpecialAction_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actionType,b.actionType);jce_copy_struct(a.actionOne,b.actionOne);jce_copy_struct(a.actionTwo,b.actionTwo);

#define jce_CircleUploadImageUrl_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.playTime,b.playTime);jce_copy_struct(a.url,b.url);jce_copy_struct(a.waterFlagUrl,b.waterFlagUrl);jce_copy_struct(a.handWriteInfo,b.handWriteInfo);jce_copy_struct(a.width,b.width);jce_copy_struct(a.height,b.height);jce_copy_struct(a.imgType,b.imgType);jce_copy_struct(a.thumbUrl,b.thumbUrl);jce_copy_struct(a.businessType,b.businessType);

#define jce_ChannelListPersonalizeData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.list,b.list);jce_copy_struct(a.createdTime,b.createdTime);jce_copy_struct(a.tips,b.tips);jce_copy_struct(a.seqKey,b.seqKey);

#define jce_Definition_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.value,b.value);jce_copy_struct(a.sName,b.sName);jce_copy_struct(a.lName,b.lName);

#define jce_MarketAttentItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.attentKey,b.attentKey);jce_copy_struct(a.attentState,b.attentState);

#define jce_MarketingAttentPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.type,b.type);jce_copy_struct(a.line,b.line);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.activityId,b.activityId);

#define jce_SPChannelItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.channelId,b.channelId);jce_copy_struct(a.isHead,b.isHead);

#define jce_SearchSmartItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.playBtn,b.playBtn);jce_copy_struct(a.action,b.action);jce_copy_struct(a.lineTag,b.lineTag);jce_copy_struct(a.clickReportKey,b.clickReportKey);

#define jce_CircleLikeInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.likeId,b.likeId);jce_copy_struct(a.userinfo,b.userinfo);jce_copy_struct(a.time,b.time);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_ImgFaceArea_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.xFloat,b.xFloat);jce_copy_struct(a.yFloat,b.yFloat);

#define jce_CircleMsgImageUrl_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.url,b.url);jce_copy_struct(a.thumbUrl,b.thumbUrl);jce_copy_struct(a.time,b.time);jce_copy_struct(a.imgType,b.imgType);jce_copy_struct(a.maskType,b.maskType);jce_copy_struct(a.aspectRatio,b.aspectRatio);jce_copy_struct(a.faceArea,b.faceArea);jce_copy_struct(a.businessType,b.businessType);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_CircleCommentFeed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.content,b.content);jce_copy_struct(a.time,b.time);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.parentUserInfo,b.parentUserInfo);jce_copy_struct(a.parentCommentId,b.parentCommentId);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.commentCount,b.commentCount);jce_copy_struct(a.likeCount,b.likeCount);jce_copy_struct(a.photos,b.photos);jce_copy_struct(a.action,b.action);jce_copy_struct(a.isLike,b.isLike);jce_copy_struct(a.displayLevel,b.displayLevel);jce_copy_struct(a.additionalStyle,b.additionalStyle);jce_copy_struct(a.hasMoreComments,b.hasMoreComments);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.extraInfo,b.extraInfo);jce_copy_struct(a.voiceData,b.voiceData);

#define jce_PosterList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiTag,b.uiTag);jce_copy_struct(a.posters,b.posters);jce_copy_struct(a.title,b.title);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.groupKey,b.groupKey);jce_copy_struct(a.groupAction,b.groupAction);

#define jce_SearchHotWordInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.timeStamp,b.timeStamp);jce_copy_struct(a.searchOperateHotWordList,b.searchOperateHotWordList);

#define jce_ScoreListItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.rankId,b.rankId);jce_copy_struct(a.rankBgImgUrl,b.rankBgImgUrl);jce_copy_struct(a.rankTitle,b.rankTitle);jce_copy_struct(a.medalBgImgUrl,b.medalBgImgUrl);jce_copy_struct(a.medalNums,b.medalNums);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_AttentActionBar_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actionBar,b.actionBar);jce_copy_struct(a.attentItem,b.attentItem);

#define jce_StarMeetInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.posterInfo,b.posterInfo);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.actorInfo,b.actorInfo);

#define jce_AgendaTime_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.year,b.year);jce_copy_struct(a.month,b.month);jce_copy_struct(a.date,b.date);jce_copy_struct(a.week,b.week);jce_copy_struct(a.timepoint,b.timepoint);

#define jce_StarTopicInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.topic,b.topic);jce_copy_struct(a.type,b.type);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.userImageUrl,b.userImageUrl);

#define jce_VideoBaseParams_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);

#define jce_HomeTabData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageType,b.pageType);jce_copy_struct(a.requestType,b.requestType);jce_copy_struct(a.tabName,b.tabName);jce_copy_struct(a.unSelectIcon,b.unSelectIcon);jce_copy_struct(a.selectIcon,b.selectIcon);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.selectColor,b.selectColor);jce_copy_struct(a.unSelectColor,b.unSelectColor);jce_copy_struct(a.lottieUrl,b.lottieUrl);

#define jce_MarkScore_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.score,b.score);jce_copy_struct(a.scoreWording,b.scoreWording);

#define jce_CommentNoticeContent_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.text,b.text);jce_copy_struct(a.headUrl,b.headUrl);jce_copy_struct(a.nickName,b.nickName);

#define jce_CommentNoticeItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.id,b.id);jce_copy_struct(a.index,b.index);jce_copy_struct(a.content,b.content);

#define jce_FeedVoteInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.action,b.action);jce_copy_struct(a.voteId,b.voteId);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.voteType,b.voteType);jce_copy_struct(a.voteItemInfos,b.voteItemInfos);

#define jce_FeedInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.feedType,b.feedType);jce_copy_struct(a.commentCount,b.commentCount);jce_copy_struct(a.likeCount,b.likeCount);jce_copy_struct(a.isLike,b.isLike);jce_copy_struct(a.action,b.action);

#define jce_ExploreTag_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.tagName,b.tagName);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.imgUrl,b.imgUrl);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_FrameRect_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.width,b.width);jce_copy_struct(a.height,b.height);jce_copy_struct(a.pointX,b.pointX);jce_copy_struct(a.pointY,b.pointY);

#define jce_FeedbackReason_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.reasonDataKey,b.reasonDataKey);jce_copy_struct(a.reason,b.reason);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParam,b.reportParam);jce_copy_struct(a.feedbackType,b.feedbackType);

#define jce_FeedbackBoard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.reasons,b.reasons);jce_copy_struct(a.mainTitle,b.mainTitle);jce_copy_struct(a.subTitle,b.subTitle);

#define jce_CaptionInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.captionId,b.captionId);jce_copy_struct(a.captionTime,b.captionTime);jce_copy_struct(a.caption,b.caption);jce_copy_struct(a.status,b.status);jce_copy_struct(a.captionDispearTime,b.captionDispearTime);

#define jce_PresentGiftParam_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.propsDataKey,b.propsDataKey);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.desc,b.desc);jce_copy_struct(a.unit,b.unit);

#define jce_FeedOMInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.omArticleId,b.omArticleId);jce_copy_struct(a.omArticleTitle,b.omArticleTitle);

#define jce_MultiLanguageInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.curLanguageId,b.curLanguageId);jce_copy_struct(a.allLanguages,b.allLanguages);jce_copy_struct(a.languageSwitchInfos,b.languageSwitchInfos);

#define jce_NavigationItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.navigationItemType,b.navigationItemType);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_Navigation_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.navigationItemList,b.navigationItemList);jce_copy_struct(a.defaultDataKey,b.defaultDataKey);

#define jce_VideoPosterInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dateString,b.dateString);jce_copy_struct(a.imgUrl,b.imgUrl);jce_copy_struct(a.videoTypeInfo,b.videoTypeInfo);jce_copy_struct(a.directorInfo,b.directorInfo);jce_copy_struct(a.mainActorInfo,b.mainActorInfo);jce_copy_struct(a.detailInfo,b.detailInfo);jce_copy_struct(a.videoTitle,b.videoTitle);

#define jce_DayVideoPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.videoPosterInfo,b.videoPosterInfo);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_DialogViewCopyWriting_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.content,b.content);

#define jce_ONASplitSpace_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.color,b.color);jce_copy_struct(a.height,b.height);

#define jce_PosterGroup_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.posterList,b.posterList);jce_copy_struct(a.groupIndex,b.groupIndex);

#define jce_ONAGalleryPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.posterList,b.posterList);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.insertPosterGroup,b.insertPosterGroup);jce_copy_struct(a.bottomPadding,b.bottomPadding);

#define jce_PickTaskItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.description,b.description);jce_copy_struct(a.taskType,b.taskType);

#define jce_ImmersivePromotionInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.text,b.text);jce_copy_struct(a.appInfo,b.appInfo);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.isPullGrowth,b.isPullGrowth);jce_copy_struct(a.pullGrowthProtocolType,b.pullGrowthProtocolType);

#define jce_PickInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.trackName,b.trackName);jce_copy_struct(a.trackSubject,b.trackSubject);jce_copy_struct(a.rank,b.rank);jce_copy_struct(a.totalPickCount,b.totalPickCount);jce_copy_struct(a.expandPullAppDesc,b.expandPullAppDesc);jce_copy_struct(a.pickAppInfo,b.pickAppInfo);jce_copy_struct(a.pickSwitch,b.pickSwitch);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.needCertify,b.needCertify);

#define jce_ImmersiveInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.action,b.action);jce_copy_struct(a.type,b.type);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.promotionInfo,b.promotionInfo);jce_copy_struct(a.floatPromotionInfo,b.floatPromotionInfo);jce_copy_struct(a.pickInfo,b.pickInfo);jce_copy_struct(a.immersiveAdInfo,b.immersiveAdInfo);

#define jce_ONABulletinBoardV2_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.tagTexts,b.tagTexts);jce_copy_struct(a.action,b.action);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.videoData,b.videoData);jce_copy_struct(a.isAutoPlayer,b.isAutoPlayer);jce_copy_struct(a.isLiveVideo,b.isLiveVideo);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.streamId,b.streamId);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.dislikeMark,b.dislikeMark);jce_copy_struct(a.dislikeOptionGroup,b.dislikeOptionGroup);jce_copy_struct(a.uiStyle,b.uiStyle);jce_copy_struct(a.feedbackDataKey,b.feedbackDataKey);jce_copy_struct(a.insertNewLineDataKey,b.insertNewLineDataKey);jce_copy_struct(a.feedbackType,b.feedbackType);jce_copy_struct(a.recommendList,b.recommendList);jce_copy_struct(a.insertNewLineProgress,b.insertNewLineProgress);jce_copy_struct(a.liveExtra,b.liveExtra);jce_copy_struct(a.isAutoPlayNext,b.isAutoPlayNext);jce_copy_struct(a.commentTag,b.commentTag);jce_copy_struct(a.isNeedShowFloatWindow,b.isNeedShowFloatWindow);jce_copy_struct(a.isContinuePlayOutOfWindow,b.isContinuePlayOutOfWindow);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.feedbackBorad,b.feedbackBorad);jce_copy_struct(a.getALineDataKey,b.getALineDataKey);jce_copy_struct(a.isLoopPlayBack,b.isLoopPlayBack);jce_copy_struct(a.vRSSItem,b.vRSSItem);jce_copy_struct(a.immersiveInfo,b.immersiveInfo);jce_copy_struct(a.recommendReason,b.recommendReason);jce_copy_struct(a.playEndType,b.playEndType);jce_copy_struct(a.recommendItem,b.recommendItem);jce_copy_struct(a.immersiveAction,b.immersiveAction);jce_copy_struct(a.apkInfo,b.apkInfo);

#define jce_TopicHead_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.firstLine,b.firstLine);jce_copy_struct(a.secondLine,b.secondLine);jce_copy_struct(a.thirdLine,b.thirdLine);jce_copy_struct(a.tagList,b.tagList);jce_copy_struct(a.desc,b.desc);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_TopicInfoLite_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.text,b.text);jce_copy_struct(a.action,b.action);jce_copy_struct(a.extraKey,b.extraKey);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_CirclePosterInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.Url,b.Url);jce_copy_struct(a.timestamp,b.timestamp);

#define jce_MixedContent_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.htmlUrl,b.htmlUrl);

#define jce_FeedSource_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.text,b.text);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.action,b.action);

#define jce_MediaPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.actionBarList,b.actionBarList);

#define jce_ONAImageText_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.jumpInfo,b.jumpInfo);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.title,b.title);

#define jce_MediaContentInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.text,b.text);jce_copy_struct(a.photos,b.photos);jce_copy_struct(a.videos,b.videos);jce_copy_struct(a.voices,b.voices);jce_copy_struct(a.action,b.action);

#define jce_DokiRankInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.rankNum,b.rankNum);jce_copy_struct(a.rankStatus,b.rankStatus);jce_copy_struct(a.description,b.description);jce_copy_struct(a.actionBar,b.actionBar);

#define jce_RankBroadcastItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actor,b.actor);jce_copy_struct(a.rankInfo,b.rankInfo);jce_copy_struct(a.actorBorderColors,b.actorBorderColors);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.actionBar,b.actionBar);

#define jce_PrimaryFeedSpecialContent_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.rankBroadcastList,b.rankBroadcastList);jce_copy_struct(a.maxNum,b.maxNum);jce_copy_struct(a.moreAction,b.moreAction);

#define jce_VerifyInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);jce_copy_struct(a.tipText,b.tipText);jce_copy_struct(a.clickTipText,b.clickTipText);jce_copy_struct(a.action,b.action);

#define jce_MediaItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.poster,b.poster);

#define jce_SelfTakeVideoInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.coverPoster,b.coverPoster);jce_copy_struct(a.gifPoster,b.gifPoster);jce_copy_struct(a.videoData,b.videoData);jce_copy_struct(a.mediaData,b.mediaData);jce_copy_struct(a.postDataKey,b.postDataKey);jce_copy_struct(a.actionBarInfo,b.actionBarInfo);jce_copy_struct(a.immersiveAction,b.immersiveAction);

#define jce_SimpleFeedNode_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.content,b.content);jce_copy_struct(a.photos,b.photos);jce_copy_struct(a.action,b.action);jce_copy_struct(a.mediaType,b.mediaType);

#define jce_DokiFeedCircleInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedText,b.feedText);jce_copy_struct(a.dokiName,b.dokiName);jce_copy_struct(a.exposureNum,b.exposureNum);jce_copy_struct(a.fansNum,b.fansNum);jce_copy_struct(a.feedType,b.feedType);jce_copy_struct(a.commentNum,b.commentNum);

#define jce_DokiBaseLiteInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dokiId,b.dokiId);jce_copy_struct(a.dokiName,b.dokiName);jce_copy_struct(a.dokiImgUrl,b.dokiImgUrl);jce_copy_struct(a.starCircleColors,b.starCircleColors);jce_copy_struct(a.action,b.action);jce_copy_struct(a.badgeInfo,b.badgeInfo);

#define jce_DokiFeedRelatedStarItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starDoki,b.starDoki);jce_copy_struct(a.circleInfo,b.circleInfo);jce_copy_struct(a.followBtn,b.followBtn);jce_copy_struct(a.goDokiBtn,b.goDokiBtn);jce_copy_struct(a.followDataKey,b.followDataKey);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_DokiFeedRelatedStarsList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starsList,b.starsList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.uiType,b.uiType);

#define jce_GpsAddressInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.addressName,b.addressName);jce_copy_struct(a.addressDescribe,b.addressDescribe);

#define jce_RichTextLabelInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.labelType,b.labelType);jce_copy_struct(a.richText,b.richText);

#define jce_QAPrimaryFeed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.qaFeedId,b.qaFeedId);jce_copy_struct(a.qaTitle,b.qaTitle);jce_copy_struct(a.qaContent,b.qaContent);jce_copy_struct(a.imageList,b.imageList);jce_copy_struct(a.user,b.user);jce_copy_struct(a.time,b.time);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.cfrom,b.cfrom);jce_copy_struct(a.actorInfoList,b.actorInfoList);jce_copy_struct(a.sourceInfoList,b.sourceInfoList);jce_copy_struct(a.qaFeedAction,b.qaFeedAction);jce_copy_struct(a.lookCount,b.lookCount);jce_copy_struct(a.qaCount,b.qaCount);jce_copy_struct(a.qaTips,b.qaTips);jce_copy_struct(a.h5ShareUrl,b.h5ShareUrl);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.status,b.status);jce_copy_struct(a.mixedContent,b.mixedContent);jce_copy_struct(a.isFavorite,b.isFavorite);

#define jce_FeedStarTrackInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dokiInfo,b.dokiInfo);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.rightAction,b.rightAction);jce_copy_struct(a.reportEventId,b.reportEventId);

#define jce_FeedRecommendInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.prefixStr,b.prefixStr);jce_copy_struct(a.suffixStr,b.suffixStr);jce_copy_struct(a.recommendList,b.recommendList);

#define jce_CirclePrimaryFeed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.videoAttentItem,b.videoAttentItem);jce_copy_struct(a.content,b.content);jce_copy_struct(a.user,b.user);jce_copy_struct(a.time,b.time);jce_copy_struct(a.videoTitle,b.videoTitle);jce_copy_struct(a.followCount,b.followCount);jce_copy_struct(a.isFollowed,b.isFollowed);jce_copy_struct(a.photos,b.photos);jce_copy_struct(a.comments,b.comments);jce_copy_struct(a.likes,b.likes);jce_copy_struct(a.action,b.action);jce_copy_struct(a.h5ShareUrl,b.h5ShareUrl);jce_copy_struct(a.status,b.status);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.commentCount,b.commentCount);jce_copy_struct(a.likeCount,b.likeCount);jce_copy_struct(a.badgeLabel,b.badgeLabel);jce_copy_struct(a.videos,b.videos);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.videoInfo,b.videoInfo);jce_copy_struct(a.tagLabel,b.tagLabel);jce_copy_struct(a.hasMoreComments,b.hasMoreComments);jce_copy_struct(a.hasMoreLikes,b.hasMoreLikes);jce_copy_struct(a.hotFeedType,b.hotFeedType);jce_copy_struct(a.feedAction,b.feedAction);jce_copy_struct(a.feedType,b.feedType);jce_copy_struct(a.feedTitle,b.feedTitle);jce_copy_struct(a.voices,b.voices);jce_copy_struct(a.mediaType,b.mediaType);jce_copy_struct(a.score,b.score);jce_copy_struct(a.isLike,b.isLike);jce_copy_struct(a.contentSource,b.contentSource);jce_copy_struct(a.bulletinBoardV2,b.bulletinBoardV2);jce_copy_struct(a.mediaPoster,b.mediaPoster);jce_copy_struct(a.sourceInfoList,b.sourceInfoList);jce_copy_struct(a.topicInfoList,b.topicInfoList);jce_copy_struct(a.additionalStyle,b.additionalStyle);jce_copy_struct(a.mixedContent,b.mixedContent);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.readCount,b.readCount);jce_copy_struct(a.fakeReadCount,b.fakeReadCount);jce_copy_struct(a.specialContentInfo,b.specialContentInfo);jce_copy_struct(a.imageText,b.imageText);jce_copy_struct(a.verifyInfo,b.verifyInfo);jce_copy_struct(a.selfVideo,b.selfVideo);jce_copy_struct(a.simpleFeed,b.simpleFeed);jce_copy_struct(a.extraInfo,b.extraInfo);jce_copy_struct(a.relatedDokiList,b.relatedDokiList);jce_copy_struct(a.imageTagList,b.imageTagList);jce_copy_struct(a.subTitleInfoList,b.subTitleInfoList);jce_copy_struct(a.gpsAddressInfo,b.gpsAddressInfo);jce_copy_struct(a.contentRowCount,b.contentRowCount);jce_copy_struct(a.qaPrimaryFeed,b.qaPrimaryFeed);jce_copy_struct(a.qaTips,b.qaTips);jce_copy_struct(a.voteInfo,b.voteInfo);jce_copy_struct(a.richTextLabelInfo,b.richTextLabelInfo);jce_copy_struct(a.starTrackInfo,b.starTrackInfo);jce_copy_struct(a.feedFeatureType,b.feedFeatureType);jce_copy_struct(a.isFavorite,b.isFavorite);jce_copy_struct(a.favoriteCount,b.favoriteCount);jce_copy_struct(a.starComment,b.starComment);jce_copy_struct(a.feedRecommendInfo,b.feedRecommendInfo);

#define jce_GroupSwitchItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tagInfo,b.tagInfo);jce_copy_struct(a.uiData,b.uiData);

#define jce_EventTimeLineItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.firstLine,b.firstLine);jce_copy_struct(a.secondLine,b.secondLine);jce_copy_struct(a.action,b.action);

#define jce_OptionalItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.showText,b.showText);jce_copy_struct(a.contentText,b.contentText);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_PromotionBannerInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tapAction,b.tapAction);jce_copy_struct(a.tapTitle,b.tapTitle);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.type,b.type);

#define jce_TVShowWeeklyList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.datakey,b.datakey);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subtitle,b.subtitle);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_WillReleasePoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.buttonType,b.buttonType);jce_copy_struct(a.releaseTime,b.releaseTime);

#define jce_CoralSummaryInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commentCount,b.commentCount);jce_copy_struct(a.actorList,b.actorList);jce_copy_struct(a.summaryTitle,b.summaryTitle);jce_copy_struct(a.commentType,b.commentType);jce_copy_struct(a.action,b.action);

#define jce_ChannnelExtraInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.extraInfo,b.extraInfo);

#define jce_EnterTipItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemId,b.itemId);jce_copy_struct(a.buttonType,b.buttonType);jce_copy_struct(a.title,b.title);jce_copy_struct(a.imgUrl,b.imgUrl);jce_copy_struct(a.bgImgUrl,b.bgImgUrl);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.btnText,b.btnText);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.titleColor,b.titleColor);jce_copy_struct(a.btnTextColor,b.btnTextColor);

#define jce_RecommendItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrlList,b.imageUrlList);jce_copy_struct(a.firstLine,b.firstLine);jce_copy_struct(a.secondLine,b.secondLine);jce_copy_struct(a.thirdLine,b.thirdLine);jce_copy_struct(a.type,b.type);jce_copy_struct(a.itemID,b.itemID);jce_copy_struct(a.actionBarInfo,b.actionBarInfo);jce_copy_struct(a.report,b.report);jce_copy_struct(a.apkInfo,b.apkInfo);jce_copy_struct(a.isPullGrowth,b.isPullGrowth);jce_copy_struct(a.pullGrowthProtocolType,b.pullGrowthProtocolType);jce_copy_struct(a.videoItemData,b.videoItemData);jce_copy_struct(a.dynamicImageUrl,b.dynamicImageUrl);jce_copy_struct(a.isShowDownload,b.isShowDownload);jce_copy_struct(a.uiType,b.uiType);

#define jce_SearchFilterItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.recommendList,b.recommendList);jce_copy_struct(a.name,b.name);jce_copy_struct(a.report,b.report);

#define jce_VideoTopicCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.topicTitle,b.topicTitle);jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.videoList,b.videoList);jce_copy_struct(a.rightActionBar,b.rightActionBar);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.action,b.action);jce_copy_struct(a.actionType,b.actionType);jce_copy_struct(a.topicDataKey,b.topicDataKey);

#define jce_SpokesPersonRecommend_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.posterList,b.posterList);jce_copy_struct(a.message,b.message);jce_copy_struct(a.messageColor,b.messageColor);jce_copy_struct(a.spokesPersonImageUrl,b.spokesPersonImageUrl);jce_copy_struct(a.spokesPersonBGImageUrl,b.spokesPersonBGImageUrl);jce_copy_struct(a.bgImageUrl,b.bgImageUrl);jce_copy_struct(a.actionBar,b.actionBar);jce_copy_struct(a.reportInfo,b.reportInfo);jce_copy_struct(a.spokesPersonReportInfo,b.spokesPersonReportInfo);

#define jce_VIPLevelEntry_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.levelEntrys,b.levelEntrys);jce_copy_struct(a.title,b.title);jce_copy_struct(a.titleColor,b.titleColor);

#define jce_RelatedDoki_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.name,b.name);jce_copy_struct(a.btnTitle,b.btnTitle);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_CommonTopicCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.topicTitle,b.topicTitle);jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.content,b.content);jce_copy_struct(a.rightActionBar,b.rightActionBar);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.action,b.action);

#define jce_CommonActorRankItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actor,b.actor);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.rankNum,b.rankNum);jce_copy_struct(a.rankTextColor,b.rankTextColor);jce_copy_struct(a.rankBgColor,b.rankBgColor);jce_copy_struct(a.btnText,b.btnText);jce_copy_struct(a.btnAction,b.btnAction);jce_copy_struct(a.btnColor,b.btnColor);jce_copy_struct(a.uiFlag,b.uiFlag);

#define jce_ONACommonActorRankList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_YooUser_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.imgUrl,b.imgUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_YooFollowCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.imgUrl,b.imgUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.lastUpdateTime,b.lastUpdateTime);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_YooGameCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.picker,b.picker);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAYooFollowList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cardList,b.cardList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAYooEmpty_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAYooRecommendItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.user,b.user);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAYooRecommendGroup_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.recommendList,b.recommendList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_DokiFeedPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.posterUrl,b.posterUrl);jce_copy_struct(a.type,b.type);jce_copy_struct(a.title,b.title);jce_copy_struct(a.author,b.author);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.imgFaceArea,b.imgFaceArea);

#define jce_MultiPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.groupTitle,b.groupTitle);jce_copy_struct(a.groupActionText,b.groupActionText);jce_copy_struct(a.groupAction,b.groupAction);jce_copy_struct(a.posterList,b.posterList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_KnowledgePayBarVipOnlyInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.needloginTips,b.needloginTips);jce_copy_struct(a.loginedNonVipTips,b.loginedNonVipTips);

#define jce_KnowledgePayBarSingleInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.needloginTips,b.needloginTips);jce_copy_struct(a.loginedNonVipTips,b.loginedNonVipTips);jce_copy_struct(a.loginedIsVipTips,b.loginedIsVipTips);

#define jce_ActorData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actorInfo,b.actorInfo);jce_copy_struct(a.secondLine,b.secondLine);jce_copy_struct(a.thirdLine,b.thirdLine);jce_copy_struct(a.actorCircleColors,b.actorCircleColors);

#define jce_PromotionAppDetail_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.appInfo,b.appInfo);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_TopicLeftImageCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_TopicCoverPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.imageUrls,b.imageUrls);



#endif
