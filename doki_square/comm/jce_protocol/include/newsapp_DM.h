// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `newsapp_DM.jce'
// **********************************************************************

#ifndef __NEWSAPP_DM_H_
#define __NEWSAPP_DM_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace NewsAppPro
{
    struct DMComment : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "NewsAppPro.DMComment";
        }
        static string MD5()
        {
            return "4e04c362f27463b9bcac2f358355ae0b";
        }
        DMComment()
        :ddwCommentId(0),ddwTargetId(0),sContent(""),ddwUin(0),dwIsFriend(0),dwIsOp(0),dwIsSelf(0),dwTimePoint(0),dwUpCount(0),ddwPostTime(0),strNickName(""),strHeadUrl(""),strQQHeadUrl(""),strGiftUrl(""),dwFirstTag(0),highlightColor("")
        {
        }
        void resetDefautlt()
        {
            ddwCommentId = 0;
            ddwTargetId = 0;
            sContent = "";
            ddwUin = 0;
            dwIsFriend = 0;
            dwIsOp = 0;
            dwIsSelf = 0;
            dwTimePoint = 0;
            dwUpCount = 0;
            ddwPostTime = 0;
            strNickName = "";
            strHeadUrl = "";
            strQQHeadUrl = "";
            strGiftUrl = "";
            dwFirstTag = 0;
            highlightColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwCommentId, 0);
            _os.write(ddwTargetId, 1);
            _os.write(sContent, 2);
            _os.write(ddwUin, 3);
            _os.write(dwIsFriend, 4);
            _os.write(dwIsOp, 5);
            _os.write(dwIsSelf, 6);
            _os.write(dwTimePoint, 7);
            _os.write(dwUpCount, 8);
            _os.write(ddwPostTime, 9);
            _os.write(strNickName, 10);
            _os.write(strHeadUrl, 11);
            _os.write(strQQHeadUrl, 12);
            _os.write(strGiftUrl, 13);
            _os.write(dwFirstTag, 14);
            _os.write(highlightColor, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwCommentId, 0, false);
            _is.read(ddwTargetId, 1, false);
            _is.read(sContent, 2, false);
            _is.read(ddwUin, 3, false);
            _is.read(dwIsFriend, 4, false);
            _is.read(dwIsOp, 5, false);
            _is.read(dwIsSelf, 6, false);
            _is.read(dwTimePoint, 7, false);
            _is.read(dwUpCount, 8, false);
            _is.read(ddwPostTime, 9, false);
            _is.read(strNickName, 10, false);
            _is.read(strHeadUrl, 11, false);
            _is.read(strQQHeadUrl, 12, false);
            _is.read(strGiftUrl, 13, false);
            _is.read(dwFirstTag, 14, false);
            _is.read(highlightColor, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwCommentId,"ddwCommentId");
            _ds.display(ddwTargetId,"ddwTargetId");
            _ds.display(sContent,"sContent");
            _ds.display(ddwUin,"ddwUin");
            _ds.display(dwIsFriend,"dwIsFriend");
            _ds.display(dwIsOp,"dwIsOp");
            _ds.display(dwIsSelf,"dwIsSelf");
            _ds.display(dwTimePoint,"dwTimePoint");
            _ds.display(dwUpCount,"dwUpCount");
            _ds.display(ddwPostTime,"ddwPostTime");
            _ds.display(strNickName,"strNickName");
            _ds.display(strHeadUrl,"strHeadUrl");
            _ds.display(strQQHeadUrl,"strQQHeadUrl");
            _ds.display(strGiftUrl,"strGiftUrl");
            _ds.display(dwFirstTag,"dwFirstTag");
            _ds.display(highlightColor,"highlightColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwCommentId, true);
            _ds.displaySimple(ddwTargetId, true);
            _ds.displaySimple(sContent, true);
            _ds.displaySimple(ddwUin, true);
            _ds.displaySimple(dwIsFriend, true);
            _ds.displaySimple(dwIsOp, true);
            _ds.displaySimple(dwIsSelf, true);
            _ds.displaySimple(dwTimePoint, true);
            _ds.displaySimple(dwUpCount, true);
            _ds.displaySimple(ddwPostTime, true);
            _ds.displaySimple(strNickName, true);
            _ds.displaySimple(strHeadUrl, true);
            _ds.displaySimple(strQQHeadUrl, true);
            _ds.displaySimple(strGiftUrl, true);
            _ds.displaySimple(dwFirstTag, true);
            _ds.displaySimple(highlightColor, false);
            return _os;
        }
    public:
        taf::Int64 ddwCommentId;
        taf::Int64 ddwTargetId;
        std::string sContent;
        taf::Int64 ddwUin;
        taf::Int32 dwIsFriend;
        taf::Int32 dwIsOp;
        taf::Int32 dwIsSelf;
        taf::Int32 dwTimePoint;
        taf::Int32 dwUpCount;
        taf::Int64 ddwPostTime;
        std::string strNickName;
        std::string strHeadUrl;
        std::string strQQHeadUrl;
        std::string strGiftUrl;
        taf::Int32 dwFirstTag;
        std::string highlightColor;
    };
    inline bool operator==(const DMComment&l, const DMComment&r)
    {
        return l.ddwCommentId == r.ddwCommentId && l.ddwTargetId == r.ddwTargetId && l.sContent == r.sContent && l.ddwUin == r.ddwUin && l.dwIsFriend == r.dwIsFriend && l.dwIsOp == r.dwIsOp && l.dwIsSelf == r.dwIsSelf && l.dwTimePoint == r.dwTimePoint && l.dwUpCount == r.dwUpCount && l.ddwPostTime == r.ddwPostTime && l.strNickName == r.strNickName && l.strHeadUrl == r.strHeadUrl && l.strQQHeadUrl == r.strQQHeadUrl && l.strGiftUrl == r.strGiftUrl && l.dwFirstTag == r.dwFirstTag && l.highlightColor == r.highlightColor;
    }
    inline bool operator!=(const DMComment&l, const DMComment&r)
    {
        return !(l == r);
    }

    struct DMPostCommentRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "NewsAppPro.DMPostCommentRequest";
        }
        static string MD5()
        {
            return "ae4e6e9e48042deb9b83d4f2378379c1";
        }
        DMPostCommentRequest()
        :DMContentKey(""),sContent(""),dwTimePoint(0),strRichId(""),strNickName(""),strHeadUrl("")
        {
        }
        void resetDefautlt()
        {
            DMContentKey = "";
            sContent = "";
            dwTimePoint = 0;
            strRichId = "";
            strNickName = "";
            strHeadUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(DMContentKey, 0);
            _os.write(sContent, 1);
            _os.write(dwTimePoint, 2);
            _os.write(strRichId, 3);
            _os.write(strNickName, 4);
            _os.write(strHeadUrl, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(DMContentKey, 0, true);
            _is.read(sContent, 1, false);
            _is.read(dwTimePoint, 2, false);
            _is.read(strRichId, 3, false);
            _is.read(strNickName, 4, false);
            _is.read(strHeadUrl, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(DMContentKey,"DMContentKey");
            _ds.display(sContent,"sContent");
            _ds.display(dwTimePoint,"dwTimePoint");
            _ds.display(strRichId,"strRichId");
            _ds.display(strNickName,"strNickName");
            _ds.display(strHeadUrl,"strHeadUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(DMContentKey, true);
            _ds.displaySimple(sContent, true);
            _ds.displaySimple(dwTimePoint, true);
            _ds.displaySimple(strRichId, true);
            _ds.displaySimple(strNickName, true);
            _ds.displaySimple(strHeadUrl, false);
            return _os;
        }
    public:
        std::string DMContentKey;
        std::string sContent;
        taf::Int64 dwTimePoint;
        std::string strRichId;
        std::string strNickName;
        std::string strHeadUrl;
    };
    inline bool operator==(const DMPostCommentRequest&l, const DMPostCommentRequest&r)
    {
        return l.DMContentKey == r.DMContentKey && l.sContent == r.sContent && l.dwTimePoint == r.dwTimePoint && l.strRichId == r.strRichId && l.strNickName == r.strNickName && l.strHeadUrl == r.strHeadUrl;
    }
    inline bool operator!=(const DMPostCommentRequest&l, const DMPostCommentRequest&r)
    {
        return !(l == r);
    }

    struct DMPostCommentResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "NewsAppPro.DMPostCommentResponse";
        }
        static string MD5()
        {
            return "2cda50abb58e285de09203fb7dc3b961";
        }
        DMPostCommentResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(stComment, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(stComment, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(stComment,"stComment");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(stComment, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        NewsAppPro::DMComment stComment;
    };
    inline bool operator==(const DMPostCommentResponse&l, const DMPostCommentResponse&r)
    {
        return l.errCode == r.errCode && l.stComment == r.stComment;
    }
    inline bool operator!=(const DMPostCommentResponse&l, const DMPostCommentResponse&r)
    {
        return !(l == r);
    }

    struct DMLikeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "NewsAppPro.DMLikeRequest";
        }
        static string MD5()
        {
            return "cb4558a7d1cbd8cbf583df7337cc71f1";
        }
        DMLikeRequest()
        :DMContentKey(""),ddwCommentId(0)
        {
        }
        void resetDefautlt()
        {
            DMContentKey = "";
            ddwCommentId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(DMContentKey, 0);
            _os.write(ddwCommentId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(DMContentKey, 0, true);
            _is.read(ddwCommentId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(DMContentKey,"DMContentKey");
            _ds.display(ddwCommentId,"ddwCommentId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(DMContentKey, true);
            _ds.displaySimple(ddwCommentId, false);
            return _os;
        }
    public:
        std::string DMContentKey;
        taf::Int64 ddwCommentId;
    };
    inline bool operator==(const DMLikeRequest&l, const DMLikeRequest&r)
    {
        return l.DMContentKey == r.DMContentKey && l.ddwCommentId == r.ddwCommentId;
    }
    inline bool operator!=(const DMLikeRequest&l, const DMLikeRequest&r)
    {
        return !(l == r);
    }

    struct DMLikeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "NewsAppPro.DMLikeResponse";
        }
        static string MD5()
        {
            return "2cda50abb58e285de09203fb7dc3b961";
        }
        DMLikeResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(stComment, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(stComment, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(stComment,"stComment");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(stComment, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        NewsAppPro::DMComment stComment;
    };
    inline bool operator==(const DMLikeResponse&l, const DMLikeResponse&r)
    {
        return l.errCode == r.errCode && l.stComment == r.stComment;
    }
    inline bool operator!=(const DMLikeResponse&l, const DMLikeResponse&r)
    {
        return !(l == r);
    }

    struct DMCommentListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "NewsAppPro.DMCommentListRequest";
        }
        static string MD5()
        {
            return "12bd3df7dec0d46a51a6bfbfad435a84";
        }
        DMCommentListRequest()
        :DMContentKey(""),dwStartTime(0),dwFirstReq(0),dwDMRowOfNormal(0),dwDWRowOfSpacer(0),strSessionKey(""),dwVersion(0),dwStyle(0)
        {
        }
        void resetDefautlt()
        {
            DMContentKey = "";
            dwStartTime = 0;
            dwFirstReq = 0;
            dwDMRowOfNormal = 0;
            dwDWRowOfSpacer = 0;
            strSessionKey = "";
            dwVersion = 0;
            dwStyle = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(DMContentKey, 0);
            _os.write(dwStartTime, 1);
            _os.write(dwFirstReq, 2);
            _os.write(dwDMRowOfNormal, 3);
            _os.write(dwDWRowOfSpacer, 4);
            _os.write(strSessionKey, 5);
            _os.write(dwVersion, 6);
            _os.write(dwStyle, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(DMContentKey, 0, true);
            _is.read(dwStartTime, 1, true);
            _is.read(dwFirstReq, 2, false);
            _is.read(dwDMRowOfNormal, 3, false);
            _is.read(dwDWRowOfSpacer, 4, false);
            _is.read(strSessionKey, 5, false);
            _is.read(dwVersion, 6, false);
            _is.read(dwStyle, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(DMContentKey,"DMContentKey");
            _ds.display(dwStartTime,"dwStartTime");
            _ds.display(dwFirstReq,"dwFirstReq");
            _ds.display(dwDMRowOfNormal,"dwDMRowOfNormal");
            _ds.display(dwDWRowOfSpacer,"dwDWRowOfSpacer");
            _ds.display(strSessionKey,"strSessionKey");
            _ds.display(dwVersion,"dwVersion");
            _ds.display(dwStyle,"dwStyle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(DMContentKey, true);
            _ds.displaySimple(dwStartTime, true);
            _ds.displaySimple(dwFirstReq, true);
            _ds.displaySimple(dwDMRowOfNormal, true);
            _ds.displaySimple(dwDWRowOfSpacer, true);
            _ds.displaySimple(strSessionKey, true);
            _ds.displaySimple(dwVersion, true);
            _ds.displaySimple(dwStyle, false);
            return _os;
        }
    public:
        std::string DMContentKey;
        taf::Int64 dwStartTime;
        taf::Int32 dwFirstReq;
        taf::Int32 dwDMRowOfNormal;
        taf::Int32 dwDWRowOfSpacer;
        std::string strSessionKey;
        taf::Int32 dwVersion;
        taf::Int32 dwStyle;
    };
    inline bool operator==(const DMCommentListRequest&l, const DMCommentListRequest&r)
    {
        return l.DMContentKey == r.DMContentKey && l.dwStartTime == r.dwStartTime && l.dwFirstReq == r.dwFirstReq && l.dwDMRowOfNormal == r.dwDMRowOfNormal && l.dwDWRowOfSpacer == r.dwDWRowOfSpacer && l.strSessionKey == r.strSessionKey && l.dwVersion == r.dwVersion && l.dwStyle == r.dwStyle;
    }
    inline bool operator!=(const DMCommentListRequest&l, const DMCommentListRequest&r)
    {
        return !(l == r);
    }

    struct DMCommentListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "NewsAppPro.DMCommentListResponse";
        }
        static string MD5()
        {
            return "442417a5d30f424f0e95a05fac2b69e7";
        }
        DMCommentListResponse()
        :errCode(0),dwNextTimeDur(0),ddwLastStamp(0),dwLoopInterval(0),bContinued(0),strSessionKey("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            dwNextTimeDur = 0;
            ddwLastStamp = 0;
            dwLoopInterval = 0;
            bContinued = 0;
            strSessionKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(dwNextTimeDur, 1);
            _os.write(commentList, 2);
            _os.write(ddwLastStamp, 3);
            _os.write(dwLoopInterval, 4);
            _os.write(bContinued, 5);
            _os.write(strSessionKey, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(dwNextTimeDur, 1, true);
            _is.read(commentList, 2, false);
            _is.read(ddwLastStamp, 3, false);
            _is.read(dwLoopInterval, 4, false);
            _is.read(bContinued, 5, false);
            _is.read(strSessionKey, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(dwNextTimeDur,"dwNextTimeDur");
            _ds.display(commentList,"commentList");
            _ds.display(ddwLastStamp,"ddwLastStamp");
            _ds.display(dwLoopInterval,"dwLoopInterval");
            _ds.display(bContinued,"bContinued");
            _ds.display(strSessionKey,"strSessionKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(dwNextTimeDur, true);
            _ds.displaySimple(commentList, true);
            _ds.displaySimple(ddwLastStamp, true);
            _ds.displaySimple(dwLoopInterval, true);
            _ds.displaySimple(bContinued, true);
            _ds.displaySimple(strSessionKey, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 dwNextTimeDur;
        vector<NewsAppPro::DMComment> commentList;
        taf::Int64 ddwLastStamp;
        taf::Int32 dwLoopInterval;
        taf::Int32 bContinued;
        std::string strSessionKey;
    };
    inline bool operator==(const DMCommentListResponse&l, const DMCommentListResponse&r)
    {
        return l.errCode == r.errCode && l.dwNextTimeDur == r.dwNextTimeDur && l.commentList == r.commentList && l.ddwLastStamp == r.ddwLastStamp && l.dwLoopInterval == r.dwLoopInterval && l.bContinued == r.bContinued && l.strSessionKey == r.strSessionKey;
    }
    inline bool operator!=(const DMCommentListResponse&l, const DMCommentListResponse&r)
    {
        return !(l == r);
    }

    struct DMGetUserCfgRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "NewsAppPro.DMGetUserCfgRequest";
        }
        static string MD5()
        {
            return "9bda4ac16227127f47ea815aed6f8d9e";
        }
        DMGetUserCfgRequest()
        :DMContentKey(""),optionType(0),userStaus(0)
        {
        }
        void resetDefautlt()
        {
            DMContentKey = "";
            optionType = 0;
            userStaus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(DMContentKey, 0);
            _os.write(optionType, 1);
            _os.write(userStaus, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(DMContentKey, 0, true);
            _is.read(optionType, 1, true);
            _is.read(userStaus, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(DMContentKey,"DMContentKey");
            _ds.display(optionType,"optionType");
            _ds.display(userStaus,"userStaus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(DMContentKey, true);
            _ds.displaySimple(optionType, true);
            _ds.displaySimple(userStaus, false);
            return _os;
        }
    public:
        std::string DMContentKey;
        taf::Int32 optionType;
        taf::Int32 userStaus;
    };
    inline bool operator==(const DMGetUserCfgRequest&l, const DMGetUserCfgRequest&r)
    {
        return l.DMContentKey == r.DMContentKey && l.optionType == r.optionType && l.userStaus == r.userStaus;
    }
    inline bool operator!=(const DMGetUserCfgRequest&l, const DMGetUserCfgRequest&r)
    {
        return !(l == r);
    }

    struct DMGetUserCfgResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "NewsAppPro.DMGetUserCfgResponse";
        }
        static string MD5()
        {
            return "21624bd601efa4c93b94c7b9cded8b9d";
        }
        DMGetUserCfgResponse()
        :errCode(0),wUserStaus(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            wUserStaus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(wUserStaus, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(wUserStaus, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(wUserStaus,"wUserStaus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(wUserStaus, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Short wUserStaus;
    };
    inline bool operator==(const DMGetUserCfgResponse&l, const DMGetUserCfgResponse&r)
    {
        return l.errCode == r.errCode && l.wUserStaus == r.wUserStaus;
    }
    inline bool operator!=(const DMGetUserCfgResponse&l, const DMGetUserCfgResponse&r)
    {
        return !(l == r);
    }

    struct DMRegistExtData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "NewsAppPro.DMRegistExtData";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        DMRegistExtData()
        :strCid(""),strLid("")
        {
        }
        void resetDefautlt()
        {
            strCid = "";
            strLid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strCid, 0);
            _os.write(strLid, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strCid, 0, false);
            _is.read(strLid, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strCid,"strCid");
            _ds.display(strLid,"strLid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strCid, true);
            _ds.displaySimple(strLid, false);
            return _os;
        }
    public:
        std::string strCid;
        std::string strLid;
    };
    inline bool operator==(const DMRegistExtData&l, const DMRegistExtData&r)
    {
        return l.strCid == r.strCid && l.strLid == r.strLid;
    }
    inline bool operator!=(const DMRegistExtData&l, const DMRegistExtData&r)
    {
        return !(l == r);
    }

    struct DMRegistTargetIdMoreRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "NewsAppPro.DMRegistTargetIdMoreRequest";
        }
        static string MD5()
        {
            return "5d40bef32a0b651f9bd883ad44d83734";
        }
        DMRegistTargetIdMoreRequest()
        :wRegistType(0),wSpeSource(0)
        {
        }
        void resetDefautlt()
        {
            wRegistType = 0;
            wSpeSource = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(wRegistType, 0);
            _os.write(vecIdList, 1);
            _os.write(wSpeSource, 2);
            _os.write(mapExtData, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(wRegistType, 0, true);
            _is.read(vecIdList, 1, true);
            _is.read(wSpeSource, 2, false);
            _is.read(mapExtData, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(wRegistType,"wRegistType");
            _ds.display(vecIdList,"vecIdList");
            _ds.display(wSpeSource,"wSpeSource");
            _ds.display(mapExtData,"mapExtData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(wRegistType, true);
            _ds.displaySimple(vecIdList, true);
            _ds.displaySimple(wSpeSource, true);
            _ds.displaySimple(mapExtData, false);
            return _os;
        }
    public:
        taf::Int32 wRegistType;
        vector<std::string> vecIdList;
        taf::Int32 wSpeSource;
        map<std::string, NewsAppPro::DMRegistExtData> mapExtData;
    };
    inline bool operator==(const DMRegistTargetIdMoreRequest&l, const DMRegistTargetIdMoreRequest&r)
    {
        return l.wRegistType == r.wRegistType && l.vecIdList == r.vecIdList && l.wSpeSource == r.wSpeSource && l.mapExtData == r.mapExtData;
    }
    inline bool operator!=(const DMRegistTargetIdMoreRequest&l, const DMRegistTargetIdMoreRequest&r)
    {
        return !(l == r);
    }

    struct DMRegistResultInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "NewsAppPro.DMRegistResultInfo";
        }
        static string MD5()
        {
            return "31b837dee0e3f970aa2d14771bf49d74";
        }
        DMRegistResultInfo()
        :strDanMuKey(""),wOpened(0),wDisplay(0),iIsBubbleFlg(0)
        {
        }
        void resetDefautlt()
        {
            strDanMuKey = "";
            wOpened = 0;
            wDisplay = 0;
            iIsBubbleFlg = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDanMuKey, 0);
            _os.write(wOpened, 1);
            _os.write(wDisplay, 2);
            _os.write(iIsBubbleFlg, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDanMuKey, 0, false);
            _is.read(wOpened, 1, false);
            _is.read(wDisplay, 2, false);
            _is.read(iIsBubbleFlg, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDanMuKey,"strDanMuKey");
            _ds.display(wOpened,"wOpened");
            _ds.display(wDisplay,"wDisplay");
            _ds.display(iIsBubbleFlg,"iIsBubbleFlg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDanMuKey, true);
            _ds.displaySimple(wOpened, true);
            _ds.displaySimple(wDisplay, true);
            _ds.displaySimple(iIsBubbleFlg, false);
            return _os;
        }
    public:
        std::string strDanMuKey;
        taf::Int32 wOpened;
        taf::Int32 wDisplay;
        taf::Int32 iIsBubbleFlg;
    };
    inline bool operator==(const DMRegistResultInfo&l, const DMRegistResultInfo&r)
    {
        return l.strDanMuKey == r.strDanMuKey && l.wOpened == r.wOpened && l.wDisplay == r.wDisplay && l.iIsBubbleFlg == r.iIsBubbleFlg;
    }
    inline bool operator!=(const DMRegistResultInfo&l, const DMRegistResultInfo&r)
    {
        return !(l == r);
    }

    struct DMRegistTargetIdMoreResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "NewsAppPro.DMRegistTargetIdMoreResponse";
        }
        static string MD5()
        {
            return "e02c1e472e05a6001c1ef55886ee1340";
        }
        DMRegistTargetIdMoreResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(stMap, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(stMap, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(stMap,"stMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(stMap, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        map<std::string, NewsAppPro::DMRegistResultInfo> stMap;
    };
    inline bool operator==(const DMRegistTargetIdMoreResponse&l, const DMRegistTargetIdMoreResponse&r)
    {
        return l.errCode == r.errCode && l.stMap == r.stMap;
    }
    inline bool operator!=(const DMRegistTargetIdMoreResponse&l, const DMRegistTargetIdMoreResponse&r)
    {
        return !(l == r);
    }

    struct DMGetPubTotalRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "NewsAppPro.DMGetPubTotalRequest";
        }
        static string MD5()
        {
            return "c0c55295846a835fde8fabbaa8f6adc8";
        }
        DMGetPubTotalRequest()
        :dwType(0)
        {
        }
        void resetDefautlt()
        {
            dwType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwType, 0);
            _os.write(vecIdList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwType, 0, true);
            _is.read(vecIdList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwType,"dwType");
            _ds.display(vecIdList,"vecIdList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwType, true);
            _ds.displaySimple(vecIdList, false);
            return _os;
        }
    public:
        taf::Int32 dwType;
        vector<std::string> vecIdList;
    };
    inline bool operator==(const DMGetPubTotalRequest&l, const DMGetPubTotalRequest&r)
    {
        return l.dwType == r.dwType && l.vecIdList == r.vecIdList;
    }
    inline bool operator!=(const DMGetPubTotalRequest&l, const DMGetPubTotalRequest&r)
    {
        return !(l == r);
    }

    struct DMGetPubTotalResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "NewsAppPro.DMGetPubTotalResponse";
        }
        static string MD5()
        {
            return "464cb5fccfe358b8371e5406b353718f";
        }
        DMGetPubTotalResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pubTotalMap, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pubTotalMap, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pubTotalMap,"pubTotalMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pubTotalMap, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        map<std::string, taf::Int64> pubTotalMap;
    };
    inline bool operator==(const DMGetPubTotalResponse&l, const DMGetPubTotalResponse&r)
    {
        return l.errCode == r.errCode && l.pubTotalMap == r.pubTotalMap;
    }
    inline bool operator!=(const DMGetPubTotalResponse&l, const DMGetPubTotalResponse&r)
    {
        return !(l == r);
    }


}

#define NewsAppPro_DMComment_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwCommentId,b.ddwCommentId);jce_copy_struct(a.ddwTargetId,b.ddwTargetId);jce_copy_struct(a.sContent,b.sContent);jce_copy_struct(a.ddwUin,b.ddwUin);jce_copy_struct(a.dwIsFriend,b.dwIsFriend);jce_copy_struct(a.dwIsOp,b.dwIsOp);jce_copy_struct(a.dwIsSelf,b.dwIsSelf);jce_copy_struct(a.dwTimePoint,b.dwTimePoint);jce_copy_struct(a.dwUpCount,b.dwUpCount);jce_copy_struct(a.ddwPostTime,b.ddwPostTime);jce_copy_struct(a.strNickName,b.strNickName);jce_copy_struct(a.strHeadUrl,b.strHeadUrl);jce_copy_struct(a.strQQHeadUrl,b.strQQHeadUrl);jce_copy_struct(a.strGiftUrl,b.strGiftUrl);jce_copy_struct(a.dwFirstTag,b.dwFirstTag);jce_copy_struct(a.highlightColor,b.highlightColor);

#define NewsAppPro_DMPostCommentRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.DMContentKey,b.DMContentKey);jce_copy_struct(a.sContent,b.sContent);jce_copy_struct(a.dwTimePoint,b.dwTimePoint);jce_copy_struct(a.strRichId,b.strRichId);jce_copy_struct(a.strNickName,b.strNickName);jce_copy_struct(a.strHeadUrl,b.strHeadUrl);

#define NewsAppPro_DMPostCommentResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.stComment,b.stComment);

#define NewsAppPro_DMLikeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.DMContentKey,b.DMContentKey);jce_copy_struct(a.ddwCommentId,b.ddwCommentId);

#define NewsAppPro_DMLikeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.stComment,b.stComment);

#define NewsAppPro_DMCommentListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.DMContentKey,b.DMContentKey);jce_copy_struct(a.dwStartTime,b.dwStartTime);jce_copy_struct(a.dwFirstReq,b.dwFirstReq);jce_copy_struct(a.dwDMRowOfNormal,b.dwDMRowOfNormal);jce_copy_struct(a.dwDWRowOfSpacer,b.dwDWRowOfSpacer);jce_copy_struct(a.strSessionKey,b.strSessionKey);jce_copy_struct(a.dwVersion,b.dwVersion);jce_copy_struct(a.dwStyle,b.dwStyle);

#define NewsAppPro_DMCommentListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.dwNextTimeDur,b.dwNextTimeDur);jce_copy_struct(a.commentList,b.commentList);jce_copy_struct(a.ddwLastStamp,b.ddwLastStamp);jce_copy_struct(a.dwLoopInterval,b.dwLoopInterval);jce_copy_struct(a.bContinued,b.bContinued);jce_copy_struct(a.strSessionKey,b.strSessionKey);

#define NewsAppPro_DMGetUserCfgRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.DMContentKey,b.DMContentKey);jce_copy_struct(a.optionType,b.optionType);jce_copy_struct(a.userStaus,b.userStaus);

#define NewsAppPro_DMGetUserCfgResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.wUserStaus,b.wUserStaus);

#define NewsAppPro_DMRegistExtData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strCid,b.strCid);jce_copy_struct(a.strLid,b.strLid);

#define NewsAppPro_DMRegistTargetIdMoreRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.wRegistType,b.wRegistType);jce_copy_struct(a.vecIdList,b.vecIdList);jce_copy_struct(a.wSpeSource,b.wSpeSource);jce_copy_struct(a.mapExtData,b.mapExtData);

#define NewsAppPro_DMRegistResultInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDanMuKey,b.strDanMuKey);jce_copy_struct(a.wOpened,b.wOpened);jce_copy_struct(a.wDisplay,b.wDisplay);jce_copy_struct(a.iIsBubbleFlg,b.iIsBubbleFlg);

#define NewsAppPro_DMRegistTargetIdMoreResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.stMap,b.stMap);

#define NewsAppPro_DMGetPubTotalRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwType,b.dwType);jce_copy_struct(a.vecIdList,b.vecIdList);

#define NewsAppPro_DMGetPubTotalResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pubTotalMap,b.pubTotalMap);



#endif
