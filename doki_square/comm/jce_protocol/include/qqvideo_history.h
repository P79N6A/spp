// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_history.jce'
// **********************************************************************

#ifndef __QQVIDEO_HISTORY_H_
#define __QQVIDEO_HISTORY_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"


namespace jce
{
    struct WatchRecordV1 : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordV1";
        }
        static string MD5()
        {
            return "faa1252c653b40180b5b2805b03251ca";
        }
        WatchRecordV1()
        :recordId(""),lid(""),cid(""),vid(""),videoTime(0),viewDate(0),pid(""),plid(""),fromContext(""),recordType(0),iHD(-1),playFrom(0),totalWatchTime(0)
        {
        }
        void resetDefautlt()
        {
            recordId = "";
            lid = "";
            cid = "";
            vid = "";
            videoTime = 0;
            viewDate = 0;
            pid = "";
            plid = "";
            fromContext = "";
            recordType = 0;
            iHD = -1;
            playFrom = 0;
            totalWatchTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(recordId, 0);
            _os.write(lid, 1);
            _os.write(cid, 2);
            _os.write(vid, 3);
            _os.write(videoTime, 4);
            _os.write(viewDate, 5);
            _os.write(pid, 6);
            _os.write(plid, 7);
            _os.write(fromContext, 8);
            _os.write(recordType, 9);
            _os.write(iHD, 10);
            _os.write(playFrom, 11);
            _os.write(totalWatchTime, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(recordId, 0, true);
            _is.read(lid, 1, false);
            _is.read(cid, 2, false);
            _is.read(vid, 3, false);
            _is.read(videoTime, 4, false);
            _is.read(viewDate, 5, false);
            _is.read(pid, 6, false);
            _is.read(plid, 7, false);
            _is.read(fromContext, 8, false);
            _is.read(recordType, 9, false);
            _is.read(iHD, 10, false);
            _is.read(playFrom, 11, false);
            _is.read(totalWatchTime, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(recordId,"recordId");
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(videoTime,"videoTime");
            _ds.display(viewDate,"viewDate");
            _ds.display(pid,"pid");
            _ds.display(plid,"plid");
            _ds.display(fromContext,"fromContext");
            _ds.display(recordType,"recordType");
            _ds.display(iHD,"iHD");
            _ds.display(playFrom,"playFrom");
            _ds.display(totalWatchTime,"totalWatchTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(recordId, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(videoTime, true);
            _ds.displaySimple(viewDate, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(plid, true);
            _ds.displaySimple(fromContext, true);
            _ds.displaySimple(recordType, true);
            _ds.displaySimple(iHD, true);
            _ds.displaySimple(playFrom, true);
            _ds.displaySimple(totalWatchTime, false);
            return _os;
        }
    public:
        std::string recordId;
        std::string lid;
        std::string cid;
        std::string vid;
        taf::Int32 videoTime;
        taf::Int64 viewDate;
        std::string pid;
        std::string plid;
        std::string fromContext;
        taf::Int32 recordType;
        taf::Int32 iHD;
        taf::Int32 playFrom;
        taf::Int32 totalWatchTime;
    };
    inline bool operator==(const WatchRecordV1&l, const WatchRecordV1&r)
    {
        return l.recordId == r.recordId && l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.videoTime == r.videoTime && l.viewDate == r.viewDate && l.pid == r.pid && l.plid == r.plid && l.fromContext == r.fromContext && l.recordType == r.recordType && l.iHD == r.iHD && l.playFrom == r.playFrom && l.totalWatchTime == r.totalWatchTime;
    }
    inline bool operator!=(const WatchRecordV1&l, const WatchRecordV1&r)
    {
        return !(l == r);
    }

    struct WatchRecordUiData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordUiData";
        }
        static string MD5()
        {
            return "1163ce6b169356114ba5ac4991437278";
        }
        WatchRecordUiData()
        :seriesText(""),totalTime(0),showLocation(0)
        {
        }
        void resetDefautlt()
        {
            seriesText = "";
            totalTime = 0;
            showLocation = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(record, 0);
            _os.write(poster, 1);
            _os.write(seriesText, 2);
            _os.write(totalTime, 3);
            _os.write(showLocation, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(record, 0, false);
            _is.read(poster, 1, false);
            _is.read(seriesText, 2, false);
            _is.read(totalTime, 3, false);
            _is.read(showLocation, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(record,"record");
            _ds.display(poster,"poster");
            _ds.display(seriesText,"seriesText");
            _ds.display(totalTime,"totalTime");
            _ds.display(showLocation,"showLocation");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(record, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(seriesText, true);
            _ds.displaySimple(totalTime, true);
            _ds.displaySimple(showLocation, false);
            return _os;
        }
    public:
        jce::WatchRecordV1 record;
        jce::Poster poster;
        std::string seriesText;
        taf::Int32 totalTime;
        taf::Int32 showLocation;
    };
    inline bool operator==(const WatchRecordUiData&l, const WatchRecordUiData&r)
    {
        return l.record == r.record && l.poster == r.poster && l.seriesText == r.seriesText && l.totalTime == r.totalTime && l.showLocation == r.showLocation;
    }
    inline bool operator!=(const WatchRecordUiData&l, const WatchRecordUiData&r)
    {
        return !(l == r);
    }

    struct WatchRecordListV1Request : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordListV1Request";
        }
        static string MD5()
        {
            return "3c28d913d8b6de872104298ab7654818";
        }
        WatchRecordListV1Request()
        :dataVersion(0),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataVersion = 0;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataVersion, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataVersion, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataVersion,"dataVersion");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataVersion, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int64 dataVersion;
        std::string pageContext;
    };
    inline bool operator==(const WatchRecordListV1Request&l, const WatchRecordListV1Request&r)
    {
        return l.dataVersion == r.dataVersion && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const WatchRecordListV1Request&l, const WatchRecordListV1Request&r)
    {
        return !(l == r);
    }

    struct WatchRecordListV1Response : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordListV1Response";
        }
        static string MD5()
        {
            return "999def821f97412e67b0742fed9a0f45";
        }
        WatchRecordListV1Response()
        :errCode(0),dataVersion(0),pageContext(""),hasNextPage(false),isUpdateAll(false),lastClearAllTimeInterval(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            dataVersion = 0;
            pageContext = "";
            hasNextPage = false;
            isUpdateAll = false;
            lastClearAllTimeInterval = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(dataVersion, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(recordList, 4);
            _os.write(isUpdateAll, 5);
            _os.write(lastClearAllTimeInterval, 6);
            _os.write(deleteList, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(dataVersion, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(recordList, 4, false);
            _is.read(isUpdateAll, 5, false);
            _is.read(lastClearAllTimeInterval, 6, false);
            _is.read(deleteList, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(dataVersion,"dataVersion");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(recordList,"recordList");
            _ds.display(isUpdateAll,"isUpdateAll");
            _ds.display(lastClearAllTimeInterval,"lastClearAllTimeInterval");
            _ds.display(deleteList,"deleteList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(dataVersion, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(recordList, true);
            _ds.displaySimple(isUpdateAll, true);
            _ds.displaySimple(lastClearAllTimeInterval, true);
            _ds.displaySimple(deleteList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int64 dataVersion;
        std::string pageContext;
        taf::Bool hasNextPage;
        vector<jce::WatchRecordV1> recordList;
        taf::Bool isUpdateAll;
        taf::Int64 lastClearAllTimeInterval;
        vector<jce::WatchRecordV1> deleteList;
    };
    inline bool operator==(const WatchRecordListV1Response&l, const WatchRecordListV1Response&r)
    {
        return l.errCode == r.errCode && l.dataVersion == r.dataVersion && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.recordList == r.recordList && l.isUpdateAll == r.isUpdateAll && l.lastClearAllTimeInterval == r.lastClearAllTimeInterval && l.deleteList == r.deleteList;
    }
    inline bool operator!=(const WatchRecordListV1Response&l, const WatchRecordListV1Response&r)
    {
        return !(l == r);
    }

    struct WatchRecordUploadV1Request : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordUploadV1Request";
        }
        static string MD5()
        {
            return "492b88b9c6020244b952f051412d35bf";
        }
        WatchRecordUploadV1Request()
        :dataVersion(0)
        {
        }
        void resetDefautlt()
        {
            dataVersion = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uploadList, 0);
            _os.write(dataVersion, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uploadList, 0, true);
            _is.read(dataVersion, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uploadList,"uploadList");
            _ds.display(dataVersion,"dataVersion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uploadList, true);
            _ds.displaySimple(dataVersion, false);
            return _os;
        }
    public:
        vector<jce::WatchRecordV1> uploadList;
        taf::Int64 dataVersion;
    };
    inline bool operator==(const WatchRecordUploadV1Request&l, const WatchRecordUploadV1Request&r)
    {
        return l.uploadList == r.uploadList && l.dataVersion == r.dataVersion;
    }
    inline bool operator!=(const WatchRecordUploadV1Request&l, const WatchRecordUploadV1Request&r)
    {
        return !(l == r);
    }

    struct WatchRecordUploadV1Response : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordUploadV1Response";
        }
        static string MD5()
        {
            return "cfd9919647d45b950f67ea0c7c22485c";
        }
        WatchRecordUploadV1Response()
        :errCode(0),dataVersion(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            dataVersion = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(dataVersion, 1);
            _os.write(recordList, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(dataVersion, 1, true);
            _is.read(recordList, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(dataVersion,"dataVersion");
            _ds.display(recordList,"recordList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(dataVersion, true);
            _ds.displaySimple(recordList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int64 dataVersion;
        vector<jce::WatchRecordV1> recordList;
    };
    inline bool operator==(const WatchRecordUploadV1Response&l, const WatchRecordUploadV1Response&r)
    {
        return l.errCode == r.errCode && l.dataVersion == r.dataVersion && l.recordList == r.recordList;
    }
    inline bool operator!=(const WatchRecordUploadV1Response&l, const WatchRecordUploadV1Response&r)
    {
        return !(l == r);
    }

    struct WatchRecordDeleteV1Request : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordDeleteV1Request";
        }
        static string MD5()
        {
            return "e084466f07f0b4995a3a1c3f56c83fa8";
        }
        WatchRecordDeleteV1Request()
        :dataVersion(0),isDeleteAll(false)
        {
        }
        void resetDefautlt()
        {
            dataVersion = 0;
            isDeleteAll = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataVersion, 0);
            _os.write(recordList, 1);
            _os.write(isDeleteAll, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataVersion, 0, true);
            _is.read(recordList, 1, false);
            _is.read(isDeleteAll, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataVersion,"dataVersion");
            _ds.display(recordList,"recordList");
            _ds.display(isDeleteAll,"isDeleteAll");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataVersion, true);
            _ds.displaySimple(recordList, true);
            _ds.displaySimple(isDeleteAll, false);
            return _os;
        }
    public:
        taf::Int64 dataVersion;
        vector<jce::WatchRecordV1> recordList;
        taf::Bool isDeleteAll;
    };
    inline bool operator==(const WatchRecordDeleteV1Request&l, const WatchRecordDeleteV1Request&r)
    {
        return l.dataVersion == r.dataVersion && l.recordList == r.recordList && l.isDeleteAll == r.isDeleteAll;
    }
    inline bool operator!=(const WatchRecordDeleteV1Request&l, const WatchRecordDeleteV1Request&r)
    {
        return !(l == r);
    }

    struct WatchRecordDeleteV1Response : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordDeleteV1Response";
        }
        static string MD5()
        {
            return "309782aed2f570cb74841a7d410ade2f";
        }
        WatchRecordDeleteV1Response()
        :errCode(0),dataVersion(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            dataVersion = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(dataVersion, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(dataVersion, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(dataVersion,"dataVersion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(dataVersion, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int64 dataVersion;
    };
    inline bool operator==(const WatchRecordDeleteV1Response&l, const WatchRecordDeleteV1Response&r)
    {
        return l.errCode == r.errCode && l.dataVersion == r.dataVersion;
    }
    inline bool operator!=(const WatchRecordDeleteV1Response&l, const WatchRecordDeleteV1Response&r)
    {
        return !(l == r);
    }

    struct WatchRecordPostersV1Request : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordPostersV1Request";
        }
        static string MD5()
        {
            return "1117461f7dad0919052ff810a178f81d";
        }
        WatchRecordPostersV1Request()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(recordList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(recordList, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(recordList,"recordList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(recordList, false);
            return _os;
        }
    public:
        vector<jce::WatchRecordV1> recordList;
    };
    inline bool operator==(const WatchRecordPostersV1Request&l, const WatchRecordPostersV1Request&r)
    {
        return l.recordList == r.recordList;
    }
    inline bool operator!=(const WatchRecordPostersV1Request&l, const WatchRecordPostersV1Request&r)
    {
        return !(l == r);
    }

    struct WatchRecordPostersV1Response : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordPostersV1Response";
        }
        static string MD5()
        {
            return "c9b91a061bd3b3c7c5cb46172855d24f";
        }
        WatchRecordPostersV1Response()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(recordList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(recordList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(recordList,"recordList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(recordList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::WatchRecordUiData> recordList;
    };
    inline bool operator==(const WatchRecordPostersV1Response&l, const WatchRecordPostersV1Response&r)
    {
        return l.errCode == r.errCode && l.recordList == r.recordList;
    }
    inline bool operator!=(const WatchRecordPostersV1Response&l, const WatchRecordPostersV1Response&r)
    {
        return !(l == r);
    }


}

#define jce_WatchRecordV1_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.recordId,b.recordId);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.videoTime,b.videoTime);jce_copy_struct(a.viewDate,b.viewDate);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.plid,b.plid);jce_copy_struct(a.fromContext,b.fromContext);jce_copy_struct(a.recordType,b.recordType);jce_copy_struct(a.iHD,b.iHD);jce_copy_struct(a.playFrom,b.playFrom);jce_copy_struct(a.totalWatchTime,b.totalWatchTime);

#define jce_WatchRecordUiData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.record,b.record);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.seriesText,b.seriesText);jce_copy_struct(a.totalTime,b.totalTime);jce_copy_struct(a.showLocation,b.showLocation);

#define jce_WatchRecordListV1Request_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataVersion,b.dataVersion);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_WatchRecordListV1Response_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.dataVersion,b.dataVersion);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.recordList,b.recordList);jce_copy_struct(a.isUpdateAll,b.isUpdateAll);jce_copy_struct(a.lastClearAllTimeInterval,b.lastClearAllTimeInterval);jce_copy_struct(a.deleteList,b.deleteList);

#define jce_WatchRecordUploadV1Request_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uploadList,b.uploadList);jce_copy_struct(a.dataVersion,b.dataVersion);

#define jce_WatchRecordUploadV1Response_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.dataVersion,b.dataVersion);jce_copy_struct(a.recordList,b.recordList);

#define jce_WatchRecordDeleteV1Request_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataVersion,b.dataVersion);jce_copy_struct(a.recordList,b.recordList);jce_copy_struct(a.isDeleteAll,b.isDeleteAll);

#define jce_WatchRecordDeleteV1Response_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.dataVersion,b.dataVersion);

#define jce_WatchRecordPostersV1Request_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.recordList,b.recordList);

#define jce_WatchRecordPostersV1Response_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.recordList,b.recordList);



#endif
