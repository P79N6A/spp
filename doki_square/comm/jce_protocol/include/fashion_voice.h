// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `fashion_voice.jce'
// **********************************************************************

#ifndef __FASHION_VOICE_H_
#define __FASHION_VOICE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "user_info.h"


namespace FashionVoiceRank
{
    struct stStarInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FashionVoiceRank.stStarInfo";
        }
        static string MD5()
        {
            return "27a952e7888885d53794114c0f8d5c13";
        }
        stStarInfo()
        :lStarId(0),lDokiId(0),strStarName(""),strFaceImgUrl("")
        {
        }
        void resetDefautlt()
        {
            lStarId = 0;
            lDokiId = 0;
            strStarName = "";
            strFaceImgUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lStarId, 0);
            _os.write(lDokiId, 1);
            _os.write(strStarName, 2);
            _os.write(strFaceImgUrl, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lStarId, 0, true);
            _is.read(lDokiId, 1, true);
            _is.read(strStarName, 2, true);
            _is.read(strFaceImgUrl, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lStarId,"lStarId");
            _ds.display(lDokiId,"lDokiId");
            _ds.display(strStarName,"strStarName");
            _ds.display(strFaceImgUrl,"strFaceImgUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lStarId, true);
            _ds.displaySimple(lDokiId, true);
            _ds.displaySimple(strStarName, true);
            _ds.displaySimple(strFaceImgUrl, false);
            return _os;
        }
    public:
        taf::Int64 lStarId;
        taf::Int64 lDokiId;
        std::string strStarName;
        std::string strFaceImgUrl;
    };
    inline bool operator==(const stStarInfo&l, const stStarInfo&r)
    {
        return l.lStarId == r.lStarId && l.lDokiId == r.lDokiId && l.strStarName == r.strStarName && l.strFaceImgUrl == r.strFaceImgUrl;
    }
    inline bool operator!=(const stStarInfo&l, const stStarInfo&r)
    {
        return !(l == r);
    }

    struct STFansInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FashionVoiceRank.STFansInfo";
        }
        static string MD5()
        {
            return "462c286725c0b1ee1a7d9d1d2da462d4";
        }
        STFansInfo()
        :iVoteNum(0),iRank(0),strPersonalLink(""),iReceiveNum(0)
        {
        }
        void resetDefautlt()
        {
            iVoteNum = 0;
            iRank = 0;
            strPersonalLink = "";
            iReceiveNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stFansData, 0);
            _os.write(iVoteNum, 1);
            _os.write(iRank, 2);
            _os.write(strPersonalLink, 3);
            _os.write(stFavoriteStar, 5);
            _os.write(iReceiveNum, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stFansData, 0, true);
            _is.read(iVoteNum, 1, true);
            _is.read(iRank, 2, true);
            _is.read(strPersonalLink, 3, false);
            _is.read(stFavoriteStar, 5, false);
            _is.read(iReceiveNum, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stFansData,"stFansData");
            _ds.display(iVoteNum,"iVoteNum");
            _ds.display(iRank,"iRank");
            _ds.display(strPersonalLink,"strPersonalLink");
            _ds.display(stFavoriteStar,"stFavoriteStar");
            _ds.display(iReceiveNum,"iReceiveNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stFansData, true);
            _ds.displaySimple(iVoteNum, true);
            _ds.displaySimple(iRank, true);
            _ds.displaySimple(strPersonalLink, true);
            _ds.displaySimple(stFavoriteStar, true);
            _ds.displaySimple(iReceiveNum, false);
            return _os;
        }
    public:
        jceUserInfo::stUserInfo stFansData;
        taf::Int32 iVoteNum;
        taf::Int32 iRank;
        std::string strPersonalLink;
        FashionVoiceRank::stStarInfo stFavoriteStar;
        taf::Int32 iReceiveNum;
    };
    inline bool operator==(const STFansInfo&l, const STFansInfo&r)
    {
        return l.stFansData == r.stFansData && l.iVoteNum == r.iVoteNum && l.iRank == r.iRank && l.strPersonalLink == r.strPersonalLink && l.stFavoriteStar == r.stFavoriteStar && l.iReceiveNum == r.iReceiveNum;
    }
    inline bool operator!=(const STFansInfo&l, const STFansInfo&r)
    {
        return !(l == r);
    }

    struct BannerImg : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FashionVoiceRank.BannerImg";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        BannerImg()
        :strStarBg(""),strRankBg(""),strRankName(""),strStarName("")
        {
        }
        void resetDefautlt()
        {
            strStarBg = "";
            strRankBg = "";
            strRankName = "";
            strStarName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strStarBg, 0);
            _os.write(strRankBg, 1);
            _os.write(strRankName, 2);
            _os.write(strStarName, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strStarBg, 0, true);
            _is.read(strRankBg, 1, true);
            _is.read(strRankName, 2, true);
            _is.read(strStarName, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strStarBg,"strStarBg");
            _ds.display(strRankBg,"strRankBg");
            _ds.display(strRankName,"strRankName");
            _ds.display(strStarName,"strStarName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strStarBg, true);
            _ds.displaySimple(strRankBg, true);
            _ds.displaySimple(strRankName, true);
            _ds.displaySimple(strStarName, false);
            return _os;
        }
    public:
        std::string strStarBg;
        std::string strRankBg;
        std::string strRankName;
        std::string strStarName;
    };
    inline bool operator==(const BannerImg&l, const BannerImg&r)
    {
        return l.strStarBg == r.strStarBg && l.strRankBg == r.strRankBg && l.strRankName == r.strRankName && l.strStarName == r.strStarName;
    }
    inline bool operator!=(const BannerImg&l, const BannerImg&r)
    {
        return !(l == r);
    }

    struct stFansRankReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FashionVoiceRank.stFansRankReq";
        }
        static string MD5()
        {
            return "1e51331fdfe50068ddf21876f8babbab";
        }
        stFansRankReq()
        :iTimeType(0),lRankTime(0),iReqNum(0),iPage(0),lStarId(0)
        {
        }
        void resetDefautlt()
        {
            iTimeType = 0;
            lRankTime = 0;
            iReqNum = 0;
            iPage = 0;
            lStarId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iTimeType, 0);
            _os.write(lRankTime, 1);
            _os.write(iReqNum, 2);
            _os.write(iPage, 3);
            _os.write(lStarId, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iTimeType, 0, true);
            _is.read(lRankTime, 1, false);
            _is.read(iReqNum, 2, false);
            _is.read(iPage, 3, false);
            _is.read(lStarId, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iTimeType,"iTimeType");
            _ds.display(lRankTime,"lRankTime");
            _ds.display(iReqNum,"iReqNum");
            _ds.display(iPage,"iPage");
            _ds.display(lStarId,"lStarId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iTimeType, true);
            _ds.displaySimple(lRankTime, true);
            _ds.displaySimple(iReqNum, true);
            _ds.displaySimple(iPage, true);
            _ds.displaySimple(lStarId, false);
            return _os;
        }
    public:
        taf::Int32 iTimeType;
        taf::Int64 lRankTime;
        taf::UInt32 iReqNum;
        taf::UInt32 iPage;
        taf::Int64 lStarId;
    };
    inline bool operator==(const stFansRankReq&l, const stFansRankReq&r)
    {
        return l.iTimeType == r.iTimeType && l.lRankTime == r.lRankTime && l.iReqNum == r.iReqNum && l.iPage == r.iPage && l.lStarId == r.lStarId;
    }
    inline bool operator!=(const stFansRankReq&l, const stFansRankReq&r)
    {
        return !(l == r);
    }

    struct stFansRankRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FashionVoiceRank.stFansRankRsp";
        }
        static string MD5()
        {
            return "8c7a92c165120dc85d178c037986ad5a";
        }
        stFansRankRsp()
        :iErrCode(0),strErrMsg(""),iPeriod(0),iNextPage(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            iPeriod = 0;
            iNextPage = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(iPeriod, 2);
            _os.write(stBannerImg, 3);
            _os.write(vecUserInfo, 4);
            _os.write(iNextPage, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(iPeriod, 2, false);
            _is.read(stBannerImg, 3, false);
            _is.read(vecUserInfo, 4, false);
            _is.read(iNextPage, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(iPeriod,"iPeriod");
            _ds.display(stBannerImg,"stBannerImg");
            _ds.display(vecUserInfo,"vecUserInfo");
            _ds.display(iNextPage,"iNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(iPeriod, true);
            _ds.displaySimple(stBannerImg, true);
            _ds.displaySimple(vecUserInfo, true);
            _ds.displaySimple(iNextPage, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        taf::UInt32 iPeriod;
        FashionVoiceRank::BannerImg stBannerImg;
        vector<FashionVoiceRank::STFansInfo> vecUserInfo;
        taf::UInt32 iNextPage;
    };
    inline bool operator==(const stFansRankRsp&l, const stFansRankRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.iPeriod == r.iPeriod && l.stBannerImg == r.stBannerImg && l.vecUserInfo == r.vecUserInfo && l.iNextPage == r.iNextPage;
    }
    inline bool operator!=(const stFansRankRsp&l, const stFansRankRsp&r)
    {
        return !(l == r);
    }

    struct STStarInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FashionVoiceRank.STStarInfo";
        }
        static string MD5()
        {
            return "b51fc46f02ad6acd924fb0fe976d7a6d";
        }
        STStarInfo()
        :strStarId(""),strDokiId(""),strName(""),strHeader(""),strChannel(""),strActStatus(""),strFrom(""),iVoteStatus(0),bPush(true)
        {
        }
        void resetDefautlt()
        {
            strStarId = "";
            strDokiId = "";
            strName = "";
            strHeader = "";
            strChannel = "";
            strActStatus = "";
            strFrom = "";
            iVoteStatus = 0;
            bPush = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strStarId, 0);
            _os.write(strDokiId, 1);
            _os.write(strName, 2);
            _os.write(strHeader, 3);
            _os.write(strChannel, 4);
            _os.write(strActStatus, 5);
            _os.write(strFrom, 6);
            _os.write(iVoteStatus, 7);
            _os.write(bPush, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strStarId, 0, false);
            _is.read(strDokiId, 1, false);
            _is.read(strName, 2, false);
            _is.read(strHeader, 3, false);
            _is.read(strChannel, 4, false);
            _is.read(strActStatus, 5, false);
            _is.read(strFrom, 6, false);
            _is.read(iVoteStatus, 7, false);
            _is.read(bPush, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strStarId,"strStarId");
            _ds.display(strDokiId,"strDokiId");
            _ds.display(strName,"strName");
            _ds.display(strHeader,"strHeader");
            _ds.display(strChannel,"strChannel");
            _ds.display(strActStatus,"strActStatus");
            _ds.display(strFrom,"strFrom");
            _ds.display(iVoteStatus,"iVoteStatus");
            _ds.display(bPush,"bPush");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strStarId, true);
            _ds.displaySimple(strDokiId, true);
            _ds.displaySimple(strName, true);
            _ds.displaySimple(strHeader, true);
            _ds.displaySimple(strChannel, true);
            _ds.displaySimple(strActStatus, true);
            _ds.displaySimple(strFrom, true);
            _ds.displaySimple(iVoteStatus, true);
            _ds.displaySimple(bPush, false);
            return _os;
        }
    public:
        std::string strStarId;
        std::string strDokiId;
        std::string strName;
        std::string strHeader;
        std::string strChannel;
        std::string strActStatus;
        std::string strFrom;
        taf::Int32 iVoteStatus;
        taf::Bool bPush;
    };
    inline bool operator==(const STStarInfo&l, const STStarInfo&r)
    {
        return l.strStarId == r.strStarId && l.strDokiId == r.strDokiId && l.strName == r.strName && l.strHeader == r.strHeader && l.strChannel == r.strChannel && l.strActStatus == r.strActStatus && l.strFrom == r.strFrom && l.iVoteStatus == r.iVoteStatus && l.bPush == r.bPush;
    }
    inline bool operator!=(const STStarInfo&l, const STStarInfo&r)
    {
        return !(l == r);
    }

    struct STStarData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FashionVoiceRank.STStarData";
        }
        static string MD5()
        {
            return "eb5e69fa7193eb2d0f2d39c213fed8a5";
        }
        STStarData()
        :lScore(0),lVoteFansNum(0),lVoteCnt(0),iRank(0),strBattle("")
        {
        }
        void resetDefautlt()
        {
            lScore = 0;
            lVoteFansNum = 0;
            lVoteCnt = 0;
            iRank = 0;
            strBattle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lScore, 0);
            _os.write(lVoteFansNum, 1);
            _os.write(lVoteCnt, 2);
            _os.write(iRank, 3);
            _os.write(strBattle, 4);
            _os.write(vecPastRank, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lScore, 0, false);
            _is.read(lVoteFansNum, 1, false);
            _is.read(lVoteCnt, 2, false);
            _is.read(iRank, 3, false);
            _is.read(strBattle, 4, false);
            _is.read(vecPastRank, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lScore,"lScore");
            _ds.display(lVoteFansNum,"lVoteFansNum");
            _ds.display(lVoteCnt,"lVoteCnt");
            _ds.display(iRank,"iRank");
            _ds.display(strBattle,"strBattle");
            _ds.display(vecPastRank,"vecPastRank");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lScore, true);
            _ds.displaySimple(lVoteFansNum, true);
            _ds.displaySimple(lVoteCnt, true);
            _ds.displaySimple(iRank, true);
            _ds.displaySimple(strBattle, true);
            _ds.displaySimple(vecPastRank, false);
            return _os;
        }
    public:
        taf::Int64 lScore;
        taf::Int64 lVoteFansNum;
        taf::Int64 lVoteCnt;
        taf::Int32 iRank;
        std::string strBattle;
        vector<taf::Int32> vecPastRank;
    };
    inline bool operator==(const STStarData&l, const STStarData&r)
    {
        return l.lScore == r.lScore && l.lVoteFansNum == r.lVoteFansNum && l.lVoteCnt == r.lVoteCnt && l.iRank == r.iRank && l.strBattle == r.strBattle && l.vecPastRank == r.vecPastRank;
    }
    inline bool operator!=(const STStarData&l, const STStarData&r)
    {
        return !(l == r);
    }

    struct STStarRankInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FashionVoiceRank.STStarRankInfo";
        }
        static string MD5()
        {
            return "597fdd6187329563ace44d8f77b9aee2";
        }
        STStarRankInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stInfo, 0);
            _os.write(stData, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stInfo, 0, false);
            _is.read(stData, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stInfo,"stInfo");
            _ds.display(stData,"stData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stInfo, true);
            _ds.displaySimple(stData, false);
            return _os;
        }
    public:
        FashionVoiceRank::STStarInfo stInfo;
        FashionVoiceRank::STStarData stData;
    };
    inline bool operator==(const STStarRankInfo&l, const STStarRankInfo&r)
    {
        return l.stInfo == r.stInfo && l.stData == r.stData;
    }
    inline bool operator!=(const STStarRankInfo&l, const STStarRankInfo&r)
    {
        return !(l == r);
    }

    struct stStarRankReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FashionVoiceRank.stStarRankReq";
        }
        static string MD5()
        {
            return "72dfddf03422779b81fb661a3938fb92";
        }
        stStarRankReq()
        :iReqTime(0),iReqType(0),strStarId("")
        {
        }
        void resetDefautlt()
        {
            iReqTime = 0;
            iReqType = 0;
            strStarId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iReqTime, 0);
            _os.write(iReqType, 1);
            _os.write(strStarId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iReqTime, 0, true);
            _is.read(iReqType, 1, true);
            _is.read(strStarId, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iReqTime,"iReqTime");
            _ds.display(iReqType,"iReqType");
            _ds.display(strStarId,"strStarId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iReqTime, true);
            _ds.displaySimple(iReqType, true);
            _ds.displaySimple(strStarId, false);
            return _os;
        }
    public:
        taf::Int32 iReqTime;
        taf::Int32 iReqType;
        std::string strStarId;
    };
    inline bool operator==(const stStarRankReq&l, const stStarRankReq&r)
    {
        return l.iReqTime == r.iReqTime && l.iReqType == r.iReqType && l.strStarId == r.strStarId;
    }
    inline bool operator!=(const stStarRankReq&l, const stStarRankReq&r)
    {
        return !(l == r);
    }

    struct stStarRankRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FashionVoiceRank.stStarRankRsp";
        }
        static string MD5()
        {
            return "4c0260ee4370ddb0f26b09d82d627edd";
        }
        stStarRankRsp()
        :iErrCode(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(vecStarInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(vecStarInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(vecStarInfo,"vecStarInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(vecStarInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        vector<FashionVoiceRank::STStarRankInfo> vecStarInfo;
    };
    inline bool operator==(const stStarRankRsp&l, const stStarRankRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.vecStarInfo == r.vecStarInfo;
    }
    inline bool operator!=(const stStarRankRsp&l, const stStarRankRsp&r)
    {
        return !(l == r);
    }

    struct FansVoteFLowDataReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FashionVoiceRank.FansVoteFLowDataReq";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        FansVoteFLowDataReq()
        :strStarId("")
        {
        }
        void resetDefautlt()
        {
            strStarId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strStarId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strStarId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strStarId,"strStarId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strStarId, false);
            return _os;
        }
    public:
        std::string strStarId;
    };
    inline bool operator==(const FansVoteFLowDataReq&l, const FansVoteFLowDataReq&r)
    {
        return l.strStarId == r.strStarId;
    }
    inline bool operator!=(const FansVoteFLowDataReq&l, const FansVoteFLowDataReq&r)
    {
        return !(l == r);
    }

    struct FansVoteFLowDataRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FashionVoiceRank.FansVoteFLowDataRsp";
        }
        static string MD5()
        {
            return "2a5531357fa1ff1b39c405404368f4ab";
        }
        FansVoteFLowDataRsp()
        :iErrCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecUserInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecUserInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecUserInfo,"vecUserInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecUserInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<FashionVoiceRank::STFansInfo> vecUserInfo;
    };
    inline bool operator==(const FansVoteFLowDataRsp&l, const FansVoteFLowDataRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecUserInfo == r.vecUserInfo;
    }
    inline bool operator!=(const FansVoteFLowDataRsp&l, const FansVoteFLowDataRsp&r)
    {
        return !(l == r);
    }


}

#define FashionVoiceRank_stStarInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lStarId,b.lStarId);jce_copy_struct(a.lDokiId,b.lDokiId);jce_copy_struct(a.strStarName,b.strStarName);jce_copy_struct(a.strFaceImgUrl,b.strFaceImgUrl);

#define FashionVoiceRank_STFansInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stFansData,b.stFansData);jce_copy_struct(a.iVoteNum,b.iVoteNum);jce_copy_struct(a.iRank,b.iRank);jce_copy_struct(a.strPersonalLink,b.strPersonalLink);jce_copy_struct(a.stFavoriteStar,b.stFavoriteStar);jce_copy_struct(a.iReceiveNum,b.iReceiveNum);

#define FashionVoiceRank_BannerImg_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strStarBg,b.strStarBg);jce_copy_struct(a.strRankBg,b.strRankBg);jce_copy_struct(a.strRankName,b.strRankName);jce_copy_struct(a.strStarName,b.strStarName);

#define FashionVoiceRank_stFansRankReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iTimeType,b.iTimeType);jce_copy_struct(a.lRankTime,b.lRankTime);jce_copy_struct(a.iReqNum,b.iReqNum);jce_copy_struct(a.iPage,b.iPage);jce_copy_struct(a.lStarId,b.lStarId);

#define FashionVoiceRank_stFansRankRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.iPeriod,b.iPeriod);jce_copy_struct(a.stBannerImg,b.stBannerImg);jce_copy_struct(a.vecUserInfo,b.vecUserInfo);jce_copy_struct(a.iNextPage,b.iNextPage);

#define FashionVoiceRank_STStarInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strStarId,b.strStarId);jce_copy_struct(a.strDokiId,b.strDokiId);jce_copy_struct(a.strName,b.strName);jce_copy_struct(a.strHeader,b.strHeader);jce_copy_struct(a.strChannel,b.strChannel);jce_copy_struct(a.strActStatus,b.strActStatus);jce_copy_struct(a.strFrom,b.strFrom);jce_copy_struct(a.iVoteStatus,b.iVoteStatus);jce_copy_struct(a.bPush,b.bPush);

#define FashionVoiceRank_STStarData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lScore,b.lScore);jce_copy_struct(a.lVoteFansNum,b.lVoteFansNum);jce_copy_struct(a.lVoteCnt,b.lVoteCnt);jce_copy_struct(a.iRank,b.iRank);jce_copy_struct(a.strBattle,b.strBattle);jce_copy_struct(a.vecPastRank,b.vecPastRank);

#define FashionVoiceRank_STStarRankInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stInfo,b.stInfo);jce_copy_struct(a.stData,b.stData);

#define FashionVoiceRank_stStarRankReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iReqTime,b.iReqTime);jce_copy_struct(a.iReqType,b.iReqType);jce_copy_struct(a.strStarId,b.strStarId);

#define FashionVoiceRank_stStarRankRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.vecStarInfo,b.vecStarInfo);

#define FashionVoiceRank_FansVoteFLowDataReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strStarId,b.strStarId);

#define FashionVoiceRank_FansVoteFLowDataRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecUserInfo,b.vecUserInfo);



#endif
