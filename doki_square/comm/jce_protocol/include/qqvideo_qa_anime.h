// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_qa_anime.jce'
// **********************************************************************

#ifndef __QQVIDEO_QA_ANIME_H_
#define __QQVIDEO_QA_ANIME_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"
#include "qqvideo_user_info.h"


namespace jce
{
    struct PubQAMsgRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PubQAMsgRequest";
        }
        static string MD5()
        {
            return "788d59a5aa60cb597056fbb8ccac8a1e";
        }
        PubQAMsgRequest()
        :dataKey(""),cfrom(0),seq(""),qaTitle(""),qaContent(""),status(0)
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            cfrom = 0;
            seq = "";
            qaTitle = "";
            qaContent = "";
            status = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(cfrom, 1);
            _os.write(seq, 2);
            _os.write(qaTitle, 3);
            _os.write(qaContent, 4);
            _os.write(imageList, 5);
            _os.write(actorInfoList, 6);
            _os.write(userStarInfo, 7);
            _os.write(status, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(cfrom, 1, false);
            _is.read(seq, 2, false);
            _is.read(qaTitle, 3, false);
            _is.read(qaContent, 4, false);
            _is.read(imageList, 5, false);
            _is.read(actorInfoList, 6, false);
            _is.read(userStarInfo, 7, false);
            _is.read(status, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(cfrom,"cfrom");
            _ds.display(seq,"seq");
            _ds.display(qaTitle,"qaTitle");
            _ds.display(qaContent,"qaContent");
            _ds.display(imageList,"imageList");
            _ds.display(actorInfoList,"actorInfoList");
            _ds.display(userStarInfo,"userStarInfo");
            _ds.display(status,"status");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(cfrom, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(qaTitle, true);
            _ds.displaySimple(qaContent, true);
            _ds.displaySimple(imageList, true);
            _ds.displaySimple(actorInfoList, true);
            _ds.displaySimple(userStarInfo, true);
            _ds.displaySimple(status, false);
            return _os;
        }
    public:
        std::string dataKey;
        taf::Int32 cfrom;
        std::string seq;
        std::string qaTitle;
        std::string qaContent;
        vector<jce::CircleUploadImageUrl> imageList;
        vector<jce::ActorInfo> actorInfoList;
        jce::STStarInfo userStarInfo;
        taf::Char status;
    };
    inline bool operator==(const PubQAMsgRequest&l, const PubQAMsgRequest&r)
    {
        return l.dataKey == r.dataKey && l.cfrom == r.cfrom && l.seq == r.seq && l.qaTitle == r.qaTitle && l.qaContent == r.qaContent && l.imageList == r.imageList && l.actorInfoList == r.actorInfoList && l.userStarInfo == r.userStarInfo && l.status == r.status;
    }
    inline bool operator!=(const PubQAMsgRequest&l, const PubQAMsgRequest&r)
    {
        return !(l == r);
    }

    struct PubQAMsgResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PubQAMsgResponse";
        }
        static string MD5()
        {
            return "28e514d13cf6fac6181dae4e8383e315";
        }
        PubQAMsgResponse()
        :errCode(0),errMsg(""),sucMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
            sucMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(sucMsg, 2);
            _os.write(qaPrimaryFeed, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, false);
            _is.read(sucMsg, 2, false);
            _is.read(qaPrimaryFeed, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(sucMsg,"sucMsg");
            _ds.display(qaPrimaryFeed,"qaPrimaryFeed");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(sucMsg, true);
            _ds.displaySimple(qaPrimaryFeed, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        std::string sucMsg;
        jce::QAPrimaryFeed qaPrimaryFeed;
    };
    inline bool operator==(const PubQAMsgResponse&l, const PubQAMsgResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.sucMsg == r.sucMsg && l.qaPrimaryFeed == r.qaPrimaryFeed;
    }
    inline bool operator!=(const PubQAMsgResponse&l, const PubQAMsgResponse&r)
    {
        return !(l == r);
    }

    struct QAFeedDetailRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QAFeedDetailRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        QAFeedDetailRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const QAFeedDetailRequest&l, const QAFeedDetailRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const QAFeedDetailRequest&l, const QAFeedDetailRequest&r)
    {
        return !(l == r);
    }

    struct QAFeedDetailResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QAFeedDetailResponse";
        }
        static string MD5()
        {
            return "904c58749521c816c641b3725559bdb8";
        }
        QAFeedDetailResponse()
        :errCode(0),postDataKey(""),pageContext(""),hasNextPage(false)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            postDataKey = "";
            pageContext = "";
            hasNextPage = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(qaPrimaryFeed, 1);
            _os.write(uiData, 2);
            _os.write(postDataKey, 3);
            _os.write(pageContext, 4);
            _os.write(hasNextPage, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(qaPrimaryFeed, 1, true);
            _is.read(uiData, 2, false);
            _is.read(postDataKey, 3, false);
            _is.read(pageContext, 4, false);
            _is.read(hasNextPage, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(qaPrimaryFeed,"qaPrimaryFeed");
            _ds.display(uiData,"uiData");
            _ds.display(postDataKey,"postDataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(qaPrimaryFeed, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(postDataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::QAPrimaryFeed qaPrimaryFeed;
        vector<jce::TempletLine> uiData;
        std::string postDataKey;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const QAFeedDetailResponse&l, const QAFeedDetailResponse&r)
    {
        return l.errCode == r.errCode && l.qaPrimaryFeed == r.qaPrimaryFeed && l.uiData == r.uiData && l.postDataKey == r.postDataKey && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const QAFeedDetailResponse&l, const QAFeedDetailResponse&r)
    {
        return !(l == r);
    }

    struct QAFeedReportRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QAFeedReportRequest";
        }
        static string MD5()
        {
            return "c9a7b07e8b044d0fcbe9339d81fbbd69";
        }
        QAFeedReportRequest()
        :dataKey(""),seq(""),reportType(0),description("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            seq = "";
            reportType = 0;
            description = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(seq, 1);
            _os.write(reportType, 2);
            _os.write(description, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, false);
            _is.read(seq, 1, false);
            _is.read(reportType, 2, false);
            _is.read(description, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(seq,"seq");
            _ds.display(reportType,"reportType");
            _ds.display(description,"description");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(reportType, true);
            _ds.displaySimple(description, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string seq;
        taf::Int32 reportType;
        std::string description;
    };
    inline bool operator==(const QAFeedReportRequest&l, const QAFeedReportRequest&r)
    {
        return l.dataKey == r.dataKey && l.seq == r.seq && l.reportType == r.reportType && l.description == r.description;
    }
    inline bool operator!=(const QAFeedReportRequest&l, const QAFeedReportRequest&r)
    {
        return !(l == r);
    }

    struct QAFeedReportResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QAFeedReportResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        QAFeedReportResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const QAFeedReportResponse&l, const QAFeedReportResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const QAFeedReportResponse&l, const QAFeedReportResponse&r)
    {
        return !(l == r);
    }

    struct QAFeedDeleteRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QAFeedDeleteRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        QAFeedDeleteRequest()
        :dataKey(""),seq("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            seq = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(seq, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, false);
            _is.read(seq, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(seq,"seq");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(seq, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string seq;
    };
    inline bool operator==(const QAFeedDeleteRequest&l, const QAFeedDeleteRequest&r)
    {
        return l.dataKey == r.dataKey && l.seq == r.seq;
    }
    inline bool operator!=(const QAFeedDeleteRequest&l, const QAFeedDeleteRequest&r)
    {
        return !(l == r);
    }

    struct QAFeedDeleteResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QAFeedDeleteResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        QAFeedDeleteResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const QAFeedDeleteResponse&l, const QAFeedDeleteResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const QAFeedDeleteResponse&l, const QAFeedDeleteResponse&r)
    {
        return !(l == r);
    }

    struct CheckPublishStatusRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckPublishStatusRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        CheckPublishStatusRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const CheckPublishStatusRequest&l, const CheckPublishStatusRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const CheckPublishStatusRequest&l, const CheckPublishStatusRequest&r)
    {
        return !(l == r);
    }

    struct CheckPublishStatusResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckPublishStatusResponse";
        }
        static string MD5()
        {
            return "ba773609c617b40a00c994314d8cba77";
        }
        CheckPublishStatusResponse()
        :errCode(0),statusMask(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            statusMask = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(statusMask, 1);
            _os.write(action, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(statusMask, 1, true);
            _is.read(action, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(statusMask,"statusMask");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(statusMask, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 statusMask;
        jce::Action action;
    };
    inline bool operator==(const CheckPublishStatusResponse&l, const CheckPublishStatusResponse&r)
    {
        return l.errCode == r.errCode && l.statusMask == r.statusMask && l.action == r.action;
    }
    inline bool operator!=(const CheckPublishStatusResponse&l, const CheckPublishStatusResponse&r)
    {
        return !(l == r);
    }

    struct PubQASmartBoxRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PubQASmartBoxRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        PubQASmartBoxRequest()
        :keyWord(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            keyWord = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(keyWord, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(keyWord, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(keyWord,"keyWord");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(keyWord, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string keyWord;
        std::string pageContext;
    };
    inline bool operator==(const PubQASmartBoxRequest&l, const PubQASmartBoxRequest&r)
    {
        return l.keyWord == r.keyWord && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const PubQASmartBoxRequest&l, const PubQASmartBoxRequest&r)
    {
        return !(l == r);
    }

    struct PubQASmartBoxResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PubQASmartBoxResponse";
        }
        static string MD5()
        {
            return "5330f8e03cd3e67fc3e32a6189b83138";
        }
        PubQASmartBoxResponse()
        :errCode(0),pageContext(""),hasNextPage(false)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(itemList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(itemList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(itemList,"itemList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TextAction> itemList;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const PubQASmartBoxResponse&l, const PubQASmartBoxResponse&r)
    {
        return l.errCode == r.errCode && l.itemList == r.itemList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const PubQASmartBoxResponse&l, const PubQASmartBoxResponse&r)
    {
        return !(l == r);
    }


}

#define jce_PubQAMsgRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.cfrom,b.cfrom);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.qaTitle,b.qaTitle);jce_copy_struct(a.qaContent,b.qaContent);jce_copy_struct(a.imageList,b.imageList);jce_copy_struct(a.actorInfoList,b.actorInfoList);jce_copy_struct(a.userStarInfo,b.userStarInfo);jce_copy_struct(a.status,b.status);

#define jce_PubQAMsgResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.sucMsg,b.sucMsg);jce_copy_struct(a.qaPrimaryFeed,b.qaPrimaryFeed);

#define jce_QAFeedDetailRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_QAFeedDetailResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.qaPrimaryFeed,b.qaPrimaryFeed);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.postDataKey,b.postDataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_QAFeedReportRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.reportType,b.reportType);jce_copy_struct(a.description,b.description);

#define jce_QAFeedReportResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_QAFeedDeleteRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.seq,b.seq);

#define jce_QAFeedDeleteResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_CheckPublishStatusRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_CheckPublishStatusResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.statusMask,b.statusMask);jce_copy_struct(a.action,b.action);

#define jce_PubQASmartBoxRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.keyWord,b.keyWord);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_PubQASmartBoxResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);



#endif
