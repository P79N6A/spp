// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_ios_searchindex.jce'
// **********************************************************************

#ifndef __QQVIDEO_IOS_SEARCHINDEX_H_
#define __QQVIDEO_IOS_SEARCHINDEX_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"


namespace jce
{
    struct IOSSearchIndexItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.IOSSearchIndexItem";
        }
        static string MD5()
        {
            return "9f93e12f4f45c031dc528f362b5e3216";
        }
        IOSSearchIndexItem()
        :thumbnail(""),title(""),subTitle(""),rating(0),ratingDescription("")
        {
        }
        void resetDefautlt()
        {
            thumbnail = "";
            title = "";
            subTitle = "";
            rating = 0;
            ratingDescription = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(thumbnail, 0);
            _os.write(title, 1);
            _os.write(subTitle, 2);
            _os.write(keywords, 3);
            _os.write(action, 4);
            _os.write(rating, 5);
            _os.write(ratingDescription, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(thumbnail, 0, false);
            _is.read(title, 1, false);
            _is.read(subTitle, 2, false);
            _is.read(keywords, 3, false);
            _is.read(action, 4, false);
            _is.read(rating, 5, false);
            _is.read(ratingDescription, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(thumbnail,"thumbnail");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(keywords,"keywords");
            _ds.display(action,"action");
            _ds.display(rating,"rating");
            _ds.display(ratingDescription,"ratingDescription");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(thumbnail, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(keywords, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(rating, true);
            _ds.displaySimple(ratingDescription, false);
            return _os;
        }
    public:
        std::string thumbnail;
        std::string title;
        std::string subTitle;
        vector<std::string> keywords;
        jce::Action action;
        taf::Float rating;
        std::string ratingDescription;
    };
    inline bool operator==(const IOSSearchIndexItem&l, const IOSSearchIndexItem&r)
    {
        return l.thumbnail == r.thumbnail && l.title == r.title && l.subTitle == r.subTitle && l.keywords == r.keywords && l.action == r.action && l.rating == r.rating && l.ratingDescription == r.ratingDescription;
    }
    inline bool operator!=(const IOSSearchIndexItem&l, const IOSSearchIndexItem&r)
    {
        return !(l == r);
    }

    struct IOSSearchIndexRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.IOSSearchIndexRequest";
        }
        static string MD5()
        {
            return "cb4558a7d1cbd8cbf583df7337cc71f1";
        }
        IOSSearchIndexRequest()
        :dataKey(""),updateTime(0)
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            updateTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(updateTime, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(updateTime, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(updateTime,"updateTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(updateTime, false);
            return _os;
        }
    public:
        std::string dataKey;
        taf::Int64 updateTime;
    };
    inline bool operator==(const IOSSearchIndexRequest&l, const IOSSearchIndexRequest&r)
    {
        return l.dataKey == r.dataKey && l.updateTime == r.updateTime;
    }
    inline bool operator!=(const IOSSearchIndexRequest&l, const IOSSearchIndexRequest&r)
    {
        return !(l == r);
    }

    struct IOSSearchIndexResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.IOSSearchIndexResponse";
        }
        static string MD5()
        {
            return "7a9d196985ba3ee2f9ff8d6a53e00aed";
        }
        IOSSearchIndexResponse()
        :errCode(0),updateFlag(true),serverTime(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            updateFlag = true;
            serverTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(data, 1);
            _os.write(updateFlag, 2);
            _os.write(serverTime, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(data, 1, false);
            _is.read(updateFlag, 2, false);
            _is.read(serverTime, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(data,"data");
            _ds.display(updateFlag,"updateFlag");
            _ds.display(serverTime,"serverTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(data, true);
            _ds.displaySimple(updateFlag, true);
            _ds.displaySimple(serverTime, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::IOSSearchIndexItem> data;
        taf::Bool updateFlag;
        taf::Int64 serverTime;
    };
    inline bool operator==(const IOSSearchIndexResponse&l, const IOSSearchIndexResponse&r)
    {
        return l.errCode == r.errCode && l.data == r.data && l.updateFlag == r.updateFlag && l.serverTime == r.serverTime;
    }
    inline bool operator!=(const IOSSearchIndexResponse&l, const IOSSearchIndexResponse&r)
    {
        return !(l == r);
    }


}

#define jce_IOSSearchIndexItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.thumbnail,b.thumbnail);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.keywords,b.keywords);jce_copy_struct(a.action,b.action);jce_copy_struct(a.rating,b.rating);jce_copy_struct(a.ratingDescription,b.ratingDescription);

#define jce_IOSSearchIndexRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.updateTime,b.updateTime);

#define jce_IOSSearchIndexResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.data,b.data);jce_copy_struct(a.updateFlag,b.updateFlag);jce_copy_struct(a.serverTime,b.serverTime);



#endif
