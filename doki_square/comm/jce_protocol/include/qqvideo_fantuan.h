// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_fantuan.jce'
// **********************************************************************

#ifndef __QQVIDEO_FANTUAN_H_
#define __QQVIDEO_FANTUAN_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"
#include "qqvideo_ona.h"
#include "qqvideo_personality.h"
#include "qqvideo_user_info.h"


namespace jce
{
    struct FantuanLongVideo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FantuanLongVideo";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        FantuanLongVideo()
        :strWebPlayUrl("")
        {
        }
        void resetDefautlt()
        {
            strWebPlayUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strWebPlayUrl, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strWebPlayUrl, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strWebPlayUrl,"strWebPlayUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strWebPlayUrl, false);
            return _os;
        }
    public:
        std::string strWebPlayUrl;
    };
    inline bool operator==(const FantuanLongVideo&l, const FantuanLongVideo&r)
    {
        return l.strWebPlayUrl == r.strWebPlayUrl;
    }
    inline bool operator!=(const FantuanLongVideo&l, const FantuanLongVideo&r)
    {
        return !(l == r);
    }

    struct FanTuanFollowItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanFollowItem";
        }
        static string MD5()
        {
            return "9bda4ac16227127f47ea815aed6f8d9e";
        }
        FanTuanFollowItem()
        :fanTuanId(""),status(0),signCount(0)
        {
        }
        void resetDefautlt()
        {
            fanTuanId = "";
            status = 0;
            signCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fanTuanId, 0);
            _os.write(status, 1);
            _os.write(signCount, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fanTuanId, 0, true);
            _is.read(status, 1, true);
            _is.read(signCount, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fanTuanId,"fanTuanId");
            _ds.display(status,"status");
            _ds.display(signCount,"signCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fanTuanId, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(signCount, false);
            return _os;
        }
    public:
        std::string fanTuanId;
        taf::Int32 status;
        taf::Int32 signCount;
    };
    inline bool operator==(const FanTuanFollowItem&l, const FanTuanFollowItem&r)
    {
        return l.fanTuanId == r.fanTuanId && l.status == r.status && l.signCount == r.signCount;
    }
    inline bool operator!=(const FanTuanFollowItem&l, const FanTuanFollowItem&r)
    {
        return !(l == r);
    }

    struct FanTuanRankItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanRankItem";
        }
        static string MD5()
        {
            return "9b3cb132c718be9dd3979a54ec00d9ad";
        }
        FanTuanRankItem()
        :popularityNum(0),rankGroupName(""),rankStatus(0),rankIndex(0),rankNameColor("")
        {
        }
        void resetDefautlt()
        {
            popularityNum = 0;
            rankGroupName = "";
            rankStatus = 0;
            rankIndex = 0;
            rankNameColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(userInfo, 0);
            _os.write(popularityNum, 1);
            _os.write(rankGroupName, 2);
            _os.write(rankStatus, 3);
            _os.write(rankIndex, 4);
            _os.write(rankNameColor, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(userInfo, 0, true);
            _is.read(popularityNum, 1, false);
            _is.read(rankGroupName, 2, false);
            _is.read(rankStatus, 3, false);
            _is.read(rankIndex, 4, false);
            _is.read(rankNameColor, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(userInfo,"userInfo");
            _ds.display(popularityNum,"popularityNum");
            _ds.display(rankGroupName,"rankGroupName");
            _ds.display(rankStatus,"rankStatus");
            _ds.display(rankIndex,"rankIndex");
            _ds.display(rankNameColor,"rankNameColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(popularityNum, true);
            _ds.displaySimple(rankGroupName, true);
            _ds.displaySimple(rankStatus, true);
            _ds.displaySimple(rankIndex, true);
            _ds.displaySimple(rankNameColor, false);
            return _os;
        }
    public:
        jce::ActorInfo userInfo;
        taf::Int64 popularityNum;
        std::string rankGroupName;
        taf::Int32 rankStatus;
        taf::Int32 rankIndex;
        std::string rankNameColor;
    };
    inline bool operator==(const FanTuanRankItem&l, const FanTuanRankItem&r)
    {
        return l.userInfo == r.userInfo && l.popularityNum == r.popularityNum && l.rankGroupName == r.rankGroupName && l.rankStatus == r.rankStatus && l.rankIndex == r.rankIndex && l.rankNameColor == r.rankNameColor;
    }
    inline bool operator!=(const FanTuanRankItem&l, const FanTuanRankItem&r)
    {
        return !(l == r);
    }

    struct FanTuanCommentParentItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanCommentParentItem";
        }
        static string MD5()
        {
            return "e1cdb4d8299e44ebbbdf565ce4a53739";
        }
        FanTuanCommentParentItem()
        :primaryId(""),content("")
        {
        }
        void resetDefautlt()
        {
            primaryId = "";
            content = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(primaryId, 0);
            _os.write(userInfo, 1);
            _os.write(content, 2);
            _os.write(photos, 3);
            _os.write(videos, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(primaryId, 0, true);
            _is.read(userInfo, 1, true);
            _is.read(content, 2, true);
            _is.read(photos, 3, false);
            _is.read(videos, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(primaryId,"primaryId");
            _ds.display(userInfo,"userInfo");
            _ds.display(content,"content");
            _ds.display(photos,"photos");
            _ds.display(videos,"videos");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(primaryId, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(photos, true);
            _ds.displaySimple(videos, false);
            return _os;
        }
    public:
        std::string primaryId;
        jce::ActorInfo userInfo;
        std::string content;
        vector<jce::CommonDownloadImageData> photos;
        vector<jce::CommonVideoData> videos;
    };
    inline bool operator==(const FanTuanCommentParentItem&l, const FanTuanCommentParentItem&r)
    {
        return l.primaryId == r.primaryId && l.userInfo == r.userInfo && l.content == r.content && l.photos == r.photos && l.videos == r.videos;
    }
    inline bool operator!=(const FanTuanCommentParentItem&l, const FanTuanCommentParentItem&r)
    {
        return !(l == r);
    }

    struct FanTuanCommentItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanCommentItem";
        }
        static string MD5()
        {
            return "d36164ebf43c73c2da26f6472d4502ac";
        }
        FanTuanCommentItem()
        :commentId(""),rootFeedId(""),fanTuanId(""),content(""),floor(0),pubTime(0),commentNum(0),upNum(0),seq("")
        {
        }
        void resetDefautlt()
        {
            commentId = "";
            rootFeedId = "";
            fanTuanId = "";
            content = "";
            floor = 0;
            pubTime = 0;
            commentNum = 0;
            upNum = 0;
            seq = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commentId, 0);
            _os.write(rootFeedId, 1);
            _os.write(fanTuanId, 2);
            _os.write(parentItem, 3);
            _os.write(content, 4);
            _os.write(userInfo, 5);
            _os.write(floor, 6);
            _os.write(pubTime, 7);
            _os.write(commentNum, 8);
            _os.write(upNum, 9);
            _os.write(seq, 10);
            _os.write(photos, 11);
            _os.write(videos, 12);
            _os.write(action, 13);
            _os.write(fanTuanInfo, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commentId, 0, true);
            _is.read(rootFeedId, 1, true);
            _is.read(fanTuanId, 2, true);
            _is.read(parentItem, 3, true);
            _is.read(content, 4, true);
            _is.read(userInfo, 5, true);
            _is.read(floor, 6, true);
            _is.read(pubTime, 7, true);
            _is.read(commentNum, 8, false);
            _is.read(upNum, 9, false);
            _is.read(seq, 10, false);
            _is.read(photos, 11, false);
            _is.read(videos, 12, false);
            _is.read(action, 13, false);
            _is.read(fanTuanInfo, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commentId,"commentId");
            _ds.display(rootFeedId,"rootFeedId");
            _ds.display(fanTuanId,"fanTuanId");
            _ds.display(parentItem,"parentItem");
            _ds.display(content,"content");
            _ds.display(userInfo,"userInfo");
            _ds.display(floor,"floor");
            _ds.display(pubTime,"pubTime");
            _ds.display(commentNum,"commentNum");
            _ds.display(upNum,"upNum");
            _ds.display(seq,"seq");
            _ds.display(photos,"photos");
            _ds.display(videos,"videos");
            _ds.display(action,"action");
            _ds.display(fanTuanInfo,"fanTuanInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commentId, true);
            _ds.displaySimple(rootFeedId, true);
            _ds.displaySimple(fanTuanId, true);
            _ds.displaySimple(parentItem, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(floor, true);
            _ds.displaySimple(pubTime, true);
            _ds.displaySimple(commentNum, true);
            _ds.displaySimple(upNum, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(photos, true);
            _ds.displaySimple(videos, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(fanTuanInfo, false);
            return _os;
        }
    public:
        std::string commentId;
        std::string rootFeedId;
        std::string fanTuanId;
        jce::FanTuanCommentParentItem parentItem;
        std::string content;
        jce::ActorInfo userInfo;
        taf::Int32 floor;
        taf::Int64 pubTime;
        taf::Int64 commentNum;
        taf::Int64 upNum;
        std::string seq;
        vector<jce::CommonDownloadImageData> photos;
        vector<jce::CommonVideoData> videos;
        jce::Action action;
        jce::ActorInfo fanTuanInfo;
    };
    inline bool operator==(const FanTuanCommentItem&l, const FanTuanCommentItem&r)
    {
        return l.commentId == r.commentId && l.rootFeedId == r.rootFeedId && l.fanTuanId == r.fanTuanId && l.parentItem == r.parentItem && l.content == r.content && l.userInfo == r.userInfo && l.floor == r.floor && l.pubTime == r.pubTime && l.commentNum == r.commentNum && l.upNum == r.upNum && l.seq == r.seq && l.photos == r.photos && l.videos == r.videos && l.action == r.action && l.fanTuanInfo == r.fanTuanInfo;
    }
    inline bool operator!=(const FanTuanCommentItem&l, const FanTuanCommentItem&r)
    {
        return !(l == r);
    }

    struct FanTuanDefaultMessage : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanDefaultMessage";
        }
        static string MD5()
        {
            return "be26c0ef44562cd3df3b0fafa1a5d9d1";
        }
        FanTuanDefaultMessage()
        :description("")
        {
        }
        void resetDefautlt()
        {
            description = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(description, 0);
            _os.write(actorInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(description, 0, false);
            _is.read(actorInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(description,"description");
            _ds.display(actorInfo,"actorInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(description, true);
            _ds.displaySimple(actorInfo, false);
            return _os;
        }
    public:
        std::string description;
        jce::ActorInfo actorInfo;
    };
    inline bool operator==(const FanTuanDefaultMessage&l, const FanTuanDefaultMessage&r)
    {
        return l.description == r.description && l.actorInfo == r.actorInfo;
    }
    inline bool operator!=(const FanTuanDefaultMessage&l, const FanTuanDefaultMessage&r)
    {
        return !(l == r);
    }

    struct FanTuanMessageItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanMessageItem";
        }
        static string MD5()
        {
            return "8d6f34f4af3faa97c3138d1694d5966c";
        }
        FanTuanMessageItem()
        :msgType(0),msgId(""),time(0)
        {
        }
        void resetDefautlt()
        {
            msgType = 0;
            msgId = "";
            time = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(msgType, 0);
            _os.write(msgId, 1);
            _os.write(commentItem, 2);
            _os.write(defaultMessage, 3);
            _os.write(time, 4);
            _os.write(action, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(msgType, 0, true);
            _is.read(msgId, 1, true);
            _is.read(commentItem, 2, false);
            _is.read(defaultMessage, 3, false);
            _is.read(time, 4, false);
            _is.read(action, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(msgType,"msgType");
            _ds.display(msgId,"msgId");
            _ds.display(commentItem,"commentItem");
            _ds.display(defaultMessage,"defaultMessage");
            _ds.display(time,"time");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(msgType, true);
            _ds.displaySimple(msgId, true);
            _ds.displaySimple(commentItem, true);
            _ds.displaySimple(defaultMessage, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        taf::Int32 msgType;
        std::string msgId;
        jce::FanTuanCommentItem commentItem;
        jce::FanTuanDefaultMessage defaultMessage;
        taf::Int64 time;
        jce::Action action;
    };
    inline bool operator==(const FanTuanMessageItem&l, const FanTuanMessageItem&r)
    {
        return l.msgType == r.msgType && l.msgId == r.msgId && l.commentItem == r.commentItem && l.defaultMessage == r.defaultMessage && l.time == r.time && l.action == r.action;
    }
    inline bool operator!=(const FanTuanMessageItem&l, const FanTuanMessageItem&r)
    {
        return !(l == r);
    }

    struct FanTuanExtInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanExtInfo";
        }
        static string MD5()
        {
            return "40fdbb43632e9bb23b69a7ce1243a32c";
        }
        FanTuanExtInfo()
        :dwFrom(0),strExtInfo("")
        {
        }
        void resetDefautlt()
        {
            dwFrom = 0;
            strExtInfo = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwFrom, 0);
            _os.write(strExtInfo, 1);
            _os.write(starInfo, 2);
            _os.write(videoInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwFrom, 0, true);
            _is.read(strExtInfo, 1, true);
            _is.read(starInfo, 2, false);
            _is.read(videoInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwFrom,"dwFrom");
            _ds.display(strExtInfo,"strExtInfo");
            _ds.display(starInfo,"starInfo");
            _ds.display(videoInfo,"videoInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwFrom, true);
            _ds.displaySimple(strExtInfo, true);
            _ds.displaySimple(starInfo, true);
            _ds.displaySimple(videoInfo, false);
            return _os;
        }
    public:
        taf::Int32 dwFrom;
        std::string strExtInfo;
        jce::STStarInfo starInfo;
        jce::BasicVideoInfo videoInfo;
    };
    inline bool operator==(const FanTuanExtInfo&l, const FanTuanExtInfo&r)
    {
        return l.dwFrom == r.dwFrom && l.strExtInfo == r.strExtInfo && l.starInfo == r.starInfo && l.videoInfo == r.videoInfo;
    }
    inline bool operator!=(const FanTuanExtInfo&l, const FanTuanExtInfo&r)
    {
        return !(l == r);
    }

    struct DokiHeadExtraInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiHeadExtraInfo";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        DokiHeadExtraInfo()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        taf::Int32 type;
    };
    inline bool operator==(const DokiHeadExtraInfo&l, const DokiHeadExtraInfo&r)
    {
        return l.type == r.type;
    }
    inline bool operator!=(const DokiHeadExtraInfo&l, const DokiHeadExtraInfo&r)
    {
        return !(l == r);
    }

    struct FanTuanActionBarsInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanActionBarsInfo";
        }
        static string MD5()
        {
            return "d2dfe394d3f84aa1e26392e14d27301f";
        }
        FanTuanActionBarsInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(rankBar, 0);
            _os.write(fansBar, 1);
            _os.write(presentBar, 2);
            _os.write(taskBar, 3);
            _os.write(updateInfoBar, 4);
            _os.write(extraBars, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(rankBar, 0, false);
            _is.read(fansBar, 1, false);
            _is.read(presentBar, 2, false);
            _is.read(taskBar, 3, false);
            _is.read(updateInfoBar, 4, false);
            _is.read(extraBars, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(rankBar,"rankBar");
            _ds.display(fansBar,"fansBar");
            _ds.display(presentBar,"presentBar");
            _ds.display(taskBar,"taskBar");
            _ds.display(updateInfoBar,"updateInfoBar");
            _ds.display(extraBars,"extraBars");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(rankBar, true);
            _ds.displaySimple(fansBar, true);
            _ds.displaySimple(presentBar, true);
            _ds.displaySimple(taskBar, true);
            _ds.displaySimple(updateInfoBar, true);
            _ds.displaySimple(extraBars, false);
            return _os;
        }
    public:
        jce::ActionBarInfo rankBar;
        jce::ActionBarInfo fansBar;
        jce::ActionBarInfo presentBar;
        jce::ActionBarInfo taskBar;
        jce::ActionBarInfo updateInfoBar;
        map<std::string, jce::ActionBarInfo> extraBars;
    };
    inline bool operator==(const FanTuanActionBarsInfo&l, const FanTuanActionBarsInfo&r)
    {
        return l.rankBar == r.rankBar && l.fansBar == r.fansBar && l.presentBar == r.presentBar && l.taskBar == r.taskBar && l.updateInfoBar == r.updateInfoBar && l.extraBars == r.extraBars;
    }
    inline bool operator!=(const FanTuanActionBarsInfo&l, const FanTuanActionBarsInfo&r)
    {
        return !(l == r);
    }

    struct ONAFanTuanGrid : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAFanTuanGrid";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        ONAFanTuanGrid()
        :flag(0)
        {
        }
        void resetDefautlt()
        {
            flag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(flag, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(flag, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(flag,"flag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(flag, false);
            return _os;
        }
    public:
        taf::Int32 flag;
    };
    inline bool operator==(const ONAFanTuanGrid&l, const ONAFanTuanGrid&r)
    {
        return l.flag == r.flag;
    }
    inline bool operator!=(const ONAFanTuanGrid&l, const ONAFanTuanGrid&r)
    {
        return !(l == r);
    }

    struct ONAFanTuanRankList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAFanTuanRankList";
        }
        static string MD5()
        {
            return "4cf94461bf45e00f0313a93ca76b2273";
        }
        ONAFanTuanRankList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fanTuanRankList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fanTuanRankList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fanTuanRankList,"fanTuanRankList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fanTuanRankList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::FanTuanRankItem> fanTuanRankList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAFanTuanRankList&l, const ONAFanTuanRankList&r)
    {
        return l.fanTuanRankList == r.fanTuanRankList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAFanTuanRankList&l, const ONAFanTuanRankList&r)
    {
        return !(l == r);
    }

    struct FanTuanFeedSource : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanFeedSource";
        }
        static string MD5()
        {
            return "c2f27d94c413f29c2966e7b7115516a6";
        }
        FanTuanFeedSource()
        :attentKey("")
        {
        }
        void resetDefautlt()
        {
            attentKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(FtVideoInfo, 0);
            _os.write(attentKey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(FtVideoInfo, 0, false);
            _is.read(attentKey, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(FtVideoInfo,"FtVideoInfo");
            _ds.display(attentKey,"attentKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(FtVideoInfo, true);
            _ds.displaySimple(attentKey, false);
            return _os;
        }
    public:
        jce::BasicVideoInfo FtVideoInfo;
        std::string attentKey;
    };
    inline bool operator==(const FanTuanFeedSource&l, const FanTuanFeedSource&r)
    {
        return l.FtVideoInfo == r.FtVideoInfo && l.attentKey == r.attentKey;
    }
    inline bool operator!=(const FanTuanFeedSource&l, const FanTuanFeedSource&r)
    {
        return !(l == r);
    }

    struct ONAFanTuanFeed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAFanTuanFeed";
        }
        static string MD5()
        {
            return "0e7ff81e583d9e052a646e937703a111";
        }
        ONAFanTuanFeed()
        :feedId(""),title(""),content(""),pubTime(0),commentNum(0),upNum(0),hot(0),top(0),essence(0),seq(""),updateTime(0),status(0),feedType(0),attendStatus(0),isRecommend(false),reportKey(""),reportParams(""),isLike(0),voteId("")
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            title = "";
            content = "";
            pubTime = 0;
            commentNum = 0;
            upNum = 0;
            hot = 0;
            top = 0;
            essence = 0;
            seq = "";
            updateTime = 0;
            status = 0;
            feedType = 0;
            attendStatus = 0;
            isRecommend = false;
            reportKey = "";
            reportParams = "";
            isLike = 0;
            voteId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(title, 1);
            _os.write(content, 2);
            _os.write(userInfo, 3);
            _os.write(pubTime, 4);
            _os.write(commentNum, 5);
            _os.write(upNum, 6);
            _os.write(hot, 7);
            _os.write(top, 8);
            _os.write(essence, 9);
            _os.write(seq, 10);
            _os.write(photos, 11);
            _os.write(videos, 12);
            _os.write(fanTuanInfo, 13);
            _os.write(action, 14);
            _os.write(updateTime, 15);
            _os.write(status, 16);
            _os.write(miniVideos, 17);
            _os.write(feedType, 18);
            _os.write(bulletinBoard, 19);
            _os.write(galleryPoster, 20);
            _os.write(attendStatus, 21);
            _os.write(userActions, 22);
            _os.write(isRecommend, 23);
            _os.write(bulletinBoardV2, 24);
            _os.write(reportKey, 25);
            _os.write(reportParams, 26);
            _os.write(topTagText, 27);
            _os.write(isLike, 28);
            _os.write(voteId, 29);
            _os.write(vecStartInfo, 30);
            _os.write(mapAttendStatus, 31);
            _os.write(feedSource, 32);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(title, 1, true);
            _is.read(content, 2, true);
            _is.read(userInfo, 3, true);
            _is.read(pubTime, 4, true);
            _is.read(commentNum, 5, false);
            _is.read(upNum, 6, false);
            _is.read(hot, 7, false);
            _is.read(top, 8, false);
            _is.read(essence, 9, false);
            _is.read(seq, 10, false);
            _is.read(photos, 11, false);
            _is.read(videos, 12, false);
            _is.read(fanTuanInfo, 13, false);
            _is.read(action, 14, false);
            _is.read(updateTime, 15, false);
            _is.read(status, 16, false);
            _is.read(miniVideos, 17, false);
            _is.read(feedType, 18, false);
            _is.read(bulletinBoard, 19, false);
            _is.read(galleryPoster, 20, false);
            _is.read(attendStatus, 21, false);
            _is.read(userActions, 22, false);
            _is.read(isRecommend, 23, false);
            _is.read(bulletinBoardV2, 24, false);
            _is.read(reportKey, 25, false);
            _is.read(reportParams, 26, false);
            _is.read(topTagText, 27, false);
            _is.read(isLike, 28, false);
            _is.read(voteId, 29, false);
            _is.read(vecStartInfo, 30, false);
            _is.read(mapAttendStatus, 31, false);
            _is.read(feedSource, 32, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(title,"title");
            _ds.display(content,"content");
            _ds.display(userInfo,"userInfo");
            _ds.display(pubTime,"pubTime");
            _ds.display(commentNum,"commentNum");
            _ds.display(upNum,"upNum");
            _ds.display(hot,"hot");
            _ds.display(top,"top");
            _ds.display(essence,"essence");
            _ds.display(seq,"seq");
            _ds.display(photos,"photos");
            _ds.display(videos,"videos");
            _ds.display(fanTuanInfo,"fanTuanInfo");
            _ds.display(action,"action");
            _ds.display(updateTime,"updateTime");
            _ds.display(status,"status");
            _ds.display(miniVideos,"miniVideos");
            _ds.display(feedType,"feedType");
            _ds.display(bulletinBoard,"bulletinBoard");
            _ds.display(galleryPoster,"galleryPoster");
            _ds.display(attendStatus,"attendStatus");
            _ds.display(userActions,"userActions");
            _ds.display(isRecommend,"isRecommend");
            _ds.display(bulletinBoardV2,"bulletinBoardV2");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(topTagText,"topTagText");
            _ds.display(isLike,"isLike");
            _ds.display(voteId,"voteId");
            _ds.display(vecStartInfo,"vecStartInfo");
            _ds.display(mapAttendStatus,"mapAttendStatus");
            _ds.display(feedSource,"feedSource");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(pubTime, true);
            _ds.displaySimple(commentNum, true);
            _ds.displaySimple(upNum, true);
            _ds.displaySimple(hot, true);
            _ds.displaySimple(top, true);
            _ds.displaySimple(essence, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(photos, true);
            _ds.displaySimple(videos, true);
            _ds.displaySimple(fanTuanInfo, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(updateTime, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(miniVideos, true);
            _ds.displaySimple(feedType, true);
            _ds.displaySimple(bulletinBoard, true);
            _ds.displaySimple(galleryPoster, true);
            _ds.displaySimple(attendStatus, true);
            _ds.displaySimple(userActions, true);
            _ds.displaySimple(isRecommend, true);
            _ds.displaySimple(bulletinBoardV2, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(topTagText, true);
            _ds.displaySimple(isLike, true);
            _ds.displaySimple(voteId, true);
            _ds.displaySimple(vecStartInfo, true);
            _ds.displaySimple(mapAttendStatus, true);
            _ds.displaySimple(feedSource, false);
            return _os;
        }
    public:
        std::string feedId;
        std::string title;
        std::string content;
        jce::ActorInfo userInfo;
        taf::Int64 pubTime;
        taf::Int64 commentNum;
        taf::Int64 upNum;
        taf::Int32 hot;
        taf::Int32 top;
        taf::Int32 essence;
        std::string seq;
        vector<jce::CommonDownloadImageData> photos;
        vector<jce::CommonVideoData> videos;
        jce::ActorInfo fanTuanInfo;
        jce::Action action;
        taf::Int64 updateTime;
        taf::Int32 status;
        vector<jce::CircleShortVideoUrl> miniVideos;
        taf::Int32 feedType;
        jce::ONABulletinBoard bulletinBoard;
        jce::ONAGalleryPoster galleryPoster;
        taf::Int32 attendStatus;
        vector<jce::UserAction> userActions;
        taf::Bool isRecommend;
        jce::ONABulletinBoardV2 bulletinBoardV2;
        std::string reportKey;
        std::string reportParams;
        jce::IconTagText topTagText;
        taf::Char isLike;
        std::string voteId;
        vector<jce::ActorInfo> vecStartInfo;
        map<std::string, taf::Int32> mapAttendStatus;
        jce::FanTuanFeedSource feedSource;
    };
    inline bool operator==(const ONAFanTuanFeed&l, const ONAFanTuanFeed&r)
    {
        return l.feedId == r.feedId && l.title == r.title && l.content == r.content && l.userInfo == r.userInfo && l.pubTime == r.pubTime && l.commentNum == r.commentNum && l.upNum == r.upNum && l.hot == r.hot && l.top == r.top && l.essence == r.essence && l.seq == r.seq && l.photos == r.photos && l.videos == r.videos && l.fanTuanInfo == r.fanTuanInfo && l.action == r.action && l.updateTime == r.updateTime && l.status == r.status && l.miniVideos == r.miniVideos && l.feedType == r.feedType && l.bulletinBoard == r.bulletinBoard && l.galleryPoster == r.galleryPoster && l.attendStatus == r.attendStatus && l.userActions == r.userActions && l.isRecommend == r.isRecommend && l.bulletinBoardV2 == r.bulletinBoardV2 && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.topTagText == r.topTagText && l.isLike == r.isLike && l.voteId == r.voteId && l.vecStartInfo == r.vecStartInfo && l.mapAttendStatus == r.mapAttendStatus && l.feedSource == r.feedSource;
    }
    inline bool operator!=(const ONAFanTuanFeed&l, const ONAFanTuanFeed&r)
    {
        return !(l == r);
    }

    struct ONAFanTuanRankItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAFanTuanRankItem";
        }
        static string MD5()
        {
            return "7b6bb63d90e95bf1e8c787790fe90d97";
        }
        ONAFanTuanRankItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fanTuanRankItem, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fanTuanRankItem, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fanTuanRankItem,"fanTuanRankItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fanTuanRankItem, false);
            return _os;
        }
    public:
        jce::FanTuanRankItem fanTuanRankItem;
    };
    inline bool operator==(const ONAFanTuanRankItem&l, const ONAFanTuanRankItem&r)
    {
        return l.fanTuanRankItem == r.fanTuanRankItem;
    }
    inline bool operator!=(const ONAFanTuanRankItem&l, const ONAFanTuanRankItem&r)
    {
        return !(l == r);
    }

    struct ONAFantuanRecommendStarsEntrance : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAFantuanRecommendStarsEntrance";
        }
        static string MD5()
        {
            return "6ae88755cd8b3b8678dd8ce6ea35d0f0";
        }
        ONAFantuanRecommendStarsEntrance()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::Poster poster;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAFantuanRecommendStarsEntrance&l, const ONAFantuanRecommendStarsEntrance&r)
    {
        return l.poster == r.poster && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAFantuanRecommendStarsEntrance&l, const ONAFantuanRecommendStarsEntrance&r)
    {
        return !(l == r);
    }

    struct FantuanRecommendStarsGroup : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FantuanRecommendStarsGroup";
        }
        static string MD5()
        {
            return "7d5a8d26be88b63971cfa21a5831a694";
        }
        FantuanRecommendStarsGroup()
        :title("")
        {
        }
        void resetDefautlt()
        {
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(starList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(starList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(starList,"starList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(starList, false);
            return _os;
        }
    public:
        std::string title;
        vector<jce::FanInvolveItem> starList;
    };
    inline bool operator==(const FantuanRecommendStarsGroup&l, const FantuanRecommendStarsGroup&r)
    {
        return l.title == r.title && l.starList == r.starList;
    }
    inline bool operator!=(const FantuanRecommendStarsGroup&l, const FantuanRecommendStarsGroup&r)
    {
        return !(l == r);
    }

    struct MiniVideoUIData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MiniVideoUIData";
        }
        static string MD5()
        {
            return "997a98e335256d04b582dfe4b62ac206";
        }
        MiniVideoUIData()
        :content(""),likeCount(0),commentCount(0)
        {
        }
        void resetDefautlt()
        {
            content = "";
            likeCount = 0;
            commentCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(video, 0);
            _os.write(user, 1);
            _os.write(likes, 2);
            _os.write(content, 3);
            _os.write(comments, 4);
            _os.write(likeCount, 5);
            _os.write(commentCount, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(video, 0, true);
            _is.read(user, 1, false);
            _is.read(likes, 2, false);
            _is.read(content, 3, false);
            _is.read(comments, 4, false);
            _is.read(likeCount, 5, false);
            _is.read(commentCount, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(video,"video");
            _ds.display(user,"user");
            _ds.display(likes,"likes");
            _ds.display(content,"content");
            _ds.display(comments,"comments");
            _ds.display(likeCount,"likeCount");
            _ds.display(commentCount,"commentCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(video, true);
            _ds.displaySimple(user, true);
            _ds.displaySimple(likes, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(comments, true);
            _ds.displaySimple(likeCount, true);
            _ds.displaySimple(commentCount, false);
            return _os;
        }
    public:
        jce::CircleShortVideoUrl video;
        jce::ActorInfo user;
        vector<jce::CircleLikeInfo> likes;
        std::string content;
        vector<jce::CircleCommentFeed> comments;
        taf::Int32 likeCount;
        taf::Int32 commentCount;
    };
    inline bool operator==(const MiniVideoUIData&l, const MiniVideoUIData&r)
    {
        return l.video == r.video && l.user == r.user && l.likes == r.likes && l.content == r.content && l.comments == r.comments && l.likeCount == r.likeCount && l.commentCount == r.commentCount;
    }
    inline bool operator!=(const MiniVideoUIData&l, const MiniVideoUIData&r)
    {
        return !(l == r);
    }

    struct FanTuanData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanData";
        }
        static string MD5()
        {
            return "7eb37d40c0b6e0f6bbdffbabd0c9bd7c";
        }
        FanTuanData()
        :fanTuanId(""),feedId(""),seq(""),h5ShareUrl("")
        {
        }
        void resetDefautlt()
        {
            fanTuanId = "";
            feedId = "";
            seq = "";
            h5ShareUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fanTuanId, 0);
            _os.write(feedId, 1);
            _os.write(seq, 2);
            _os.write(h5ShareUrl, 3);
            _os.write(feedAction, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fanTuanId, 0, true);
            _is.read(feedId, 1, true);
            _is.read(seq, 2, false);
            _is.read(h5ShareUrl, 3, false);
            _is.read(feedAction, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fanTuanId,"fanTuanId");
            _ds.display(feedId,"feedId");
            _ds.display(seq,"seq");
            _ds.display(h5ShareUrl,"h5ShareUrl");
            _ds.display(feedAction,"feedAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fanTuanId, true);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(h5ShareUrl, true);
            _ds.displaySimple(feedAction, false);
            return _os;
        }
    public:
        std::string fanTuanId;
        std::string feedId;
        std::string seq;
        std::string h5ShareUrl;
        jce::Action feedAction;
    };
    inline bool operator==(const FanTuanData&l, const FanTuanData&r)
    {
        return l.fanTuanId == r.fanTuanId && l.feedId == r.feedId && l.seq == r.seq && l.h5ShareUrl == r.h5ShareUrl && l.feedAction == r.feedAction;
    }
    inline bool operator!=(const FanTuanData&l, const FanTuanData&r)
    {
        return !(l == r);
    }

    struct MiniVideoItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MiniVideoItem";
        }
        static string MD5()
        {
            return "50aaa0ffc5ac96052210718ad656c5f1";
        }
        MiniVideoItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiItemData, 0);
            _os.write(fanTuanData, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiItemData, 0, true);
            _is.read(fanTuanData, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiItemData,"uiItemData");
            _ds.display(fanTuanData,"fanTuanData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiItemData, true);
            _ds.displaySimple(fanTuanData, false);
            return _os;
        }
    public:
        jce::MiniVideoUIData uiItemData;
        jce::FanTuanData fanTuanData;
    };
    inline bool operator==(const MiniVideoItem&l, const MiniVideoItem&r)
    {
        return l.uiItemData == r.uiItemData && l.fanTuanData == r.fanTuanData;
    }
    inline bool operator!=(const MiniVideoItem&l, const MiniVideoItem&r)
    {
        return !(l == r);
    }

    struct FanTuanSignedList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanSignedList";
        }
        static string MD5()
        {
            return "11180239d16599de55b477b0f2d732f3";
        }
        FanTuanSignedList()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fanInvolves, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fanInvolves, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fanInvolves,"fanInvolves");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fanInvolves, false);
            return _os;
        }
    public:
        vector<jce::FanInvolveItem> fanInvolves;
    };
    inline bool operator==(const FanTuanSignedList&l, const FanTuanSignedList&r)
    {
        return l.fanInvolves == r.fanInvolves;
    }
    inline bool operator!=(const FanTuanSignedList&l, const FanTuanSignedList&r)
    {
        return !(l == r);
    }

    struct ONAFanTuanSignedList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAFanTuanSignedList";
        }
        static string MD5()
        {
            return "c0bd4dbb53bf7fb01f29e8f7f768c207";
        }
        ONAFanTuanSignedList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fanInvolves, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fanInvolves, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fanInvolves,"fanInvolves");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fanInvolves, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::FanInvolveItem> fanInvolves;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAFanTuanSignedList&l, const ONAFanTuanSignedList&r)
    {
        return l.fanInvolves == r.fanInvolves && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAFanTuanSignedList&l, const ONAFanTuanSignedList&r)
    {
        return !(l == r);
    }

    struct ONAFantuanRecommendStarsGroup : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAFantuanRecommendStarsGroup";
        }
        static string MD5()
        {
            return "c0bd4dbb53bf7fb01f29e8f7f768c207";
        }
        ONAFantuanRecommendStarsGroup()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starList,"starList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::FanInvolveItem> starList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAFantuanRecommendStarsGroup&l, const ONAFantuanRecommendStarsGroup&r)
    {
        return l.starList == r.starList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAFantuanRecommendStarsGroup&l, const ONAFantuanRecommendStarsGroup&r)
    {
        return !(l == r);
    }

    struct FanTuanLatestRankItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanLatestRankItem";
        }
        static string MD5()
        {
            return "3dfd8fcbdaaa9ec63087a89db85bf4c0";
        }
        FanTuanLatestRankItem()
        :maskImgUrl(""),firstLine(""),secondLine(""),mainColor(""),uiType(0),lottieUrl("")
        {
        }
        void resetDefautlt()
        {
            maskImgUrl = "";
            firstLine = "";
            secondLine = "";
            mainColor = "";
            uiType = 0;
            lottieUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actorList, 0);
            _os.write(maskImgUrl, 1);
            _os.write(firstLine, 2);
            _os.write(secondLine, 3);
            _os.write(action, 4);
            _os.write(mainColor, 5);
            _os.write(uiType, 6);
            _os.write(lottieUrl, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actorList, 0, true);
            _is.read(maskImgUrl, 1, false);
            _is.read(firstLine, 2, false);
            _is.read(secondLine, 3, false);
            _is.read(action, 4, false);
            _is.read(mainColor, 5, false);
            _is.read(uiType, 6, false);
            _is.read(lottieUrl, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actorList,"actorList");
            _ds.display(maskImgUrl,"maskImgUrl");
            _ds.display(firstLine,"firstLine");
            _ds.display(secondLine,"secondLine");
            _ds.display(action,"action");
            _ds.display(mainColor,"mainColor");
            _ds.display(uiType,"uiType");
            _ds.display(lottieUrl,"lottieUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actorList, true);
            _ds.displaySimple(maskImgUrl, true);
            _ds.displaySimple(firstLine, true);
            _ds.displaySimple(secondLine, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(mainColor, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(lottieUrl, false);
            return _os;
        }
    public:
        vector<jce::ActorInfo> actorList;
        std::string maskImgUrl;
        std::string firstLine;
        std::string secondLine;
        jce::Action action;
        std::string mainColor;
        taf::Int32 uiType;
        std::string lottieUrl;
    };
    inline bool operator==(const FanTuanLatestRankItem&l, const FanTuanLatestRankItem&r)
    {
        return l.actorList == r.actorList && l.maskImgUrl == r.maskImgUrl && l.firstLine == r.firstLine && l.secondLine == r.secondLine && l.action == r.action && l.mainColor == r.mainColor && l.uiType == r.uiType && l.lottieUrl == r.lottieUrl;
    }
    inline bool operator!=(const FanTuanLatestRankItem&l, const FanTuanLatestRankItem&r)
    {
        return !(l == r);
    }

    struct ONAFanTuanLatestRankInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAFanTuanLatestRankInfo";
        }
        static string MD5()
        {
            return "557a6f62dae1718679f1bc6ffdc421cd";
        }
        ONAFanTuanLatestRankInfo()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(posterList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(posterList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(posterList,"posterList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(posterList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::FanTuanLatestRankItem> posterList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAFanTuanLatestRankInfo&l, const ONAFanTuanLatestRankInfo&r)
    {
        return l.posterList == r.posterList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAFanTuanLatestRankInfo&l, const ONAFanTuanLatestRankInfo&r)
    {
        return !(l == r);
    }

    struct DokiCommentInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiCommentInfo";
        }
        static string MD5()
        {
            return "b519d1a845ed1cbaf7fa922262af8c85";
        }
        DokiCommentInfo()
        :totoalCount(0)
        {
        }
        void resetDefautlt()
        {
            totoalCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(totoalCount, 0);
            _os.write(feedInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(totoalCount, 0, true);
            _is.read(feedInfo, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(totoalCount,"totoalCount");
            _ds.display(feedInfo,"feedInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(totoalCount, true);
            _ds.displaySimple(feedInfo, false);
            return _os;
        }
    public:
        taf::Int32 totoalCount;
        jce::CirclePrimaryFeed feedInfo;
    };
    inline bool operator==(const DokiCommentInfo&l, const DokiCommentInfo&r)
    {
        return l.totoalCount == r.totoalCount && l.feedInfo == r.feedInfo;
    }
    inline bool operator!=(const DokiCommentInfo&l, const DokiCommentInfo&r)
    {
        return !(l == r);
    }

    struct DokiLiveBeforeInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiLiveBeforeInfo";
        }
        static string MD5()
        {
            return "49b2a56aa02b7e25d4cd852cd62fdced";
        }
        DokiLiveBeforeInfo()
        :curAttentCount(0),totalCommentCount(0),textContent("")
        {
        }
        void resetDefautlt()
        {
            curAttentCount = 0;
            totalCommentCount = 0;
            textContent = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(attentItem, 0);
            _os.write(curAttentCount, 1);
            _os.write(totalCommentCount, 2);
            _os.write(textContent, 3);
            _os.write(attentButton, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(attentItem, 0, false);
            _is.read(curAttentCount, 1, false);
            _is.read(totalCommentCount, 2, false);
            _is.read(textContent, 3, false);
            _is.read(attentButton, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(attentItem,"attentItem");
            _ds.display(curAttentCount,"curAttentCount");
            _ds.display(totalCommentCount,"totalCommentCount");
            _ds.display(textContent,"textContent");
            _ds.display(attentButton,"attentButton");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(curAttentCount, true);
            _ds.displaySimple(totalCommentCount, true);
            _ds.displaySimple(textContent, true);
            _ds.displaySimple(attentButton, false);
            return _os;
        }
    public:
        jce::VideoAttentItem attentItem;
        taf::Int64 curAttentCount;
        taf::Int64 totalCommentCount;
        std::string textContent;
        jce::ActionBarInfo attentButton;
    };
    inline bool operator==(const DokiLiveBeforeInfo&l, const DokiLiveBeforeInfo&r)
    {
        return l.attentItem == r.attentItem && l.curAttentCount == r.curAttentCount && l.totalCommentCount == r.totalCommentCount && l.textContent == r.textContent && l.attentButton == r.attentButton;
    }
    inline bool operator!=(const DokiLiveBeforeInfo&l, const DokiLiveBeforeInfo&r)
    {
        return !(l == r);
    }

    struct DokiLivingInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiLivingInfo";
        }
        static string MD5()
        {
            return "61f8f674ef2cd322403845b146bf15f3";
        }
        DokiLivingInfo()
        :starCommentCount(0)
        {
        }
        void resetDefautlt()
        {
            starCommentCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starCommentCount, 0);
            _os.write(commentList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starCommentCount, 0, false);
            _is.read(commentList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starCommentCount,"starCommentCount");
            _ds.display(commentList,"commentList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starCommentCount, true);
            _ds.displaySimple(commentList, false);
            return _os;
        }
    public:
        taf::Int64 starCommentCount;
        vector<jce::CommentItem> commentList;
    };
    inline bool operator==(const DokiLivingInfo&l, const DokiLivingInfo&r)
    {
        return l.starCommentCount == r.starCommentCount && l.commentList == r.commentList;
    }
    inline bool operator!=(const DokiLivingInfo&l, const DokiLivingInfo&r)
    {
        return !(l == r);
    }

    struct DokiLiveEndInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiLiveEndInfo";
        }
        static string MD5()
        {
            return "61f8f674ef2cd322403845b146bf15f3";
        }
        DokiLiveEndInfo()
        :starCommentCount(0)
        {
        }
        void resetDefautlt()
        {
            starCommentCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starCommentCount, 0);
            _os.write(commentList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starCommentCount, 0, false);
            _is.read(commentList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starCommentCount,"starCommentCount");
            _ds.display(commentList,"commentList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starCommentCount, true);
            _ds.displaySimple(commentList, false);
            return _os;
        }
    public:
        taf::Int64 starCommentCount;
        vector<jce::CommentItem> commentList;
    };
    inline bool operator==(const DokiLiveEndInfo&l, const DokiLiveEndInfo&r)
    {
        return l.starCommentCount == r.starCommentCount && l.commentList == r.commentList;
    }
    inline bool operator!=(const DokiLiveEndInfo&l, const DokiLiveEndInfo&r)
    {
        return !(l == r);
    }

    struct DokiLiveInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiLiveInfo";
        }
        static string MD5()
        {
            return "39a4d4e6ee287ca1f03453b4f4a955b9";
        }
        DokiLiveInfo()
        :liveStatus(0)
        {
        }
        void resetDefautlt()
        {
            liveStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(liveStatus, 0);
            _os.write(liveBeforeInfo, 1);
            _os.write(liveingInfo, 2);
            _os.write(liveEndInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(liveStatus, 0, true);
            _is.read(liveBeforeInfo, 1, false);
            _is.read(liveingInfo, 2, false);
            _is.read(liveEndInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(liveStatus,"liveStatus");
            _ds.display(liveBeforeInfo,"liveBeforeInfo");
            _ds.display(liveingInfo,"liveingInfo");
            _ds.display(liveEndInfo,"liveEndInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(liveStatus, true);
            _ds.displaySimple(liveBeforeInfo, true);
            _ds.displaySimple(liveingInfo, true);
            _ds.displaySimple(liveEndInfo, false);
            return _os;
        }
    public:
        taf::Char liveStatus;
        jce::DokiLiveBeforeInfo liveBeforeInfo;
        jce::DokiLivingInfo liveingInfo;
        jce::DokiLiveEndInfo liveEndInfo;
    };
    inline bool operator==(const DokiLiveInfo&l, const DokiLiveInfo&r)
    {
        return l.liveStatus == r.liveStatus && l.liveBeforeInfo == r.liveBeforeInfo && l.liveingInfo == r.liveingInfo && l.liveEndInfo == r.liveEndInfo;
    }
    inline bool operator!=(const DokiLiveInfo&l, const DokiLiveInfo&r)
    {
        return !(l == r);
    }

    struct ONADokiNewsCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiNewsCard";
        }
        static string MD5()
        {
            return "a10ca0ef0a2d7b28585183f6e5c0a3ee";
        }
        ONADokiNewsCard()
        :firstLineText(""),secondLineText(""),newsType(0),reportKey(""),reportParams(""),mainColor(""),lottieSourceUrl("")
        {
        }
        void resetDefautlt()
        {
            firstLineText = "";
            secondLineText = "";
            newsType = 0;
            reportKey = "";
            reportParams = "";
            mainColor = "";
            lottieSourceUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actorList, 0);
            _os.write(firstLineText, 1);
            _os.write(secondLineText, 2);
            _os.write(newsType, 3);
            _os.write(commentInfo, 4);
            _os.write(liveInfo, 5);
            _os.write(reportKey, 7);
            _os.write(reportParams, 8);
            _os.write(action, 9);
            _os.write(mainColor, 10);
            _os.write(actorCircleColors, 11);
            _os.write(lottieSourceUrl, 12);
            _os.write(leftActionBar, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actorList, 0, true);
            _is.read(firstLineText, 1, false);
            _is.read(secondLineText, 2, false);
            _is.read(newsType, 3, true);
            _is.read(commentInfo, 4, false);
            _is.read(liveInfo, 5, false);
            _is.read(reportKey, 7, false);
            _is.read(reportParams, 8, false);
            _is.read(action, 9, false);
            _is.read(mainColor, 10, false);
            _is.read(actorCircleColors, 11, false);
            _is.read(lottieSourceUrl, 12, false);
            _is.read(leftActionBar, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actorList,"actorList");
            _ds.display(firstLineText,"firstLineText");
            _ds.display(secondLineText,"secondLineText");
            _ds.display(newsType,"newsType");
            _ds.display(commentInfo,"commentInfo");
            _ds.display(liveInfo,"liveInfo");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(action,"action");
            _ds.display(mainColor,"mainColor");
            _ds.display(actorCircleColors,"actorCircleColors");
            _ds.display(lottieSourceUrl,"lottieSourceUrl");
            _ds.display(leftActionBar,"leftActionBar");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actorList, true);
            _ds.displaySimple(firstLineText, true);
            _ds.displaySimple(secondLineText, true);
            _ds.displaySimple(newsType, true);
            _ds.displaySimple(commentInfo, true);
            _ds.displaySimple(liveInfo, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(mainColor, true);
            _ds.displaySimple(actorCircleColors, true);
            _ds.displaySimple(lottieSourceUrl, true);
            _ds.displaySimple(leftActionBar, false);
            return _os;
        }
    public:
        vector<jce::ActorInfo> actorList;
        std::string firstLineText;
        std::string secondLineText;
        taf::Char newsType;
        jce::DokiCommentInfo commentInfo;
        jce::DokiLiveInfo liveInfo;
        std::string reportKey;
        std::string reportParams;
        jce::Action action;
        std::string mainColor;
        vector<std::string> actorCircleColors;
        std::string lottieSourceUrl;
        jce::ActionBarInfo leftActionBar;
    };
    inline bool operator==(const ONADokiNewsCard&l, const ONADokiNewsCard&r)
    {
        return l.actorList == r.actorList && l.firstLineText == r.firstLineText && l.secondLineText == r.secondLineText && l.newsType == r.newsType && l.commentInfo == r.commentInfo && l.liveInfo == r.liveInfo && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.action == r.action && l.mainColor == r.mainColor && l.actorCircleColors == r.actorCircleColors && l.lottieSourceUrl == r.lottieSourceUrl && l.leftActionBar == r.leftActionBar;
    }
    inline bool operator!=(const ONADokiNewsCard&l, const ONADokiNewsCard&r)
    {
        return !(l == r);
    }

    struct ONADokiNewsCardList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiNewsCardList";
        }
        static string MD5()
        {
            return "17f55dc20bf507430b67c145f408a682";
        }
        ONADokiNewsCardList()
        :reportParams(""),reportKey(""),dataKey(""),hasMore(true)
        {
        }
        void resetDefautlt()
        {
            reportParams = "";
            reportKey = "";
            dataKey = "";
            hasMore = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cardList, 0);
            _os.write(reportParams, 1);
            _os.write(reportKey, 2);
            _os.write(dataKey, 3);
            _os.write(hasMore, 4);
            _os.write(moreAction, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cardList, 0, false);
            _is.read(reportParams, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(dataKey, 3, false);
            _is.read(hasMore, 4, false);
            _is.read(moreAction, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cardList,"cardList");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(dataKey,"dataKey");
            _ds.display(hasMore,"hasMore");
            _ds.display(moreAction,"moreAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cardList, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(hasMore, true);
            _ds.displaySimple(moreAction, false);
            return _os;
        }
    public:
        vector<jce::ONADokiNewsCard> cardList;
        std::string reportParams;
        std::string reportKey;
        std::string dataKey;
        taf::Bool hasMore;
        jce::Action moreAction;
    };
    inline bool operator==(const ONADokiNewsCardList&l, const ONADokiNewsCardList&r)
    {
        return l.cardList == r.cardList && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.dataKey == r.dataKey && l.hasMore == r.hasMore && l.moreAction == r.moreAction;
    }
    inline bool operator!=(const ONADokiNewsCardList&l, const ONADokiNewsCardList&r)
    {
        return !(l == r);
    }

    struct ONADokiMovementCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiMovementCard";
        }
        static string MD5()
        {
            return "8eb634ee2daa4015ddcbf608e02da7e1";
        }
        ONADokiMovementCard()
        :firstLineText(""),firstLineTagText(""),newsType(0),lottieSourceUrl(""),leftDescText(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            firstLineText = "";
            firstLineTagText = "";
            newsType = 0;
            lottieSourceUrl = "";
            leftDescText = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actorList, 0);
            _os.write(firstLineText, 1);
            _os.write(firstLineTagText, 2);
            _os.write(secondLineTagText, 3);
            _os.write(rankInfo, 4);
            _os.write(actorCircleColors, 5);
            _os.write(newsType, 6);
            _os.write(contentInfo, 7);
            _os.write(attentItem, 8);
            _os.write(lottieSourceUrl, 9);
            _os.write(leftActionBar, 10);
            _os.write(leftDescText, 11);
            _os.write(rightActionBar, 12);
            _os.write(reportKey, 13);
            _os.write(reportParams, 14);
            _os.write(action, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actorList, 0, true);
            _is.read(firstLineText, 1, false);
            _is.read(firstLineTagText, 2, false);
            _is.read(secondLineTagText, 3, false);
            _is.read(rankInfo, 4, false);
            _is.read(actorCircleColors, 5, false);
            _is.read(newsType, 6, true);
            _is.read(contentInfo, 7, false);
            _is.read(attentItem, 8, false);
            _is.read(lottieSourceUrl, 9, false);
            _is.read(leftActionBar, 10, false);
            _is.read(leftDescText, 11, false);
            _is.read(rightActionBar, 12, false);
            _is.read(reportKey, 13, false);
            _is.read(reportParams, 14, false);
            _is.read(action, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actorList,"actorList");
            _ds.display(firstLineText,"firstLineText");
            _ds.display(firstLineTagText,"firstLineTagText");
            _ds.display(secondLineTagText,"secondLineTagText");
            _ds.display(rankInfo,"rankInfo");
            _ds.display(actorCircleColors,"actorCircleColors");
            _ds.display(newsType,"newsType");
            _ds.display(contentInfo,"contentInfo");
            _ds.display(attentItem,"attentItem");
            _ds.display(lottieSourceUrl,"lottieSourceUrl");
            _ds.display(leftActionBar,"leftActionBar");
            _ds.display(leftDescText,"leftDescText");
            _ds.display(rightActionBar,"rightActionBar");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actorList, true);
            _ds.displaySimple(firstLineText, true);
            _ds.displaySimple(firstLineTagText, true);
            _ds.displaySimple(secondLineTagText, true);
            _ds.displaySimple(rankInfo, true);
            _ds.displaySimple(actorCircleColors, true);
            _ds.displaySimple(newsType, true);
            _ds.displaySimple(contentInfo, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(lottieSourceUrl, true);
            _ds.displaySimple(leftActionBar, true);
            _ds.displaySimple(leftDescText, true);
            _ds.displaySimple(rightActionBar, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        vector<jce::ActorInfo> actorList;
        std::string firstLineText;
        std::string firstLineTagText;
        jce::IconTagText secondLineTagText;
        jce::DokiRankInfo rankInfo;
        vector<std::string> actorCircleColors;
        taf::Char newsType;
        jce::MediaContentInfo contentInfo;
        jce::VideoAttentItem attentItem;
        std::string lottieSourceUrl;
        jce::ActionBarInfo leftActionBar;
        std::string leftDescText;
        jce::ActionBarInfo rightActionBar;
        std::string reportKey;
        std::string reportParams;
        jce::Action action;
    };
    inline bool operator==(const ONADokiMovementCard&l, const ONADokiMovementCard&r)
    {
        return l.actorList == r.actorList && l.firstLineText == r.firstLineText && l.firstLineTagText == r.firstLineTagText && l.secondLineTagText == r.secondLineTagText && l.rankInfo == r.rankInfo && l.actorCircleColors == r.actorCircleColors && l.newsType == r.newsType && l.contentInfo == r.contentInfo && l.attentItem == r.attentItem && l.lottieSourceUrl == r.lottieSourceUrl && l.leftActionBar == r.leftActionBar && l.leftDescText == r.leftDescText && l.rightActionBar == r.rightActionBar && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.action == r.action;
    }
    inline bool operator!=(const ONADokiMovementCard&l, const ONADokiMovementCard&r)
    {
        return !(l == r);
    }

    struct ONADokiMovementCardList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiMovementCardList";
        }
        static string MD5()
        {
            return "f442def85433460351a6b4030ef9f8a6";
        }
        ONADokiMovementCardList()
        :reportParams(""),reportKey(""),dataKey(""),hasMore(true)
        {
        }
        void resetDefautlt()
        {
            reportParams = "";
            reportKey = "";
            dataKey = "";
            hasMore = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cardList, 0);
            _os.write(reportParams, 1);
            _os.write(reportKey, 2);
            _os.write(dataKey, 3);
            _os.write(hasMore, 4);
            _os.write(moreAction, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cardList, 0, false);
            _is.read(reportParams, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(dataKey, 3, false);
            _is.read(hasMore, 4, false);
            _is.read(moreAction, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cardList,"cardList");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(dataKey,"dataKey");
            _ds.display(hasMore,"hasMore");
            _ds.display(moreAction,"moreAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cardList, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(hasMore, true);
            _ds.displaySimple(moreAction, false);
            return _os;
        }
    public:
        vector<jce::ONADokiMovementCard> cardList;
        std::string reportParams;
        std::string reportKey;
        std::string dataKey;
        taf::Bool hasMore;
        jce::Action moreAction;
    };
    inline bool operator==(const ONADokiMovementCardList&l, const ONADokiMovementCardList&r)
    {
        return l.cardList == r.cardList && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.dataKey == r.dataKey && l.hasMore == r.hasMore && l.moreAction == r.moreAction;
    }
    inline bool operator!=(const ONADokiMovementCardList&l, const ONADokiMovementCardList&r)
    {
        return !(l == r);
    }

    struct ONADokiRankBroadcast : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiRankBroadcast";
        }
        static string MD5()
        {
            return "6d38b3e4a00139801f3afb2f828e6d18";
        }
        ONADokiRankBroadcast()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(rankBroadcast, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(rankBroadcast, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(rankBroadcast,"rankBroadcast");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(rankBroadcast, false);
            return _os;
        }
    public:
        jce::RankBroadcastItem rankBroadcast;
    };
    inline bool operator==(const ONADokiRankBroadcast&l, const ONADokiRankBroadcast&r)
    {
        return l.rankBroadcast == r.rankBroadcast;
    }
    inline bool operator!=(const ONADokiRankBroadcast&l, const ONADokiRankBroadcast&r)
    {
        return !(l == r);
    }

    struct DokiDynamicItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiDynamicItem";
        }
        static string MD5()
        {
            return "2fdf6963991f1b032af61477fe72caf0";
        }
        DokiDynamicItem()
        :headImgUrl(""),title(""),cornerImgUrl(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            headImgUrl = "";
            title = "";
            cornerImgUrl = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(headImgUrl, 0);
            _os.write(title, 1);
            _os.write(cornerImgUrl, 2);
            _os.write(action, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(headImgUrl, 0, false);
            _is.read(title, 1, false);
            _is.read(cornerImgUrl, 2, false);
            _is.read(action, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(headImgUrl,"headImgUrl");
            _ds.display(title,"title");
            _ds.display(cornerImgUrl,"cornerImgUrl");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(headImgUrl, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(cornerImgUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string headImgUrl;
        std::string title;
        std::string cornerImgUrl;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const DokiDynamicItem&l, const DokiDynamicItem&r)
    {
        return l.headImgUrl == r.headImgUrl && l.title == r.title && l.cornerImgUrl == r.cornerImgUrl && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const DokiDynamicItem&l, const DokiDynamicItem&r)
    {
        return !(l == r);
    }

    struct ONADokiDynamic : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiDynamic";
        }
        static string MD5()
        {
            return "64066a56a8f6400a104e3c80751b9c69";
        }
        ONADokiDynamic()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dokiDynamicItemList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dokiDynamicItemList, 0, false);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dokiDynamicItemList,"dokiDynamicItemList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dokiDynamicItemList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::DokiDynamicItem> dokiDynamicItemList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONADokiDynamic&l, const ONADokiDynamic&r)
    {
        return l.dokiDynamicItemList == r.dokiDynamicItemList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONADokiDynamic&l, const ONADokiDynamic&r)
    {
        return !(l == r);
    }

    struct DokiPhotoItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiPhotoItem";
        }
        static string MD5()
        {
            return "6f5506968d1ba75fe0c6101a316382d4";
        }
        DokiPhotoItem()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageInfo, 0);
            _os.write(primaryFeed, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageInfo, 0, true);
            _is.read(primaryFeed, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageInfo,"imageInfo");
            _ds.display(primaryFeed,"primaryFeed");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageInfo, true);
            _ds.displaySimple(primaryFeed, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::CircleMsgImageUrl imageInfo;
        jce::CirclePrimaryFeed primaryFeed;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const DokiPhotoItem&l, const DokiPhotoItem&r)
    {
        return l.imageInfo == r.imageInfo && l.primaryFeed == r.primaryFeed && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const DokiPhotoItem&l, const DokiPhotoItem&r)
    {
        return !(l == r);
    }

    struct ONADokiPhotoItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiPhotoItem";
        }
        static string MD5()
        {
            return "8b3f69b05f367c033603400d673bb0d8";
        }
        ONADokiPhotoItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(photoInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(photoInfo, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(photoInfo,"photoInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(photoInfo, false);
            return _os;
        }
    public:
        jce::DokiPhotoItem photoInfo;
    };
    inline bool operator==(const ONADokiPhotoItem&l, const ONADokiPhotoItem&r)
    {
        return l.photoInfo == r.photoInfo;
    }
    inline bool operator!=(const ONADokiPhotoItem&l, const ONADokiPhotoItem&r)
    {
        return !(l == r);
    }

    struct ONADokiPhotoList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiPhotoList";
        }
        static string MD5()
        {
            return "b683f5af88a02be64372c6539f75ebfe";
        }
        ONADokiPhotoList()
        :dataKey(""),reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(photoList, 0);
            _os.write(dataKey, 1);
            _os.write(reportParams, 2);
            _os.write(reportKey, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(photoList, 0, true);
            _is.read(dataKey, 1, true);
            _is.read(reportParams, 2, false);
            _is.read(reportKey, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(photoList,"photoList");
            _ds.display(dataKey,"dataKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(photoList, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        vector<jce::DokiPhotoItem> photoList;
        std::string dataKey;
        std::string reportParams;
        std::string reportKey;
    };
    inline bool operator==(const ONADokiPhotoList&l, const ONADokiPhotoList&r)
    {
        return l.photoList == r.photoList && l.dataKey == r.dataKey && l.reportParams == r.reportParams && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const ONADokiPhotoList&l, const ONADokiPhotoList&r)
    {
        return !(l == r);
    }

    struct FanTuanHomeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanHomeRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        FanTuanHomeRequest()
        :fanTuanId(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            fanTuanId = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fanTuanId, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fanTuanId, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fanTuanId,"fanTuanId");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fanTuanId, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string fanTuanId;
        std::string pageContext;
    };
    inline bool operator==(const FanTuanHomeRequest&l, const FanTuanHomeRequest&r)
    {
        return l.fanTuanId == r.fanTuanId && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const FanTuanHomeRequest&l, const FanTuanHomeRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanHomeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanHomeResponse";
        }
        static string MD5()
        {
            return "26fe6cb64e30fb537bf55d6f3aef1632";
        }
        FanTuanHomeResponse()
        :errCode(0),pageContext(""),hasNextPage(true),postDataKey("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            postDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(fanInfo, 1);
            _os.write(mainData, 2);
            _os.write(uiData, 3);
            _os.write(coverDataMap, 4);
            _os.write(actorDataMap, 5);
            _os.write(pageContext, 6);
            _os.write(hasNextPage, 7);
            _os.write(postDataKey, 8);
            _os.write(shareItem, 9);
            _os.write(tabModuleList, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(fanInfo, 1, true);
            _is.read(mainData, 2, false);
            _is.read(uiData, 3, false);
            _is.read(coverDataMap, 4, false);
            _is.read(actorDataMap, 5, false);
            _is.read(pageContext, 6, false);
            _is.read(hasNextPage, 7, false);
            _is.read(postDataKey, 8, false);
            _is.read(shareItem, 9, false);
            _is.read(tabModuleList, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(fanInfo,"fanInfo");
            _ds.display(mainData,"mainData");
            _ds.display(uiData,"uiData");
            _ds.display(coverDataMap,"coverDataMap");
            _ds.display(actorDataMap,"actorDataMap");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(postDataKey,"postDataKey");
            _ds.display(shareItem,"shareItem");
            _ds.display(tabModuleList,"tabModuleList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(fanInfo, true);
            _ds.displaySimple(mainData, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(coverDataMap, true);
            _ds.displaySimple(actorDataMap, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(postDataKey, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(tabModuleList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::FanInvolveItem fanInfo;
        vector<jce::TempletLine> mainData;
        vector<jce::TempletLine> uiData;
        map<std::string, jce::CoverDataList> coverDataMap;
        map<std::string, jce::ActorList> actorDataMap;
        std::string pageContext;
        taf::Bool hasNextPage;
        std::string postDataKey;
        jce::ShareItem shareItem;
        vector<jce::LiveTabModuleInfo> tabModuleList;
    };
    inline bool operator==(const FanTuanHomeResponse&l, const FanTuanHomeResponse&r)
    {
        return l.errCode == r.errCode && l.fanInfo == r.fanInfo && l.mainData == r.mainData && l.uiData == r.uiData && l.coverDataMap == r.coverDataMap && l.actorDataMap == r.actorDataMap && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.postDataKey == r.postDataKey && l.shareItem == r.shareItem && l.tabModuleList == r.tabModuleList;
    }
    inline bool operator!=(const FanTuanHomeResponse&l, const FanTuanHomeResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanGetUserIdRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanGetUserIdRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        FanTuanGetUserIdRequest()
        :flag(0)
        {
        }
        void resetDefautlt()
        {
            flag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(flag, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(flag, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(flag,"flag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(flag, false);
            return _os;
        }
    public:
        taf::Int32 flag;
    };
    inline bool operator==(const FanTuanGetUserIdRequest&l, const FanTuanGetUserIdRequest&r)
    {
        return l.flag == r.flag;
    }
    inline bool operator!=(const FanTuanGetUserIdRequest&l, const FanTuanGetUserIdRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanGetUserIdResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanGetUserIdResponse";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        FanTuanGetUserIdResponse()
        :errCode(0),fanTuanUserId("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            fanTuanUserId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(fanTuanUserId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(fanTuanUserId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(fanTuanUserId,"fanTuanUserId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(fanTuanUserId, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string fanTuanUserId;
    };
    inline bool operator==(const FanTuanGetUserIdResponse&l, const FanTuanGetUserIdResponse&r)
    {
        return l.errCode == r.errCode && l.fanTuanUserId == r.fanTuanUserId;
    }
    inline bool operator!=(const FanTuanGetUserIdResponse&l, const FanTuanGetUserIdResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanMyPostRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanMyPostRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        FanTuanMyPostRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const FanTuanMyPostRequest&l, const FanTuanMyPostRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const FanTuanMyPostRequest&l, const FanTuanMyPostRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanMyPostResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanMyPostResponse";
        }
        static string MD5()
        {
            return "517c2b9033b127b91133e76324cd2251";
        }
        FanTuanMyPostResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(fanTuanFeedList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(fanTuanFeedList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(fanTuanFeedList,"fanTuanFeedList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(fanTuanFeedList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::ONAFanTuanFeed> fanTuanFeedList;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const FanTuanMyPostResponse&l, const FanTuanMyPostResponse&r)
    {
        return l.errCode == r.errCode && l.fanTuanFeedList == r.fanTuanFeedList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const FanTuanMyPostResponse&l, const FanTuanMyPostResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanMyCommentRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanMyCommentRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        FanTuanMyCommentRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const FanTuanMyCommentRequest&l, const FanTuanMyCommentRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const FanTuanMyCommentRequest&l, const FanTuanMyCommentRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanMyCommentResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanMyCommentResponse";
        }
        static string MD5()
        {
            return "61c463a1cf9c974ee76ad78b1c8c7c68";
        }
        FanTuanMyCommentResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(fanTuanMyCommentList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(fanTuanMyCommentList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(fanTuanMyCommentList,"fanTuanMyCommentList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(fanTuanMyCommentList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::FanTuanCommentItem> fanTuanMyCommentList;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const FanTuanMyCommentResponse&l, const FanTuanMyCommentResponse&r)
    {
        return l.errCode == r.errCode && l.fanTuanMyCommentList == r.fanTuanMyCommentList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const FanTuanMyCommentResponse&l, const FanTuanMyCommentResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanGetUnReadMsgCountRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanGetUnReadMsgCountRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        FanTuanGetUnReadMsgCountRequest()
        :flag(0)
        {
        }
        void resetDefautlt()
        {
            flag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(flag, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(flag, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(flag,"flag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(flag, false);
            return _os;
        }
    public:
        taf::Int32 flag;
    };
    inline bool operator==(const FanTuanGetUnReadMsgCountRequest&l, const FanTuanGetUnReadMsgCountRequest&r)
    {
        return l.flag == r.flag;
    }
    inline bool operator!=(const FanTuanGetUnReadMsgCountRequest&l, const FanTuanGetUnReadMsgCountRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanGetUnReadMsgCountResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanGetUnReadMsgCountResponse";
        }
        static string MD5()
        {
            return "b065bda52a7407277f35492ffb50736e";
        }
        FanTuanGetUnReadMsgCountResponse()
        :errCode(0),count(0),modifyTime(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            count = 0;
            modifyTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(count, 1);
            _os.write(modifyTime, 2);
            _os.write(userInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(count, 1, true);
            _is.read(modifyTime, 2, true);
            _is.read(userInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(count,"count");
            _ds.display(modifyTime,"modifyTime");
            _ds.display(userInfo,"userInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(count, true);
            _ds.displaySimple(modifyTime, true);
            _ds.displaySimple(userInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 count;
        taf::Int64 modifyTime;
        jce::ActorInfo userInfo;
    };
    inline bool operator==(const FanTuanGetUnReadMsgCountResponse&l, const FanTuanGetUnReadMsgCountResponse&r)
    {
        return l.errCode == r.errCode && l.count == r.count && l.modifyTime == r.modifyTime && l.userInfo == r.userInfo;
    }
    inline bool operator!=(const FanTuanGetUnReadMsgCountResponse&l, const FanTuanGetUnReadMsgCountResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanGetMsgListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanGetMsgListRequest";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        FanTuanGetMsgListRequest()
        :type(0),beginMsgId(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            beginMsgId = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(beginMsgId, 1);
            _os.write(pageContext, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(beginMsgId, 1, false);
            _is.read(pageContext, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(beginMsgId,"beginMsgId");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(beginMsgId, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string beginMsgId;
        std::string pageContext;
    };
    inline bool operator==(const FanTuanGetMsgListRequest&l, const FanTuanGetMsgListRequest&r)
    {
        return l.type == r.type && l.beginMsgId == r.beginMsgId && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const FanTuanGetMsgListRequest&l, const FanTuanGetMsgListRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanGetMsgListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanGetMsgListResponse";
        }
        static string MD5()
        {
            return "27616e97d9383125209cbe117f00fef5";
        }
        FanTuanGetMsgListResponse()
        :errCode(0),hasNextPage(true),pageContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasNextPage = true;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(hasNextPage, 1);
            _os.write(msgList, 2);
            _os.write(pageContext, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(hasNextPage, 1, false);
            _is.read(msgList, 2, false);
            _is.read(pageContext, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(msgList,"msgList");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(msgList, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Bool hasNextPage;
        vector<jce::FanTuanMessageItem> msgList;
        std::string pageContext;
    };
    inline bool operator==(const FanTuanGetMsgListResponse&l, const FanTuanGetMsgListResponse&r)
    {
        return l.errCode == r.errCode && l.hasNextPage == r.hasNextPage && l.msgList == r.msgList && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const FanTuanGetMsgListResponse&l, const FanTuanGetMsgListResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanSetLastReadMsgRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanSetLastReadMsgRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        FanTuanSetLastReadMsgRequest()
        :lastMsgId("")
        {
        }
        void resetDefautlt()
        {
            lastMsgId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lastMsgId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lastMsgId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lastMsgId,"lastMsgId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lastMsgId, false);
            return _os;
        }
    public:
        std::string lastMsgId;
    };
    inline bool operator==(const FanTuanSetLastReadMsgRequest&l, const FanTuanSetLastReadMsgRequest&r)
    {
        return l.lastMsgId == r.lastMsgId;
    }
    inline bool operator!=(const FanTuanSetLastReadMsgRequest&l, const FanTuanSetLastReadMsgRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanSetLastReadMsgResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanSetLastReadMsgResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        FanTuanSetLastReadMsgResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const FanTuanSetLastReadMsgResponse&l, const FanTuanSetLastReadMsgResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const FanTuanSetLastReadMsgResponse&l, const FanTuanSetLastReadMsgResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanMyFollowRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanMyFollowRequest";
        }
        static string MD5()
        {
            return "236e8e638812d0545938ec6a7efb0e67";
        }
        FanTuanMyFollowRequest()
        :pageContext(""),onePageCount(0),needUpdateInfo(0),userId(""),requestType(0)
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
            onePageCount = 0;
            needUpdateInfo = 0;
            userId = "";
            requestType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
            _os.write(onePageCount, 1);
            _os.write(needUpdateInfo, 2);
            _os.write(userId, 3);
            _os.write(requestType, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
            _is.read(onePageCount, 1, false);
            _is.read(needUpdateInfo, 2, false);
            _is.read(userId, 3, false);
            _is.read(requestType, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            _ds.display(onePageCount,"onePageCount");
            _ds.display(needUpdateInfo,"needUpdateInfo");
            _ds.display(userId,"userId");
            _ds.display(requestType,"requestType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(onePageCount, true);
            _ds.displaySimple(needUpdateInfo, true);
            _ds.displaySimple(userId, true);
            _ds.displaySimple(requestType, false);
            return _os;
        }
    public:
        std::string pageContext;
        taf::Int32 onePageCount;
        taf::Int32 needUpdateInfo;
        std::string userId;
        taf::Int32 requestType;
    };
    inline bool operator==(const FanTuanMyFollowRequest&l, const FanTuanMyFollowRequest&r)
    {
        return l.pageContext == r.pageContext && l.onePageCount == r.onePageCount && l.needUpdateInfo == r.needUpdateInfo && l.userId == r.userId && l.requestType == r.requestType;
    }
    inline bool operator!=(const FanTuanMyFollowRequest&l, const FanTuanMyFollowRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanMyFollowResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanMyFollowResponse";
        }
        static string MD5()
        {
            return "7231a2ecea5e13b637e451528c155d37";
        }
        FanTuanMyFollowResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(fanTuanMyFollowList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(updateInfoList, 4);
            _os.write(updateVersionList, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(fanTuanMyFollowList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(updateInfoList, 4, false);
            _is.read(updateVersionList, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(fanTuanMyFollowList,"fanTuanMyFollowList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(updateInfoList,"updateInfoList");
            _ds.display(updateVersionList,"updateVersionList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(fanTuanMyFollowList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(updateInfoList, true);
            _ds.displaySimple(updateVersionList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::ActorInfo> fanTuanMyFollowList;
        std::string pageContext;
        taf::Bool hasNextPage;
        map<std::string, std::string> updateInfoList;
        map<std::string, std::string> updateVersionList;
    };
    inline bool operator==(const FanTuanMyFollowResponse&l, const FanTuanMyFollowResponse&r)
    {
        return l.errCode == r.errCode && l.fanTuanMyFollowList == r.fanTuanMyFollowList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.updateInfoList == r.updateInfoList && l.updateVersionList == r.updateVersionList;
    }
    inline bool operator!=(const FanTuanMyFollowResponse&l, const FanTuanMyFollowResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanFollowRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanFollowRequest";
        }
        static string MD5()
        {
            return "970733499ef8a2145d06819abf2ea5e7";
        }
        FanTuanFollowRequest()
        :fanTuanId(""),type(0),needCheck(0),followDataKey("")
        {
        }
        void resetDefautlt()
        {
            fanTuanId = "";
            type = 0;
            needCheck = 0;
            followDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fanTuanId, 0);
            _os.write(type, 1);
            _os.write(needCheck, 2);
            _os.write(fanTuanIdList, 3);
            _os.write(followDataKey, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fanTuanId, 0, false);
            _is.read(type, 1, false);
            _is.read(needCheck, 2, false);
            _is.read(fanTuanIdList, 3, false);
            _is.read(followDataKey, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fanTuanId,"fanTuanId");
            _ds.display(type,"type");
            _ds.display(needCheck,"needCheck");
            _ds.display(fanTuanIdList,"fanTuanIdList");
            _ds.display(followDataKey,"followDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fanTuanId, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(needCheck, true);
            _ds.displaySimple(fanTuanIdList, true);
            _ds.displaySimple(followDataKey, false);
            return _os;
        }
    public:
        std::string fanTuanId;
        taf::Int32 type;
        taf::Int32 needCheck;
        vector<std::string> fanTuanIdList;
        std::string followDataKey;
    };
    inline bool operator==(const FanTuanFollowRequest&l, const FanTuanFollowRequest&r)
    {
        return l.fanTuanId == r.fanTuanId && l.type == r.type && l.needCheck == r.needCheck && l.fanTuanIdList == r.fanTuanIdList && l.followDataKey == r.followDataKey;
    }
    inline bool operator!=(const FanTuanFollowRequest&l, const FanTuanFollowRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanFollowResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanFollowResponse";
        }
        static string MD5()
        {
            return "0d4ac944fd53125304ac137d472ce646";
        }
        FanTuanFollowResponse()
        :errCode(0),signCount(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            signCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(signCount, 1);
            _os.write(followList, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(signCount, 1, false);
            _is.read(followList, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(signCount,"signCount");
            _ds.display(followList,"followList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(signCount, true);
            _ds.displaySimple(followList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 signCount;
        vector<jce::FanTuanFollowItem> followList;
    };
    inline bool operator==(const FanTuanFollowResponse&l, const FanTuanFollowResponse&r)
    {
        return l.errCode == r.errCode && l.signCount == r.signCount && l.followList == r.followList;
    }
    inline bool operator!=(const FanTuanFollowResponse&l, const FanTuanFollowResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanQueryFollowRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanQueryFollowRequest";
        }
        static string MD5()
        {
            return "bc856d89c2d562cfd8cd8989152629a7";
        }
        FanTuanQueryFollowRequest()
        :optType(0)
        {
        }
        void resetDefautlt()
        {
            optType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fanTuanIdList, 0);
            _os.write(optType, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fanTuanIdList, 0, true);
            _is.read(optType, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fanTuanIdList,"fanTuanIdList");
            _ds.display(optType,"optType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fanTuanIdList, true);
            _ds.displaySimple(optType, false);
            return _os;
        }
    public:
        vector<std::string> fanTuanIdList;
        taf::Int32 optType;
    };
    inline bool operator==(const FanTuanQueryFollowRequest&l, const FanTuanQueryFollowRequest&r)
    {
        return l.fanTuanIdList == r.fanTuanIdList && l.optType == r.optType;
    }
    inline bool operator!=(const FanTuanQueryFollowRequest&l, const FanTuanQueryFollowRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanQueryFollowResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanQueryFollowResponse";
        }
        static string MD5()
        {
            return "28bf64e1a2f78c2bad4bee3298ecb3a1";
        }
        FanTuanQueryFollowResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(followList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(followList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(followList,"followList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(followList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::FanTuanFollowItem> followList;
    };
    inline bool operator==(const FanTuanQueryFollowResponse&l, const FanTuanQueryFollowResponse&r)
    {
        return l.errCode == r.errCode && l.followList == r.followList;
    }
    inline bool operator!=(const FanTuanQueryFollowResponse&l, const FanTuanQueryFollowResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanSignRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanSignRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        FanTuanSignRequest()
        :fanTuanId("")
        {
        }
        void resetDefautlt()
        {
            fanTuanId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fanTuanId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fanTuanId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fanTuanId,"fanTuanId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fanTuanId, false);
            return _os;
        }
    public:
        std::string fanTuanId;
    };
    inline bool operator==(const FanTuanSignRequest&l, const FanTuanSignRequest&r)
    {
        return l.fanTuanId == r.fanTuanId;
    }
    inline bool operator!=(const FanTuanSignRequest&l, const FanTuanSignRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanSignResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanSignResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        FanTuanSignResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const FanTuanSignResponse&l, const FanTuanSignResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const FanTuanSignResponse&l, const FanTuanSignResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanFeedDetailRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanFeedDetailRequest";
        }
        static string MD5()
        {
            return "36c2d153bfaace410e59539c658500ea";
        }
        FanTuanFeedDetailRequest()
        :feedId(""),pageContext(""),type(0),direction(0)
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            pageContext = "";
            type = 0;
            direction = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(pageContext, 1);
            _os.write(type, 2);
            _os.write(direction, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(pageContext, 1, true);
            _is.read(type, 2, true);
            _is.read(direction, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(pageContext,"pageContext");
            _ds.display(type,"type");
            _ds.display(direction,"direction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(direction, false);
            return _os;
        }
    public:
        std::string feedId;
        std::string pageContext;
        taf::Int32 type;
        taf::Int32 direction;
    };
    inline bool operator==(const FanTuanFeedDetailRequest&l, const FanTuanFeedDetailRequest&r)
    {
        return l.feedId == r.feedId && l.pageContext == r.pageContext && l.type == r.type && l.direction == r.direction;
    }
    inline bool operator!=(const FanTuanFeedDetailRequest&l, const FanTuanFeedDetailRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanFeedDetailResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanFeedDetailResponse";
        }
        static string MD5()
        {
            return "2787ae8164f02d45f17e63220ce76017";
        }
        FanTuanFeedDetailResponse()
        :errCode(0),pageContext(""),hasNextPage(true),shareH5Url(""),ftFlags(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            shareH5Url = "";
            ftFlags = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(fanTuanFeedCommentList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(primaryFeed, 4);
            _os.write(shareH5Url, 5);
            _os.write(shareItem, 6);
            _os.write(ftFlags, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(fanTuanFeedCommentList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(primaryFeed, 4, false);
            _is.read(shareH5Url, 5, false);
            _is.read(shareItem, 6, false);
            _is.read(ftFlags, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(fanTuanFeedCommentList,"fanTuanFeedCommentList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(primaryFeed,"primaryFeed");
            _ds.display(shareH5Url,"shareH5Url");
            _ds.display(shareItem,"shareItem");
            _ds.display(ftFlags,"ftFlags");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(fanTuanFeedCommentList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(primaryFeed, true);
            _ds.displaySimple(shareH5Url, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(ftFlags, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::FanTuanCommentItem> fanTuanFeedCommentList;
        std::string pageContext;
        taf::Bool hasNextPage;
        jce::ONAFanTuanFeed primaryFeed;
        std::string shareH5Url;
        jce::ShareItem shareItem;
        taf::Int32 ftFlags;
    };
    inline bool operator==(const FanTuanFeedDetailResponse&l, const FanTuanFeedDetailResponse&r)
    {
        return l.errCode == r.errCode && l.fanTuanFeedCommentList == r.fanTuanFeedCommentList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.primaryFeed == r.primaryFeed && l.shareH5Url == r.shareH5Url && l.shareItem == r.shareItem && l.ftFlags == r.ftFlags;
    }
    inline bool operator!=(const FanTuanFeedDetailResponse&l, const FanTuanFeedDetailResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanPublishFeedRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanPublishFeedRequest";
        }
        static string MD5()
        {
            return "c1045a43fe40c5f99dcde8dbd4bdba93";
        }
        FanTuanPublishFeedRequest()
        :fanTuanId(""),title(""),content(""),seq(""),summaryInfo("")
        {
        }
        void resetDefautlt()
        {
            fanTuanId = "";
            title = "";
            content = "";
            seq = "";
            summaryInfo = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fanTuanId, 0);
            _os.write(title, 1);
            _os.write(content, 2);
            _os.write(seq, 3);
            _os.write(photos, 4);
            _os.write(stExtInfo, 5);
            _os.write(longVideos, 6);
            _os.write(miniVideos, 7);
            _os.write(summaryInfo, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fanTuanId, 0, true);
            _is.read(title, 1, false);
            _is.read(content, 2, false);
            _is.read(seq, 3, false);
            _is.read(photos, 4, false);
            _is.read(stExtInfo, 5, false);
            _is.read(longVideos, 6, false);
            _is.read(miniVideos, 7, false);
            _is.read(summaryInfo, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fanTuanId,"fanTuanId");
            _ds.display(title,"title");
            _ds.display(content,"content");
            _ds.display(seq,"seq");
            _ds.display(photos,"photos");
            _ds.display(stExtInfo,"stExtInfo");
            _ds.display(longVideos,"longVideos");
            _ds.display(miniVideos,"miniVideos");
            _ds.display(summaryInfo,"summaryInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fanTuanId, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(photos, true);
            _ds.displaySimple(stExtInfo, true);
            _ds.displaySimple(longVideos, true);
            _ds.displaySimple(miniVideos, true);
            _ds.displaySimple(summaryInfo, false);
            return _os;
        }
    public:
        std::string fanTuanId;
        std::string title;
        std::string content;
        std::string seq;
        vector<jce::CircleUploadImageUrl> photos;
        jce::FanTuanExtInfo stExtInfo;
        vector<jce::FantuanLongVideo> longVideos;
        vector<jce::CircleShortVideoUrl> miniVideos;
        std::string summaryInfo;
    };
    inline bool operator==(const FanTuanPublishFeedRequest&l, const FanTuanPublishFeedRequest&r)
    {
        return l.fanTuanId == r.fanTuanId && l.title == r.title && l.content == r.content && l.seq == r.seq && l.photos == r.photos && l.stExtInfo == r.stExtInfo && l.longVideos == r.longVideos && l.miniVideos == r.miniVideos && l.summaryInfo == r.summaryInfo;
    }
    inline bool operator!=(const FanTuanPublishFeedRequest&l, const FanTuanPublishFeedRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanPublishFeedResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanPublishFeedResponse";
        }
        static string MD5()
        {
            return "748be3152ad087aa458907255922ac90";
        }
        FanTuanPublishFeedResponse()
        :errCode(0),feedId(""),fanTuanId(""),pubTime(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            feedId = "";
            fanTuanId = "";
            pubTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(feedId, 1);
            _os.write(fanTuanId, 2);
            _os.write(pubTime, 3);
            _os.write(action, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(feedId, 1, true);
            _is.read(fanTuanId, 2, false);
            _is.read(pubTime, 3, false);
            _is.read(action, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(feedId,"feedId");
            _ds.display(fanTuanId,"fanTuanId");
            _ds.display(pubTime,"pubTime");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(fanTuanId, true);
            _ds.displaySimple(pubTime, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string feedId;
        std::string fanTuanId;
        taf::Int64 pubTime;
        jce::Action action;
    };
    inline bool operator==(const FanTuanPublishFeedResponse&l, const FanTuanPublishFeedResponse&r)
    {
        return l.errCode == r.errCode && l.feedId == r.feedId && l.fanTuanId == r.fanTuanId && l.pubTime == r.pubTime && l.action == r.action;
    }
    inline bool operator!=(const FanTuanPublishFeedResponse&l, const FanTuanPublishFeedResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanPublishCommentRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanPublishCommentRequest";
        }
        static string MD5()
        {
            return "6998168201208b9e40fe81694d8a048a";
        }
        FanTuanPublishCommentRequest()
        :parentId(""),content(""),seq(""),targetType(0),rootId(""),fanTuanId("")
        {
        }
        void resetDefautlt()
        {
            parentId = "";
            content = "";
            seq = "";
            targetType = 0;
            rootId = "";
            fanTuanId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(parentId, 0);
            _os.write(content, 1);
            _os.write(seq, 2);
            _os.write(photos, 3);
            _os.write(targetType, 4);
            _os.write(stExtInfo, 5);
            _os.write(rootId, 6);
            _os.write(fanTuanId, 7);
            _os.write(longVideos, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(parentId, 0, false);
            _is.read(content, 1, false);
            _is.read(seq, 2, false);
            _is.read(photos, 3, false);
            _is.read(targetType, 4, false);
            _is.read(stExtInfo, 5, false);
            _is.read(rootId, 6, false);
            _is.read(fanTuanId, 7, false);
            _is.read(longVideos, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(parentId,"parentId");
            _ds.display(content,"content");
            _ds.display(seq,"seq");
            _ds.display(photos,"photos");
            _ds.display(targetType,"targetType");
            _ds.display(stExtInfo,"stExtInfo");
            _ds.display(rootId,"rootId");
            _ds.display(fanTuanId,"fanTuanId");
            _ds.display(longVideos,"longVideos");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(parentId, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(photos, true);
            _ds.displaySimple(targetType, true);
            _ds.displaySimple(stExtInfo, true);
            _ds.displaySimple(rootId, true);
            _ds.displaySimple(fanTuanId, true);
            _ds.displaySimple(longVideos, false);
            return _os;
        }
    public:
        std::string parentId;
        std::string content;
        std::string seq;
        vector<jce::CircleUploadImageUrl> photos;
        taf::Int32 targetType;
        jce::FanTuanExtInfo stExtInfo;
        std::string rootId;
        std::string fanTuanId;
        vector<jce::FantuanLongVideo> longVideos;
    };
    inline bool operator==(const FanTuanPublishCommentRequest&l, const FanTuanPublishCommentRequest&r)
    {
        return l.parentId == r.parentId && l.content == r.content && l.seq == r.seq && l.photos == r.photos && l.targetType == r.targetType && l.stExtInfo == r.stExtInfo && l.rootId == r.rootId && l.fanTuanId == r.fanTuanId && l.longVideos == r.longVideos;
    }
    inline bool operator!=(const FanTuanPublishCommentRequest&l, const FanTuanPublishCommentRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanPublishCommentResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanPublishCommentResponse";
        }
        static string MD5()
        {
            return "1051459f8bdb2b06a4100f105fba5f64";
        }
        FanTuanPublishCommentResponse()
        :errCode(0),commentId(""),parentId(""),feedId(""),pubTime(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            commentId = "";
            parentId = "";
            feedId = "";
            pubTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(commentId, 1);
            _os.write(parentId, 2);
            _os.write(feedId, 3);
            _os.write(pubTime, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(commentId, 1, true);
            _is.read(parentId, 2, false);
            _is.read(feedId, 3, false);
            _is.read(pubTime, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(commentId,"commentId");
            _ds.display(parentId,"parentId");
            _ds.display(feedId,"feedId");
            _ds.display(pubTime,"pubTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(commentId, true);
            _ds.displaySimple(parentId, true);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(pubTime, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string commentId;
        std::string parentId;
        std::string feedId;
        taf::Int64 pubTime;
    };
    inline bool operator==(const FanTuanPublishCommentResponse&l, const FanTuanPublishCommentResponse&r)
    {
        return l.errCode == r.errCode && l.commentId == r.commentId && l.parentId == r.parentId && l.feedId == r.feedId && l.pubTime == r.pubTime;
    }
    inline bool operator!=(const FanTuanPublishCommentResponse&l, const FanTuanPublishCommentResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanDeleteRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanDeleteRequest";
        }
        static string MD5()
        {
            return "19cfb41a66359c894f1dcce10dba2a65";
        }
        FanTuanDeleteRequest()
        :targetId(""),type(0),fanTuanId("")
        {
        }
        void resetDefautlt()
        {
            targetId = "";
            type = 0;
            fanTuanId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(targetId, 0);
            _os.write(type, 1);
            _os.write(fanTuanId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(targetId, 0, false);
            _is.read(type, 1, false);
            _is.read(fanTuanId, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(targetId,"targetId");
            _ds.display(type,"type");
            _ds.display(fanTuanId,"fanTuanId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(targetId, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(fanTuanId, false);
            return _os;
        }
    public:
        std::string targetId;
        taf::Int32 type;
        std::string fanTuanId;
    };
    inline bool operator==(const FanTuanDeleteRequest&l, const FanTuanDeleteRequest&r)
    {
        return l.targetId == r.targetId && l.type == r.type && l.fanTuanId == r.fanTuanId;
    }
    inline bool operator!=(const FanTuanDeleteRequest&l, const FanTuanDeleteRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanDeleteResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanDeleteResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        FanTuanDeleteResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const FanTuanDeleteResponse&l, const FanTuanDeleteResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const FanTuanDeleteResponse&l, const FanTuanDeleteResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanUpRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanUpRequest";
        }
        static string MD5()
        {
            return "b1b17e593452af38281be68febcb219e";
        }
        FanTuanUpRequest()
        :targetId(""),targetType(0),operateFlag(0),fanTuanId("")
        {
        }
        void resetDefautlt()
        {
            targetId = "";
            targetType = 0;
            operateFlag = 0;
            fanTuanId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(targetId, 0);
            _os.write(targetType, 1);
            _os.write(operateFlag, 2);
            _os.write(fanTuanId, 3);
            _os.write(stExtInfo, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(targetId, 0, false);
            _is.read(targetType, 1, false);
            _is.read(operateFlag, 2, false);
            _is.read(fanTuanId, 3, false);
            _is.read(stExtInfo, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(targetId,"targetId");
            _ds.display(targetType,"targetType");
            _ds.display(operateFlag,"operateFlag");
            _ds.display(fanTuanId,"fanTuanId");
            _ds.display(stExtInfo,"stExtInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(targetId, true);
            _ds.displaySimple(targetType, true);
            _ds.displaySimple(operateFlag, true);
            _ds.displaySimple(fanTuanId, true);
            _ds.displaySimple(stExtInfo, false);
            return _os;
        }
    public:
        std::string targetId;
        taf::Int32 targetType;
        taf::Int32 operateFlag;
        std::string fanTuanId;
        jce::FanTuanExtInfo stExtInfo;
    };
    inline bool operator==(const FanTuanUpRequest&l, const FanTuanUpRequest&r)
    {
        return l.targetId == r.targetId && l.targetType == r.targetType && l.operateFlag == r.operateFlag && l.fanTuanId == r.fanTuanId && l.stExtInfo == r.stExtInfo;
    }
    inline bool operator!=(const FanTuanUpRequest&l, const FanTuanUpRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanUpResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanUpResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        FanTuanUpResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const FanTuanUpResponse&l, const FanTuanUpResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const FanTuanUpResponse&l, const FanTuanUpResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanReportRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanReportRequest";
        }
        static string MD5()
        {
            return "30fae931f15f68257d76e01ad4f09150";
        }
        FanTuanReportRequest()
        :targetId(""),targetType(0),reportType(0),reportDesc("")
        {
        }
        void resetDefautlt()
        {
            targetId = "";
            targetType = 0;
            reportType = 0;
            reportDesc = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(targetId, 0);
            _os.write(targetType, 1);
            _os.write(reportType, 2);
            _os.write(reportDesc, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(targetId, 0, false);
            _is.read(targetType, 1, false);
            _is.read(reportType, 2, false);
            _is.read(reportDesc, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(targetId,"targetId");
            _ds.display(targetType,"targetType");
            _ds.display(reportType,"reportType");
            _ds.display(reportDesc,"reportDesc");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(targetId, true);
            _ds.displaySimple(targetType, true);
            _ds.displaySimple(reportType, true);
            _ds.displaySimple(reportDesc, false);
            return _os;
        }
    public:
        std::string targetId;
        taf::Int32 targetType;
        taf::Int32 reportType;
        std::string reportDesc;
    };
    inline bool operator==(const FanTuanReportRequest&l, const FanTuanReportRequest&r)
    {
        return l.targetId == r.targetId && l.targetType == r.targetType && l.reportType == r.reportType && l.reportDesc == r.reportDesc;
    }
    inline bool operator!=(const FanTuanReportRequest&l, const FanTuanReportRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanReportResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanReportResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        FanTuanReportResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const FanTuanReportResponse&l, const FanTuanReportResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const FanTuanReportResponse&l, const FanTuanReportResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanListRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        FanTuanListRequest()
        :lid(""),cid(""),vid("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, false);
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
    };
    inline bool operator==(const FanTuanListRequest&l, const FanTuanListRequest&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid;
    }
    inline bool operator!=(const FanTuanListRequest&l, const FanTuanListRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanListResponse";
        }
        static string MD5()
        {
            return "1d402569d1657d95ab86d798a6695239";
        }
        FanTuanListResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(fanTuanListPart, 2);
            _os.write(fanTuanListAll, 3);
            _os.write(promotionInfo, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(fanTuanListPart, 2, false);
            _is.read(fanTuanListAll, 3, false);
            _is.read(promotionInfo, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(fanTuanListPart,"fanTuanListPart");
            _ds.display(fanTuanListAll,"fanTuanListAll");
            _ds.display(promotionInfo,"promotionInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(fanTuanListPart, true);
            _ds.displaySimple(fanTuanListAll, true);
            _ds.displaySimple(promotionInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        vector<jce::ActorInfo> fanTuanListPart;
        vector<jce::ActorInfo> fanTuanListAll;
        jce::ActionBarInfo promotionInfo;
    };
    inline bool operator==(const FanTuanListResponse&l, const FanTuanListResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.fanTuanListPart == r.fanTuanListPart && l.fanTuanListAll == r.fanTuanListAll && l.promotionInfo == r.promotionInfo;
    }
    inline bool operator!=(const FanTuanListResponse&l, const FanTuanListResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanLatestRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanLatestRequest";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        FanTuanLatestRequest()
        :type(""),dataKey(""),pageContext(""),versionCode("")
        {
        }
        void resetDefautlt()
        {
            type = "";
            dataKey = "";
            pageContext = "";
            versionCode = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(dataKey, 1);
            _os.write(pageContext, 2);
            _os.write(versionCode, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(dataKey, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(versionCode, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(versionCode,"versionCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(versionCode, false);
            return _os;
        }
    public:
        std::string type;
        std::string dataKey;
        std::string pageContext;
        std::string versionCode;
    };
    inline bool operator==(const FanTuanLatestRequest&l, const FanTuanLatestRequest&r)
    {
        return l.type == r.type && l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.versionCode == r.versionCode;
    }
    inline bool operator!=(const FanTuanLatestRequest&l, const FanTuanLatestRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanLatestResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanLatestResponse";
        }
        static string MD5()
        {
            return "8e18fd5810d80818b367f70164842916";
        }
        FanTuanLatestResponse()
        :errCode(0),pageContext(""),isHaveNextPage(true),versionCode(""),updateCount("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            isHaveNextPage = true;
            versionCode = "";
            updateCount = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(isHaveNextPage, 3);
            _os.write(versionCode, 4);
            _os.write(updateCount, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(isHaveNextPage, 3, false);
            _is.read(versionCode, 4, false);
            _is.read(updateCount, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(isHaveNextPage,"isHaveNextPage");
            _ds.display(versionCode,"versionCode");
            _ds.display(updateCount,"updateCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isHaveNextPage, true);
            _ds.displaySimple(versionCode, true);
            _ds.displaySimple(updateCount, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool isHaveNextPage;
        std::string versionCode;
        std::string updateCount;
    };
    inline bool operator==(const FanTuanLatestResponse&l, const FanTuanLatestResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.isHaveNextPage == r.isHaveNextPage && l.versionCode == r.versionCode && l.updateCount == r.updateCount;
    }
    inline bool operator!=(const FanTuanLatestResponse&l, const FanTuanLatestResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanRecommendStarsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanRecommendStarsRequest";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        FanTuanRecommendStarsRequest()
        :pageContext(""),type(0)
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
            _os.write(type, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
            _is.read(type, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        std::string pageContext;
        taf::Int32 type;
    };
    inline bool operator==(const FanTuanRecommendStarsRequest&l, const FanTuanRecommendStarsRequest&r)
    {
        return l.pageContext == r.pageContext && l.type == r.type;
    }
    inline bool operator!=(const FanTuanRecommendStarsRequest&l, const FanTuanRecommendStarsRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanRecommendStarsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanRecommendStarsResponse";
        }
        static string MD5()
        {
            return "ede566f5cbd3681b5b4b59374fda1125";
        }
        FanTuanRecommendStarsResponse()
        :errCode(0),pageContext(""),isHaveNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            isHaveNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(starGroupList, 1);
            _os.write(pageContext, 2);
            _os.write(isHaveNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(starGroupList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(isHaveNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(starGroupList,"starGroupList");
            _ds.display(pageContext,"pageContext");
            _ds.display(isHaveNextPage,"isHaveNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(starGroupList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isHaveNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::FantuanRecommendStarsGroup> starGroupList;
        std::string pageContext;
        taf::Bool isHaveNextPage;
    };
    inline bool operator==(const FanTuanRecommendStarsResponse&l, const FanTuanRecommendStarsResponse&r)
    {
        return l.errCode == r.errCode && l.starGroupList == r.starGroupList && l.pageContext == r.pageContext && l.isHaveNextPage == r.isHaveNextPage;
    }
    inline bool operator!=(const FanTuanRecommendStarsResponse&l, const FanTuanRecommendStarsResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanGetNewLineRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanGetNewLineRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        FanTuanGetNewLineRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const FanTuanGetNewLineRequest&l, const FanTuanGetNewLineRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const FanTuanGetNewLineRequest&l, const FanTuanGetNewLineRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanGetNewLineResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanGetNewLineResponse";
        }
        static string MD5()
        {
            return "30db60856c3f115ddfc036315f639a05";
        }
        FanTuanGetNewLineResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(data, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(data, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(data,"data");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(data, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> data;
    };
    inline bool operator==(const FanTuanGetNewLineResponse&l, const FanTuanGetNewLineResponse&r)
    {
        return l.errCode == r.errCode && l.data == r.data;
    }
    inline bool operator!=(const FanTuanGetNewLineResponse&l, const FanTuanGetNewLineResponse&r)
    {
        return !(l == r);
    }

    struct MiniVideoTimelineRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MiniVideoTimelineRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        MiniVideoTimelineRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const MiniVideoTimelineRequest&l, const MiniVideoTimelineRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const MiniVideoTimelineRequest&l, const MiniVideoTimelineRequest&r)
    {
        return !(l == r);
    }

    struct MiniVideoTimelineResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MiniVideoTimelineResponse";
        }
        static string MD5()
        {
            return "36c65d709bba479e43a53f09699b1e03";
        }
        MiniVideoTimelineResponse()
        :errCode(0),pageContext(""),hasNextPage(true),timelineType(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            timelineType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(videoList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(timelineType, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(videoList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(timelineType, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(videoList,"videoList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(timelineType,"timelineType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(videoList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(timelineType, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::MiniVideoItem> videoList;
        std::string pageContext;
        taf::Bool hasNextPage;
        taf::Int32 timelineType;
    };
    inline bool operator==(const MiniVideoTimelineResponse&l, const MiniVideoTimelineResponse&r)
    {
        return l.errCode == r.errCode && l.videoList == r.videoList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.timelineType == r.timelineType;
    }
    inline bool operator!=(const MiniVideoTimelineResponse&l, const MiniVideoTimelineResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanNavOperatePageRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanNavOperatePageRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        FanTuanNavOperatePageRequest()
        :type(""),dataKey(""),extDataKey("")
        {
        }
        void resetDefautlt()
        {
            type = "";
            dataKey = "";
            extDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(dataKey, 1);
            _os.write(extDataKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(dataKey, 1, false);
            _is.read(extDataKey, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            _ds.display(extDataKey,"extDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(extDataKey, false);
            return _os;
        }
    public:
        std::string type;
        std::string dataKey;
        std::string extDataKey;
    };
    inline bool operator==(const FanTuanNavOperatePageRequest&l, const FanTuanNavOperatePageRequest&r)
    {
        return l.type == r.type && l.dataKey == r.dataKey && l.extDataKey == r.extDataKey;
    }
    inline bool operator!=(const FanTuanNavOperatePageRequest&l, const FanTuanNavOperatePageRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanNavOperatePageResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanNavOperatePageResponse";
        }
        static string MD5()
        {
            return "d66a9f77c93eea3ab6a2a68956d3156d";
        }
        FanTuanNavOperatePageResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(fanInfo, 1);
            _os.write(moduleList, 2);
            _os.write(dokiHeadExtraInfo, 3);
            _os.write(shareItem, 4);
            _os.write(actionBars, 5);
            _os.write(degreeLabel, 6);
            _os.write(promotionInfo, 7);
            _os.write(introAction, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(fanInfo, 1, true);
            _is.read(moduleList, 2, true);
            _is.read(dokiHeadExtraInfo, 3, false);
            _is.read(shareItem, 4, false);
            _is.read(actionBars, 5, false);
            _is.read(degreeLabel, 6, false);
            _is.read(promotionInfo, 7, false);
            _is.read(introAction, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(fanInfo,"fanInfo");
            _ds.display(moduleList,"moduleList");
            _ds.display(dokiHeadExtraInfo,"dokiHeadExtraInfo");
            _ds.display(shareItem,"shareItem");
            _ds.display(actionBars,"actionBars");
            _ds.display(degreeLabel,"degreeLabel");
            _ds.display(promotionInfo,"promotionInfo");
            _ds.display(introAction,"introAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(fanInfo, true);
            _ds.displaySimple(moduleList, true);
            _ds.displaySimple(dokiHeadExtraInfo, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(actionBars, true);
            _ds.displaySimple(degreeLabel, true);
            _ds.displaySimple(promotionInfo, true);
            _ds.displaySimple(introAction, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::FanInvolveItem fanInfo;
        vector<jce::LiveTabModuleInfo> moduleList;
        jce::DokiHeadExtraInfo dokiHeadExtraInfo;
        jce::ShareItem shareItem;
        jce::FanTuanActionBarsInfo actionBars;
        jce::DegreeLabel degreeLabel;
        jce::PromotionBannerInfo promotionInfo;
        jce::Action introAction;
    };
    inline bool operator==(const FanTuanNavOperatePageResponse&l, const FanTuanNavOperatePageResponse&r)
    {
        return l.errCode == r.errCode && l.fanInfo == r.fanInfo && l.moduleList == r.moduleList && l.dokiHeadExtraInfo == r.dokiHeadExtraInfo && l.shareItem == r.shareItem && l.actionBars == r.actionBars && l.degreeLabel == r.degreeLabel && l.promotionInfo == r.promotionInfo && l.introAction == r.introAction;
    }
    inline bool operator!=(const FanTuanNavOperatePageResponse&l, const FanTuanNavOperatePageResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanModifyRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanModifyRequest";
        }
        static string MD5()
        {
            return "d9b365dba91c473874df2cc97109d49a";
        }
        FanTuanModifyRequest()
        :fanTuanId(""),msgId(""),title(""),content(""),seq("")
        {
        }
        void resetDefautlt()
        {
            fanTuanId = "";
            msgId = "";
            title = "";
            content = "";
            seq = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fanTuanId, 0);
            _os.write(msgId, 1);
            _os.write(title, 2);
            _os.write(content, 3);
            _os.write(seq, 4);
            _os.write(photos, 5);
            _os.write(stExtInfo, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fanTuanId, 0, true);
            _is.read(msgId, 1, true);
            _is.read(title, 2, false);
            _is.read(content, 3, false);
            _is.read(seq, 4, false);
            _is.read(photos, 5, false);
            _is.read(stExtInfo, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fanTuanId,"fanTuanId");
            _ds.display(msgId,"msgId");
            _ds.display(title,"title");
            _ds.display(content,"content");
            _ds.display(seq,"seq");
            _ds.display(photos,"photos");
            _ds.display(stExtInfo,"stExtInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fanTuanId, true);
            _ds.displaySimple(msgId, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(photos, true);
            _ds.displaySimple(stExtInfo, false);
            return _os;
        }
    public:
        std::string fanTuanId;
        std::string msgId;
        std::string title;
        std::string content;
        std::string seq;
        vector<jce::CircleUploadImageUrl> photos;
        jce::FanTuanExtInfo stExtInfo;
    };
    inline bool operator==(const FanTuanModifyRequest&l, const FanTuanModifyRequest&r)
    {
        return l.fanTuanId == r.fanTuanId && l.msgId == r.msgId && l.title == r.title && l.content == r.content && l.seq == r.seq && l.photos == r.photos && l.stExtInfo == r.stExtInfo;
    }
    inline bool operator!=(const FanTuanModifyRequest&l, const FanTuanModifyRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanModifyResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanModifyResponse";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        FanTuanModifyResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
    };
    inline bool operator==(const FanTuanModifyResponse&l, const FanTuanModifyResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg;
    }
    inline bool operator!=(const FanTuanModifyResponse&l, const FanTuanModifyResponse&r)
    {
        return !(l == r);
    }

    struct FanTuanHomeFeedRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanHomeFeedRequest";
        }
        static string MD5()
        {
            return "727bca8c7b8a99bfeca109996118f608";
        }
        FanTuanHomeFeedRequest()
        :dataKey(""),pageContext(""),reportContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
            _os.write(reportContext, 2);
            _os.write(recmdInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(reportContext, 2, false);
            _is.read(recmdInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(reportContext,"reportContext");
            _ds.display(recmdInfo,"recmdInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(recmdInfo, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
        std::string reportContext;
        jce::RecommendReqExtInfo recmdInfo;
    };
    inline bool operator==(const FanTuanHomeFeedRequest&l, const FanTuanHomeFeedRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.reportContext == r.reportContext && l.recmdInfo == r.recmdInfo;
    }
    inline bool operator!=(const FanTuanHomeFeedRequest&l, const FanTuanHomeFeedRequest&r)
    {
        return !(l == r);
    }

    struct FanTuanHomeFeedResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanTuanHomeFeedResponse";
        }
        static string MD5()
        {
            return "065117f35d3748a1f2834c01d32613c4";
        }
        FanTuanHomeFeedResponse()
        :errCode(0),pageContext(""),hasNextPage(true),postDataKey(""),reportContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            postDataKey = "";
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(postDataKey, 4);
            _os.write(reportContext, 5);
            _os.write(recmdInfo, 6);
            _os.write(promotionInfo, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(postDataKey, 4, false);
            _is.read(reportContext, 5, false);
            _is.read(recmdInfo, 6, false);
            _is.read(promotionInfo, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(postDataKey,"postDataKey");
            _ds.display(reportContext,"reportContext");
            _ds.display(recmdInfo,"recmdInfo");
            _ds.display(promotionInfo,"promotionInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(postDataKey, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(recmdInfo, true);
            _ds.displaySimple(promotionInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
        std::string postDataKey;
        std::string reportContext;
        jce::RecommendRespExtInfo recmdInfo;
        jce::PromotionEventInfo promotionInfo;
    };
    inline bool operator==(const FanTuanHomeFeedResponse&l, const FanTuanHomeFeedResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.postDataKey == r.postDataKey && l.reportContext == r.reportContext && l.recmdInfo == r.recmdInfo && l.promotionInfo == r.promotionInfo;
    }
    inline bool operator!=(const FanTuanHomeFeedResponse&l, const FanTuanHomeFeedResponse&r)
    {
        return !(l == r);
    }

    struct DokiHomeFeedRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiHomeFeedRequest";
        }
        static string MD5()
        {
            return "727bca8c7b8a99bfeca109996118f608";
        }
        DokiHomeFeedRequest()
        :dataKey(""),pageContext(""),reportContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
            _os.write(reportContext, 2);
            _os.write(recmdInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(reportContext, 2, false);
            _is.read(recmdInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(reportContext,"reportContext");
            _ds.display(recmdInfo,"recmdInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(recmdInfo, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
        std::string reportContext;
        jce::RecommendReqExtInfo recmdInfo;
    };
    inline bool operator==(const DokiHomeFeedRequest&l, const DokiHomeFeedRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.reportContext == r.reportContext && l.recmdInfo == r.recmdInfo;
    }
    inline bool operator!=(const DokiHomeFeedRequest&l, const DokiHomeFeedRequest&r)
    {
        return !(l == r);
    }

    struct DokiHomeFeedResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiHomeFeedResponse";
        }
        static string MD5()
        {
            return "065117f35d3748a1f2834c01d32613c4";
        }
        DokiHomeFeedResponse()
        :errCode(0),pageContext(""),hasNextPage(true),postDataKey(""),reportContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            postDataKey = "";
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(postDataKey, 4);
            _os.write(reportContext, 5);
            _os.write(recmdInfo, 6);
            _os.write(promotionInfo, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(postDataKey, 4, false);
            _is.read(reportContext, 5, false);
            _is.read(recmdInfo, 6, false);
            _is.read(promotionInfo, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(postDataKey,"postDataKey");
            _ds.display(reportContext,"reportContext");
            _ds.display(recmdInfo,"recmdInfo");
            _ds.display(promotionInfo,"promotionInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(postDataKey, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(recmdInfo, true);
            _ds.displaySimple(promotionInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
        std::string postDataKey;
        std::string reportContext;
        jce::RecommendRespExtInfo recmdInfo;
        jce::PromotionEventInfo promotionInfo;
    };
    inline bool operator==(const DokiHomeFeedResponse&l, const DokiHomeFeedResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.postDataKey == r.postDataKey && l.reportContext == r.reportContext && l.recmdInfo == r.recmdInfo && l.promotionInfo == r.promotionInfo;
    }
    inline bool operator!=(const DokiHomeFeedResponse&l, const DokiHomeFeedResponse&r)
    {
        return !(l == r);
    }

    struct DokiNewsCardRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiNewsCardRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        DokiNewsCardRequest()
        :datakey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            datakey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(datakey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(datakey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(datakey,"datakey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(datakey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string datakey;
        std::string pageContext;
    };
    inline bool operator==(const DokiNewsCardRequest&l, const DokiNewsCardRequest&r)
    {
        return l.datakey == r.datakey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const DokiNewsCardRequest&l, const DokiNewsCardRequest&r)
    {
        return !(l == r);
    }

    struct DokiNewsCardResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiNewsCardResponse";
        }
        static string MD5()
        {
            return "8e20d544570fc1e65bbb5ca7673ea635";
        }
        DokiNewsCardResponse()
        :errCode(0),pageContext(""),isHaveNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            isHaveNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(newsList, 1);
            _os.write(pageContext, 2);
            _os.write(isHaveNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(newsList, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(isHaveNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(newsList,"newsList");
            _ds.display(pageContext,"pageContext");
            _ds.display(isHaveNextPage,"isHaveNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(newsList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isHaveNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> newsList;
        std::string pageContext;
        taf::Bool isHaveNextPage;
    };
    inline bool operator==(const DokiNewsCardResponse&l, const DokiNewsCardResponse&r)
    {
        return l.errCode == r.errCode && l.newsList == r.newsList && l.pageContext == r.pageContext && l.isHaveNextPage == r.isHaveNextPage;
    }
    inline bool operator!=(const DokiNewsCardResponse&l, const DokiNewsCardResponse&r)
    {
        return !(l == r);
    }

    struct DokiDegreeTaskRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiDegreeTaskRequest";
        }
        static string MD5()
        {
            return "9bcfaf911c12a5a140566442a651b4bf";
        }
        DokiDegreeTaskRequest()
        :opType(0),dataKey(""),curDegree(0),context("")
        {
        }
        void resetDefautlt()
        {
            opType = 0;
            dataKey = "";
            curDegree = 0;
            context = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(opType, 0);
            _os.write(dataKey, 1);
            _os.write(curDegree, 2);
            _os.write(context, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(opType, 0, true);
            _is.read(dataKey, 1, true);
            _is.read(curDegree, 2, false);
            _is.read(context, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(opType,"opType");
            _ds.display(dataKey,"dataKey");
            _ds.display(curDegree,"curDegree");
            _ds.display(context,"context");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(opType, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(curDegree, true);
            _ds.displaySimple(context, false);
            return _os;
        }
    public:
        taf::Int32 opType;
        std::string dataKey;
        taf::Int32 curDegree;
        std::string context;
    };
    inline bool operator==(const DokiDegreeTaskRequest&l, const DokiDegreeTaskRequest&r)
    {
        return l.opType == r.opType && l.dataKey == r.dataKey && l.curDegree == r.curDegree && l.context == r.context;
    }
    inline bool operator!=(const DokiDegreeTaskRequest&l, const DokiDegreeTaskRequest&r)
    {
        return !(l == r);
    }

    struct DokiDegreeTaskResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiDegreeTaskResponse";
        }
        static string MD5()
        {
            return "dd6966b28cb8d1be9ae4504aa1a48126";
        }
        DokiDegreeTaskResponse()
        :errCode(0),showUrl(""),taskToastText(""),context("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            showUrl = "";
            taskToastText = "";
            context = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(showUrl, 1);
            _os.write(taskBar, 2);
            _os.write(degreeLabel, 3);
            _os.write(taskToastText, 4);
            _os.write(context, 5);
            _os.write(presentBar, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(showUrl, 1, false);
            _is.read(taskBar, 2, false);
            _is.read(degreeLabel, 3, false);
            _is.read(taskToastText, 4, false);
            _is.read(context, 5, false);
            _is.read(presentBar, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(showUrl,"showUrl");
            _ds.display(taskBar,"taskBar");
            _ds.display(degreeLabel,"degreeLabel");
            _ds.display(taskToastText,"taskToastText");
            _ds.display(context,"context");
            _ds.display(presentBar,"presentBar");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(showUrl, true);
            _ds.displaySimple(taskBar, true);
            _ds.displaySimple(degreeLabel, true);
            _ds.displaySimple(taskToastText, true);
            _ds.displaySimple(context, true);
            _ds.displaySimple(presentBar, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string showUrl;
        jce::ActionBarInfo taskBar;
        jce::DegreeLabel degreeLabel;
        std::string taskToastText;
        std::string context;
        jce::ActionBarInfo presentBar;
    };
    inline bool operator==(const DokiDegreeTaskResponse&l, const DokiDegreeTaskResponse&r)
    {
        return l.errCode == r.errCode && l.showUrl == r.showUrl && l.taskBar == r.taskBar && l.degreeLabel == r.degreeLabel && l.taskToastText == r.taskToastText && l.context == r.context && l.presentBar == r.presentBar;
    }
    inline bool operator!=(const DokiDegreeTaskResponse&l, const DokiDegreeTaskResponse&r)
    {
        return !(l == r);
    }

    struct DokiMileStoneItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiMileStoneItem";
        }
        static string MD5()
        {
            return "2fdf6963991f1b032af61477fe72caf0";
        }
        DokiMileStoneItem()
        :title(""),subTitle(""),imgUrl(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            subTitle = "";
            imgUrl = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(subTitle, 1);
            _os.write(imgUrl, 2);
            _os.write(action, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(subTitle, 1, false);
            _is.read(imgUrl, 2, false);
            _is.read(action, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(imgUrl,"imgUrl");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(imgUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string title;
        std::string subTitle;
        std::string imgUrl;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const DokiMileStoneItem&l, const DokiMileStoneItem&r)
    {
        return l.title == r.title && l.subTitle == r.subTitle && l.imgUrl == r.imgUrl && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const DokiMileStoneItem&l, const DokiMileStoneItem&r)
    {
        return !(l == r);
    }

    struct ONADokiMileStoneList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiMileStoneList";
        }
        static string MD5()
        {
            return "e02b3eab640aefe63f44f0208a818075";
        }
        ONADokiMileStoneList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stoneList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stoneList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stoneList,"stoneList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stoneList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::DokiMileStoneItem> stoneList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONADokiMileStoneList&l, const ONADokiMileStoneList&r)
    {
        return l.stoneList == r.stoneList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONADokiMileStoneList&l, const ONADokiMileStoneList&r)
    {
        return !(l == r);
    }

    struct ONADokiEntryList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiEntryList";
        }
        static string MD5()
        {
            return "557a6f62dae1718679f1bc6ffdc421cd";
        }
        ONADokiEntryList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(entryList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(entryList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(entryList,"entryList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(entryList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::FanTuanLatestRankItem> entryList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONADokiEntryList&l, const ONADokiEntryList&r)
    {
        return l.entryList == r.entryList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONADokiEntryList&l, const ONADokiEntryList&r)
    {
        return !(l == r);
    }

    struct DokiHeadBarInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiHeadBarInfo";
        }
        static string MD5()
        {
            return "ec04eb3ce37d2742aab2addadfd630a9";
        }
        DokiHeadBarInfo()
        :closeBgAnimation(true),openGrowthSystem(true),closeRedDot(true),needLogin(true),actionType(0)
        {
        }
        void resetDefautlt()
        {
            closeBgAnimation = true;
            openGrowthSystem = true;
            closeRedDot = true;
            needLogin = true;
            actionType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(closeBgAnimation, 0);
            _os.write(openGrowthSystem, 1);
            _os.write(closeRedDot, 2);
            _os.write(needLogin, 3);
            _os.write(actionType, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(closeBgAnimation, 0, false);
            _is.read(openGrowthSystem, 1, false);
            _is.read(closeRedDot, 2, false);
            _is.read(needLogin, 3, false);
            _is.read(actionType, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(closeBgAnimation,"closeBgAnimation");
            _ds.display(openGrowthSystem,"openGrowthSystem");
            _ds.display(closeRedDot,"closeRedDot");
            _ds.display(needLogin,"needLogin");
            _ds.display(actionType,"actionType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(closeBgAnimation, true);
            _ds.displaySimple(openGrowthSystem, true);
            _ds.displaySimple(closeRedDot, true);
            _ds.displaySimple(needLogin, true);
            _ds.displaySimple(actionType, false);
            return _os;
        }
    public:
        taf::Bool closeBgAnimation;
        taf::Bool openGrowthSystem;
        taf::Bool closeRedDot;
        taf::Bool needLogin;
        taf::Int32 actionType;
    };
    inline bool operator==(const DokiHeadBarInfo&l, const DokiHeadBarInfo&r)
    {
        return l.closeBgAnimation == r.closeBgAnimation && l.openGrowthSystem == r.openGrowthSystem && l.closeRedDot == r.closeRedDot && l.needLogin == r.needLogin && l.actionType == r.actionType;
    }
    inline bool operator!=(const DokiHeadBarInfo&l, const DokiHeadBarInfo&r)
    {
        return !(l == r);
    }

    struct ONARelatedDokiList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONARelatedDokiList";
        }
        static string MD5()
        {
            return "60d7ab7bc04f8b79f024f9236ce31368";
        }
        ONARelatedDokiList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(relatedDokiList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(relatedDokiList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(relatedDokiList,"relatedDokiList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(relatedDokiList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::RelatedDoki> relatedDokiList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONARelatedDokiList&l, const ONARelatedDokiList&r)
    {
        return l.relatedDokiList == r.relatedDokiList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONARelatedDokiList&l, const ONARelatedDokiList&r)
    {
        return !(l == r);
    }

    struct WallPaperHeadInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WallPaperHeadInfo";
        }
        static string MD5()
        {
            return "a2b32b8da7d737c7869bc62f67d13ecd";
        }
        WallPaperHeadInfo()
        :headerType(0),bgImageUrl(""),bgColor(""),titleColorStart(""),titleColorEnd(""),introduction("")
        {
        }
        void resetDefautlt()
        {
            headerType = 0;
            bgImageUrl = "";
            bgColor = "";
            titleColorStart = "";
            titleColorEnd = "";
            introduction = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(headerType, 0);
            _os.write(actorInfo, 1);
            _os.write(bgImageUrl, 2);
            _os.write(bgColor, 3);
            _os.write(titleColorStart, 4);
            _os.write(titleColorEnd, 5);
            _os.write(introduction, 6);
            _os.write(actionBar, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(headerType, 0, true);
            _is.read(actorInfo, 1, true);
            _is.read(bgImageUrl, 2, false);
            _is.read(bgColor, 3, false);
            _is.read(titleColorStart, 4, false);
            _is.read(titleColorEnd, 5, false);
            _is.read(introduction, 6, false);
            _is.read(actionBar, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(headerType,"headerType");
            _ds.display(actorInfo,"actorInfo");
            _ds.display(bgImageUrl,"bgImageUrl");
            _ds.display(bgColor,"bgColor");
            _ds.display(titleColorStart,"titleColorStart");
            _ds.display(titleColorEnd,"titleColorEnd");
            _ds.display(introduction,"introduction");
            _ds.display(actionBar,"actionBar");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(headerType, true);
            _ds.displaySimple(actorInfo, true);
            _ds.displaySimple(bgImageUrl, true);
            _ds.displaySimple(bgColor, true);
            _ds.displaySimple(titleColorStart, true);
            _ds.displaySimple(titleColorEnd, true);
            _ds.displaySimple(introduction, true);
            _ds.displaySimple(actionBar, false);
            return _os;
        }
    public:
        taf::Int32 headerType;
        jce::ActorInfo actorInfo;
        std::string bgImageUrl;
        std::string bgColor;
        std::string titleColorStart;
        std::string titleColorEnd;
        std::string introduction;
        jce::ActionBarInfo actionBar;
    };
    inline bool operator==(const WallPaperHeadInfo&l, const WallPaperHeadInfo&r)
    {
        return l.headerType == r.headerType && l.actorInfo == r.actorInfo && l.bgImageUrl == r.bgImageUrl && l.bgColor == r.bgColor && l.titleColorStart == r.titleColorStart && l.titleColorEnd == r.titleColorEnd && l.introduction == r.introduction && l.actionBar == r.actionBar;
    }
    inline bool operator!=(const WallPaperHeadInfo&l, const WallPaperHeadInfo&r)
    {
        return !(l == r);
    }

    struct DokiWelfareNavRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiWelfareNavRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        DokiWelfareNavRequest()
        :datakey("")
        {
        }
        void resetDefautlt()
        {
            datakey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(datakey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(datakey, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(datakey,"datakey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(datakey, false);
            return _os;
        }
    public:
        std::string datakey;
    };
    inline bool operator==(const DokiWelfareNavRequest&l, const DokiWelfareNavRequest&r)
    {
        return l.datakey == r.datakey;
    }
    inline bool operator!=(const DokiWelfareNavRequest&l, const DokiWelfareNavRequest&r)
    {
        return !(l == r);
    }

    struct DokiWelfareNavResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiWelfareNavResponse";
        }
        static string MD5()
        {
            return "29cea8034a86999c4de7122290f5735e";
        }
        DokiWelfareNavResponse()
        :errCode(0),title("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(tabs, 1);
            _os.write(title, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(tabs, 1, true);
            _is.read(title, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(tabs,"tabs");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(tabs, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::LiveTabModuleInfo> tabs;
        std::string title;
    };
    inline bool operator==(const DokiWelfareNavResponse&l, const DokiWelfareNavResponse&r)
    {
        return l.errCode == r.errCode && l.tabs == r.tabs && l.title == r.title;
    }
    inline bool operator!=(const DokiWelfareNavResponse&l, const DokiWelfareNavResponse&r)
    {
        return !(l == r);
    }

    struct DokiWallPaperPageRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiWallPaperPageRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        DokiWallPaperPageRequest()
        :datakey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            datakey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(datakey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(datakey, 0, true);
            _is.read(pageContext, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(datakey,"datakey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(datakey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string datakey;
        std::string pageContext;
    };
    inline bool operator==(const DokiWallPaperPageRequest&l, const DokiWallPaperPageRequest&r)
    {
        return l.datakey == r.datakey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const DokiWallPaperPageRequest&l, const DokiWallPaperPageRequest&r)
    {
        return !(l == r);
    }

    struct DokiWallPaperPageResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiWallPaperPageResponse";
        }
        static string MD5()
        {
            return "0950c4ced78726ad083ad3ee0a63d2da";
        }
        DokiWallPaperPageResponse()
        :errCode(0),pageContext(""),hasNextPage(true),postDataKey(""),title(""),dokiId(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            postDataKey = "";
            title = "";
            dokiId = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(postDataKey, 4);
            _os.write(title, 5);
            _os.write(dokiId, 6);
            _os.write(wallPaperHeadInfo, 7);
            _os.write(reportKey, 8);
            _os.write(reportParams, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, true);
            _is.read(pageContext, 2, true);
            _is.read(hasNextPage, 3, true);
            _is.read(postDataKey, 4, false);
            _is.read(title, 5, false);
            _is.read(dokiId, 6, false);
            _is.read(wallPaperHeadInfo, 7, false);
            _is.read(reportKey, 8, false);
            _is.read(reportParams, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(postDataKey,"postDataKey");
            _ds.display(title,"title");
            _ds.display(dokiId,"dokiId");
            _ds.display(wallPaperHeadInfo,"wallPaperHeadInfo");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(postDataKey, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(dokiId, true);
            _ds.displaySimple(wallPaperHeadInfo, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
        std::string postDataKey;
        std::string title;
        std::string dokiId;
        jce::WallPaperHeadInfo wallPaperHeadInfo;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const DokiWallPaperPageResponse&l, const DokiWallPaperPageResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.postDataKey == r.postDataKey && l.title == r.title && l.dokiId == r.dokiId && l.wallPaperHeadInfo == r.wallPaperHeadInfo && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const DokiWallPaperPageResponse&l, const DokiWallPaperPageResponse&r)
    {
        return !(l == r);
    }

    struct DokiPicWallPaperItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiPicWallPaperItem";
        }
        static string MD5()
        {
            return "cdba121e30b4b2c59a6cd3e53ff4199e";
        }
        DokiPicWallPaperItem()
        :wallpaperDataKey(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            wallpaperDataKey = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageInfo, 0);
            _os.write(userInfo, 1);
            _os.write(wallpaperDataKey, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
            _os.write(action, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageInfo, 0, true);
            _is.read(userInfo, 1, false);
            _is.read(wallpaperDataKey, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
            _is.read(action, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageInfo,"imageInfo");
            _ds.display(userInfo,"userInfo");
            _ds.display(wallpaperDataKey,"wallpaperDataKey");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageInfo, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(wallpaperDataKey, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        jce::CircleMsgImageUrl imageInfo;
        jce::ActorInfo userInfo;
        std::string wallpaperDataKey;
        std::string reportKey;
        std::string reportParams;
        jce::Action action;
    };
    inline bool operator==(const DokiPicWallPaperItem&l, const DokiPicWallPaperItem&r)
    {
        return l.imageInfo == r.imageInfo && l.userInfo == r.userInfo && l.wallpaperDataKey == r.wallpaperDataKey && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.action == r.action;
    }
    inline bool operator!=(const DokiPicWallPaperItem&l, const DokiPicWallPaperItem&r)
    {
        return !(l == r);
    }

    struct DokiLiveWallpaperItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiLiveWallpaperItem";
        }
        static string MD5()
        {
            return "5d8aa9847b3e758dffc855e85b736c30";
        }
        DokiLiveWallpaperItem()
        :preViewGifUrl(""),liveWallpaperDataKey(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            preViewGifUrl = "";
            liveWallpaperDataKey = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(videoInfo, 0);
            _os.write(preViewGifUrl, 1);
            _os.write(userInfo, 2);
            _os.write(liveWallpaperDataKey, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
            _os.write(action, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(videoInfo, 0, true);
            _is.read(preViewGifUrl, 1, false);
            _is.read(userInfo, 2, false);
            _is.read(liveWallpaperDataKey, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
            _is.read(action, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(videoInfo,"videoInfo");
            _ds.display(preViewGifUrl,"preViewGifUrl");
            _ds.display(userInfo,"userInfo");
            _ds.display(liveWallpaperDataKey,"liveWallpaperDataKey");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(videoInfo, true);
            _ds.displaySimple(preViewGifUrl, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(liveWallpaperDataKey, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        jce::CircleShortVideoUrl videoInfo;
        std::string preViewGifUrl;
        jce::ActorInfo userInfo;
        std::string liveWallpaperDataKey;
        std::string reportKey;
        std::string reportParams;
        jce::Action action;
    };
    inline bool operator==(const DokiLiveWallpaperItem&l, const DokiLiveWallpaperItem&r)
    {
        return l.videoInfo == r.videoInfo && l.preViewGifUrl == r.preViewGifUrl && l.userInfo == r.userInfo && l.liveWallpaperDataKey == r.liveWallpaperDataKey && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.action == r.action;
    }
    inline bool operator!=(const DokiLiveWallpaperItem&l, const DokiLiveWallpaperItem&r)
    {
        return !(l == r);
    }

    struct DokiWallPaperItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiWallPaperItem";
        }
        static string MD5()
        {
            return "bd3b8a3378662c4845a2403fef3f36cf";
        }
        DokiWallPaperItem()
        :downloadTimes(""),wallPaperId("")
        {
        }
        void resetDefautlt()
        {
            downloadTimes = "";
            wallPaperId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(picWallpaperItem, 0);
            _os.write(liveWallpaperItem, 1);
            _os.write(downloadTimes, 2);
            _os.write(shareItem, 3);
            _os.write(marklabels, 4);
            _os.write(wallPaperId, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(picWallpaperItem, 0, false);
            _is.read(liveWallpaperItem, 1, false);
            _is.read(downloadTimes, 2, false);
            _is.read(shareItem, 3, false);
            _is.read(marklabels, 4, false);
            _is.read(wallPaperId, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(picWallpaperItem,"picWallpaperItem");
            _ds.display(liveWallpaperItem,"liveWallpaperItem");
            _ds.display(downloadTimes,"downloadTimes");
            _ds.display(shareItem,"shareItem");
            _ds.display(marklabels,"marklabels");
            _ds.display(wallPaperId,"wallPaperId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(picWallpaperItem, true);
            _ds.displaySimple(liveWallpaperItem, true);
            _ds.displaySimple(downloadTimes, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(marklabels, true);
            _ds.displaySimple(wallPaperId, false);
            return _os;
        }
    public:
        jce::DokiPicWallPaperItem picWallpaperItem;
        jce::DokiLiveWallpaperItem liveWallpaperItem;
        std::string downloadTimes;
        jce::ShareItem shareItem;
        vector<jce::MarkLabel> marklabels;
        std::string wallPaperId;
    };
    inline bool operator==(const DokiWallPaperItem&l, const DokiWallPaperItem&r)
    {
        return l.picWallpaperItem == r.picWallpaperItem && l.liveWallpaperItem == r.liveWallpaperItem && l.downloadTimes == r.downloadTimes && l.shareItem == r.shareItem && l.marklabels == r.marklabels && l.wallPaperId == r.wallPaperId;
    }
    inline bool operator!=(const DokiWallPaperItem&l, const DokiWallPaperItem&r)
    {
        return !(l == r);
    }

    struct ONADokiWallPaperItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiWallPaperItem";
        }
        static string MD5()
        {
            return "c1bf2342a2eb34f1fff1e4d2cc8a24ee";
        }
        ONADokiWallPaperItem()
        :showUserInfo(true),reportKey(""),reportParams(""),backgroundType(0)
        {
        }
        void resetDefautlt()
        {
            showUserInfo = true;
            reportKey = "";
            reportParams = "";
            backgroundType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(wallpaper, 0);
            _os.write(showUserInfo, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
            _os.write(backgroundType, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(wallpaper, 0, true);
            _is.read(showUserInfo, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
            _is.read(backgroundType, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(wallpaper,"wallpaper");
            _ds.display(showUserInfo,"showUserInfo");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(backgroundType,"backgroundType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(wallpaper, true);
            _ds.displaySimple(showUserInfo, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(backgroundType, false);
            return _os;
        }
    public:
        jce::DokiWallPaperItem wallpaper;
        taf::Bool showUserInfo;
        std::string reportKey;
        std::string reportParams;
        taf::Int32 backgroundType;
    };
    inline bool operator==(const ONADokiWallPaperItem&l, const ONADokiWallPaperItem&r)
    {
        return l.wallpaper == r.wallpaper && l.showUserInfo == r.showUserInfo && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.backgroundType == r.backgroundType;
    }
    inline bool operator!=(const ONADokiWallPaperItem&l, const ONADokiWallPaperItem&r)
    {
        return !(l == r);
    }

    struct ONADokiWallPaperList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiWallPaperList";
        }
        static string MD5()
        {
            return "2d3fd3f7fd02dad1ecc642e5d43e6020";
        }
        ONADokiWallPaperList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(wallpaperList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(wallpaperList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(wallpaperList,"wallpaperList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(wallpaperList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::ONADokiWallPaperItem> wallpaperList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONADokiWallPaperList&l, const ONADokiWallPaperList&r)
    {
        return l.wallpaperList == r.wallpaperList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONADokiWallPaperList&l, const ONADokiWallPaperList&r)
    {
        return !(l == r);
    }

    struct ONADokiWallPaperScrollableList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiWallPaperScrollableList";
        }
        static string MD5()
        {
            return "26eda4d5a89b679fc8ddce46e24d642a";
        }
        ONADokiWallPaperScrollableList()
        :reportKey(""),reportParams(""),uiType(0)
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(wallpaperList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
            _os.write(uiType, 3);
            _os.write(uiPadding, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(wallpaperList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
            _is.read(uiType, 3, false);
            _is.read(uiPadding, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(wallpaperList,"wallpaperList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(uiType,"uiType");
            _ds.display(uiPadding,"uiPadding");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(wallpaperList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(uiPadding, false);
            return _os;
        }
    public:
        vector<jce::ONADokiWallPaperItem> wallpaperList;
        std::string reportKey;
        std::string reportParams;
        taf::Int32 uiType;
        jce::UIPadding uiPadding;
    };
    inline bool operator==(const ONADokiWallPaperScrollableList&l, const ONADokiWallPaperScrollableList&r)
    {
        return l.wallpaperList == r.wallpaperList && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.uiType == r.uiType && l.uiPadding == r.uiPadding;
    }
    inline bool operator!=(const ONADokiWallPaperScrollableList&l, const ONADokiWallPaperScrollableList&r)
    {
        return !(l == r);
    }

    struct WallPaperQueryRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WallPaperQueryRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        WallPaperQueryRequest()
        :datekey("")
        {
        }
        void resetDefautlt()
        {
            datekey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(datekey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(datekey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(datekey,"datekey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(datekey, false);
            return _os;
        }
    public:
        std::string datekey;
    };
    inline bool operator==(const WallPaperQueryRequest&l, const WallPaperQueryRequest&r)
    {
        return l.datekey == r.datekey;
    }
    inline bool operator!=(const WallPaperQueryRequest&l, const WallPaperQueryRequest&r)
    {
        return !(l == r);
    }

    struct WallPaperQueryResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WallPaperQueryResponse";
        }
        static string MD5()
        {
            return "fbb4c79dd026e25e46401356f08e5858";
        }
        WallPaperQueryResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(wallpaper, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(wallpaper, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(wallpaper,"wallpaper");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(wallpaper, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::DokiWallPaperItem wallpaper;
    };
    inline bool operator==(const WallPaperQueryResponse&l, const WallPaperQueryResponse&r)
    {
        return l.errCode == r.errCode && l.wallpaper == r.wallpaper;
    }
    inline bool operator!=(const WallPaperQueryResponse&l, const WallPaperQueryResponse&r)
    {
        return !(l == r);
    }

    struct DokiHomePageExtendDataRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiHomePageExtendDataRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        DokiHomePageExtendDataRequest()
        :type(""),dataKey("")
        {
        }
        void resetDefautlt()
        {
            type = "";
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(dataKey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(dataKey, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string type;
        std::string dataKey;
    };
    inline bool operator==(const DokiHomePageExtendDataRequest&l, const DokiHomePageExtendDataRequest&r)
    {
        return l.type == r.type && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const DokiHomePageExtendDataRequest&l, const DokiHomePageExtendDataRequest&r)
    {
        return !(l == r);
    }

    struct DokiHomePageExtendDataResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiHomePageExtendDataResponse";
        }
        static string MD5()
        {
            return "5f3d43cefdcff1de2463b8cdc371a718";
        }
        DokiHomePageExtendDataResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(introductionVideo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(introductionVideo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(introductionVideo,"introductionVideo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(introductionVideo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::ONABulletinBoardV2 introductionVideo;
    };
    inline bool operator==(const DokiHomePageExtendDataResponse&l, const DokiHomePageExtendDataResponse&r)
    {
        return l.errCode == r.errCode && l.introductionVideo == r.introductionVideo;
    }
    inline bool operator!=(const DokiHomePageExtendDataResponse&l, const DokiHomePageExtendDataResponse&r)
    {
        return !(l == r);
    }

    struct WallPaperListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WallPaperListRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        WallPaperListRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const WallPaperListRequest&l, const WallPaperListRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const WallPaperListRequest&l, const WallPaperListRequest&r)
    {
        return !(l == r);
    }

    struct WallPaperListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WallPaperListResponse";
        }
        static string MD5()
        {
            return "e2ad74c5ece1316215fedefefe3552fb";
        }
        WallPaperListResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(wallpaperList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(wallpaperList, 1, false);
            _is.read(pageContext, 2, true);
            _is.read(hasNextPage, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(wallpaperList,"wallpaperList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(wallpaperList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::ONADokiWallPaperItem> wallpaperList;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const WallPaperListResponse&l, const WallPaperListResponse&r)
    {
        return l.errCode == r.errCode && l.wallpaperList == r.wallpaperList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const WallPaperListResponse&l, const WallPaperListResponse&r)
    {
        return !(l == r);
    }

    struct DokiTopTenFeedListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiTopTenFeedListRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        DokiTopTenFeedListRequest()
        :datakey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            datakey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(datakey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(datakey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(datakey,"datakey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(datakey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string datakey;
        std::string pageContext;
    };
    inline bool operator==(const DokiTopTenFeedListRequest&l, const DokiTopTenFeedListRequest&r)
    {
        return l.datakey == r.datakey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const DokiTopTenFeedListRequest&l, const DokiTopTenFeedListRequest&r)
    {
        return !(l == r);
    }

    struct DokiTopTenFeedListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiTopTenFeedListResponse";
        }
        static string MD5()
        {
            return "8e20d544570fc1e65bbb5ca7673ea635";
        }
        DokiTopTenFeedListResponse()
        :errCode(0),pageContext(""),isHaveNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            isHaveNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(newsList, 1);
            _os.write(pageContext, 2);
            _os.write(isHaveNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(newsList, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(isHaveNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(newsList,"newsList");
            _ds.display(pageContext,"pageContext");
            _ds.display(isHaveNextPage,"isHaveNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(newsList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isHaveNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> newsList;
        std::string pageContext;
        taf::Bool isHaveNextPage;
    };
    inline bool operator==(const DokiTopTenFeedListResponse&l, const DokiTopTenFeedListResponse&r)
    {
        return l.errCode == r.errCode && l.newsList == r.newsList && l.pageContext == r.pageContext && l.isHaveNextPage == r.isHaveNextPage;
    }
    inline bool operator!=(const DokiTopTenFeedListResponse&l, const DokiTopTenFeedListResponse&r)
    {
        return !(l == r);
    }

    struct DokiInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiInfo";
        }
        static string MD5()
        {
            return "333e37222d1d0ba59e94e93c9d651ced";
        }
        DokiInfo()
        :followState(0)
        {
        }
        void resetDefautlt()
        {
            followState = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actorInfo, 0);
            _os.write(followState, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actorInfo, 0, true);
            _is.read(followState, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actorInfo,"actorInfo");
            _ds.display(followState,"followState");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actorInfo, true);
            _ds.displaySimple(followState, false);
            return _os;
        }
    public:
        jce::ActorInfo actorInfo;
        taf::Int32 followState;
    };
    inline bool operator==(const DokiInfo&l, const DokiInfo&r)
    {
        return l.actorInfo == r.actorInfo && l.followState == r.followState;
    }
    inline bool operator!=(const DokiInfo&l, const DokiInfo&r)
    {
        return !(l == r);
    }

    struct QueryDokiFollowListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QueryDokiFollowListRequest";
        }
        static string MD5()
        {
            return "977455e6e9ccc972fb28a83288f7e564";
        }
        QueryDokiFollowListRequest()
        :userId(""),dokiType(0),sortFlag(0),scene(0),needFollowState(0),pageContext("")
        {
        }
        void resetDefautlt()
        {
            userId = "";
            dokiType = 0;
            sortFlag = 0;
            scene = 0;
            needFollowState = 0;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(userId, 0);
            _os.write(dokiType, 1);
            _os.write(sortFlag, 2);
            _os.write(scene, 3);
            _os.write(needFollowState, 4);
            _os.write(pageContext, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(userId, 0, true);
            _is.read(dokiType, 1, false);
            _is.read(sortFlag, 2, false);
            _is.read(scene, 3, false);
            _is.read(needFollowState, 4, false);
            _is.read(pageContext, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(userId,"userId");
            _ds.display(dokiType,"dokiType");
            _ds.display(sortFlag,"sortFlag");
            _ds.display(scene,"scene");
            _ds.display(needFollowState,"needFollowState");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(userId, true);
            _ds.displaySimple(dokiType, true);
            _ds.displaySimple(sortFlag, true);
            _ds.displaySimple(scene, true);
            _ds.displaySimple(needFollowState, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string userId;
        taf::Int32 dokiType;
        taf::Int32 sortFlag;
        taf::Int32 scene;
        taf::Int32 needFollowState;
        std::string pageContext;
    };
    inline bool operator==(const QueryDokiFollowListRequest&l, const QueryDokiFollowListRequest&r)
    {
        return l.userId == r.userId && l.dokiType == r.dokiType && l.sortFlag == r.sortFlag && l.scene == r.scene && l.needFollowState == r.needFollowState && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const QueryDokiFollowListRequest&l, const QueryDokiFollowListRequest&r)
    {
        return !(l == r);
    }

    struct QueryDokiFollowListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QueryDokiFollowListResponse";
        }
        static string MD5()
        {
            return "b100aad68a265dd23a229fe805858320";
        }
        QueryDokiFollowListResponse()
        :errCode(0),pageContext(""),isHasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            isHasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(dataList, 1);
            _os.write(pageContext, 2);
            _os.write(isHasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(dataList, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(isHasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(dataList,"dataList");
            _ds.display(pageContext,"pageContext");
            _ds.display(isHasNextPage,"isHasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(dataList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isHasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::DokiInfo> dataList;
        std::string pageContext;
        taf::Bool isHasNextPage;
    };
    inline bool operator==(const QueryDokiFollowListResponse&l, const QueryDokiFollowListResponse&r)
    {
        return l.errCode == r.errCode && l.dataList == r.dataList && l.pageContext == r.pageContext && l.isHasNextPage == r.isHasNextPage;
    }
    inline bool operator!=(const QueryDokiFollowListResponse&l, const QueryDokiFollowListResponse&r)
    {
        return !(l == r);
    }

    struct DokiEmoticonItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiEmoticonItem";
        }
        static string MD5()
        {
            return "da6f984411299d75394bd00a8b81c25c";
        }
        DokiEmoticonItem()
        :url(""),isGif(true),feedId(""),opeartionDataKey(""),EmoticonId("")
        {
        }
        void resetDefautlt()
        {
            url = "";
            isGif = true;
            feedId = "";
            opeartionDataKey = "";
            EmoticonId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(url, 0);
            _os.write(isGif, 1);
            _os.write(feedId, 2);
            _os.write(userInfo, 3);
            _os.write(opeartionDataKey, 4);
            _os.write(EmoticonId, 5);
            _os.write(action, 6);
            _os.write(shareItem, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(url, 0, true);
            _is.read(isGif, 1, false);
            _is.read(feedId, 2, false);
            _is.read(userInfo, 3, false);
            _is.read(opeartionDataKey, 4, false);
            _is.read(EmoticonId, 5, false);
            _is.read(action, 6, false);
            _is.read(shareItem, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(url,"url");
            _ds.display(isGif,"isGif");
            _ds.display(feedId,"feedId");
            _ds.display(userInfo,"userInfo");
            _ds.display(opeartionDataKey,"opeartionDataKey");
            _ds.display(EmoticonId,"EmoticonId");
            _ds.display(action,"action");
            _ds.display(shareItem,"shareItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(url, true);
            _ds.displaySimple(isGif, true);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(opeartionDataKey, true);
            _ds.displaySimple(EmoticonId, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(shareItem, false);
            return _os;
        }
    public:
        std::string url;
        taf::Bool isGif;
        std::string feedId;
        jce::ActorInfo userInfo;
        std::string opeartionDataKey;
        std::string EmoticonId;
        jce::Action action;
        jce::ShareItem shareItem;
    };
    inline bool operator==(const DokiEmoticonItem&l, const DokiEmoticonItem&r)
    {
        return l.url == r.url && l.isGif == r.isGif && l.feedId == r.feedId && l.userInfo == r.userInfo && l.opeartionDataKey == r.opeartionDataKey && l.EmoticonId == r.EmoticonId && l.action == r.action && l.shareItem == r.shareItem;
    }
    inline bool operator!=(const DokiEmoticonItem&l, const DokiEmoticonItem&r)
    {
        return !(l == r);
    }

    struct ONADokiEmoticonItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiEmoticonItem";
        }
        static string MD5()
        {
            return "4f54433926b447aa55784c0be0cabe56";
        }
        ONADokiEmoticonItem()
        :reportKey(""),reportParams(""),backgroundType(0)
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            backgroundType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(data, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
            _os.write(backgroundType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(data, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
            _is.read(backgroundType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(data,"data");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(backgroundType,"backgroundType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(data, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(backgroundType, false);
            return _os;
        }
    public:
        jce::DokiEmoticonItem data;
        std::string reportKey;
        std::string reportParams;
        taf::Int32 backgroundType;
    };
    inline bool operator==(const ONADokiEmoticonItem&l, const ONADokiEmoticonItem&r)
    {
        return l.data == r.data && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.backgroundType == r.backgroundType;
    }
    inline bool operator!=(const ONADokiEmoticonItem&l, const ONADokiEmoticonItem&r)
    {
        return !(l == r);
    }

    struct ONADokiEmoticonList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiEmoticonList";
        }
        static string MD5()
        {
            return "2fea14e2072e5d7637c9ded327c2bf73";
        }
        ONADokiEmoticonList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(emoticonList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(emoticonList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(emoticonList,"emoticonList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(emoticonList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::ONADokiEmoticonItem> emoticonList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONADokiEmoticonList&l, const ONADokiEmoticonList&r)
    {
        return l.emoticonList == r.emoticonList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONADokiEmoticonList&l, const ONADokiEmoticonList&r)
    {
        return !(l == r);
    }

    struct StarThemeUIItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarThemeUIItem";
        }
        static string MD5()
        {
            return "8f8cbeb922fc31c245a5fcc178ec7d39";
        }
        StarThemeUIItem()
        :bgUrl(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            bgUrl = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(urls, 0);
            _os.write(bgUrl, 1);
            _os.write(action, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(urls, 0, true);
            _is.read(bgUrl, 1, true);
            _is.read(action, 2, true);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(urls,"urls");
            _ds.display(bgUrl,"bgUrl");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(urls, true);
            _ds.displaySimple(bgUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<std::string> urls;
        std::string bgUrl;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const StarThemeUIItem&l, const StarThemeUIItem&r)
    {
        return l.urls == r.urls && l.bgUrl == r.bgUrl && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const StarThemeUIItem&l, const StarThemeUIItem&r)
    {
        return !(l == r);
    }

    struct ONADokiStarTheme : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiStarTheme";
        }
        static string MD5()
        {
            return "d22851bc4e24f61ea830952fb69ec743";
        }
        ONADokiStarTheme()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starThemeList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starThemeList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starThemeList,"starThemeList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starThemeList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::StarThemeUIItem> starThemeList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONADokiStarTheme&l, const ONADokiStarTheme&r)
    {
        return l.starThemeList == r.starThemeList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONADokiStarTheme&l, const ONADokiStarTheme&r)
    {
        return !(l == r);
    }

    struct DokiEmoticonGroupPageRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiEmoticonGroupPageRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        DokiEmoticonGroupPageRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const DokiEmoticonGroupPageRequest&l, const DokiEmoticonGroupPageRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const DokiEmoticonGroupPageRequest&l, const DokiEmoticonGroupPageRequest&r)
    {
        return !(l == r);
    }

    struct DokiEmoticonGroupPageResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiEmoticonGroupPageResponse";
        }
        static string MD5()
        {
            return "ad84605aa73491ad1d4df9f463d573b5";
        }
        DokiEmoticonGroupPageResponse()
        :errCode(0),pageContext(""),hasNextPage(true),title("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(title, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, true);
            _is.read(pageContext, 2, true);
            _is.read(hasNextPage, 3, true);
            _is.read(title, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
        std::string title;
    };
    inline bool operator==(const DokiEmoticonGroupPageResponse&l, const DokiEmoticonGroupPageResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.title == r.title;
    }
    inline bool operator!=(const DokiEmoticonGroupPageResponse&l, const DokiEmoticonGroupPageResponse&r)
    {
        return !(l == r);
    }

    struct ONADokiLiveBroadcast : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiLiveBroadcast";
        }
        static string MD5()
        {
            return "e645fe230ef0ea862353f21b720abf95";
        }
        ONADokiLiveBroadcast()
        :liveStatus(0),title(""),subTitle(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            liveStatus = 0;
            title = "";
            subTitle = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(liveStatus, 0);
            _os.write(iconList, 1);
            _os.write(title, 2);
            _os.write(subTitle, 3);
            _os.write(liveAction, 4);
            _os.write(attentItemData, 5);
            _os.write(reportKey, 6);
            _os.write(reportParams, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(liveStatus, 0, true);
            _is.read(iconList, 1, false);
            _is.read(title, 2, false);
            _is.read(subTitle, 3, false);
            _is.read(liveAction, 4, false);
            _is.read(attentItemData, 5, false);
            _is.read(reportKey, 6, false);
            _is.read(reportParams, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(liveStatus,"liveStatus");
            _ds.display(iconList,"iconList");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(liveAction,"liveAction");
            _ds.display(attentItemData,"attentItemData");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(liveStatus, true);
            _ds.displaySimple(iconList, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(liveAction, true);
            _ds.displaySimple(attentItemData, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 liveStatus;
        vector<std::string> iconList;
        std::string title;
        std::string subTitle;
        jce::Action liveAction;
        jce::VideoAttentItem attentItemData;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONADokiLiveBroadcast&l, const ONADokiLiveBroadcast&r)
    {
        return l.liveStatus == r.liveStatus && l.iconList == r.iconList && l.title == r.title && l.subTitle == r.subTitle && l.liveAction == r.liveAction && l.attentItemData == r.attentItemData && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONADokiLiveBroadcast&l, const ONADokiLiveBroadcast&r)
    {
        return !(l == r);
    }

    struct ONADokiActivityInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiActivityInfo";
        }
        static string MD5()
        {
            return "2cf1a30e57c3206d57ea2453163b961c";
        }
        ONADokiActivityInfo()
        :activityType(0),frontImage(""),bgImage(""),durationTips(""),title(""),subTitle(""),hintTips(""),requireTotalCount(0),curJoinCount(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            activityType = 0;
            frontImage = "";
            bgImage = "";
            durationTips = "";
            title = "";
            subTitle = "";
            hintTips = "";
            requireTotalCount = 0;
            curJoinCount = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(activityType, 0);
            _os.write(frontImage, 1);
            _os.write(bgImage, 2);
            _os.write(durationTips, 3);
            _os.write(durationBgColors, 4);
            _os.write(title, 5);
            _os.write(subTitle, 6);
            _os.write(hintTips, 7);
            _os.write(requireTotalCount, 8);
            _os.write(curJoinCount, 9);
            _os.write(processColors, 10);
            _os.write(activityAction, 11);
            _os.write(reportKey, 12);
            _os.write(reportParams, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(activityType, 0, true);
            _is.read(frontImage, 1, false);
            _is.read(bgImage, 2, false);
            _is.read(durationTips, 3, false);
            _is.read(durationBgColors, 4, false);
            _is.read(title, 5, false);
            _is.read(subTitle, 6, false);
            _is.read(hintTips, 7, false);
            _is.read(requireTotalCount, 8, false);
            _is.read(curJoinCount, 9, false);
            _is.read(processColors, 10, false);
            _is.read(activityAction, 11, false);
            _is.read(reportKey, 12, false);
            _is.read(reportParams, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(activityType,"activityType");
            _ds.display(frontImage,"frontImage");
            _ds.display(bgImage,"bgImage");
            _ds.display(durationTips,"durationTips");
            _ds.display(durationBgColors,"durationBgColors");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(hintTips,"hintTips");
            _ds.display(requireTotalCount,"requireTotalCount");
            _ds.display(curJoinCount,"curJoinCount");
            _ds.display(processColors,"processColors");
            _ds.display(activityAction,"activityAction");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(activityType, true);
            _ds.displaySimple(frontImage, true);
            _ds.displaySimple(bgImage, true);
            _ds.displaySimple(durationTips, true);
            _ds.displaySimple(durationBgColors, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(hintTips, true);
            _ds.displaySimple(requireTotalCount, true);
            _ds.displaySimple(curJoinCount, true);
            _ds.displaySimple(processColors, true);
            _ds.displaySimple(activityAction, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 activityType;
        std::string frontImage;
        std::string bgImage;
        std::string durationTips;
        vector<std::string> durationBgColors;
        std::string title;
        std::string subTitle;
        std::string hintTips;
        taf::Int64 requireTotalCount;
        taf::Int64 curJoinCount;
        vector<std::string> processColors;
        jce::Action activityAction;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONADokiActivityInfo&l, const ONADokiActivityInfo&r)
    {
        return l.activityType == r.activityType && l.frontImage == r.frontImage && l.bgImage == r.bgImage && l.durationTips == r.durationTips && l.durationBgColors == r.durationBgColors && l.title == r.title && l.subTitle == r.subTitle && l.hintTips == r.hintTips && l.requireTotalCount == r.requireTotalCount && l.curJoinCount == r.curJoinCount && l.processColors == r.processColors && l.activityAction == r.activityAction && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONADokiActivityInfo&l, const ONADokiActivityInfo&r)
    {
        return !(l == r);
    }

    struct DokiAdminDataRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiAdminDataRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        DokiAdminDataRequest()
        :dokiId("")
        {
        }
        void resetDefautlt()
        {
            dokiId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dokiId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dokiId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dokiId,"dokiId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dokiId, false);
            return _os;
        }
    public:
        std::string dokiId;
    };
    inline bool operator==(const DokiAdminDataRequest&l, const DokiAdminDataRequest&r)
    {
        return l.dokiId == r.dokiId;
    }
    inline bool operator!=(const DokiAdminDataRequest&l, const DokiAdminDataRequest&r)
    {
        return !(l == r);
    }

    struct DokiAdminDataResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiAdminDataResponse";
        }
        static string MD5()
        {
            return "ebcd863f9724a8f4b857336bbeae19d7";
        }
        DokiAdminDataResponse()
        :errCode(0),adminEntryTips(""),msgCount(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            adminEntryTips = "";
            msgCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(adminEntryTips, 1);
            _os.write(adminEntryAction, 2);
            _os.write(msgCount, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(adminEntryTips, 1, false);
            _is.read(adminEntryAction, 2, false);
            _is.read(msgCount, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(adminEntryTips,"adminEntryTips");
            _ds.display(adminEntryAction,"adminEntryAction");
            _ds.display(msgCount,"msgCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(adminEntryTips, true);
            _ds.displaySimple(adminEntryAction, true);
            _ds.displaySimple(msgCount, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string adminEntryTips;
        jce::Action adminEntryAction;
        taf::Int32 msgCount;
    };
    inline bool operator==(const DokiAdminDataResponse&l, const DokiAdminDataResponse&r)
    {
        return l.errCode == r.errCode && l.adminEntryTips == r.adminEntryTips && l.adminEntryAction == r.adminEntryAction && l.msgCount == r.msgCount;
    }
    inline bool operator!=(const DokiAdminDataResponse&l, const DokiAdminDataResponse&r)
    {
        return !(l == r);
    }

    struct DokiAdminFeedListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiAdminFeedListRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        DokiAdminFeedListRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, false);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const DokiAdminFeedListRequest&l, const DokiAdminFeedListRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const DokiAdminFeedListRequest&l, const DokiAdminFeedListRequest&r)
    {
        return !(l == r);
    }

    struct DokiAdminFeedListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiAdminFeedListResponse";
        }
        static string MD5()
        {
            return "8e20d544570fc1e65bbb5ca7673ea635";
        }
        DokiAdminFeedListResponse()
        :errCode(0),pageContext(""),isHaveNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            isHaveNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(feedList, 1);
            _os.write(pageContext, 2);
            _os.write(isHaveNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(feedList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(isHaveNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(feedList,"feedList");
            _ds.display(pageContext,"pageContext");
            _ds.display(isHaveNextPage,"isHaveNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(feedList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isHaveNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> feedList;
        std::string pageContext;
        taf::Bool isHaveNextPage;
    };
    inline bool operator==(const DokiAdminFeedListResponse&l, const DokiAdminFeedListResponse&r)
    {
        return l.errCode == r.errCode && l.feedList == r.feedList && l.pageContext == r.pageContext && l.isHaveNextPage == r.isHaveNextPage;
    }
    inline bool operator!=(const DokiAdminFeedListResponse&l, const DokiAdminFeedListResponse&r)
    {
        return !(l == r);
    }

    struct DokiEmotionTabPageRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiEmotionTabPageRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        DokiEmotionTabPageRequest()
        :datakey("")
        {
        }
        void resetDefautlt()
        {
            datakey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(datakey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(datakey, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(datakey,"datakey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(datakey, false);
            return _os;
        }
    public:
        std::string datakey;
    };
    inline bool operator==(const DokiEmotionTabPageRequest&l, const DokiEmotionTabPageRequest&r)
    {
        return l.datakey == r.datakey;
    }
    inline bool operator!=(const DokiEmotionTabPageRequest&l, const DokiEmotionTabPageRequest&r)
    {
        return !(l == r);
    }

    struct DokiEmotionTabPageResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiEmotionTabPageResponse";
        }
        static string MD5()
        {
            return "78c3a7da41581faad8155de23c5a5ea6";
        }
        DokiEmotionTabPageResponse()
        :errCode(0),title(""),postDataKey(""),dokiId("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            title = "";
            postDataKey = "";
            dokiId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(tabs, 1);
            _os.write(title, 2);
            _os.write(postDataKey, 3);
            _os.write(dokiId, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(tabs, 1, false);
            _is.read(title, 2, false);
            _is.read(postDataKey, 3, false);
            _is.read(dokiId, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(tabs,"tabs");
            _ds.display(title,"title");
            _ds.display(postDataKey,"postDataKey");
            _ds.display(dokiId,"dokiId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(tabs, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(postDataKey, true);
            _ds.displaySimple(dokiId, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::LiveTabModuleInfo> tabs;
        std::string title;
        std::string postDataKey;
        std::string dokiId;
    };
    inline bool operator==(const DokiEmotionTabPageResponse&l, const DokiEmotionTabPageResponse&r)
    {
        return l.errCode == r.errCode && l.tabs == r.tabs && l.title == r.title && l.postDataKey == r.postDataKey && l.dokiId == r.dokiId;
    }
    inline bool operator!=(const DokiEmotionTabPageResponse&l, const DokiEmotionTabPageResponse&r)
    {
        return !(l == r);
    }


}

#define jce_FantuanLongVideo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strWebPlayUrl,b.strWebPlayUrl);

#define jce_FanTuanFollowItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fanTuanId,b.fanTuanId);jce_copy_struct(a.status,b.status);jce_copy_struct(a.signCount,b.signCount);

#define jce_FanTuanRankItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.popularityNum,b.popularityNum);jce_copy_struct(a.rankGroupName,b.rankGroupName);jce_copy_struct(a.rankStatus,b.rankStatus);jce_copy_struct(a.rankIndex,b.rankIndex);jce_copy_struct(a.rankNameColor,b.rankNameColor);

#define jce_FanTuanCommentParentItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.primaryId,b.primaryId);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.content,b.content);jce_copy_struct(a.photos,b.photos);jce_copy_struct(a.videos,b.videos);

#define jce_FanTuanCommentItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commentId,b.commentId);jce_copy_struct(a.rootFeedId,b.rootFeedId);jce_copy_struct(a.fanTuanId,b.fanTuanId);jce_copy_struct(a.parentItem,b.parentItem);jce_copy_struct(a.content,b.content);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.floor,b.floor);jce_copy_struct(a.pubTime,b.pubTime);jce_copy_struct(a.commentNum,b.commentNum);jce_copy_struct(a.upNum,b.upNum);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.photos,b.photos);jce_copy_struct(a.videos,b.videos);jce_copy_struct(a.action,b.action);jce_copy_struct(a.fanTuanInfo,b.fanTuanInfo);

#define jce_FanTuanDefaultMessage_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.description,b.description);jce_copy_struct(a.actorInfo,b.actorInfo);

#define jce_FanTuanMessageItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.msgType,b.msgType);jce_copy_struct(a.msgId,b.msgId);jce_copy_struct(a.commentItem,b.commentItem);jce_copy_struct(a.defaultMessage,b.defaultMessage);jce_copy_struct(a.time,b.time);jce_copy_struct(a.action,b.action);

#define jce_FanTuanExtInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwFrom,b.dwFrom);jce_copy_struct(a.strExtInfo,b.strExtInfo);jce_copy_struct(a.starInfo,b.starInfo);jce_copy_struct(a.videoInfo,b.videoInfo);

#define jce_DokiHeadExtraInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);

#define jce_FanTuanActionBarsInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.rankBar,b.rankBar);jce_copy_struct(a.fansBar,b.fansBar);jce_copy_struct(a.presentBar,b.presentBar);jce_copy_struct(a.taskBar,b.taskBar);jce_copy_struct(a.updateInfoBar,b.updateInfoBar);jce_copy_struct(a.extraBars,b.extraBars);

#define jce_ONAFanTuanGrid_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.flag,b.flag);

#define jce_ONAFanTuanRankList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fanTuanRankList,b.fanTuanRankList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_FanTuanFeedSource_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.FtVideoInfo,b.FtVideoInfo);jce_copy_struct(a.attentKey,b.attentKey);

#define jce_ONAFanTuanFeed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.title,b.title);jce_copy_struct(a.content,b.content);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.pubTime,b.pubTime);jce_copy_struct(a.commentNum,b.commentNum);jce_copy_struct(a.upNum,b.upNum);jce_copy_struct(a.hot,b.hot);jce_copy_struct(a.top,b.top);jce_copy_struct(a.essence,b.essence);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.photos,b.photos);jce_copy_struct(a.videos,b.videos);jce_copy_struct(a.fanTuanInfo,b.fanTuanInfo);jce_copy_struct(a.action,b.action);jce_copy_struct(a.updateTime,b.updateTime);jce_copy_struct(a.status,b.status);jce_copy_struct(a.miniVideos,b.miniVideos);jce_copy_struct(a.feedType,b.feedType);jce_copy_struct(a.bulletinBoard,b.bulletinBoard);jce_copy_struct(a.galleryPoster,b.galleryPoster);jce_copy_struct(a.attendStatus,b.attendStatus);jce_copy_struct(a.userActions,b.userActions);jce_copy_struct(a.isRecommend,b.isRecommend);jce_copy_struct(a.bulletinBoardV2,b.bulletinBoardV2);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.topTagText,b.topTagText);jce_copy_struct(a.isLike,b.isLike);jce_copy_struct(a.voteId,b.voteId);jce_copy_struct(a.vecStartInfo,b.vecStartInfo);jce_copy_struct(a.mapAttendStatus,b.mapAttendStatus);jce_copy_struct(a.feedSource,b.feedSource);

#define jce_ONAFanTuanRankItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fanTuanRankItem,b.fanTuanRankItem);

#define jce_ONAFantuanRecommendStarsEntrance_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_FantuanRecommendStarsGroup_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.starList,b.starList);

#define jce_MiniVideoUIData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.video,b.video);jce_copy_struct(a.user,b.user);jce_copy_struct(a.likes,b.likes);jce_copy_struct(a.content,b.content);jce_copy_struct(a.comments,b.comments);jce_copy_struct(a.likeCount,b.likeCount);jce_copy_struct(a.commentCount,b.commentCount);

#define jce_FanTuanData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fanTuanId,b.fanTuanId);jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.h5ShareUrl,b.h5ShareUrl);jce_copy_struct(a.feedAction,b.feedAction);

#define jce_MiniVideoItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiItemData,b.uiItemData);jce_copy_struct(a.fanTuanData,b.fanTuanData);

#define jce_FanTuanSignedList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fanInvolves,b.fanInvolves);

#define jce_ONAFanTuanSignedList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fanInvolves,b.fanInvolves);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAFantuanRecommendStarsGroup_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starList,b.starList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_FanTuanLatestRankItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actorList,b.actorList);jce_copy_struct(a.maskImgUrl,b.maskImgUrl);jce_copy_struct(a.firstLine,b.firstLine);jce_copy_struct(a.secondLine,b.secondLine);jce_copy_struct(a.action,b.action);jce_copy_struct(a.mainColor,b.mainColor);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.lottieUrl,b.lottieUrl);

#define jce_ONAFanTuanLatestRankInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.posterList,b.posterList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_DokiCommentInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.totoalCount,b.totoalCount);jce_copy_struct(a.feedInfo,b.feedInfo);

#define jce_DokiLiveBeforeInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.curAttentCount,b.curAttentCount);jce_copy_struct(a.totalCommentCount,b.totalCommentCount);jce_copy_struct(a.textContent,b.textContent);jce_copy_struct(a.attentButton,b.attentButton);

#define jce_DokiLivingInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starCommentCount,b.starCommentCount);jce_copy_struct(a.commentList,b.commentList);

#define jce_DokiLiveEndInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starCommentCount,b.starCommentCount);jce_copy_struct(a.commentList,b.commentList);

#define jce_DokiLiveInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.liveStatus,b.liveStatus);jce_copy_struct(a.liveBeforeInfo,b.liveBeforeInfo);jce_copy_struct(a.liveingInfo,b.liveingInfo);jce_copy_struct(a.liveEndInfo,b.liveEndInfo);

#define jce_ONADokiNewsCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actorList,b.actorList);jce_copy_struct(a.firstLineText,b.firstLineText);jce_copy_struct(a.secondLineText,b.secondLineText);jce_copy_struct(a.newsType,b.newsType);jce_copy_struct(a.commentInfo,b.commentInfo);jce_copy_struct(a.liveInfo,b.liveInfo);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.action,b.action);jce_copy_struct(a.mainColor,b.mainColor);jce_copy_struct(a.actorCircleColors,b.actorCircleColors);jce_copy_struct(a.lottieSourceUrl,b.lottieSourceUrl);jce_copy_struct(a.leftActionBar,b.leftActionBar);

#define jce_ONADokiNewsCardList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cardList,b.cardList);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.hasMore,b.hasMore);jce_copy_struct(a.moreAction,b.moreAction);

#define jce_ONADokiMovementCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actorList,b.actorList);jce_copy_struct(a.firstLineText,b.firstLineText);jce_copy_struct(a.firstLineTagText,b.firstLineTagText);jce_copy_struct(a.secondLineTagText,b.secondLineTagText);jce_copy_struct(a.rankInfo,b.rankInfo);jce_copy_struct(a.actorCircleColors,b.actorCircleColors);jce_copy_struct(a.newsType,b.newsType);jce_copy_struct(a.contentInfo,b.contentInfo);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.lottieSourceUrl,b.lottieSourceUrl);jce_copy_struct(a.leftActionBar,b.leftActionBar);jce_copy_struct(a.leftDescText,b.leftDescText);jce_copy_struct(a.rightActionBar,b.rightActionBar);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.action,b.action);

#define jce_ONADokiMovementCardList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cardList,b.cardList);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.hasMore,b.hasMore);jce_copy_struct(a.moreAction,b.moreAction);

#define jce_ONADokiRankBroadcast_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.rankBroadcast,b.rankBroadcast);

#define jce_DokiDynamicItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.headImgUrl,b.headImgUrl);jce_copy_struct(a.title,b.title);jce_copy_struct(a.cornerImgUrl,b.cornerImgUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONADokiDynamic_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dokiDynamicItemList,b.dokiDynamicItemList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_DokiPhotoItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageInfo,b.imageInfo);jce_copy_struct(a.primaryFeed,b.primaryFeed);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONADokiPhotoItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.photoInfo,b.photoInfo);

#define jce_ONADokiPhotoList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.photoList,b.photoList);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_FanTuanHomeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fanTuanId,b.fanTuanId);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_FanTuanHomeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.fanInfo,b.fanInfo);jce_copy_struct(a.mainData,b.mainData);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.coverDataMap,b.coverDataMap);jce_copy_struct(a.actorDataMap,b.actorDataMap);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.postDataKey,b.postDataKey);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.tabModuleList,b.tabModuleList);

#define jce_FanTuanGetUserIdRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.flag,b.flag);

#define jce_FanTuanGetUserIdResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.fanTuanUserId,b.fanTuanUserId);

#define jce_FanTuanMyPostRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_FanTuanMyPostResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.fanTuanFeedList,b.fanTuanFeedList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_FanTuanMyCommentRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_FanTuanMyCommentResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.fanTuanMyCommentList,b.fanTuanMyCommentList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_FanTuanGetUnReadMsgCountRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.flag,b.flag);

#define jce_FanTuanGetUnReadMsgCountResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.count,b.count);jce_copy_struct(a.modifyTime,b.modifyTime);jce_copy_struct(a.userInfo,b.userInfo);

#define jce_FanTuanGetMsgListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.beginMsgId,b.beginMsgId);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_FanTuanGetMsgListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.msgList,b.msgList);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_FanTuanSetLastReadMsgRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lastMsgId,b.lastMsgId);

#define jce_FanTuanSetLastReadMsgResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_FanTuanMyFollowRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.onePageCount,b.onePageCount);jce_copy_struct(a.needUpdateInfo,b.needUpdateInfo);jce_copy_struct(a.userId,b.userId);jce_copy_struct(a.requestType,b.requestType);

#define jce_FanTuanMyFollowResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.fanTuanMyFollowList,b.fanTuanMyFollowList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.updateInfoList,b.updateInfoList);jce_copy_struct(a.updateVersionList,b.updateVersionList);

#define jce_FanTuanFollowRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fanTuanId,b.fanTuanId);jce_copy_struct(a.type,b.type);jce_copy_struct(a.needCheck,b.needCheck);jce_copy_struct(a.fanTuanIdList,b.fanTuanIdList);jce_copy_struct(a.followDataKey,b.followDataKey);

#define jce_FanTuanFollowResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.signCount,b.signCount);jce_copy_struct(a.followList,b.followList);

#define jce_FanTuanQueryFollowRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fanTuanIdList,b.fanTuanIdList);jce_copy_struct(a.optType,b.optType);

#define jce_FanTuanQueryFollowResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.followList,b.followList);

#define jce_FanTuanSignRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fanTuanId,b.fanTuanId);

#define jce_FanTuanSignResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_FanTuanFeedDetailRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.type,b.type);jce_copy_struct(a.direction,b.direction);

#define jce_FanTuanFeedDetailResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.fanTuanFeedCommentList,b.fanTuanFeedCommentList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.primaryFeed,b.primaryFeed);jce_copy_struct(a.shareH5Url,b.shareH5Url);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.ftFlags,b.ftFlags);

#define jce_FanTuanPublishFeedRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fanTuanId,b.fanTuanId);jce_copy_struct(a.title,b.title);jce_copy_struct(a.content,b.content);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.photos,b.photos);jce_copy_struct(a.stExtInfo,b.stExtInfo);jce_copy_struct(a.longVideos,b.longVideos);jce_copy_struct(a.miniVideos,b.miniVideos);jce_copy_struct(a.summaryInfo,b.summaryInfo);

#define jce_FanTuanPublishFeedResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.fanTuanId,b.fanTuanId);jce_copy_struct(a.pubTime,b.pubTime);jce_copy_struct(a.action,b.action);

#define jce_FanTuanPublishCommentRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.parentId,b.parentId);jce_copy_struct(a.content,b.content);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.photos,b.photos);jce_copy_struct(a.targetType,b.targetType);jce_copy_struct(a.stExtInfo,b.stExtInfo);jce_copy_struct(a.rootId,b.rootId);jce_copy_struct(a.fanTuanId,b.fanTuanId);jce_copy_struct(a.longVideos,b.longVideos);

#define jce_FanTuanPublishCommentResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.commentId,b.commentId);jce_copy_struct(a.parentId,b.parentId);jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.pubTime,b.pubTime);

#define jce_FanTuanDeleteRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.targetId,b.targetId);jce_copy_struct(a.type,b.type);jce_copy_struct(a.fanTuanId,b.fanTuanId);

#define jce_FanTuanDeleteResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_FanTuanUpRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.targetId,b.targetId);jce_copy_struct(a.targetType,b.targetType);jce_copy_struct(a.operateFlag,b.operateFlag);jce_copy_struct(a.fanTuanId,b.fanTuanId);jce_copy_struct(a.stExtInfo,b.stExtInfo);

#define jce_FanTuanUpResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_FanTuanReportRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.targetId,b.targetId);jce_copy_struct(a.targetType,b.targetType);jce_copy_struct(a.reportType,b.reportType);jce_copy_struct(a.reportDesc,b.reportDesc);

#define jce_FanTuanReportResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_FanTuanListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);

#define jce_FanTuanListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.fanTuanListPart,b.fanTuanListPart);jce_copy_struct(a.fanTuanListAll,b.fanTuanListAll);jce_copy_struct(a.promotionInfo,b.promotionInfo);

#define jce_FanTuanLatestRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.versionCode,b.versionCode);

#define jce_FanTuanLatestResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isHaveNextPage,b.isHaveNextPage);jce_copy_struct(a.versionCode,b.versionCode);jce_copy_struct(a.updateCount,b.updateCount);

#define jce_FanTuanRecommendStarsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.type,b.type);

#define jce_FanTuanRecommendStarsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.starGroupList,b.starGroupList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isHaveNextPage,b.isHaveNextPage);

#define jce_FanTuanGetNewLineRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_FanTuanGetNewLineResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.data,b.data);

#define jce_MiniVideoTimelineRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_MiniVideoTimelineResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.videoList,b.videoList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.timelineType,b.timelineType);

#define jce_FanTuanNavOperatePageRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.extDataKey,b.extDataKey);

#define jce_FanTuanNavOperatePageResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.fanInfo,b.fanInfo);jce_copy_struct(a.moduleList,b.moduleList);jce_copy_struct(a.dokiHeadExtraInfo,b.dokiHeadExtraInfo);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.actionBars,b.actionBars);jce_copy_struct(a.degreeLabel,b.degreeLabel);jce_copy_struct(a.promotionInfo,b.promotionInfo);jce_copy_struct(a.introAction,b.introAction);

#define jce_FanTuanModifyRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fanTuanId,b.fanTuanId);jce_copy_struct(a.msgId,b.msgId);jce_copy_struct(a.title,b.title);jce_copy_struct(a.content,b.content);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.photos,b.photos);jce_copy_struct(a.stExtInfo,b.stExtInfo);

#define jce_FanTuanModifyResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);

#define jce_FanTuanHomeFeedRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.recmdInfo,b.recmdInfo);

#define jce_FanTuanHomeFeedResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.postDataKey,b.postDataKey);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.recmdInfo,b.recmdInfo);jce_copy_struct(a.promotionInfo,b.promotionInfo);

#define jce_DokiHomeFeedRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.recmdInfo,b.recmdInfo);

#define jce_DokiHomeFeedResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.postDataKey,b.postDataKey);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.recmdInfo,b.recmdInfo);jce_copy_struct(a.promotionInfo,b.promotionInfo);

#define jce_DokiNewsCardRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.datakey,b.datakey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_DokiNewsCardResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.newsList,b.newsList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isHaveNextPage,b.isHaveNextPage);

#define jce_DokiDegreeTaskRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.opType,b.opType);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.curDegree,b.curDegree);jce_copy_struct(a.context,b.context);

#define jce_DokiDegreeTaskResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.showUrl,b.showUrl);jce_copy_struct(a.taskBar,b.taskBar);jce_copy_struct(a.degreeLabel,b.degreeLabel);jce_copy_struct(a.taskToastText,b.taskToastText);jce_copy_struct(a.context,b.context);jce_copy_struct(a.presentBar,b.presentBar);

#define jce_DokiMileStoneItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.imgUrl,b.imgUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONADokiMileStoneList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stoneList,b.stoneList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONADokiEntryList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.entryList,b.entryList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_DokiHeadBarInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.closeBgAnimation,b.closeBgAnimation);jce_copy_struct(a.openGrowthSystem,b.openGrowthSystem);jce_copy_struct(a.closeRedDot,b.closeRedDot);jce_copy_struct(a.needLogin,b.needLogin);jce_copy_struct(a.actionType,b.actionType);

#define jce_ONARelatedDokiList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.relatedDokiList,b.relatedDokiList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_WallPaperHeadInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.headerType,b.headerType);jce_copy_struct(a.actorInfo,b.actorInfo);jce_copy_struct(a.bgImageUrl,b.bgImageUrl);jce_copy_struct(a.bgColor,b.bgColor);jce_copy_struct(a.titleColorStart,b.titleColorStart);jce_copy_struct(a.titleColorEnd,b.titleColorEnd);jce_copy_struct(a.introduction,b.introduction);jce_copy_struct(a.actionBar,b.actionBar);

#define jce_DokiWelfareNavRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.datakey,b.datakey);

#define jce_DokiWelfareNavResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.tabs,b.tabs);jce_copy_struct(a.title,b.title);

#define jce_DokiWallPaperPageRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.datakey,b.datakey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_DokiWallPaperPageResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.postDataKey,b.postDataKey);jce_copy_struct(a.title,b.title);jce_copy_struct(a.dokiId,b.dokiId);jce_copy_struct(a.wallPaperHeadInfo,b.wallPaperHeadInfo);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_DokiPicWallPaperItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageInfo,b.imageInfo);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.wallpaperDataKey,b.wallpaperDataKey);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.action,b.action);

#define jce_DokiLiveWallpaperItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.videoInfo,b.videoInfo);jce_copy_struct(a.preViewGifUrl,b.preViewGifUrl);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.liveWallpaperDataKey,b.liveWallpaperDataKey);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.action,b.action);

#define jce_DokiWallPaperItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.picWallpaperItem,b.picWallpaperItem);jce_copy_struct(a.liveWallpaperItem,b.liveWallpaperItem);jce_copy_struct(a.downloadTimes,b.downloadTimes);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.marklabels,b.marklabels);jce_copy_struct(a.wallPaperId,b.wallPaperId);

#define jce_ONADokiWallPaperItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.wallpaper,b.wallpaper);jce_copy_struct(a.showUserInfo,b.showUserInfo);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.backgroundType,b.backgroundType);

#define jce_ONADokiWallPaperList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.wallpaperList,b.wallpaperList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONADokiWallPaperScrollableList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.wallpaperList,b.wallpaperList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.uiPadding,b.uiPadding);

#define jce_WallPaperQueryRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.datekey,b.datekey);

#define jce_WallPaperQueryResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.wallpaper,b.wallpaper);

#define jce_DokiHomePageExtendDataRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_DokiHomePageExtendDataResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.introductionVideo,b.introductionVideo);

#define jce_WallPaperListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_WallPaperListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.wallpaperList,b.wallpaperList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_DokiTopTenFeedListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.datakey,b.datakey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_DokiTopTenFeedListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.newsList,b.newsList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isHaveNextPage,b.isHaveNextPage);

#define jce_DokiInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actorInfo,b.actorInfo);jce_copy_struct(a.followState,b.followState);

#define jce_QueryDokiFollowListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.userId,b.userId);jce_copy_struct(a.dokiType,b.dokiType);jce_copy_struct(a.sortFlag,b.sortFlag);jce_copy_struct(a.scene,b.scene);jce_copy_struct(a.needFollowState,b.needFollowState);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_QueryDokiFollowListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.dataList,b.dataList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isHasNextPage,b.isHasNextPage);

#define jce_DokiEmoticonItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.url,b.url);jce_copy_struct(a.isGif,b.isGif);jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.opeartionDataKey,b.opeartionDataKey);jce_copy_struct(a.EmoticonId,b.EmoticonId);jce_copy_struct(a.action,b.action);jce_copy_struct(a.shareItem,b.shareItem);

#define jce_ONADokiEmoticonItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.data,b.data);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.backgroundType,b.backgroundType);

#define jce_ONADokiEmoticonList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.emoticonList,b.emoticonList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_StarThemeUIItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.urls,b.urls);jce_copy_struct(a.bgUrl,b.bgUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONADokiStarTheme_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starThemeList,b.starThemeList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_DokiEmoticonGroupPageRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_DokiEmoticonGroupPageResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.title,b.title);

#define jce_ONADokiLiveBroadcast_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.liveStatus,b.liveStatus);jce_copy_struct(a.iconList,b.iconList);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.liveAction,b.liveAction);jce_copy_struct(a.attentItemData,b.attentItemData);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONADokiActivityInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.activityType,b.activityType);jce_copy_struct(a.frontImage,b.frontImage);jce_copy_struct(a.bgImage,b.bgImage);jce_copy_struct(a.durationTips,b.durationTips);jce_copy_struct(a.durationBgColors,b.durationBgColors);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.hintTips,b.hintTips);jce_copy_struct(a.requireTotalCount,b.requireTotalCount);jce_copy_struct(a.curJoinCount,b.curJoinCount);jce_copy_struct(a.processColors,b.processColors);jce_copy_struct(a.activityAction,b.activityAction);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_DokiAdminDataRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dokiId,b.dokiId);

#define jce_DokiAdminDataResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.adminEntryTips,b.adminEntryTips);jce_copy_struct(a.adminEntryAction,b.adminEntryAction);jce_copy_struct(a.msgCount,b.msgCount);

#define jce_DokiAdminFeedListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_DokiAdminFeedListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.feedList,b.feedList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isHaveNextPage,b.isHaveNextPage);

#define jce_DokiEmotionTabPageRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.datakey,b.datakey);

#define jce_DokiEmotionTabPageResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.tabs,b.tabs);jce_copy_struct(a.title,b.title);jce_copy_struct(a.postDataKey,b.postDataKey);jce_copy_struct(a.dokiId,b.dokiId);



#endif
