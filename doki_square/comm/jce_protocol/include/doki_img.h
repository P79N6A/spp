// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `doki_img.jce'
// **********************************************************************

#ifndef __DOKI_IMG_H_
#define __DOKI_IMG_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace DokiImg
{
    enum CMD
    {
        CMD_DOKI_IMG_INFO = 63515,
        CMD_DOKI_FEED_IMG_INFO = 63516,
        CMD_DOKI_FEED_IMG_INFO_PUSH = 63517,
    };
    inline string etos(const CMD & e)
    {
        switch(e)
        {
            case CMD_DOKI_IMG_INFO: return "CMD_DOKI_IMG_INFO";
            case CMD_DOKI_FEED_IMG_INFO: return "CMD_DOKI_FEED_IMG_INFO";
            case CMD_DOKI_FEED_IMG_INFO_PUSH: return "CMD_DOKI_FEED_IMG_INFO_PUSH";
            default: return "";
        }
    }
    inline int stoe(const string & s, CMD & e)
    {
        if(s == "CMD_DOKI_IMG_INFO")  { e=CMD_DOKI_IMG_INFO; return 0;}
        if(s == "CMD_DOKI_FEED_IMG_INFO")  { e=CMD_DOKI_FEED_IMG_INFO; return 0;}
        if(s == "CMD_DOKI_FEED_IMG_INFO_PUSH")  { e=CMD_DOKI_FEED_IMG_INFO_PUSH; return 0;}

        return -1;
    }

    enum TagType
    {
        TAG_TYPE_DOKI = 1,
        TAG_TYPE_VID = 2,
        TAG_TYPE_CID = 3,
        TAG_TYPE_LID = 4,
    };
    inline string etos(const TagType & e)
    {
        switch(e)
        {
            case TAG_TYPE_DOKI: return "TAG_TYPE_DOKI";
            case TAG_TYPE_VID: return "TAG_TYPE_VID";
            case TAG_TYPE_CID: return "TAG_TYPE_CID";
            case TAG_TYPE_LID: return "TAG_TYPE_LID";
            default: return "";
        }
    }
    inline int stoe(const string & s, TagType & e)
    {
        if(s == "TAG_TYPE_DOKI")  { e=TAG_TYPE_DOKI; return 0;}
        if(s == "TAG_TYPE_VID")  { e=TAG_TYPE_VID; return 0;}
        if(s == "TAG_TYPE_CID")  { e=TAG_TYPE_CID; return 0;}
        if(s == "TAG_TYPE_LID")  { e=TAG_TYPE_LID; return 0;}

        return -1;
    }

    enum BitInfo
    {
        BIT_MAP_SIMILAR = 1,
        BIT_MAP_FACE = 2,
        BIT_MAP_PIC_SCORE = 4,
        BIT_MAP_ALL = 7,
    };
    inline string etos(const BitInfo & e)
    {
        switch(e)
        {
            case BIT_MAP_SIMILAR: return "BIT_MAP_SIMILAR";
            case BIT_MAP_FACE: return "BIT_MAP_FACE";
            case BIT_MAP_PIC_SCORE: return "BIT_MAP_PIC_SCORE";
            case BIT_MAP_ALL: return "BIT_MAP_ALL";
            default: return "";
        }
    }
    inline int stoe(const string & s, BitInfo & e)
    {
        if(s == "BIT_MAP_SIMILAR")  { e=BIT_MAP_SIMILAR; return 0;}
        if(s == "BIT_MAP_FACE")  { e=BIT_MAP_FACE; return 0;}
        if(s == "BIT_MAP_PIC_SCORE")  { e=BIT_MAP_PIC_SCORE; return 0;}
        if(s == "BIT_MAP_ALL")  { e=BIT_MAP_ALL; return 0;}

        return -1;
    }

    struct TagInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiImg.TagInfo";
        }
        static string MD5()
        {
            return "fe3f0cf1071b808094314d2091a0a4e7";
        }
        TagInfo()
        :type(DokiImg::TAG_TYPE_DOKI),tag("")
        {
        }
        void resetDefautlt()
        {
            tag = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)type, 0);
            _os.write(tag, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = DokiImg::TAG_TYPE_DOKI;
            _is.read(eTemp0, 0, false);
            type = (DokiImg::TagType)eTemp0;
            _is.read(tag, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)type,"type");
            _ds.display(tag,"tag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)type, true);
            _ds.displaySimple(tag, false);
            return _os;
        }
    public:
        DokiImg::TagType type;
        std::string tag;
    };
    inline bool operator==(const TagInfo&l, const TagInfo&r)
    {
        return l.type == r.type && l.tag == r.tag;
    }
    inline bool operator!=(const TagInfo&l, const TagInfo&r)
    {
        return !(l == r);
    }

    struct FeedUrl : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiImg.FeedUrl";
        }
        static string MD5()
        {
            return "2c58cd7c78b1eab0739d748053fe39a6";
        }
        FeedUrl()
        :feedid(0),pubtime(0),picNum(0)
        {
        }
        void resetDefautlt()
        {
            feedid = 0;
            pubtime = 0;
            picNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedid, 0);
            _os.write(pubtime, 1);
            _os.write(picNum, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedid, 0, false);
            _is.read(pubtime, 1, false);
            _is.read(picNum, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedid,"feedid");
            _ds.display(pubtime,"pubtime");
            _ds.display(picNum,"picNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedid, true);
            _ds.displaySimple(pubtime, true);
            _ds.displaySimple(picNum, false);
            return _os;
        }
    public:
        taf::Int64 feedid;
        taf::Int64 pubtime;
        taf::Int32 picNum;
    };
    inline bool operator==(const FeedUrl&l, const FeedUrl&r)
    {
        return l.feedid == r.feedid && l.pubtime == r.pubtime && l.picNum == r.picNum;
    }
    inline bool operator!=(const FeedUrl&l, const FeedUrl&r)
    {
        return !(l == r);
    }

    struct TagSimilarUrl : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiImg.TagSimilarUrl";
        }
        static string MD5()
        {
            return "947362c70a8d96855fcb8d53d3b132c3";
        }
        TagSimilarUrl()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tagInfo, 0);
            _os.write(feedSimilarUrl, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tagInfo, 0, false);
            _is.read(feedSimilarUrl, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tagInfo,"tagInfo");
            _ds.display(feedSimilarUrl,"feedSimilarUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tagInfo, true);
            _ds.displaySimple(feedSimilarUrl, false);
            return _os;
        }
    public:
        DokiImg::TagInfo tagInfo;
        vector<DokiImg::FeedUrl> feedSimilarUrl;
    };
    inline bool operator==(const TagSimilarUrl&l, const TagSimilarUrl&r)
    {
        return l.tagInfo == r.tagInfo && l.feedSimilarUrl == r.feedSimilarUrl;
    }
    inline bool operator!=(const TagSimilarUrl&l, const TagSimilarUrl&r)
    {
        return !(l == r);
    }

    struct DokiImgInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiImg.DokiImgInfo";
        }
        static string MD5()
        {
            return "e8f44fa6794d93eb52150ac5fa127550";
        }
        DokiImgInfo()
        :url(""),finger(""),clarityScore(0),width(0),height(0)
        {
        }
        void resetDefautlt()
        {
            url = "";
            finger = "";
            clarityScore = 0;
            width = 0;
            height = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(url, 0);
            _os.write(finger, 1);
            _os.write(similarUrl, 2);
            _os.write(faceSucc, 3);
            _os.write(faceFail, 4);
            _os.write(faceNotSupport, 5);
            _os.write(clarityScore, 6);
            _os.write(width, 7);
            _os.write(height, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(url, 0, false);
            _is.read(finger, 1, false);
            _is.read(similarUrl, 2, false);
            _is.read(faceSucc, 3, false);
            _is.read(faceFail, 4, false);
            _is.read(faceNotSupport, 5, false);
            _is.read(clarityScore, 6, false);
            _is.read(width, 7, false);
            _is.read(height, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(url,"url");
            _ds.display(finger,"finger");
            _ds.display(similarUrl,"similarUrl");
            _ds.display(faceSucc,"faceSucc");
            _ds.display(faceFail,"faceFail");
            _ds.display(faceNotSupport,"faceNotSupport");
            _ds.display(clarityScore,"clarityScore");
            _ds.display(width,"width");
            _ds.display(height,"height");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(url, true);
            _ds.displaySimple(finger, true);
            _ds.displaySimple(similarUrl, true);
            _ds.displaySimple(faceSucc, true);
            _ds.displaySimple(faceFail, true);
            _ds.displaySimple(faceNotSupport, true);
            _ds.displaySimple(clarityScore, true);
            _ds.displaySimple(width, true);
            _ds.displaySimple(height, false);
            return _os;
        }
    public:
        std::string url;
        std::string finger;
        vector<DokiImg::TagSimilarUrl> similarUrl;
        vector<DokiImg::TagInfo> faceSucc;
        vector<DokiImg::TagInfo> faceFail;
        vector<DokiImg::TagInfo> faceNotSupport;
        taf::Int32 clarityScore;
        taf::Int32 width;
        taf::Int32 height;
    };
    inline bool operator==(const DokiImgInfo&l, const DokiImgInfo&r)
    {
        return l.url == r.url && l.finger == r.finger && l.similarUrl == r.similarUrl && l.faceSucc == r.faceSucc && l.faceFail == r.faceFail && l.faceNotSupport == r.faceNotSupport && l.clarityScore == r.clarityScore && l.width == r.width && l.height == r.height;
    }
    inline bool operator!=(const DokiImgInfo&l, const DokiImgInfo&r)
    {
        return !(l == r);
    }

    struct DokiFeedImgInfoReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiImg.DokiFeedImgInfoReq";
        }
        static string MD5()
        {
            return "bcdab25845af3d13d13a3ffa45b256bd";
        }
        DokiFeedImgInfoReq()
        :feedid(0),bitmap(0)
        {
        }
        void resetDefautlt()
        {
            feedid = 0;
            bitmap = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedid, 0);
            _os.write(bitmap, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedid, 0, false);
            _is.read(bitmap, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedid,"feedid");
            _ds.display(bitmap,"bitmap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedid, true);
            _ds.displaySimple(bitmap, false);
            return _os;
        }
    public:
        taf::Int64 feedid;
        taf::Int32 bitmap;
    };
    inline bool operator==(const DokiFeedImgInfoReq&l, const DokiFeedImgInfoReq&r)
    {
        return l.feedid == r.feedid && l.bitmap == r.bitmap;
    }
    inline bool operator!=(const DokiFeedImgInfoReq&l, const DokiFeedImgInfoReq&r)
    {
        return !(l == r);
    }

    struct DokiFeedImgInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiImg.DokiFeedImgInfoRsp";
        }
        static string MD5()
        {
            return "c28d463232f9c1d11ed4a002d4eaa422";
        }
        DokiFeedImgInfoRsp()
        :retcode(0),bitmap(0)
        {
        }
        void resetDefautlt()
        {
            retcode = 0;
            bitmap = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(retcode, 0);
            _os.write(bitmap, 1);
            _os.write(imgInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(retcode, 0, false);
            _is.read(bitmap, 1, false);
            _is.read(imgInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(retcode,"retcode");
            _ds.display(bitmap,"bitmap");
            _ds.display(imgInfo,"imgInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(retcode, true);
            _ds.displaySimple(bitmap, true);
            _ds.displaySimple(imgInfo, false);
            return _os;
        }
    public:
        taf::Int32 retcode;
        taf::Int32 bitmap;
        vector<DokiImg::DokiImgInfo> imgInfo;
    };
    inline bool operator==(const DokiFeedImgInfoRsp&l, const DokiFeedImgInfoRsp&r)
    {
        return l.retcode == r.retcode && l.bitmap == r.bitmap && l.imgInfo == r.imgInfo;
    }
    inline bool operator!=(const DokiFeedImgInfoRsp&l, const DokiFeedImgInfoRsp&r)
    {
        return !(l == r);
    }

    struct DokiImgInfoReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiImg.DokiImgInfoReq";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        DokiImgInfoReq()
        :imgUrl(""),bitmap(0)
        {
        }
        void resetDefautlt()
        {
            imgUrl = "";
            bitmap = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imgUrl, 0);
            _os.write(bitmap, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imgUrl, 0, false);
            _is.read(bitmap, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imgUrl,"imgUrl");
            _ds.display(bitmap,"bitmap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imgUrl, true);
            _ds.displaySimple(bitmap, false);
            return _os;
        }
    public:
        std::string imgUrl;
        taf::Int32 bitmap;
    };
    inline bool operator==(const DokiImgInfoReq&l, const DokiImgInfoReq&r)
    {
        return l.imgUrl == r.imgUrl && l.bitmap == r.bitmap;
    }
    inline bool operator!=(const DokiImgInfoReq&l, const DokiImgInfoReq&r)
    {
        return !(l == r);
    }

    struct DokiImgInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiImg.DokiImgInfoRsp";
        }
        static string MD5()
        {
            return "0ba5b33a227c5d6fc3bcf4be4a128a81";
        }
        DokiImgInfoRsp()
        :retcode(0),bitmap(0)
        {
        }
        void resetDefautlt()
        {
            retcode = 0;
            bitmap = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(retcode, 0);
            _os.write(bitmap, 1);
            _os.write(imgInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(retcode, 0, false);
            _is.read(bitmap, 1, false);
            _is.read(imgInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(retcode,"retcode");
            _ds.display(bitmap,"bitmap");
            _ds.display(imgInfo,"imgInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(retcode, true);
            _ds.displaySimple(bitmap, true);
            _ds.displaySimple(imgInfo, false);
            return _os;
        }
    public:
        taf::Int32 retcode;
        taf::Int32 bitmap;
        DokiImg::DokiImgInfo imgInfo;
    };
    inline bool operator==(const DokiImgInfoRsp&l, const DokiImgInfoRsp&r)
    {
        return l.retcode == r.retcode && l.bitmap == r.bitmap && l.imgInfo == r.imgInfo;
    }
    inline bool operator!=(const DokiImgInfoRsp&l, const DokiImgInfoRsp&r)
    {
        return !(l == r);
    }

    struct DokiFeedImgInfoPush : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiImg.DokiFeedImgInfoPush";
        }
        static string MD5()
        {
            return "fbb0273679e028a839519bab9fe08c74";
        }
        DokiFeedImgInfoPush()
        :feedid(0),bitmap(0)
        {
        }
        void resetDefautlt()
        {
            feedid = 0;
            bitmap = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedid, 0);
            _os.write(bitmap, 1);
            _os.write(imgInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedid, 0, false);
            _is.read(bitmap, 1, false);
            _is.read(imgInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedid,"feedid");
            _ds.display(bitmap,"bitmap");
            _ds.display(imgInfo,"imgInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedid, true);
            _ds.displaySimple(bitmap, true);
            _ds.displaySimple(imgInfo, false);
            return _os;
        }
    public:
        taf::Int64 feedid;
        taf::Int32 bitmap;
        vector<DokiImg::DokiImgInfo> imgInfo;
    };
    inline bool operator==(const DokiFeedImgInfoPush&l, const DokiFeedImgInfoPush&r)
    {
        return l.feedid == r.feedid && l.bitmap == r.bitmap && l.imgInfo == r.imgInfo;
    }
    inline bool operator!=(const DokiFeedImgInfoPush&l, const DokiFeedImgInfoPush&r)
    {
        return !(l == r);
    }


}

#define DokiImg_TagInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.tag,b.tag);

#define DokiImg_FeedUrl_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedid,b.feedid);jce_copy_struct(a.pubtime,b.pubtime);jce_copy_struct(a.picNum,b.picNum);

#define DokiImg_TagSimilarUrl_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tagInfo,b.tagInfo);jce_copy_struct(a.feedSimilarUrl,b.feedSimilarUrl);

#define DokiImg_DokiImgInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.url,b.url);jce_copy_struct(a.finger,b.finger);jce_copy_struct(a.similarUrl,b.similarUrl);jce_copy_struct(a.faceSucc,b.faceSucc);jce_copy_struct(a.faceFail,b.faceFail);jce_copy_struct(a.faceNotSupport,b.faceNotSupport);jce_copy_struct(a.clarityScore,b.clarityScore);jce_copy_struct(a.width,b.width);jce_copy_struct(a.height,b.height);

#define DokiImg_DokiFeedImgInfoReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedid,b.feedid);jce_copy_struct(a.bitmap,b.bitmap);

#define DokiImg_DokiFeedImgInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.retcode,b.retcode);jce_copy_struct(a.bitmap,b.bitmap);jce_copy_struct(a.imgInfo,b.imgInfo);

#define DokiImg_DokiImgInfoReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imgUrl,b.imgUrl);jce_copy_struct(a.bitmap,b.bitmap);

#define DokiImg_DokiImgInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.retcode,b.retcode);jce_copy_struct(a.bitmap,b.bitmap);jce_copy_struct(a.imgInfo,b.imgInfo);

#define DokiImg_DokiFeedImgInfoPush_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedid,b.feedid);jce_copy_struct(a.bitmap,b.bitmap);jce_copy_struct(a.imgInfo,b.imgInfo);



#endif
