// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_ad_common.jce'
// **********************************************************************

#ifndef __QQVIDEO_AD_COMMON_H_
#define __QQVIDEO_AD_COMMON_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_ad_defines.h"


namespace jce
{
    struct AdReport : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdReport";
        }
        static string MD5()
        {
            return "4527dea2cd6699ec83ce89a538ee0152";
        }
        AdReport()
        :reportKey(""),reportParam(""),url(""),reportTime(0)
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParam = "";
            url = "";
            reportTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(reportKey, 0);
            _os.write(reportParam, 1);
            _os.write(url, 2);
            _os.write(apiReportUrl, 3);
            _os.write(sdkReportUrl, 4);
            _os.write(reportTime, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(reportKey, 0, false);
            _is.read(reportParam, 1, false);
            _is.read(url, 2, false);
            _is.read(apiReportUrl, 3, false);
            _is.read(sdkReportUrl, 4, false);
            _is.read(reportTime, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParam,"reportParam");
            _ds.display(url,"url");
            _ds.display(apiReportUrl,"apiReportUrl");
            _ds.display(sdkReportUrl,"sdkReportUrl");
            _ds.display(reportTime,"reportTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParam, true);
            _ds.displaySimple(url, true);
            _ds.displaySimple(apiReportUrl, true);
            _ds.displaySimple(sdkReportUrl, true);
            _ds.displaySimple(reportTime, false);
            return _os;
        }
    public:
        std::string reportKey;
        std::string reportParam;
        std::string url;
        vector<std::string> apiReportUrl;
        vector<std::string> sdkReportUrl;
        taf::Int32 reportTime;
    };
    inline bool operator==(const AdReport&l, const AdReport&r)
    {
        return l.reportKey == r.reportKey && l.reportParam == r.reportParam && l.url == r.url && l.apiReportUrl == r.apiReportUrl && l.sdkReportUrl == r.sdkReportUrl && l.reportTime == r.reportTime;
    }
    inline bool operator!=(const AdReport&l, const AdReport&r)
    {
        return !(l == r);
    }

    struct AdShareItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdShareItem";
        }
        static string MD5()
        {
            return "56a3860c5171226ffad0bf73c6727bc7";
        }
        AdShareItem()
        :shareUrl(""),shareTitle(""),shareSubtitle(""),shareImgUrl(""),shareFromH5(true),sharePage(""),shareEnable(true)
        {
        }
        void resetDefautlt()
        {
            shareUrl = "";
            shareTitle = "";
            shareSubtitle = "";
            shareImgUrl = "";
            shareFromH5 = true;
            sharePage = "";
            shareEnable = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(shareUrl, 0);
            _os.write(shareTitle, 1);
            _os.write(shareSubtitle, 2);
            _os.write(shareImgUrl, 3);
            _os.write(shareFromH5, 4);
            _os.write(sharePage, 5);
            _os.write(shareEnable, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(shareUrl, 0, false);
            _is.read(shareTitle, 1, false);
            _is.read(shareSubtitle, 2, false);
            _is.read(shareImgUrl, 3, false);
            _is.read(shareFromH5, 4, false);
            _is.read(sharePage, 5, false);
            _is.read(shareEnable, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(shareUrl,"shareUrl");
            _ds.display(shareTitle,"shareTitle");
            _ds.display(shareSubtitle,"shareSubtitle");
            _ds.display(shareImgUrl,"shareImgUrl");
            _ds.display(shareFromH5,"shareFromH5");
            _ds.display(sharePage,"sharePage");
            _ds.display(shareEnable,"shareEnable");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(shareUrl, true);
            _ds.displaySimple(shareTitle, true);
            _ds.displaySimple(shareSubtitle, true);
            _ds.displaySimple(shareImgUrl, true);
            _ds.displaySimple(shareFromH5, true);
            _ds.displaySimple(sharePage, true);
            _ds.displaySimple(shareEnable, false);
            return _os;
        }
    public:
        std::string shareUrl;
        std::string shareTitle;
        std::string shareSubtitle;
        std::string shareImgUrl;
        taf::Bool shareFromH5;
        std::string sharePage;
        taf::Bool shareEnable;
    };
    inline bool operator==(const AdShareItem&l, const AdShareItem&r)
    {
        return l.shareUrl == r.shareUrl && l.shareTitle == r.shareTitle && l.shareSubtitle == r.shareSubtitle && l.shareImgUrl == r.shareImgUrl && l.shareFromH5 == r.shareFromH5 && l.sharePage == r.sharePage && l.shareEnable == r.shareEnable;
    }
    inline bool operator!=(const AdShareItem&l, const AdShareItem&r)
    {
        return !(l == r);
    }

    struct PackageAction : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PackageAction";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        PackageAction()
        :url(""),coordinatesStr("")
        {
        }
        void resetDefautlt()
        {
            url = "";
            coordinatesStr = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(url, 0);
            _os.write(coordinatesStr, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(url, 0, false);
            _is.read(coordinatesStr, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(url,"url");
            _ds.display(coordinatesStr,"coordinatesStr");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(url, true);
            _ds.displaySimple(coordinatesStr, false);
            return _os;
        }
    public:
        std::string url;
        std::string coordinatesStr;
    };
    inline bool operator==(const PackageAction&l, const PackageAction&r)
    {
        return l.url == r.url && l.coordinatesStr == r.coordinatesStr;
    }
    inline bool operator!=(const PackageAction&l, const PackageAction&r)
    {
        return !(l == r);
    }

    struct AdActionButton : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdActionButton";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        AdActionButton()
        :icon(""),tips("")
        {
        }
        void resetDefautlt()
        {
            icon = "";
            tips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(icon, 0);
            _os.write(tips, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(icon, 0, false);
            _is.read(tips, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(icon,"icon");
            _ds.display(tips,"tips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(icon, true);
            _ds.displaySimple(tips, false);
            return _os;
        }
    public:
        std::string icon;
        std::string tips;
    };
    inline bool operator==(const AdActionButton&l, const AdActionButton&r)
    {
        return l.icon == r.icon && l.tips == r.tips;
    }
    inline bool operator!=(const AdActionButton&l, const AdActionButton&r)
    {
        return !(l == r);
    }

    struct AdCorner : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdCorner";
        }
        static string MD5()
        {
            return "686f7f404ca286de4997c4e5bacc156f";
        }
        AdCorner()
        :packageName(""),appIconUrl(""),appName(""),highlightDelay(-1),highlightColor("")
        {
        }
        void resetDefautlt()
        {
            packageName = "";
            appIconUrl = "";
            appName = "";
            highlightDelay = -1;
            highlightColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actionButton, 0);
            _os.write(packageAction, 1);
            _os.write(packageName, 2);
            _os.write(appIconUrl, 3);
            _os.write(appName, 4);
            _os.write(highlightDelay, 5);
            _os.write(highlightColor, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actionButton, 0, false);
            _is.read(packageAction, 1, false);
            _is.read(packageName, 2, false);
            _is.read(appIconUrl, 3, false);
            _is.read(appName, 4, false);
            _is.read(highlightDelay, 5, false);
            _is.read(highlightColor, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actionButton,"actionButton");
            _ds.display(packageAction,"packageAction");
            _ds.display(packageName,"packageName");
            _ds.display(appIconUrl,"appIconUrl");
            _ds.display(appName,"appName");
            _ds.display(highlightDelay,"highlightDelay");
            _ds.display(highlightColor,"highlightColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actionButton, true);
            _ds.displaySimple(packageAction, true);
            _ds.displaySimple(packageName, true);
            _ds.displaySimple(appIconUrl, true);
            _ds.displaySimple(appName, true);
            _ds.displaySimple(highlightDelay, true);
            _ds.displaySimple(highlightColor, false);
            return _os;
        }
    public:
        map<std::string, jce::AdActionButton> actionButton;
        jce::PackageAction packageAction;
        std::string packageName;
        std::string appIconUrl;
        std::string appName;
        taf::Int32 highlightDelay;
        std::string highlightColor;
    };
    inline bool operator==(const AdCorner&l, const AdCorner&r)
    {
        return l.actionButton == r.actionButton && l.packageAction == r.packageAction && l.packageName == r.packageName && l.appIconUrl == r.appIconUrl && l.appName == r.appName && l.highlightDelay == r.highlightDelay && l.highlightColor == r.highlightColor;
    }
    inline bool operator!=(const AdCorner&l, const AdCorner&r)
    {
        return !(l == r);
    }

    struct AdPlatformInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdPlatformInfo";
        }
        static string MD5()
        {
            return "c91582e0ca7ac2c57bc63ac78c352591";
        }
        AdPlatformInfo()
        :hwmodel(""),hwmachine(""),deviceToken(""),idfv(""),screenSize(""),appid(""),mobileNetworkCode(""),routerMacAddress(""),wifiName(""),brands(""),macaddress(""),androidid(""),mid(""),city(""),street(""),oauth_consumer_key(""),app_channel(""),openudid("")
        {
        }
        void resetDefautlt()
        {
            hwmodel = "";
            hwmachine = "";
            deviceToken = "";
            idfv = "";
            screenSize = "";
            appid = "";
            mobileNetworkCode = "";
            routerMacAddress = "";
            wifiName = "";
            brands = "";
            macaddress = "";
            androidid = "";
            mid = "";
            city = "";
            street = "";
            oauth_consumer_key = "";
            app_channel = "";
            openudid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(hwmodel, 0);
            _os.write(hwmachine, 1);
            _os.write(deviceToken, 2);
            _os.write(idfv, 3);
            _os.write(screenSize, 4);
            _os.write(appid, 5);
            _os.write(mobileNetworkCode, 6);
            _os.write(routerMacAddress, 7);
            _os.write(wifiName, 8);
            _os.write(brands, 9);
            _os.write(macaddress, 10);
            _os.write(androidid, 11);
            _os.write(mid, 12);
            _os.write(city, 13);
            _os.write(street, 14);
            _os.write(oauth_consumer_key, 15);
            _os.write(app_channel, 16);
            _os.write(openudid, 17);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(hwmodel, 0, false);
            _is.read(hwmachine, 1, false);
            _is.read(deviceToken, 2, false);
            _is.read(idfv, 3, false);
            _is.read(screenSize, 4, false);
            _is.read(appid, 5, false);
            _is.read(mobileNetworkCode, 6, false);
            _is.read(routerMacAddress, 7, false);
            _is.read(wifiName, 8, false);
            _is.read(brands, 9, false);
            _is.read(macaddress, 10, false);
            _is.read(androidid, 11, false);
            _is.read(mid, 12, false);
            _is.read(city, 13, false);
            _is.read(street, 14, false);
            _is.read(oauth_consumer_key, 15, false);
            _is.read(app_channel, 16, false);
            _is.read(openudid, 17, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(hwmodel,"hwmodel");
            _ds.display(hwmachine,"hwmachine");
            _ds.display(deviceToken,"deviceToken");
            _ds.display(idfv,"idfv");
            _ds.display(screenSize,"screenSize");
            _ds.display(appid,"appid");
            _ds.display(mobileNetworkCode,"mobileNetworkCode");
            _ds.display(routerMacAddress,"routerMacAddress");
            _ds.display(wifiName,"wifiName");
            _ds.display(brands,"brands");
            _ds.display(macaddress,"macaddress");
            _ds.display(androidid,"androidid");
            _ds.display(mid,"mid");
            _ds.display(city,"city");
            _ds.display(street,"street");
            _ds.display(oauth_consumer_key,"oauth_consumer_key");
            _ds.display(app_channel,"app_channel");
            _ds.display(openudid,"openudid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(hwmodel, true);
            _ds.displaySimple(hwmachine, true);
            _ds.displaySimple(deviceToken, true);
            _ds.displaySimple(idfv, true);
            _ds.displaySimple(screenSize, true);
            _ds.displaySimple(appid, true);
            _ds.displaySimple(mobileNetworkCode, true);
            _ds.displaySimple(routerMacAddress, true);
            _ds.displaySimple(wifiName, true);
            _ds.displaySimple(brands, true);
            _ds.displaySimple(macaddress, true);
            _ds.displaySimple(androidid, true);
            _ds.displaySimple(mid, true);
            _ds.displaySimple(city, true);
            _ds.displaySimple(street, true);
            _ds.displaySimple(oauth_consumer_key, true);
            _ds.displaySimple(app_channel, true);
            _ds.displaySimple(openudid, false);
            return _os;
        }
    public:
        std::string hwmodel;
        std::string hwmachine;
        std::string deviceToken;
        std::string idfv;
        std::string screenSize;
        std::string appid;
        std::string mobileNetworkCode;
        std::string routerMacAddress;
        std::string wifiName;
        std::string brands;
        std::string macaddress;
        std::string androidid;
        std::string mid;
        std::string city;
        std::string street;
        std::string oauth_consumer_key;
        std::string app_channel;
        std::string openudid;
    };
    inline bool operator==(const AdPlatformInfo&l, const AdPlatformInfo&r)
    {
        return l.hwmodel == r.hwmodel && l.hwmachine == r.hwmachine && l.deviceToken == r.deviceToken && l.idfv == r.idfv && l.screenSize == r.screenSize && l.appid == r.appid && l.mobileNetworkCode == r.mobileNetworkCode && l.routerMacAddress == r.routerMacAddress && l.wifiName == r.wifiName && l.brands == r.brands && l.macaddress == r.macaddress && l.androidid == r.androidid && l.mid == r.mid && l.city == r.city && l.street == r.street && l.oauth_consumer_key == r.oauth_consumer_key && l.app_channel == r.app_channel && l.openudid == r.openudid;
    }
    inline bool operator!=(const AdPlatformInfo&l, const AdPlatformInfo&r)
    {
        return !(l == r);
    }

    struct AdSdkRequestInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdSdkRequestInfo";
        }
        static string MD5()
        {
            return "dc624359f45e022be72adf1bbeaa79d9";
        }
        AdSdkRequestInfo()
        :sdkversion(""),requestid(""),appversion(""),requestCookie("")
        {
        }
        void resetDefautlt()
        {
            sdkversion = "";
            requestid = "";
            appversion = "";
            requestCookie = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sdkversion, 0);
            _os.write(requestid, 1);
            _os.write(appversion, 2);
            _os.write(deduplicationOids, 3);
            _os.write(requestCookie, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sdkversion, 0, false);
            _is.read(requestid, 1, false);
            _is.read(appversion, 2, false);
            _is.read(deduplicationOids, 3, false);
            _is.read(requestCookie, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sdkversion,"sdkversion");
            _ds.display(requestid,"requestid");
            _ds.display(appversion,"appversion");
            _ds.display(deduplicationOids,"deduplicationOids");
            _ds.display(requestCookie,"requestCookie");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sdkversion, true);
            _ds.displaySimple(requestid, true);
            _ds.displaySimple(appversion, true);
            _ds.displaySimple(deduplicationOids, true);
            _ds.displaySimple(requestCookie, false);
            return _os;
        }
    public:
        std::string sdkversion;
        std::string requestid;
        std::string appversion;
        vector<std::string> deduplicationOids;
        std::string requestCookie;
    };
    inline bool operator==(const AdSdkRequestInfo&l, const AdSdkRequestInfo&r)
    {
        return l.sdkversion == r.sdkversion && l.requestid == r.requestid && l.appversion == r.appversion && l.deduplicationOids == r.deduplicationOids && l.requestCookie == r.requestCookie;
    }
    inline bool operator!=(const AdSdkRequestInfo&l, const AdSdkRequestInfo&r)
    {
        return !(l == r);
    }

    struct AdRequestInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdRequestInfo";
        }
        static string MD5()
        {
            return "b861c0a6a8bd0eb5cf8eee60b6956409";
        }
        AdRequestInfo()
        :timestamps(0)
        {
        }
        void resetDefautlt()
        {
            timestamps = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(platformInfo, 0);
            _os.write(timestamps, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(platformInfo, 0, false);
            _is.read(timestamps, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(platformInfo,"platformInfo");
            _ds.display(timestamps,"timestamps");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(platformInfo, true);
            _ds.displaySimple(timestamps, false);
            return _os;
        }
    public:
        jce::AdPlatformInfo platformInfo;
        taf::Int64 timestamps;
    };
    inline bool operator==(const AdRequestInfo&l, const AdRequestInfo&r)
    {
        return l.platformInfo == r.platformInfo && l.timestamps == r.timestamps;
    }
    inline bool operator!=(const AdRequestInfo&l, const AdRequestInfo&r)
    {
        return !(l == r);
    }

    struct AdSdkResponseInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdSdkResponseInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        AdSdkResponseInfo()
        :responseCookie(""),adxResponse("")
        {
        }
        void resetDefautlt()
        {
            responseCookie = "";
            adxResponse = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(responseCookie, 0);
            _os.write(adxResponse, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(responseCookie, 0, false);
            _is.read(adxResponse, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(responseCookie,"responseCookie");
            _ds.display(adxResponse,"adxResponse");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(responseCookie, true);
            _ds.displaySimple(adxResponse, false);
            return _os;
        }
    public:
        std::string responseCookie;
        std::string adxResponse;
    };
    inline bool operator==(const AdSdkResponseInfo&l, const AdSdkResponseInfo&r)
    {
        return l.responseCookie == r.responseCookie && l.adxResponse == r.adxResponse;
    }
    inline bool operator!=(const AdSdkResponseInfo&l, const AdSdkResponseInfo&r)
    {
        return !(l == r);
    }

    struct AdCoreReportInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdCoreReportInfo";
        }
        static string MD5()
        {
            return "94e28e5af880676c628561ec7bc4fa8b";
        }
        AdCoreReportInfo()
        :adReportKey(""),adReportParams(""),dp3ReportEnable(0),wisdomReportEnable(0)
        {
        }
        void resetDefautlt()
        {
            adReportKey = "";
            adReportParams = "";
            dp3ReportEnable = 0;
            wisdomReportEnable = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(exposureReport, 0);
            _os.write(clickReport, 1);
            _os.write(effectReport, 2);
            _os.write(adReportKey, 3);
            _os.write(adReportParams, 4);
            _os.write(originExposureReport, 5);
            _os.write(emptyReport, 6);
            _os.write(dp3ReportEnable, 7);
            _os.write(wisdomReportEnable, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(exposureReport, 0, false);
            _is.read(clickReport, 1, false);
            _is.read(effectReport, 2, false);
            _is.read(adReportKey, 3, false);
            _is.read(adReportParams, 4, false);
            _is.read(originExposureReport, 5, false);
            _is.read(emptyReport, 6, false);
            _is.read(dp3ReportEnable, 7, false);
            _is.read(wisdomReportEnable, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(exposureReport,"exposureReport");
            _ds.display(clickReport,"clickReport");
            _ds.display(effectReport,"effectReport");
            _ds.display(adReportKey,"adReportKey");
            _ds.display(adReportParams,"adReportParams");
            _ds.display(originExposureReport,"originExposureReport");
            _ds.display(emptyReport,"emptyReport");
            _ds.display(dp3ReportEnable,"dp3ReportEnable");
            _ds.display(wisdomReportEnable,"wisdomReportEnable");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(exposureReport, true);
            _ds.displaySimple(clickReport, true);
            _ds.displaySimple(effectReport, true);
            _ds.displaySimple(adReportKey, true);
            _ds.displaySimple(adReportParams, true);
            _ds.displaySimple(originExposureReport, true);
            _ds.displaySimple(emptyReport, true);
            _ds.displaySimple(dp3ReportEnable, true);
            _ds.displaySimple(wisdomReportEnable, false);
            return _os;
        }
    public:
        jce::AdReport exposureReport;
        jce::AdReport clickReport;
        jce::AdReport effectReport;
        std::string adReportKey;
        std::string adReportParams;
        jce::AdReport originExposureReport;
        jce::AdReport emptyReport;
        taf::Int32 dp3ReportEnable;
        taf::Int32 wisdomReportEnable;
    };
    inline bool operator==(const AdCoreReportInfo&l, const AdCoreReportInfo&r)
    {
        return l.exposureReport == r.exposureReport && l.clickReport == r.clickReport && l.effectReport == r.effectReport && l.adReportKey == r.adReportKey && l.adReportParams == r.adReportParams && l.originExposureReport == r.originExposureReport && l.emptyReport == r.emptyReport && l.dp3ReportEnable == r.dp3ReportEnable && l.wisdomReportEnable == r.wisdomReportEnable;
    }
    inline bool operator!=(const AdCoreReportInfo&l, const AdCoreReportInfo&r)
    {
        return !(l == r);
    }

    struct AdBaseInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdBaseInfo";
        }
        static string MD5()
        {
            return "6fc56e465766a0a928524ce93b788dd7";
        }
        AdBaseInfo()
        :adId(""),adCookie(""),isEmptyAd(0)
        {
        }
        void resetDefautlt()
        {
            adId = "";
            adCookie = "";
            isEmptyAd = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adId, 0);
            _os.write(reportInfo, 1);
            _os.write(extraParam, 2);
            _os.write(adCookie, 3);
            _os.write(isEmptyAd, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adId, 0, true);
            _is.read(reportInfo, 1, false);
            _is.read(extraParam, 2, false);
            _is.read(adCookie, 3, false);
            _is.read(isEmptyAd, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adId,"adId");
            _ds.display(reportInfo,"reportInfo");
            _ds.display(extraParam,"extraParam");
            _ds.display(adCookie,"adCookie");
            _ds.display(isEmptyAd,"isEmptyAd");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adId, true);
            _ds.displaySimple(reportInfo, true);
            _ds.displaySimple(extraParam, true);
            _ds.displaySimple(adCookie, true);
            _ds.displaySimple(isEmptyAd, false);
            return _os;
        }
    public:
        std::string adId;
        jce::AdCoreReportInfo reportInfo;
        map<std::string, std::string> extraParam;
        std::string adCookie;
        taf::Int32 isEmptyAd;
    };
    inline bool operator==(const AdBaseInfo&l, const AdBaseInfo&r)
    {
        return l.adId == r.adId && l.reportInfo == r.reportInfo && l.extraParam == r.extraParam && l.adCookie == r.adCookie && l.isEmptyAd == r.isEmptyAd;
    }
    inline bool operator!=(const AdBaseInfo&l, const AdBaseInfo&r)
    {
        return !(l == r);
    }

    struct AdMarkLableInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdMarkLableInfo";
        }
        static string MD5()
        {
            return "12565671b850c05d844047e42b551cea";
        }
        AdMarkLableInfo()
        :position(0),imageUrl(""),type(0),bgColor(""),primeText("")
        {
        }
        void resetDefautlt()
        {
            position = 0;
            imageUrl = "";
            type = 0;
            bgColor = "";
            primeText = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(position, 0);
            _os.write(imageUrl, 1);
            _os.write(type, 2);
            _os.write(bgColor, 3);
            _os.write(primeText, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(position, 0, true);
            _is.read(imageUrl, 1, false);
            _is.read(type, 2, false);
            _is.read(bgColor, 3, false);
            _is.read(primeText, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(position,"position");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(type,"type");
            _ds.display(bgColor,"bgColor");
            _ds.display(primeText,"primeText");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(position, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(bgColor, true);
            _ds.displaySimple(primeText, false);
            return _os;
        }
    public:
        taf::Char position;
        std::string imageUrl;
        taf::Char type;
        std::string bgColor;
        std::string primeText;
    };
    inline bool operator==(const AdMarkLableInfo&l, const AdMarkLableInfo&r)
    {
        return l.position == r.position && l.imageUrl == r.imageUrl && l.type == r.type && l.bgColor == r.bgColor && l.primeText == r.primeText;
    }
    inline bool operator!=(const AdMarkLableInfo&l, const AdMarkLableInfo&r)
    {
        return !(l == r);
    }

    struct AdSkinInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdSkinInfo";
        }
        static string MD5()
        {
            return "f5514fa449346e5e88e91cb4f2d55d5f";
        }
        AdSkinInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adBaseInfo, 0);
            _os.write(markLableList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adBaseInfo, 0, false);
            _is.read(markLableList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adBaseInfo,"adBaseInfo");
            _ds.display(markLableList,"markLableList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adBaseInfo, true);
            _ds.displaySimple(markLableList, false);
            return _os;
        }
    public:
        jce::AdBaseInfo adBaseInfo;
        vector<jce::AdMarkLableInfo> markLableList;
    };
    inline bool operator==(const AdSkinInfo&l, const AdSkinInfo&r)
    {
        return l.adBaseInfo == r.adBaseInfo && l.markLableList == r.markLableList;
    }
    inline bool operator!=(const AdSkinInfo&l, const AdSkinInfo&r)
    {
        return !(l == r);
    }

    struct AdHotWordInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdHotWordInfo";
        }
        static string MD5()
        {
            return "4e7ad2ba5f1e89fb5db048b644e6eb02";
        }
        AdHotWordInfo()
        :from(0),dataKey("")
        {
        }
        void resetDefautlt()
        {
            from = 0;
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adBaseInfo, 0);
            _os.write(from, 1);
            _os.write(dataKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adBaseInfo, 0, false);
            _is.read(from, 1, false);
            _is.read(dataKey, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adBaseInfo,"adBaseInfo");
            _ds.display(from,"from");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adBaseInfo, true);
            _ds.displaySimple(from, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        jce::AdBaseInfo adBaseInfo;
        taf::Int32 from;
        std::string dataKey;
    };
    inline bool operator==(const AdHotWordInfo&l, const AdHotWordInfo&r)
    {
        return l.adBaseInfo == r.adBaseInfo && l.from == r.from && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const AdHotWordInfo&l, const AdHotWordInfo&r)
    {
        return !(l == r);
    }

    struct AdCommonConfigRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdCommonConfigRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        AdCommonConfigRequest()
        :requestId("")
        {
        }
        void resetDefautlt()
        {
            requestId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(requestId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(requestId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(requestId,"requestId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(requestId, false);
            return _os;
        }
    public:
        std::string requestId;
    };
    inline bool operator==(const AdCommonConfigRequest&l, const AdCommonConfigRequest&r)
    {
        return l.requestId == r.requestId;
    }
    inline bool operator!=(const AdCommonConfigRequest&l, const AdCommonConfigRequest&r)
    {
        return !(l == r);
    }

    struct AdCommonConfigResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdCommonConfigResponse";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        AdCommonConfigResponse()
        :errCode(0),configJson("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            configJson = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(configJson, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(configJson, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(configJson,"configJson");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(configJson, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string configJson;
    };
    inline bool operator==(const AdCommonConfigResponse&l, const AdCommonConfigResponse&r)
    {
        return l.errCode == r.errCode && l.configJson == r.configJson;
    }
    inline bool operator!=(const AdCommonConfigResponse&l, const AdCommonConfigResponse&r)
    {
        return !(l == r);
    }

    struct AdRangeReport : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdRangeReport";
        }
        static string MD5()
        {
            return "2d2c1bfed1680e5f86e3a74508cdf282";
        }
        AdRangeReport()
        :reportBegin(0),reportEnd(0)
        {
        }
        void resetDefautlt()
        {
            reportBegin = 0;
            reportEnd = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(reportBegin, 0);
            _os.write(reportEnd, 1);
            _os.write(adReport, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(reportBegin, 0, false);
            _is.read(reportEnd, 1, false);
            _is.read(adReport, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(reportBegin,"reportBegin");
            _ds.display(reportEnd,"reportEnd");
            _ds.display(adReport,"adReport");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(reportBegin, true);
            _ds.displaySimple(reportEnd, true);
            _ds.displaySimple(adReport, false);
            return _os;
        }
    public:
        taf::Int32 reportBegin;
        taf::Int32 reportEnd;
        jce::AdReport adReport;
    };
    inline bool operator==(const AdRangeReport&l, const AdRangeReport&r)
    {
        return l.reportBegin == r.reportBegin && l.reportEnd == r.reportEnd && l.adReport == r.adReport;
    }
    inline bool operator!=(const AdRangeReport&l, const AdRangeReport&r)
    {
        return !(l == r);
    }

    struct AdInSideVideoExposureItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInSideVideoExposureItem";
        }
        static string MD5()
        {
            return "4252017759054764d62ea561790b89b5";
        }
        AdInSideVideoExposureItem()
        :adReportKey(""),adReportParams("")
        {
        }
        void resetDefautlt()
        {
            adReportKey = "";
            adReportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(originExposureReportList, 0);
            _os.write(exposureReportList, 1);
            _os.write(emptyReport, 2);
            _os.write(adReportKey, 3);
            _os.write(adReportParams, 4);
            _os.write(playbackReport, 5);
            _os.write(rangeReportList, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(originExposureReportList, 0, false);
            _is.read(exposureReportList, 1, false);
            _is.read(emptyReport, 2, false);
            _is.read(adReportKey, 3, false);
            _is.read(adReportParams, 4, false);
            _is.read(playbackReport, 5, false);
            _is.read(rangeReportList, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(originExposureReportList,"originExposureReportList");
            _ds.display(exposureReportList,"exposureReportList");
            _ds.display(emptyReport,"emptyReport");
            _ds.display(adReportKey,"adReportKey");
            _ds.display(adReportParams,"adReportParams");
            _ds.display(playbackReport,"playbackReport");
            _ds.display(rangeReportList,"rangeReportList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(originExposureReportList, true);
            _ds.displaySimple(exposureReportList, true);
            _ds.displaySimple(emptyReport, true);
            _ds.displaySimple(adReportKey, true);
            _ds.displaySimple(adReportParams, true);
            _ds.displaySimple(playbackReport, true);
            _ds.displaySimple(rangeReportList, false);
            return _os;
        }
    public:
        vector<jce::AdReport> originExposureReportList;
        vector<jce::AdReport> exposureReportList;
        jce::AdReport emptyReport;
        std::string adReportKey;
        std::string adReportParams;
        jce::AdReport playbackReport;
        vector<jce::AdRangeReport> rangeReportList;
    };
    inline bool operator==(const AdInSideVideoExposureItem&l, const AdInSideVideoExposureItem&r)
    {
        return l.originExposureReportList == r.originExposureReportList && l.exposureReportList == r.exposureReportList && l.emptyReport == r.emptyReport && l.adReportKey == r.adReportKey && l.adReportParams == r.adReportParams && l.playbackReport == r.playbackReport && l.rangeReportList == r.rangeReportList;
    }
    inline bool operator!=(const AdInSideVideoExposureItem&l, const AdInSideVideoExposureItem&r)
    {
        return !(l == r);
    }

    struct AdActionReport : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdActionReport";
        }
        static string MD5()
        {
            return "44536c206833e7484d4b1e6d35c120d6";
        }
        AdActionReport()
        :adReportKey(""),adReportParams("")
        {
        }
        void resetDefautlt()
        {
            adReportKey = "";
            adReportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(clickReport, 0);
            _os.write(effectReport, 1);
            _os.write(feedBackReport, 2);
            _os.write(adReportKey, 3);
            _os.write(adReportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(clickReport, 0, false);
            _is.read(effectReport, 1, false);
            _is.read(feedBackReport, 2, false);
            _is.read(adReportKey, 3, false);
            _is.read(adReportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(clickReport,"clickReport");
            _ds.display(effectReport,"effectReport");
            _ds.display(feedBackReport,"feedBackReport");
            _ds.display(adReportKey,"adReportKey");
            _ds.display(adReportParams,"adReportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(clickReport, true);
            _ds.displaySimple(effectReport, true);
            _ds.displaySimple(feedBackReport, true);
            _ds.displaySimple(adReportKey, true);
            _ds.displaySimple(adReportParams, false);
            return _os;
        }
    public:
        jce::AdReport clickReport;
        jce::AdReport effectReport;
        jce::AdReport feedBackReport;
        std::string adReportKey;
        std::string adReportParams;
    };
    inline bool operator==(const AdActionReport&l, const AdActionReport&r)
    {
        return l.clickReport == r.clickReport && l.effectReport == r.effectReport && l.feedBackReport == r.feedBackReport && l.adReportKey == r.adReportKey && l.adReportParams == r.adReportParams;
    }
    inline bool operator!=(const AdActionReport&l, const AdActionReport&r)
    {
        return !(l == r);
    }

    struct AdUrlItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdUrlItem";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        AdUrlItem()
        :url("")
        {
        }
        void resetDefautlt()
        {
            url = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(url, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(url, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(url,"url");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(url, false);
            return _os;
        }
    public:
        std::string url;
    };
    inline bool operator==(const AdUrlItem&l, const AdUrlItem&r)
    {
        return l.url == r.url;
    }
    inline bool operator!=(const AdUrlItem&l, const AdUrlItem&r)
    {
        return !(l == r);
    }

    struct AdDownloadItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdDownloadItem";
        }
        static string MD5()
        {
            return "4a323488ac4a98ca63e5e90244b26187";
        }
        AdDownloadItem()
        :packageName(""),appIconUrl(""),appName(""),downloadType(0),versionCode(0),channelId(""),autoDownload(false),autoInstall(false),downloadActionType(0)
        {
        }
        void resetDefautlt()
        {
            packageName = "";
            appIconUrl = "";
            appName = "";
            downloadType = 0;
            versionCode = 0;
            channelId = "";
            autoDownload = false;
            autoInstall = false;
            downloadActionType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(urlItem, 0);
            _os.write(packageName, 1);
            _os.write(appIconUrl, 2);
            _os.write(appName, 3);
            _os.write(downloadType, 4);
            _os.write(versionCode, 5);
            _os.write(channelId, 6);
            _os.write(autoDownload, 7);
            _os.write(autoInstall, 8);
            _os.write(downloadActionType, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(urlItem, 0, false);
            _is.read(packageName, 1, false);
            _is.read(appIconUrl, 2, false);
            _is.read(appName, 3, false);
            _is.read(downloadType, 4, false);
            _is.read(versionCode, 5, false);
            _is.read(channelId, 6, false);
            _is.read(autoDownload, 7, false);
            _is.read(autoInstall, 8, false);
            _is.read(downloadActionType, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(urlItem,"urlItem");
            _ds.display(packageName,"packageName");
            _ds.display(appIconUrl,"appIconUrl");
            _ds.display(appName,"appName");
            _ds.display(downloadType,"downloadType");
            _ds.display(versionCode,"versionCode");
            _ds.display(channelId,"channelId");
            _ds.display(autoDownload,"autoDownload");
            _ds.display(autoInstall,"autoInstall");
            _ds.display(downloadActionType,"downloadActionType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(urlItem, true);
            _ds.displaySimple(packageName, true);
            _ds.displaySimple(appIconUrl, true);
            _ds.displaySimple(appName, true);
            _ds.displaySimple(downloadType, true);
            _ds.displaySimple(versionCode, true);
            _ds.displaySimple(channelId, true);
            _ds.displaySimple(autoDownload, true);
            _ds.displaySimple(autoInstall, true);
            _ds.displaySimple(downloadActionType, false);
            return _os;
        }
    public:
        jce::AdUrlItem urlItem;
        std::string packageName;
        std::string appIconUrl;
        std::string appName;
        taf::Int32 downloadType;
        taf::Int32 versionCode;
        std::string channelId;
        taf::Bool autoDownload;
        taf::Bool autoInstall;
        taf::Int32 downloadActionType;
    };
    inline bool operator==(const AdDownloadItem&l, const AdDownloadItem&r)
    {
        return l.urlItem == r.urlItem && l.packageName == r.packageName && l.appIconUrl == r.appIconUrl && l.appName == r.appName && l.downloadType == r.downloadType && l.versionCode == r.versionCode && l.channelId == r.channelId && l.autoDownload == r.autoDownload && l.autoInstall == r.autoInstall && l.downloadActionType == r.downloadActionType;
    }
    inline bool operator!=(const AdDownloadItem&l, const AdDownloadItem&r)
    {
        return !(l == r);
    }

    struct AdOpenAppItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdOpenAppItem";
        }
        static string MD5()
        {
            return "b34327b6ae62e3fb1608a922c13f919e";
        }
        AdOpenAppItem()
        :openFailedAction(jce::EAdopenAppFailedNone),appName(""),packageName("")
        {
        }
        void resetDefautlt()
        {
            appName = "";
            packageName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(packageAction, 0);
            _os.write((taf::Int32)openFailedAction, 1);
            _os.write(downloadItem, 2);
            _os.write(appName, 3);
            _os.write(packageName, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(packageAction, 0, false);
            taf::Int32 eTemp1 = jce::EAdopenAppFailedNone;
            _is.read(eTemp1, 1, false);
            openFailedAction = (jce::EAdOpenAppFailedAction)eTemp1;
            _is.read(downloadItem, 2, false);
            _is.read(appName, 3, false);
            _is.read(packageName, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(packageAction,"packageAction");
            _ds.display((taf::Int32)openFailedAction,"openFailedAction");
            _ds.display(downloadItem,"downloadItem");
            _ds.display(appName,"appName");
            _ds.display(packageName,"packageName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(packageAction, true);
            _ds.displaySimple((taf::Int32)openFailedAction, true);
            _ds.displaySimple(downloadItem, true);
            _ds.displaySimple(appName, true);
            _ds.displaySimple(packageName, false);
            return _os;
        }
    public:
        jce::PackageAction packageAction;
        jce::EAdOpenAppFailedAction openFailedAction;
        jce::AdDownloadItem downloadItem;
        std::string appName;
        std::string packageName;
    };
    inline bool operator==(const AdOpenAppItem&l, const AdOpenAppItem&r)
    {
        return l.packageAction == r.packageAction && l.openFailedAction == r.openFailedAction && l.downloadItem == r.downloadItem && l.appName == r.appName && l.packageName == r.packageName;
    }
    inline bool operator!=(const AdOpenAppItem&l, const AdOpenAppItem&r)
    {
        return !(l == r);
    }

    struct AdOpenMiniProgramItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdOpenMiniProgramItem";
        }
        static string MD5()
        {
            return "7ff838a8e51f90649a0aa10935999181";
        }
        AdOpenMiniProgramItem()
        :appName("")
        {
        }
        void resetDefautlt()
        {
            appName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(urlItem, 0);
            _os.write(appName, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(urlItem, 0, false);
            _is.read(appName, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(urlItem,"urlItem");
            _ds.display(appName,"appName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(urlItem, true);
            _ds.displaySimple(appName, false);
            return _os;
        }
    public:
        jce::AdUrlItem urlItem;
        std::string appName;
    };
    inline bool operator==(const AdOpenMiniProgramItem&l, const AdOpenMiniProgramItem&r)
    {
        return l.urlItem == r.urlItem && l.appName == r.appName;
    }
    inline bool operator!=(const AdOpenMiniProgramItem&l, const AdOpenMiniProgramItem&r)
    {
        return !(l == r);
    }

    struct AdOpenCanvasItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdOpenCanvasItem";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        AdOpenCanvasItem()
        :verticalUrl(""),horizontalUrl("")
        {
        }
        void resetDefautlt()
        {
            verticalUrl = "";
            horizontalUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(verticalUrl, 0);
            _os.write(horizontalUrl, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(verticalUrl, 0, false);
            _is.read(horizontalUrl, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(verticalUrl,"verticalUrl");
            _ds.display(horizontalUrl,"horizontalUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(verticalUrl, true);
            _ds.displaySimple(horizontalUrl, false);
            return _os;
        }
    public:
        std::string verticalUrl;
        std::string horizontalUrl;
    };
    inline bool operator==(const AdOpenCanvasItem&l, const AdOpenCanvasItem&r)
    {
        return l.verticalUrl == r.verticalUrl && l.horizontalUrl == r.horizontalUrl;
    }
    inline bool operator!=(const AdOpenCanvasItem&l, const AdOpenCanvasItem&r)
    {
        return !(l == r);
    }

    struct AdH5UrlItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdH5UrlItem";
        }
        static string MD5()
        {
            return "5776fd7103fcea055637c7e8b9708bb0";
        }
        AdH5UrlItem()
        :webviewType(1),adxSplashH5Url(""),h5UrlValid(0)
        {
        }
        void resetDefautlt()
        {
            webviewType = 1;
            adxSplashH5Url = "";
            h5UrlValid = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(webviewType, 0);
            _os.write(adxSplashH5Url, 1);
            _os.write(h5UrlValid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(webviewType, 0, false);
            _is.read(adxSplashH5Url, 1, false);
            _is.read(h5UrlValid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(webviewType,"webviewType");
            _ds.display(adxSplashH5Url,"adxSplashH5Url");
            _ds.display(h5UrlValid,"h5UrlValid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(webviewType, true);
            _ds.displaySimple(adxSplashH5Url, true);
            _ds.displaySimple(h5UrlValid, false);
            return _os;
        }
    public:
        taf::Int32 webviewType;
        std::string adxSplashH5Url;
        taf::Int32 h5UrlValid;
    };
    inline bool operator==(const AdH5UrlItem&l, const AdH5UrlItem&r)
    {
        return l.webviewType == r.webviewType && l.adxSplashH5Url == r.adxSplashH5Url && l.h5UrlValid == r.h5UrlValid;
    }
    inline bool operator!=(const AdH5UrlItem&l, const AdH5UrlItem&r)
    {
        return !(l == r);
    }

    struct AdActionItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdActionItem";
        }
        static string MD5()
        {
            return "a88cff8bf6cf493b199077aaa5f8de06";
        }
        AdActionItem()
        :parseType(0)
        {
        }
        void resetDefautlt()
        {
            parseType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adUrl, 0);
            _os.write(adDownload, 1);
            _os.write(adOpenApp, 2);
            _os.write(adOpenMiniProgram, 3);
            _os.write(adOpenCanvasItem, 4);
            _os.write(parseType, 5);
            _os.write(adH5UrlItem, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adUrl, 0, false);
            _is.read(adDownload, 1, false);
            _is.read(adOpenApp, 2, false);
            _is.read(adOpenMiniProgram, 3, false);
            _is.read(adOpenCanvasItem, 4, false);
            _is.read(parseType, 5, false);
            _is.read(adH5UrlItem, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adUrl,"adUrl");
            _ds.display(adDownload,"adDownload");
            _ds.display(adOpenApp,"adOpenApp");
            _ds.display(adOpenMiniProgram,"adOpenMiniProgram");
            _ds.display(adOpenCanvasItem,"adOpenCanvasItem");
            _ds.display(parseType,"parseType");
            _ds.display(adH5UrlItem,"adH5UrlItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adUrl, true);
            _ds.displaySimple(adDownload, true);
            _ds.displaySimple(adOpenApp, true);
            _ds.displaySimple(adOpenMiniProgram, true);
            _ds.displaySimple(adOpenCanvasItem, true);
            _ds.displaySimple(parseType, true);
            _ds.displaySimple(adH5UrlItem, false);
            return _os;
        }
    public:
        jce::AdUrlItem adUrl;
        jce::AdDownloadItem adDownload;
        jce::AdOpenAppItem adOpenApp;
        jce::AdOpenMiniProgramItem adOpenMiniProgram;
        jce::AdOpenCanvasItem adOpenCanvasItem;
        taf::Int32 parseType;
        jce::AdH5UrlItem adH5UrlItem;
    };
    inline bool operator==(const AdActionItem&l, const AdActionItem&r)
    {
        return l.adUrl == r.adUrl && l.adDownload == r.adDownload && l.adOpenApp == r.adOpenApp && l.adOpenMiniProgram == r.adOpenMiniProgram && l.adOpenCanvasItem == r.adOpenCanvasItem && l.parseType == r.parseType && l.adH5UrlItem == r.adH5UrlItem;
    }
    inline bool operator!=(const AdActionItem&l, const AdActionItem&r)
    {
        return !(l == r);
    }

    struct AdAction : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdAction";
        }
        static string MD5()
        {
            return "9c0a5ca02b837d521b5293c479bd517a";
        }
        AdAction()
        :actionType(jce::EAdActionOpenH5),pageType(0)
        {
        }
        void resetDefautlt()
        {
            pageType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)actionType, 0);
            _os.write(actionItem, 1);
            _os.write(actionReport, 2);
            _os.write(pageType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = jce::EAdActionOpenH5;
            _is.read(eTemp0, 0, true);
            actionType = (jce::EAdActionType)eTemp0;
            _is.read(actionItem, 1, false);
            _is.read(actionReport, 2, false);
            _is.read(pageType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)actionType,"actionType");
            _ds.display(actionItem,"actionItem");
            _ds.display(actionReport,"actionReport");
            _ds.display(pageType,"pageType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)actionType, true);
            _ds.displaySimple(actionItem, true);
            _ds.displaySimple(actionReport, true);
            _ds.displaySimple(pageType, false);
            return _os;
        }
    public:
        jce::EAdActionType actionType;
        jce::AdActionItem actionItem;
        jce::AdActionReport actionReport;
        taf::Int32 pageType;
    };
    inline bool operator==(const AdAction&l, const AdAction&r)
    {
        return l.actionType == r.actionType && l.actionItem == r.actionItem && l.actionReport == r.actionReport && l.pageType == r.pageType;
    }
    inline bool operator!=(const AdAction&l, const AdAction&r)
    {
        return !(l == r);
    }

    struct AdPositionItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdPositionItem";
        }
        static string MD5()
        {
            return "30fae931f15f68257d76e01ad4f09150";
        }
        AdPositionItem()
        :channelId(""),position(0),absPosition(0),adSpace("")
        {
        }
        void resetDefautlt()
        {
            channelId = "";
            position = 0;
            absPosition = 0;
            adSpace = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(channelId, 0);
            _os.write(position, 1);
            _os.write(absPosition, 2);
            _os.write(adSpace, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(channelId, 0, false);
            _is.read(position, 1, false);
            _is.read(absPosition, 2, false);
            _is.read(adSpace, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(channelId,"channelId");
            _ds.display(position,"position");
            _ds.display(absPosition,"absPosition");
            _ds.display(adSpace,"adSpace");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(channelId, true);
            _ds.displaySimple(position, true);
            _ds.displaySimple(absPosition, true);
            _ds.displaySimple(adSpace, false);
            return _os;
        }
    public:
        std::string channelId;
        taf::Int32 position;
        taf::Int32 absPosition;
        std::string adSpace;
    };
    inline bool operator==(const AdPositionItem&l, const AdPositionItem&r)
    {
        return l.channelId == r.channelId && l.position == r.position && l.absPosition == r.absPosition && l.adSpace == r.adSpace;
    }
    inline bool operator!=(const AdPositionItem&l, const AdPositionItem&r)
    {
        return !(l == r);
    }

    struct AdOrderItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdOrderItem";
        }
        static string MD5()
        {
            return "738734f4dae5fef125cbe4ce3b1d6564";
        }
        AdOrderItem()
        :orderId(""),adType(jce::EAdTypeUnknown)
        {
        }
        void resetDefautlt()
        {
            orderId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(orderId, 0);
            _os.write((taf::Int32)adType, 1);
            _os.write(exposureItem, 2);
            _os.write(adAction, 3);
            _os.write(positionItem, 4);
            _os.write(adExperiment, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(orderId, 0, true);
            taf::Int32 eTemp1 = jce::EAdTypeUnknown;
            _is.read(eTemp1, 1, false);
            adType = (jce::EAdType)eTemp1;
            _is.read(exposureItem, 2, false);
            _is.read(adAction, 3, false);
            _is.read(positionItem, 4, false);
            _is.read(adExperiment, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(orderId,"orderId");
            _ds.display((taf::Int32)adType,"adType");
            _ds.display(exposureItem,"exposureItem");
            _ds.display(adAction,"adAction");
            _ds.display(positionItem,"positionItem");
            _ds.display(adExperiment,"adExperiment");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(orderId, true);
            _ds.displaySimple((taf::Int32)adType, true);
            _ds.displaySimple(exposureItem, true);
            _ds.displaySimple(adAction, true);
            _ds.displaySimple(positionItem, true);
            _ds.displaySimple(adExperiment, false);
            return _os;
        }
    public:
        std::string orderId;
        jce::EAdType adType;
        jce::AdInSideVideoExposureItem exposureItem;
        jce::AdAction adAction;
        jce::AdPositionItem positionItem;
        map<std::string, std::string> adExperiment;
    };
    inline bool operator==(const AdOrderItem&l, const AdOrderItem&r)
    {
        return l.orderId == r.orderId && l.adType == r.adType && l.exposureItem == r.exposureItem && l.adAction == r.adAction && l.positionItem == r.positionItem && l.adExperiment == r.adExperiment;
    }
    inline bool operator!=(const AdOrderItem&l, const AdOrderItem&r)
    {
        return !(l == r);
    }

    struct AdInsideTitleInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideTitleInfo";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        AdInsideTitleInfo()
        :title(""),firstSubTitle(""),secondSubTitle(""),dspName("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            firstSubTitle = "";
            secondSubTitle = "";
            dspName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(firstSubTitle, 1);
            _os.write(secondSubTitle, 2);
            _os.write(dspName, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(firstSubTitle, 1, false);
            _is.read(secondSubTitle, 2, false);
            _is.read(dspName, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(firstSubTitle,"firstSubTitle");
            _ds.display(secondSubTitle,"secondSubTitle");
            _ds.display(dspName,"dspName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(firstSubTitle, true);
            _ds.displaySimple(secondSubTitle, true);
            _ds.displaySimple(dspName, false);
            return _os;
        }
    public:
        std::string title;
        std::string firstSubTitle;
        std::string secondSubTitle;
        std::string dspName;
    };
    inline bool operator==(const AdInsideTitleInfo&l, const AdInsideTitleInfo&r)
    {
        return l.title == r.title && l.firstSubTitle == r.firstSubTitle && l.secondSubTitle == r.secondSubTitle && l.dspName == r.dspName;
    }
    inline bool operator!=(const AdInsideTitleInfo&l, const AdInsideTitleInfo&r)
    {
        return !(l == r);
    }

    struct AdActionButtonInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdActionButtonInfo";
        }
        static string MD5()
        {
            return "d846e41cf1020eca3c2a0b61ceb890d6";
        }
        AdActionButtonInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actionButton, 0);
            _os.write(adAction, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actionButton, 0, false);
            _is.read(adAction, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actionButton,"actionButton");
            _ds.display(adAction,"adAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actionButton, true);
            _ds.displaySimple(adAction, false);
            return _os;
        }
    public:
        map<std::string, jce::AdActionButton> actionButton;
        jce::AdAction adAction;
    };
    inline bool operator==(const AdActionButtonInfo&l, const AdActionButtonInfo&r)
    {
        return l.actionButton == r.actionButton && l.adAction == r.adAction;
    }
    inline bool operator!=(const AdActionButtonInfo&l, const AdActionButtonInfo&r)
    {
        return !(l == r);
    }

    struct ImmersiveAdInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ImmersiveAdInfo";
        }
        static string MD5()
        {
            return "78c706deab88dc538c41c882776b991a";
        }
        ImmersiveAdInfo()
        :isValid(false),stayTime(0)
        {
        }
        void resetDefautlt()
        {
            isValid = false;
            stayTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(isValid, 0);
            _os.write(orderItem, 1);
            _os.write(adTitle, 2);
            _os.write(stayTime, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(isValid, 0, true);
            _is.read(orderItem, 1, false);
            _is.read(adTitle, 2, false);
            _is.read(stayTime, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(isValid,"isValid");
            _ds.display(orderItem,"orderItem");
            _ds.display(adTitle,"adTitle");
            _ds.display(stayTime,"stayTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(isValid, true);
            _ds.displaySimple(orderItem, true);
            _ds.displaySimple(adTitle, true);
            _ds.displaySimple(stayTime, false);
            return _os;
        }
    public:
        taf::Bool isValid;
        jce::AdOrderItem orderItem;
        jce::AdInsideTitleInfo adTitle;
        taf::Int32 stayTime;
    };
    inline bool operator==(const ImmersiveAdInfo&l, const ImmersiveAdInfo&r)
    {
        return l.isValid == r.isValid && l.orderItem == r.orderItem && l.adTitle == r.adTitle && l.stayTime == r.stayTime;
    }
    inline bool operator!=(const ImmersiveAdInfo&l, const ImmersiveAdInfo&r)
    {
        return !(l == r);
    }

    struct AdONATempletItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdONATempletItem";
        }
        static string MD5()
        {
            return "54e315f28abe470b721365d8ec77ad9a";
        }
        AdONATempletItem()
        :itemType(jce::EnumAdONALeftImageRightTextAdPoster)
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)itemType, 0);
            _os.write(data, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = jce::EnumAdONALeftImageRightTextAdPoster;
            _is.read(eTemp0, 0, true);
            itemType = (jce::EAdONAViewType)eTemp0;
            _is.read(data, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)itemType,"itemType");
            _ds.display(data,"data");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)itemType, true);
            _ds.displaySimple(data, false);
            return _os;
        }
    public:
        jce::EAdONAViewType itemType;
        vector<taf::Char> data;
    };
    inline bool operator==(const AdONATempletItem&l, const AdONATempletItem&r)
    {
        return l.itemType == r.itemType && l.data == r.data;
    }
    inline bool operator!=(const AdONATempletItem&l, const AdONATempletItem&r)
    {
        return !(l == r);
    }

    struct AdONATempletLine : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdONATempletLine";
        }
        static string MD5()
        {
            return "1892c2b05f262033fcb665700105fb0a";
        }
        AdONATempletLine()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(item, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(item, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(item,"item");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(item, false);
            return _os;
        }
    public:
        jce::AdONATempletItem item;
    };
    inline bool operator==(const AdONATempletLine&l, const AdONATempletLine&r)
    {
        return l.item == r.item;
    }
    inline bool operator!=(const AdONATempletLine&l, const AdONATempletLine&r)
    {
        return !(l == r);
    }

    struct AdcPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdcPoster";
        }
        static string MD5()
        {
            return "d6838bd9b8406cc242b1438c3f8d87f1";
        }
        AdcPoster()
        :imageUrl("")
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(markLabelList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, false);
            _is.read(markLabelList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(markLabelList,"markLabelList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(markLabelList, false);
            return _os;
        }
    public:
        std::string imageUrl;
        vector<jce::AdMarkLableInfo> markLabelList;
    };
    inline bool operator==(const AdcPoster&l, const AdcPoster&r)
    {
        return l.imageUrl == r.imageUrl && l.markLabelList == r.markLabelList;
    }
    inline bool operator!=(const AdcPoster&l, const AdcPoster&r)
    {
        return !(l == r);
    }

    struct AdDetailShowSizeInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdDetailShowSizeInfo";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        AdDetailShowSizeInfo()
        :contentCount(0),maxOutShowSize(0)
        {
        }
        void resetDefautlt()
        {
            contentCount = 0;
            maxOutShowSize = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(contentCount, 0);
            _os.write(maxOutShowSize, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(contentCount, 0, false);
            _is.read(maxOutShowSize, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(contentCount,"contentCount");
            _ds.display(maxOutShowSize,"maxOutShowSize");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(contentCount, true);
            _ds.displaySimple(maxOutShowSize, false);
            return _os;
        }
    public:
        taf::Int32 contentCount;
        taf::Int32 maxOutShowSize;
    };
    inline bool operator==(const AdDetailShowSizeInfo&l, const AdDetailShowSizeInfo&r)
    {
        return l.contentCount == r.contentCount && l.maxOutShowSize == r.maxOutShowSize;
    }
    inline bool operator!=(const AdDetailShowSizeInfo&l, const AdDetailShowSizeInfo&r)
    {
        return !(l == r);
    }


}

#define jce_AdReport_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParam,b.reportParam);jce_copy_struct(a.url,b.url);jce_copy_struct(a.apiReportUrl,b.apiReportUrl);jce_copy_struct(a.sdkReportUrl,b.sdkReportUrl);jce_copy_struct(a.reportTime,b.reportTime);

#define jce_AdShareItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.shareUrl,b.shareUrl);jce_copy_struct(a.shareTitle,b.shareTitle);jce_copy_struct(a.shareSubtitle,b.shareSubtitle);jce_copy_struct(a.shareImgUrl,b.shareImgUrl);jce_copy_struct(a.shareFromH5,b.shareFromH5);jce_copy_struct(a.sharePage,b.sharePage);jce_copy_struct(a.shareEnable,b.shareEnable);

#define jce_PackageAction_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.url,b.url);jce_copy_struct(a.coordinatesStr,b.coordinatesStr);

#define jce_AdActionButton_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.icon,b.icon);jce_copy_struct(a.tips,b.tips);

#define jce_AdCorner_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actionButton,b.actionButton);jce_copy_struct(a.packageAction,b.packageAction);jce_copy_struct(a.packageName,b.packageName);jce_copy_struct(a.appIconUrl,b.appIconUrl);jce_copy_struct(a.appName,b.appName);jce_copy_struct(a.highlightDelay,b.highlightDelay);jce_copy_struct(a.highlightColor,b.highlightColor);

#define jce_AdPlatformInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.hwmodel,b.hwmodel);jce_copy_struct(a.hwmachine,b.hwmachine);jce_copy_struct(a.deviceToken,b.deviceToken);jce_copy_struct(a.idfv,b.idfv);jce_copy_struct(a.screenSize,b.screenSize);jce_copy_struct(a.appid,b.appid);jce_copy_struct(a.mobileNetworkCode,b.mobileNetworkCode);jce_copy_struct(a.routerMacAddress,b.routerMacAddress);jce_copy_struct(a.wifiName,b.wifiName);jce_copy_struct(a.brands,b.brands);jce_copy_struct(a.macaddress,b.macaddress);jce_copy_struct(a.androidid,b.androidid);jce_copy_struct(a.mid,b.mid);jce_copy_struct(a.city,b.city);jce_copy_struct(a.street,b.street);jce_copy_struct(a.oauth_consumer_key,b.oauth_consumer_key);jce_copy_struct(a.app_channel,b.app_channel);jce_copy_struct(a.openudid,b.openudid);

#define jce_AdSdkRequestInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sdkversion,b.sdkversion);jce_copy_struct(a.requestid,b.requestid);jce_copy_struct(a.appversion,b.appversion);jce_copy_struct(a.deduplicationOids,b.deduplicationOids);jce_copy_struct(a.requestCookie,b.requestCookie);

#define jce_AdRequestInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.platformInfo,b.platformInfo);jce_copy_struct(a.timestamps,b.timestamps);

#define jce_AdSdkResponseInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.responseCookie,b.responseCookie);jce_copy_struct(a.adxResponse,b.adxResponse);

#define jce_AdCoreReportInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.exposureReport,b.exposureReport);jce_copy_struct(a.clickReport,b.clickReport);jce_copy_struct(a.effectReport,b.effectReport);jce_copy_struct(a.adReportKey,b.adReportKey);jce_copy_struct(a.adReportParams,b.adReportParams);jce_copy_struct(a.originExposureReport,b.originExposureReport);jce_copy_struct(a.emptyReport,b.emptyReport);jce_copy_struct(a.dp3ReportEnable,b.dp3ReportEnable);jce_copy_struct(a.wisdomReportEnable,b.wisdomReportEnable);

#define jce_AdBaseInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adId,b.adId);jce_copy_struct(a.reportInfo,b.reportInfo);jce_copy_struct(a.extraParam,b.extraParam);jce_copy_struct(a.adCookie,b.adCookie);jce_copy_struct(a.isEmptyAd,b.isEmptyAd);

#define jce_AdMarkLableInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.position,b.position);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.type,b.type);jce_copy_struct(a.bgColor,b.bgColor);jce_copy_struct(a.primeText,b.primeText);

#define jce_AdSkinInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adBaseInfo,b.adBaseInfo);jce_copy_struct(a.markLableList,b.markLableList);

#define jce_AdHotWordInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adBaseInfo,b.adBaseInfo);jce_copy_struct(a.from,b.from);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_AdCommonConfigRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.requestId,b.requestId);

#define jce_AdCommonConfigResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.configJson,b.configJson);

#define jce_AdRangeReport_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.reportBegin,b.reportBegin);jce_copy_struct(a.reportEnd,b.reportEnd);jce_copy_struct(a.adReport,b.adReport);

#define jce_AdInSideVideoExposureItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.originExposureReportList,b.originExposureReportList);jce_copy_struct(a.exposureReportList,b.exposureReportList);jce_copy_struct(a.emptyReport,b.emptyReport);jce_copy_struct(a.adReportKey,b.adReportKey);jce_copy_struct(a.adReportParams,b.adReportParams);jce_copy_struct(a.playbackReport,b.playbackReport);jce_copy_struct(a.rangeReportList,b.rangeReportList);

#define jce_AdActionReport_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.clickReport,b.clickReport);jce_copy_struct(a.effectReport,b.effectReport);jce_copy_struct(a.feedBackReport,b.feedBackReport);jce_copy_struct(a.adReportKey,b.adReportKey);jce_copy_struct(a.adReportParams,b.adReportParams);

#define jce_AdUrlItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.url,b.url);

#define jce_AdDownloadItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.urlItem,b.urlItem);jce_copy_struct(a.packageName,b.packageName);jce_copy_struct(a.appIconUrl,b.appIconUrl);jce_copy_struct(a.appName,b.appName);jce_copy_struct(a.downloadType,b.downloadType);jce_copy_struct(a.versionCode,b.versionCode);jce_copy_struct(a.channelId,b.channelId);jce_copy_struct(a.autoDownload,b.autoDownload);jce_copy_struct(a.autoInstall,b.autoInstall);jce_copy_struct(a.downloadActionType,b.downloadActionType);

#define jce_AdOpenAppItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.packageAction,b.packageAction);jce_copy_struct(a.openFailedAction,b.openFailedAction);jce_copy_struct(a.downloadItem,b.downloadItem);jce_copy_struct(a.appName,b.appName);jce_copy_struct(a.packageName,b.packageName);

#define jce_AdOpenMiniProgramItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.urlItem,b.urlItem);jce_copy_struct(a.appName,b.appName);

#define jce_AdOpenCanvasItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.verticalUrl,b.verticalUrl);jce_copy_struct(a.horizontalUrl,b.horizontalUrl);

#define jce_AdH5UrlItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.webviewType,b.webviewType);jce_copy_struct(a.adxSplashH5Url,b.adxSplashH5Url);jce_copy_struct(a.h5UrlValid,b.h5UrlValid);

#define jce_AdActionItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adUrl,b.adUrl);jce_copy_struct(a.adDownload,b.adDownload);jce_copy_struct(a.adOpenApp,b.adOpenApp);jce_copy_struct(a.adOpenMiniProgram,b.adOpenMiniProgram);jce_copy_struct(a.adOpenCanvasItem,b.adOpenCanvasItem);jce_copy_struct(a.parseType,b.parseType);jce_copy_struct(a.adH5UrlItem,b.adH5UrlItem);

#define jce_AdAction_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actionType,b.actionType);jce_copy_struct(a.actionItem,b.actionItem);jce_copy_struct(a.actionReport,b.actionReport);jce_copy_struct(a.pageType,b.pageType);

#define jce_AdPositionItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.channelId,b.channelId);jce_copy_struct(a.position,b.position);jce_copy_struct(a.absPosition,b.absPosition);jce_copy_struct(a.adSpace,b.adSpace);

#define jce_AdOrderItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.orderId,b.orderId);jce_copy_struct(a.adType,b.adType);jce_copy_struct(a.exposureItem,b.exposureItem);jce_copy_struct(a.adAction,b.adAction);jce_copy_struct(a.positionItem,b.positionItem);jce_copy_struct(a.adExperiment,b.adExperiment);

#define jce_AdInsideTitleInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.firstSubTitle,b.firstSubTitle);jce_copy_struct(a.secondSubTitle,b.secondSubTitle);jce_copy_struct(a.dspName,b.dspName);

#define jce_AdActionButtonInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actionButton,b.actionButton);jce_copy_struct(a.adAction,b.adAction);

#define jce_ImmersiveAdInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.isValid,b.isValid);jce_copy_struct(a.orderItem,b.orderItem);jce_copy_struct(a.adTitle,b.adTitle);jce_copy_struct(a.stayTime,b.stayTime);

#define jce_AdONATempletItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemType,b.itemType);jce_copy_struct(a.data,b.data);

#define jce_AdONATempletLine_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.item,b.item);

#define jce_AdcPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.markLabelList,b.markLabelList);

#define jce_AdDetailShowSizeInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.contentCount,b.contentCount);jce_copy_struct(a.maxOutShowSize,b.maxOutShowSize);



#endif
