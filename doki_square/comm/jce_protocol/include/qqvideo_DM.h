// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_DM.jce'
// **********************************************************************

#ifndef __QQVIDEO_DM_H_
#define __QQVIDEO_DM_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"
#include "qqvideo_user_info.h"


namespace jce
{
    struct DMVCInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMVCInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        DMVCInfo()
        :strTitle(""),strPosterUrl("")
        {
        }
        void resetDefautlt()
        {
            strTitle = "";
            strPosterUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strTitle, 0);
            _os.write(strPosterUrl, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strTitle, 0, false);
            _is.read(strPosterUrl, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strTitle,"strTitle");
            _ds.display(strPosterUrl,"strPosterUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(strPosterUrl, false);
            return _os;
        }
    public:
        std::string strTitle;
        std::string strPosterUrl;
    };
    inline bool operator==(const DMVCInfo&l, const DMVCInfo&r)
    {
        return l.strTitle == r.strTitle && l.strPosterUrl == r.strPosterUrl;
    }
    inline bool operator!=(const DMVCInfo&l, const DMVCInfo&r)
    {
        return !(l == r);
    }

    struct DMGiftInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMGiftInfo";
        }
        static string MD5()
        {
            return "8d3e59454f4cd1e11c4392e652863dc5";
        }
        DMGiftInfo()
        :dwStarAccountType(0),strStarAccountId(""),strGiftId(""),dwToolPrice(0),strEffectId(""),strStarHeadUrl(""),strStarNick(""),strGiftName(""),dwToolCount(0),strToolUnit(""),strSpecialEffects("")
        {
        }
        void resetDefautlt()
        {
            dwStarAccountType = 0;
            strStarAccountId = "";
            strGiftId = "";
            dwToolPrice = 0;
            strEffectId = "";
            strStarHeadUrl = "";
            strStarNick = "";
            strGiftName = "";
            dwToolCount = 0;
            strToolUnit = "";
            strSpecialEffects = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwStarAccountType, 0);
            _os.write(strStarAccountId, 1);
            _os.write(strGiftId, 2);
            _os.write(dwToolPrice, 3);
            _os.write(strEffectId, 4);
            _os.write(strStarHeadUrl, 5);
            _os.write(strStarNick, 6);
            _os.write(strGiftName, 7);
            _os.write(dwToolCount, 8);
            _os.write(strToolUnit, 9);
            _os.write(strSpecialEffects, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwStarAccountType, 0, false);
            _is.read(strStarAccountId, 1, false);
            _is.read(strGiftId, 2, false);
            _is.read(dwToolPrice, 3, false);
            _is.read(strEffectId, 4, false);
            _is.read(strStarHeadUrl, 5, false);
            _is.read(strStarNick, 6, false);
            _is.read(strGiftName, 7, false);
            _is.read(dwToolCount, 8, false);
            _is.read(strToolUnit, 9, false);
            _is.read(strSpecialEffects, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwStarAccountType,"dwStarAccountType");
            _ds.display(strStarAccountId,"strStarAccountId");
            _ds.display(strGiftId,"strGiftId");
            _ds.display(dwToolPrice,"dwToolPrice");
            _ds.display(strEffectId,"strEffectId");
            _ds.display(strStarHeadUrl,"strStarHeadUrl");
            _ds.display(strStarNick,"strStarNick");
            _ds.display(strGiftName,"strGiftName");
            _ds.display(dwToolCount,"dwToolCount");
            _ds.display(strToolUnit,"strToolUnit");
            _ds.display(strSpecialEffects,"strSpecialEffects");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwStarAccountType, true);
            _ds.displaySimple(strStarAccountId, true);
            _ds.displaySimple(strGiftId, true);
            _ds.displaySimple(dwToolPrice, true);
            _ds.displaySimple(strEffectId, true);
            _ds.displaySimple(strStarHeadUrl, true);
            _ds.displaySimple(strStarNick, true);
            _ds.displaySimple(strGiftName, true);
            _ds.displaySimple(dwToolCount, true);
            _ds.displaySimple(strToolUnit, true);
            _ds.displaySimple(strSpecialEffects, false);
            return _os;
        }
    public:
        taf::Int32 dwStarAccountType;
        std::string strStarAccountId;
        std::string strGiftId;
        taf::Int32 dwToolPrice;
        std::string strEffectId;
        std::string strStarHeadUrl;
        std::string strStarNick;
        std::string strGiftName;
        taf::Int32 dwToolCount;
        std::string strToolUnit;
        std::string strSpecialEffects;
    };
    inline bool operator==(const DMGiftInfo&l, const DMGiftInfo&r)
    {
        return l.dwStarAccountType == r.dwStarAccountType && l.strStarAccountId == r.strStarAccountId && l.strGiftId == r.strGiftId && l.dwToolPrice == r.dwToolPrice && l.strEffectId == r.strEffectId && l.strStarHeadUrl == r.strStarHeadUrl && l.strStarNick == r.strStarNick && l.strGiftName == r.strGiftName && l.dwToolCount == r.dwToolCount && l.strToolUnit == r.strToolUnit && l.strSpecialEffects == r.strSpecialEffects;
    }
    inline bool operator!=(const DMGiftInfo&l, const DMGiftInfo&r)
    {
        return !(l == r);
    }

    struct DMParentCommentInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMParentCommentInfo";
        }
        static string MD5()
        {
            return "415705f5701a6abc013814d717f3270a";
        }
        DMParentCommentInfo()
        :content(""),mediaContentType(0)
        {
        }
        void resetDefautlt()
        {
            content = "";
            mediaContentType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(parentUserInfo, 0);
            _os.write(content, 1);
            _os.write(mediaContentType, 2);
            _os.write(vecVoiceData, 3);
            _os.write(vecImageData, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(parentUserInfo, 0, true);
            _is.read(content, 1, false);
            _is.read(mediaContentType, 2, false);
            _is.read(vecVoiceData, 3, false);
            _is.read(vecImageData, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(parentUserInfo,"parentUserInfo");
            _ds.display(content,"content");
            _ds.display(mediaContentType,"mediaContentType");
            _ds.display(vecVoiceData,"vecVoiceData");
            _ds.display(vecImageData,"vecImageData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(parentUserInfo, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(mediaContentType, true);
            _ds.displaySimple(vecVoiceData, true);
            _ds.displaySimple(vecImageData, false);
            return _os;
        }
    public:
        jce::CommentParentInfoExtra parentUserInfo;
        std::string content;
        taf::Int32 mediaContentType;
        vector<jce::ApolloVoiceData> vecVoiceData;
        vector<jce::CircleMsgImageUrl> vecImageData;
    };
    inline bool operator==(const DMParentCommentInfo&l, const DMParentCommentInfo&r)
    {
        return l.parentUserInfo == r.parentUserInfo && l.content == r.content && l.mediaContentType == r.mediaContentType && l.vecVoiceData == r.vecVoiceData && l.vecImageData == r.vecImageData;
    }
    inline bool operator!=(const DMParentCommentInfo&l, const DMParentCommentInfo&r)
    {
        return !(l == r);
    }

    struct DMCommentActionInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMCommentActionInfo";
        }
        static string MD5()
        {
            return "8faa5249202f92d5e8bd59914285a061";
        }
        DMCommentActionInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actionItem, 0);
            _os.write(attentItem, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actionItem, 0, true);
            _is.read(attentItem, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actionItem,"actionItem");
            _ds.display(attentItem,"attentItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actionItem, true);
            _ds.displaySimple(attentItem, false);
            return _os;
        }
    public:
        jce::KVActionBarItem actionItem;
        jce::VideoAttentItem attentItem;
    };
    inline bool operator==(const DMCommentActionInfo&l, const DMCommentActionInfo&r)
    {
        return l.actionItem == r.actionItem && l.attentItem == r.attentItem;
    }
    inline bool operator!=(const DMCommentActionInfo&l, const DMCommentActionInfo&r)
    {
        return !(l == r);
    }

    struct DMComment : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMComment";
        }
        static string MD5()
        {
            return "83a7dd1b58961b8c018016ce03b2d3cc";
        }
        DMComment()
        :ddwCommentId(0),ddwTargetId(0),sContent(""),ddwUin(0),dwIsFriend(0),dwIsOp(0),dwIsSelf(0),dwTimePoint(0),dwUpCount(0),ddwPostTime(0),strNickName(""),strHeadUrl(""),strQQHeadUrl(""),strGiftUrl(""),dwFirstTag(0),highlightColor(""),strHlwLevelPic(""),strBubbleId(""),strDanmuBackPic(""),strDanmuBackColor(""),strDanmuBackHeadPic(""),dwHoldTime(0),dwDanmuContentType(0),dwPriority(0),strColorInfoJson(""),richIdType(0),hotType(0),userVipDegree(0)
        {
        }
        void resetDefautlt()
        {
            ddwCommentId = 0;
            ddwTargetId = 0;
            sContent = "";
            ddwUin = 0;
            dwIsFriend = 0;
            dwIsOp = 0;
            dwIsSelf = 0;
            dwTimePoint = 0;
            dwUpCount = 0;
            ddwPostTime = 0;
            strNickName = "";
            strHeadUrl = "";
            strQQHeadUrl = "";
            strGiftUrl = "";
            dwFirstTag = 0;
            highlightColor = "";
            strHlwLevelPic = "";
            strBubbleId = "";
            strDanmuBackPic = "";
            strDanmuBackColor = "";
            strDanmuBackHeadPic = "";
            dwHoldTime = 0;
            dwDanmuContentType = 0;
            dwPriority = 0;
            strColorInfoJson = "";
            richIdType = 0;
            hotType = 0;
            userVipDegree = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwCommentId, 0);
            _os.write(ddwTargetId, 1);
            _os.write(sContent, 2);
            _os.write(ddwUin, 3);
            _os.write(dwIsFriend, 4);
            _os.write(dwIsOp, 5);
            _os.write(dwIsSelf, 6);
            _os.write(dwTimePoint, 7);
            _os.write(dwUpCount, 8);
            _os.write(ddwPostTime, 9);
            _os.write(strNickName, 10);
            _os.write(strHeadUrl, 11);
            _os.write(strQQHeadUrl, 12);
            _os.write(strGiftUrl, 13);
            _os.write(dwFirstTag, 14);
            _os.write(highlightColor, 15);
            _os.write(strHlwLevelPic, 16);
            _os.write(strBubbleId, 17);
            _os.write(strDanmuBackPic, 18);
            _os.write(strDanmuBackColor, 19);
            _os.write(strDanmuBackHeadPic, 20);
            _os.write(dwHoldTime, 21);
            _os.write(stGiftInfo, 22);
            _os.write(vecVoiceData, 23);
            _os.write(vecImageData, 24);
            _os.write(vecVideoData, 25);
            _os.write(dwDanmuContentType, 26);
            _os.write(dwPriority, 27);
            _os.write(parentComment, 28);
            _os.write(actionInfo, 29);
            _os.write(strColorInfoJson, 30);
            _os.write(richIdType, 31);
            _os.write(hotType, 32);
            _os.write(userVipDegree, 33);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwCommentId, 0, false);
            _is.read(ddwTargetId, 1, false);
            _is.read(sContent, 2, false);
            _is.read(ddwUin, 3, false);
            _is.read(dwIsFriend, 4, false);
            _is.read(dwIsOp, 5, false);
            _is.read(dwIsSelf, 6, false);
            _is.read(dwTimePoint, 7, false);
            _is.read(dwUpCount, 8, false);
            _is.read(ddwPostTime, 9, false);
            _is.read(strNickName, 10, false);
            _is.read(strHeadUrl, 11, false);
            _is.read(strQQHeadUrl, 12, false);
            _is.read(strGiftUrl, 13, false);
            _is.read(dwFirstTag, 14, false);
            _is.read(highlightColor, 15, false);
            _is.read(strHlwLevelPic, 16, false);
            _is.read(strBubbleId, 17, false);
            _is.read(strDanmuBackPic, 18, false);
            _is.read(strDanmuBackColor, 19, false);
            _is.read(strDanmuBackHeadPic, 20, false);
            _is.read(dwHoldTime, 21, false);
            _is.read(stGiftInfo, 22, false);
            _is.read(vecVoiceData, 23, false);
            _is.read(vecImageData, 24, false);
            _is.read(vecVideoData, 25, false);
            _is.read(dwDanmuContentType, 26, false);
            _is.read(dwPriority, 27, false);
            _is.read(parentComment, 28, false);
            _is.read(actionInfo, 29, false);
            _is.read(strColorInfoJson, 30, false);
            _is.read(richIdType, 31, false);
            _is.read(hotType, 32, false);
            _is.read(userVipDegree, 33, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwCommentId,"ddwCommentId");
            _ds.display(ddwTargetId,"ddwTargetId");
            _ds.display(sContent,"sContent");
            _ds.display(ddwUin,"ddwUin");
            _ds.display(dwIsFriend,"dwIsFriend");
            _ds.display(dwIsOp,"dwIsOp");
            _ds.display(dwIsSelf,"dwIsSelf");
            _ds.display(dwTimePoint,"dwTimePoint");
            _ds.display(dwUpCount,"dwUpCount");
            _ds.display(ddwPostTime,"ddwPostTime");
            _ds.display(strNickName,"strNickName");
            _ds.display(strHeadUrl,"strHeadUrl");
            _ds.display(strQQHeadUrl,"strQQHeadUrl");
            _ds.display(strGiftUrl,"strGiftUrl");
            _ds.display(dwFirstTag,"dwFirstTag");
            _ds.display(highlightColor,"highlightColor");
            _ds.display(strHlwLevelPic,"strHlwLevelPic");
            _ds.display(strBubbleId,"strBubbleId");
            _ds.display(strDanmuBackPic,"strDanmuBackPic");
            _ds.display(strDanmuBackColor,"strDanmuBackColor");
            _ds.display(strDanmuBackHeadPic,"strDanmuBackHeadPic");
            _ds.display(dwHoldTime,"dwHoldTime");
            _ds.display(stGiftInfo,"stGiftInfo");
            _ds.display(vecVoiceData,"vecVoiceData");
            _ds.display(vecImageData,"vecImageData");
            _ds.display(vecVideoData,"vecVideoData");
            _ds.display(dwDanmuContentType,"dwDanmuContentType");
            _ds.display(dwPriority,"dwPriority");
            _ds.display(parentComment,"parentComment");
            _ds.display(actionInfo,"actionInfo");
            _ds.display(strColorInfoJson,"strColorInfoJson");
            _ds.display(richIdType,"richIdType");
            _ds.display(hotType,"hotType");
            _ds.display(userVipDegree,"userVipDegree");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwCommentId, true);
            _ds.displaySimple(ddwTargetId, true);
            _ds.displaySimple(sContent, true);
            _ds.displaySimple(ddwUin, true);
            _ds.displaySimple(dwIsFriend, true);
            _ds.displaySimple(dwIsOp, true);
            _ds.displaySimple(dwIsSelf, true);
            _ds.displaySimple(dwTimePoint, true);
            _ds.displaySimple(dwUpCount, true);
            _ds.displaySimple(ddwPostTime, true);
            _ds.displaySimple(strNickName, true);
            _ds.displaySimple(strHeadUrl, true);
            _ds.displaySimple(strQQHeadUrl, true);
            _ds.displaySimple(strGiftUrl, true);
            _ds.displaySimple(dwFirstTag, true);
            _ds.displaySimple(highlightColor, true);
            _ds.displaySimple(strHlwLevelPic, true);
            _ds.displaySimple(strBubbleId, true);
            _ds.displaySimple(strDanmuBackPic, true);
            _ds.displaySimple(strDanmuBackColor, true);
            _ds.displaySimple(strDanmuBackHeadPic, true);
            _ds.displaySimple(dwHoldTime, true);
            _ds.displaySimple(stGiftInfo, true);
            _ds.displaySimple(vecVoiceData, true);
            _ds.displaySimple(vecImageData, true);
            _ds.displaySimple(vecVideoData, true);
            _ds.displaySimple(dwDanmuContentType, true);
            _ds.displaySimple(dwPriority, true);
            _ds.displaySimple(parentComment, true);
            _ds.displaySimple(actionInfo, true);
            _ds.displaySimple(strColorInfoJson, true);
            _ds.displaySimple(richIdType, true);
            _ds.displaySimple(hotType, true);
            _ds.displaySimple(userVipDegree, false);
            return _os;
        }
    public:
        taf::Int64 ddwCommentId;
        taf::Int64 ddwTargetId;
        std::string sContent;
        taf::Int64 ddwUin;
        taf::Int32 dwIsFriend;
        taf::Int32 dwIsOp;
        taf::Int32 dwIsSelf;
        taf::Int32 dwTimePoint;
        taf::Int32 dwUpCount;
        taf::Int64 ddwPostTime;
        std::string strNickName;
        std::string strHeadUrl;
        std::string strQQHeadUrl;
        std::string strGiftUrl;
        taf::Int32 dwFirstTag;
        std::string highlightColor;
        std::string strHlwLevelPic;
        std::string strBubbleId;
        std::string strDanmuBackPic;
        std::string strDanmuBackColor;
        std::string strDanmuBackHeadPic;
        taf::Int32 dwHoldTime;
        jce::DMGiftInfo stGiftInfo;
        vector<jce::ApolloVoiceData> vecVoiceData;
        vector<jce::CircleMsgImageUrl> vecImageData;
        vector<jce::CircleShortVideoUrl> vecVideoData;
        taf::Int32 dwDanmuContentType;
        taf::Int32 dwPriority;
        jce::DMParentCommentInfo parentComment;
        jce::DMCommentActionInfo actionInfo;
        std::string strColorInfoJson;
        taf::Int32 richIdType;
        taf::Int32 hotType;
        taf::Int32 userVipDegree;
    };
    inline bool operator==(const DMComment&l, const DMComment&r)
    {
        return l.ddwCommentId == r.ddwCommentId && l.ddwTargetId == r.ddwTargetId && l.sContent == r.sContent && l.ddwUin == r.ddwUin && l.dwIsFriend == r.dwIsFriend && l.dwIsOp == r.dwIsOp && l.dwIsSelf == r.dwIsSelf && l.dwTimePoint == r.dwTimePoint && l.dwUpCount == r.dwUpCount && l.ddwPostTime == r.ddwPostTime && l.strNickName == r.strNickName && l.strHeadUrl == r.strHeadUrl && l.strQQHeadUrl == r.strQQHeadUrl && l.strGiftUrl == r.strGiftUrl && l.dwFirstTag == r.dwFirstTag && l.highlightColor == r.highlightColor && l.strHlwLevelPic == r.strHlwLevelPic && l.strBubbleId == r.strBubbleId && l.strDanmuBackPic == r.strDanmuBackPic && l.strDanmuBackColor == r.strDanmuBackColor && l.strDanmuBackHeadPic == r.strDanmuBackHeadPic && l.dwHoldTime == r.dwHoldTime && l.stGiftInfo == r.stGiftInfo && l.vecVoiceData == r.vecVoiceData && l.vecImageData == r.vecImageData && l.vecVideoData == r.vecVideoData && l.dwDanmuContentType == r.dwDanmuContentType && l.dwPriority == r.dwPriority && l.parentComment == r.parentComment && l.actionInfo == r.actionInfo && l.strColorInfoJson == r.strColorInfoJson && l.richIdType == r.richIdType && l.hotType == r.hotType && l.userVipDegree == r.userVipDegree;
    }
    inline bool operator!=(const DMComment&l, const DMComment&r)
    {
        return !(l == r);
    }

    struct DMPostCommentRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMPostCommentRequest";
        }
        static string MD5()
        {
            return "73d119aaf0c37284c0473cb9d70ab985";
        }
        DMPostCommentRequest()
        :DMContentKey(""),sContent(""),dwTimePoint(0),strRichId(""),dwLiveWatchBack(0),strColorInfoJson(""),richIdType(0),userVipDegree(0)
        {
        }
        void resetDefautlt()
        {
            DMContentKey = "";
            sContent = "";
            dwTimePoint = 0;
            strRichId = "";
            dwLiveWatchBack = 0;
            strColorInfoJson = "";
            richIdType = 0;
            userVipDegree = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(DMContentKey, 0);
            _os.write(sContent, 1);
            _os.write(dwTimePoint, 2);
            _os.write(strRichId, 3);
            _os.write(dwLiveWatchBack, 4);
            _os.write(stStarInfo, 5);
            _os.write(stVCInfo, 6);
            _os.write(strColorInfoJson, 7);
            _os.write(richIdType, 8);
            _os.write(userVipDegree, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(DMContentKey, 0, true);
            _is.read(sContent, 1, false);
            _is.read(dwTimePoint, 2, false);
            _is.read(strRichId, 3, false);
            _is.read(dwLiveWatchBack, 4, false);
            _is.read(stStarInfo, 5, false);
            _is.read(stVCInfo, 6, false);
            _is.read(strColorInfoJson, 7, false);
            _is.read(richIdType, 8, false);
            _is.read(userVipDegree, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(DMContentKey,"DMContentKey");
            _ds.display(sContent,"sContent");
            _ds.display(dwTimePoint,"dwTimePoint");
            _ds.display(strRichId,"strRichId");
            _ds.display(dwLiveWatchBack,"dwLiveWatchBack");
            _ds.display(stStarInfo,"stStarInfo");
            _ds.display(stVCInfo,"stVCInfo");
            _ds.display(strColorInfoJson,"strColorInfoJson");
            _ds.display(richIdType,"richIdType");
            _ds.display(userVipDegree,"userVipDegree");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(DMContentKey, true);
            _ds.displaySimple(sContent, true);
            _ds.displaySimple(dwTimePoint, true);
            _ds.displaySimple(strRichId, true);
            _ds.displaySimple(dwLiveWatchBack, true);
            _ds.displaySimple(stStarInfo, true);
            _ds.displaySimple(stVCInfo, true);
            _ds.displaySimple(strColorInfoJson, true);
            _ds.displaySimple(richIdType, true);
            _ds.displaySimple(userVipDegree, false);
            return _os;
        }
    public:
        std::string DMContentKey;
        std::string sContent;
        taf::Int64 dwTimePoint;
        std::string strRichId;
        taf::Int32 dwLiveWatchBack;
        jce::STStarInfo stStarInfo;
        jce::DMVCInfo stVCInfo;
        std::string strColorInfoJson;
        taf::Int32 richIdType;
        taf::Int32 userVipDegree;
    };
    inline bool operator==(const DMPostCommentRequest&l, const DMPostCommentRequest&r)
    {
        return l.DMContentKey == r.DMContentKey && l.sContent == r.sContent && l.dwTimePoint == r.dwTimePoint && l.strRichId == r.strRichId && l.dwLiveWatchBack == r.dwLiveWatchBack && l.stStarInfo == r.stStarInfo && l.stVCInfo == r.stVCInfo && l.strColorInfoJson == r.strColorInfoJson && l.richIdType == r.richIdType && l.userVipDegree == r.userVipDegree;
    }
    inline bool operator!=(const DMPostCommentRequest&l, const DMPostCommentRequest&r)
    {
        return !(l == r);
    }

    struct DMPostCommentResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMPostCommentResponse";
        }
        static string MD5()
        {
            return "4eb474e811bba12502f1dce3c768d460";
        }
        DMPostCommentResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(stComment, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(stComment, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(stComment,"stComment");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(stComment, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::DMComment stComment;
    };
    inline bool operator==(const DMPostCommentResponse&l, const DMPostCommentResponse&r)
    {
        return l.errCode == r.errCode && l.stComment == r.stComment;
    }
    inline bool operator!=(const DMPostCommentResponse&l, const DMPostCommentResponse&r)
    {
        return !(l == r);
    }

    struct DMLikeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMLikeRequest";
        }
        static string MD5()
        {
            return "cb4558a7d1cbd8cbf583df7337cc71f1";
        }
        DMLikeRequest()
        :DMContentKey(""),ddwCommentId(0)
        {
        }
        void resetDefautlt()
        {
            DMContentKey = "";
            ddwCommentId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(DMContentKey, 0);
            _os.write(ddwCommentId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(DMContentKey, 0, true);
            _is.read(ddwCommentId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(DMContentKey,"DMContentKey");
            _ds.display(ddwCommentId,"ddwCommentId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(DMContentKey, true);
            _ds.displaySimple(ddwCommentId, false);
            return _os;
        }
    public:
        std::string DMContentKey;
        taf::Int64 ddwCommentId;
    };
    inline bool operator==(const DMLikeRequest&l, const DMLikeRequest&r)
    {
        return l.DMContentKey == r.DMContentKey && l.ddwCommentId == r.ddwCommentId;
    }
    inline bool operator!=(const DMLikeRequest&l, const DMLikeRequest&r)
    {
        return !(l == r);
    }

    struct DMLikeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMLikeResponse";
        }
        static string MD5()
        {
            return "4eb474e811bba12502f1dce3c768d460";
        }
        DMLikeResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(stComment, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(stComment, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(stComment,"stComment");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(stComment, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::DMComment stComment;
    };
    inline bool operator==(const DMLikeResponse&l, const DMLikeResponse&r)
    {
        return l.errCode == r.errCode && l.stComment == r.stComment;
    }
    inline bool operator!=(const DMLikeResponse&l, const DMLikeResponse&r)
    {
        return !(l == r);
    }

    struct StarSupportInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarSupportInfo";
        }
        static string MD5()
        {
            return "83a50276aacb79a636f5a7f0ad5f31ab";
        }
        StarSupportInfo()
        :dataKey(""),startTime(0),endTime(0)
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            startTime = 0;
            endTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(startTime, 1);
            _os.write(endTime, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(startTime, 1, false);
            _is.read(endTime, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, false);
            return _os;
        }
    public:
        std::string dataKey;
        taf::Int64 startTime;
        taf::Int64 endTime;
    };
    inline bool operator==(const StarSupportInfo&l, const StarSupportInfo&r)
    {
        return l.dataKey == r.dataKey && l.startTime == r.startTime && l.endTime == r.endTime;
    }
    inline bool operator!=(const StarSupportInfo&l, const StarSupportInfo&r)
    {
        return !(l == r);
    }

    struct DMCommentListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMCommentListRequest";
        }
        static string MD5()
        {
            return "0b98c09f6062cd41b3297789f94e26ed";
        }
        DMCommentListRequest()
        :DMContentKey(""),dwStartTime(0),dwFirstReq(0),dwDMRowOfNormal(0),dwDWRowOfSpacer(0),strSessionKey(""),dwVersion(0),dwStyle(0),dwLiveWatchBack(0)
        {
        }
        void resetDefautlt()
        {
            DMContentKey = "";
            dwStartTime = 0;
            dwFirstReq = 0;
            dwDMRowOfNormal = 0;
            dwDWRowOfSpacer = 0;
            strSessionKey = "";
            dwVersion = 0;
            dwStyle = 0;
            dwLiveWatchBack = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(DMContentKey, 0);
            _os.write(dwStartTime, 1);
            _os.write(dwFirstReq, 2);
            _os.write(dwDMRowOfNormal, 3);
            _os.write(dwDWRowOfSpacer, 4);
            _os.write(strSessionKey, 5);
            _os.write(dwVersion, 6);
            _os.write(dwStyle, 7);
            _os.write(dwLiveWatchBack, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(DMContentKey, 0, true);
            _is.read(dwStartTime, 1, true);
            _is.read(dwFirstReq, 2, false);
            _is.read(dwDMRowOfNormal, 3, false);
            _is.read(dwDWRowOfSpacer, 4, false);
            _is.read(strSessionKey, 5, false);
            _is.read(dwVersion, 6, false);
            _is.read(dwStyle, 7, false);
            _is.read(dwLiveWatchBack, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(DMContentKey,"DMContentKey");
            _ds.display(dwStartTime,"dwStartTime");
            _ds.display(dwFirstReq,"dwFirstReq");
            _ds.display(dwDMRowOfNormal,"dwDMRowOfNormal");
            _ds.display(dwDWRowOfSpacer,"dwDWRowOfSpacer");
            _ds.display(strSessionKey,"strSessionKey");
            _ds.display(dwVersion,"dwVersion");
            _ds.display(dwStyle,"dwStyle");
            _ds.display(dwLiveWatchBack,"dwLiveWatchBack");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(DMContentKey, true);
            _ds.displaySimple(dwStartTime, true);
            _ds.displaySimple(dwFirstReq, true);
            _ds.displaySimple(dwDMRowOfNormal, true);
            _ds.displaySimple(dwDWRowOfSpacer, true);
            _ds.displaySimple(strSessionKey, true);
            _ds.displaySimple(dwVersion, true);
            _ds.displaySimple(dwStyle, true);
            _ds.displaySimple(dwLiveWatchBack, false);
            return _os;
        }
    public:
        std::string DMContentKey;
        taf::Int64 dwStartTime;
        taf::Int32 dwFirstReq;
        taf::Int32 dwDMRowOfNormal;
        taf::Int32 dwDWRowOfSpacer;
        std::string strSessionKey;
        taf::Int32 dwVersion;
        taf::Int32 dwStyle;
        taf::Int32 dwLiveWatchBack;
    };
    inline bool operator==(const DMCommentListRequest&l, const DMCommentListRequest&r)
    {
        return l.DMContentKey == r.DMContentKey && l.dwStartTime == r.dwStartTime && l.dwFirstReq == r.dwFirstReq && l.dwDMRowOfNormal == r.dwDMRowOfNormal && l.dwDWRowOfSpacer == r.dwDWRowOfSpacer && l.strSessionKey == r.strSessionKey && l.dwVersion == r.dwVersion && l.dwStyle == r.dwStyle && l.dwLiveWatchBack == r.dwLiveWatchBack;
    }
    inline bool operator!=(const DMCommentListRequest&l, const DMCommentListRequest&r)
    {
        return !(l == r);
    }

    struct DMEmojiAnimateInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMEmojiAnimateInfo";
        }
        static string MD5()
        {
            return "c9d36b2966e38fa95d84134f787efa4e";
        }
        DMEmojiAnimateInfo()
        :emojiAnimateId(""),emojiLottieUrl(""),emojiTimeStamp(0),emojiIntervalTime(0)
        {
        }
        void resetDefautlt()
        {
            emojiAnimateId = "";
            emojiLottieUrl = "";
            emojiTimeStamp = 0;
            emojiIntervalTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(emojiAnimateId, 0);
            _os.write(emojiLottieUrl, 1);
            _os.write(emojiTimeStamp, 2);
            _os.write(emojiIntervalTime, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(emojiAnimateId, 0, true);
            _is.read(emojiLottieUrl, 1, true);
            _is.read(emojiTimeStamp, 2, false);
            _is.read(emojiIntervalTime, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(emojiAnimateId,"emojiAnimateId");
            _ds.display(emojiLottieUrl,"emojiLottieUrl");
            _ds.display(emojiTimeStamp,"emojiTimeStamp");
            _ds.display(emojiIntervalTime,"emojiIntervalTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(emojiAnimateId, true);
            _ds.displaySimple(emojiLottieUrl, true);
            _ds.displaySimple(emojiTimeStamp, true);
            _ds.displaySimple(emojiIntervalTime, false);
            return _os;
        }
    public:
        std::string emojiAnimateId;
        std::string emojiLottieUrl;
        taf::Int64 emojiTimeStamp;
        taf::Int64 emojiIntervalTime;
    };
    inline bool operator==(const DMEmojiAnimateInfo&l, const DMEmojiAnimateInfo&r)
    {
        return l.emojiAnimateId == r.emojiAnimateId && l.emojiLottieUrl == r.emojiLottieUrl && l.emojiTimeStamp == r.emojiTimeStamp && l.emojiIntervalTime == r.emojiIntervalTime;
    }
    inline bool operator!=(const DMEmojiAnimateInfo&l, const DMEmojiAnimateInfo&r)
    {
        return !(l == r);
    }

    struct DMCommentListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMCommentListResponse";
        }
        static string MD5()
        {
            return "b7785cde2c8654a4f34cfaa5117b9311";
        }
        DMCommentListResponse()
        :errCode(0),dwNextTimeDur(0),ddwLastStamp(0),dwLoopInterval(0),bContinued(0),strSessionKey("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            dwNextTimeDur = 0;
            ddwLastStamp = 0;
            dwLoopInterval = 0;
            bContinued = 0;
            strSessionKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(dwNextTimeDur, 1);
            _os.write(commentList, 2);
            _os.write(ddwLastStamp, 3);
            _os.write(dwLoopInterval, 4);
            _os.write(bContinued, 5);
            _os.write(strSessionKey, 6);
            _os.write(starSupportInfo, 7);
            _os.write(emojiAnimateList, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(dwNextTimeDur, 1, true);
            _is.read(commentList, 2, false);
            _is.read(ddwLastStamp, 3, false);
            _is.read(dwLoopInterval, 4, false);
            _is.read(bContinued, 5, false);
            _is.read(strSessionKey, 6, false);
            _is.read(starSupportInfo, 7, false);
            _is.read(emojiAnimateList, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(dwNextTimeDur,"dwNextTimeDur");
            _ds.display(commentList,"commentList");
            _ds.display(ddwLastStamp,"ddwLastStamp");
            _ds.display(dwLoopInterval,"dwLoopInterval");
            _ds.display(bContinued,"bContinued");
            _ds.display(strSessionKey,"strSessionKey");
            _ds.display(starSupportInfo,"starSupportInfo");
            _ds.display(emojiAnimateList,"emojiAnimateList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(dwNextTimeDur, true);
            _ds.displaySimple(commentList, true);
            _ds.displaySimple(ddwLastStamp, true);
            _ds.displaySimple(dwLoopInterval, true);
            _ds.displaySimple(bContinued, true);
            _ds.displaySimple(strSessionKey, true);
            _ds.displaySimple(starSupportInfo, true);
            _ds.displaySimple(emojiAnimateList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 dwNextTimeDur;
        vector<jce::DMComment> commentList;
        taf::Int64 ddwLastStamp;
        taf::Int32 dwLoopInterval;
        taf::Int32 bContinued;
        std::string strSessionKey;
        jce::StarSupportInfo starSupportInfo;
        vector<jce::DMEmojiAnimateInfo> emojiAnimateList;
    };
    inline bool operator==(const DMCommentListResponse&l, const DMCommentListResponse&r)
    {
        return l.errCode == r.errCode && l.dwNextTimeDur == r.dwNextTimeDur && l.commentList == r.commentList && l.ddwLastStamp == r.ddwLastStamp && l.dwLoopInterval == r.dwLoopInterval && l.bContinued == r.bContinued && l.strSessionKey == r.strSessionKey && l.starSupportInfo == r.starSupportInfo && l.emojiAnimateList == r.emojiAnimateList;
    }
    inline bool operator!=(const DMCommentListResponse&l, const DMCommentListResponse&r)
    {
        return !(l == r);
    }

    struct DMGetUserCfgRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMGetUserCfgRequest";
        }
        static string MD5()
        {
            return "9bda4ac16227127f47ea815aed6f8d9e";
        }
        DMGetUserCfgRequest()
        :DMContentKey(""),optionType(0),userStaus(0)
        {
        }
        void resetDefautlt()
        {
            DMContentKey = "";
            optionType = 0;
            userStaus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(DMContentKey, 0);
            _os.write(optionType, 1);
            _os.write(userStaus, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(DMContentKey, 0, true);
            _is.read(optionType, 1, true);
            _is.read(userStaus, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(DMContentKey,"DMContentKey");
            _ds.display(optionType,"optionType");
            _ds.display(userStaus,"userStaus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(DMContentKey, true);
            _ds.displaySimple(optionType, true);
            _ds.displaySimple(userStaus, false);
            return _os;
        }
    public:
        std::string DMContentKey;
        taf::Int32 optionType;
        taf::Int32 userStaus;
    };
    inline bool operator==(const DMGetUserCfgRequest&l, const DMGetUserCfgRequest&r)
    {
        return l.DMContentKey == r.DMContentKey && l.optionType == r.optionType && l.userStaus == r.userStaus;
    }
    inline bool operator!=(const DMGetUserCfgRequest&l, const DMGetUserCfgRequest&r)
    {
        return !(l == r);
    }

    struct DMGetUserCfgResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMGetUserCfgResponse";
        }
        static string MD5()
        {
            return "949896748d482a1121709e919c6898dd";
        }
        DMGetUserCfgResponse()
        :errCode(0),wUserStaus(0),dwPresentArea(0),dwFontSize(0),dwSpeed(0),dwAlpha(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            wUserStaus = 0;
            dwPresentArea = 0;
            dwFontSize = 0;
            dwSpeed = 0;
            dwAlpha = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(wUserStaus, 1);
            _os.write(dwPresentArea, 2);
            _os.write(dwFontSize, 3);
            _os.write(dwSpeed, 4);
            _os.write(dwAlpha, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(wUserStaus, 1, false);
            _is.read(dwPresentArea, 2, false);
            _is.read(dwFontSize, 3, false);
            _is.read(dwSpeed, 4, false);
            _is.read(dwAlpha, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(wUserStaus,"wUserStaus");
            _ds.display(dwPresentArea,"dwPresentArea");
            _ds.display(dwFontSize,"dwFontSize");
            _ds.display(dwSpeed,"dwSpeed");
            _ds.display(dwAlpha,"dwAlpha");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(wUserStaus, true);
            _ds.displaySimple(dwPresentArea, true);
            _ds.displaySimple(dwFontSize, true);
            _ds.displaySimple(dwSpeed, true);
            _ds.displaySimple(dwAlpha, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Short wUserStaus;
        taf::Int32 dwPresentArea;
        taf::Int32 dwFontSize;
        taf::Int32 dwSpeed;
        taf::Int32 dwAlpha;
    };
    inline bool operator==(const DMGetUserCfgResponse&l, const DMGetUserCfgResponse&r)
    {
        return l.errCode == r.errCode && l.wUserStaus == r.wUserStaus && l.dwPresentArea == r.dwPresentArea && l.dwFontSize == r.dwFontSize && l.dwSpeed == r.dwSpeed && l.dwAlpha == r.dwAlpha;
    }
    inline bool operator!=(const DMGetUserCfgResponse&l, const DMGetUserCfgResponse&r)
    {
        return !(l == r);
    }

    struct DMRegistExtData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMRegistExtData";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        DMRegistExtData()
        :strCid(""),strLid("")
        {
        }
        void resetDefautlt()
        {
            strCid = "";
            strLid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strCid, 0);
            _os.write(strLid, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strCid, 0, false);
            _is.read(strLid, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strCid,"strCid");
            _ds.display(strLid,"strLid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strCid, true);
            _ds.displaySimple(strLid, false);
            return _os;
        }
    public:
        std::string strCid;
        std::string strLid;
    };
    inline bool operator==(const DMRegistExtData&l, const DMRegistExtData&r)
    {
        return l.strCid == r.strCid && l.strLid == r.strLid;
    }
    inline bool operator!=(const DMRegistExtData&l, const DMRegistExtData&r)
    {
        return !(l == r);
    }

    struct DMRegistTargetIdMoreRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMRegistTargetIdMoreRequest";
        }
        static string MD5()
        {
            return "5eb1613a34a4f6cdddb382ac30b2c2a0";
        }
        DMRegistTargetIdMoreRequest()
        :wRegistType(0),wSpeSource(0),bIsGetUserCfg(0)
        {
        }
        void resetDefautlt()
        {
            wRegistType = 0;
            wSpeSource = 0;
            bIsGetUserCfg = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(wRegistType, 0);
            _os.write(vecIdList, 1);
            _os.write(wSpeSource, 2);
            _os.write(mapExtData, 3);
            _os.write(bIsGetUserCfg, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(wRegistType, 0, true);
            _is.read(vecIdList, 1, true);
            _is.read(wSpeSource, 2, false);
            _is.read(mapExtData, 3, false);
            _is.read(bIsGetUserCfg, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(wRegistType,"wRegistType");
            _ds.display(vecIdList,"vecIdList");
            _ds.display(wSpeSource,"wSpeSource");
            _ds.display(mapExtData,"mapExtData");
            _ds.display(bIsGetUserCfg,"bIsGetUserCfg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(wRegistType, true);
            _ds.displaySimple(vecIdList, true);
            _ds.displaySimple(wSpeSource, true);
            _ds.displaySimple(mapExtData, true);
            _ds.displaySimple(bIsGetUserCfg, false);
            return _os;
        }
    public:
        taf::Int32 wRegistType;
        vector<std::string> vecIdList;
        taf::Int32 wSpeSource;
        map<std::string, jce::DMRegistExtData> mapExtData;
        taf::Int32 bIsGetUserCfg;
    };
    inline bool operator==(const DMRegistTargetIdMoreRequest&l, const DMRegistTargetIdMoreRequest&r)
    {
        return l.wRegistType == r.wRegistType && l.vecIdList == r.vecIdList && l.wSpeSource == r.wSpeSource && l.mapExtData == r.mapExtData && l.bIsGetUserCfg == r.bIsGetUserCfg;
    }
    inline bool operator!=(const DMRegistTargetIdMoreRequest&l, const DMRegistTargetIdMoreRequest&r)
    {
        return !(l == r);
    }

    struct DMAntiBlockingInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMAntiBlockingInfo";
        }
        static string MD5()
        {
            return "9d69de69e6a931a9092a8f6239576edf";
        }
        DMAntiBlockingInfo()
        :isSupportAntiBlocking(false),cdnUrl(""),defaultState(false),sliceDuration(0)
        {
        }
        void resetDefautlt()
        {
            isSupportAntiBlocking = false;
            cdnUrl = "";
            defaultState = false;
            sliceDuration = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(isSupportAntiBlocking, 0);
            _os.write(cdnUrl, 1);
            _os.write(frameRateList, 2);
            _os.write(defaultState, 3);
            _os.write(sliceDuration, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(isSupportAntiBlocking, 0, true);
            _is.read(cdnUrl, 1, true);
            _is.read(frameRateList, 2, true);
            _is.read(defaultState, 3, false);
            _is.read(sliceDuration, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(isSupportAntiBlocking,"isSupportAntiBlocking");
            _ds.display(cdnUrl,"cdnUrl");
            _ds.display(frameRateList,"frameRateList");
            _ds.display(defaultState,"defaultState");
            _ds.display(sliceDuration,"sliceDuration");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(isSupportAntiBlocking, true);
            _ds.displaySimple(cdnUrl, true);
            _ds.displaySimple(frameRateList, true);
            _ds.displaySimple(defaultState, true);
            _ds.displaySimple(sliceDuration, false);
            return _os;
        }
    public:
        taf::Bool isSupportAntiBlocking;
        std::string cdnUrl;
        vector<taf::Int32> frameRateList;
        taf::Bool defaultState;
        taf::Int32 sliceDuration;
    };
    inline bool operator==(const DMAntiBlockingInfo&l, const DMAntiBlockingInfo&r)
    {
        return l.isSupportAntiBlocking == r.isSupportAntiBlocking && l.cdnUrl == r.cdnUrl && l.frameRateList == r.frameRateList && l.defaultState == r.defaultState && l.sliceDuration == r.sliceDuration;
    }
    inline bool operator!=(const DMAntiBlockingInfo&l, const DMAntiBlockingInfo&r)
    {
        return !(l == r);
    }

    struct DMRegistResultInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMRegistResultInfo";
        }
        static string MD5()
        {
            return "2dd60c373d99476b41e8eec51001f49e";
        }
        DMRegistResultInfo()
        :strDanMuKey(""),wOpened(0),wDisplay(0),iIsBubbleFlg(0)
        {
        }
        void resetDefautlt()
        {
            strDanMuKey = "";
            wOpened = 0;
            wDisplay = 0;
            iIsBubbleFlg = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDanMuKey, 0);
            _os.write(wOpened, 1);
            _os.write(wDisplay, 2);
            _os.write(iIsBubbleFlg, 3);
            _os.write(antiBlockingInfo, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDanMuKey, 0, false);
            _is.read(wOpened, 1, false);
            _is.read(wDisplay, 2, false);
            _is.read(iIsBubbleFlg, 3, false);
            _is.read(antiBlockingInfo, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDanMuKey,"strDanMuKey");
            _ds.display(wOpened,"wOpened");
            _ds.display(wDisplay,"wDisplay");
            _ds.display(iIsBubbleFlg,"iIsBubbleFlg");
            _ds.display(antiBlockingInfo,"antiBlockingInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDanMuKey, true);
            _ds.displaySimple(wOpened, true);
            _ds.displaySimple(wDisplay, true);
            _ds.displaySimple(iIsBubbleFlg, true);
            _ds.displaySimple(antiBlockingInfo, false);
            return _os;
        }
    public:
        std::string strDanMuKey;
        taf::Int32 wOpened;
        taf::Int32 wDisplay;
        taf::Int32 iIsBubbleFlg;
        jce::DMAntiBlockingInfo antiBlockingInfo;
    };
    inline bool operator==(const DMRegistResultInfo&l, const DMRegistResultInfo&r)
    {
        return l.strDanMuKey == r.strDanMuKey && l.wOpened == r.wOpened && l.wDisplay == r.wDisplay && l.iIsBubbleFlg == r.iIsBubbleFlg && l.antiBlockingInfo == r.antiBlockingInfo;
    }
    inline bool operator!=(const DMRegistResultInfo&l, const DMRegistResultInfo&r)
    {
        return !(l == r);
    }

    struct DMRegistTargetIdMoreResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMRegistTargetIdMoreResponse";
        }
        static string MD5()
        {
            return "2152b98c91877569520cebc88d394b44";
        }
        DMRegistTargetIdMoreResponse()
        :errCode(0),wUserStaus(0),dwPresentArea(0),dwFontSize(0),dwSpeed(0),dwAlpha(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            wUserStaus = 0;
            dwPresentArea = 0;
            dwFontSize = 0;
            dwSpeed = 0;
            dwAlpha = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(stMap, 1);
            _os.write(wUserStaus, 2);
            _os.write(dwPresentArea, 3);
            _os.write(dwFontSize, 4);
            _os.write(dwSpeed, 5);
            _os.write(dwAlpha, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(stMap, 1, false);
            _is.read(wUserStaus, 2, false);
            _is.read(dwPresentArea, 3, false);
            _is.read(dwFontSize, 4, false);
            _is.read(dwSpeed, 5, false);
            _is.read(dwAlpha, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(stMap,"stMap");
            _ds.display(wUserStaus,"wUserStaus");
            _ds.display(dwPresentArea,"dwPresentArea");
            _ds.display(dwFontSize,"dwFontSize");
            _ds.display(dwSpeed,"dwSpeed");
            _ds.display(dwAlpha,"dwAlpha");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(stMap, true);
            _ds.displaySimple(wUserStaus, true);
            _ds.displaySimple(dwPresentArea, true);
            _ds.displaySimple(dwFontSize, true);
            _ds.displaySimple(dwSpeed, true);
            _ds.displaySimple(dwAlpha, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        map<std::string, jce::DMRegistResultInfo> stMap;
        taf::Short wUserStaus;
        taf::Int32 dwPresentArea;
        taf::Int32 dwFontSize;
        taf::Int32 dwSpeed;
        taf::Int32 dwAlpha;
    };
    inline bool operator==(const DMRegistTargetIdMoreResponse&l, const DMRegistTargetIdMoreResponse&r)
    {
        return l.errCode == r.errCode && l.stMap == r.stMap && l.wUserStaus == r.wUserStaus && l.dwPresentArea == r.dwPresentArea && l.dwFontSize == r.dwFontSize && l.dwSpeed == r.dwSpeed && l.dwAlpha == r.dwAlpha;
    }
    inline bool operator!=(const DMRegistTargetIdMoreResponse&l, const DMRegistTargetIdMoreResponse&r)
    {
        return !(l == r);
    }

    struct DMGetPubTotalRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMGetPubTotalRequest";
        }
        static string MD5()
        {
            return "c0c55295846a835fde8fabbaa8f6adc8";
        }
        DMGetPubTotalRequest()
        :dwType(0)
        {
        }
        void resetDefautlt()
        {
            dwType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwType, 0);
            _os.write(vecIdList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwType, 0, true);
            _is.read(vecIdList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwType,"dwType");
            _ds.display(vecIdList,"vecIdList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwType, true);
            _ds.displaySimple(vecIdList, false);
            return _os;
        }
    public:
        taf::Int32 dwType;
        vector<std::string> vecIdList;
    };
    inline bool operator==(const DMGetPubTotalRequest&l, const DMGetPubTotalRequest&r)
    {
        return l.dwType == r.dwType && l.vecIdList == r.vecIdList;
    }
    inline bool operator!=(const DMGetPubTotalRequest&l, const DMGetPubTotalRequest&r)
    {
        return !(l == r);
    }

    struct DMGetPubTotalResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMGetPubTotalResponse";
        }
        static string MD5()
        {
            return "464cb5fccfe358b8371e5406b353718f";
        }
        DMGetPubTotalResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pubTotalMap, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pubTotalMap, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pubTotalMap,"pubTotalMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pubTotalMap, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        map<std::string, taf::Int64> pubTotalMap;
    };
    inline bool operator==(const DMGetPubTotalResponse&l, const DMGetPubTotalResponse&r)
    {
        return l.errCode == r.errCode && l.pubTotalMap == r.pubTotalMap;
    }
    inline bool operator!=(const DMGetPubTotalResponse&l, const DMGetPubTotalResponse&r)
    {
        return !(l == r);
    }

    struct StGetRichDataRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StGetRichDataRequest";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        StGetRichDataRequest()
        :strDanMuKey(""),userVipDegree(0)
        {
        }
        void resetDefautlt()
        {
            strDanMuKey = "";
            userVipDegree = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDanMuKey, 0);
            _os.write(userVipDegree, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDanMuKey, 0, true);
            _is.read(userVipDegree, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDanMuKey,"strDanMuKey");
            _ds.display(userVipDegree,"userVipDegree");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDanMuKey, true);
            _ds.displaySimple(userVipDegree, false);
            return _os;
        }
    public:
        std::string strDanMuKey;
        taf::Int32 userVipDegree;
    };
    inline bool operator==(const StGetRichDataRequest&l, const StGetRichDataRequest&r)
    {
        return l.strDanMuKey == r.strDanMuKey && l.userVipDegree == r.userVipDegree;
    }
    inline bool operator!=(const StGetRichDataRequest&l, const StGetRichDataRequest&r)
    {
        return !(l == r);
    }

    struct StRichData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StRichData";
        }
        static string MD5()
        {
            return "c6cf121961ab9693dd6548d8b8c51692";
        }
        StRichData()
        :strRichId(""),iRichType(0),strRichName(""),strUrlIcon(""),strUrlBg(""),iPayType(0),iIsGlobal(0),strUrlHead(""),strColor(""),iIsDefault(0)
        {
        }
        void resetDefautlt()
        {
            strRichId = "";
            iRichType = 0;
            strRichName = "";
            strUrlIcon = "";
            strUrlBg = "";
            iPayType = 0;
            iIsGlobal = 0;
            strUrlHead = "";
            strColor = "";
            iIsDefault = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strRichId, 0);
            _os.write(iRichType, 1);
            _os.write(strRichName, 2);
            _os.write(strUrlIcon, 3);
            _os.write(strUrlBg, 4);
            _os.write(iPayType, 5);
            _os.write(iIsGlobal, 6);
            _os.write(strUrlHead, 7);
            _os.write(strColor, 8);
            _os.write(iIsDefault, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strRichId, 0, true);
            _is.read(iRichType, 1, false);
            _is.read(strRichName, 2, false);
            _is.read(strUrlIcon, 3, false);
            _is.read(strUrlBg, 4, false);
            _is.read(iPayType, 5, false);
            _is.read(iIsGlobal, 6, false);
            _is.read(strUrlHead, 7, false);
            _is.read(strColor, 8, false);
            _is.read(iIsDefault, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strRichId,"strRichId");
            _ds.display(iRichType,"iRichType");
            _ds.display(strRichName,"strRichName");
            _ds.display(strUrlIcon,"strUrlIcon");
            _ds.display(strUrlBg,"strUrlBg");
            _ds.display(iPayType,"iPayType");
            _ds.display(iIsGlobal,"iIsGlobal");
            _ds.display(strUrlHead,"strUrlHead");
            _ds.display(strColor,"strColor");
            _ds.display(iIsDefault,"iIsDefault");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strRichId, true);
            _ds.displaySimple(iRichType, true);
            _ds.displaySimple(strRichName, true);
            _ds.displaySimple(strUrlIcon, true);
            _ds.displaySimple(strUrlBg, true);
            _ds.displaySimple(iPayType, true);
            _ds.displaySimple(iIsGlobal, true);
            _ds.displaySimple(strUrlHead, true);
            _ds.displaySimple(strColor, true);
            _ds.displaySimple(iIsDefault, false);
            return _os;
        }
    public:
        std::string strRichId;
        taf::Int32 iRichType;
        std::string strRichName;
        std::string strUrlIcon;
        std::string strUrlBg;
        taf::Int32 iPayType;
        taf::Int32 iIsGlobal;
        std::string strUrlHead;
        std::string strColor;
        taf::Int32 iIsDefault;
    };
    inline bool operator==(const StRichData&l, const StRichData&r)
    {
        return l.strRichId == r.strRichId && l.iRichType == r.iRichType && l.strRichName == r.strRichName && l.strUrlIcon == r.strUrlIcon && l.strUrlBg == r.strUrlBg && l.iPayType == r.iPayType && l.iIsGlobal == r.iIsGlobal && l.strUrlHead == r.strUrlHead && l.strColor == r.strColor && l.iIsDefault == r.iIsDefault;
    }
    inline bool operator!=(const StRichData&l, const StRichData&r)
    {
        return !(l == r);
    }

    struct DMColorConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMColorConfig";
        }
        static string MD5()
        {
            return "0c486a91922444c6aefbcdd08647342f";
        }
        DMColorConfig()
        :strColorConfigId(""),strTitle(""),strColorInfoJson(""),lowVipDegree(0),lowVipDegreePic(""),lottieUrl(""),dialogImageUrl(""),defaultTips("")
        {
        }
        void resetDefautlt()
        {
            strColorConfigId = "";
            strTitle = "";
            strColorInfoJson = "";
            lowVipDegree = 0;
            lowVipDegreePic = "";
            lottieUrl = "";
            dialogImageUrl = "";
            defaultTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strColorConfigId, 0);
            _os.write(strTitle, 1);
            _os.write(strColorInfoJson, 2);
            _os.write(lowVipDegree, 3);
            _os.write(lowVipDegreePic, 4);
            _os.write(lottieUrl, 5);
            _os.write(dialogImageUrl, 6);
            _os.write(defaultTips, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strColorConfigId, 0, true);
            _is.read(strTitle, 1, false);
            _is.read(strColorInfoJson, 2, false);
            _is.read(lowVipDegree, 3, false);
            _is.read(lowVipDegreePic, 4, false);
            _is.read(lottieUrl, 5, false);
            _is.read(dialogImageUrl, 6, false);
            _is.read(defaultTips, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strColorConfigId,"strColorConfigId");
            _ds.display(strTitle,"strTitle");
            _ds.display(strColorInfoJson,"strColorInfoJson");
            _ds.display(lowVipDegree,"lowVipDegree");
            _ds.display(lowVipDegreePic,"lowVipDegreePic");
            _ds.display(lottieUrl,"lottieUrl");
            _ds.display(dialogImageUrl,"dialogImageUrl");
            _ds.display(defaultTips,"defaultTips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strColorConfigId, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(strColorInfoJson, true);
            _ds.displaySimple(lowVipDegree, true);
            _ds.displaySimple(lowVipDegreePic, true);
            _ds.displaySimple(lottieUrl, true);
            _ds.displaySimple(dialogImageUrl, true);
            _ds.displaySimple(defaultTips, false);
            return _os;
        }
    public:
        std::string strColorConfigId;
        std::string strTitle;
        std::string strColorInfoJson;
        taf::Int32 lowVipDegree;
        std::string lowVipDegreePic;
        std::string lottieUrl;
        std::string dialogImageUrl;
        std::string defaultTips;
    };
    inline bool operator==(const DMColorConfig&l, const DMColorConfig&r)
    {
        return l.strColorConfigId == r.strColorConfigId && l.strTitle == r.strTitle && l.strColorInfoJson == r.strColorInfoJson && l.lowVipDegree == r.lowVipDegree && l.lowVipDegreePic == r.lowVipDegreePic && l.lottieUrl == r.lottieUrl && l.dialogImageUrl == r.dialogImageUrl && l.defaultTips == r.defaultTips;
    }
    inline bool operator!=(const DMColorConfig&l, const DMColorConfig&r)
    {
        return !(l == r);
    }

    struct DMEasterEgg : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMEasterEgg";
        }
        static string MD5()
        {
            return "07725cc91d7d5e1eb3b91c342bd20a5b";
        }
        DMEasterEgg()
        :strEggId(""),strEggUrl(""),minInterval(3000),maxExposureTime(1)
        {
        }
        void resetDefautlt()
        {
            strEggId = "";
            strEggUrl = "";
            minInterval = 3000;
            maxExposureTime = 1;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strEggId, 0);
            _os.write(strEggUrl, 1);
            _os.write(vecEggKey, 2);
            _os.write(minInterval, 3);
            _os.write(maxExposureTime, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strEggId, 0, true);
            _is.read(strEggUrl, 1, false);
            _is.read(vecEggKey, 2, false);
            _is.read(minInterval, 3, false);
            _is.read(maxExposureTime, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strEggId,"strEggId");
            _ds.display(strEggUrl,"strEggUrl");
            _ds.display(vecEggKey,"vecEggKey");
            _ds.display(minInterval,"minInterval");
            _ds.display(maxExposureTime,"maxExposureTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strEggId, true);
            _ds.displaySimple(strEggUrl, true);
            _ds.displaySimple(vecEggKey, true);
            _ds.displaySimple(minInterval, true);
            _ds.displaySimple(maxExposureTime, false);
            return _os;
        }
    public:
        std::string strEggId;
        std::string strEggUrl;
        vector<std::string> vecEggKey;
        taf::Int64 minInterval;
        taf::Int32 maxExposureTime;
    };
    inline bool operator==(const DMEasterEgg&l, const DMEasterEgg&r)
    {
        return l.strEggId == r.strEggId && l.strEggUrl == r.strEggUrl && l.vecEggKey == r.vecEggKey && l.minInterval == r.minInterval && l.maxExposureTime == r.maxExposureTime;
    }
    inline bool operator!=(const DMEasterEgg&l, const DMEasterEgg&r)
    {
        return !(l == r);
    }

    struct StarSupportDMInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarSupportDMInfo";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        StarSupportDMInfo()
        :supportConfigId(""),supportStarId(""),strTitle(""),starSupportHeaderText(""),strColorInfoJson("")
        {
        }
        void resetDefautlt()
        {
            supportConfigId = "";
            supportStarId = "";
            strTitle = "";
            starSupportHeaderText = "";
            strColorInfoJson = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(supportConfigId, 0);
            _os.write(supportStarId, 1);
            _os.write(strTitle, 2);
            _os.write(starSupportHeaderText, 3);
            _os.write(strColorInfoJson, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(supportConfigId, 0, true);
            _is.read(supportStarId, 1, true);
            _is.read(strTitle, 2, false);
            _is.read(starSupportHeaderText, 3, false);
            _is.read(strColorInfoJson, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(supportConfigId,"supportConfigId");
            _ds.display(supportStarId,"supportStarId");
            _ds.display(strTitle,"strTitle");
            _ds.display(starSupportHeaderText,"starSupportHeaderText");
            _ds.display(strColorInfoJson,"strColorInfoJson");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(supportConfigId, true);
            _ds.displaySimple(supportStarId, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(starSupportHeaderText, true);
            _ds.displaySimple(strColorInfoJson, false);
            return _os;
        }
    public:
        std::string supportConfigId;
        std::string supportStarId;
        std::string strTitle;
        std::string starSupportHeaderText;
        std::string strColorInfoJson;
    };
    inline bool operator==(const StarSupportDMInfo&l, const StarSupportDMInfo&r)
    {
        return l.supportConfigId == r.supportConfigId && l.supportStarId == r.supportStarId && l.strTitle == r.strTitle && l.starSupportHeaderText == r.starSupportHeaderText && l.strColorInfoJson == r.strColorInfoJson;
    }
    inline bool operator!=(const StarSupportDMInfo&l, const StarSupportDMInfo&r)
    {
        return !(l == r);
    }

    struct StarSupportConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarSupportConfig";
        }
        static string MD5()
        {
            return "3a0230048138648493a2d01c870e32c8";
        }
        StarSupportConfig()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(starSupportDMInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(starSupportDMInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(starSupportDMInfo,"starSupportDMInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(starSupportDMInfo, false);
            return _os;
        }
    public:
        std::string dataKey;
        vector<jce::StarSupportDMInfo> starSupportDMInfo;
    };
    inline bool operator==(const StarSupportConfig&l, const StarSupportConfig&r)
    {
        return l.dataKey == r.dataKey && l.starSupportDMInfo == r.starSupportDMInfo;
    }
    inline bool operator!=(const StarSupportConfig&l, const StarSupportConfig&r)
    {
        return !(l == r);
    }

    struct RoleDMConfigItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RoleDMConfigItem";
        }
        static string MD5()
        {
            return "fff44d8937f5c4b352125bb793c413d9";
        }
        RoleDMConfigItem()
        :roleConfigId(""),strHeadUrl(""),strSelectedHeadUrl(""),strName(""),lowVipDegree(0),lowVipDegreePic(""),strHint(""),type(0)
        {
        }
        void resetDefautlt()
        {
            roleConfigId = "";
            strHeadUrl = "";
            strSelectedHeadUrl = "";
            strName = "";
            lowVipDegree = 0;
            lowVipDegreePic = "";
            strHint = "";
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(roleConfigId, 0);
            _os.write(strHeadUrl, 1);
            _os.write(strSelectedHeadUrl, 2);
            _os.write(strName, 3);
            _os.write(lowVipDegree, 4);
            _os.write(lowVipDegreePic, 5);
            _os.write(strHint, 6);
            _os.write(type, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(roleConfigId, 0, true);
            _is.read(strHeadUrl, 1, true);
            _is.read(strSelectedHeadUrl, 2, true);
            _is.read(strName, 3, false);
            _is.read(lowVipDegree, 4, false);
            _is.read(lowVipDegreePic, 5, false);
            _is.read(strHint, 6, false);
            _is.read(type, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(roleConfigId,"roleConfigId");
            _ds.display(strHeadUrl,"strHeadUrl");
            _ds.display(strSelectedHeadUrl,"strSelectedHeadUrl");
            _ds.display(strName,"strName");
            _ds.display(lowVipDegree,"lowVipDegree");
            _ds.display(lowVipDegreePic,"lowVipDegreePic");
            _ds.display(strHint,"strHint");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(roleConfigId, true);
            _ds.displaySimple(strHeadUrl, true);
            _ds.displaySimple(strSelectedHeadUrl, true);
            _ds.displaySimple(strName, true);
            _ds.displaySimple(lowVipDegree, true);
            _ds.displaySimple(lowVipDegreePic, true);
            _ds.displaySimple(strHint, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        std::string roleConfigId;
        std::string strHeadUrl;
        std::string strSelectedHeadUrl;
        std::string strName;
        taf::Int32 lowVipDegree;
        std::string lowVipDegreePic;
        std::string strHint;
        taf::Int32 type;
    };
    inline bool operator==(const RoleDMConfigItem&l, const RoleDMConfigItem&r)
    {
        return l.roleConfigId == r.roleConfigId && l.strHeadUrl == r.strHeadUrl && l.strSelectedHeadUrl == r.strSelectedHeadUrl && l.strName == r.strName && l.lowVipDegree == r.lowVipDegree && l.lowVipDegreePic == r.lowVipDegreePic && l.strHint == r.strHint && l.type == r.type;
    }
    inline bool operator!=(const RoleDMConfigItem&l, const RoleDMConfigItem&r)
    {
        return !(l == r);
    }

    struct RoleDMConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RoleDMConfig";
        }
        static string MD5()
        {
            return "2388d50c775baaf4f9b0d777d415e150";
        }
        RoleDMConfig()
        :strTitle(""),openVipTips("")
        {
        }
        void resetDefautlt()
        {
            strTitle = "";
            openVipTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(roleDMConfigList, 0);
            _os.write(strTitle, 1);
            _os.write(openVipAction, 2);
            _os.write(openVipTips, 3);
            _os.write(vipDialogInfo, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(roleDMConfigList, 0, true);
            _is.read(strTitle, 1, true);
            _is.read(openVipAction, 2, false);
            _is.read(openVipTips, 3, false);
            _is.read(vipDialogInfo, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(roleDMConfigList,"roleDMConfigList");
            _ds.display(strTitle,"strTitle");
            _ds.display(openVipAction,"openVipAction");
            _ds.display(openVipTips,"openVipTips");
            _ds.display(vipDialogInfo,"vipDialogInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(roleDMConfigList, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(openVipAction, true);
            _ds.displaySimple(openVipTips, true);
            _ds.displaySimple(vipDialogInfo, false);
            return _os;
        }
    public:
        vector<jce::RoleDMConfigItem> roleDMConfigList;
        std::string strTitle;
        jce::Action openVipAction;
        std::string openVipTips;
        jce::CommonDialogInfo vipDialogInfo;
    };
    inline bool operator==(const RoleDMConfig&l, const RoleDMConfig&r)
    {
        return l.roleDMConfigList == r.roleDMConfigList && l.strTitle == r.strTitle && l.openVipAction == r.openVipAction && l.openVipTips == r.openVipTips && l.vipDialogInfo == r.vipDialogInfo;
    }
    inline bool operator!=(const RoleDMConfig&l, const RoleDMConfig&r)
    {
        return !(l == r);
    }

    struct DMEmojiInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMEmojiInfo";
        }
        static string MD5()
        {
            return "c9a7b07e8b044d0fcbe9339d81fbbd69";
        }
        DMEmojiInfo()
        :emojiCode(""),emojiUrl(""),lowVipDegree(0),lowVipDegreePic("")
        {
        }
        void resetDefautlt()
        {
            emojiCode = "";
            emojiUrl = "";
            lowVipDegree = 0;
            lowVipDegreePic = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(emojiCode, 0);
            _os.write(emojiUrl, 1);
            _os.write(lowVipDegree, 2);
            _os.write(lowVipDegreePic, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(emojiCode, 0, true);
            _is.read(emojiUrl, 1, true);
            _is.read(lowVipDegree, 2, false);
            _is.read(lowVipDegreePic, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(emojiCode,"emojiCode");
            _ds.display(emojiUrl,"emojiUrl");
            _ds.display(lowVipDegree,"lowVipDegree");
            _ds.display(lowVipDegreePic,"lowVipDegreePic");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(emojiCode, true);
            _ds.displaySimple(emojiUrl, true);
            _ds.displaySimple(lowVipDegree, true);
            _ds.displaySimple(lowVipDegreePic, false);
            return _os;
        }
    public:
        std::string emojiCode;
        std::string emojiUrl;
        taf::Int32 lowVipDegree;
        std::string lowVipDegreePic;
    };
    inline bool operator==(const DMEmojiInfo&l, const DMEmojiInfo&r)
    {
        return l.emojiCode == r.emojiCode && l.emojiUrl == r.emojiUrl && l.lowVipDegree == r.lowVipDegree && l.lowVipDegreePic == r.lowVipDegreePic;
    }
    inline bool operator!=(const DMEmojiInfo&l, const DMEmojiInfo&r)
    {
        return !(l == r);
    }

    struct DMEmojiConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMEmojiConfig";
        }
        static string MD5()
        {
            return "3eaaeded0751f8146cf15e51b8c57d23";
        }
        DMEmojiConfig()
        :normalEmojiMaxCount(3),vipEmojiMaxCount(5)
        {
        }
        void resetDefautlt()
        {
            normalEmojiMaxCount = 3;
            vipEmojiMaxCount = 5;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vecEmojiInfo, 0);
            _os.write(normalEmojiMaxCount, 1);
            _os.write(vipEmojiMaxCount, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vecEmojiInfo, 0, true);
            _is.read(normalEmojiMaxCount, 1, false);
            _is.read(vipEmojiMaxCount, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vecEmojiInfo,"vecEmojiInfo");
            _ds.display(normalEmojiMaxCount,"normalEmojiMaxCount");
            _ds.display(vipEmojiMaxCount,"vipEmojiMaxCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vecEmojiInfo, true);
            _ds.displaySimple(normalEmojiMaxCount, true);
            _ds.displaySimple(vipEmojiMaxCount, false);
            return _os;
        }
    public:
        vector<jce::DMEmojiInfo> vecEmojiInfo;
        taf::Int32 normalEmojiMaxCount;
        taf::Int32 vipEmojiMaxCount;
    };
    inline bool operator==(const DMEmojiConfig&l, const DMEmojiConfig&r)
    {
        return l.vecEmojiInfo == r.vecEmojiInfo && l.normalEmojiMaxCount == r.normalEmojiMaxCount && l.vipEmojiMaxCount == r.vipEmojiMaxCount;
    }
    inline bool operator!=(const DMEmojiConfig&l, const DMEmojiConfig&r)
    {
        return !(l == r);
    }

    struct CacheDMEmojiRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CacheDMEmojiRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        CacheDMEmojiRequest()
        :dataVersion("")
        {
        }
        void resetDefautlt()
        {
            dataVersion = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataVersion, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataVersion, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataVersion,"dataVersion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataVersion, false);
            return _os;
        }
    public:
        std::string dataVersion;
    };
    inline bool operator==(const CacheDMEmojiRequest&l, const CacheDMEmojiRequest&r)
    {
        return l.dataVersion == r.dataVersion;
    }
    inline bool operator!=(const CacheDMEmojiRequest&l, const CacheDMEmojiRequest&r)
    {
        return !(l == r);
    }

    struct CacheDMEmojiResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CacheDMEmojiResponse";
        }
        static string MD5()
        {
            return "d838f193fd2e87fc191d33d72ae0cb1a";
        }
        CacheDMEmojiResponse()
        :errCode(0),dataVersion("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            dataVersion = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(dataVersion, 1);
            _os.write(vecAutoEmojiUpdateData, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(dataVersion, 1, false);
            _is.read(vecAutoEmojiUpdateData, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(dataVersion,"dataVersion");
            _ds.display(vecAutoEmojiUpdateData,"vecAutoEmojiUpdateData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(dataVersion, true);
            _ds.displaySimple(vecAutoEmojiUpdateData, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string dataVersion;
        vector<jce::DMEmojiInfo> vecAutoEmojiUpdateData;
    };
    inline bool operator==(const CacheDMEmojiResponse&l, const CacheDMEmojiResponse&r)
    {
        return l.errCode == r.errCode && l.dataVersion == r.dataVersion && l.vecAutoEmojiUpdateData == r.vecAutoEmojiUpdateData;
    }
    inline bool operator!=(const CacheDMEmojiResponse&l, const CacheDMEmojiResponse&r)
    {
        return !(l == r);
    }

    struct StGetRichDataResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StGetRichDataResponse";
        }
        static string MD5()
        {
            return "b6ec460669e491ab55f078a9ac648961";
        }
        StGetRichDataResponse()
        :errCode(0),strDanMuKey(""),openVipTips("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strDanMuKey = "";
            openVipTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strDanMuKey, 1);
            _os.write(vecStRichData, 2);
            _os.write(vecColorDMConfig, 3);
            _os.write(vecDMEasterEgg, 4);
            _os.write(vecStarSupportConfig, 5);
            _os.write(roleDMConfig, 6);
            _os.write(emojiConfig, 7);
            _os.write(openVipAction, 8);
            _os.write(openVipTips, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strDanMuKey, 1, true);
            _is.read(vecStRichData, 2, true);
            _is.read(vecColorDMConfig, 3, false);
            _is.read(vecDMEasterEgg, 4, false);
            _is.read(vecStarSupportConfig, 5, false);
            _is.read(roleDMConfig, 6, false);
            _is.read(emojiConfig, 7, false);
            _is.read(openVipAction, 8, false);
            _is.read(openVipTips, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strDanMuKey,"strDanMuKey");
            _ds.display(vecStRichData,"vecStRichData");
            _ds.display(vecColorDMConfig,"vecColorDMConfig");
            _ds.display(vecDMEasterEgg,"vecDMEasterEgg");
            _ds.display(vecStarSupportConfig,"vecStarSupportConfig");
            _ds.display(roleDMConfig,"roleDMConfig");
            _ds.display(emojiConfig,"emojiConfig");
            _ds.display(openVipAction,"openVipAction");
            _ds.display(openVipTips,"openVipTips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strDanMuKey, true);
            _ds.displaySimple(vecStRichData, true);
            _ds.displaySimple(vecColorDMConfig, true);
            _ds.displaySimple(vecDMEasterEgg, true);
            _ds.displaySimple(vecStarSupportConfig, true);
            _ds.displaySimple(roleDMConfig, true);
            _ds.displaySimple(emojiConfig, true);
            _ds.displaySimple(openVipAction, true);
            _ds.displaySimple(openVipTips, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strDanMuKey;
        vector<jce::StRichData> vecStRichData;
        vector<jce::DMColorConfig> vecColorDMConfig;
        vector<jce::DMEasterEgg> vecDMEasterEgg;
        vector<jce::StarSupportConfig> vecStarSupportConfig;
        jce::RoleDMConfig roleDMConfig;
        jce::DMEmojiConfig emojiConfig;
        jce::Action openVipAction;
        std::string openVipTips;
    };
    inline bool operator==(const StGetRichDataResponse&l, const StGetRichDataResponse&r)
    {
        return l.errCode == r.errCode && l.strDanMuKey == r.strDanMuKey && l.vecStRichData == r.vecStRichData && l.vecColorDMConfig == r.vecColorDMConfig && l.vecDMEasterEgg == r.vecDMEasterEgg && l.vecStarSupportConfig == r.vecStarSupportConfig && l.roleDMConfig == r.roleDMConfig && l.emojiConfig == r.emojiConfig && l.openVipAction == r.openVipAction && l.openVipTips == r.openVipTips;
    }
    inline bool operator!=(const StGetRichDataResponse&l, const StGetRichDataResponse&r)
    {
        return !(l == r);
    }

    struct DMReportRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMReportRequest";
        }
        static string MD5()
        {
            return "f8eb63738d1531f52a28d14122526dbe";
        }
        DMReportRequest()
        :ddwCommentId(0),ddwTargetId(0),description(""),seq(""),type(0)
        {
        }
        void resetDefautlt()
        {
            ddwCommentId = 0;
            ddwTargetId = 0;
            description = "";
            seq = "";
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwCommentId, 0);
            _os.write(ddwTargetId, 1);
            _os.write(description, 2);
            _os.write(seq, 3);
            _os.write(type, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwCommentId, 0, false);
            _is.read(ddwTargetId, 1, false);
            _is.read(description, 2, false);
            _is.read(seq, 3, false);
            _is.read(type, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwCommentId,"ddwCommentId");
            _ds.display(ddwTargetId,"ddwTargetId");
            _ds.display(description,"description");
            _ds.display(seq,"seq");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwCommentId, true);
            _ds.displaySimple(ddwTargetId, true);
            _ds.displaySimple(description, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        taf::Int64 ddwCommentId;
        taf::Int64 ddwTargetId;
        std::string description;
        std::string seq;
        taf::Int32 type;
    };
    inline bool operator==(const DMReportRequest&l, const DMReportRequest&r)
    {
        return l.ddwCommentId == r.ddwCommentId && l.ddwTargetId == r.ddwTargetId && l.description == r.description && l.seq == r.seq && l.type == r.type;
    }
    inline bool operator!=(const DMReportRequest&l, const DMReportRequest&r)
    {
        return !(l == r);
    }

    struct DMReportResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DMReportResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        DMReportResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const DMReportResponse&l, const DMReportResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const DMReportResponse&l, const DMReportResponse&r)
    {
        return !(l == r);
    }

    struct StarPopularInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarPopularInfo";
        }
        static string MD5()
        {
            return "18835b4b6f10bf3eb11c27bb1926491e";
        }
        StarPopularInfo()
        :supportConfigId(""),supportStarId(""),starName(""),starNameColor(""),starHeaderUrl(""),popularValue(0),popularValueTail("")
        {
        }
        void resetDefautlt()
        {
            supportConfigId = "";
            supportStarId = "";
            starName = "";
            starNameColor = "";
            starHeaderUrl = "";
            popularValue = 0;
            popularValueTail = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(supportConfigId, 0);
            _os.write(supportStarId, 1);
            _os.write(starName, 2);
            _os.write(starNameColor, 3);
            _os.write(starHeaderUrl, 4);
            _os.write(popularValue, 5);
            _os.write(popularValueTail, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(supportConfigId, 0, true);
            _is.read(supportStarId, 1, true);
            _is.read(starName, 2, false);
            _is.read(starNameColor, 3, false);
            _is.read(starHeaderUrl, 4, false);
            _is.read(popularValue, 5, false);
            _is.read(popularValueTail, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(supportConfigId,"supportConfigId");
            _ds.display(supportStarId,"supportStarId");
            _ds.display(starName,"starName");
            _ds.display(starNameColor,"starNameColor");
            _ds.display(starHeaderUrl,"starHeaderUrl");
            _ds.display(popularValue,"popularValue");
            _ds.display(popularValueTail,"popularValueTail");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(supportConfigId, true);
            _ds.displaySimple(supportStarId, true);
            _ds.displaySimple(starName, true);
            _ds.displaySimple(starNameColor, true);
            _ds.displaySimple(starHeaderUrl, true);
            _ds.displaySimple(popularValue, true);
            _ds.displaySimple(popularValueTail, false);
            return _os;
        }
    public:
        std::string supportConfigId;
        std::string supportStarId;
        std::string starName;
        std::string starNameColor;
        std::string starHeaderUrl;
        taf::Int64 popularValue;
        std::string popularValueTail;
    };
    inline bool operator==(const StarPopularInfo&l, const StarPopularInfo&r)
    {
        return l.supportConfigId == r.supportConfigId && l.supportStarId == r.supportStarId && l.starName == r.starName && l.starNameColor == r.starNameColor && l.starHeaderUrl == r.starHeaderUrl && l.popularValue == r.popularValue && l.popularValueTail == r.popularValueTail;
    }
    inline bool operator!=(const StarPopularInfo&l, const StarPopularInfo&r)
    {
        return !(l == r);
    }

    struct MostPopularInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MostPopularInfo";
        }
        static string MD5()
        {
            return "ceb7430faad7c68ad020f91498381795";
        }
        MostPopularInfo()
        :popularValue(0),mostPopularLottieUrl(""),popularValueColor(""),popularValueLeft(0),popularValueTop(0),popularValueSize(0)
        {
        }
        void resetDefautlt()
        {
            popularValue = 0;
            mostPopularLottieUrl = "";
            popularValueColor = "";
            popularValueLeft = 0;
            popularValueTop = 0;
            popularValueSize = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(popularValue, 0);
            _os.write(mostPopularLottieUrl, 1);
            _os.write(popularValueColor, 2);
            _os.write(popularValueLeft, 3);
            _os.write(popularValueTop, 4);
            _os.write(popularValueSize, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(popularValue, 0, true);
            _is.read(mostPopularLottieUrl, 1, true);
            _is.read(popularValueColor, 2, false);
            _is.read(popularValueLeft, 3, false);
            _is.read(popularValueTop, 4, false);
            _is.read(popularValueSize, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(popularValue,"popularValue");
            _ds.display(mostPopularLottieUrl,"mostPopularLottieUrl");
            _ds.display(popularValueColor,"popularValueColor");
            _ds.display(popularValueLeft,"popularValueLeft");
            _ds.display(popularValueTop,"popularValueTop");
            _ds.display(popularValueSize,"popularValueSize");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(popularValue, true);
            _ds.displaySimple(mostPopularLottieUrl, true);
            _ds.displaySimple(popularValueColor, true);
            _ds.displaySimple(popularValueLeft, true);
            _ds.displaySimple(popularValueTop, true);
            _ds.displaySimple(popularValueSize, false);
            return _os;
        }
    public:
        taf::Int64 popularValue;
        std::string mostPopularLottieUrl;
        std::string popularValueColor;
        taf::Int32 popularValueLeft;
        taf::Int32 popularValueTop;
        taf::Int32 popularValueSize;
    };
    inline bool operator==(const MostPopularInfo&l, const MostPopularInfo&r)
    {
        return l.popularValue == r.popularValue && l.mostPopularLottieUrl == r.mostPopularLottieUrl && l.popularValueColor == r.popularValueColor && l.popularValueLeft == r.popularValueLeft && l.popularValueTop == r.popularValueTop && l.popularValueSize == r.popularValueSize;
    }
    inline bool operator!=(const MostPopularInfo&l, const MostPopularInfo&r)
    {
        return !(l == r);
    }

    struct StarPopularRankRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarPopularRankRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        StarPopularRankRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const StarPopularRankRequest&l, const StarPopularRankRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const StarPopularRankRequest&l, const StarPopularRankRequest&r)
    {
        return !(l == r);
    }

    struct StarPopularRankResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarPopularRankResponse";
        }
        static string MD5()
        {
            return "d1d17771447904a2f07747d32119a18b";
        }
        StarPopularRankResponse()
        :errCode(0),state(0),rankRefreshInterval(5000)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            state = 0;
            rankRefreshInterval = 5000;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(starPopularInfoList, 1);
            _os.write(state, 2);
            _os.write(mostPopularInfo, 3);
            _os.write(rankRefreshInterval, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(starPopularInfoList, 1, false);
            _is.read(state, 2, false);
            _is.read(mostPopularInfo, 3, false);
            _is.read(rankRefreshInterval, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(starPopularInfoList,"starPopularInfoList");
            _ds.display(state,"state");
            _ds.display(mostPopularInfo,"mostPopularInfo");
            _ds.display(rankRefreshInterval,"rankRefreshInterval");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(starPopularInfoList, true);
            _ds.displaySimple(state, true);
            _ds.displaySimple(mostPopularInfo, true);
            _ds.displaySimple(rankRefreshInterval, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::StarPopularInfo> starPopularInfoList;
        taf::Int32 state;
        jce::MostPopularInfo mostPopularInfo;
        taf::Int32 rankRefreshInterval;
    };
    inline bool operator==(const StarPopularRankResponse&l, const StarPopularRankResponse&r)
    {
        return l.errCode == r.errCode && l.starPopularInfoList == r.starPopularInfoList && l.state == r.state && l.mostPopularInfo == r.mostPopularInfo && l.rankRefreshInterval == r.rankRefreshInterval;
    }
    inline bool operator!=(const StarPopularRankResponse&l, const StarPopularRankResponse&r)
    {
        return !(l == r);
    }


}

#define jce_DMVCInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.strPosterUrl,b.strPosterUrl);

#define jce_DMGiftInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwStarAccountType,b.dwStarAccountType);jce_copy_struct(a.strStarAccountId,b.strStarAccountId);jce_copy_struct(a.strGiftId,b.strGiftId);jce_copy_struct(a.dwToolPrice,b.dwToolPrice);jce_copy_struct(a.strEffectId,b.strEffectId);jce_copy_struct(a.strStarHeadUrl,b.strStarHeadUrl);jce_copy_struct(a.strStarNick,b.strStarNick);jce_copy_struct(a.strGiftName,b.strGiftName);jce_copy_struct(a.dwToolCount,b.dwToolCount);jce_copy_struct(a.strToolUnit,b.strToolUnit);jce_copy_struct(a.strSpecialEffects,b.strSpecialEffects);

#define jce_DMParentCommentInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.parentUserInfo,b.parentUserInfo);jce_copy_struct(a.content,b.content);jce_copy_struct(a.mediaContentType,b.mediaContentType);jce_copy_struct(a.vecVoiceData,b.vecVoiceData);jce_copy_struct(a.vecImageData,b.vecImageData);

#define jce_DMCommentActionInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actionItem,b.actionItem);jce_copy_struct(a.attentItem,b.attentItem);

#define jce_DMComment_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwCommentId,b.ddwCommentId);jce_copy_struct(a.ddwTargetId,b.ddwTargetId);jce_copy_struct(a.sContent,b.sContent);jce_copy_struct(a.ddwUin,b.ddwUin);jce_copy_struct(a.dwIsFriend,b.dwIsFriend);jce_copy_struct(a.dwIsOp,b.dwIsOp);jce_copy_struct(a.dwIsSelf,b.dwIsSelf);jce_copy_struct(a.dwTimePoint,b.dwTimePoint);jce_copy_struct(a.dwUpCount,b.dwUpCount);jce_copy_struct(a.ddwPostTime,b.ddwPostTime);jce_copy_struct(a.strNickName,b.strNickName);jce_copy_struct(a.strHeadUrl,b.strHeadUrl);jce_copy_struct(a.strQQHeadUrl,b.strQQHeadUrl);jce_copy_struct(a.strGiftUrl,b.strGiftUrl);jce_copy_struct(a.dwFirstTag,b.dwFirstTag);jce_copy_struct(a.highlightColor,b.highlightColor);jce_copy_struct(a.strHlwLevelPic,b.strHlwLevelPic);jce_copy_struct(a.strBubbleId,b.strBubbleId);jce_copy_struct(a.strDanmuBackPic,b.strDanmuBackPic);jce_copy_struct(a.strDanmuBackColor,b.strDanmuBackColor);jce_copy_struct(a.strDanmuBackHeadPic,b.strDanmuBackHeadPic);jce_copy_struct(a.dwHoldTime,b.dwHoldTime);jce_copy_struct(a.stGiftInfo,b.stGiftInfo);jce_copy_struct(a.vecVoiceData,b.vecVoiceData);jce_copy_struct(a.vecImageData,b.vecImageData);jce_copy_struct(a.vecVideoData,b.vecVideoData);jce_copy_struct(a.dwDanmuContentType,b.dwDanmuContentType);jce_copy_struct(a.dwPriority,b.dwPriority);jce_copy_struct(a.parentComment,b.parentComment);jce_copy_struct(a.actionInfo,b.actionInfo);jce_copy_struct(a.strColorInfoJson,b.strColorInfoJson);jce_copy_struct(a.richIdType,b.richIdType);jce_copy_struct(a.hotType,b.hotType);jce_copy_struct(a.userVipDegree,b.userVipDegree);

#define jce_DMPostCommentRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.DMContentKey,b.DMContentKey);jce_copy_struct(a.sContent,b.sContent);jce_copy_struct(a.dwTimePoint,b.dwTimePoint);jce_copy_struct(a.strRichId,b.strRichId);jce_copy_struct(a.dwLiveWatchBack,b.dwLiveWatchBack);jce_copy_struct(a.stStarInfo,b.stStarInfo);jce_copy_struct(a.stVCInfo,b.stVCInfo);jce_copy_struct(a.strColorInfoJson,b.strColorInfoJson);jce_copy_struct(a.richIdType,b.richIdType);jce_copy_struct(a.userVipDegree,b.userVipDegree);

#define jce_DMPostCommentResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.stComment,b.stComment);

#define jce_DMLikeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.DMContentKey,b.DMContentKey);jce_copy_struct(a.ddwCommentId,b.ddwCommentId);

#define jce_DMLikeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.stComment,b.stComment);

#define jce_StarSupportInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);

#define jce_DMCommentListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.DMContentKey,b.DMContentKey);jce_copy_struct(a.dwStartTime,b.dwStartTime);jce_copy_struct(a.dwFirstReq,b.dwFirstReq);jce_copy_struct(a.dwDMRowOfNormal,b.dwDMRowOfNormal);jce_copy_struct(a.dwDWRowOfSpacer,b.dwDWRowOfSpacer);jce_copy_struct(a.strSessionKey,b.strSessionKey);jce_copy_struct(a.dwVersion,b.dwVersion);jce_copy_struct(a.dwStyle,b.dwStyle);jce_copy_struct(a.dwLiveWatchBack,b.dwLiveWatchBack);

#define jce_DMEmojiAnimateInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.emojiAnimateId,b.emojiAnimateId);jce_copy_struct(a.emojiLottieUrl,b.emojiLottieUrl);jce_copy_struct(a.emojiTimeStamp,b.emojiTimeStamp);jce_copy_struct(a.emojiIntervalTime,b.emojiIntervalTime);

#define jce_DMCommentListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.dwNextTimeDur,b.dwNextTimeDur);jce_copy_struct(a.commentList,b.commentList);jce_copy_struct(a.ddwLastStamp,b.ddwLastStamp);jce_copy_struct(a.dwLoopInterval,b.dwLoopInterval);jce_copy_struct(a.bContinued,b.bContinued);jce_copy_struct(a.strSessionKey,b.strSessionKey);jce_copy_struct(a.starSupportInfo,b.starSupportInfo);jce_copy_struct(a.emojiAnimateList,b.emojiAnimateList);

#define jce_DMGetUserCfgRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.DMContentKey,b.DMContentKey);jce_copy_struct(a.optionType,b.optionType);jce_copy_struct(a.userStaus,b.userStaus);

#define jce_DMGetUserCfgResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.wUserStaus,b.wUserStaus);jce_copy_struct(a.dwPresentArea,b.dwPresentArea);jce_copy_struct(a.dwFontSize,b.dwFontSize);jce_copy_struct(a.dwSpeed,b.dwSpeed);jce_copy_struct(a.dwAlpha,b.dwAlpha);

#define jce_DMRegistExtData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strCid,b.strCid);jce_copy_struct(a.strLid,b.strLid);

#define jce_DMRegistTargetIdMoreRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.wRegistType,b.wRegistType);jce_copy_struct(a.vecIdList,b.vecIdList);jce_copy_struct(a.wSpeSource,b.wSpeSource);jce_copy_struct(a.mapExtData,b.mapExtData);jce_copy_struct(a.bIsGetUserCfg,b.bIsGetUserCfg);

#define jce_DMAntiBlockingInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.isSupportAntiBlocking,b.isSupportAntiBlocking);jce_copy_struct(a.cdnUrl,b.cdnUrl);jce_copy_struct(a.frameRateList,b.frameRateList);jce_copy_struct(a.defaultState,b.defaultState);jce_copy_struct(a.sliceDuration,b.sliceDuration);

#define jce_DMRegistResultInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDanMuKey,b.strDanMuKey);jce_copy_struct(a.wOpened,b.wOpened);jce_copy_struct(a.wDisplay,b.wDisplay);jce_copy_struct(a.iIsBubbleFlg,b.iIsBubbleFlg);jce_copy_struct(a.antiBlockingInfo,b.antiBlockingInfo);

#define jce_DMRegistTargetIdMoreResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.stMap,b.stMap);jce_copy_struct(a.wUserStaus,b.wUserStaus);jce_copy_struct(a.dwPresentArea,b.dwPresentArea);jce_copy_struct(a.dwFontSize,b.dwFontSize);jce_copy_struct(a.dwSpeed,b.dwSpeed);jce_copy_struct(a.dwAlpha,b.dwAlpha);

#define jce_DMGetPubTotalRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwType,b.dwType);jce_copy_struct(a.vecIdList,b.vecIdList);

#define jce_DMGetPubTotalResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pubTotalMap,b.pubTotalMap);

#define jce_StGetRichDataRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDanMuKey,b.strDanMuKey);jce_copy_struct(a.userVipDegree,b.userVipDegree);

#define jce_StRichData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strRichId,b.strRichId);jce_copy_struct(a.iRichType,b.iRichType);jce_copy_struct(a.strRichName,b.strRichName);jce_copy_struct(a.strUrlIcon,b.strUrlIcon);jce_copy_struct(a.strUrlBg,b.strUrlBg);jce_copy_struct(a.iPayType,b.iPayType);jce_copy_struct(a.iIsGlobal,b.iIsGlobal);jce_copy_struct(a.strUrlHead,b.strUrlHead);jce_copy_struct(a.strColor,b.strColor);jce_copy_struct(a.iIsDefault,b.iIsDefault);

#define jce_DMColorConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strColorConfigId,b.strColorConfigId);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.strColorInfoJson,b.strColorInfoJson);jce_copy_struct(a.lowVipDegree,b.lowVipDegree);jce_copy_struct(a.lowVipDegreePic,b.lowVipDegreePic);jce_copy_struct(a.lottieUrl,b.lottieUrl);jce_copy_struct(a.dialogImageUrl,b.dialogImageUrl);jce_copy_struct(a.defaultTips,b.defaultTips);

#define jce_DMEasterEgg_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strEggId,b.strEggId);jce_copy_struct(a.strEggUrl,b.strEggUrl);jce_copy_struct(a.vecEggKey,b.vecEggKey);jce_copy_struct(a.minInterval,b.minInterval);jce_copy_struct(a.maxExposureTime,b.maxExposureTime);

#define jce_StarSupportDMInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.supportConfigId,b.supportConfigId);jce_copy_struct(a.supportStarId,b.supportStarId);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.starSupportHeaderText,b.starSupportHeaderText);jce_copy_struct(a.strColorInfoJson,b.strColorInfoJson);

#define jce_StarSupportConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.starSupportDMInfo,b.starSupportDMInfo);

#define jce_RoleDMConfigItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.roleConfigId,b.roleConfigId);jce_copy_struct(a.strHeadUrl,b.strHeadUrl);jce_copy_struct(a.strSelectedHeadUrl,b.strSelectedHeadUrl);jce_copy_struct(a.strName,b.strName);jce_copy_struct(a.lowVipDegree,b.lowVipDegree);jce_copy_struct(a.lowVipDegreePic,b.lowVipDegreePic);jce_copy_struct(a.strHint,b.strHint);jce_copy_struct(a.type,b.type);

#define jce_RoleDMConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.roleDMConfigList,b.roleDMConfigList);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.openVipAction,b.openVipAction);jce_copy_struct(a.openVipTips,b.openVipTips);jce_copy_struct(a.vipDialogInfo,b.vipDialogInfo);

#define jce_DMEmojiInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.emojiCode,b.emojiCode);jce_copy_struct(a.emojiUrl,b.emojiUrl);jce_copy_struct(a.lowVipDegree,b.lowVipDegree);jce_copy_struct(a.lowVipDegreePic,b.lowVipDegreePic);

#define jce_DMEmojiConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vecEmojiInfo,b.vecEmojiInfo);jce_copy_struct(a.normalEmojiMaxCount,b.normalEmojiMaxCount);jce_copy_struct(a.vipEmojiMaxCount,b.vipEmojiMaxCount);

#define jce_CacheDMEmojiRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataVersion,b.dataVersion);

#define jce_CacheDMEmojiResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.dataVersion,b.dataVersion);jce_copy_struct(a.vecAutoEmojiUpdateData,b.vecAutoEmojiUpdateData);

#define jce_StGetRichDataResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strDanMuKey,b.strDanMuKey);jce_copy_struct(a.vecStRichData,b.vecStRichData);jce_copy_struct(a.vecColorDMConfig,b.vecColorDMConfig);jce_copy_struct(a.vecDMEasterEgg,b.vecDMEasterEgg);jce_copy_struct(a.vecStarSupportConfig,b.vecStarSupportConfig);jce_copy_struct(a.roleDMConfig,b.roleDMConfig);jce_copy_struct(a.emojiConfig,b.emojiConfig);jce_copy_struct(a.openVipAction,b.openVipAction);jce_copy_struct(a.openVipTips,b.openVipTips);

#define jce_DMReportRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwCommentId,b.ddwCommentId);jce_copy_struct(a.ddwTargetId,b.ddwTargetId);jce_copy_struct(a.description,b.description);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.type,b.type);

#define jce_DMReportResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_StarPopularInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.supportConfigId,b.supportConfigId);jce_copy_struct(a.supportStarId,b.supportStarId);jce_copy_struct(a.starName,b.starName);jce_copy_struct(a.starNameColor,b.starNameColor);jce_copy_struct(a.starHeaderUrl,b.starHeaderUrl);jce_copy_struct(a.popularValue,b.popularValue);jce_copy_struct(a.popularValueTail,b.popularValueTail);

#define jce_MostPopularInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.popularValue,b.popularValue);jce_copy_struct(a.mostPopularLottieUrl,b.mostPopularLottieUrl);jce_copy_struct(a.popularValueColor,b.popularValueColor);jce_copy_struct(a.popularValueLeft,b.popularValueLeft);jce_copy_struct(a.popularValueTop,b.popularValueTop);jce_copy_struct(a.popularValueSize,b.popularValueSize);

#define jce_StarPopularRankRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_StarPopularRankResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.starPopularInfoList,b.starPopularInfoList);jce_copy_struct(a.state,b.state);jce_copy_struct(a.mostPopularInfo,b.mostPopularInfo);jce_copy_struct(a.rankRefreshInterval,b.rankRefreshInterval);



#endif
