// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_voice.jce'
// **********************************************************************

#ifndef __QQVIDEO_VOICE_H_
#define __QQVIDEO_VOICE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"
#include "qqvideo_live.h"


namespace jce
{
    struct ChargesItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChargesItem";
        }
        static string MD5()
        {
            return "406bbdf4ecc013f369c96ec5c7930ac1";
        }
        ChargesItem()
        :propertyType(0),num(0),icon(""),unit(""),desc("")
        {
        }
        void resetDefautlt()
        {
            propertyType = 0;
            num = 0;
            icon = "";
            unit = "";
            desc = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(propertyType, 0);
            _os.write(num, 1);
            _os.write(icon, 2);
            _os.write(unit, 3);
            _os.write(desc, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(propertyType, 0, true);
            _is.read(num, 1, true);
            _is.read(icon, 2, false);
            _is.read(unit, 3, false);
            _is.read(desc, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(propertyType,"propertyType");
            _ds.display(num,"num");
            _ds.display(icon,"icon");
            _ds.display(unit,"unit");
            _ds.display(desc,"desc");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(propertyType, true);
            _ds.displaySimple(num, true);
            _ds.displaySimple(icon, true);
            _ds.displaySimple(unit, true);
            _ds.displaySimple(desc, false);
            return _os;
        }
    public:
        taf::Int32 propertyType;
        taf::Int64 num;
        std::string icon;
        std::string unit;
        std::string desc;
    };
    inline bool operator==(const ChargesItem&l, const ChargesItem&r)
    {
        return l.propertyType == r.propertyType && l.num == r.num && l.icon == r.icon && l.unit == r.unit && l.desc == r.desc;
    }
    inline bool operator!=(const ChargesItem&l, const ChargesItem&r)
    {
        return !(l == r);
    }

    struct ContributionsItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ContributionsItem";
        }
        static string MD5()
        {
            return "6f44a7d40dff334001b004d20fa34fd4";
        }
        ContributionsItem()
        :time(""),values(""),offerColor("")
        {
        }
        void resetDefautlt()
        {
            time = "";
            values = "";
            offerColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actor, 0);
            _os.write(time, 1);
            _os.write(values, 2);
            _os.write(offerColor, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actor, 0, true);
            _is.read(time, 1, false);
            _is.read(values, 2, false);
            _is.read(offerColor, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actor,"actor");
            _ds.display(time,"time");
            _ds.display(values,"values");
            _ds.display(offerColor,"offerColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actor, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(values, true);
            _ds.displaySimple(offerColor, false);
            return _os;
        }
    public:
        jce::ActorInfo actor;
        std::string time;
        std::string values;
        std::string offerColor;
    };
    inline bool operator==(const ContributionsItem&l, const ContributionsItem&r)
    {
        return l.actor == r.actor && l.time == r.time && l.values == r.values && l.offerColor == r.offerColor;
    }
    inline bool operator!=(const ContributionsItem&l, const ContributionsItem&r)
    {
        return !(l == r);
    }

    struct ONAChinaVoiceList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAChinaVoiceList";
        }
        static string MD5()
        {
            return "9dea7a6a8e356edeb59dcd8f74299582";
        }
        ONAChinaVoiceList()
        :type(""),dataKey(""),propsDataKey(""),title(""),subhead(""),unit(""),desc(""),reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            type = "";
            dataKey = "";
            propsDataKey = "";
            title = "";
            subhead = "";
            unit = "";
            desc = "";
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(dataKey, 1);
            _os.write(actorInfoList, 2);
            _os.write(propsDataKey, 3);
            _os.write(title, 4);
            _os.write(subhead, 5);
            _os.write(action, 6);
            _os.write(markLabelList, 7);
            _os.write(optFlags, 8);
            _os.write(unit, 9);
            _os.write(desc, 10);
            _os.write(shareItem, 11);
            _os.write(reportParams, 12);
            _os.write(blackList, 13);
            _os.write(reportKey, 14);
            _os.write(groupSizeList, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(dataKey, 1, false);
            _is.read(actorInfoList, 2, false);
            _is.read(propsDataKey, 3, false);
            _is.read(title, 4, false);
            _is.read(subhead, 5, false);
            _is.read(action, 6, false);
            _is.read(markLabelList, 7, false);
            _is.read(optFlags, 8, false);
            _is.read(unit, 9, false);
            _is.read(desc, 10, false);
            _is.read(shareItem, 11, false);
            _is.read(reportParams, 12, false);
            _is.read(blackList, 13, false);
            _is.read(reportKey, 14, false);
            _is.read(groupSizeList, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            _ds.display(actorInfoList,"actorInfoList");
            _ds.display(propsDataKey,"propsDataKey");
            _ds.display(title,"title");
            _ds.display(subhead,"subhead");
            _ds.display(action,"action");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(optFlags,"optFlags");
            _ds.display(unit,"unit");
            _ds.display(desc,"desc");
            _ds.display(shareItem,"shareItem");
            _ds.display(reportParams,"reportParams");
            _ds.display(blackList,"blackList");
            _ds.display(reportKey,"reportKey");
            _ds.display(groupSizeList,"groupSizeList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(actorInfoList, true);
            _ds.displaySimple(propsDataKey, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subhead, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(optFlags, true);
            _ds.displaySimple(unit, true);
            _ds.displaySimple(desc, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(blackList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(groupSizeList, false);
            return _os;
        }
    public:
        std::string type;
        std::string dataKey;
        vector<jce::ActorInfo> actorInfoList;
        std::string propsDataKey;
        std::string title;
        std::string subhead;
        jce::Action action;
        vector<jce::MarkLabel> markLabelList;
        vector<std::string> optFlags;
        std::string unit;
        std::string desc;
        jce::ShareItem shareItem;
        std::string reportParams;
        vector<std::string> blackList;
        std::string reportKey;
        vector<taf::Int32> groupSizeList;
    };
    inline bool operator==(const ONAChinaVoiceList&l, const ONAChinaVoiceList&r)
    {
        return l.type == r.type && l.dataKey == r.dataKey && l.actorInfoList == r.actorInfoList && l.propsDataKey == r.propsDataKey && l.title == r.title && l.subhead == r.subhead && l.action == r.action && l.markLabelList == r.markLabelList && l.optFlags == r.optFlags && l.unit == r.unit && l.desc == r.desc && l.shareItem == r.shareItem && l.reportParams == r.reportParams && l.blackList == r.blackList && l.reportKey == r.reportKey && l.groupSizeList == r.groupSizeList;
    }
    inline bool operator!=(const ONAChinaVoiceList&l, const ONAChinaVoiceList&r)
    {
        return !(l == r);
    }

    struct SuperRankRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SuperRankRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        SuperRankRequest()
        :type(""),dataKey("")
        {
        }
        void resetDefautlt()
        {
            type = "";
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(dataKey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(dataKey, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string type;
        std::string dataKey;
    };
    inline bool operator==(const SuperRankRequest&l, const SuperRankRequest&r)
    {
        return l.type == r.type && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const SuperRankRequest&l, const SuperRankRequest&r)
    {
        return !(l == r);
    }

    struct SuperRankResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SuperRankResponse";
        }
        static string MD5()
        {
            return "7f9a48b56925b6acbf1d95c85afa4211";
        }
        SuperRankResponse()
        :errCode(0),unit("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            unit = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(moduleList, 1);
            _os.write(shareItem, 2);
            _os.write(optFlags, 3);
            _os.write(unit, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(moduleList, 1, true);
            _is.read(shareItem, 2, false);
            _is.read(optFlags, 3, false);
            _is.read(unit, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(moduleList,"moduleList");
            _ds.display(shareItem,"shareItem");
            _ds.display(optFlags,"optFlags");
            _ds.display(unit,"unit");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(moduleList, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(optFlags, true);
            _ds.displaySimple(unit, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::LiveTabModuleInfo> moduleList;
        jce::ShareItem shareItem;
        vector<std::string> optFlags;
        std::string unit;
    };
    inline bool operator==(const SuperRankResponse&l, const SuperRankResponse&r)
    {
        return l.errCode == r.errCode && l.moduleList == r.moduleList && l.shareItem == r.shareItem && l.optFlags == r.optFlags && l.unit == r.unit;
    }
    inline bool operator!=(const SuperRankResponse&l, const SuperRankResponse&r)
    {
        return !(l == r);
    }

    struct PopularityListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PopularityListRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        PopularityListRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, false);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const PopularityListRequest&l, const PopularityListRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const PopularityListRequest&l, const PopularityListRequest&r)
    {
        return !(l == r);
    }

    struct PopularityListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PopularityListResponse";
        }
        static string MD5()
        {
            return "2eda26809069ac50224fe6aecf9d4bd7";
        }
        PopularityListResponse()
        :errCode(0),propsDataKey(""),pageContext(""),isHaveNextPage(true),pluginTitle(""),bizType(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            propsDataKey = "";
            pageContext = "";
            isHaveNextPage = true;
            pluginTitle = "";
            bizType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(actorInfoList, 1);
            _os.write(propsDataKey, 2);
            _os.write(pageContext, 3);
            _os.write(isHaveNextPage, 4);
            _os.write(pluginTitle, 5);
            _os.write(blackList, 6);
            _os.write(bizType, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(actorInfoList, 1, true);
            _is.read(propsDataKey, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(isHaveNextPage, 4, false);
            _is.read(pluginTitle, 5, false);
            _is.read(blackList, 6, false);
            _is.read(bizType, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(actorInfoList,"actorInfoList");
            _ds.display(propsDataKey,"propsDataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(isHaveNextPage,"isHaveNextPage");
            _ds.display(pluginTitle,"pluginTitle");
            _ds.display(blackList,"blackList");
            _ds.display(bizType,"bizType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(actorInfoList, true);
            _ds.displaySimple(propsDataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isHaveNextPage, true);
            _ds.displaySimple(pluginTitle, true);
            _ds.displaySimple(blackList, true);
            _ds.displaySimple(bizType, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::ActorInfo> actorInfoList;
        std::string propsDataKey;
        std::string pageContext;
        taf::Bool isHaveNextPage;
        std::string pluginTitle;
        vector<std::string> blackList;
        taf::Int32 bizType;
    };
    inline bool operator==(const PopularityListResponse&l, const PopularityListResponse&r)
    {
        return l.errCode == r.errCode && l.actorInfoList == r.actorInfoList && l.propsDataKey == r.propsDataKey && l.pageContext == r.pageContext && l.isHaveNextPage == r.isHaveNextPage && l.pluginTitle == r.pluginTitle && l.blackList == r.blackList && l.bizType == r.bizType;
    }
    inline bool operator!=(const PopularityListResponse&l, const PopularityListResponse&r)
    {
        return !(l == r);
    }

    struct MyContributionsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MyContributionsRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        MyContributionsRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const MyContributionsRequest&l, const MyContributionsRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const MyContributionsRequest&l, const MyContributionsRequest&r)
    {
        return !(l == r);
    }

    struct MyContributionsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MyContributionsResponse";
        }
        static string MD5()
        {
            return "c759483b507162882b10b056737dcbbf";
        }
        MyContributionsResponse()
        :errCode(0),pageContext(""),isHaveNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            isHaveNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(itemList, 1);
            _os.write(pageContext, 2);
            _os.write(isHaveNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(itemList, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(isHaveNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(itemList,"itemList");
            _ds.display(pageContext,"pageContext");
            _ds.display(isHaveNextPage,"isHaveNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isHaveNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::ContributionsItem> itemList;
        std::string pageContext;
        taf::Bool isHaveNextPage;
    };
    inline bool operator==(const MyContributionsResponse&l, const MyContributionsResponse&r)
    {
        return l.errCode == r.errCode && l.itemList == r.itemList && l.pageContext == r.pageContext && l.isHaveNextPage == r.isHaveNextPage;
    }
    inline bool operator!=(const MyContributionsResponse&l, const MyContributionsResponse&r)
    {
        return !(l == r);
    }

    struct UserVoteRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserVoteRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        UserVoteRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const UserVoteRequest&l, const UserVoteRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const UserVoteRequest&l, const UserVoteRequest&r)
    {
        return !(l == r);
    }

    struct UserVoteResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserVoteResponse";
        }
        static string MD5()
        {
            return "ccc62ba24ff11e0e7ebb9f1b7ec7da9b";
        }
        UserVoteResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(voteList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(voteList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(voteList,"voteList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(voteList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::VoteData> voteList;
    };
    inline bool operator==(const UserVoteResponse&l, const UserVoteResponse&r)
    {
        return l.errCode == r.errCode && l.voteList == r.voteList;
    }
    inline bool operator!=(const UserVoteResponse&l, const UserVoteResponse&r)
    {
        return !(l == r);
    }

    struct MyFansRankRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MyFansRankRequest";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        MyFansRankRequest()
        :dataKey(""),iNeedUserInfoFlag(0)
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            iNeedUserInfoFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(iNeedUserInfoFlag, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, false);
            _is.read(iNeedUserInfoFlag, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(iNeedUserInfoFlag,"iNeedUserInfoFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(iNeedUserInfoFlag, false);
            return _os;
        }
    public:
        std::string dataKey;
        taf::Int32 iNeedUserInfoFlag;
    };
    inline bool operator==(const MyFansRankRequest&l, const MyFansRankRequest&r)
    {
        return l.dataKey == r.dataKey && l.iNeedUserInfoFlag == r.iNeedUserInfoFlag;
    }
    inline bool operator!=(const MyFansRankRequest&l, const MyFansRankRequest&r)
    {
        return !(l == r);
    }

    struct MyFansRankResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MyFansRankResponse";
        }
        static string MD5()
        {
            return "e47b2ff87e29c9760e2260376fd25d71";
        }
        MyFansRankResponse()
        :errCode(0),iRankNum(0),iScore(0),strNick(""),strFaceUrl("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            iRankNum = 0;
            iScore = 0;
            strNick = "";
            strFaceUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(iRankNum, 1);
            _os.write(iScore, 2);
            _os.write(strNick, 3);
            _os.write(strFaceUrl, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(iRankNum, 1, true);
            _is.read(iScore, 2, true);
            _is.read(strNick, 3, false);
            _is.read(strFaceUrl, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(iRankNum,"iRankNum");
            _ds.display(iScore,"iScore");
            _ds.display(strNick,"strNick");
            _ds.display(strFaceUrl,"strFaceUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(iRankNum, true);
            _ds.displaySimple(iScore, true);
            _ds.displaySimple(strNick, true);
            _ds.displaySimple(strFaceUrl, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 iRankNum;
        taf::Int32 iScore;
        std::string strNick;
        std::string strFaceUrl;
    };
    inline bool operator==(const MyFansRankResponse&l, const MyFansRankResponse&r)
    {
        return l.errCode == r.errCode && l.iRankNum == r.iRankNum && l.iScore == r.iScore && l.strNick == r.strNick && l.strFaceUrl == r.strFaceUrl;
    }
    inline bool operator!=(const MyFansRankResponse&l, const MyFansRankResponse&r)
    {
        return !(l == r);
    }

    struct PKPopularityListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PKPopularityListRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        PKPopularityListRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const PKPopularityListRequest&l, const PKPopularityListRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const PKPopularityListRequest&l, const PKPopularityListRequest&r)
    {
        return !(l == r);
    }

    struct PKPopularityListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PKPopularityListResponse";
        }
        static string MD5()
        {
            return "a336a0306b35b3512b7a2fb94167b70b";
        }
        PKPopularityListResponse()
        :errCode(0),propsDataKey("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            propsDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(groupConfigs, 1);
            _os.write(vecGroupInfo, 2);
            _os.write(propsDataKey, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(groupConfigs, 1, true);
            _is.read(vecGroupInfo, 2, true);
            _is.read(propsDataKey, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(groupConfigs,"groupConfigs");
            _ds.display(vecGroupInfo,"vecGroupInfo");
            _ds.display(propsDataKey,"propsDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(groupConfigs, true);
            _ds.displaySimple(vecGroupInfo, true);
            _ds.displaySimple(propsDataKey, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        map<taf::Int32, std::string> groupConfigs;
        vector<jce::PKGroupInfo> vecGroupInfo;
        std::string propsDataKey;
    };
    inline bool operator==(const PKPopularityListResponse&l, const PKPopularityListResponse&r)
    {
        return l.errCode == r.errCode && l.groupConfigs == r.groupConfigs && l.vecGroupInfo == r.vecGroupInfo && l.propsDataKey == r.propsDataKey;
    }
    inline bool operator!=(const PKPopularityListResponse&l, const PKPopularityListResponse&r)
    {
        return !(l == r);
    }


}

#define jce_ChargesItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.propertyType,b.propertyType);jce_copy_struct(a.num,b.num);jce_copy_struct(a.icon,b.icon);jce_copy_struct(a.unit,b.unit);jce_copy_struct(a.desc,b.desc);

#define jce_ContributionsItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actor,b.actor);jce_copy_struct(a.time,b.time);jce_copy_struct(a.values,b.values);jce_copy_struct(a.offerColor,b.offerColor);

#define jce_ONAChinaVoiceList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.actorInfoList,b.actorInfoList);jce_copy_struct(a.propsDataKey,b.propsDataKey);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subhead,b.subhead);jce_copy_struct(a.action,b.action);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.optFlags,b.optFlags);jce_copy_struct(a.unit,b.unit);jce_copy_struct(a.desc,b.desc);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.blackList,b.blackList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.groupSizeList,b.groupSizeList);

#define jce_SuperRankRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_SuperRankResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.moduleList,b.moduleList);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.optFlags,b.optFlags);jce_copy_struct(a.unit,b.unit);

#define jce_PopularityListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_PopularityListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.actorInfoList,b.actorInfoList);jce_copy_struct(a.propsDataKey,b.propsDataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isHaveNextPage,b.isHaveNextPage);jce_copy_struct(a.pluginTitle,b.pluginTitle);jce_copy_struct(a.blackList,b.blackList);jce_copy_struct(a.bizType,b.bizType);

#define jce_MyContributionsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_MyContributionsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isHaveNextPage,b.isHaveNextPage);

#define jce_UserVoteRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_UserVoteResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.voteList,b.voteList);

#define jce_MyFansRankRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.iNeedUserInfoFlag,b.iNeedUserInfoFlag);

#define jce_MyFansRankResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.iRankNum,b.iRankNum);jce_copy_struct(a.iScore,b.iScore);jce_copy_struct(a.strNick,b.strNick);jce_copy_struct(a.strFaceUrl,b.strFaceUrl);

#define jce_PKPopularityListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_PKPopularityListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.groupConfigs,b.groupConfigs);jce_copy_struct(a.vecGroupInfo,b.vecGroupInfo);jce_copy_struct(a.propsDataKey,b.propsDataKey);



#endif
