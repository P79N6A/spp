// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_ad_inside.jce'
// **********************************************************************

#ifndef __QQVIDEO_AD_INSIDE_H_
#define __QQVIDEO_AD_INSIDE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_ad_common.h"
#include "qqvideo_ad_defines.h"
#include "qqvideo_debug.h"


namespace jce
{
    enum EAdVipState
    {
        EAdVipStateUnknown = -1,
        EAdVipStateNotLogin = 0,
        EAdVipStateLogin = 1,
        EAdVipStateHollyWoodVip = 2,
        EAdVipStateWebHollyWoodVip = 3,
        EAdVipStateQQVip = 4,
        EAdVipStateHollyWoodSuperVip = 5,
        EAdVipStateFreeAd = 6,
        EAdVipStateQQMusicVip = 7,
        EAdVipState15VIP = 8,
        EAdVipStateTVVIP = 9,
        EAdVipStateSPORTVIP = 10,
        EAdVipStateSupplementaryVip = 11,
    };
    inline string etos(const EAdVipState & e)
    {
        switch(e)
        {
            case EAdVipStateUnknown: return "EAdVipStateUnknown";
            case EAdVipStateNotLogin: return "EAdVipStateNotLogin";
            case EAdVipStateLogin: return "EAdVipStateLogin";
            case EAdVipStateHollyWoodVip: return "EAdVipStateHollyWoodVip";
            case EAdVipStateWebHollyWoodVip: return "EAdVipStateWebHollyWoodVip";
            case EAdVipStateQQVip: return "EAdVipStateQQVip";
            case EAdVipStateHollyWoodSuperVip: return "EAdVipStateHollyWoodSuperVip";
            case EAdVipStateFreeAd: return "EAdVipStateFreeAd";
            case EAdVipStateQQMusicVip: return "EAdVipStateQQMusicVip";
            case EAdVipState15VIP: return "EAdVipState15VIP";
            case EAdVipStateTVVIP: return "EAdVipStateTVVIP";
            case EAdVipStateSPORTVIP: return "EAdVipStateSPORTVIP";
            case EAdVipStateSupplementaryVip: return "EAdVipStateSupplementaryVip";
            default: return "";
        }
    }
    inline int stoe(const string & s, EAdVipState & e)
    {
        if(s == "EAdVipStateUnknown")  { e=EAdVipStateUnknown; return 0;}
        if(s == "EAdVipStateNotLogin")  { e=EAdVipStateNotLogin; return 0;}
        if(s == "EAdVipStateLogin")  { e=EAdVipStateLogin; return 0;}
        if(s == "EAdVipStateHollyWoodVip")  { e=EAdVipStateHollyWoodVip; return 0;}
        if(s == "EAdVipStateWebHollyWoodVip")  { e=EAdVipStateWebHollyWoodVip; return 0;}
        if(s == "EAdVipStateQQVip")  { e=EAdVipStateQQVip; return 0;}
        if(s == "EAdVipStateHollyWoodSuperVip")  { e=EAdVipStateHollyWoodSuperVip; return 0;}
        if(s == "EAdVipStateFreeAd")  { e=EAdVipStateFreeAd; return 0;}
        if(s == "EAdVipStateQQMusicVip")  { e=EAdVipStateQQMusicVip; return 0;}
        if(s == "EAdVipState15VIP")  { e=EAdVipState15VIP; return 0;}
        if(s == "EAdVipStateTVVIP")  { e=EAdVipStateTVVIP; return 0;}
        if(s == "EAdVipStateSPORTVIP")  { e=EAdVipStateSPORTVIP; return 0;}
        if(s == "EAdVipStateSupplementaryVip")  { e=EAdVipStateSupplementaryVip; return 0;}

        return -1;
    }

    enum EAdOfflineVideoType
    {
        EAdOfflineVideoUnknown = 0,
        EAdOfflineVideoInWifi = 1,
        EAdOfflineVideoWwan = 2,
        EAdOfflineVideoNoNetwork = 3,
        EAdOfflineVideoPreDownload = 4,
    };
    inline string etos(const EAdOfflineVideoType & e)
    {
        switch(e)
        {
            case EAdOfflineVideoUnknown: return "EAdOfflineVideoUnknown";
            case EAdOfflineVideoInWifi: return "EAdOfflineVideoInWifi";
            case EAdOfflineVideoWwan: return "EAdOfflineVideoWwan";
            case EAdOfflineVideoNoNetwork: return "EAdOfflineVideoNoNetwork";
            case EAdOfflineVideoPreDownload: return "EAdOfflineVideoPreDownload";
            default: return "";
        }
    }
    inline int stoe(const string & s, EAdOfflineVideoType & e)
    {
        if(s == "EAdOfflineVideoUnknown")  { e=EAdOfflineVideoUnknown; return 0;}
        if(s == "EAdOfflineVideoInWifi")  { e=EAdOfflineVideoInWifi; return 0;}
        if(s == "EAdOfflineVideoWwan")  { e=EAdOfflineVideoWwan; return 0;}
        if(s == "EAdOfflineVideoNoNetwork")  { e=EAdOfflineVideoNoNetwork; return 0;}
        if(s == "EAdOfflineVideoPreDownload")  { e=EAdOfflineVideoPreDownload; return 0;}

        return -1;
    }

    enum EAdPlayMode
    {
        EAdPlayModeUnknown = 0,
        EAdPlayModeNormal = 1,
        EAdPlayModeLive = 2,
        EAdPlayModeOffline = 3,
        EAdPlayModeClose = 4,
        EAdPlayModeDLNA = 6,
        EAdPlayModeHotspot = 8,
        EAdPlayModeWhyMeDetail = 10,
        EAdPlayModeWhyMeTab = 11,
        EAdPlayModeMultiCameraVideo = 12,
        EAdPlayModeHotSpotNormal = 13,
        EAdPlayModeHotSpotLive = 14,
        EAdPlayModeVerticalVideo = 15,
    };
    inline string etos(const EAdPlayMode & e)
    {
        switch(e)
        {
            case EAdPlayModeUnknown: return "EAdPlayModeUnknown";
            case EAdPlayModeNormal: return "EAdPlayModeNormal";
            case EAdPlayModeLive: return "EAdPlayModeLive";
            case EAdPlayModeOffline: return "EAdPlayModeOffline";
            case EAdPlayModeClose: return "EAdPlayModeClose";
            case EAdPlayModeDLNA: return "EAdPlayModeDLNA";
            case EAdPlayModeHotspot: return "EAdPlayModeHotspot";
            case EAdPlayModeWhyMeDetail: return "EAdPlayModeWhyMeDetail";
            case EAdPlayModeWhyMeTab: return "EAdPlayModeWhyMeTab";
            case EAdPlayModeMultiCameraVideo: return "EAdPlayModeMultiCameraVideo";
            case EAdPlayModeHotSpotNormal: return "EAdPlayModeHotSpotNormal";
            case EAdPlayModeHotSpotLive: return "EAdPlayModeHotSpotLive";
            case EAdPlayModeVerticalVideo: return "EAdPlayModeVerticalVideo";
            default: return "";
        }
    }
    inline int stoe(const string & s, EAdPlayMode & e)
    {
        if(s == "EAdPlayModeUnknown")  { e=EAdPlayModeUnknown; return 0;}
        if(s == "EAdPlayModeNormal")  { e=EAdPlayModeNormal; return 0;}
        if(s == "EAdPlayModeLive")  { e=EAdPlayModeLive; return 0;}
        if(s == "EAdPlayModeOffline")  { e=EAdPlayModeOffline; return 0;}
        if(s == "EAdPlayModeClose")  { e=EAdPlayModeClose; return 0;}
        if(s == "EAdPlayModeDLNA")  { e=EAdPlayModeDLNA; return 0;}
        if(s == "EAdPlayModeHotspot")  { e=EAdPlayModeHotspot; return 0;}
        if(s == "EAdPlayModeWhyMeDetail")  { e=EAdPlayModeWhyMeDetail; return 0;}
        if(s == "EAdPlayModeWhyMeTab")  { e=EAdPlayModeWhyMeTab; return 0;}
        if(s == "EAdPlayModeMultiCameraVideo")  { e=EAdPlayModeMultiCameraVideo; return 0;}
        if(s == "EAdPlayModeHotSpotNormal")  { e=EAdPlayModeHotSpotNormal; return 0;}
        if(s == "EAdPlayModeHotSpotLive")  { e=EAdPlayModeHotSpotLive; return 0;}
        if(s == "EAdPlayModeVerticalVideo")  { e=EAdPlayModeVerticalVideo; return 0;}

        return -1;
    }

    enum EAdScreenMode
    {
        EAdScreenModeUnknown = 0,
        EAdScreenModeSmall = 1,
        EAdScreenModeFullScreen = 2,
        EAdScreenModePortraitFull = 3,
    };
    inline string etos(const EAdScreenMode & e)
    {
        switch(e)
        {
            case EAdScreenModeUnknown: return "EAdScreenModeUnknown";
            case EAdScreenModeSmall: return "EAdScreenModeSmall";
            case EAdScreenModeFullScreen: return "EAdScreenModeFullScreen";
            case EAdScreenModePortraitFull: return "EAdScreenModePortraitFull";
            default: return "";
        }
    }
    inline int stoe(const string & s, EAdScreenMode & e)
    {
        if(s == "EAdScreenModeUnknown")  { e=EAdScreenModeUnknown; return 0;}
        if(s == "EAdScreenModeSmall")  { e=EAdScreenModeSmall; return 0;}
        if(s == "EAdScreenModeFullScreen")  { e=EAdScreenModeFullScreen; return 0;}
        if(s == "EAdScreenModePortraitFull")  { e=EAdScreenModePortraitFull; return 0;}

        return -1;
    }

    enum EAdInsideViewType
    {
        EEnumAdInsideViewUnknown = 0,
        EEnumAdInsideStandardPauseItem = 1,
        EEnumAdInsideAdxPauseItem = 2,
        EEnumAdInsideEmptyItem = 3,
        EEnumAdInsideVideoItem = 4,
        EEnumAdInsideCornerItem = 5,
        EEnumAdInsideNormalCornerItem = 6,
        EEnumAdInsideAnchorRichMediaItem = 7,
        EEnumAdInsideVideoInsertReporterItem = 8,
        EEnumAdInsideCoolSpaPauseItem = 9,
        EEnumAdInsideCoolAdxPauseItem = 10,
    };
    inline string etos(const EAdInsideViewType & e)
    {
        switch(e)
        {
            case EEnumAdInsideViewUnknown: return "EEnumAdInsideViewUnknown";
            case EEnumAdInsideStandardPauseItem: return "EEnumAdInsideStandardPauseItem";
            case EEnumAdInsideAdxPauseItem: return "EEnumAdInsideAdxPauseItem";
            case EEnumAdInsideEmptyItem: return "EEnumAdInsideEmptyItem";
            case EEnumAdInsideVideoItem: return "EEnumAdInsideVideoItem";
            case EEnumAdInsideCornerItem: return "EEnumAdInsideCornerItem";
            case EEnumAdInsideNormalCornerItem: return "EEnumAdInsideNormalCornerItem";
            case EEnumAdInsideAnchorRichMediaItem: return "EEnumAdInsideAnchorRichMediaItem";
            case EEnumAdInsideVideoInsertReporterItem: return "EEnumAdInsideVideoInsertReporterItem";
            case EEnumAdInsideCoolSpaPauseItem: return "EEnumAdInsideCoolSpaPauseItem";
            case EEnumAdInsideCoolAdxPauseItem: return "EEnumAdInsideCoolAdxPauseItem";
            default: return "";
        }
    }
    inline int stoe(const string & s, EAdInsideViewType & e)
    {
        if(s == "EEnumAdInsideViewUnknown")  { e=EEnumAdInsideViewUnknown; return 0;}
        if(s == "EEnumAdInsideStandardPauseItem")  { e=EEnumAdInsideStandardPauseItem; return 0;}
        if(s == "EEnumAdInsideAdxPauseItem")  { e=EEnumAdInsideAdxPauseItem; return 0;}
        if(s == "EEnumAdInsideEmptyItem")  { e=EEnumAdInsideEmptyItem; return 0;}
        if(s == "EEnumAdInsideVideoItem")  { e=EEnumAdInsideVideoItem; return 0;}
        if(s == "EEnumAdInsideCornerItem")  { e=EEnumAdInsideCornerItem; return 0;}
        if(s == "EEnumAdInsideNormalCornerItem")  { e=EEnumAdInsideNormalCornerItem; return 0;}
        if(s == "EEnumAdInsideAnchorRichMediaItem")  { e=EEnumAdInsideAnchorRichMediaItem; return 0;}
        if(s == "EEnumAdInsideVideoInsertReporterItem")  { e=EEnumAdInsideVideoInsertReporterItem; return 0;}
        if(s == "EEnumAdInsideCoolSpaPauseItem")  { e=EEnumAdInsideCoolSpaPauseItem; return 0;}
        if(s == "EEnumAdInsideCoolAdxPauseItem")  { e=EEnumAdInsideCoolAdxPauseItem; return 0;}

        return -1;
    }

    struct AdVideoPlatformInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdVideoPlatformInfo";
        }
        static string MD5()
        {
            return "89d0be95acf1443108087e1b16a8eb70";
        }
        AdVideoPlatformInfo()
        :adxEncryData(""),pf(""),chid(""),sdtfrom(""),platform(""),device(""),newNetType(0),openudid("")
        {
        }
        void resetDefautlt()
        {
            adxEncryData = "";
            pf = "";
            chid = "";
            sdtfrom = "";
            platform = "";
            device = "";
            newNetType = 0;
            openudid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adxEncryData, 0);
            _os.write(pf, 1);
            _os.write(chid, 2);
            _os.write(sdtfrom, 3);
            _os.write(platform, 4);
            _os.write(device, 5);
            _os.write(newNetType, 6);
            _os.write(openudid, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adxEncryData, 0, false);
            _is.read(pf, 1, false);
            _is.read(chid, 2, false);
            _is.read(sdtfrom, 3, false);
            _is.read(platform, 4, false);
            _is.read(device, 5, false);
            _is.read(newNetType, 6, false);
            _is.read(openudid, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adxEncryData,"adxEncryData");
            _ds.display(pf,"pf");
            _ds.display(chid,"chid");
            _ds.display(sdtfrom,"sdtfrom");
            _ds.display(platform,"platform");
            _ds.display(device,"device");
            _ds.display(newNetType,"newNetType");
            _ds.display(openudid,"openudid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adxEncryData, true);
            _ds.displaySimple(pf, true);
            _ds.displaySimple(chid, true);
            _ds.displaySimple(sdtfrom, true);
            _ds.displaySimple(platform, true);
            _ds.displaySimple(device, true);
            _ds.displaySimple(newNetType, true);
            _ds.displaySimple(openudid, false);
            return _os;
        }
    public:
        std::string adxEncryData;
        std::string pf;
        std::string chid;
        std::string sdtfrom;
        std::string platform;
        std::string device;
        taf::Int32 newNetType;
        std::string openudid;
    };
    inline bool operator==(const AdVideoPlatformInfo&l, const AdVideoPlatformInfo&r)
    {
        return l.adxEncryData == r.adxEncryData && l.pf == r.pf && l.chid == r.chid && l.sdtfrom == r.sdtfrom && l.platform == r.platform && l.device == r.device && l.newNetType == r.newNetType && l.openudid == r.openudid;
    }
    inline bool operator!=(const AdVideoPlatformInfo&l, const AdVideoPlatformInfo&r)
    {
        return !(l == r);
    }

    struct AdVideoInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdVideoInfo";
        }
        static string MD5()
        {
            return "46c8121a27965520f175b02c34b2d48d";
        }
        AdVideoInfo()
        :vid(""),coverId(""),isLive(0),livepId(""),lid(""),tpId(0),defn(""),preVid("")
        {
        }
        void resetDefautlt()
        {
            vid = "";
            coverId = "";
            isLive = 0;
            livepId = "";
            lid = "";
            tpId = 0;
            defn = "";
            preVid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(coverId, 1);
            _os.write(isLive, 2);
            _os.write(livepId, 3);
            _os.write(lid, 4);
            _os.write(tpId, 5);
            _os.write(defn, 6);
            _os.write(preVid, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, false);
            _is.read(coverId, 1, false);
            _is.read(isLive, 2, false);
            _is.read(livepId, 3, false);
            _is.read(lid, 4, false);
            _is.read(tpId, 5, false);
            _is.read(defn, 6, false);
            _is.read(preVid, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(coverId,"coverId");
            _ds.display(isLive,"isLive");
            _ds.display(livepId,"livepId");
            _ds.display(lid,"lid");
            _ds.display(tpId,"tpId");
            _ds.display(defn,"defn");
            _ds.display(preVid,"preVid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(coverId, true);
            _ds.displaySimple(isLive, true);
            _ds.displaySimple(livepId, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(tpId, true);
            _ds.displaySimple(defn, true);
            _ds.displaySimple(preVid, false);
            return _os;
        }
    public:
        std::string vid;
        std::string coverId;
        taf::Int32 isLive;
        std::string livepId;
        std::string lid;
        taf::Int32 tpId;
        std::string defn;
        std::string preVid;
    };
    inline bool operator==(const AdVideoInfo&l, const AdVideoInfo&r)
    {
        return l.vid == r.vid && l.coverId == r.coverId && l.isLive == r.isLive && l.livepId == r.livepId && l.lid == r.lid && l.tpId == r.tpId && l.defn == r.defn && l.preVid == r.preVid;
    }
    inline bool operator!=(const AdVideoInfo&l, const AdVideoInfo&r)
    {
        return !(l == r);
    }

    struct AdPageInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdPageInfo";
        }
        static string MD5()
        {
            return "5ba31ea226800cec2ad1b7100f1a69d4";
        }
        AdPageInfo()
        :adPlayMode(jce::EAdPlayModeUnknown),style(0),page(""),channelId(""),reportKey(""),reportParams(""),flowId("")
        {
        }
        void resetDefautlt()
        {
            style = 0;
            page = "";
            channelId = "";
            reportKey = "";
            reportParams = "";
            flowId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)adPlayMode, 0);
            _os.write(style, 1);
            _os.write(page, 2);
            _os.write(channelId, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
            _os.write(flowId, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = jce::EAdPlayModeUnknown;
            _is.read(eTemp0, 0, false);
            adPlayMode = (jce::EAdPlayMode)eTemp0;
            _is.read(style, 1, false);
            _is.read(page, 2, false);
            _is.read(channelId, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
            _is.read(flowId, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)adPlayMode,"adPlayMode");
            _ds.display(style,"style");
            _ds.display(page,"page");
            _ds.display(channelId,"channelId");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(flowId,"flowId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)adPlayMode, true);
            _ds.displaySimple(style, true);
            _ds.displaySimple(page, true);
            _ds.displaySimple(channelId, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(flowId, false);
            return _os;
        }
    public:
        jce::EAdPlayMode adPlayMode;
        taf::Int32 style;
        std::string page;
        std::string channelId;
        std::string reportKey;
        std::string reportParams;
        std::string flowId;
    };
    inline bool operator==(const AdPageInfo&l, const AdPageInfo&r)
    {
        return l.adPlayMode == r.adPlayMode && l.style == r.style && l.page == r.page && l.channelId == r.channelId && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.flowId == r.flowId;
    }
    inline bool operator!=(const AdPageInfo&l, const AdPageInfo&r)
    {
        return !(l == r);
    }

    struct AdOfflineInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdOfflineInfo";
        }
        static string MD5()
        {
            return "2ea7d5e5c7cb48be077ee8bcd6b2066f";
        }
        AdOfflineInfo()
        :offlineVideoType(jce::EAdOfflineVideoUnknown)
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)offlineVideoType, 0);
            _os.write(vidList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = jce::EAdOfflineVideoUnknown;
            _is.read(eTemp0, 0, false);
            offlineVideoType = (jce::EAdOfflineVideoType)eTemp0;
            _is.read(vidList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)offlineVideoType,"offlineVideoType");
            _ds.display(vidList,"vidList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)offlineVideoType, true);
            _ds.displaySimple(vidList, false);
            return _os;
        }
    public:
        jce::EAdOfflineVideoType offlineVideoType;
        vector<std::string> vidList;
    };
    inline bool operator==(const AdOfflineInfo&l, const AdOfflineInfo&r)
    {
        return l.offlineVideoType == r.offlineVideoType && l.vidList == r.vidList;
    }
    inline bool operator!=(const AdOfflineInfo&l, const AdOfflineInfo&r)
    {
        return !(l == r);
    }

    struct AdRichMediaItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdRichMediaItem";
        }
        static string MD5()
        {
            return "4dbbaac6fb74ec572db59745eb3f2f74";
        }
        AdRichMediaItem()
        :richMediaUrl(""),richMediaZip(""),zipFailedSkipAd(true),richMediaParams(""),isValid(false)
        {
        }
        void resetDefautlt()
        {
            richMediaUrl = "";
            richMediaZip = "";
            zipFailedSkipAd = true;
            richMediaParams = "";
            isValid = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(richMediaUrl, 0);
            _os.write(richMediaZip, 1);
            _os.write(zipFailedSkipAd, 2);
            _os.write(richMediaParams, 3);
            _os.write(isValid, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(richMediaUrl, 0, false);
            _is.read(richMediaZip, 1, false);
            _is.read(zipFailedSkipAd, 2, false);
            _is.read(richMediaParams, 3, false);
            _is.read(isValid, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(richMediaUrl,"richMediaUrl");
            _ds.display(richMediaZip,"richMediaZip");
            _ds.display(zipFailedSkipAd,"zipFailedSkipAd");
            _ds.display(richMediaParams,"richMediaParams");
            _ds.display(isValid,"isValid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(richMediaUrl, true);
            _ds.displaySimple(richMediaZip, true);
            _ds.displaySimple(zipFailedSkipAd, true);
            _ds.displaySimple(richMediaParams, true);
            _ds.displaySimple(isValid, false);
            return _os;
        }
    public:
        std::string richMediaUrl;
        std::string richMediaZip;
        taf::Bool zipFailedSkipAd;
        std::string richMediaParams;
        taf::Bool isValid;
    };
    inline bool operator==(const AdRichMediaItem&l, const AdRichMediaItem&r)
    {
        return l.richMediaUrl == r.richMediaUrl && l.richMediaZip == r.richMediaZip && l.zipFailedSkipAd == r.zipFailedSkipAd && l.richMediaParams == r.richMediaParams && l.isValid == r.isValid;
    }
    inline bool operator!=(const AdRichMediaItem&l, const AdRichMediaItem&r)
    {
        return !(l == r);
    }

    struct AdInSideExtraReportItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInSideExtraReportItem";
        }
        static string MD5()
        {
            return "60e27e684d2a1584bce4cec7ada439f3";
        }
        AdInSideExtraReportItem()
        :soid(""),adid(""),needOperationReport(false),needWisdomReport(false),needRetryReport(false)
        {
        }
        void resetDefautlt()
        {
            soid = "";
            adid = "";
            needOperationReport = false;
            needWisdomReport = false;
            needRetryReport = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(soid, 0);
            _os.write(adid, 1);
            _os.write(needOperationReport, 2);
            _os.write(needWisdomReport, 3);
            _os.write(needRetryReport, 4);
            _os.write(operationReportMap, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(soid, 0, false);
            _is.read(adid, 1, false);
            _is.read(needOperationReport, 2, false);
            _is.read(needWisdomReport, 3, false);
            _is.read(needRetryReport, 4, false);
            _is.read(operationReportMap, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(soid,"soid");
            _ds.display(adid,"adid");
            _ds.display(needOperationReport,"needOperationReport");
            _ds.display(needWisdomReport,"needWisdomReport");
            _ds.display(needRetryReport,"needRetryReport");
            _ds.display(operationReportMap,"operationReportMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(soid, true);
            _ds.displaySimple(adid, true);
            _ds.displaySimple(needOperationReport, true);
            _ds.displaySimple(needWisdomReport, true);
            _ds.displaySimple(needRetryReport, true);
            _ds.displaySimple(operationReportMap, false);
            return _os;
        }
    public:
        std::string soid;
        std::string adid;
        taf::Bool needOperationReport;
        taf::Bool needWisdomReport;
        taf::Bool needRetryReport;
        map<std::string, std::string> operationReportMap;
    };
    inline bool operator==(const AdInSideExtraReportItem&l, const AdInSideExtraReportItem&r)
    {
        return l.soid == r.soid && l.adid == r.adid && l.needOperationReport == r.needOperationReport && l.needWisdomReport == r.needWisdomReport && l.needRetryReport == r.needRetryReport && l.operationReportMap == r.operationReportMap;
    }
    inline bool operator!=(const AdInSideExtraReportItem&l, const AdInSideExtraReportItem&r)
    {
        return !(l == r);
    }

    struct AdPauseOrderItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdPauseOrderItem";
        }
        static string MD5()
        {
            return "631ea17d7997cdf44052276722d36c56";
        }
        AdPauseOrderItem()
        :isBlurbackground(false),md5("")
        {
        }
        void resetDefautlt()
        {
            isBlurbackground = false;
            md5 = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(orderItem, 0);
            _os.write(isBlurbackground, 1);
            _os.write(md5, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(orderItem, 0, false);
            _is.read(isBlurbackground, 1, false);
            _is.read(md5, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(orderItem,"orderItem");
            _ds.display(isBlurbackground,"isBlurbackground");
            _ds.display(md5,"md5");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(orderItem, true);
            _ds.displaySimple(isBlurbackground, true);
            _ds.displaySimple(md5, false);
            return _os;
        }
    public:
        jce::AdOrderItem orderItem;
        taf::Bool isBlurbackground;
        std::string md5;
    };
    inline bool operator==(const AdPauseOrderItem&l, const AdPauseOrderItem&r)
    {
        return l.orderItem == r.orderItem && l.isBlurbackground == r.isBlurbackground && l.md5 == r.md5;
    }
    inline bool operator!=(const AdPauseOrderItem&l, const AdPauseOrderItem&r)
    {
        return !(l == r);
    }

    struct AdxPauseOrderItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdxPauseOrderItem";
        }
        static string MD5()
        {
            return "4e7634db374cec495543b44778720db2";
        }
        AdxPauseOrderItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pauseOrderItem, 0);
            _os.write(richMediaItem, 1);
            _os.write(shareItem, 2);
            _os.write(extraReportItem, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pauseOrderItem, 0, true);
            _is.read(richMediaItem, 1, false);
            _is.read(shareItem, 2, false);
            _is.read(extraReportItem, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pauseOrderItem,"pauseOrderItem");
            _ds.display(richMediaItem,"richMediaItem");
            _ds.display(shareItem,"shareItem");
            _ds.display(extraReportItem,"extraReportItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pauseOrderItem, true);
            _ds.displaySimple(richMediaItem, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(extraReportItem, false);
            return _os;
        }
    public:
        jce::AdPauseOrderItem pauseOrderItem;
        jce::AdRichMediaItem richMediaItem;
        jce::AdShareItem shareItem;
        jce::AdInSideExtraReportItem extraReportItem;
    };
    inline bool operator==(const AdxPauseOrderItem&l, const AdxPauseOrderItem&r)
    {
        return l.pauseOrderItem == r.pauseOrderItem && l.richMediaItem == r.richMediaItem && l.shareItem == r.shareItem && l.extraReportItem == r.extraReportItem;
    }
    inline bool operator!=(const AdxPauseOrderItem&l, const AdxPauseOrderItem&r)
    {
        return !(l == r);
    }

    struct AdInsideVideoTitle : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideVideoTitle";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        AdInsideVideoTitle()
        :dspName(""),fullTitle(""),fullUnInstallTitle(""),shortTitle(""),shortUnInstallTitle("")
        {
        }
        void resetDefautlt()
        {
            dspName = "";
            fullTitle = "";
            fullUnInstallTitle = "";
            shortTitle = "";
            shortUnInstallTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dspName, 0);
            _os.write(fullTitle, 1);
            _os.write(fullUnInstallTitle, 2);
            _os.write(shortTitle, 3);
            _os.write(shortUnInstallTitle, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dspName, 0, false);
            _is.read(fullTitle, 1, false);
            _is.read(fullUnInstallTitle, 2, false);
            _is.read(shortTitle, 3, false);
            _is.read(shortUnInstallTitle, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dspName,"dspName");
            _ds.display(fullTitle,"fullTitle");
            _ds.display(fullUnInstallTitle,"fullUnInstallTitle");
            _ds.display(shortTitle,"shortTitle");
            _ds.display(shortUnInstallTitle,"shortUnInstallTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dspName, true);
            _ds.displaySimple(fullTitle, true);
            _ds.displaySimple(fullUnInstallTitle, true);
            _ds.displaySimple(shortTitle, true);
            _ds.displaySimple(shortUnInstallTitle, false);
            return _os;
        }
    public:
        std::string dspName;
        std::string fullTitle;
        std::string fullUnInstallTitle;
        std::string shortTitle;
        std::string shortUnInstallTitle;
    };
    inline bool operator==(const AdInsideVideoTitle&l, const AdInsideVideoTitle&r)
    {
        return l.dspName == r.dspName && l.fullTitle == r.fullTitle && l.fullUnInstallTitle == r.fullUnInstallTitle && l.shortTitle == r.shortTitle && l.shortUnInstallTitle == r.shortUnInstallTitle;
    }
    inline bool operator!=(const AdInsideVideoTitle&l, const AdInsideVideoTitle&r)
    {
        return !(l == r);
    }

    struct AdInsideCoolSpaPauseItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideCoolSpaPauseItem";
        }
        static string MD5()
        {
            return "8b6ab79221019654429992547ad4344f";
        }
        AdInsideCoolSpaPauseItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pauseOrderItem, 0);
            _os.write(poster, 1);
            _os.write(titleInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pauseOrderItem, 0, false);
            _is.read(poster, 1, false);
            _is.read(titleInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pauseOrderItem,"pauseOrderItem");
            _ds.display(poster,"poster");
            _ds.display(titleInfo,"titleInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pauseOrderItem, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(titleInfo, false);
            return _os;
        }
    public:
        jce::AdPauseOrderItem pauseOrderItem;
        jce::AdcPoster poster;
        jce::AdInsideTitleInfo titleInfo;
    };
    inline bool operator==(const AdInsideCoolSpaPauseItem&l, const AdInsideCoolSpaPauseItem&r)
    {
        return l.pauseOrderItem == r.pauseOrderItem && l.poster == r.poster && l.titleInfo == r.titleInfo;
    }
    inline bool operator!=(const AdInsideCoolSpaPauseItem&l, const AdInsideCoolSpaPauseItem&r)
    {
        return !(l == r);
    }

    struct AdInsideCoolAdxPauseItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideCoolAdxPauseItem";
        }
        static string MD5()
        {
            return "31e4fee7b8a2d50ba5d25fb661b02fcc";
        }
        AdInsideCoolAdxPauseItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adxOrderItem, 0);
            _os.write(poster, 1);
            _os.write(titleInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adxOrderItem, 0, false);
            _is.read(poster, 1, false);
            _is.read(titleInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adxOrderItem,"adxOrderItem");
            _ds.display(poster,"poster");
            _ds.display(titleInfo,"titleInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adxOrderItem, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(titleInfo, false);
            return _os;
        }
    public:
        jce::AdxPauseOrderItem adxOrderItem;
        jce::AdcPoster poster;
        jce::AdInsideTitleInfo titleInfo;
    };
    inline bool operator==(const AdInsideCoolAdxPauseItem&l, const AdInsideCoolAdxPauseItem&r)
    {
        return l.adxOrderItem == r.adxOrderItem && l.poster == r.poster && l.titleInfo == r.titleInfo;
    }
    inline bool operator!=(const AdInsideCoolAdxPauseItem&l, const AdInsideCoolAdxPauseItem&r)
    {
        return !(l == r);
    }

    struct AdInsideEmptyItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideEmptyItem";
        }
        static string MD5()
        {
            return "3eeda84b9dc11b77490ec0d1a76672ae";
        }
        AdInsideEmptyItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(orderItem, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(orderItem, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(orderItem,"orderItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(orderItem, false);
            return _os;
        }
    public:
        jce::AdOrderItem orderItem;
    };
    inline bool operator==(const AdInsideEmptyItem&l, const AdInsideEmptyItem&r)
    {
        return l.orderItem == r.orderItem;
    }
    inline bool operator!=(const AdInsideEmptyItem&l, const AdInsideEmptyItem&r)
    {
        return !(l == r);
    }

    struct AdVideoItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdVideoItem";
        }
        static string MD5()
        {
            return "a7848036c274b1dbb760da48e45a14a4";
        }
        AdVideoItem()
        :url(""),md5(""),fileSize(0),duration(0),width(0),height(0),vid(""),encodeFormat(0)
        {
        }
        void resetDefautlt()
        {
            url = "";
            md5 = "";
            fileSize = 0;
            duration = 0;
            width = 0;
            height = 0;
            vid = "";
            encodeFormat = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(url, 1);
            _os.write(md5, 2);
            _os.write(fileSize, 3);
            _os.write(duration, 4);
            _os.write(width, 5);
            _os.write(height, 6);
            _os.write(vid, 7);
            _os.write(encodeFormat, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(url, 1, false);
            _is.read(md5, 2, false);
            _is.read(fileSize, 3, false);
            _is.read(duration, 4, false);
            _is.read(width, 5, false);
            _is.read(height, 6, false);
            _is.read(vid, 7, false);
            _is.read(encodeFormat, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(url,"url");
            _ds.display(md5,"md5");
            _ds.display(fileSize,"fileSize");
            _ds.display(duration,"duration");
            _ds.display(width,"width");
            _ds.display(height,"height");
            _ds.display(vid,"vid");
            _ds.display(encodeFormat,"encodeFormat");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(url, true);
            _ds.displaySimple(md5, true);
            _ds.displaySimple(fileSize, true);
            _ds.displaySimple(duration, true);
            _ds.displaySimple(width, true);
            _ds.displaySimple(height, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(encodeFormat, false);
            return _os;
        }
    public:
        std::string url;
        std::string md5;
        taf::Int32 fileSize;
        taf::Int32 duration;
        taf::Int32 width;
        taf::Int32 height;
        std::string vid;
        taf::Int32 encodeFormat;
    };
    inline bool operator==(const AdVideoItem&l, const AdVideoItem&r)
    {
        return l.url == r.url && l.md5 == r.md5 && l.fileSize == r.fileSize && l.duration == r.duration && l.width == r.width && l.height == r.height && l.vid == r.vid && l.encodeFormat == r.encodeFormat;
    }
    inline bool operator!=(const AdVideoItem&l, const AdVideoItem&r)
    {
        return !(l == r);
    }

    struct AdSpeechInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdSpeechInfo";
        }
        static string MD5()
        {
            return "152b9d256fbf7b89745914192bff2c4f";
        }
        AdSpeechInfo()
        :isValid(false),voiceToken(""),confidence(0),openType(0),mainTitle(""),adWord(""),subTitle("")
        {
        }
        void resetDefautlt()
        {
            isValid = false;
            voiceToken = "";
            confidence = 0;
            openType = 0;
            mainTitle = "";
            adWord = "";
            subTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(isValid, 0);
            _os.write(voiceToken, 1);
            _os.write(confidence, 2);
            _os.write(openType, 3);
            _os.write(mainTitle, 4);
            _os.write(adWord, 5);
            _os.write(subTitle, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(isValid, 0, false);
            _is.read(voiceToken, 1, false);
            _is.read(confidence, 2, false);
            _is.read(openType, 3, false);
            _is.read(mainTitle, 4, false);
            _is.read(adWord, 5, false);
            _is.read(subTitle, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(isValid,"isValid");
            _ds.display(voiceToken,"voiceToken");
            _ds.display(confidence,"confidence");
            _ds.display(openType,"openType");
            _ds.display(mainTitle,"mainTitle");
            _ds.display(adWord,"adWord");
            _ds.display(subTitle,"subTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(isValid, true);
            _ds.displaySimple(voiceToken, true);
            _ds.displaySimple(confidence, true);
            _ds.displaySimple(openType, true);
            _ds.displaySimple(mainTitle, true);
            _ds.displaySimple(adWord, true);
            _ds.displaySimple(subTitle, false);
            return _os;
        }
    public:
        taf::Bool isValid;
        std::string voiceToken;
        taf::Float confidence;
        taf::Int32 openType;
        std::string mainTitle;
        std::string adWord;
        std::string subTitle;
    };
    inline bool operator==(const AdSpeechInfo&l, const AdSpeechInfo&r)
    {
        return l.isValid == r.isValid && l.voiceToken == r.voiceToken && l.confidence == r.confidence && l.openType == r.openType && l.mainTitle == r.mainTitle && l.adWord == r.adWord && l.subTitle == r.subTitle;
    }
    inline bool operator!=(const AdSpeechInfo&l, const AdSpeechInfo&r)
    {
        return !(l == r);
    }

    struct AdLinkInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdLinkInfo";
        }
        static string MD5()
        {
            return "9e4466ed34f38580b474e9a42a98db6f";
        }
        AdLinkInfo()
        :isValid(false),imageUrl(""),title(""),subTitle(""),startCount(0),buttonTitle(""),isBannerValid(false),bannerShowTime(0)
        {
        }
        void resetDefautlt()
        {
            isValid = false;
            imageUrl = "";
            title = "";
            subTitle = "";
            startCount = 0;
            buttonTitle = "";
            isBannerValid = false;
            bannerShowTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(isValid, 0);
            _os.write(imageUrl, 1);
            _os.write(title, 2);
            _os.write(subTitle, 3);
            _os.write(startCount, 4);
            _os.write(buttonTitle, 5);
            _os.write(isBannerValid, 6);
            _os.write(bannerShowTime, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(isValid, 0, false);
            _is.read(imageUrl, 1, false);
            _is.read(title, 2, false);
            _is.read(subTitle, 3, false);
            _is.read(startCount, 4, false);
            _is.read(buttonTitle, 5, false);
            _is.read(isBannerValid, 6, false);
            _is.read(bannerShowTime, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(isValid,"isValid");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(startCount,"startCount");
            _ds.display(buttonTitle,"buttonTitle");
            _ds.display(isBannerValid,"isBannerValid");
            _ds.display(bannerShowTime,"bannerShowTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(isValid, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(startCount, true);
            _ds.displaySimple(buttonTitle, true);
            _ds.displaySimple(isBannerValid, true);
            _ds.displaySimple(bannerShowTime, false);
            return _os;
        }
    public:
        taf::Bool isValid;
        std::string imageUrl;
        std::string title;
        std::string subTitle;
        taf::Float startCount;
        std::string buttonTitle;
        taf::Bool isBannerValid;
        taf::Int32 bannerShowTime;
    };
    inline bool operator==(const AdLinkInfo&l, const AdLinkInfo&r)
    {
        return l.isValid == r.isValid && l.imageUrl == r.imageUrl && l.title == r.title && l.subTitle == r.subTitle && l.startCount == r.startCount && l.buttonTitle == r.buttonTitle && l.isBannerValid == r.isBannerValid && l.bannerShowTime == r.bannerShowTime;
    }
    inline bool operator!=(const AdLinkInfo&l, const AdLinkInfo&r)
    {
        return !(l == r);
    }

    struct AdInsideVideoPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideVideoPoster";
        }
        static string MD5()
        {
            return "b63ec8d93c5f7286fa732be5778da651";
        }
        AdInsideVideoPoster()
        :enableScreenClick(false),skipAdDuration(0),skipAdtitle(""),skipAdSubtitle(""),actionButtonType(0)
        {
        }
        void resetDefautlt()
        {
            enableScreenClick = false;
            skipAdDuration = 0;
            skipAdtitle = "";
            skipAdSubtitle = "";
            actionButtonType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(enableScreenClick, 0);
            _os.write(skipAdDuration, 1);
            _os.write(skipAdtitle, 2);
            _os.write(skipAdSubtitle, 3);
            _os.write(actionButtonType, 4);
            _os.write(titleInfo, 5);
            _os.write(buttonAction, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(enableScreenClick, 0, false);
            _is.read(skipAdDuration, 1, false);
            _is.read(skipAdtitle, 2, false);
            _is.read(skipAdSubtitle, 3, false);
            _is.read(actionButtonType, 4, false);
            _is.read(titleInfo, 5, false);
            _is.read(buttonAction, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(enableScreenClick,"enableScreenClick");
            _ds.display(skipAdDuration,"skipAdDuration");
            _ds.display(skipAdtitle,"skipAdtitle");
            _ds.display(skipAdSubtitle,"skipAdSubtitle");
            _ds.display(actionButtonType,"actionButtonType");
            _ds.display(titleInfo,"titleInfo");
            _ds.display(buttonAction,"buttonAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(enableScreenClick, true);
            _ds.displaySimple(skipAdDuration, true);
            _ds.displaySimple(skipAdtitle, true);
            _ds.displaySimple(skipAdSubtitle, true);
            _ds.displaySimple(actionButtonType, true);
            _ds.displaySimple(titleInfo, true);
            _ds.displaySimple(buttonAction, false);
            return _os;
        }
    public:
        taf::Bool enableScreenClick;
        taf::Int32 skipAdDuration;
        std::string skipAdtitle;
        std::string skipAdSubtitle;
        taf::Int32 actionButtonType;
        jce::AdInsideVideoTitle titleInfo;
        jce::AdAction buttonAction;
    };
    inline bool operator==(const AdInsideVideoPoster&l, const AdInsideVideoPoster&r)
    {
        return l.enableScreenClick == r.enableScreenClick && l.skipAdDuration == r.skipAdDuration && l.skipAdtitle == r.skipAdtitle && l.skipAdSubtitle == r.skipAdSubtitle && l.actionButtonType == r.actionButtonType && l.titleInfo == r.titleInfo && l.buttonAction == r.buttonAction;
    }
    inline bool operator!=(const AdInsideVideoPoster&l, const AdInsideVideoPoster&r)
    {
        return !(l == r);
    }

    struct AdFreeFlowItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdFreeFlowItem";
        }
        static string MD5()
        {
            return "72dfddf03422779b81fb661a3938fb92";
        }
        AdFreeFlowItem()
        :flowType(0),flowSubType(-1),userMob("")
        {
        }
        void resetDefautlt()
        {
            flowType = 0;
            flowSubType = -1;
            userMob = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(flowType, 0);
            _os.write(flowSubType, 1);
            _os.write(userMob, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(flowType, 0, false);
            _is.read(flowSubType, 1, false);
            _is.read(userMob, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(flowType,"flowType");
            _ds.display(flowSubType,"flowSubType");
            _ds.display(userMob,"userMob");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(flowType, true);
            _ds.displaySimple(flowSubType, true);
            _ds.displaySimple(userMob, false);
            return _os;
        }
    public:
        taf::Int32 flowType;
        taf::Int32 flowSubType;
        std::string userMob;
    };
    inline bool operator==(const AdFreeFlowItem&l, const AdFreeFlowItem&r)
    {
        return l.flowType == r.flowType && l.flowSubType == r.flowSubType && l.userMob == r.userMob;
    }
    inline bool operator!=(const AdFreeFlowItem&l, const AdFreeFlowItem&r)
    {
        return !(l == r);
    }

    struct AdInsideVideoItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideVideoItem";
        }
        static string MD5()
        {
            return "0a8d6f4244cc0f90663068f5241b70db";
        }
        AdInsideVideoItem()
        :adSubType(0)
        {
        }
        void resetDefautlt()
        {
            adSubType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adSubType, 0);
            _os.write(orderItem, 1);
            _os.write(videoItem, 2);
            _os.write(videoPoster, 3);
            _os.write(shareItem, 4);
            _os.write(speechInfo, 5);
            _os.write(linkInfo, 6);
            _os.write(richMediaItem, 7);
            _os.write(extraReportItem, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adSubType, 0, false);
            _is.read(orderItem, 1, false);
            _is.read(videoItem, 2, false);
            _is.read(videoPoster, 3, false);
            _is.read(shareItem, 4, false);
            _is.read(speechInfo, 5, false);
            _is.read(linkInfo, 6, false);
            _is.read(richMediaItem, 7, false);
            _is.read(extraReportItem, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adSubType,"adSubType");
            _ds.display(orderItem,"orderItem");
            _ds.display(videoItem,"videoItem");
            _ds.display(videoPoster,"videoPoster");
            _ds.display(shareItem,"shareItem");
            _ds.display(speechInfo,"speechInfo");
            _ds.display(linkInfo,"linkInfo");
            _ds.display(richMediaItem,"richMediaItem");
            _ds.display(extraReportItem,"extraReportItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adSubType, true);
            _ds.displaySimple(orderItem, true);
            _ds.displaySimple(videoItem, true);
            _ds.displaySimple(videoPoster, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(speechInfo, true);
            _ds.displaySimple(linkInfo, true);
            _ds.displaySimple(richMediaItem, true);
            _ds.displaySimple(extraReportItem, false);
            return _os;
        }
    public:
        taf::Int32 adSubType;
        jce::AdOrderItem orderItem;
        jce::AdVideoItem videoItem;
        jce::AdInsideVideoPoster videoPoster;
        jce::AdShareItem shareItem;
        jce::AdSpeechInfo speechInfo;
        jce::AdLinkInfo linkInfo;
        jce::AdRichMediaItem richMediaItem;
        jce::AdInSideExtraReportItem extraReportItem;
    };
    inline bool operator==(const AdInsideVideoItem&l, const AdInsideVideoItem&r)
    {
        return l.adSubType == r.adSubType && l.orderItem == r.orderItem && l.videoItem == r.videoItem && l.videoPoster == r.videoPoster && l.shareItem == r.shareItem && l.speechInfo == r.speechInfo && l.linkInfo == r.linkInfo && l.richMediaItem == r.richMediaItem && l.extraReportItem == r.extraReportItem;
    }
    inline bool operator!=(const AdInsideVideoItem&l, const AdInsideVideoItem&r)
    {
        return !(l == r);
    }

    struct AdGetVInfoItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdGetVInfoItem";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        AdGetVInfoItem()
        :videoId("")
        {
        }
        void resetDefautlt()
        {
            videoId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(videoId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(videoId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(videoId,"videoId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(videoId, false);
            return _os;
        }
    public:
        std::string videoId;
    };
    inline bool operator==(const AdGetVInfoItem&l, const AdGetVInfoItem&r)
    {
        return l.videoId == r.videoId;
    }
    inline bool operator!=(const AdGetVInfoItem&l, const AdGetVInfoItem&r)
    {
        return !(l == r);
    }

    struct AdTempletItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdTempletItem";
        }
        static string MD5()
        {
            return "c11d20a7643043a84d928611c8188428";
        }
        AdTempletItem()
        :viewType(jce::EEnumAdInsideViewUnknown),index(0)
        {
        }
        void resetDefautlt()
        {
            index = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)viewType, 0);
            _os.write(data, 1);
            _os.write(debugInfo, 2);
            _os.write(index, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = jce::EEnumAdInsideViewUnknown;
            _is.read(eTemp0, 0, true);
            viewType = (jce::EAdInsideViewType)eTemp0;
            _is.read(data, 1, false);
            _is.read(debugInfo, 2, false);
            _is.read(index, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)viewType,"viewType");
            _ds.display(data,"data");
            _ds.display(debugInfo,"debugInfo");
            _ds.display(index,"index");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)viewType, true);
            _ds.displaySimple(data, true);
            _ds.displaySimple(debugInfo, true);
            _ds.displaySimple(index, false);
            return _os;
        }
    public:
        jce::EAdInsideViewType viewType;
        vector<taf::Char> data;
        jce::DebugInfo debugInfo;
        taf::Int32 index;
    };
    inline bool operator==(const AdTempletItem&l, const AdTempletItem&r)
    {
        return l.viewType == r.viewType && l.data == r.data && l.debugInfo == r.debugInfo && l.index == r.index;
    }
    inline bool operator!=(const AdTempletItem&l, const AdTempletItem&r)
    {
        return !(l == r);
    }

    struct AdPauseRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdPauseRequest";
        }
        static string MD5()
        {
            return "31a26221b0400986ae2cf02660055f61";
        }
        AdPauseRequest()
        :adVipState(jce::EAdVipStateUnknown),screenMode(jce::EAdScreenModeUnknown)
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adVideoInfo, 0);
            _os.write((taf::Int32)adVipState, 1);
            _os.write(adPageInfo, 2);
            _os.write(adOfflineInfo, 3);
            _os.write(adVideoPlatformInfo, 4);
            _os.write(adSdkRequestInfo, 5);
            _os.write((taf::Int32)screenMode, 6);
            _os.write(requestAdHistory, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adVideoInfo, 0, false);
            taf::Int32 eTemp1 = jce::EAdVipStateUnknown;
            _is.read(eTemp1, 1, false);
            adVipState = (jce::EAdVipState)eTemp1;
            _is.read(adPageInfo, 2, false);
            _is.read(adOfflineInfo, 3, false);
            _is.read(adVideoPlatformInfo, 4, false);
            _is.read(adSdkRequestInfo, 5, false);
            taf::Int32 eTemp6 = jce::EAdScreenModeUnknown;
            _is.read(eTemp6, 6, false);
            screenMode = (jce::EAdScreenMode)eTemp6;
            _is.read(requestAdHistory, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adVideoInfo,"adVideoInfo");
            _ds.display((taf::Int32)adVipState,"adVipState");
            _ds.display(adPageInfo,"adPageInfo");
            _ds.display(adOfflineInfo,"adOfflineInfo");
            _ds.display(adVideoPlatformInfo,"adVideoPlatformInfo");
            _ds.display(adSdkRequestInfo,"adSdkRequestInfo");
            _ds.display((taf::Int32)screenMode,"screenMode");
            _ds.display(requestAdHistory,"requestAdHistory");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adVideoInfo, true);
            _ds.displaySimple((taf::Int32)adVipState, true);
            _ds.displaySimple(adPageInfo, true);
            _ds.displaySimple(adOfflineInfo, true);
            _ds.displaySimple(adVideoPlatformInfo, true);
            _ds.displaySimple(adSdkRequestInfo, true);
            _ds.displaySimple((taf::Int32)screenMode, true);
            _ds.displaySimple(requestAdHistory, false);
            return _os;
        }
    public:
        jce::AdVideoInfo adVideoInfo;
        jce::EAdVipState adVipState;
        jce::AdPageInfo adPageInfo;
        jce::AdOfflineInfo adOfflineInfo;
        jce::AdVideoPlatformInfo adVideoPlatformInfo;
        jce::AdSdkRequestInfo adSdkRequestInfo;
        jce::EAdScreenMode screenMode;
        vector<std::string> requestAdHistory;
    };
    inline bool operator==(const AdPauseRequest&l, const AdPauseRequest&r)
    {
        return l.adVideoInfo == r.adVideoInfo && l.adVipState == r.adVipState && l.adPageInfo == r.adPageInfo && l.adOfflineInfo == r.adOfflineInfo && l.adVideoPlatformInfo == r.adVideoPlatformInfo && l.adSdkRequestInfo == r.adSdkRequestInfo && l.screenMode == r.screenMode && l.requestAdHistory == r.requestAdHistory;
    }
    inline bool operator!=(const AdPauseRequest&l, const AdPauseRequest&r)
    {
        return !(l == r);
    }

    struct AdPauseResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdPauseResponse";
        }
        static string MD5()
        {
            return "fde8006c6e2386d0b8598b062b93c108";
        }
        AdPauseResponse()
        :errCode(0),adCookie("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            adCookie = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pauseAdItem, 1);
            _os.write(adCookie, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pauseAdItem, 1, false);
            _is.read(adCookie, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pauseAdItem,"pauseAdItem");
            _ds.display(adCookie,"adCookie");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pauseAdItem, true);
            _ds.displaySimple(adCookie, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::AdTempletItem pauseAdItem;
        std::string adCookie;
    };
    inline bool operator==(const AdPauseResponse&l, const AdPauseResponse&r)
    {
        return l.errCode == r.errCode && l.pauseAdItem == r.pauseAdItem && l.adCookie == r.adCookie;
    }
    inline bool operator!=(const AdPauseResponse&l, const AdPauseResponse&r)
    {
        return !(l == r);
    }

    struct AdPlayModeConfigItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdPlayModeConfigItem";
        }
        static string MD5()
        {
            return "be546641c5c4d476494011687d413562";
        }
        AdPlayModeConfigItem()
        :adPlayMode(jce::EAdPlayModeUnknown),playModeSwitchState(0)
        {
        }
        void resetDefautlt()
        {
            playModeSwitchState = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)adPlayMode, 0);
            _os.write(playModeSwitchState, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = jce::EAdPlayModeUnknown;
            _is.read(eTemp0, 0, false);
            adPlayMode = (jce::EAdPlayMode)eTemp0;
            _is.read(playModeSwitchState, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)adPlayMode,"adPlayMode");
            _ds.display(playModeSwitchState,"playModeSwitchState");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)adPlayMode, true);
            _ds.displaySimple(playModeSwitchState, false);
            return _os;
        }
    public:
        jce::EAdPlayMode adPlayMode;
        taf::Int32 playModeSwitchState;
    };
    inline bool operator==(const AdPlayModeConfigItem&l, const AdPlayModeConfigItem&r)
    {
        return l.adPlayMode == r.adPlayMode && l.playModeSwitchState == r.playModeSwitchState;
    }
    inline bool operator!=(const AdPlayModeConfigItem&l, const AdPlayModeConfigItem&r)
    {
        return !(l == r);
    }

    struct AdConfigItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdConfigItem";
        }
        static string MD5()
        {
            return "22f7bf9f5ba1ee3ad47585b0cfe982e0";
        }
        AdConfigItem()
        :adType(jce::EAdTypeUnknown),newSdkSwitchState(0)
        {
        }
        void resetDefautlt()
        {
            newSdkSwitchState = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)adType, 0);
            _os.write(newSdkSwitchState, 1);
            _os.write(playModeList, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = jce::EAdTypeUnknown;
            _is.read(eTemp0, 0, true);
            adType = (jce::EAdType)eTemp0;
            _is.read(newSdkSwitchState, 1, false);
            _is.read(playModeList, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)adType,"adType");
            _ds.display(newSdkSwitchState,"newSdkSwitchState");
            _ds.display(playModeList,"playModeList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)adType, true);
            _ds.displaySimple(newSdkSwitchState, true);
            _ds.displaySimple(playModeList, false);
            return _os;
        }
    public:
        jce::EAdType adType;
        taf::Int32 newSdkSwitchState;
        vector<jce::AdPlayModeConfigItem> playModeList;
    };
    inline bool operator==(const AdConfigItem&l, const AdConfigItem&r)
    {
        return l.adType == r.adType && l.newSdkSwitchState == r.newSdkSwitchState && l.playModeList == r.playModeList;
    }
    inline bool operator!=(const AdConfigItem&l, const AdConfigItem&r)
    {
        return !(l == r);
    }

    struct AdRequestConfigItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdRequestConfigItem";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        AdRequestConfigItem()
        :adReqeustType(0),newSdkSwitchState(0)
        {
        }
        void resetDefautlt()
        {
            adReqeustType = 0;
            newSdkSwitchState = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adReqeustType, 0);
            _os.write(newSdkSwitchState, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adReqeustType, 0, true);
            _is.read(newSdkSwitchState, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adReqeustType,"adReqeustType");
            _ds.display(newSdkSwitchState,"newSdkSwitchState");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adReqeustType, true);
            _ds.displaySimple(newSdkSwitchState, false);
            return _os;
        }
    public:
        taf::Int32 adReqeustType;
        taf::Int32 newSdkSwitchState;
    };
    inline bool operator==(const AdRequestConfigItem&l, const AdRequestConfigItem&r)
    {
        return l.adReqeustType == r.adReqeustType && l.newSdkSwitchState == r.newSdkSwitchState;
    }
    inline bool operator!=(const AdRequestConfigItem&l, const AdRequestConfigItem&r)
    {
        return !(l == r);
    }

    struct AdInsideConfigRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideConfigRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        AdInsideConfigRequest()
        :requestId("")
        {
        }
        void resetDefautlt()
        {
            requestId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(requestId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(requestId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(requestId,"requestId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(requestId, false);
            return _os;
        }
    public:
        std::string requestId;
    };
    inline bool operator==(const AdInsideConfigRequest&l, const AdInsideConfigRequest&r)
    {
        return l.requestId == r.requestId;
    }
    inline bool operator!=(const AdInsideConfigRequest&l, const AdInsideConfigRequest&r)
    {
        return !(l == r);
    }

    struct AdInsideConfigResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideConfigResponse";
        }
        static string MD5()
        {
            return "3e8fb906ab05fbadf3c7984ae0f40084";
        }
        AdInsideConfigResponse()
        :errCode(0),configId("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            configId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(configId, 1);
            _os.write(configItemList, 2);
            _os.write(requestConfigItemList, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(configId, 1, false);
            _is.read(configItemList, 2, false);
            _is.read(requestConfigItemList, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(configId,"configId");
            _ds.display(configItemList,"configItemList");
            _ds.display(requestConfigItemList,"requestConfigItemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(configId, true);
            _ds.displaySimple(configItemList, true);
            _ds.displaySimple(requestConfigItemList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string configId;
        vector<jce::AdConfigItem> configItemList;
        vector<jce::AdRequestConfigItem> requestConfigItemList;
    };
    inline bool operator==(const AdInsideConfigResponse&l, const AdInsideConfigResponse&r)
    {
        return l.errCode == r.errCode && l.configId == r.configId && l.configItemList == r.configItemList && l.requestConfigItemList == r.requestConfigItemList;
    }
    inline bool operator!=(const AdInsideConfigResponse&l, const AdInsideConfigResponse&r)
    {
        return !(l == r);
    }

    struct AdInsideVideoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideVideoRequest";
        }
        static string MD5()
        {
            return "6e708239341b4d90b613f7c552ab50a4";
        }
        AdInsideVideoRequest()
        :requestAdType(0),adVipState(jce::EAdVipStateUnknown)
        {
        }
        void resetDefautlt()
        {
            requestAdType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(requestAdType, 0);
            _os.write(adVideoInfo, 1);
            _os.write((taf::Int32)adVipState, 2);
            _os.write(adPageInfo, 3);
            _os.write(adOfflineInfo, 4);
            _os.write(adVideoPlatformInfo, 5);
            _os.write(adSdkRequestInfo, 6);
            _os.write(freeFlowItem, 7);
            _os.write(filterMap, 8);
            _os.write(watchedVidList, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(requestAdType, 0, false);
            _is.read(adVideoInfo, 1, false);
            taf::Int32 eTemp2 = jce::EAdVipStateUnknown;
            _is.read(eTemp2, 2, false);
            adVipState = (jce::EAdVipState)eTemp2;
            _is.read(adPageInfo, 3, false);
            _is.read(adOfflineInfo, 4, false);
            _is.read(adVideoPlatformInfo, 5, false);
            _is.read(adSdkRequestInfo, 6, false);
            _is.read(freeFlowItem, 7, false);
            _is.read(filterMap, 8, false);
            _is.read(watchedVidList, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(requestAdType,"requestAdType");
            _ds.display(adVideoInfo,"adVideoInfo");
            _ds.display((taf::Int32)adVipState,"adVipState");
            _ds.display(adPageInfo,"adPageInfo");
            _ds.display(adOfflineInfo,"adOfflineInfo");
            _ds.display(adVideoPlatformInfo,"adVideoPlatformInfo");
            _ds.display(adSdkRequestInfo,"adSdkRequestInfo");
            _ds.display(freeFlowItem,"freeFlowItem");
            _ds.display(filterMap,"filterMap");
            _ds.display(watchedVidList,"watchedVidList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(requestAdType, true);
            _ds.displaySimple(adVideoInfo, true);
            _ds.displaySimple((taf::Int32)adVipState, true);
            _ds.displaySimple(adPageInfo, true);
            _ds.displaySimple(adOfflineInfo, true);
            _ds.displaySimple(adVideoPlatformInfo, true);
            _ds.displaySimple(adSdkRequestInfo, true);
            _ds.displaySimple(freeFlowItem, true);
            _ds.displaySimple(filterMap, true);
            _ds.displaySimple(watchedVidList, false);
            return _os;
        }
    public:
        taf::Int32 requestAdType;
        jce::AdVideoInfo adVideoInfo;
        jce::EAdVipState adVipState;
        jce::AdPageInfo adPageInfo;
        jce::AdOfflineInfo adOfflineInfo;
        jce::AdVideoPlatformInfo adVideoPlatformInfo;
        jce::AdSdkRequestInfo adSdkRequestInfo;
        jce::AdFreeFlowItem freeFlowItem;
        map<std::string, vector<std::string> > filterMap;
        vector<std::string> watchedVidList;
    };
    inline bool operator==(const AdInsideVideoRequest&l, const AdInsideVideoRequest&r)
    {
        return l.requestAdType == r.requestAdType && l.adVideoInfo == r.adVideoInfo && l.adVipState == r.adVipState && l.adPageInfo == r.adPageInfo && l.adOfflineInfo == r.adOfflineInfo && l.adVideoPlatformInfo == r.adVideoPlatformInfo && l.adSdkRequestInfo == r.adSdkRequestInfo && l.freeFlowItem == r.freeFlowItem && l.filterMap == r.filterMap && l.watchedVidList == r.watchedVidList;
    }
    inline bool operator!=(const AdInsideVideoRequest&l, const AdInsideVideoRequest&r)
    {
        return !(l == r);
    }

    struct AdInsideVideoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideVideoResponse";
        }
        static string MD5()
        {
            return "6fa1dc8b6dd399a2919b823bd8c77ad8";
        }
        AdInsideVideoResponse()
        :errCode(0),errMsg(""),adCookie(""),emptyAdReason(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
            adCookie = "";
            emptyAdReason = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(videoAdItemList, 2);
            _os.write(adCookie, 3);
            _os.write(filterMap, 4);
            _os.write(getVInfoItem, 5);
            _os.write(extraDp3ReportMap, 6);
            _os.write(emptyAdReason, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, false);
            _is.read(videoAdItemList, 2, false);
            _is.read(adCookie, 3, false);
            _is.read(filterMap, 4, false);
            _is.read(getVInfoItem, 5, false);
            _is.read(extraDp3ReportMap, 6, false);
            _is.read(emptyAdReason, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(videoAdItemList,"videoAdItemList");
            _ds.display(adCookie,"adCookie");
            _ds.display(filterMap,"filterMap");
            _ds.display(getVInfoItem,"getVInfoItem");
            _ds.display(extraDp3ReportMap,"extraDp3ReportMap");
            _ds.display(emptyAdReason,"emptyAdReason");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(videoAdItemList, true);
            _ds.displaySimple(adCookie, true);
            _ds.displaySimple(filterMap, true);
            _ds.displaySimple(getVInfoItem, true);
            _ds.displaySimple(extraDp3ReportMap, true);
            _ds.displaySimple(emptyAdReason, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        vector<jce::AdTempletItem> videoAdItemList;
        std::string adCookie;
        map<std::string, vector<std::string> > filterMap;
        jce::AdGetVInfoItem getVInfoItem;
        map<std::string, std::string> extraDp3ReportMap;
        taf::Int32 emptyAdReason;
    };
    inline bool operator==(const AdInsideVideoResponse&l, const AdInsideVideoResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.videoAdItemList == r.videoAdItemList && l.adCookie == r.adCookie && l.filterMap == r.filterMap && l.getVInfoItem == r.getVInfoItem && l.extraDp3ReportMap == r.extraDp3ReportMap && l.emptyAdReason == r.emptyAdReason;
    }
    inline bool operator!=(const AdInsideVideoResponse&l, const AdInsideVideoResponse&r)
    {
        return !(l == r);
    }

    struct AdCornerControlInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdCornerControlInfo";
        }
        static string MD5()
        {
            return "b4dfb493a7ab25f3f048b07a56caa0f8";
        }
        AdCornerControlInfo()
        :showCloseAdBtn(false),showAdIcon(true),enableClick(false),posX(0),posY(0),posH(0),posW(0),ratio(0),interval(0),playTime(0)
        {
        }
        void resetDefautlt()
        {
            showCloseAdBtn = false;
            showAdIcon = true;
            enableClick = false;
            posX = 0;
            posY = 0;
            posH = 0;
            posW = 0;
            ratio = 0;
            interval = 0;
            playTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(showCloseAdBtn, 0);
            _os.write(showAdIcon, 1);
            _os.write(enableClick, 2);
            _os.write(posX, 3);
            _os.write(posY, 4);
            _os.write(posH, 5);
            _os.write(posW, 6);
            _os.write(ratio, 7);
            _os.write(interval, 8);
            _os.write(playTime, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(showCloseAdBtn, 0, false);
            _is.read(showAdIcon, 1, false);
            _is.read(enableClick, 2, false);
            _is.read(posX, 3, false);
            _is.read(posY, 4, false);
            _is.read(posH, 5, false);
            _is.read(posW, 6, false);
            _is.read(ratio, 7, false);
            _is.read(interval, 8, false);
            _is.read(playTime, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(showCloseAdBtn,"showCloseAdBtn");
            _ds.display(showAdIcon,"showAdIcon");
            _ds.display(enableClick,"enableClick");
            _ds.display(posX,"posX");
            _ds.display(posY,"posY");
            _ds.display(posH,"posH");
            _ds.display(posW,"posW");
            _ds.display(ratio,"ratio");
            _ds.display(interval,"interval");
            _ds.display(playTime,"playTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(showCloseAdBtn, true);
            _ds.displaySimple(showAdIcon, true);
            _ds.displaySimple(enableClick, true);
            _ds.displaySimple(posX, true);
            _ds.displaySimple(posY, true);
            _ds.displaySimple(posH, true);
            _ds.displaySimple(posW, true);
            _ds.displaySimple(ratio, true);
            _ds.displaySimple(interval, true);
            _ds.displaySimple(playTime, false);
            return _os;
        }
    public:
        taf::Bool showCloseAdBtn;
        taf::Bool showAdIcon;
        taf::Bool enableClick;
        taf::Float posX;
        taf::Float posY;
        taf::Float posH;
        taf::Float posW;
        taf::Float ratio;
        taf::Int32 interval;
        taf::Int32 playTime;
    };
    inline bool operator==(const AdCornerControlInfo&l, const AdCornerControlInfo&r)
    {
        return l.showCloseAdBtn == r.showCloseAdBtn && l.showAdIcon == r.showAdIcon && l.enableClick == r.enableClick && l.posX == r.posX && l.posY == r.posY && l.posH == r.posH && l.posW == r.posW && l.ratio == r.ratio && l.interval == r.interval && l.playTime == r.playTime;
    }
    inline bool operator!=(const AdCornerControlInfo&l, const AdCornerControlInfo&r)
    {
        return !(l == r);
    }

    struct AdCornerResourceInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdCornerResourceInfo";
        }
        static string MD5()
        {
            return "2385ee5b0781be50342a80994c591494";
        }
        AdCornerResourceInfo()
        :type(0),url(""),md5(""),fileSize(0),duration(0),width(0),height(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
            url = "";
            md5 = "";
            fileSize = 0;
            duration = 0;
            width = 0;
            height = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(url, 1);
            _os.write(md5, 2);
            _os.write(fileSize, 3);
            _os.write(duration, 4);
            _os.write(width, 5);
            _os.write(height, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(url, 1, false);
            _is.read(md5, 2, false);
            _is.read(fileSize, 3, false);
            _is.read(duration, 4, false);
            _is.read(width, 5, false);
            _is.read(height, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(url,"url");
            _ds.display(md5,"md5");
            _ds.display(fileSize,"fileSize");
            _ds.display(duration,"duration");
            _ds.display(width,"width");
            _ds.display(height,"height");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(url, true);
            _ds.displaySimple(md5, true);
            _ds.displaySimple(fileSize, true);
            _ds.displaySimple(duration, true);
            _ds.displaySimple(width, true);
            _ds.displaySimple(height, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string url;
        std::string md5;
        taf::Int32 fileSize;
        taf::Int32 duration;
        taf::Int32 width;
        taf::Int32 height;
    };
    inline bool operator==(const AdCornerResourceInfo&l, const AdCornerResourceInfo&r)
    {
        return l.type == r.type && l.url == r.url && l.md5 == r.md5 && l.fileSize == r.fileSize && l.duration == r.duration && l.width == r.width && l.height == r.height;
    }
    inline bool operator!=(const AdCornerResourceInfo&l, const AdCornerResourceInfo&r)
    {
        return !(l == r);
    }

    struct AdInsideCornerItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideCornerItem";
        }
        static string MD5()
        {
            return "19d724330ef4ed633bf2c6a4d404051e";
        }
        AdInsideCornerItem()
        :isWhole(false),expiredTime(0)
        {
        }
        void resetDefautlt()
        {
            isWhole = false;
            expiredTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(orderItem, 0);
            _os.write(resourceInfo, 1);
            _os.write(controlInfo, 2);
            _os.write(shareItem, 3);
            _os.write(extraReportItem, 4);
            _os.write(isWhole, 5);
            _os.write(expiredTime, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(orderItem, 0, false);
            _is.read(resourceInfo, 1, false);
            _is.read(controlInfo, 2, false);
            _is.read(shareItem, 3, false);
            _is.read(extraReportItem, 4, false);
            _is.read(isWhole, 5, false);
            _is.read(expiredTime, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(orderItem,"orderItem");
            _ds.display(resourceInfo,"resourceInfo");
            _ds.display(controlInfo,"controlInfo");
            _ds.display(shareItem,"shareItem");
            _ds.display(extraReportItem,"extraReportItem");
            _ds.display(isWhole,"isWhole");
            _ds.display(expiredTime,"expiredTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(orderItem, true);
            _ds.displaySimple(resourceInfo, true);
            _ds.displaySimple(controlInfo, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(extraReportItem, true);
            _ds.displaySimple(isWhole, true);
            _ds.displaySimple(expiredTime, false);
            return _os;
        }
    public:
        jce::AdOrderItem orderItem;
        jce::AdCornerResourceInfo resourceInfo;
        jce::AdCornerControlInfo controlInfo;
        jce::AdShareItem shareItem;
        jce::AdInSideExtraReportItem extraReportItem;
        taf::Bool isWhole;
        taf::Int64 expiredTime;
    };
    inline bool operator==(const AdInsideCornerItem&l, const AdInsideCornerItem&r)
    {
        return l.orderItem == r.orderItem && l.resourceInfo == r.resourceInfo && l.controlInfo == r.controlInfo && l.shareItem == r.shareItem && l.extraReportItem == r.extraReportItem && l.isWhole == r.isWhole && l.expiredTime == r.expiredTime;
    }
    inline bool operator!=(const AdInsideCornerItem&l, const AdInsideCornerItem&r)
    {
        return !(l == r);
    }

    struct LiveEventMsgInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveEventMsgInfo";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        LiveEventMsgInfo()
        :eventMsg(""),encryptType(0)
        {
        }
        void resetDefautlt()
        {
            eventMsg = "";
            encryptType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(eventMsg, 0);
            _os.write(encryptType, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(eventMsg, 0, false);
            _is.read(encryptType, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(eventMsg,"eventMsg");
            _ds.display(encryptType,"encryptType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(eventMsg, true);
            _ds.displaySimple(encryptType, false);
            return _os;
        }
    public:
        std::string eventMsg;
        taf::Int32 encryptType;
    };
    inline bool operator==(const LiveEventMsgInfo&l, const LiveEventMsgInfo&r)
    {
        return l.eventMsg == r.eventMsg && l.encryptType == r.encryptType;
    }
    inline bool operator!=(const LiveEventMsgInfo&l, const LiveEventMsgInfo&r)
    {
        return !(l == r);
    }

    struct AdInsideLiveCornerRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideLiveCornerRequest";
        }
        static string MD5()
        {
            return "1d0ad359f5ca839c3fcaff6a07ddc680";
        }
        AdInsideLiveCornerRequest()
        :adVipState(jce::EAdVipStateUnknown)
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(liveEventMsgInfo, 0);
            _os.write(adVideoInfo, 1);
            _os.write((taf::Int32)adVipState, 2);
            _os.write(adPageInfo, 3);
            _os.write(adVideoPlatformInfo, 4);
            _os.write(adSdkRequestInfo, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(liveEventMsgInfo, 0, false);
            _is.read(adVideoInfo, 1, false);
            taf::Int32 eTemp2 = jce::EAdVipStateUnknown;
            _is.read(eTemp2, 2, false);
            adVipState = (jce::EAdVipState)eTemp2;
            _is.read(adPageInfo, 3, false);
            _is.read(adVideoPlatformInfo, 4, false);
            _is.read(adSdkRequestInfo, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(liveEventMsgInfo,"liveEventMsgInfo");
            _ds.display(adVideoInfo,"adVideoInfo");
            _ds.display((taf::Int32)adVipState,"adVipState");
            _ds.display(adPageInfo,"adPageInfo");
            _ds.display(adVideoPlatformInfo,"adVideoPlatformInfo");
            _ds.display(adSdkRequestInfo,"adSdkRequestInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(liveEventMsgInfo, true);
            _ds.displaySimple(adVideoInfo, true);
            _ds.displaySimple((taf::Int32)adVipState, true);
            _ds.displaySimple(adPageInfo, true);
            _ds.displaySimple(adVideoPlatformInfo, true);
            _ds.displaySimple(adSdkRequestInfo, false);
            return _os;
        }
    public:
        jce::LiveEventMsgInfo liveEventMsgInfo;
        jce::AdVideoInfo adVideoInfo;
        jce::EAdVipState adVipState;
        jce::AdPageInfo adPageInfo;
        jce::AdVideoPlatformInfo adVideoPlatformInfo;
        jce::AdSdkRequestInfo adSdkRequestInfo;
    };
    inline bool operator==(const AdInsideLiveCornerRequest&l, const AdInsideLiveCornerRequest&r)
    {
        return l.liveEventMsgInfo == r.liveEventMsgInfo && l.adVideoInfo == r.adVideoInfo && l.adVipState == r.adVipState && l.adPageInfo == r.adPageInfo && l.adVideoPlatformInfo == r.adVideoPlatformInfo && l.adSdkRequestInfo == r.adSdkRequestInfo;
    }
    inline bool operator!=(const AdInsideLiveCornerRequest&l, const AdInsideLiveCornerRequest&r)
    {
        return !(l == r);
    }

    struct AdInsideLiveCornerResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideLiveCornerResponse";
        }
        static string MD5()
        {
            return "d1e2a4584fe86cc9fb6693dc732d054d";
        }
        AdInsideLiveCornerResponse()
        :errCode(0),errMsg(""),adCookie("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
            adCookie = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(cornerItemListData, 2);
            _os.write(adCookie, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, false);
            _is.read(cornerItemListData, 2, false);
            _is.read(adCookie, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(cornerItemListData,"cornerItemListData");
            _ds.display(adCookie,"adCookie");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(cornerItemListData, true);
            _ds.displaySimple(adCookie, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        vector<jce::AdTempletItem> cornerItemListData;
        std::string adCookie;
    };
    inline bool operator==(const AdInsideLiveCornerResponse&l, const AdInsideLiveCornerResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.cornerItemListData == r.cornerItemListData && l.adCookie == r.adCookie;
    }
    inline bool operator!=(const AdInsideLiveCornerResponse&l, const AdInsideLiveCornerResponse&r)
    {
        return !(l == r);
    }

    struct AdAnchorPointItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdAnchorPointItem";
        }
        static string MD5()
        {
            return "c8a34d120b51931c6b65d11ff5e99bb7";
        }
        AdAnchorPointItem()
        :anchorId(""),anchorTime(0),needReplace(false),dataKey(""),rangeBegin(0),rangeEnd(0)
        {
        }
        void resetDefautlt()
        {
            anchorId = "";
            anchorTime = 0;
            needReplace = false;
            dataKey = "";
            rangeBegin = 0;
            rangeEnd = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(anchorId, 0);
            _os.write(anchorTime, 1);
            _os.write(needReplace, 2);
            _os.write(dataKey, 3);
            _os.write(rangeBegin, 4);
            _os.write(rangeEnd, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(anchorId, 0, false);
            _is.read(anchorTime, 1, false);
            _is.read(needReplace, 2, false);
            _is.read(dataKey, 3, false);
            _is.read(rangeBegin, 4, false);
            _is.read(rangeEnd, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(anchorId,"anchorId");
            _ds.display(anchorTime,"anchorTime");
            _ds.display(needReplace,"needReplace");
            _ds.display(dataKey,"dataKey");
            _ds.display(rangeBegin,"rangeBegin");
            _ds.display(rangeEnd,"rangeEnd");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(anchorId, true);
            _ds.displaySimple(anchorTime, true);
            _ds.displaySimple(needReplace, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(rangeBegin, true);
            _ds.displaySimple(rangeEnd, false);
            return _os;
        }
    public:
        std::string anchorId;
        taf::Int32 anchorTime;
        taf::Bool needReplace;
        std::string dataKey;
        taf::Int32 rangeBegin;
        taf::Int32 rangeEnd;
    };
    inline bool operator==(const AdAnchorPointItem&l, const AdAnchorPointItem&r)
    {
        return l.anchorId == r.anchorId && l.anchorTime == r.anchorTime && l.needReplace == r.needReplace && l.dataKey == r.dataKey && l.rangeBegin == r.rangeBegin && l.rangeEnd == r.rangeEnd;
    }
    inline bool operator!=(const AdAnchorPointItem&l, const AdAnchorPointItem&r)
    {
        return !(l == r);
    }

    struct AdAnchorItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdAnchorItem";
        }
        static string MD5()
        {
            return "17105396d5adc18308ae52101a96e100";
        }
        AdAnchorItem()
        :adType(jce::EAdTypeUnknown)
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)adType, 0);
            _os.write(pointItem, 1);
            _os.write(templetItemList, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = jce::EAdTypeUnknown;
            _is.read(eTemp0, 0, false);
            adType = (jce::EAdType)eTemp0;
            _is.read(pointItem, 1, false);
            _is.read(templetItemList, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)adType,"adType");
            _ds.display(pointItem,"pointItem");
            _ds.display(templetItemList,"templetItemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)adType, true);
            _ds.displaySimple(pointItem, true);
            _ds.displaySimple(templetItemList, false);
            return _os;
        }
    public:
        jce::EAdType adType;
        jce::AdAnchorPointItem pointItem;
        vector<jce::AdTempletItem> templetItemList;
    };
    inline bool operator==(const AdAnchorItem&l, const AdAnchorItem&r)
    {
        return l.adType == r.adType && l.pointItem == r.pointItem && l.templetItemList == r.templetItemList;
    }
    inline bool operator!=(const AdAnchorItem&l, const AdAnchorItem&r)
    {
        return !(l == r);
    }

    struct AdAnchorCommonInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdAnchorCommonInfo";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        AdAnchorCommonInfo()
        :playDuration(0)
        {
        }
        void resetDefautlt()
        {
            playDuration = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(playDuration, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(playDuration, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(playDuration,"playDuration");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(playDuration, false);
            return _os;
        }
    public:
        taf::Int32 playDuration;
    };
    inline bool operator==(const AdAnchorCommonInfo&l, const AdAnchorCommonInfo&r)
    {
        return l.playDuration == r.playDuration;
    }
    inline bool operator!=(const AdAnchorCommonInfo&l, const AdAnchorCommonInfo&r)
    {
        return !(l == r);
    }

    struct AdInsideNormalCornerItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideNormalCornerItem";
        }
        static string MD5()
        {
            return "ddd7ba3b916dbd7ad4079f6def737054";
        }
        AdInsideNormalCornerItem()
        :showCloseAdBtn(true),showAdIcon(true),enableClick(true)
        {
        }
        void resetDefautlt()
        {
            showCloseAdBtn = true;
            showAdIcon = true;
            enableClick = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(orderItem, 0);
            _os.write(shareItem, 1);
            _os.write(resourceInfo, 2);
            _os.write(commonInfo, 3);
            _os.write(extraReportItem, 4);
            _os.write(showCloseAdBtn, 5);
            _os.write(showAdIcon, 6);
            _os.write(enableClick, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(orderItem, 0, false);
            _is.read(shareItem, 1, false);
            _is.read(resourceInfo, 2, false);
            _is.read(commonInfo, 3, false);
            _is.read(extraReportItem, 4, false);
            _is.read(showCloseAdBtn, 5, false);
            _is.read(showAdIcon, 6, false);
            _is.read(enableClick, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(orderItem,"orderItem");
            _ds.display(shareItem,"shareItem");
            _ds.display(resourceInfo,"resourceInfo");
            _ds.display(commonInfo,"commonInfo");
            _ds.display(extraReportItem,"extraReportItem");
            _ds.display(showCloseAdBtn,"showCloseAdBtn");
            _ds.display(showAdIcon,"showAdIcon");
            _ds.display(enableClick,"enableClick");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(orderItem, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(resourceInfo, true);
            _ds.displaySimple(commonInfo, true);
            _ds.displaySimple(extraReportItem, true);
            _ds.displaySimple(showCloseAdBtn, true);
            _ds.displaySimple(showAdIcon, true);
            _ds.displaySimple(enableClick, false);
            return _os;
        }
    public:
        jce::AdOrderItem orderItem;
        jce::AdShareItem shareItem;
        jce::AdCornerResourceInfo resourceInfo;
        jce::AdAnchorCommonInfo commonInfo;
        jce::AdInSideExtraReportItem extraReportItem;
        taf::Bool showCloseAdBtn;
        taf::Bool showAdIcon;
        taf::Bool enableClick;
    };
    inline bool operator==(const AdInsideNormalCornerItem&l, const AdInsideNormalCornerItem&r)
    {
        return l.orderItem == r.orderItem && l.shareItem == r.shareItem && l.resourceInfo == r.resourceInfo && l.commonInfo == r.commonInfo && l.extraReportItem == r.extraReportItem && l.showCloseAdBtn == r.showCloseAdBtn && l.showAdIcon == r.showAdIcon && l.enableClick == r.enableClick;
    }
    inline bool operator!=(const AdInsideNormalCornerItem&l, const AdInsideNormalCornerItem&r)
    {
        return !(l == r);
    }

    struct AdInsideAnchorRichMediaItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideAnchorRichMediaItem";
        }
        static string MD5()
        {
            return "5042432eb0342afe801c6b539f744686";
        }
        AdInsideAnchorRichMediaItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(orderItem, 0);
            _os.write(shareItem, 1);
            _os.write(extraReportItem, 2);
            _os.write(richMediaItem, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(orderItem, 0, false);
            _is.read(shareItem, 1, false);
            _is.read(extraReportItem, 2, false);
            _is.read(richMediaItem, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(orderItem,"orderItem");
            _ds.display(shareItem,"shareItem");
            _ds.display(extraReportItem,"extraReportItem");
            _ds.display(richMediaItem,"richMediaItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(orderItem, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(extraReportItem, true);
            _ds.displaySimple(richMediaItem, false);
            return _os;
        }
    public:
        jce::AdOrderItem orderItem;
        jce::AdShareItem shareItem;
        jce::AdInSideExtraReportItem extraReportItem;
        jce::AdRichMediaItem richMediaItem;
    };
    inline bool operator==(const AdInsideAnchorRichMediaItem&l, const AdInsideAnchorRichMediaItem&r)
    {
        return l.orderItem == r.orderItem && l.shareItem == r.shareItem && l.extraReportItem == r.extraReportItem && l.richMediaItem == r.richMediaItem;
    }
    inline bool operator!=(const AdInsideAnchorRichMediaItem&l, const AdInsideAnchorRichMediaItem&r)
    {
        return !(l == r);
    }

    struct AdInsideVideoInsertReporterItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideVideoInsertReporterItem";
        }
        static string MD5()
        {
            return "def76b97c77aad0042f804a1b35841f9";
        }
        AdInsideVideoInsertReporterItem()
        :shouldHideWholeSuperCorner(true)
        {
        }
        void resetDefautlt()
        {
            shouldHideWholeSuperCorner = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(orderItem, 0);
            _os.write(extraReportItem, 1);
            _os.write(shouldHideWholeSuperCorner, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(orderItem, 0, false);
            _is.read(extraReportItem, 1, false);
            _is.read(shouldHideWholeSuperCorner, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(orderItem,"orderItem");
            _ds.display(extraReportItem,"extraReportItem");
            _ds.display(shouldHideWholeSuperCorner,"shouldHideWholeSuperCorner");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(orderItem, true);
            _ds.displaySimple(extraReportItem, true);
            _ds.displaySimple(shouldHideWholeSuperCorner, false);
            return _os;
        }
    public:
        jce::AdOrderItem orderItem;
        jce::AdInSideExtraReportItem extraReportItem;
        taf::Bool shouldHideWholeSuperCorner;
    };
    inline bool operator==(const AdInsideVideoInsertReporterItem&l, const AdInsideVideoInsertReporterItem&r)
    {
        return l.orderItem == r.orderItem && l.extraReportItem == r.extraReportItem && l.shouldHideWholeSuperCorner == r.shouldHideWholeSuperCorner;
    }
    inline bool operator!=(const AdInsideVideoInsertReporterItem&l, const AdInsideVideoInsertReporterItem&r)
    {
        return !(l == r);
    }

    struct AdInsideAnchorRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideAnchorRequest";
        }
        static string MD5()
        {
            return "4a87c6782670bbe4c41ca3ea3eef1b6a";
        }
        AdInsideAnchorRequest()
        :adVipState(jce::EAdVipStateUnknown),sessionId("")
        {
        }
        void resetDefautlt()
        {
            sessionId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adVideoInfo, 1);
            _os.write((taf::Int32)adVipState, 2);
            _os.write(adPageInfo, 3);
            _os.write(adVideoPlatformInfo, 4);
            _os.write(adSdkRequestInfo, 5);
            _os.write(freeFlowItem, 6);
            _os.write(adOfflineInfo, 7);
            _os.write(sessionId, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adVideoInfo, 1, false);
            taf::Int32 eTemp2 = jce::EAdVipStateUnknown;
            _is.read(eTemp2, 2, false);
            adVipState = (jce::EAdVipState)eTemp2;
            _is.read(adPageInfo, 3, false);
            _is.read(adVideoPlatformInfo, 4, false);
            _is.read(adSdkRequestInfo, 5, false);
            _is.read(freeFlowItem, 6, false);
            _is.read(adOfflineInfo, 7, false);
            _is.read(sessionId, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adVideoInfo,"adVideoInfo");
            _ds.display((taf::Int32)adVipState,"adVipState");
            _ds.display(adPageInfo,"adPageInfo");
            _ds.display(adVideoPlatformInfo,"adVideoPlatformInfo");
            _ds.display(adSdkRequestInfo,"adSdkRequestInfo");
            _ds.display(freeFlowItem,"freeFlowItem");
            _ds.display(adOfflineInfo,"adOfflineInfo");
            _ds.display(sessionId,"sessionId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adVideoInfo, true);
            _ds.displaySimple((taf::Int32)adVipState, true);
            _ds.displaySimple(adPageInfo, true);
            _ds.displaySimple(adVideoPlatformInfo, true);
            _ds.displaySimple(adSdkRequestInfo, true);
            _ds.displaySimple(freeFlowItem, true);
            _ds.displaySimple(adOfflineInfo, true);
            _ds.displaySimple(sessionId, false);
            return _os;
        }
    public:
        jce::AdVideoInfo adVideoInfo;
        jce::EAdVipState adVipState;
        jce::AdPageInfo adPageInfo;
        jce::AdVideoPlatformInfo adVideoPlatformInfo;
        jce::AdSdkRequestInfo adSdkRequestInfo;
        jce::AdFreeFlowItem freeFlowItem;
        jce::AdOfflineInfo adOfflineInfo;
        std::string sessionId;
    };
    inline bool operator==(const AdInsideAnchorRequest&l, const AdInsideAnchorRequest&r)
    {
        return l.adVideoInfo == r.adVideoInfo && l.adVipState == r.adVipState && l.adPageInfo == r.adPageInfo && l.adVideoPlatformInfo == r.adVideoPlatformInfo && l.adSdkRequestInfo == r.adSdkRequestInfo && l.freeFlowItem == r.freeFlowItem && l.adOfflineInfo == r.adOfflineInfo && l.sessionId == r.sessionId;
    }
    inline bool operator!=(const AdInsideAnchorRequest&l, const AdInsideAnchorRequest&r)
    {
        return !(l == r);
    }

    struct AdInsideAnchorResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideAnchorResponse";
        }
        static string MD5()
        {
            return "b307b74bd326d109128ba6a42be6a4cf";
        }
        AdInsideAnchorResponse()
        :errCode(0),errMsg(""),expiredTime(0),adCookie("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
            expiredTime = 0;
            adCookie = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(anchorItemList, 2);
            _os.write(expiredTime, 3);
            _os.write(adCookie, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, false);
            _is.read(anchorItemList, 2, false);
            _is.read(expiredTime, 3, false);
            _is.read(adCookie, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(anchorItemList,"anchorItemList");
            _ds.display(expiredTime,"expiredTime");
            _ds.display(adCookie,"adCookie");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(anchorItemList, true);
            _ds.displaySimple(expiredTime, true);
            _ds.displaySimple(adCookie, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        vector<jce::AdAnchorItem> anchorItemList;
        taf::Int64 expiredTime;
        std::string adCookie;
    };
    inline bool operator==(const AdInsideAnchorResponse&l, const AdInsideAnchorResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.anchorItemList == r.anchorItemList && l.expiredTime == r.expiredTime && l.adCookie == r.adCookie;
    }
    inline bool operator!=(const AdInsideAnchorResponse&l, const AdInsideAnchorResponse&r)
    {
        return !(l == r);
    }

    struct AdInsideAnchorUpdateRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideAnchorUpdateRequest";
        }
        static string MD5()
        {
            return "a3a21c252d84834d335df3c260afe82e";
        }
        AdInsideAnchorUpdateRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(anchorPointItemList, 0);
            _os.write(adVideoInfo, 1);
            _os.write(adVideoPlatformInfo, 2);
            _os.write(freeFlowItem, 3);
            _os.write(filterMap, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(anchorPointItemList, 0, false);
            _is.read(adVideoInfo, 1, false);
            _is.read(adVideoPlatformInfo, 2, false);
            _is.read(freeFlowItem, 3, false);
            _is.read(filterMap, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(anchorPointItemList,"anchorPointItemList");
            _ds.display(adVideoInfo,"adVideoInfo");
            _ds.display(adVideoPlatformInfo,"adVideoPlatformInfo");
            _ds.display(freeFlowItem,"freeFlowItem");
            _ds.display(filterMap,"filterMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(anchorPointItemList, true);
            _ds.displaySimple(adVideoInfo, true);
            _ds.displaySimple(adVideoPlatformInfo, true);
            _ds.displaySimple(freeFlowItem, true);
            _ds.displaySimple(filterMap, false);
            return _os;
        }
    public:
        vector<jce::AdAnchorPointItem> anchorPointItemList;
        jce::AdVideoInfo adVideoInfo;
        jce::AdVideoPlatformInfo adVideoPlatformInfo;
        jce::AdFreeFlowItem freeFlowItem;
        map<std::string, vector<std::string> > filterMap;
    };
    inline bool operator==(const AdInsideAnchorUpdateRequest&l, const AdInsideAnchorUpdateRequest&r)
    {
        return l.anchorPointItemList == r.anchorPointItemList && l.adVideoInfo == r.adVideoInfo && l.adVideoPlatformInfo == r.adVideoPlatformInfo && l.freeFlowItem == r.freeFlowItem && l.filterMap == r.filterMap;
    }
    inline bool operator!=(const AdInsideAnchorUpdateRequest&l, const AdInsideAnchorUpdateRequest&r)
    {
        return !(l == r);
    }

    struct AdInsideAnchorUpdateResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdInsideAnchorUpdateResponse";
        }
        static string MD5()
        {
            return "f367ebb64313096c9e55c5df147130c3";
        }
        AdInsideAnchorUpdateResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(anchorItemList, 2);
            _os.write(filterMap, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, false);
            _is.read(anchorItemList, 2, false);
            _is.read(filterMap, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(anchorItemList,"anchorItemList");
            _ds.display(filterMap,"filterMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(anchorItemList, true);
            _ds.displaySimple(filterMap, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        vector<jce::AdAnchorItem> anchorItemList;
        map<std::string, vector<std::string> > filterMap;
    };
    inline bool operator==(const AdInsideAnchorUpdateResponse&l, const AdInsideAnchorUpdateResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.anchorItemList == r.anchorItemList && l.filterMap == r.filterMap;
    }
    inline bool operator!=(const AdInsideAnchorUpdateResponse&l, const AdInsideAnchorUpdateResponse&r)
    {
        return !(l == r);
    }


}

#define jce_AdVideoPlatformInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adxEncryData,b.adxEncryData);jce_copy_struct(a.pf,b.pf);jce_copy_struct(a.chid,b.chid);jce_copy_struct(a.sdtfrom,b.sdtfrom);jce_copy_struct(a.platform,b.platform);jce_copy_struct(a.device,b.device);jce_copy_struct(a.newNetType,b.newNetType);jce_copy_struct(a.openudid,b.openudid);

#define jce_AdVideoInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.coverId,b.coverId);jce_copy_struct(a.isLive,b.isLive);jce_copy_struct(a.livepId,b.livepId);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.tpId,b.tpId);jce_copy_struct(a.defn,b.defn);jce_copy_struct(a.preVid,b.preVid);

#define jce_AdPageInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adPlayMode,b.adPlayMode);jce_copy_struct(a.style,b.style);jce_copy_struct(a.page,b.page);jce_copy_struct(a.channelId,b.channelId);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.flowId,b.flowId);

#define jce_AdOfflineInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.offlineVideoType,b.offlineVideoType);jce_copy_struct(a.vidList,b.vidList);

#define jce_AdRichMediaItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.richMediaUrl,b.richMediaUrl);jce_copy_struct(a.richMediaZip,b.richMediaZip);jce_copy_struct(a.zipFailedSkipAd,b.zipFailedSkipAd);jce_copy_struct(a.richMediaParams,b.richMediaParams);jce_copy_struct(a.isValid,b.isValid);

#define jce_AdInSideExtraReportItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.soid,b.soid);jce_copy_struct(a.adid,b.adid);jce_copy_struct(a.needOperationReport,b.needOperationReport);jce_copy_struct(a.needWisdomReport,b.needWisdomReport);jce_copy_struct(a.needRetryReport,b.needRetryReport);jce_copy_struct(a.operationReportMap,b.operationReportMap);

#define jce_AdPauseOrderItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.orderItem,b.orderItem);jce_copy_struct(a.isBlurbackground,b.isBlurbackground);jce_copy_struct(a.md5,b.md5);

#define jce_AdxPauseOrderItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pauseOrderItem,b.pauseOrderItem);jce_copy_struct(a.richMediaItem,b.richMediaItem);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.extraReportItem,b.extraReportItem);

#define jce_AdInsideVideoTitle_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dspName,b.dspName);jce_copy_struct(a.fullTitle,b.fullTitle);jce_copy_struct(a.fullUnInstallTitle,b.fullUnInstallTitle);jce_copy_struct(a.shortTitle,b.shortTitle);jce_copy_struct(a.shortUnInstallTitle,b.shortUnInstallTitle);

#define jce_AdInsideCoolSpaPauseItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pauseOrderItem,b.pauseOrderItem);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.titleInfo,b.titleInfo);

#define jce_AdInsideCoolAdxPauseItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adxOrderItem,b.adxOrderItem);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.titleInfo,b.titleInfo);

#define jce_AdInsideEmptyItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.orderItem,b.orderItem);

#define jce_AdVideoItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.url,b.url);jce_copy_struct(a.md5,b.md5);jce_copy_struct(a.fileSize,b.fileSize);jce_copy_struct(a.duration,b.duration);jce_copy_struct(a.width,b.width);jce_copy_struct(a.height,b.height);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.encodeFormat,b.encodeFormat);

#define jce_AdSpeechInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.isValid,b.isValid);jce_copy_struct(a.voiceToken,b.voiceToken);jce_copy_struct(a.confidence,b.confidence);jce_copy_struct(a.openType,b.openType);jce_copy_struct(a.mainTitle,b.mainTitle);jce_copy_struct(a.adWord,b.adWord);jce_copy_struct(a.subTitle,b.subTitle);

#define jce_AdLinkInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.isValid,b.isValid);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.startCount,b.startCount);jce_copy_struct(a.buttonTitle,b.buttonTitle);jce_copy_struct(a.isBannerValid,b.isBannerValid);jce_copy_struct(a.bannerShowTime,b.bannerShowTime);

#define jce_AdInsideVideoPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.enableScreenClick,b.enableScreenClick);jce_copy_struct(a.skipAdDuration,b.skipAdDuration);jce_copy_struct(a.skipAdtitle,b.skipAdtitle);jce_copy_struct(a.skipAdSubtitle,b.skipAdSubtitle);jce_copy_struct(a.actionButtonType,b.actionButtonType);jce_copy_struct(a.titleInfo,b.titleInfo);jce_copy_struct(a.buttonAction,b.buttonAction);

#define jce_AdFreeFlowItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.flowType,b.flowType);jce_copy_struct(a.flowSubType,b.flowSubType);jce_copy_struct(a.userMob,b.userMob);

#define jce_AdInsideVideoItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adSubType,b.adSubType);jce_copy_struct(a.orderItem,b.orderItem);jce_copy_struct(a.videoItem,b.videoItem);jce_copy_struct(a.videoPoster,b.videoPoster);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.speechInfo,b.speechInfo);jce_copy_struct(a.linkInfo,b.linkInfo);jce_copy_struct(a.richMediaItem,b.richMediaItem);jce_copy_struct(a.extraReportItem,b.extraReportItem);

#define jce_AdGetVInfoItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.videoId,b.videoId);

#define jce_AdTempletItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.viewType,b.viewType);jce_copy_struct(a.data,b.data);jce_copy_struct(a.debugInfo,b.debugInfo);jce_copy_struct(a.index,b.index);

#define jce_AdPauseRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adVideoInfo,b.adVideoInfo);jce_copy_struct(a.adVipState,b.adVipState);jce_copy_struct(a.adPageInfo,b.adPageInfo);jce_copy_struct(a.adOfflineInfo,b.adOfflineInfo);jce_copy_struct(a.adVideoPlatformInfo,b.adVideoPlatformInfo);jce_copy_struct(a.adSdkRequestInfo,b.adSdkRequestInfo);jce_copy_struct(a.screenMode,b.screenMode);jce_copy_struct(a.requestAdHistory,b.requestAdHistory);

#define jce_AdPauseResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pauseAdItem,b.pauseAdItem);jce_copy_struct(a.adCookie,b.adCookie);

#define jce_AdPlayModeConfigItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adPlayMode,b.adPlayMode);jce_copy_struct(a.playModeSwitchState,b.playModeSwitchState);

#define jce_AdConfigItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adType,b.adType);jce_copy_struct(a.newSdkSwitchState,b.newSdkSwitchState);jce_copy_struct(a.playModeList,b.playModeList);

#define jce_AdRequestConfigItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adReqeustType,b.adReqeustType);jce_copy_struct(a.newSdkSwitchState,b.newSdkSwitchState);

#define jce_AdInsideConfigRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.requestId,b.requestId);

#define jce_AdInsideConfigResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.configId,b.configId);jce_copy_struct(a.configItemList,b.configItemList);jce_copy_struct(a.requestConfigItemList,b.requestConfigItemList);

#define jce_AdInsideVideoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.requestAdType,b.requestAdType);jce_copy_struct(a.adVideoInfo,b.adVideoInfo);jce_copy_struct(a.adVipState,b.adVipState);jce_copy_struct(a.adPageInfo,b.adPageInfo);jce_copy_struct(a.adOfflineInfo,b.adOfflineInfo);jce_copy_struct(a.adVideoPlatformInfo,b.adVideoPlatformInfo);jce_copy_struct(a.adSdkRequestInfo,b.adSdkRequestInfo);jce_copy_struct(a.freeFlowItem,b.freeFlowItem);jce_copy_struct(a.filterMap,b.filterMap);jce_copy_struct(a.watchedVidList,b.watchedVidList);

#define jce_AdInsideVideoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.videoAdItemList,b.videoAdItemList);jce_copy_struct(a.adCookie,b.adCookie);jce_copy_struct(a.filterMap,b.filterMap);jce_copy_struct(a.getVInfoItem,b.getVInfoItem);jce_copy_struct(a.extraDp3ReportMap,b.extraDp3ReportMap);jce_copy_struct(a.emptyAdReason,b.emptyAdReason);

#define jce_AdCornerControlInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.showCloseAdBtn,b.showCloseAdBtn);jce_copy_struct(a.showAdIcon,b.showAdIcon);jce_copy_struct(a.enableClick,b.enableClick);jce_copy_struct(a.posX,b.posX);jce_copy_struct(a.posY,b.posY);jce_copy_struct(a.posH,b.posH);jce_copy_struct(a.posW,b.posW);jce_copy_struct(a.ratio,b.ratio);jce_copy_struct(a.interval,b.interval);jce_copy_struct(a.playTime,b.playTime);

#define jce_AdCornerResourceInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.url,b.url);jce_copy_struct(a.md5,b.md5);jce_copy_struct(a.fileSize,b.fileSize);jce_copy_struct(a.duration,b.duration);jce_copy_struct(a.width,b.width);jce_copy_struct(a.height,b.height);

#define jce_AdInsideCornerItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.orderItem,b.orderItem);jce_copy_struct(a.resourceInfo,b.resourceInfo);jce_copy_struct(a.controlInfo,b.controlInfo);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.extraReportItem,b.extraReportItem);jce_copy_struct(a.isWhole,b.isWhole);jce_copy_struct(a.expiredTime,b.expiredTime);

#define jce_LiveEventMsgInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.eventMsg,b.eventMsg);jce_copy_struct(a.encryptType,b.encryptType);

#define jce_AdInsideLiveCornerRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.liveEventMsgInfo,b.liveEventMsgInfo);jce_copy_struct(a.adVideoInfo,b.adVideoInfo);jce_copy_struct(a.adVipState,b.adVipState);jce_copy_struct(a.adPageInfo,b.adPageInfo);jce_copy_struct(a.adVideoPlatformInfo,b.adVideoPlatformInfo);jce_copy_struct(a.adSdkRequestInfo,b.adSdkRequestInfo);

#define jce_AdInsideLiveCornerResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.cornerItemListData,b.cornerItemListData);jce_copy_struct(a.adCookie,b.adCookie);

#define jce_AdAnchorPointItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.anchorId,b.anchorId);jce_copy_struct(a.anchorTime,b.anchorTime);jce_copy_struct(a.needReplace,b.needReplace);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.rangeBegin,b.rangeBegin);jce_copy_struct(a.rangeEnd,b.rangeEnd);

#define jce_AdAnchorItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adType,b.adType);jce_copy_struct(a.pointItem,b.pointItem);jce_copy_struct(a.templetItemList,b.templetItemList);

#define jce_AdAnchorCommonInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.playDuration,b.playDuration);

#define jce_AdInsideNormalCornerItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.orderItem,b.orderItem);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.resourceInfo,b.resourceInfo);jce_copy_struct(a.commonInfo,b.commonInfo);jce_copy_struct(a.extraReportItem,b.extraReportItem);jce_copy_struct(a.showCloseAdBtn,b.showCloseAdBtn);jce_copy_struct(a.showAdIcon,b.showAdIcon);jce_copy_struct(a.enableClick,b.enableClick);

#define jce_AdInsideAnchorRichMediaItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.orderItem,b.orderItem);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.extraReportItem,b.extraReportItem);jce_copy_struct(a.richMediaItem,b.richMediaItem);

#define jce_AdInsideVideoInsertReporterItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.orderItem,b.orderItem);jce_copy_struct(a.extraReportItem,b.extraReportItem);jce_copy_struct(a.shouldHideWholeSuperCorner,b.shouldHideWholeSuperCorner);

#define jce_AdInsideAnchorRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adVideoInfo,b.adVideoInfo);jce_copy_struct(a.adVipState,b.adVipState);jce_copy_struct(a.adPageInfo,b.adPageInfo);jce_copy_struct(a.adVideoPlatformInfo,b.adVideoPlatformInfo);jce_copy_struct(a.adSdkRequestInfo,b.adSdkRequestInfo);jce_copy_struct(a.freeFlowItem,b.freeFlowItem);jce_copy_struct(a.adOfflineInfo,b.adOfflineInfo);jce_copy_struct(a.sessionId,b.sessionId);

#define jce_AdInsideAnchorResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.anchorItemList,b.anchorItemList);jce_copy_struct(a.expiredTime,b.expiredTime);jce_copy_struct(a.adCookie,b.adCookie);

#define jce_AdInsideAnchorUpdateRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.anchorPointItemList,b.anchorPointItemList);jce_copy_struct(a.adVideoInfo,b.adVideoInfo);jce_copy_struct(a.adVideoPlatformInfo,b.adVideoPlatformInfo);jce_copy_struct(a.freeFlowItem,b.freeFlowItem);jce_copy_struct(a.filterMap,b.filterMap);

#define jce_AdInsideAnchorUpdateResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.anchorItemList,b.anchorItemList);jce_copy_struct(a.filterMap,b.filterMap);



#endif
