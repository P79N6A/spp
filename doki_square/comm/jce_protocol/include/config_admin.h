// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `config_admin.jce'
// **********************************************************************

#ifndef __CONFIG_ADMIN_H_
#define __CONFIG_ADMIN_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace CStarAdminPro
{
    enum ConfigCmd
    {
        CMD_CREATE_GIFT = 61901,
        CMD_MODIFY_GIFT = 61902,
        CMD_DELETE_GIFT = 61903,
        CMD_GIFT_DETAIL = 61904,
        CMD_ALL_GIFT = 61905,
        CMD_CREATE_SIGNATURE = 61906,
        CMD_ALL_SIGNATURE = 61907,
        CMD_STAR_CONFIG = 61908,
        CMD_STAR_CONFIG_DETAIL = 61930,
        CMD_EVENT_CONFIG = 62433,
        CMD_EVENT_LIST = 62434,
        CMD_STAR_CHAT_ROOM_CONFIG = 63370,
        CMD_STAR_CHAT_ROOM_LIST = 63371,
        CMD_DOKI_VID_CONFIG = 63413,
        CMD_DOKI_VID_CONFIG_LIST = 63414,
        CMD_OPER_DOKI_RECOMMEND = 63204,
        CMD_DOKI_RECOMMEND_LIST = 63205,
    };
    inline string etos(const ConfigCmd & e)
    {
        switch(e)
        {
            case CMD_CREATE_GIFT: return "CMD_CREATE_GIFT";
            case CMD_MODIFY_GIFT: return "CMD_MODIFY_GIFT";
            case CMD_DELETE_GIFT: return "CMD_DELETE_GIFT";
            case CMD_GIFT_DETAIL: return "CMD_GIFT_DETAIL";
            case CMD_ALL_GIFT: return "CMD_ALL_GIFT";
            case CMD_CREATE_SIGNATURE: return "CMD_CREATE_SIGNATURE";
            case CMD_ALL_SIGNATURE: return "CMD_ALL_SIGNATURE";
            case CMD_STAR_CONFIG: return "CMD_STAR_CONFIG";
            case CMD_STAR_CONFIG_DETAIL: return "CMD_STAR_CONFIG_DETAIL";
            case CMD_EVENT_CONFIG: return "CMD_EVENT_CONFIG";
            case CMD_EVENT_LIST: return "CMD_EVENT_LIST";
            case CMD_STAR_CHAT_ROOM_CONFIG: return "CMD_STAR_CHAT_ROOM_CONFIG";
            case CMD_STAR_CHAT_ROOM_LIST: return "CMD_STAR_CHAT_ROOM_LIST";
            case CMD_DOKI_VID_CONFIG: return "CMD_DOKI_VID_CONFIG";
            case CMD_DOKI_VID_CONFIG_LIST: return "CMD_DOKI_VID_CONFIG_LIST";
            case CMD_OPER_DOKI_RECOMMEND: return "CMD_OPER_DOKI_RECOMMEND";
            case CMD_DOKI_RECOMMEND_LIST: return "CMD_DOKI_RECOMMEND_LIST";
            default: return "";
        }
    }
    inline int stoe(const string & s, ConfigCmd & e)
    {
        if(s == "CMD_CREATE_GIFT")  { e=CMD_CREATE_GIFT; return 0;}
        if(s == "CMD_MODIFY_GIFT")  { e=CMD_MODIFY_GIFT; return 0;}
        if(s == "CMD_DELETE_GIFT")  { e=CMD_DELETE_GIFT; return 0;}
        if(s == "CMD_GIFT_DETAIL")  { e=CMD_GIFT_DETAIL; return 0;}
        if(s == "CMD_ALL_GIFT")  { e=CMD_ALL_GIFT; return 0;}
        if(s == "CMD_CREATE_SIGNATURE")  { e=CMD_CREATE_SIGNATURE; return 0;}
        if(s == "CMD_ALL_SIGNATURE")  { e=CMD_ALL_SIGNATURE; return 0;}
        if(s == "CMD_STAR_CONFIG")  { e=CMD_STAR_CONFIG; return 0;}
        if(s == "CMD_STAR_CONFIG_DETAIL")  { e=CMD_STAR_CONFIG_DETAIL; return 0;}
        if(s == "CMD_EVENT_CONFIG")  { e=CMD_EVENT_CONFIG; return 0;}
        if(s == "CMD_EVENT_LIST")  { e=CMD_EVENT_LIST; return 0;}
        if(s == "CMD_STAR_CHAT_ROOM_CONFIG")  { e=CMD_STAR_CHAT_ROOM_CONFIG; return 0;}
        if(s == "CMD_STAR_CHAT_ROOM_LIST")  { e=CMD_STAR_CHAT_ROOM_LIST; return 0;}
        if(s == "CMD_DOKI_VID_CONFIG")  { e=CMD_DOKI_VID_CONFIG; return 0;}
        if(s == "CMD_DOKI_VID_CONFIG_LIST")  { e=CMD_DOKI_VID_CONFIG_LIST; return 0;}
        if(s == "CMD_OPER_DOKI_RECOMMEND")  { e=CMD_OPER_DOKI_RECOMMEND; return 0;}
        if(s == "CMD_DOKI_RECOMMEND_LIST")  { e=CMD_DOKI_RECOMMEND_LIST; return 0;}

        return -1;
    }

    enum giftType
    {
        GIFT_VCOIN = 1,
        GIFT_FVALUE,
        GIFT_PIC,
        GIFT_VOICE,
        GIFT_VIDEO,
        GIFT_PRIVILEGE,
    };
    inline string etos(const giftType & e)
    {
        switch(e)
        {
            case GIFT_VCOIN: return "GIFT_VCOIN";
            case GIFT_FVALUE: return "GIFT_FVALUE";
            case GIFT_PIC: return "GIFT_PIC";
            case GIFT_VOICE: return "GIFT_VOICE";
            case GIFT_VIDEO: return "GIFT_VIDEO";
            case GIFT_PRIVILEGE: return "GIFT_PRIVILEGE";
            default: return "";
        }
    }
    inline int stoe(const string & s, giftType & e)
    {
        if(s == "GIFT_VCOIN")  { e=GIFT_VCOIN; return 0;}
        if(s == "GIFT_FVALUE")  { e=GIFT_FVALUE; return 0;}
        if(s == "GIFT_PIC")  { e=GIFT_PIC; return 0;}
        if(s == "GIFT_VOICE")  { e=GIFT_VOICE; return 0;}
        if(s == "GIFT_VIDEO")  { e=GIFT_VIDEO; return 0;}
        if(s == "GIFT_PRIVILEGE")  { e=GIFT_PRIVILEGE; return 0;}

        return -1;
    }

    enum DOKI_TAB_ID
    {
        TAB_H5 = 1,
        TAB_FANSCLUB = 2,
        TAB_STARTALK = 3,
        TAB_VIDEO = 4,
        TAB_JOB = 5,
    };
    inline string etos(const DOKI_TAB_ID & e)
    {
        switch(e)
        {
            case TAB_H5: return "TAB_H5";
            case TAB_FANSCLUB: return "TAB_FANSCLUB";
            case TAB_STARTALK: return "TAB_STARTALK";
            case TAB_VIDEO: return "TAB_VIDEO";
            case TAB_JOB: return "TAB_JOB";
            default: return "";
        }
    }
    inline int stoe(const string & s, DOKI_TAB_ID & e)
    {
        if(s == "TAB_H5")  { e=TAB_H5; return 0;}
        if(s == "TAB_FANSCLUB")  { e=TAB_FANSCLUB; return 0;}
        if(s == "TAB_STARTALK")  { e=TAB_STARTALK; return 0;}
        if(s == "TAB_VIDEO")  { e=TAB_VIDEO; return 0;}
        if(s == "TAB_JOB")  { e=TAB_JOB; return 0;}

        return -1;
    }

    enum configType
    {
        STAR_NICKNAME = 1,
        STAR_VOICE = 2,
        H5_TAB_NAME = 3,
        H5_TAB_URL = 4,
        DOKI_TAB_ORDER = 5,
        WEIBO_AUTH = 6,
        INSTAGRAM_AUTH = 7,
        FANS_BIG_LEVEL_PIC_1 = 11,
        FANS_BIG_LEVEL_PIC_2 = 12,
        FANS_BIG_LEVEL_PIC_3 = 13,
        FANS_BIG_LEVEL_PIC_4 = 14,
        FANS_SMALL_LEVEL_PIC_1 = 21,
        FANS_SMALL_LEVEL_PIC_2 = 22,
        FANS_SMALL_LEVEL_PIC_3 = 23,
        FANS_SMALL_LEVEL_PIC_4 = 24,
        FANS_NAME_1 = 31,
        FANS_NAME_2 = 32,
        FANS_NAME_3 = 33,
        FANS_NAME_4 = 34,
        DOKI_LETTER = 40,
    };
    inline string etos(const configType & e)
    {
        switch(e)
        {
            case STAR_NICKNAME: return "STAR_NICKNAME";
            case STAR_VOICE: return "STAR_VOICE";
            case H5_TAB_NAME: return "H5_TAB_NAME";
            case H5_TAB_URL: return "H5_TAB_URL";
            case DOKI_TAB_ORDER: return "DOKI_TAB_ORDER";
            case WEIBO_AUTH: return "WEIBO_AUTH";
            case INSTAGRAM_AUTH: return "INSTAGRAM_AUTH";
            case FANS_BIG_LEVEL_PIC_1: return "FANS_BIG_LEVEL_PIC_1";
            case FANS_BIG_LEVEL_PIC_2: return "FANS_BIG_LEVEL_PIC_2";
            case FANS_BIG_LEVEL_PIC_3: return "FANS_BIG_LEVEL_PIC_3";
            case FANS_BIG_LEVEL_PIC_4: return "FANS_BIG_LEVEL_PIC_4";
            case FANS_SMALL_LEVEL_PIC_1: return "FANS_SMALL_LEVEL_PIC_1";
            case FANS_SMALL_LEVEL_PIC_2: return "FANS_SMALL_LEVEL_PIC_2";
            case FANS_SMALL_LEVEL_PIC_3: return "FANS_SMALL_LEVEL_PIC_3";
            case FANS_SMALL_LEVEL_PIC_4: return "FANS_SMALL_LEVEL_PIC_4";
            case FANS_NAME_1: return "FANS_NAME_1";
            case FANS_NAME_2: return "FANS_NAME_2";
            case FANS_NAME_3: return "FANS_NAME_3";
            case FANS_NAME_4: return "FANS_NAME_4";
            case DOKI_LETTER: return "DOKI_LETTER";
            default: return "";
        }
    }
    inline int stoe(const string & s, configType & e)
    {
        if(s == "STAR_NICKNAME")  { e=STAR_NICKNAME; return 0;}
        if(s == "STAR_VOICE")  { e=STAR_VOICE; return 0;}
        if(s == "H5_TAB_NAME")  { e=H5_TAB_NAME; return 0;}
        if(s == "H5_TAB_URL")  { e=H5_TAB_URL; return 0;}
        if(s == "DOKI_TAB_ORDER")  { e=DOKI_TAB_ORDER; return 0;}
        if(s == "WEIBO_AUTH")  { e=WEIBO_AUTH; return 0;}
        if(s == "INSTAGRAM_AUTH")  { e=INSTAGRAM_AUTH; return 0;}
        if(s == "FANS_BIG_LEVEL_PIC_1")  { e=FANS_BIG_LEVEL_PIC_1; return 0;}
        if(s == "FANS_BIG_LEVEL_PIC_2")  { e=FANS_BIG_LEVEL_PIC_2; return 0;}
        if(s == "FANS_BIG_LEVEL_PIC_3")  { e=FANS_BIG_LEVEL_PIC_3; return 0;}
        if(s == "FANS_BIG_LEVEL_PIC_4")  { e=FANS_BIG_LEVEL_PIC_4; return 0;}
        if(s == "FANS_SMALL_LEVEL_PIC_1")  { e=FANS_SMALL_LEVEL_PIC_1; return 0;}
        if(s == "FANS_SMALL_LEVEL_PIC_2")  { e=FANS_SMALL_LEVEL_PIC_2; return 0;}
        if(s == "FANS_SMALL_LEVEL_PIC_3")  { e=FANS_SMALL_LEVEL_PIC_3; return 0;}
        if(s == "FANS_SMALL_LEVEL_PIC_4")  { e=FANS_SMALL_LEVEL_PIC_4; return 0;}
        if(s == "FANS_NAME_1")  { e=FANS_NAME_1; return 0;}
        if(s == "FANS_NAME_2")  { e=FANS_NAME_2; return 0;}
        if(s == "FANS_NAME_3")  { e=FANS_NAME_3; return 0;}
        if(s == "FANS_NAME_4")  { e=FANS_NAME_4; return 0;}
        if(s == "DOKI_LETTER")  { e=DOKI_LETTER; return 0;}

        return -1;
    }

    enum EOperateType
    {
        E_NEW_EVENT = 1,
        E_MOD_EVENT = 2,
        E_DEL_EVENT = 3,
    };
    inline string etos(const EOperateType & e)
    {
        switch(e)
        {
            case E_NEW_EVENT: return "E_NEW_EVENT";
            case E_MOD_EVENT: return "E_MOD_EVENT";
            case E_DEL_EVENT: return "E_DEL_EVENT";
            default: return "";
        }
    }
    inline int stoe(const string & s, EOperateType & e)
    {
        if(s == "E_NEW_EVENT")  { e=E_NEW_EVENT; return 0;}
        if(s == "E_MOD_EVENT")  { e=E_MOD_EVENT; return 0;}
        if(s == "E_DEL_EVENT")  { e=E_DEL_EVENT; return 0;}

        return -1;
    }

    enum EEventType
    {
        E_ET_ALL = 0,
        E_ET_STAR_BIRTH = 1,
        E_ET_STAR_SETTLE = 2,
        E_ET_STAR_WORKS_PUB = 3,
        E_ET_STAR_AWARDS = 4,
        E_ET_STAR_FANS_INCREASE = 5,
        E_ET_STAR_POPULARITY_TOP = 6,
    };
    inline string etos(const EEventType & e)
    {
        switch(e)
        {
            case E_ET_ALL: return "E_ET_ALL";
            case E_ET_STAR_BIRTH: return "E_ET_STAR_BIRTH";
            case E_ET_STAR_SETTLE: return "E_ET_STAR_SETTLE";
            case E_ET_STAR_WORKS_PUB: return "E_ET_STAR_WORKS_PUB";
            case E_ET_STAR_AWARDS: return "E_ET_STAR_AWARDS";
            case E_ET_STAR_FANS_INCREASE: return "E_ET_STAR_FANS_INCREASE";
            case E_ET_STAR_POPULARITY_TOP: return "E_ET_STAR_POPULARITY_TOP";
            default: return "";
        }
    }
    inline int stoe(const string & s, EEventType & e)
    {
        if(s == "E_ET_ALL")  { e=E_ET_ALL; return 0;}
        if(s == "E_ET_STAR_BIRTH")  { e=E_ET_STAR_BIRTH; return 0;}
        if(s == "E_ET_STAR_SETTLE")  { e=E_ET_STAR_SETTLE; return 0;}
        if(s == "E_ET_STAR_WORKS_PUB")  { e=E_ET_STAR_WORKS_PUB; return 0;}
        if(s == "E_ET_STAR_AWARDS")  { e=E_ET_STAR_AWARDS; return 0;}
        if(s == "E_ET_STAR_FANS_INCREASE")  { e=E_ET_STAR_FANS_INCREASE; return 0;}
        if(s == "E_ET_STAR_POPULARITY_TOP")  { e=E_ET_STAR_POPULARITY_TOP; return 0;}

        return -1;
    }

    enum EPosition
    {
        E_DOKI_SQUARE = 1,
        E_STAR_HOMEPAGE = 2,
    };
    inline string etos(const EPosition & e)
    {
        switch(e)
        {
            case E_DOKI_SQUARE: return "E_DOKI_SQUARE";
            case E_STAR_HOMEPAGE: return "E_STAR_HOMEPAGE";
            default: return "";
        }
    }
    inline int stoe(const string & s, EPosition & e)
    {
        if(s == "E_DOKI_SQUARE")  { e=E_DOKI_SQUARE; return 0;}
        if(s == "E_STAR_HOMEPAGE")  { e=E_STAR_HOMEPAGE; return 0;}

        return -1;
    }

    struct stCreateGiftReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stCreateGiftReq";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stCreateGiftReq()
        :type(0),jsonValue("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            jsonValue = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(jsonValue, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(jsonValue, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(jsonValue,"jsonValue");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(jsonValue, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string jsonValue;
    };
    inline bool operator==(const stCreateGiftReq&l, const stCreateGiftReq&r)
    {
        return l.type == r.type && l.jsonValue == r.jsonValue;
    }
    inline bool operator!=(const stCreateGiftReq&l, const stCreateGiftReq&r)
    {
        return !(l == r);
    }

    struct stCreateGiftRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stCreateGiftRsp";
        }
        static string MD5()
        {
            return "813f7cf8041cfa050eef80e3a572e674";
        }
        stCreateGiftRsp()
        :errCode(0),strErrMsg(""),id(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            id = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(id, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(id, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(id,"id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(id, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        taf::Int64 id;
    };
    inline bool operator==(const stCreateGiftRsp&l, const stCreateGiftRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.id == r.id;
    }
    inline bool operator!=(const stCreateGiftRsp&l, const stCreateGiftRsp&r)
    {
        return !(l == r);
    }

    struct stModifyGiftReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stModifyGiftReq";
        }
        static string MD5()
        {
            return "73fdddb66ea0f46eff5942043e8bbabd";
        }
        stModifyGiftReq()
        :id(0),type(0),jsonValue("")
        {
        }
        void resetDefautlt()
        {
            id = 0;
            type = 0;
            jsonValue = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(type, 1);
            _os.write(jsonValue, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, true);
            _is.read(type, 1, false);
            _is.read(jsonValue, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(type,"type");
            _ds.display(jsonValue,"jsonValue");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(jsonValue, false);
            return _os;
        }
    public:
        taf::Int64 id;
        taf::Int32 type;
        std::string jsonValue;
    };
    inline bool operator==(const stModifyGiftReq&l, const stModifyGiftReq&r)
    {
        return l.id == r.id && l.type == r.type && l.jsonValue == r.jsonValue;
    }
    inline bool operator!=(const stModifyGiftReq&l, const stModifyGiftReq&r)
    {
        return !(l == r);
    }

    struct stModifyGiftRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stModifyGiftRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stModifyGiftRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stModifyGiftRsp&l, const stModifyGiftRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stModifyGiftRsp&l, const stModifyGiftRsp&r)
    {
        return !(l == r);
    }

    struct stDeleteGiftReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDeleteGiftReq";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        stDeleteGiftReq()
        :id(0)
        {
        }
        void resetDefautlt()
        {
            id = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, false);
            return _os;
        }
    public:
        taf::Int64 id;
    };
    inline bool operator==(const stDeleteGiftReq&l, const stDeleteGiftReq&r)
    {
        return l.id == r.id;
    }
    inline bool operator!=(const stDeleteGiftReq&l, const stDeleteGiftReq&r)
    {
        return !(l == r);
    }

    struct stDeleteGiftRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDeleteGiftRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stDeleteGiftRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stDeleteGiftRsp&l, const stDeleteGiftRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stDeleteGiftRsp&l, const stDeleteGiftRsp&r)
    {
        return !(l == r);
    }

    struct stGiftInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stGiftInfo";
        }
        static string MD5()
        {
            return "73fdddb66ea0f46eff5942043e8bbabd";
        }
        stGiftInfo()
        :id(0),type(0),jsonValue("")
        {
        }
        void resetDefautlt()
        {
            id = 0;
            type = 0;
            jsonValue = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(type, 1);
            _os.write(jsonValue, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, true);
            _is.read(type, 1, false);
            _is.read(jsonValue, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(type,"type");
            _ds.display(jsonValue,"jsonValue");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(jsonValue, false);
            return _os;
        }
    public:
        taf::Int64 id;
        taf::Int32 type;
        std::string jsonValue;
    };
    inline bool operator==(const stGiftInfo&l, const stGiftInfo&r)
    {
        return l.id == r.id && l.type == r.type && l.jsonValue == r.jsonValue;
    }
    inline bool operator!=(const stGiftInfo&l, const stGiftInfo&r)
    {
        return !(l == r);
    }

    struct stGiftDetailReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stGiftDetailReq";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        stGiftDetailReq()
        :ids("")
        {
        }
        void resetDefautlt()
        {
            ids = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ids, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ids, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ids,"ids");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ids, false);
            return _os;
        }
    public:
        std::string ids;
    };
    inline bool operator==(const stGiftDetailReq&l, const stGiftDetailReq&r)
    {
        return l.ids == r.ids;
    }
    inline bool operator!=(const stGiftDetailReq&l, const stGiftDetailReq&r)
    {
        return !(l == r);
    }

    struct stGiftDetailRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stGiftDetailRsp";
        }
        static string MD5()
        {
            return "b4879f38aed56764107de30222639029";
        }
        stGiftDetailRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(list, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(list, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(list,"list");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(list, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stGiftInfo> list;
    };
    inline bool operator==(const stGiftDetailRsp&l, const stGiftDetailRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.list == r.list;
    }
    inline bool operator!=(const stGiftDetailRsp&l, const stGiftDetailRsp&r)
    {
        return !(l == r);
    }

    struct stAllGiftReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stAllGiftReq";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        stAllGiftReq()
        :page_num(0),page_size(0)
        {
        }
        void resetDefautlt()
        {
            page_num = 0;
            page_size = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(page_num, 0);
            _os.write(page_size, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(page_num, 0, false);
            _is.read(page_size, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, false);
            return _os;
        }
    public:
        taf::Int32 page_num;
        taf::Int32 page_size;
    };
    inline bool operator==(const stAllGiftReq&l, const stAllGiftReq&r)
    {
        return l.page_num == r.page_num && l.page_size == r.page_size;
    }
    inline bool operator!=(const stAllGiftReq&l, const stAllGiftReq&r)
    {
        return !(l == r);
    }

    struct stAllGiftRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stAllGiftRsp";
        }
        static string MD5()
        {
            return "15ed2ea9b7343cf90b1547e44a602417";
        }
        stAllGiftRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(list, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(list, 2, false);
            _is.read(page_num, 3, false);
            _is.read(page_totalNum, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(list,"list");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(list, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stGiftInfo> list;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stAllGiftRsp&l, const stAllGiftRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.list == r.list && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stAllGiftRsp&l, const stAllGiftRsp&r)
    {
        return !(l == r);
    }

    struct stCreateSignatureReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stCreateSignatureReq";
        }
        static string MD5()
        {
            return "19cfb41a66359c894f1dcce10dba2a65";
        }
        stCreateSignatureReq()
        :starId(""),dayNum(0),ids("")
        {
        }
        void resetDefautlt()
        {
            starId = "";
            dayNum = 0;
            ids = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starId, 0);
            _os.write(dayNum, 1);
            _os.write(ids, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starId, 0, true);
            _is.read(dayNum, 1, false);
            _is.read(ids, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starId,"starId");
            _ds.display(dayNum,"dayNum");
            _ds.display(ids,"ids");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(dayNum, true);
            _ds.displaySimple(ids, false);
            return _os;
        }
    public:
        std::string starId;
        taf::Int32 dayNum;
        std::string ids;
    };
    inline bool operator==(const stCreateSignatureReq&l, const stCreateSignatureReq&r)
    {
        return l.starId == r.starId && l.dayNum == r.dayNum && l.ids == r.ids;
    }
    inline bool operator!=(const stCreateSignatureReq&l, const stCreateSignatureReq&r)
    {
        return !(l == r);
    }

    struct stCreateSignatureRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stCreateSignatureRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stCreateSignatureRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stCreateSignatureRsp&l, const stCreateSignatureRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stCreateSignatureRsp&l, const stCreateSignatureRsp&r)
    {
        return !(l == r);
    }

    struct stAllSignatureReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stAllSignatureReq";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        stAllSignatureReq()
        :starId("")
        {
        }
        void resetDefautlt()
        {
            starId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starId,"starId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starId, false);
            return _os;
        }
    public:
        std::string starId;
    };
    inline bool operator==(const stAllSignatureReq&l, const stAllSignatureReq&r)
    {
        return l.starId == r.starId;
    }
    inline bool operator!=(const stAllSignatureReq&l, const stAllSignatureReq&r)
    {
        return !(l == r);
    }

    struct stAllSignatureRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stAllSignatureRsp";
        }
        static string MD5()
        {
            return "80eb733b38ffd0afb16b867217876c58";
        }
        stAllSignatureRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(day2GiftIds, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(day2GiftIds, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(day2GiftIds,"day2GiftIds");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(day2GiftIds, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        map<std::string, std::string> day2GiftIds;
    };
    inline bool operator==(const stAllSignatureRsp&l, const stAllSignatureRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.day2GiftIds == r.day2GiftIds;
    }
    inline bool operator!=(const stAllSignatureRsp&l, const stAllSignatureRsp&r)
    {
        return !(l == r);
    }

    struct stStarCongfigReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stStarCongfigReq";
        }
        static string MD5()
        {
            return "e69ad5e8b10c4e81bc2b59a1a5fb0a94";
        }
        stStarCongfigReq()
        :starId(""),type(0),value(""),opType(0)
        {
        }
        void resetDefautlt()
        {
            starId = "";
            type = 0;
            value = "";
            opType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starId, 0);
            _os.write(type, 1);
            _os.write(value, 2);
            _os.write(opType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starId, 0, true);
            _is.read(type, 1, false);
            _is.read(value, 2, false);
            _is.read(opType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starId,"starId");
            _ds.display(type,"type");
            _ds.display(value,"value");
            _ds.display(opType,"opType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(value, true);
            _ds.displaySimple(opType, false);
            return _os;
        }
    public:
        std::string starId;
        taf::Int32 type;
        std::string value;
        taf::Int32 opType;
    };
    inline bool operator==(const stStarCongfigReq&l, const stStarCongfigReq&r)
    {
        return l.starId == r.starId && l.type == r.type && l.value == r.value && l.opType == r.opType;
    }
    inline bool operator!=(const stStarCongfigReq&l, const stStarCongfigReq&r)
    {
        return !(l == r);
    }

    struct stStarCongfigRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stStarCongfigRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stStarCongfigRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stStarCongfigRsp&l, const stStarCongfigRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stStarCongfigRsp&l, const stStarCongfigRsp&r)
    {
        return !(l == r);
    }

    struct stStarCongfigDetailReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stStarCongfigDetailReq";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        stStarCongfigDetailReq()
        :starId("")
        {
        }
        void resetDefautlt()
        {
            starId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starId,"starId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starId, false);
            return _os;
        }
    public:
        std::string starId;
    };
    inline bool operator==(const stStarCongfigDetailReq&l, const stStarCongfigDetailReq&r)
    {
        return l.starId == r.starId;
    }
    inline bool operator!=(const stStarCongfigDetailReq&l, const stStarCongfigDetailReq&r)
    {
        return !(l == r);
    }

    struct stStarCongfigDetailRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stStarCongfigDetailRsp";
        }
        static string MD5()
        {
            return "80eb733b38ffd0afb16b867217876c58";
        }
        stStarCongfigDetailRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(configMap, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(configMap, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(configMap,"configMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(configMap, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        map<std::string, std::string> configMap;
    };
    inline bool operator==(const stStarCongfigDetailRsp&l, const stStarCongfigDetailRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.configMap == r.configMap;
    }
    inline bool operator!=(const stStarCongfigDetailRsp&l, const stStarCongfigDetailRsp&r)
    {
        return !(l == r);
    }

    struct stEventConfigReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stEventConfigReq";
        }
        static string MD5()
        {
            return "cd727f14c99dce97ade58fa9fbb660e5";
        }
        stEventConfigReq()
        :optype(0),id(""),type(0),doki_type(0),doki_id(0),json_value("")
        {
        }
        void resetDefautlt()
        {
            optype = 0;
            id = "";
            type = 0;
            doki_type = 0;
            doki_id = 0;
            json_value = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(optype, 0);
            _os.write(id, 1);
            _os.write(type, 2);
            _os.write(doki_type, 3);
            _os.write(doki_id, 4);
            _os.write(json_value, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(optype, 0, true);
            _is.read(id, 1, false);
            _is.read(type, 2, false);
            _is.read(doki_type, 3, false);
            _is.read(doki_id, 4, false);
            _is.read(json_value, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(optype,"optype");
            _ds.display(id,"id");
            _ds.display(type,"type");
            _ds.display(doki_type,"doki_type");
            _ds.display(doki_id,"doki_id");
            _ds.display(json_value,"json_value");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(optype, true);
            _ds.displaySimple(id, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(doki_type, true);
            _ds.displaySimple(doki_id, true);
            _ds.displaySimple(json_value, false);
            return _os;
        }
    public:
        taf::Int32 optype;
        std::string id;
        taf::Int32 type;
        taf::Int32 doki_type;
        taf::Int64 doki_id;
        std::string json_value;
    };
    inline bool operator==(const stEventConfigReq&l, const stEventConfigReq&r)
    {
        return l.optype == r.optype && l.id == r.id && l.type == r.type && l.doki_type == r.doki_type && l.doki_id == r.doki_id && l.json_value == r.json_value;
    }
    inline bool operator!=(const stEventConfigReq&l, const stEventConfigReq&r)
    {
        return !(l == r);
    }

    struct stEventConfigRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stEventConfigRsp";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        stEventConfigRsp()
        :errCode(0),strErrMsg(""),id("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            id = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(id, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(id, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(id,"id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(id, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        std::string id;
    };
    inline bool operator==(const stEventConfigRsp&l, const stEventConfigRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.id == r.id;
    }
    inline bool operator!=(const stEventConfigRsp&l, const stEventConfigRsp&r)
    {
        return !(l == r);
    }

    struct stEventDetail : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stEventDetail";
        }
        static string MD5()
        {
            return "19cfb41a66359c894f1dcce10dba2a65";
        }
        stEventDetail()
        :id(""),type(0),json_value("")
        {
        }
        void resetDefautlt()
        {
            id = "";
            type = 0;
            json_value = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(type, 1);
            _os.write(json_value, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, false);
            _is.read(type, 1, false);
            _is.read(json_value, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(type,"type");
            _ds.display(json_value,"json_value");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(json_value, false);
            return _os;
        }
    public:
        std::string id;
        taf::Int32 type;
        std::string json_value;
    };
    inline bool operator==(const stEventDetail&l, const stEventDetail&r)
    {
        return l.id == r.id && l.type == r.type && l.json_value == r.json_value;
    }
    inline bool operator!=(const stEventDetail&l, const stEventDetail&r)
    {
        return !(l == r);
    }

    struct stEventListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stEventListReq";
        }
        static string MD5()
        {
            return "5a0368bc46f7b8e4342b7adfcfa7234d";
        }
        stEventListReq()
        :type_ids(""),doki_type(0),doki_id(0),page_num(0),page_size(0)
        {
        }
        void resetDefautlt()
        {
            type_ids = "";
            doki_type = 0;
            doki_id = 0;
            page_num = 0;
            page_size = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type_ids, 0);
            _os.write(doki_type, 1);
            _os.write(doki_id, 2);
            _os.write(page_num, 3);
            _os.write(page_size, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type_ids, 0, false);
            _is.read(doki_type, 1, false);
            _is.read(doki_id, 2, false);
            _is.read(page_num, 3, false);
            _is.read(page_size, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type_ids,"type_ids");
            _ds.display(doki_type,"doki_type");
            _ds.display(doki_id,"doki_id");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type_ids, true);
            _ds.displaySimple(doki_type, true);
            _ds.displaySimple(doki_id, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, false);
            return _os;
        }
    public:
        std::string type_ids;
        taf::Int32 doki_type;
        taf::Int64 doki_id;
        taf::Int32 page_num;
        taf::Int32 page_size;
    };
    inline bool operator==(const stEventListReq&l, const stEventListReq&r)
    {
        return l.type_ids == r.type_ids && l.doki_type == r.doki_type && l.doki_id == r.doki_id && l.page_num == r.page_num && l.page_size == r.page_size;
    }
    inline bool operator!=(const stEventListReq&l, const stEventListReq&r)
    {
        return !(l == r);
    }

    struct stEventListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stEventListRsp";
        }
        static string MD5()
        {
            return "50a8c8d6283fbf504e971a9b0f775d47";
        }
        stEventListRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(list, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(list, 2, false);
            _is.read(page_num, 3, false);
            _is.read(page_totalNum, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(list,"list");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(list, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stEventDetail> list;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stEventListRsp&l, const stEventListRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.list == r.list && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stEventListRsp&l, const stEventListRsp&r)
    {
        return !(l == r);
    }

    struct stOpStarChatRoomReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOpStarChatRoomReq";
        }
        static string MD5()
        {
            return "fcbebef4f26b85424d14d8a87ad46ffa";
        }
        stOpStarChatRoomReq()
        :op_type(0),id(0),json("")
        {
        }
        void resetDefautlt()
        {
            op_type = 0;
            id = 0;
            json = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(op_type, 0);
            _os.write(id, 1);
            _os.write(json, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(op_type, 0, false);
            _is.read(id, 1, false);
            _is.read(json, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(op_type,"op_type");
            _ds.display(id,"id");
            _ds.display(json,"json");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(op_type, true);
            _ds.displaySimple(id, true);
            _ds.displaySimple(json, false);
            return _os;
        }
    public:
        taf::Int32 op_type;
        taf::Int64 id;
        std::string json;
    };
    inline bool operator==(const stOpStarChatRoomReq&l, const stOpStarChatRoomReq&r)
    {
        return l.op_type == r.op_type && l.id == r.id && l.json == r.json;
    }
    inline bool operator!=(const stOpStarChatRoomReq&l, const stOpStarChatRoomReq&r)
    {
        return !(l == r);
    }

    struct stOpStarChatRoomRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOpStarChatRoomRsp";
        }
        static string MD5()
        {
            return "813f7cf8041cfa050eef80e3a572e674";
        }
        stOpStarChatRoomRsp()
        :errCode(0),strErrMsg(""),id(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            id = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(id, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(id, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(id,"id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(id, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        taf::Int64 id;
    };
    inline bool operator==(const stOpStarChatRoomRsp&l, const stOpStarChatRoomRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.id == r.id;
    }
    inline bool operator!=(const stOpStarChatRoomRsp&l, const stOpStarChatRoomRsp&r)
    {
        return !(l == r);
    }

    struct stStarChatRoomListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stStarChatRoomListReq";
        }
        static string MD5()
        {
            return "9bda4ac16227127f47ea815aed6f8d9e";
        }
        stStarChatRoomListReq()
        :json(""),page_num(0),page_size(0)
        {
        }
        void resetDefautlt()
        {
            json = "";
            page_num = 0;
            page_size = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(json, 0);
            _os.write(page_num, 1);
            _os.write(page_size, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(json, 0, false);
            _is.read(page_num, 1, false);
            _is.read(page_size, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(json,"json");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(json, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, false);
            return _os;
        }
    public:
        std::string json;
        taf::Int32 page_num;
        taf::Int32 page_size;
    };
    inline bool operator==(const stStarChatRoomListReq&l, const stStarChatRoomListReq&r)
    {
        return l.json == r.json && l.page_num == r.page_num && l.page_size == r.page_size;
    }
    inline bool operator!=(const stStarChatRoomListReq&l, const stStarChatRoomListReq&r)
    {
        return !(l == r);
    }

    struct stStarChatRoomListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stStarChatRoomListRsp";
        }
        static string MD5()
        {
            return "53739f8e0be2708ad1a11b96e032442c";
        }
        stStarChatRoomListRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(list, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(list, 2, false);
            _is.read(page_num, 3, false);
            _is.read(page_totalNum, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(list,"list");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(list, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<std::string> list;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stStarChatRoomListRsp&l, const stStarChatRoomListRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.list == r.list && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stStarChatRoomListRsp&l, const stStarChatRoomListRsp&r)
    {
        return !(l == r);
    }

    struct stOpDokiVidConfigReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOpDokiVidConfigReq";
        }
        static string MD5()
        {
            return "19cfb41a66359c894f1dcce10dba2a65";
        }
        stOpDokiVidConfigReq()
        :dokiId(""),op_type(0),json("")
        {
        }
        void resetDefautlt()
        {
            dokiId = "";
            op_type = 0;
            json = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dokiId, 0);
            _os.write(op_type, 1);
            _os.write(json, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dokiId, 0, true);
            _is.read(op_type, 1, false);
            _is.read(json, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dokiId,"dokiId");
            _ds.display(op_type,"op_type");
            _ds.display(json,"json");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dokiId, true);
            _ds.displaySimple(op_type, true);
            _ds.displaySimple(json, false);
            return _os;
        }
    public:
        std::string dokiId;
        taf::Int32 op_type;
        std::string json;
    };
    inline bool operator==(const stOpDokiVidConfigReq&l, const stOpDokiVidConfigReq&r)
    {
        return l.dokiId == r.dokiId && l.op_type == r.op_type && l.json == r.json;
    }
    inline bool operator!=(const stOpDokiVidConfigReq&l, const stOpDokiVidConfigReq&r)
    {
        return !(l == r);
    }

    struct stOpDokiVidConfigRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOpDokiVidConfigRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stOpDokiVidConfigRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stOpDokiVidConfigRsp&l, const stOpDokiVidConfigRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stOpDokiVidConfigRsp&l, const stOpDokiVidConfigRsp&r)
    {
        return !(l == r);
    }

    struct stDokiVidConfigListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDokiVidConfigListReq";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        stDokiVidConfigListReq()
        :dokiId("")
        {
        }
        void resetDefautlt()
        {
            dokiId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dokiId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dokiId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dokiId,"dokiId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dokiId, false);
            return _os;
        }
    public:
        std::string dokiId;
    };
    inline bool operator==(const stDokiVidConfigListReq&l, const stDokiVidConfigListReq&r)
    {
        return l.dokiId == r.dokiId;
    }
    inline bool operator!=(const stDokiVidConfigListReq&l, const stDokiVidConfigListReq&r)
    {
        return !(l == r);
    }

    struct stDokiVidConfigListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDokiVidConfigListRsp";
        }
        static string MD5()
        {
            return "d8b3298980d14765e6923a139051c26a";
        }
        stDokiVidConfigListRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(list, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(list, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(list,"list");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(list, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<std::string> list;
    };
    inline bool operator==(const stDokiVidConfigListRsp&l, const stDokiVidConfigListRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.list == r.list;
    }
    inline bool operator!=(const stDokiVidConfigListRsp&l, const stDokiVidConfigListRsp&r)
    {
        return !(l == r);
    }

    struct stOperDokiRecommendReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperDokiRecommendReq";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stOperDokiRecommendReq()
        :type(0),json("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            json = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(json, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(json, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(json,"json");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(json, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string json;
    };
    inline bool operator==(const stOperDokiRecommendReq&l, const stOperDokiRecommendReq&r)
    {
        return l.type == r.type && l.json == r.json;
    }
    inline bool operator!=(const stOperDokiRecommendReq&l, const stOperDokiRecommendReq&r)
    {
        return !(l == r);
    }

    struct stOperDokiRecommendRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperDokiRecommendRsp";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        stOperDokiRecommendRsp()
        :errCode(0),strErrMsg(""),tips("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            tips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(tips, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(tips, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(tips,"tips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(tips, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        std::string tips;
    };
    inline bool operator==(const stOperDokiRecommendRsp&l, const stOperDokiRecommendRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.tips == r.tips;
    }
    inline bool operator!=(const stOperDokiRecommendRsp&l, const stOperDokiRecommendRsp&r)
    {
        return !(l == r);
    }

    struct stDokiRecommendListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDokiRecommendListReq";
        }
        static string MD5()
        {
            return "9bda4ac16227127f47ea815aed6f8d9e";
        }
        stDokiRecommendListReq()
        :json(""),page_num(0),page_size(0)
        {
        }
        void resetDefautlt()
        {
            json = "";
            page_num = 0;
            page_size = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(json, 0);
            _os.write(page_num, 1);
            _os.write(page_size, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(json, 0, false);
            _is.read(page_num, 1, false);
            _is.read(page_size, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(json,"json");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(json, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, false);
            return _os;
        }
    public:
        std::string json;
        taf::Int32 page_num;
        taf::Int32 page_size;
    };
    inline bool operator==(const stDokiRecommendListReq&l, const stDokiRecommendListReq&r)
    {
        return l.json == r.json && l.page_num == r.page_num && l.page_size == r.page_size;
    }
    inline bool operator!=(const stDokiRecommendListReq&l, const stDokiRecommendListReq&r)
    {
        return !(l == r);
    }

    struct stDokiRecommendListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDokiRecommendListRsp";
        }
        static string MD5()
        {
            return "53739f8e0be2708ad1a11b96e032442c";
        }
        stDokiRecommendListRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(list, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(list, 2, false);
            _is.read(page_num, 3, false);
            _is.read(page_totalNum, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(list,"list");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(list, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<std::string> list;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stDokiRecommendListRsp&l, const stDokiRecommendListRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.list == r.list && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stDokiRecommendListRsp&l, const stDokiRecommendListRsp&r)
    {
        return !(l == r);
    }


}

#define CStarAdminPro_stCreateGiftReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.jsonValue,b.jsonValue);

#define CStarAdminPro_stCreateGiftRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.id,b.id);

#define CStarAdminPro_stModifyGiftReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.type,b.type);jce_copy_struct(a.jsonValue,b.jsonValue);

#define CStarAdminPro_stModifyGiftRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stDeleteGiftReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);

#define CStarAdminPro_stDeleteGiftRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stGiftInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.type,b.type);jce_copy_struct(a.jsonValue,b.jsonValue);

#define CStarAdminPro_stGiftDetailReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ids,b.ids);

#define CStarAdminPro_stGiftDetailRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.list,b.list);

#define CStarAdminPro_stAllGiftReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);

#define CStarAdminPro_stAllGiftRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.list,b.list);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);

#define CStarAdminPro_stCreateSignatureReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.dayNum,b.dayNum);jce_copy_struct(a.ids,b.ids);

#define CStarAdminPro_stCreateSignatureRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stAllSignatureReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starId,b.starId);

#define CStarAdminPro_stAllSignatureRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.day2GiftIds,b.day2GiftIds);

#define CStarAdminPro_stStarCongfigReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.type,b.type);jce_copy_struct(a.value,b.value);jce_copy_struct(a.opType,b.opType);

#define CStarAdminPro_stStarCongfigRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stStarCongfigDetailReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starId,b.starId);

#define CStarAdminPro_stStarCongfigDetailRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.configMap,b.configMap);

#define CStarAdminPro_stEventConfigReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.optype,b.optype);jce_copy_struct(a.id,b.id);jce_copy_struct(a.type,b.type);jce_copy_struct(a.doki_type,b.doki_type);jce_copy_struct(a.doki_id,b.doki_id);jce_copy_struct(a.json_value,b.json_value);

#define CStarAdminPro_stEventConfigRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.id,b.id);

#define CStarAdminPro_stEventDetail_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.type,b.type);jce_copy_struct(a.json_value,b.json_value);

#define CStarAdminPro_stEventListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type_ids,b.type_ids);jce_copy_struct(a.doki_type,b.doki_type);jce_copy_struct(a.doki_id,b.doki_id);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);

#define CStarAdminPro_stEventListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.list,b.list);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);

#define CStarAdminPro_stOpStarChatRoomReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.op_type,b.op_type);jce_copy_struct(a.id,b.id);jce_copy_struct(a.json,b.json);

#define CStarAdminPro_stOpStarChatRoomRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.id,b.id);

#define CStarAdminPro_stStarChatRoomListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.json,b.json);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);

#define CStarAdminPro_stStarChatRoomListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.list,b.list);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);

#define CStarAdminPro_stOpDokiVidConfigReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dokiId,b.dokiId);jce_copy_struct(a.op_type,b.op_type);jce_copy_struct(a.json,b.json);

#define CStarAdminPro_stOpDokiVidConfigRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stDokiVidConfigListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dokiId,b.dokiId);

#define CStarAdminPro_stDokiVidConfigListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.list,b.list);

#define CStarAdminPro_stOperDokiRecommendReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.json,b.json);

#define CStarAdminPro_stOperDokiRecommendRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.tips,b.tips);

#define CStarAdminPro_stDokiRecommendListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.json,b.json);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);

#define CStarAdminPro_stDokiRecommendListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.list,b.list);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);



#endif
