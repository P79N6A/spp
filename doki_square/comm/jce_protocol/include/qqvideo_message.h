// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_message.jce'
// **********************************************************************

#ifndef __QQVIDEO_MESSAGE_H_
#define __QQVIDEO_MESSAGE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"
#include "qqvideo_user_info.h"
#include "qqvideo_capture.h"


namespace jce
{
    struct FeedUploadVideoInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedUploadVideoInfo";
        }
        static string MD5()
        {
            return "095448ef2251676e72ff615e097b7337";
        }
        FeedUploadVideoInfo()
        :vid(""),imgUrl(""),title(""),videoType(0),musicVid(""),musicImgUrl(""),musicTitle("")
        {
        }
        void resetDefautlt()
        {
            vid = "";
            imgUrl = "";
            title = "";
            videoType = 0;
            musicVid = "";
            musicImgUrl = "";
            musicTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(imgUrl, 1);
            _os.write(title, 2);
            _os.write(videoType, 3);
            _os.write(musicVid, 4);
            _os.write(musicImgUrl, 5);
            _os.write(musicTitle, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, true);
            _is.read(imgUrl, 1, false);
            _is.read(title, 2, false);
            _is.read(videoType, 3, false);
            _is.read(musicVid, 4, false);
            _is.read(musicImgUrl, 5, false);
            _is.read(musicTitle, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(imgUrl,"imgUrl");
            _ds.display(title,"title");
            _ds.display(videoType,"videoType");
            _ds.display(musicVid,"musicVid");
            _ds.display(musicImgUrl,"musicImgUrl");
            _ds.display(musicTitle,"musicTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(imgUrl, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(videoType, true);
            _ds.displaySimple(musicVid, true);
            _ds.displaySimple(musicImgUrl, true);
            _ds.displaySimple(musicTitle, false);
            return _os;
        }
    public:
        std::string vid;
        std::string imgUrl;
        std::string title;
        taf::Int32 videoType;
        std::string musicVid;
        std::string musicImgUrl;
        std::string musicTitle;
    };
    inline bool operator==(const FeedUploadVideoInfo&l, const FeedUploadVideoInfo&r)
    {
        return l.vid == r.vid && l.imgUrl == r.imgUrl && l.title == r.title && l.videoType == r.videoType && l.musicVid == r.musicVid && l.musicImgUrl == r.musicImgUrl && l.musicTitle == r.musicTitle;
    }
    inline bool operator!=(const FeedUploadVideoInfo&l, const FeedUploadVideoInfo&r)
    {
        return !(l == r);
    }

    struct PubMsgRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PubMsgRequest";
        }
        static string MD5()
        {
            return "7df00287518bffdc122bd7e6fdad136a";
        }
        PubMsgRequest()
        :dataKey(""),content(""),title(""),seq(""),shareMask(0),cfrom(0),dmContentKey(""),dwTimePoint(0),wxScore(""),userCertifiedFlag(0),currentVid("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            content = "";
            title = "";
            seq = "";
            shareMask = 0;
            cfrom = 0;
            dmContentKey = "";
            dwTimePoint = 0;
            wxScore = "";
            userCertifiedFlag = 0;
            currentVid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(content, 1);
            _os.write(imageList, 2);
            _os.write(title, 3);
            _os.write(seq, 4);
            _os.write(videoList, 5);
            _os.write(shareMask, 6);
            _os.write(shareInfo, 7);
            _os.write(shareToken, 8);
            _os.write(cfrom, 9);
            _os.write(voiceList, 10);
            _os.write(dmContentKey, 11);
            _os.write(userStarInfo, 12);
            _os.write(dwTimePoint, 13);
            _os.write(wxScore, 14);
            _os.write(topicList, 15);
            _os.write(actorInfoList, 16);
            _os.write(videoInfo, 17);
            _os.write(userCertifiedFlag, 18);
            _os.write(currentVid, 19);
            _os.write(gpsAddressInfo, 20);
            _os.write(richTextLabelInfo, 21);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(content, 1, false);
            _is.read(imageList, 2, false);
            _is.read(title, 3, false);
            _is.read(seq, 4, false);
            _is.read(videoList, 5, false);
            _is.read(shareMask, 6, false);
            _is.read(shareInfo, 7, false);
            _is.read(shareToken, 8, false);
            _is.read(cfrom, 9, false);
            _is.read(voiceList, 10, false);
            _is.read(dmContentKey, 11, false);
            _is.read(userStarInfo, 12, false);
            _is.read(dwTimePoint, 13, false);
            _is.read(wxScore, 14, false);
            _is.read(topicList, 15, false);
            _is.read(actorInfoList, 16, false);
            _is.read(videoInfo, 17, false);
            _is.read(userCertifiedFlag, 18, false);
            _is.read(currentVid, 19, false);
            _is.read(gpsAddressInfo, 20, false);
            _is.read(richTextLabelInfo, 21, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(content,"content");
            _ds.display(imageList,"imageList");
            _ds.display(title,"title");
            _ds.display(seq,"seq");
            _ds.display(videoList,"videoList");
            _ds.display(shareMask,"shareMask");
            _ds.display(shareInfo,"shareInfo");
            _ds.display(shareToken,"shareToken");
            _ds.display(cfrom,"cfrom");
            _ds.display(voiceList,"voiceList");
            _ds.display(dmContentKey,"dmContentKey");
            _ds.display(userStarInfo,"userStarInfo");
            _ds.display(dwTimePoint,"dwTimePoint");
            _ds.display(wxScore,"wxScore");
            _ds.display(topicList,"topicList");
            _ds.display(actorInfoList,"actorInfoList");
            _ds.display(videoInfo,"videoInfo");
            _ds.display(userCertifiedFlag,"userCertifiedFlag");
            _ds.display(currentVid,"currentVid");
            _ds.display(gpsAddressInfo,"gpsAddressInfo");
            _ds.display(richTextLabelInfo,"richTextLabelInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(imageList, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(videoList, true);
            _ds.displaySimple(shareMask, true);
            _ds.displaySimple(shareInfo, true);
            _ds.displaySimple(shareToken, true);
            _ds.displaySimple(cfrom, true);
            _ds.displaySimple(voiceList, true);
            _ds.displaySimple(dmContentKey, true);
            _ds.displaySimple(userStarInfo, true);
            _ds.displaySimple(dwTimePoint, true);
            _ds.displaySimple(wxScore, true);
            _ds.displaySimple(topicList, true);
            _ds.displaySimple(actorInfoList, true);
            _ds.displaySimple(videoInfo, true);
            _ds.displaySimple(userCertifiedFlag, true);
            _ds.displaySimple(currentVid, true);
            _ds.displaySimple(gpsAddressInfo, true);
            _ds.displaySimple(richTextLabelInfo, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string content;
        vector<jce::CircleUploadImageUrl> imageList;
        std::string title;
        std::string seq;
        vector<jce::CircleShortVideoUrl> videoList;
        taf::Int32 shareMask;
        jce::ShareItem shareInfo;
        jce::ShareToken shareToken;
        taf::Int32 cfrom;
        vector<jce::ApolloVoiceData> voiceList;
        std::string dmContentKey;
        jce::STStarInfo userStarInfo;
        taf::Int32 dwTimePoint;
        std::string wxScore;
        vector<jce::TopicInfoLite> topicList;
        vector<jce::ActorInfo> actorInfoList;
        jce::FeedUploadVideoInfo videoInfo;
        taf::Int32 userCertifiedFlag;
        std::string currentVid;
        jce::GpsAddressInfo gpsAddressInfo;
        vector<jce::RichTextLabelInfo> richTextLabelInfo;
    };
    inline bool operator==(const PubMsgRequest&l, const PubMsgRequest&r)
    {
        return l.dataKey == r.dataKey && l.content == r.content && l.imageList == r.imageList && l.title == r.title && l.seq == r.seq && l.videoList == r.videoList && l.shareMask == r.shareMask && l.shareInfo == r.shareInfo && l.shareToken == r.shareToken && l.cfrom == r.cfrom && l.voiceList == r.voiceList && l.dmContentKey == r.dmContentKey && l.userStarInfo == r.userStarInfo && l.dwTimePoint == r.dwTimePoint && l.wxScore == r.wxScore && l.topicList == r.topicList && l.actorInfoList == r.actorInfoList && l.videoInfo == r.videoInfo && l.userCertifiedFlag == r.userCertifiedFlag && l.currentVid == r.currentVid && l.gpsAddressInfo == r.gpsAddressInfo && l.richTextLabelInfo == r.richTextLabelInfo;
    }
    inline bool operator!=(const PubMsgRequest&l, const PubMsgRequest&r)
    {
        return !(l == r);
    }

    struct PubMsgResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PubMsgResponse";
        }
        static string MD5()
        {
            return "05d58b52281af2da8f9fda99259d51ef";
        }
        PubMsgResponse()
        :errCode(0),shareErrCode(0),shareCircleUrl(""),errMsg(""),sucMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            shareErrCode = 0;
            shareCircleUrl = "";
            errMsg = "";
            sucMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(feed, 1);
            _os.write(shareErrCode, 2);
            _os.write(shareCircleUrl, 3);
            _os.write(errMsg, 4);
            _os.write(sucMsg, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(feed, 1, false);
            _is.read(shareErrCode, 2, false);
            _is.read(shareCircleUrl, 3, false);
            _is.read(errMsg, 4, false);
            _is.read(sucMsg, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(feed,"feed");
            _ds.display(shareErrCode,"shareErrCode");
            _ds.display(shareCircleUrl,"shareCircleUrl");
            _ds.display(errMsg,"errMsg");
            _ds.display(sucMsg,"sucMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(feed, true);
            _ds.displaySimple(shareErrCode, true);
            _ds.displaySimple(shareCircleUrl, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(sucMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::CirclePrimaryFeed feed;
        taf::Int32 shareErrCode;
        std::string shareCircleUrl;
        std::string errMsg;
        std::string sucMsg;
    };
    inline bool operator==(const PubMsgResponse&l, const PubMsgResponse&r)
    {
        return l.errCode == r.errCode && l.feed == r.feed && l.shareErrCode == r.shareErrCode && l.shareCircleUrl == r.shareCircleUrl && l.errMsg == r.errMsg && l.sucMsg == r.sucMsg;
    }
    inline bool operator!=(const PubMsgResponse&l, const PubMsgResponse&r)
    {
        return !(l == r);
    }

    struct PostCommentMsgRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PostCommentMsgRequest";
        }
        static string MD5()
        {
            return "7676a2c941fa189c32a7cdf381073f9c";
        }
        PostCommentMsgRequest()
        :parentId(""),content(""),seq(""),dataKey(""),cfrom(0)
        {
        }
        void resetDefautlt()
        {
            parentId = "";
            content = "";
            seq = "";
            dataKey = "";
            cfrom = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(parentId, 0);
            _os.write(content, 1);
            _os.write(seq, 2);
            _os.write(dataKey, 3);
            _os.write(cfrom, 4);
            _os.write(imageList, 5);
            _os.write(userStarInfo, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(parentId, 0, true);
            _is.read(content, 1, true);
            _is.read(seq, 2, false);
            _is.read(dataKey, 3, false);
            _is.read(cfrom, 4, false);
            _is.read(imageList, 5, false);
            _is.read(userStarInfo, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(parentId,"parentId");
            _ds.display(content,"content");
            _ds.display(seq,"seq");
            _ds.display(dataKey,"dataKey");
            _ds.display(cfrom,"cfrom");
            _ds.display(imageList,"imageList");
            _ds.display(userStarInfo,"userStarInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(parentId, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(cfrom, true);
            _ds.displaySimple(imageList, true);
            _ds.displaySimple(userStarInfo, false);
            return _os;
        }
    public:
        std::string parentId;
        std::string content;
        std::string seq;
        std::string dataKey;
        taf::Int32 cfrom;
        vector<jce::CircleUploadImageUrl> imageList;
        jce::STStarInfo userStarInfo;
    };
    inline bool operator==(const PostCommentMsgRequest&l, const PostCommentMsgRequest&r)
    {
        return l.parentId == r.parentId && l.content == r.content && l.seq == r.seq && l.dataKey == r.dataKey && l.cfrom == r.cfrom && l.imageList == r.imageList && l.userStarInfo == r.userStarInfo;
    }
    inline bool operator!=(const PostCommentMsgRequest&l, const PostCommentMsgRequest&r)
    {
        return !(l == r);
    }

    struct PostCommentMsgResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PostCommentMsgResponse";
        }
        static string MD5()
        {
            return "193d97f2b3ae058b1b082d7c7dce4c7a";
        }
        PostCommentMsgResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(comment, 1);
            _os.write(errMsg, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(comment, 1, false);
            _is.read(errMsg, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(comment,"comment");
            _ds.display(errMsg,"errMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(comment, true);
            _ds.displaySimple(errMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::CircleCommentFeed comment;
        std::string errMsg;
    };
    inline bool operator==(const PostCommentMsgResponse&l, const PostCommentMsgResponse&r)
    {
        return l.errCode == r.errCode && l.comment == r.comment && l.errMsg == r.errMsg;
    }
    inline bool operator!=(const PostCommentMsgResponse&l, const PostCommentMsgResponse&r)
    {
        return !(l == r);
    }

    struct MsgLikeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MsgLikeRequest";
        }
        static string MD5()
        {
            return "3639bf17177e86fb891a68123e7b6cf4";
        }
        MsgLikeRequest()
        :feedId(""),likeFlag(0),seq(""),dataKey("")
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            likeFlag = 0;
            seq = "";
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(likeFlag, 1);
            _os.write(seq, 2);
            _os.write(dataKey, 3);
            _os.write(userStarInfo, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(likeFlag, 1, true);
            _is.read(seq, 2, false);
            _is.read(dataKey, 3, false);
            _is.read(userStarInfo, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(likeFlag,"likeFlag");
            _ds.display(seq,"seq");
            _ds.display(dataKey,"dataKey");
            _ds.display(userStarInfo,"userStarInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(likeFlag, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(userStarInfo, false);
            return _os;
        }
    public:
        std::string feedId;
        taf::Char likeFlag;
        std::string seq;
        std::string dataKey;
        jce::STStarInfo userStarInfo;
    };
    inline bool operator==(const MsgLikeRequest&l, const MsgLikeRequest&r)
    {
        return l.feedId == r.feedId && l.likeFlag == r.likeFlag && l.seq == r.seq && l.dataKey == r.dataKey && l.userStarInfo == r.userStarInfo;
    }
    inline bool operator!=(const MsgLikeRequest&l, const MsgLikeRequest&r)
    {
        return !(l == r);
    }

    struct MsgLikeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MsgLikeResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        MsgLikeResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const MsgLikeResponse&l, const MsgLikeResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const MsgLikeResponse&l, const MsgLikeResponse&r)
    {
        return !(l == r);
    }

    struct MsgReportRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MsgReportRequest";
        }
        static string MD5()
        {
            return "49ca3f8b2fd6eb4572769f1adc06df3d";
        }
        MsgReportRequest()
        :feedId(""),reportType(0),description(""),seq(""),dataKey("")
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            reportType = 0;
            description = "";
            seq = "";
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(reportType, 1);
            _os.write(description, 2);
            _os.write(seq, 3);
            _os.write(dataKey, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(reportType, 1, false);
            _is.read(description, 2, false);
            _is.read(seq, 3, false);
            _is.read(dataKey, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(reportType,"reportType");
            _ds.display(description,"description");
            _ds.display(seq,"seq");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(reportType, true);
            _ds.displaySimple(description, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string feedId;
        taf::Int32 reportType;
        std::string description;
        std::string seq;
        std::string dataKey;
    };
    inline bool operator==(const MsgReportRequest&l, const MsgReportRequest&r)
    {
        return l.feedId == r.feedId && l.reportType == r.reportType && l.description == r.description && l.seq == r.seq && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const MsgReportRequest&l, const MsgReportRequest&r)
    {
        return !(l == r);
    }

    struct MsgReportResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MsgReportResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        MsgReportResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const MsgReportResponse&l, const MsgReportResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const MsgReportResponse&l, const MsgReportResponse&r)
    {
        return !(l == r);
    }

    struct MsgDeleteRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MsgDeleteRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        MsgDeleteRequest()
        :feedId(""),seq(""),dataKey("")
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            seq = "";
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(seq, 1);
            _os.write(dataKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(seq, 1, false);
            _is.read(dataKey, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(seq,"seq");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string feedId;
        std::string seq;
        std::string dataKey;
    };
    inline bool operator==(const MsgDeleteRequest&l, const MsgDeleteRequest&r)
    {
        return l.feedId == r.feedId && l.seq == r.seq && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const MsgDeleteRequest&l, const MsgDeleteRequest&r)
    {
        return !(l == r);
    }

    struct MsgDeleteResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MsgDeleteResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        MsgDeleteResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const MsgDeleteResponse&l, const MsgDeleteResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const MsgDeleteResponse&l, const MsgDeleteResponse&r)
    {
        return !(l == r);
    }

    struct TopicDetailRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TopicDetailRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        TopicDetailRequest()
        :dataKey(""),pageContext(""),reportContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
            _os.write(reportContext, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(reportContext, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(reportContext,"reportContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(reportContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
        std::string reportContext;
    };
    inline bool operator==(const TopicDetailRequest&l, const TopicDetailRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.reportContext == r.reportContext;
    }
    inline bool operator!=(const TopicDetailRequest&l, const TopicDetailRequest&r)
    {
        return !(l == r);
    }

    struct EmoticonDetail : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EmoticonDetail";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        EmoticonDetail()
        :showEmoticon(0),emoticonDataKey("")
        {
        }
        void resetDefautlt()
        {
            showEmoticon = 0;
            emoticonDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(showEmoticon, 0);
            _os.write(emoticonDataKey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(showEmoticon, 0, false);
            _is.read(emoticonDataKey, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(showEmoticon,"showEmoticon");
            _ds.display(emoticonDataKey,"emoticonDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(showEmoticon, true);
            _ds.displaySimple(emoticonDataKey, false);
            return _os;
        }
    public:
        taf::Int32 showEmoticon;
        std::string emoticonDataKey;
    };
    inline bool operator==(const EmoticonDetail&l, const EmoticonDetail&r)
    {
        return l.showEmoticon == r.showEmoticon && l.emoticonDataKey == r.emoticonDataKey;
    }
    inline bool operator!=(const EmoticonDetail&l, const EmoticonDetail&r)
    {
        return !(l == r);
    }

    struct TopicDetailResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TopicDetailResponse";
        }
        static string MD5()
        {
            return "ce39960e7766ade7b5783aabdd2b3c2f";
        }
        TopicDetailResponse()
        :errCode(0),title(""),postDataKey(""),pageContext(""),hasNextPage(true),reportContext(""),postUiType(0),needCheckRight(false)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            title = "";
            postDataKey = "";
            pageContext = "";
            hasNextPage = true;
            reportContext = "";
            postUiType = 0;
            needCheckRight = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(topicInfo, 1);
            _os.write(topicHead, 2);
            _os.write(title, 3);
            _os.write(feedList, 4);
            _os.write(postDataKey, 5);
            _os.write(pageContext, 6);
            _os.write(hasNextPage, 7);
            _os.write(shareItem, 8);
            _os.write(promotionInfo, 9);
            _os.write(reportContext, 10);
            _os.write(postUiType, 11);
            _os.write(postAction, 12);
            _os.write(topicCard, 13);
            _os.write(emoticonDetail, 14);
            _os.write(needCheckRight, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(topicInfo, 1, true);
            _is.read(topicHead, 2, true);
            _is.read(title, 3, false);
            _is.read(feedList, 4, false);
            _is.read(postDataKey, 5, false);
            _is.read(pageContext, 6, false);
            _is.read(hasNextPage, 7, false);
            _is.read(shareItem, 8, false);
            _is.read(promotionInfo, 9, false);
            _is.read(reportContext, 10, false);
            _is.read(postUiType, 11, false);
            _is.read(postAction, 12, false);
            _is.read(topicCard, 13, false);
            _is.read(emoticonDetail, 14, false);
            _is.read(needCheckRight, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(topicInfo,"topicInfo");
            _ds.display(topicHead,"topicHead");
            _ds.display(title,"title");
            _ds.display(feedList,"feedList");
            _ds.display(postDataKey,"postDataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(shareItem,"shareItem");
            _ds.display(promotionInfo,"promotionInfo");
            _ds.display(reportContext,"reportContext");
            _ds.display(postUiType,"postUiType");
            _ds.display(postAction,"postAction");
            _ds.display(topicCard,"topicCard");
            _ds.display(emoticonDetail,"emoticonDetail");
            _ds.display(needCheckRight,"needCheckRight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(topicInfo, true);
            _ds.displaySimple(topicHead, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(feedList, true);
            _ds.displaySimple(postDataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(promotionInfo, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(postUiType, true);
            _ds.displaySimple(postAction, true);
            _ds.displaySimple(topicCard, true);
            _ds.displaySimple(emoticonDetail, true);
            _ds.displaySimple(needCheckRight, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::TopicInfoLite topicInfo;
        jce::TopicHead topicHead;
        std::string title;
        vector<jce::CirclePrimaryFeed> feedList;
        std::string postDataKey;
        std::string pageContext;
        taf::Bool hasNextPage;
        jce::ShareItem shareItem;
        jce::PromotionBannerInfo promotionInfo;
        std::string reportContext;
        taf::Int32 postUiType;
        jce::Action postAction;
        jce::TopicLeftImageCard topicCard;
        jce::EmoticonDetail emoticonDetail;
        taf::Bool needCheckRight;
    };
    inline bool operator==(const TopicDetailResponse&l, const TopicDetailResponse&r)
    {
        return l.errCode == r.errCode && l.topicInfo == r.topicInfo && l.topicHead == r.topicHead && l.title == r.title && l.feedList == r.feedList && l.postDataKey == r.postDataKey && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.shareItem == r.shareItem && l.promotionInfo == r.promotionInfo && l.reportContext == r.reportContext && l.postUiType == r.postUiType && l.postAction == r.postAction && l.topicCard == r.topicCard && l.emoticonDetail == r.emoticonDetail && l.needCheckRight == r.needCheckRight;
    }
    inline bool operator!=(const TopicDetailResponse&l, const TopicDetailResponse&r)
    {
        return !(l == r);
    }

    struct TopicDetailONAViewsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TopicDetailONAViewsRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        TopicDetailONAViewsRequest()
        :dataKey(""),pageContext(""),reportContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
            _os.write(reportContext, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(reportContext, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(reportContext,"reportContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(reportContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
        std::string reportContext;
    };
    inline bool operator==(const TopicDetailONAViewsRequest&l, const TopicDetailONAViewsRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.reportContext == r.reportContext;
    }
    inline bool operator!=(const TopicDetailONAViewsRequest&l, const TopicDetailONAViewsRequest&r)
    {
        return !(l == r);
    }

    struct TopicDetailONAViewsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TopicDetailONAViewsResponse";
        }
        static string MD5()
        {
            return "7a751c555248263c5e9e94bd27f8fb48";
        }
        TopicDetailONAViewsResponse()
        :errCode(0),title(""),postDataKey(""),pageContext(""),hasNextPage(true),reportContext(""),pageType(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            title = "";
            postDataKey = "";
            pageContext = "";
            hasNextPage = true;
            reportContext = "";
            pageType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(topicInfo, 1);
            _os.write(title, 2);
            _os.write(uiData, 3);
            _os.write(postDataKey, 4);
            _os.write(pageContext, 5);
            _os.write(hasNextPage, 6);
            _os.write(shareItem, 7);
            _os.write(reportContext, 8);
            _os.write(musicInfo, 9);
            _os.write(pendantDetail, 10);
            _os.write(bottomActionBar, 11);
            _os.write(pageType, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(topicInfo, 1, true);
            _is.read(title, 2, false);
            _is.read(uiData, 3, false);
            _is.read(postDataKey, 4, false);
            _is.read(pageContext, 5, false);
            _is.read(hasNextPage, 6, false);
            _is.read(shareItem, 7, false);
            _is.read(reportContext, 8, false);
            _is.read(musicInfo, 9, false);
            _is.read(pendantDetail, 10, false);
            _is.read(bottomActionBar, 11, false);
            _is.read(pageType, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(topicInfo,"topicInfo");
            _ds.display(title,"title");
            _ds.display(uiData,"uiData");
            _ds.display(postDataKey,"postDataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(shareItem,"shareItem");
            _ds.display(reportContext,"reportContext");
            _ds.display(musicInfo,"musicInfo");
            _ds.display(pendantDetail,"pendantDetail");
            _ds.display(bottomActionBar,"bottomActionBar");
            _ds.display(pageType,"pageType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(topicInfo, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(postDataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(musicInfo, true);
            _ds.displaySimple(pendantDetail, true);
            _ds.displaySimple(bottomActionBar, true);
            _ds.displaySimple(pageType, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::TopicInfoLite topicInfo;
        std::string title;
        vector<jce::TempletLine> uiData;
        std::string postDataKey;
        std::string pageContext;
        taf::Bool hasNextPage;
        jce::ShareItem shareItem;
        std::string reportContext;
        jce::MediaItem musicInfo;
        jce::PendantDetail pendantDetail;
        jce::ActionBarInfo bottomActionBar;
        taf::Int32 pageType;
    };
    inline bool operator==(const TopicDetailONAViewsResponse&l, const TopicDetailONAViewsResponse&r)
    {
        return l.errCode == r.errCode && l.topicInfo == r.topicInfo && l.title == r.title && l.uiData == r.uiData && l.postDataKey == r.postDataKey && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.shareItem == r.shareItem && l.reportContext == r.reportContext && l.musicInfo == r.musicInfo && l.pendantDetail == r.pendantDetail && l.bottomActionBar == r.bottomActionBar && l.pageType == r.pageType;
    }
    inline bool operator!=(const TopicDetailONAViewsResponse&l, const TopicDetailONAViewsResponse&r)
    {
        return !(l == r);
    }

    struct PubTopicListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PubTopicListRequest";
        }
        static string MD5()
        {
            return "36c2d153bfaace410e59539c658500ea";
        }
        PubTopicListRequest()
        :dataKey(""),pageContext(""),cfrom(0),type(0)
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
            cfrom = 0;
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
            _os.write(cfrom, 2);
            _os.write(type, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, true);
            _is.read(cfrom, 2, false);
            _is.read(type, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(cfrom,"cfrom");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(cfrom, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
        taf::Int32 cfrom;
        taf::Int32 type;
    };
    inline bool operator==(const PubTopicListRequest&l, const PubTopicListRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.cfrom == r.cfrom && l.type == r.type;
    }
    inline bool operator!=(const PubTopicListRequest&l, const PubTopicListRequest&r)
    {
        return !(l == r);
    }

    struct PubTopicListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PubTopicListResponse";
        }
        static string MD5()
        {
            return "af68d6e02b0e84886940b142fd00de3a";
        }
        PubTopicListResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(topicList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(topicList, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(topicList,"topicList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(topicList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TopicInfoLite> topicList;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const PubTopicListResponse&l, const PubTopicListResponse&r)
    {
        return l.errCode == r.errCode && l.topicList == r.topicList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const PubTopicListResponse&l, const PubTopicListResponse&r)
    {
        return !(l == r);
    }

    struct FeedDetailOperator : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedDetailOperator";
        }
        static string MD5()
        {
            return "e69ad5e8b10c4e81bc2b59a1a5fb0a94";
        }
        FeedDetailOperator()
        :opName(""),opType(0),confirmTips(""),opValidTime(0)
        {
        }
        void resetDefautlt()
        {
            opName = "";
            opType = 0;
            confirmTips = "";
            opValidTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(opName, 0);
            _os.write(opType, 1);
            _os.write(confirmTips, 2);
            _os.write(opValidTime, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(opName, 0, true);
            _is.read(opType, 1, true);
            _is.read(confirmTips, 2, false);
            _is.read(opValidTime, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(opName,"opName");
            _ds.display(opType,"opType");
            _ds.display(confirmTips,"confirmTips");
            _ds.display(opValidTime,"opValidTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(opName, true);
            _ds.displaySimple(opType, true);
            _ds.displaySimple(confirmTips, true);
            _ds.displaySimple(opValidTime, false);
            return _os;
        }
    public:
        std::string opName;
        taf::Int32 opType;
        std::string confirmTips;
        taf::Int32 opValidTime;
    };
    inline bool operator==(const FeedDetailOperator&l, const FeedDetailOperator&r)
    {
        return l.opName == r.opName && l.opType == r.opType && l.confirmTips == r.confirmTips && l.opValidTime == r.opValidTime;
    }
    inline bool operator!=(const FeedDetailOperator&l, const FeedDetailOperator&r)
    {
        return !(l == r);
    }

    struct FeedDetailOperateRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedDetailOperateRequest";
        }
        static string MD5()
        {
            return "55ad640bda26d5fcef8450c8ae6380ea";
        }
        FeedDetailOperateRequest()
        :dataKey(""),seq("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            seq = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(operation, 1);
            _os.write(seq, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(operation, 1, true);
            _is.read(seq, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(operation,"operation");
            _ds.display(seq,"seq");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(operation, true);
            _ds.displaySimple(seq, false);
            return _os;
        }
    public:
        std::string dataKey;
        jce::FeedDetailOperator operation;
        std::string seq;
    };
    inline bool operator==(const FeedDetailOperateRequest&l, const FeedDetailOperateRequest&r)
    {
        return l.dataKey == r.dataKey && l.operation == r.operation && l.seq == r.seq;
    }
    inline bool operator!=(const FeedDetailOperateRequest&l, const FeedDetailOperateRequest&r)
    {
        return !(l == r);
    }

    struct FeedDetailOperateResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedDetailOperateResponse";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        FeedDetailOperateResponse()
        :errCode(0),opTips("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            opTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(opTips, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(opTips, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(opTips,"opTips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(opTips, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string opTips;
    };
    inline bool operator==(const FeedDetailOperateResponse&l, const FeedDetailOperateResponse&r)
    {
        return l.errCode == r.errCode && l.opTips == r.opTips;
    }
    inline bool operator!=(const FeedDetailOperateResponse&l, const FeedDetailOperateResponse&r)
    {
        return !(l == r);
    }

    struct FeedDetailRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedDetailRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        FeedDetailRequest()
        :dataKey(""),pageContext(""),reportData("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
            reportData = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
            _os.write(reportData, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(reportData, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(reportData,"reportData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(reportData, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
        std::string reportData;
    };
    inline bool operator==(const FeedDetailRequest&l, const FeedDetailRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.reportData == r.reportData;
    }
    inline bool operator!=(const FeedDetailRequest&l, const FeedDetailRequest&r)
    {
        return !(l == r);
    }

    struct FeedDetailResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedDetailResponse";
        }
        static string MD5()
        {
            return "77778f59119cbccd78c07b0b704af87c";
        }
        FeedDetailResponse()
        :errCode(0),pageContext(""),hasNextPage(true),isPrimaryFeedPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            isPrimaryFeedPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(feedInfo, 1);
            _os.write(commentList, 2);
            _os.write(pageContext, 3);
            _os.write(hasNextPage, 4);
            _os.write(isPrimaryFeedPage, 5);
            _os.write(promotionInfo, 6);
            _os.write(operationList, 7);
            _os.write(hotCommentList, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(feedInfo, 1, true);
            _is.read(commentList, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(hasNextPage, 4, false);
            _is.read(isPrimaryFeedPage, 5, false);
            _is.read(promotionInfo, 6, false);
            _is.read(operationList, 7, false);
            _is.read(hotCommentList, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(feedInfo,"feedInfo");
            _ds.display(commentList,"commentList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(isPrimaryFeedPage,"isPrimaryFeedPage");
            _ds.display(promotionInfo,"promotionInfo");
            _ds.display(operationList,"operationList");
            _ds.display(hotCommentList,"hotCommentList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(feedInfo, true);
            _ds.displaySimple(commentList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(isPrimaryFeedPage, true);
            _ds.displaySimple(promotionInfo, true);
            _ds.displaySimple(operationList, true);
            _ds.displaySimple(hotCommentList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::CirclePrimaryFeed feedInfo;
        vector<jce::CircleCommentFeed> commentList;
        std::string pageContext;
        taf::Bool hasNextPage;
        taf::Bool isPrimaryFeedPage;
        jce::PromotionBannerInfo promotionInfo;
        vector<jce::FeedDetailOperator> operationList;
        vector<jce::CircleCommentFeed> hotCommentList;
    };
    inline bool operator==(const FeedDetailResponse&l, const FeedDetailResponse&r)
    {
        return l.errCode == r.errCode && l.feedInfo == r.feedInfo && l.commentList == r.commentList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.isPrimaryFeedPage == r.isPrimaryFeedPage && l.promotionInfo == r.promotionInfo && l.operationList == r.operationList && l.hotCommentList == r.hotCommentList;
    }
    inline bool operator!=(const FeedDetailResponse&l, const FeedDetailResponse&r)
    {
        return !(l == r);
    }

    struct CheckKeyBoardEntranceRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckKeyBoardEntranceRequest";
        }
        static string MD5()
        {
            return "9bda4ac16227127f47ea815aed6f8d9e";
        }
        CheckKeyBoardEntranceRequest()
        :dataKey(""),cfrom(0),type(0)
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            cfrom = 0;
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(cfrom, 1);
            _os.write(type, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(cfrom, 1, true);
            _is.read(type, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(cfrom,"cfrom");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(cfrom, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        std::string dataKey;
        taf::Int32 cfrom;
        taf::Int32 type;
    };
    inline bool operator==(const CheckKeyBoardEntranceRequest&l, const CheckKeyBoardEntranceRequest&r)
    {
        return l.dataKey == r.dataKey && l.cfrom == r.cfrom && l.type == r.type;
    }
    inline bool operator!=(const CheckKeyBoardEntranceRequest&l, const CheckKeyBoardEntranceRequest&r)
    {
        return !(l == r);
    }

    struct CheckKeyBoardEntranceResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckKeyBoardEntranceResponse";
        }
        static string MD5()
        {
            return "3dd21e5f3546a1d075dd924e57a85a17";
        }
        CheckKeyBoardEntranceResponse()
        :errCode(0),entranceMask(0),tips(""),contentHint("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            entranceMask = 0;
            tips = "";
            contentHint = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(entranceMask, 1);
            _os.write(tips, 2);
            _os.write(contentHint, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(entranceMask, 1, true);
            _is.read(tips, 2, false);
            _is.read(contentHint, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(entranceMask,"entranceMask");
            _ds.display(tips,"tips");
            _ds.display(contentHint,"contentHint");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(entranceMask, true);
            _ds.displaySimple(tips, true);
            _ds.displaySimple(contentHint, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 entranceMask;
        std::string tips;
        std::string contentHint;
    };
    inline bool operator==(const CheckKeyBoardEntranceResponse&l, const CheckKeyBoardEntranceResponse&r)
    {
        return l.errCode == r.errCode && l.entranceMask == r.entranceMask && l.tips == r.tips && l.contentHint == r.contentHint;
    }
    inline bool operator!=(const CheckKeyBoardEntranceResponse&l, const CheckKeyBoardEntranceResponse&r)
    {
        return !(l == r);
    }

    struct FeedOperationListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedOperationListRequest";
        }
        static string MD5()
        {
            return "3c7096e8daca847c5177c199d3960392";
        }
        FeedOperationListRequest()
        :dataKey(""),senderId(""),isPrimaryFeed(true)
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            senderId = "";
            isPrimaryFeed = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(senderId, 1);
            _os.write(isPrimaryFeed, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(senderId, 1, true);
            _is.read(isPrimaryFeed, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(senderId,"senderId");
            _ds.display(isPrimaryFeed,"isPrimaryFeed");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(senderId, true);
            _ds.displaySimple(isPrimaryFeed, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string senderId;
        taf::Bool isPrimaryFeed;
    };
    inline bool operator==(const FeedOperationListRequest&l, const FeedOperationListRequest&r)
    {
        return l.dataKey == r.dataKey && l.senderId == r.senderId && l.isPrimaryFeed == r.isPrimaryFeed;
    }
    inline bool operator!=(const FeedOperationListRequest&l, const FeedOperationListRequest&r)
    {
        return !(l == r);
    }

    struct FeedOperationListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedOperationListResponse";
        }
        static string MD5()
        {
            return "f23271c8006da8e92947afe9ceb571f8";
        }
        FeedOperationListResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(operationList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(operationList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(operationList,"operationList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(operationList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::FeedDetailOperator> operationList;
    };
    inline bool operator==(const FeedOperationListResponse&l, const FeedOperationListResponse&r)
    {
        return l.errCode == r.errCode && l.operationList == r.operationList;
    }
    inline bool operator!=(const FeedOperationListResponse&l, const FeedOperationListResponse&r)
    {
        return !(l == r);
    }

    struct FeedOperationGroup : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedOperationGroup";
        }
        static string MD5()
        {
            return "399e5c254989986956fe2d731b2a1b88";
        }
        FeedOperationGroup()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(operationList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(operationList, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(operationList,"operationList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(operationList, false);
            return _os;
        }
    public:
        vector<jce::FeedDetailOperator> operationList;
    };
    inline bool operator==(const FeedOperationGroup&l, const FeedOperationGroup&r)
    {
        return l.operationList == r.operationList;
    }
    inline bool operator!=(const FeedOperationGroup&l, const FeedOperationGroup&r)
    {
        return !(l == r);
    }

    struct MyFeedOperationGroupRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MyFeedOperationGroupRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        MyFeedOperationGroupRequest()
        :userId("")
        {
        }
        void resetDefautlt()
        {
            userId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(userId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(userId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(userId,"userId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(userId, false);
            return _os;
        }
    public:
        std::string userId;
    };
    inline bool operator==(const MyFeedOperationGroupRequest&l, const MyFeedOperationGroupRequest&r)
    {
        return l.userId == r.userId;
    }
    inline bool operator!=(const MyFeedOperationGroupRequest&l, const MyFeedOperationGroupRequest&r)
    {
        return !(l == r);
    }

    struct MyFeedOperationGroupResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MyFeedOperationGroupResponse";
        }
        static string MD5()
        {
            return "a4cb9e58a3a571fb891afdfe89a93327";
        }
        MyFeedOperationGroupResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(globalOptGroup, 1);
            _os.write(dokiOptGroupMap, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(globalOptGroup, 1, false);
            _is.read(dokiOptGroupMap, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(globalOptGroup,"globalOptGroup");
            _ds.display(dokiOptGroupMap,"dokiOptGroupMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(globalOptGroup, true);
            _ds.displaySimple(dokiOptGroupMap, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::FeedOperationGroup globalOptGroup;
        map<std::string, jce::FeedOperationGroup> dokiOptGroupMap;
    };
    inline bool operator==(const MyFeedOperationGroupResponse&l, const MyFeedOperationGroupResponse&r)
    {
        return l.errCode == r.errCode && l.globalOptGroup == r.globalOptGroup && l.dokiOptGroupMap == r.dokiOptGroupMap;
    }
    inline bool operator!=(const MyFeedOperationGroupResponse&l, const MyFeedOperationGroupResponse&r)
    {
        return !(l == r);
    }


}

#define jce_FeedUploadVideoInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.imgUrl,b.imgUrl);jce_copy_struct(a.title,b.title);jce_copy_struct(a.videoType,b.videoType);jce_copy_struct(a.musicVid,b.musicVid);jce_copy_struct(a.musicImgUrl,b.musicImgUrl);jce_copy_struct(a.musicTitle,b.musicTitle);

#define jce_PubMsgRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.content,b.content);jce_copy_struct(a.imageList,b.imageList);jce_copy_struct(a.title,b.title);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.videoList,b.videoList);jce_copy_struct(a.shareMask,b.shareMask);jce_copy_struct(a.shareInfo,b.shareInfo);jce_copy_struct(a.shareToken,b.shareToken);jce_copy_struct(a.cfrom,b.cfrom);jce_copy_struct(a.voiceList,b.voiceList);jce_copy_struct(a.dmContentKey,b.dmContentKey);jce_copy_struct(a.userStarInfo,b.userStarInfo);jce_copy_struct(a.dwTimePoint,b.dwTimePoint);jce_copy_struct(a.wxScore,b.wxScore);jce_copy_struct(a.topicList,b.topicList);jce_copy_struct(a.actorInfoList,b.actorInfoList);jce_copy_struct(a.videoInfo,b.videoInfo);jce_copy_struct(a.userCertifiedFlag,b.userCertifiedFlag);jce_copy_struct(a.currentVid,b.currentVid);jce_copy_struct(a.gpsAddressInfo,b.gpsAddressInfo);jce_copy_struct(a.richTextLabelInfo,b.richTextLabelInfo);

#define jce_PubMsgResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.feed,b.feed);jce_copy_struct(a.shareErrCode,b.shareErrCode);jce_copy_struct(a.shareCircleUrl,b.shareCircleUrl);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.sucMsg,b.sucMsg);

#define jce_PostCommentMsgRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.parentId,b.parentId);jce_copy_struct(a.content,b.content);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.cfrom,b.cfrom);jce_copy_struct(a.imageList,b.imageList);jce_copy_struct(a.userStarInfo,b.userStarInfo);

#define jce_PostCommentMsgResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.comment,b.comment);jce_copy_struct(a.errMsg,b.errMsg);

#define jce_MsgLikeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.likeFlag,b.likeFlag);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.userStarInfo,b.userStarInfo);

#define jce_MsgLikeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_MsgReportRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.reportType,b.reportType);jce_copy_struct(a.description,b.description);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_MsgReportResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_MsgDeleteRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_MsgDeleteResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_TopicDetailRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.reportContext,b.reportContext);

#define jce_EmoticonDetail_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.showEmoticon,b.showEmoticon);jce_copy_struct(a.emoticonDataKey,b.emoticonDataKey);

#define jce_TopicDetailResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.topicInfo,b.topicInfo);jce_copy_struct(a.topicHead,b.topicHead);jce_copy_struct(a.title,b.title);jce_copy_struct(a.feedList,b.feedList);jce_copy_struct(a.postDataKey,b.postDataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.promotionInfo,b.promotionInfo);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.postUiType,b.postUiType);jce_copy_struct(a.postAction,b.postAction);jce_copy_struct(a.topicCard,b.topicCard);jce_copy_struct(a.emoticonDetail,b.emoticonDetail);jce_copy_struct(a.needCheckRight,b.needCheckRight);

#define jce_TopicDetailONAViewsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.reportContext,b.reportContext);

#define jce_TopicDetailONAViewsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.topicInfo,b.topicInfo);jce_copy_struct(a.title,b.title);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.postDataKey,b.postDataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.musicInfo,b.musicInfo);jce_copy_struct(a.pendantDetail,b.pendantDetail);jce_copy_struct(a.bottomActionBar,b.bottomActionBar);jce_copy_struct(a.pageType,b.pageType);

#define jce_PubTopicListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.cfrom,b.cfrom);jce_copy_struct(a.type,b.type);

#define jce_PubTopicListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.topicList,b.topicList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_FeedDetailOperator_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.opName,b.opName);jce_copy_struct(a.opType,b.opType);jce_copy_struct(a.confirmTips,b.confirmTips);jce_copy_struct(a.opValidTime,b.opValidTime);

#define jce_FeedDetailOperateRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.operation,b.operation);jce_copy_struct(a.seq,b.seq);

#define jce_FeedDetailOperateResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.opTips,b.opTips);

#define jce_FeedDetailRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.reportData,b.reportData);

#define jce_FeedDetailResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.feedInfo,b.feedInfo);jce_copy_struct(a.commentList,b.commentList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.isPrimaryFeedPage,b.isPrimaryFeedPage);jce_copy_struct(a.promotionInfo,b.promotionInfo);jce_copy_struct(a.operationList,b.operationList);jce_copy_struct(a.hotCommentList,b.hotCommentList);

#define jce_CheckKeyBoardEntranceRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.cfrom,b.cfrom);jce_copy_struct(a.type,b.type);

#define jce_CheckKeyBoardEntranceResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.entranceMask,b.entranceMask);jce_copy_struct(a.tips,b.tips);jce_copy_struct(a.contentHint,b.contentHint);

#define jce_FeedOperationListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.senderId,b.senderId);jce_copy_struct(a.isPrimaryFeed,b.isPrimaryFeed);

#define jce_FeedOperationListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.operationList,b.operationList);

#define jce_FeedOperationGroup_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.operationList,b.operationList);

#define jce_MyFeedOperationGroupRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.userId,b.userId);

#define jce_MyFeedOperationGroupResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.globalOptGroup,b.globalOptGroup);jce_copy_struct(a.dokiOptGroupMap,b.dokiOptGroupMap);



#endif
