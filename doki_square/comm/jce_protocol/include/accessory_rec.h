// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `accessory_rec.jce'
// **********************************************************************

#ifndef __ACCESSORY_REC_H_
#define __ACCESSORY_REC_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace accessory_rec
{
    enum Cmd
    {
        CMD_SIMPLE = 61301,
        CMD_DETAIL = 61311,
        CMD_WEB = 61313,
        CMD_SEARCH = 61678,
        CMD_DETAIL_ACC = 61964,
        CMD_DETAIL_BANNER = 61998,
        CMD_GAME_REC_LIST = 62327,
    };
    inline string etos(const Cmd & e)
    {
        switch(e)
        {
            case CMD_SIMPLE: return "CMD_SIMPLE";
            case CMD_DETAIL: return "CMD_DETAIL";
            case CMD_WEB: return "CMD_WEB";
            case CMD_SEARCH: return "CMD_SEARCH";
            case CMD_DETAIL_ACC: return "CMD_DETAIL_ACC";
            case CMD_DETAIL_BANNER: return "CMD_DETAIL_BANNER";
            case CMD_GAME_REC_LIST: return "CMD_GAME_REC_LIST";
            default: return "";
        }
    }
    inline int stoe(const string & s, Cmd & e)
    {
        if(s == "CMD_SIMPLE")  { e=CMD_SIMPLE; return 0;}
        if(s == "CMD_DETAIL")  { e=CMD_DETAIL; return 0;}
        if(s == "CMD_WEB")  { e=CMD_WEB; return 0;}
        if(s == "CMD_SEARCH")  { e=CMD_SEARCH; return 0;}
        if(s == "CMD_DETAIL_ACC")  { e=CMD_DETAIL_ACC; return 0;}
        if(s == "CMD_DETAIL_BANNER")  { e=CMD_DETAIL_BANNER; return 0;}
        if(s == "CMD_GAME_REC_LIST")  { e=CMD_GAME_REC_LIST; return 0;}

        return -1;
    }

    enum Error
    {
        ERROR_SIMPLE_REQ_EMPTY = 401600,
        ERROR_GET_TASK_ID_EMPTY = 401601,
        ERROR_UNKNOW_CMD = 401602,
        ERROR_WEB_REQ_EMPTY = 401603,
        ERROR_GET_TASK_DETAIL = 401604,
        ERROR_GET_REC_APP = 401605,
        ERROR_CHANNEL_ID = 401606,
        ERROR_DYNAMIC_TYPE = 401607,
        ERROR_DETAIL_CMD = 401608,
        ERROR_OMGID_EMPTY = 401700,
        ERROR_GAME_REC = 401701,
        ERROR_GAME_INFO = 401702,
    };
    inline string etos(const Error & e)
    {
        switch(e)
        {
            case ERROR_SIMPLE_REQ_EMPTY: return "ERROR_SIMPLE_REQ_EMPTY";
            case ERROR_GET_TASK_ID_EMPTY: return "ERROR_GET_TASK_ID_EMPTY";
            case ERROR_UNKNOW_CMD: return "ERROR_UNKNOW_CMD";
            case ERROR_WEB_REQ_EMPTY: return "ERROR_WEB_REQ_EMPTY";
            case ERROR_GET_TASK_DETAIL: return "ERROR_GET_TASK_DETAIL";
            case ERROR_GET_REC_APP: return "ERROR_GET_REC_APP";
            case ERROR_CHANNEL_ID: return "ERROR_CHANNEL_ID";
            case ERROR_DYNAMIC_TYPE: return "ERROR_DYNAMIC_TYPE";
            case ERROR_DETAIL_CMD: return "ERROR_DETAIL_CMD";
            case ERROR_OMGID_EMPTY: return "ERROR_OMGID_EMPTY";
            case ERROR_GAME_REC: return "ERROR_GAME_REC";
            case ERROR_GAME_INFO: return "ERROR_GAME_INFO";
            default: return "";
        }
    }
    inline int stoe(const string & s, Error & e)
    {
        if(s == "ERROR_SIMPLE_REQ_EMPTY")  { e=ERROR_SIMPLE_REQ_EMPTY; return 0;}
        if(s == "ERROR_GET_TASK_ID_EMPTY")  { e=ERROR_GET_TASK_ID_EMPTY; return 0;}
        if(s == "ERROR_UNKNOW_CMD")  { e=ERROR_UNKNOW_CMD; return 0;}
        if(s == "ERROR_WEB_REQ_EMPTY")  { e=ERROR_WEB_REQ_EMPTY; return 0;}
        if(s == "ERROR_GET_TASK_DETAIL")  { e=ERROR_GET_TASK_DETAIL; return 0;}
        if(s == "ERROR_GET_REC_APP")  { e=ERROR_GET_REC_APP; return 0;}
        if(s == "ERROR_CHANNEL_ID")  { e=ERROR_CHANNEL_ID; return 0;}
        if(s == "ERROR_DYNAMIC_TYPE")  { e=ERROR_DYNAMIC_TYPE; return 0;}
        if(s == "ERROR_DETAIL_CMD")  { e=ERROR_DETAIL_CMD; return 0;}
        if(s == "ERROR_OMGID_EMPTY")  { e=ERROR_OMGID_EMPTY; return 0;}
        if(s == "ERROR_GAME_REC")  { e=ERROR_GAME_REC; return 0;}
        if(s == "ERROR_GAME_INFO")  { e=ERROR_GAME_INFO; return 0;}

        return -1;
    }

    enum ItemType
    {
        ITEM_TYPE_GOODS = 0,
        ITEM_TYPE_MUSIC = 5,
        ITEM_TYPE_NOVEL = 8,
        ITEM_TYPE_APP = 9,
        ITEM_TYPE_GAME_APP = 10,
        ITEM_TYPE_OPERA = 11,
    };
    inline string etos(const ItemType & e)
    {
        switch(e)
        {
            case ITEM_TYPE_GOODS: return "ITEM_TYPE_GOODS";
            case ITEM_TYPE_MUSIC: return "ITEM_TYPE_MUSIC";
            case ITEM_TYPE_NOVEL: return "ITEM_TYPE_NOVEL";
            case ITEM_TYPE_APP: return "ITEM_TYPE_APP";
            case ITEM_TYPE_GAME_APP: return "ITEM_TYPE_GAME_APP";
            case ITEM_TYPE_OPERA: return "ITEM_TYPE_OPERA";
            default: return "";
        }
    }
    inline int stoe(const string & s, ItemType & e)
    {
        if(s == "ITEM_TYPE_GOODS")  { e=ITEM_TYPE_GOODS; return 0;}
        if(s == "ITEM_TYPE_MUSIC")  { e=ITEM_TYPE_MUSIC; return 0;}
        if(s == "ITEM_TYPE_NOVEL")  { e=ITEM_TYPE_NOVEL; return 0;}
        if(s == "ITEM_TYPE_APP")  { e=ITEM_TYPE_APP; return 0;}
        if(s == "ITEM_TYPE_GAME_APP")  { e=ITEM_TYPE_GAME_APP; return 0;}
        if(s == "ITEM_TYPE_OPERA")  { e=ITEM_TYPE_OPERA; return 0;}

        return -1;
    }

    enum Location
    {
        LOCATION_APP_BANNER = 1,
        LOCATION_APP_ACCESSORY = 2,
        LOCATION_APP_WEB_FRAME = 3,
        LOCATION_APP_SEARCH = 4,
        LOCATION_APP_GAME_LIST = 5,
    };
    inline string etos(const Location & e)
    {
        switch(e)
        {
            case LOCATION_APP_BANNER: return "LOCATION_APP_BANNER";
            case LOCATION_APP_ACCESSORY: return "LOCATION_APP_ACCESSORY";
            case LOCATION_APP_WEB_FRAME: return "LOCATION_APP_WEB_FRAME";
            case LOCATION_APP_SEARCH: return "LOCATION_APP_SEARCH";
            case LOCATION_APP_GAME_LIST: return "LOCATION_APP_GAME_LIST";
            default: return "";
        }
    }
    inline int stoe(const string & s, Location & e)
    {
        if(s == "LOCATION_APP_BANNER")  { e=LOCATION_APP_BANNER; return 0;}
        if(s == "LOCATION_APP_ACCESSORY")  { e=LOCATION_APP_ACCESSORY; return 0;}
        if(s == "LOCATION_APP_WEB_FRAME")  { e=LOCATION_APP_WEB_FRAME; return 0;}
        if(s == "LOCATION_APP_SEARCH")  { e=LOCATION_APP_SEARCH; return 0;}
        if(s == "LOCATION_APP_GAME_LIST")  { e=LOCATION_APP_GAME_LIST; return 0;}

        return -1;
    }

    enum VplusUserType
    {
        VUT_UNKNOW = 0,
        VUT_VPLUS = 1,
        VUT_OM = 2,
        VUT_VIDEO_USER = 3,
    };
    inline string etos(const VplusUserType & e)
    {
        switch(e)
        {
            case VUT_UNKNOW: return "VUT_UNKNOW";
            case VUT_VPLUS: return "VUT_VPLUS";
            case VUT_OM: return "VUT_OM";
            case VUT_VIDEO_USER: return "VUT_VIDEO_USER";
            default: return "";
        }
    }
    inline int stoe(const string & s, VplusUserType & e)
    {
        if(s == "VUT_UNKNOW")  { e=VUT_UNKNOW; return 0;}
        if(s == "VUT_VPLUS")  { e=VUT_VPLUS; return 0;}
        if(s == "VUT_OM")  { e=VUT_OM; return 0;}
        if(s == "VUT_VIDEO_USER")  { e=VUT_VIDEO_USER; return 0;}

        return -1;
    }

    struct H5Item : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "accessory_rec.H5Item";
        }
        static string MD5()
        {
            return "7991164e7ff5cd976b2199ac0e8e4251";
        }
        H5Item()
        :type(accessory_rec::ITEM_TYPE_GOODS),c_id(0),title(""),sub_title(""),action_url(""),image_url(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            c_id = 0;
            title = "";
            sub_title = "";
            action_url = "";
            image_url = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)type, 0);
            _os.write(c_id, 1);
            _os.write(title, 2);
            _os.write(sub_title, 3);
            _os.write(action_url, 4);
            _os.write(image_url, 5);
            _os.write(reportKey, 6);
            _os.write(reportParams, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = accessory_rec::ITEM_TYPE_GOODS;
            _is.read(eTemp0, 0, true);
            type = (accessory_rec::ItemType)eTemp0;
            _is.read(c_id, 1, true);
            _is.read(title, 2, false);
            _is.read(sub_title, 3, false);
            _is.read(action_url, 4, false);
            _is.read(image_url, 5, false);
            _is.read(reportKey, 6, false);
            _is.read(reportParams, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)type,"type");
            _ds.display(c_id,"c_id");
            _ds.display(title,"title");
            _ds.display(sub_title,"sub_title");
            _ds.display(action_url,"action_url");
            _ds.display(image_url,"image_url");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)type, true);
            _ds.displaySimple(c_id, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(sub_title, true);
            _ds.displaySimple(action_url, true);
            _ds.displaySimple(image_url, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        accessory_rec::ItemType type;
        taf::Int32 c_id;
        std::string title;
        std::string sub_title;
        std::string action_url;
        std::string image_url;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const H5Item&l, const H5Item&r)
    {
        return l.type == r.type && l.c_id == r.c_id && l.title == r.title && l.sub_title == r.sub_title && l.action_url == r.action_url && l.image_url == r.image_url && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const H5Item&l, const H5Item&r)
    {
        return !(l == r);
    }

    struct RecInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "accessory_rec.RecInfo";
        }
        static string MD5()
        {
            return "5bb5836bcf89c58da65b049e3d303e65";
        }
        RecInfo()
        :id(0),alg(""),report_key(""),report_value("")
        {
        }
        void resetDefautlt()
        {
            id = 0;
            alg = "";
            report_key = "";
            report_value = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(alg, 1);
            _os.write(report_key, 2);
            _os.write(report_value, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, false);
            _is.read(alg, 1, false);
            _is.read(report_key, 2, false);
            _is.read(report_value, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(alg,"alg");
            _ds.display(report_key,"report_key");
            _ds.display(report_value,"report_value");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(alg, true);
            _ds.displaySimple(report_key, true);
            _ds.displaySimple(report_value, false);
            return _os;
        }
    public:
        taf::Int32 id;
        std::string alg;
        std::string report_key;
        std::string report_value;
    };
    inline bool operator==(const RecInfo&l, const RecInfo&r)
    {
        return l.id == r.id && l.alg == r.alg && l.report_key == r.report_key && l.report_value == r.report_value;
    }
    inline bool operator!=(const RecInfo&l, const RecInfo&r)
    {
        return !(l == r);
    }

    struct AppItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "accessory_rec.AppItem";
        }
        static string MD5()
        {
            return "a3233efcf58f30b807d760e7edde9845";
        }
        AppItem()
        :type(accessory_rec::ITEM_TYPE_GOODS),c_id(0),name(""),title(""),sub_title(""),image_url(""),android_down_url(""),android_open_url(""),android_has_gift(true),iphone_down_url(""),iphone_open_url(""),iphone_has_gift(true),fid(""),app_id(""),version_code(""),via(""),blank_url(""),md5(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            c_id = 0;
            name = "";
            title = "";
            sub_title = "";
            image_url = "";
            android_down_url = "";
            android_open_url = "";
            android_has_gift = true;
            iphone_down_url = "";
            iphone_open_url = "";
            iphone_has_gift = true;
            fid = "";
            app_id = "";
            version_code = "";
            via = "";
            blank_url = "";
            md5 = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)type, 0);
            _os.write(c_id, 1);
            _os.write(name, 2);
            _os.write(title, 3);
            _os.write(sub_title, 4);
            _os.write(image_url, 5);
            _os.write(android_down_url, 6);
            _os.write(android_open_url, 7);
            _os.write(android_has_gift, 8);
            _os.write(iphone_down_url, 9);
            _os.write(iphone_open_url, 10);
            _os.write(iphone_has_gift, 11);
            _os.write(fid, 12);
            _os.write(app_id, 13);
            _os.write(version_code, 14);
            _os.write(rec_info, 15);
            _os.write(via, 16);
            _os.write(blank_url, 17);
            _os.write(md5, 18);
            _os.write(reportKey, 19);
            _os.write(reportParams, 20);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = accessory_rec::ITEM_TYPE_GOODS;
            _is.read(eTemp0, 0, true);
            type = (accessory_rec::ItemType)eTemp0;
            _is.read(c_id, 1, true);
            _is.read(name, 2, false);
            _is.read(title, 3, false);
            _is.read(sub_title, 4, false);
            _is.read(image_url, 5, false);
            _is.read(android_down_url, 6, false);
            _is.read(android_open_url, 7, false);
            _is.read(android_has_gift, 8, false);
            _is.read(iphone_down_url, 9, false);
            _is.read(iphone_open_url, 10, false);
            _is.read(iphone_has_gift, 11, false);
            _is.read(fid, 12, false);
            _is.read(app_id, 13, false);
            _is.read(version_code, 14, false);
            _is.read(rec_info, 15, false);
            _is.read(via, 16, false);
            _is.read(blank_url, 17, false);
            _is.read(md5, 18, false);
            _is.read(reportKey, 19, false);
            _is.read(reportParams, 20, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)type,"type");
            _ds.display(c_id,"c_id");
            _ds.display(name,"name");
            _ds.display(title,"title");
            _ds.display(sub_title,"sub_title");
            _ds.display(image_url,"image_url");
            _ds.display(android_down_url,"android_down_url");
            _ds.display(android_open_url,"android_open_url");
            _ds.display(android_has_gift,"android_has_gift");
            _ds.display(iphone_down_url,"iphone_down_url");
            _ds.display(iphone_open_url,"iphone_open_url");
            _ds.display(iphone_has_gift,"iphone_has_gift");
            _ds.display(fid,"fid");
            _ds.display(app_id,"app_id");
            _ds.display(version_code,"version_code");
            _ds.display(rec_info,"rec_info");
            _ds.display(via,"via");
            _ds.display(blank_url,"blank_url");
            _ds.display(md5,"md5");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)type, true);
            _ds.displaySimple(c_id, true);
            _ds.displaySimple(name, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(sub_title, true);
            _ds.displaySimple(image_url, true);
            _ds.displaySimple(android_down_url, true);
            _ds.displaySimple(android_open_url, true);
            _ds.displaySimple(android_has_gift, true);
            _ds.displaySimple(iphone_down_url, true);
            _ds.displaySimple(iphone_open_url, true);
            _ds.displaySimple(iphone_has_gift, true);
            _ds.displaySimple(fid, true);
            _ds.displaySimple(app_id, true);
            _ds.displaySimple(version_code, true);
            _ds.displaySimple(rec_info, true);
            _ds.displaySimple(via, true);
            _ds.displaySimple(blank_url, true);
            _ds.displaySimple(md5, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        accessory_rec::ItemType type;
        taf::Int32 c_id;
        std::string name;
        std::string title;
        std::string sub_title;
        std::string image_url;
        std::string android_down_url;
        std::string android_open_url;
        taf::Bool android_has_gift;
        std::string iphone_down_url;
        std::string iphone_open_url;
        taf::Bool iphone_has_gift;
        std::string fid;
        std::string app_id;
        std::string version_code;
        accessory_rec::RecInfo rec_info;
        std::string via;
        std::string blank_url;
        std::string md5;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const AppItem&l, const AppItem&r)
    {
        return l.type == r.type && l.c_id == r.c_id && l.name == r.name && l.title == r.title && l.sub_title == r.sub_title && l.image_url == r.image_url && l.android_down_url == r.android_down_url && l.android_open_url == r.android_open_url && l.android_has_gift == r.android_has_gift && l.iphone_down_url == r.iphone_down_url && l.iphone_open_url == r.iphone_open_url && l.iphone_has_gift == r.iphone_has_gift && l.fid == r.fid && l.app_id == r.app_id && l.version_code == r.version_code && l.rec_info == r.rec_info && l.via == r.via && l.blank_url == r.blank_url && l.md5 == r.md5 && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const AppItem&l, const AppItem&r)
    {
        return !(l == r);
    }

    struct VplusUserItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "accessory_rec.VplusUserItem";
        }
        static string MD5()
        {
            return "7169b11471a1d16b1acee95df9048f8f";
        }
        VplusUserItem()
        :uin(""),nick(""),avatar(""),subscription(0),count(0),euin(""),isvpp(true),urlfull(""),info(""),upload_src(0),video_count(0),user_type(accessory_rec::VUT_UNKNOW)
        {
        }
        void resetDefautlt()
        {
            uin = "";
            nick = "";
            avatar = "";
            subscription = 0;
            count = 0;
            euin = "";
            isvpp = true;
            urlfull = "";
            info = "";
            upload_src = 0;
            video_count = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uin, 0);
            _os.write(nick, 1);
            _os.write(avatar, 2);
            _os.write(subscription, 3);
            _os.write(count, 4);
            _os.write(euin, 5);
            _os.write(isvpp, 6);
            _os.write(urlfull, 7);
            _os.write(info, 8);
            _os.write(upload_src, 9);
            _os.write(video_count, 10);
            _os.write((taf::Int32)user_type, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uin, 0, true);
            _is.read(nick, 1, false);
            _is.read(avatar, 2, false);
            _is.read(subscription, 3, false);
            _is.read(count, 4, false);
            _is.read(euin, 5, false);
            _is.read(isvpp, 6, false);
            _is.read(urlfull, 7, false);
            _is.read(info, 8, false);
            _is.read(upload_src, 9, false);
            _is.read(video_count, 10, false);
            taf::Int32 eTemp11 = accessory_rec::VUT_UNKNOW;
            _is.read(eTemp11, 11, false);
            user_type = (accessory_rec::VplusUserType)eTemp11;
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uin,"uin");
            _ds.display(nick,"nick");
            _ds.display(avatar,"avatar");
            _ds.display(subscription,"subscription");
            _ds.display(count,"count");
            _ds.display(euin,"euin");
            _ds.display(isvpp,"isvpp");
            _ds.display(urlfull,"urlfull");
            _ds.display(info,"info");
            _ds.display(upload_src,"upload_src");
            _ds.display(video_count,"video_count");
            _ds.display((taf::Int32)user_type,"user_type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uin, true);
            _ds.displaySimple(nick, true);
            _ds.displaySimple(avatar, true);
            _ds.displaySimple(subscription, true);
            _ds.displaySimple(count, true);
            _ds.displaySimple(euin, true);
            _ds.displaySimple(isvpp, true);
            _ds.displaySimple(urlfull, true);
            _ds.displaySimple(info, true);
            _ds.displaySimple(upload_src, true);
            _ds.displaySimple(video_count, true);
            _ds.displaySimple((taf::Int32)user_type, false);
            return _os;
        }
    public:
        std::string uin;
        std::string nick;
        std::string avatar;
        taf::Int32 subscription;
        taf::Int64 count;
        std::string euin;
        taf::Bool isvpp;
        std::string urlfull;
        std::string info;
        taf::Int32 upload_src;
        taf::Int32 video_count;
        accessory_rec::VplusUserType user_type;
    };
    inline bool operator==(const VplusUserItem&l, const VplusUserItem&r)
    {
        return l.uin == r.uin && l.nick == r.nick && l.avatar == r.avatar && l.subscription == r.subscription && l.count == r.count && l.euin == r.euin && l.isvpp == r.isvpp && l.urlfull == r.urlfull && l.info == r.info && l.upload_src == r.upload_src && l.video_count == r.video_count && l.user_type == r.user_type;
    }
    inline bool operator!=(const VplusUserItem&l, const VplusUserItem&r)
    {
        return !(l == r);
    }

    struct AccessoryItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "accessory_rec.AccessoryItem";
        }
        static string MD5()
        {
            return "01862e561142cbf37df52ef680399268";
        }
        AccessoryItem()
        :type(0),location(accessory_rec::LOCATION_APP_BANNER)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write((taf::Int32)location, 1);
            _os.write(h5_item, 2);
            _os.write(app_item, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            taf::Int32 eTemp1 = accessory_rec::LOCATION_APP_BANNER;
            _is.read(eTemp1, 1, false);
            location = (accessory_rec::Location)eTemp1;
            _is.read(h5_item, 2, false);
            _is.read(app_item, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display((taf::Int32)location,"location");
            _ds.display(h5_item,"h5_item");
            _ds.display(app_item,"app_item");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple((taf::Int32)location, true);
            _ds.displaySimple(h5_item, true);
            _ds.displaySimple(app_item, false);
            return _os;
        }
    public:
        taf::Int32 type;
        accessory_rec::Location location;
        accessory_rec::H5Item h5_item;
        accessory_rec::AppItem app_item;
    };
    inline bool operator==(const AccessoryItem&l, const AccessoryItem&r)
    {
        return l.type == r.type && l.location == r.location && l.h5_item == r.h5_item && l.app_item == r.app_item;
    }
    inline bool operator!=(const AccessoryItem&l, const AccessoryItem&r)
    {
        return !(l == r);
    }

    struct SimpleAccessoryItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "accessory_rec.SimpleAccessoryItem";
        }
        static string MD5()
        {
            return "4ccffa49acefd48e29c01539db437fb0";
        }
        SimpleAccessoryItem()
        :item_id(""),item_flag(0),is_top(true),title("")
        {
        }
        void resetDefautlt()
        {
            item_id = "";
            item_flag = 0;
            is_top = true;
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(item_id, 0);
            _os.write(item_flag, 1);
            _os.write(is_top, 2);
            _os.write(title, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(item_id, 0, true);
            _is.read(item_flag, 1, true);
            _is.read(is_top, 2, false);
            _is.read(title, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(item_id,"item_id");
            _ds.display(item_flag,"item_flag");
            _ds.display(is_top,"is_top");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(item_id, true);
            _ds.displaySimple(item_flag, true);
            _ds.displaySimple(is_top, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        std::string item_id;
        taf::Int32 item_flag;
        taf::Bool is_top;
        std::string title;
    };
    inline bool operator==(const SimpleAccessoryItem&l, const SimpleAccessoryItem&r)
    {
        return l.item_id == r.item_id && l.item_flag == r.item_flag && l.is_top == r.is_top && l.title == r.title;
    }
    inline bool operator!=(const SimpleAccessoryItem&l, const SimpleAccessoryItem&r)
    {
        return !(l == r);
    }

    struct AccessoryRecRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "accessory_rec.AccessoryRecRequest";
        }
        static string MD5()
        {
            return "4d3b8660aaf142047ab47b09661b70f2";
        }
        AccessoryRecRequest()
        :location(accessory_rec::LOCATION_APP_BANNER),lid(""),cid(""),vid(""),channel_id(0)
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
            channel_id = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)location, 0);
            _os.write(lid, 1);
            _os.write(cid, 2);
            _os.write(vid, 3);
            _os.write(channel_id, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = accessory_rec::LOCATION_APP_BANNER;
            _is.read(eTemp0, 0, true);
            location = (accessory_rec::Location)eTemp0;
            _is.read(lid, 1, false);
            _is.read(cid, 2, false);
            _is.read(vid, 3, false);
            _is.read(channel_id, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)location,"location");
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(channel_id,"channel_id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)location, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(channel_id, false);
            return _os;
        }
    public:
        accessory_rec::Location location;
        std::string lid;
        std::string cid;
        std::string vid;
        taf::Int32 channel_id;
    };
    inline bool operator==(const AccessoryRecRequest&l, const AccessoryRecRequest&r)
    {
        return l.location == r.location && l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.channel_id == r.channel_id;
    }
    inline bool operator!=(const AccessoryRecRequest&l, const AccessoryRecRequest&r)
    {
        return !(l == r);
    }

    struct AccessoryRecResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "accessory_rec.AccessoryRecResponse";
        }
        static string MD5()
        {
            return "519f8b707d3151a89a4ba6b96b5c1836";
        }
        AccessoryRecResponse()
        :err_code(0)
        {
        }
        void resetDefautlt()
        {
            err_code = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(err_code, 0);
            _os.write(accessory_item_list, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(err_code, 0, true);
            _is.read(accessory_item_list, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(err_code,"err_code");
            _ds.display(accessory_item_list,"accessory_item_list");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(err_code, true);
            _ds.displaySimple(accessory_item_list, false);
            return _os;
        }
    public:
        taf::Int32 err_code;
        vector<accessory_rec::AccessoryItem> accessory_item_list;
    };
    inline bool operator==(const AccessoryRecResponse&l, const AccessoryRecResponse&r)
    {
        return l.err_code == r.err_code && l.accessory_item_list == r.accessory_item_list;
    }
    inline bool operator!=(const AccessoryRecResponse&l, const AccessoryRecResponse&r)
    {
        return !(l == r);
    }

    struct AccessoryRecSimpleRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "accessory_rec.AccessoryRecSimpleRequest";
        }
        static string MD5()
        {
            return "aea5c86b6891955e7220f787bc1b9441";
        }
        AccessoryRecSimpleRequest()
        :location(accessory_rec::LOCATION_APP_BANNER),lid(""),cid(""),vid("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)location, 0);
            _os.write(lid, 1);
            _os.write(cid, 2);
            _os.write(vid, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = accessory_rec::LOCATION_APP_BANNER;
            _is.read(eTemp0, 0, true);
            location = (accessory_rec::Location)eTemp0;
            _is.read(lid, 1, false);
            _is.read(cid, 2, false);
            _is.read(vid, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)location,"location");
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)location, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        accessory_rec::Location location;
        std::string lid;
        std::string cid;
        std::string vid;
    };
    inline bool operator==(const AccessoryRecSimpleRequest&l, const AccessoryRecSimpleRequest&r)
    {
        return l.location == r.location && l.lid == r.lid && l.cid == r.cid && l.vid == r.vid;
    }
    inline bool operator!=(const AccessoryRecSimpleRequest&l, const AccessoryRecSimpleRequest&r)
    {
        return !(l == r);
    }

    struct AccessoryRecSimpleResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "accessory_rec.AccessoryRecSimpleResponse";
        }
        static string MD5()
        {
            return "40ea8be5f8ebf66d0574f44a2d4154e0";
        }
        AccessoryRecSimpleResponse()
        :err_code(0),err_msg("")
        {
        }
        void resetDefautlt()
        {
            err_code = 0;
            err_msg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(err_code, 0);
            _os.write(err_msg, 1);
            _os.write(vec_task, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(err_code, 0, true);
            _is.read(err_msg, 1, false);
            _is.read(vec_task, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(err_code,"err_code");
            _ds.display(err_msg,"err_msg");
            _ds.display(vec_task,"vec_task");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(err_code, true);
            _ds.displaySimple(err_msg, true);
            _ds.displaySimple(vec_task, false);
            return _os;
        }
    public:
        taf::Int32 err_code;
        std::string err_msg;
        vector<accessory_rec::SimpleAccessoryItem> vec_task;
    };
    inline bool operator==(const AccessoryRecSimpleResponse&l, const AccessoryRecSimpleResponse&r)
    {
        return l.err_code == r.err_code && l.err_msg == r.err_msg && l.vec_task == r.vec_task;
    }
    inline bool operator!=(const AccessoryRecSimpleResponse&l, const AccessoryRecSimpleResponse&r)
    {
        return !(l == r);
    }

    struct AccessoryRecWebRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "accessory_rec.AccessoryRecWebRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        AccessoryRecWebRequest()
        :lid(""),cid(""),vid("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, false);
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
    };
    inline bool operator==(const AccessoryRecWebRequest&l, const AccessoryRecWebRequest&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid;
    }
    inline bool operator!=(const AccessoryRecWebRequest&l, const AccessoryRecWebRequest&r)
    {
        return !(l == r);
    }

    struct AccessoryRecWebResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "accessory_rec.AccessoryRecWebResponse";
        }
        static string MD5()
        {
            return "af4eea078ec84999abea811406b92fcc";
        }
        AccessoryRecWebResponse()
        :err_code(0),err_msg("")
        {
        }
        void resetDefautlt()
        {
            err_code = 0;
            err_msg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(err_code, 0);
            _os.write(err_msg, 1);
            _os.write(h5_item, 2);
            _os.write(vplus_user_item, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(err_code, 0, true);
            _is.read(err_msg, 1, false);
            _is.read(h5_item, 2, false);
            _is.read(vplus_user_item, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(err_code,"err_code");
            _ds.display(err_msg,"err_msg");
            _ds.display(h5_item,"h5_item");
            _ds.display(vplus_user_item,"vplus_user_item");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(err_code, true);
            _ds.displaySimple(err_msg, true);
            _ds.displaySimple(h5_item, true);
            _ds.displaySimple(vplus_user_item, false);
            return _os;
        }
    public:
        taf::Int32 err_code;
        std::string err_msg;
        accessory_rec::H5Item h5_item;
        accessory_rec::VplusUserItem vplus_user_item;
    };
    inline bool operator==(const AccessoryRecWebResponse&l, const AccessoryRecWebResponse&r)
    {
        return l.err_code == r.err_code && l.err_msg == r.err_msg && l.h5_item == r.h5_item && l.vplus_user_item == r.vplus_user_item;
    }
    inline bool operator!=(const AccessoryRecWebResponse&l, const AccessoryRecWebResponse&r)
    {
        return !(l == r);
    }


}

#define accessory_rec_H5Item_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.c_id,b.c_id);jce_copy_struct(a.title,b.title);jce_copy_struct(a.sub_title,b.sub_title);jce_copy_struct(a.action_url,b.action_url);jce_copy_struct(a.image_url,b.image_url);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define accessory_rec_RecInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.alg,b.alg);jce_copy_struct(a.report_key,b.report_key);jce_copy_struct(a.report_value,b.report_value);

#define accessory_rec_AppItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.c_id,b.c_id);jce_copy_struct(a.name,b.name);jce_copy_struct(a.title,b.title);jce_copy_struct(a.sub_title,b.sub_title);jce_copy_struct(a.image_url,b.image_url);jce_copy_struct(a.android_down_url,b.android_down_url);jce_copy_struct(a.android_open_url,b.android_open_url);jce_copy_struct(a.android_has_gift,b.android_has_gift);jce_copy_struct(a.iphone_down_url,b.iphone_down_url);jce_copy_struct(a.iphone_open_url,b.iphone_open_url);jce_copy_struct(a.iphone_has_gift,b.iphone_has_gift);jce_copy_struct(a.fid,b.fid);jce_copy_struct(a.app_id,b.app_id);jce_copy_struct(a.version_code,b.version_code);jce_copy_struct(a.rec_info,b.rec_info);jce_copy_struct(a.via,b.via);jce_copy_struct(a.blank_url,b.blank_url);jce_copy_struct(a.md5,b.md5);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define accessory_rec_VplusUserItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uin,b.uin);jce_copy_struct(a.nick,b.nick);jce_copy_struct(a.avatar,b.avatar);jce_copy_struct(a.subscription,b.subscription);jce_copy_struct(a.count,b.count);jce_copy_struct(a.euin,b.euin);jce_copy_struct(a.isvpp,b.isvpp);jce_copy_struct(a.urlfull,b.urlfull);jce_copy_struct(a.info,b.info);jce_copy_struct(a.upload_src,b.upload_src);jce_copy_struct(a.video_count,b.video_count);jce_copy_struct(a.user_type,b.user_type);

#define accessory_rec_AccessoryItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.location,b.location);jce_copy_struct(a.h5_item,b.h5_item);jce_copy_struct(a.app_item,b.app_item);

#define accessory_rec_SimpleAccessoryItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.item_id,b.item_id);jce_copy_struct(a.item_flag,b.item_flag);jce_copy_struct(a.is_top,b.is_top);jce_copy_struct(a.title,b.title);

#define accessory_rec_AccessoryRecRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.location,b.location);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.channel_id,b.channel_id);

#define accessory_rec_AccessoryRecResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.err_code,b.err_code);jce_copy_struct(a.accessory_item_list,b.accessory_item_list);

#define accessory_rec_AccessoryRecSimpleRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.location,b.location);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);

#define accessory_rec_AccessoryRecSimpleResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.err_code,b.err_code);jce_copy_struct(a.err_msg,b.err_msg);jce_copy_struct(a.vec_task,b.vec_task);

#define accessory_rec_AccessoryRecWebRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);

#define accessory_rec_AccessoryRecWebResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.err_code,b.err_code);jce_copy_struct(a.err_msg,b.err_msg);jce_copy_struct(a.h5_item,b.h5_item);jce_copy_struct(a.vplus_user_item,b.vplus_user_item);



#endif
