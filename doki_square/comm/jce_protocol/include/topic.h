// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `topic.jce'
// **********************************************************************

#ifndef __TOPIC_H_
#define __TOPIC_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"


namespace topic_ugc
{
    enum RequestCommand
    {
        CreateTopic = 61578,
        DeleteTopic = 61581,
        ModifyTopic = 61582,
        GetTopic = 61583,
        SearchTopicByTitle = 61584,
        SearchTopicsForPub = 61846,
        GetTopicList = 61585,
        GetPostList = 61632,
        PubBox_GetTopics = 61641,
        DetailPage_GetTopics = 59679,
        OperationPage_GetTopics = 59589,
        DetailPage_GetTopicDetail = 61643,
        GetHotTopics = 62168,
        GetPubHasTopics = 62174,
        GetRelatedTopics = 62429,
        StarTopic_Create = 61762,
        StarTopic_Modify = 61763,
        StarTopic_Delete = 61768,
        ShareRelay = 60063,
        CMD_GetTopicListRequest = 62971,
        CMD_GetTopicDetailRequest = 62972,
        CMD_AddDelModifyTopic = 62818,
    };
    inline string etos(const RequestCommand & e)
    {
        switch(e)
        {
            case CreateTopic: return "CreateTopic";
            case DeleteTopic: return "DeleteTopic";
            case ModifyTopic: return "ModifyTopic";
            case GetTopic: return "GetTopic";
            case SearchTopicByTitle: return "SearchTopicByTitle";
            case SearchTopicsForPub: return "SearchTopicsForPub";
            case GetTopicList: return "GetTopicList";
            case GetPostList: return "GetPostList";
            case PubBox_GetTopics: return "PubBox_GetTopics";
            case DetailPage_GetTopics: return "DetailPage_GetTopics";
            case OperationPage_GetTopics: return "OperationPage_GetTopics";
            case DetailPage_GetTopicDetail: return "DetailPage_GetTopicDetail";
            case GetHotTopics: return "GetHotTopics";
            case GetPubHasTopics: return "GetPubHasTopics";
            case GetRelatedTopics: return "GetRelatedTopics";
            case StarTopic_Create: return "StarTopic_Create";
            case StarTopic_Modify: return "StarTopic_Modify";
            case StarTopic_Delete: return "StarTopic_Delete";
            case ShareRelay: return "ShareRelay";
            case CMD_GetTopicListRequest: return "CMD_GetTopicListRequest";
            case CMD_GetTopicDetailRequest: return "CMD_GetTopicDetailRequest";
            case CMD_AddDelModifyTopic: return "CMD_AddDelModifyTopic";
            default: return "";
        }
    }
    inline int stoe(const string & s, RequestCommand & e)
    {
        if(s == "CreateTopic")  { e=CreateTopic; return 0;}
        if(s == "DeleteTopic")  { e=DeleteTopic; return 0;}
        if(s == "ModifyTopic")  { e=ModifyTopic; return 0;}
        if(s == "GetTopic")  { e=GetTopic; return 0;}
        if(s == "SearchTopicByTitle")  { e=SearchTopicByTitle; return 0;}
        if(s == "SearchTopicsForPub")  { e=SearchTopicsForPub; return 0;}
        if(s == "GetTopicList")  { e=GetTopicList; return 0;}
        if(s == "GetPostList")  { e=GetPostList; return 0;}
        if(s == "PubBox_GetTopics")  { e=PubBox_GetTopics; return 0;}
        if(s == "DetailPage_GetTopics")  { e=DetailPage_GetTopics; return 0;}
        if(s == "OperationPage_GetTopics")  { e=OperationPage_GetTopics; return 0;}
        if(s == "DetailPage_GetTopicDetail")  { e=DetailPage_GetTopicDetail; return 0;}
        if(s == "GetHotTopics")  { e=GetHotTopics; return 0;}
        if(s == "GetPubHasTopics")  { e=GetPubHasTopics; return 0;}
        if(s == "GetRelatedTopics")  { e=GetRelatedTopics; return 0;}
        if(s == "StarTopic_Create")  { e=StarTopic_Create; return 0;}
        if(s == "StarTopic_Modify")  { e=StarTopic_Modify; return 0;}
        if(s == "StarTopic_Delete")  { e=StarTopic_Delete; return 0;}
        if(s == "ShareRelay")  { e=ShareRelay; return 0;}
        if(s == "CMD_GetTopicListRequest")  { e=CMD_GetTopicListRequest; return 0;}
        if(s == "CMD_GetTopicDetailRequest")  { e=CMD_GetTopicDetailRequest; return 0;}
        if(s == "CMD_AddDelModifyTopic")  { e=CMD_AddDelModifyTopic; return 0;}

        return -1;
    }

    struct TopicSummary : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.TopicSummary";
        }
        static string MD5()
        {
            return "a58a93bbf4ba849597f65a80d4db75c4";
        }
        TopicSummary()
        :id(""),title(""),brief(""),actionUrl(""),targetId(""),pvCount(0),feedCount(0)
        {
        }
        void resetDefautlt()
        {
            id = "";
            title = "";
            brief = "";
            actionUrl = "";
            targetId = "";
            pvCount = 0;
            feedCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(title, 1);
            _os.write(brief, 2);
            _os.write(actionUrl, 3);
            _os.write(starNames, 7);
            _os.write(playNames, 8);
            _os.write(photos, 9);
            _os.write(targetId, 10);
            _os.write(pvCount, 11);
            _os.write(feedCount, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, false);
            _is.read(title, 1, false);
            _is.read(brief, 2, false);
            _is.read(actionUrl, 3, false);
            _is.read(starNames, 7, false);
            _is.read(playNames, 8, false);
            _is.read(photos, 9, false);
            _is.read(targetId, 10, false);
            _is.read(pvCount, 11, false);
            _is.read(feedCount, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(title,"title");
            _ds.display(brief,"brief");
            _ds.display(actionUrl,"actionUrl");
            _ds.display(starNames,"starNames");
            _ds.display(playNames,"playNames");
            _ds.display(photos,"photos");
            _ds.display(targetId,"targetId");
            _ds.display(pvCount,"pvCount");
            _ds.display(feedCount,"feedCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(brief, true);
            _ds.displaySimple(actionUrl, true);
            _ds.displaySimple(starNames, true);
            _ds.displaySimple(playNames, true);
            _ds.displaySimple(photos, true);
            _ds.displaySimple(targetId, true);
            _ds.displaySimple(pvCount, true);
            _ds.displaySimple(feedCount, false);
            return _os;
        }
    public:
        std::string id;
        std::string title;
        std::string brief;
        std::string actionUrl;
        vector<std::string> starNames;
        vector<std::string> playNames;
        vector<jce::CircleMsgImageUrl> photos;
        std::string targetId;
        taf::Int32 pvCount;
        taf::Int32 feedCount;
    };
    inline bool operator==(const TopicSummary&l, const TopicSummary&r)
    {
        return l.id == r.id && l.title == r.title && l.brief == r.brief && l.actionUrl == r.actionUrl && l.starNames == r.starNames && l.playNames == r.playNames && l.photos == r.photos && l.targetId == r.targetId && l.pvCount == r.pvCount && l.feedCount == r.feedCount;
    }
    inline bool operator!=(const TopicSummary&l, const TopicSummary&r)
    {
        return !(l == r);
    }

    struct TopicBase : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.TopicBase";
        }
        static string MD5()
        {
            return "744a3395b36deeb3bac1dd65cd000766";
        }
        TopicBase()
        :id(""),title(""),brief(""),sponsor(""),createTime(0),startTime(0),endTime(0),sponsorType(""),sponsorAccountType(0),shareInfo(""),type(0),music(""),channelCategory(0)
        {
        }
        void resetDefautlt()
        {
            id = "";
            title = "";
            brief = "";
            sponsor = "";
            createTime = 0;
            startTime = 0;
            endTime = 0;
            sponsorType = "";
            sponsorAccountType = 0;
            shareInfo = "";
            type = 0;
            music = "";
            channelCategory = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(title, 1);
            _os.write(brief, 2);
            _os.write(sponsor, 3);
            _os.write(createTime, 4);
            _os.write(startTime, 5);
            _os.write(endTime, 6);
            _os.write(starIds, 7);
            _os.write(cids, 8);
            _os.write(vids, 9);
            _os.write(lids, 10);
            _os.write(photos, 11);
            _os.write(sponsorType, 12);
            _os.write(sponsorAccountType, 13);
            _os.write(shareInfo, 14);
            _os.write(activeidList, 15);
            _os.write(type, 16);
            _os.write(music, 17);
            _os.write(channelCategory, 18);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, false);
            _is.read(title, 1, false);
            _is.read(brief, 2, false);
            _is.read(sponsor, 3, false);
            _is.read(createTime, 4, false);
            _is.read(startTime, 5, false);
            _is.read(endTime, 6, false);
            _is.read(starIds, 7, false);
            _is.read(cids, 8, false);
            _is.read(vids, 9, false);
            _is.read(lids, 10, false);
            _is.read(photos, 11, false);
            _is.read(sponsorType, 12, false);
            _is.read(sponsorAccountType, 13, false);
            _is.read(shareInfo, 14, false);
            _is.read(activeidList, 15, false);
            _is.read(type, 16, false);
            _is.read(music, 17, false);
            _is.read(channelCategory, 18, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(title,"title");
            _ds.display(brief,"brief");
            _ds.display(sponsor,"sponsor");
            _ds.display(createTime,"createTime");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(starIds,"starIds");
            _ds.display(cids,"cids");
            _ds.display(vids,"vids");
            _ds.display(lids,"lids");
            _ds.display(photos,"photos");
            _ds.display(sponsorType,"sponsorType");
            _ds.display(sponsorAccountType,"sponsorAccountType");
            _ds.display(shareInfo,"shareInfo");
            _ds.display(activeidList,"activeidList");
            _ds.display(type,"type");
            _ds.display(music,"music");
            _ds.display(channelCategory,"channelCategory");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(brief, true);
            _ds.displaySimple(sponsor, true);
            _ds.displaySimple(createTime, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(starIds, true);
            _ds.displaySimple(cids, true);
            _ds.displaySimple(vids, true);
            _ds.displaySimple(lids, true);
            _ds.displaySimple(photos, true);
            _ds.displaySimple(sponsorType, true);
            _ds.displaySimple(sponsorAccountType, true);
            _ds.displaySimple(shareInfo, true);
            _ds.displaySimple(activeidList, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(music, true);
            _ds.displaySimple(channelCategory, false);
            return _os;
        }
    public:
        std::string id;
        std::string title;
        std::string brief;
        std::string sponsor;
        taf::Int64 createTime;
        taf::Int64 startTime;
        taf::Int64 endTime;
        vector<std::string> starIds;
        vector<std::string> cids;
        vector<std::string> vids;
        vector<std::string> lids;
        vector<jce::CircleMsgImageUrl> photos;
        std::string sponsorType;
        taf::Int32 sponsorAccountType;
        std::string shareInfo;
        vector<taf::Int64> activeidList;
        taf::Int32 type;
        std::string music;
        taf::Int32 channelCategory;
    };
    inline bool operator==(const TopicBase&l, const TopicBase&r)
    {
        return l.id == r.id && l.title == r.title && l.brief == r.brief && l.sponsor == r.sponsor && l.createTime == r.createTime && l.startTime == r.startTime && l.endTime == r.endTime && l.starIds == r.starIds && l.cids == r.cids && l.vids == r.vids && l.lids == r.lids && l.photos == r.photos && l.sponsorType == r.sponsorType && l.sponsorAccountType == r.sponsorAccountType && l.shareInfo == r.shareInfo && l.activeidList == r.activeidList && l.type == r.type && l.music == r.music && l.channelCategory == r.channelCategory;
    }
    inline bool operator!=(const TopicBase&l, const TopicBase&r)
    {
        return !(l == r);
    }

    struct TopicInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.TopicInfo";
        }
        static string MD5()
        {
            return "ec870e0b95172bdfeab167ec4bcdf228";
        }
        TopicInfo()
        :score(0),postCount(0),replyCount(0),readCount(0),thumbCount(0),followCount(0),scoreBase(0),reserve(0),titleFlag(0),namesakeId(""),strReserve(""),status(0)
        {
        }
        void resetDefautlt()
        {
            score = 0;
            postCount = 0;
            replyCount = 0;
            readCount = 0;
            thumbCount = 0;
            followCount = 0;
            scoreBase = 0;
            reserve = 0;
            titleFlag = 0;
            namesakeId = "";
            strReserve = "";
            status = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(topicBase, 0);
            _os.write(score, 1);
            _os.write(postCount, 2);
            _os.write(replyCount, 3);
            _os.write(readCount, 4);
            _os.write(thumbCount, 5);
            _os.write(followCount, 6);
            _os.write(scoreBase, 7);
            _os.write(reserve, 8);
            _os.write(titleFlag, 9);
            _os.write(namesakeId, 10);
            _os.write(strReserve, 11);
            _os.write(status, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(topicBase, 0, false);
            _is.read(score, 1, false);
            _is.read(postCount, 2, false);
            _is.read(replyCount, 3, false);
            _is.read(readCount, 4, false);
            _is.read(thumbCount, 5, false);
            _is.read(followCount, 6, false);
            _is.read(scoreBase, 7, false);
            _is.read(reserve, 8, false);
            _is.read(titleFlag, 9, false);
            _is.read(namesakeId, 10, false);
            _is.read(strReserve, 11, false);
            _is.read(status, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(topicBase,"topicBase");
            _ds.display(score,"score");
            _ds.display(postCount,"postCount");
            _ds.display(replyCount,"replyCount");
            _ds.display(readCount,"readCount");
            _ds.display(thumbCount,"thumbCount");
            _ds.display(followCount,"followCount");
            _ds.display(scoreBase,"scoreBase");
            _ds.display(reserve,"reserve");
            _ds.display(titleFlag,"titleFlag");
            _ds.display(namesakeId,"namesakeId");
            _ds.display(strReserve,"strReserve");
            _ds.display(status,"status");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(topicBase, true);
            _ds.displaySimple(score, true);
            _ds.displaySimple(postCount, true);
            _ds.displaySimple(replyCount, true);
            _ds.displaySimple(readCount, true);
            _ds.displaySimple(thumbCount, true);
            _ds.displaySimple(followCount, true);
            _ds.displaySimple(scoreBase, true);
            _ds.displaySimple(reserve, true);
            _ds.displaySimple(titleFlag, true);
            _ds.displaySimple(namesakeId, true);
            _ds.displaySimple(strReserve, true);
            _ds.displaySimple(status, false);
            return _os;
        }
    public:
        topic_ugc::TopicBase topicBase;
        taf::Int32 score;
        taf::Int32 postCount;
        taf::Int32 replyCount;
        taf::Int32 readCount;
        taf::Int32 thumbCount;
        taf::Int32 followCount;
        taf::Int32 scoreBase;
        taf::Int32 reserve;
        taf::Int32 titleFlag;
        std::string namesakeId;
        std::string strReserve;
        taf::Int32 status;
    };
    inline bool operator==(const TopicInfo&l, const TopicInfo&r)
    {
        return l.topicBase == r.topicBase && l.score == r.score && l.postCount == r.postCount && l.replyCount == r.replyCount && l.readCount == r.readCount && l.thumbCount == r.thumbCount && l.followCount == r.followCount && l.scoreBase == r.scoreBase && l.reserve == r.reserve && l.titleFlag == r.titleFlag && l.namesakeId == r.namesakeId && l.strReserve == r.strReserve && l.status == r.status;
    }
    inline bool operator!=(const TopicInfo&l, const TopicInfo&r)
    {
        return !(l == r);
    }

    struct PostInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.PostInfo";
        }
        static string MD5()
        {
            return "ea7b7185a233bbc9a5ec4f5ef339e7e2";
        }
        PostInfo()
        :postId(""),topicId(""),readCount(0),replyCount(0),thumbCount(0),createTime(0)
        {
        }
        void resetDefautlt()
        {
            postId = "";
            topicId = "";
            readCount = 0;
            replyCount = 0;
            thumbCount = 0;
            createTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(postId, 0);
            _os.write(topicId, 1);
            _os.write(readCount, 2);
            _os.write(replyCount, 3);
            _os.write(thumbCount, 4);
            _os.write(createTime, 5);
            _os.write(topicIds, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(postId, 0, false);
            _is.read(topicId, 1, false);
            _is.read(readCount, 2, false);
            _is.read(replyCount, 3, false);
            _is.read(thumbCount, 4, false);
            _is.read(createTime, 5, false);
            _is.read(topicIds, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(postId,"postId");
            _ds.display(topicId,"topicId");
            _ds.display(readCount,"readCount");
            _ds.display(replyCount,"replyCount");
            _ds.display(thumbCount,"thumbCount");
            _ds.display(createTime,"createTime");
            _ds.display(topicIds,"topicIds");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(postId, true);
            _ds.displaySimple(topicId, true);
            _ds.displaySimple(readCount, true);
            _ds.displaySimple(replyCount, true);
            _ds.displaySimple(thumbCount, true);
            _ds.displaySimple(createTime, true);
            _ds.displaySimple(topicIds, false);
            return _os;
        }
    public:
        std::string postId;
        std::string topicId;
        taf::Int32 readCount;
        taf::Int32 replyCount;
        taf::Int32 thumbCount;
        taf::Int32 createTime;
        vector<std::string> topicIds;
    };
    inline bool operator==(const PostInfo&l, const PostInfo&r)
    {
        return l.postId == r.postId && l.topicId == r.topicId && l.readCount == r.readCount && l.replyCount == r.replyCount && l.thumbCount == r.thumbCount && l.createTime == r.createTime && l.topicIds == r.topicIds;
    }
    inline bool operator!=(const PostInfo&l, const PostInfo&r)
    {
        return !(l == r);
    }

    struct CreateTopicRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.CreateTopicRequest";
        }
        static string MD5()
        {
            return "1e326d7f6137d7127ffd6c468d8f006f";
        }
        CreateTopicRequest()
        :targetId("")
        {
        }
        void resetDefautlt()
        {
            targetId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(topicBase, 0);
            _os.write(targetId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(topicBase, 0, true);
            _is.read(targetId, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(topicBase,"topicBase");
            _ds.display(targetId,"targetId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(topicBase, true);
            _ds.displaySimple(targetId, false);
            return _os;
        }
    public:
        topic_ugc::TopicBase topicBase;
        std::string targetId;
    };
    inline bool operator==(const CreateTopicRequest&l, const CreateTopicRequest&r)
    {
        return l.topicBase == r.topicBase && l.targetId == r.targetId;
    }
    inline bool operator!=(const CreateTopicRequest&l, const CreateTopicRequest&r)
    {
        return !(l == r);
    }

    struct CreateTopicResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.CreateTopicResp";
        }
        static string MD5()
        {
            return "1e37d0fba10fe9efa261467f259f5dd0";
        }
        CreateTopicResp()
        :errorCode(0),topicId(""),title(""),shareErrCode(0),shareCircleUrl("")
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            topicId = "";
            title = "";
            shareErrCode = 0;
            shareCircleUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(topicId, 1);
            _os.write(title, 2);
            _os.write(shareErrCode, 3);
            _os.write(shareCircleUrl, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(topicId, 1, true);
            _is.read(title, 2, false);
            _is.read(shareErrCode, 3, false);
            _is.read(shareCircleUrl, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(topicId,"topicId");
            _ds.display(title,"title");
            _ds.display(shareErrCode,"shareErrCode");
            _ds.display(shareCircleUrl,"shareCircleUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(topicId, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(shareErrCode, true);
            _ds.displaySimple(shareCircleUrl, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        std::string topicId;
        std::string title;
        taf::Int32 shareErrCode;
        std::string shareCircleUrl;
    };
    inline bool operator==(const CreateTopicResp&l, const CreateTopicResp&r)
    {
        return l.errorCode == r.errorCode && l.topicId == r.topicId && l.title == r.title && l.shareErrCode == r.shareErrCode && l.shareCircleUrl == r.shareCircleUrl;
    }
    inline bool operator!=(const CreateTopicResp&l, const CreateTopicResp&r)
    {
        return !(l == r);
    }

    struct DeleteTopicRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.DeleteTopicRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        DeleteTopicRequest()
        :topicId("")
        {
        }
        void resetDefautlt()
        {
            topicId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(topicId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(topicId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(topicId,"topicId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(topicId, false);
            return _os;
        }
    public:
        std::string topicId;
    };
    inline bool operator==(const DeleteTopicRequest&l, const DeleteTopicRequest&r)
    {
        return l.topicId == r.topicId;
    }
    inline bool operator!=(const DeleteTopicRequest&l, const DeleteTopicRequest&r)
    {
        return !(l == r);
    }

    struct DeleteTopicResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.DeleteTopicResp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        DeleteTopicResp()
        :errorCode(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
    };
    inline bool operator==(const DeleteTopicResp&l, const DeleteTopicResp&r)
    {
        return l.errorCode == r.errorCode;
    }
    inline bool operator!=(const DeleteTopicResp&l, const DeleteTopicResp&r)
    {
        return !(l == r);
    }

    struct ModifyTopicRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.ModifyTopicRequest";
        }
        static string MD5()
        {
            return "477b7e8a67019306bac9eb62be0576b5";
        }
        ModifyTopicRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(topicInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(topicInfo, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(topicInfo,"topicInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(topicInfo, false);
            return _os;
        }
    public:
        topic_ugc::TopicInfo topicInfo;
    };
    inline bool operator==(const ModifyTopicRequest&l, const ModifyTopicRequest&r)
    {
        return l.topicInfo == r.topicInfo;
    }
    inline bool operator!=(const ModifyTopicRequest&l, const ModifyTopicRequest&r)
    {
        return !(l == r);
    }

    struct ModifyTopicResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.ModifyTopicResp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        ModifyTopicResp()
        :errorCode(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
    };
    inline bool operator==(const ModifyTopicResp&l, const ModifyTopicResp&r)
    {
        return l.errorCode == r.errorCode;
    }
    inline bool operator!=(const ModifyTopicResp&l, const ModifyTopicResp&r)
    {
        return !(l == r);
    }

    struct GetTopicRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetTopicRequest";
        }
        static string MD5()
        {
            return "30fae931f15f68257d76e01ad4f09150";
        }
        GetTopicRequest()
        :topicId(""),reqSrc(0),needFeeds(0),pageContext("")
        {
        }
        void resetDefautlt()
        {
            topicId = "";
            reqSrc = 0;
            needFeeds = 0;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(topicId, 0);
            _os.write(reqSrc, 1);
            _os.write(needFeeds, 2);
            _os.write(pageContext, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(topicId, 0, true);
            _is.read(reqSrc, 1, false);
            _is.read(needFeeds, 2, false);
            _is.read(pageContext, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(topicId,"topicId");
            _ds.display(reqSrc,"reqSrc");
            _ds.display(needFeeds,"needFeeds");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(topicId, true);
            _ds.displaySimple(reqSrc, true);
            _ds.displaySimple(needFeeds, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string topicId;
        taf::Int32 reqSrc;
        taf::Int32 needFeeds;
        std::string pageContext;
    };
    inline bool operator==(const GetTopicRequest&l, const GetTopicRequest&r)
    {
        return l.topicId == r.topicId && l.reqSrc == r.reqSrc && l.needFeeds == r.needFeeds && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetTopicRequest&l, const GetTopicRequest&r)
    {
        return !(l == r);
    }

    struct GetTopicResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetTopicResp";
        }
        static string MD5()
        {
            return "38bfed8d0b7b06dd9dddcbc152d69534";
        }
        GetTopicResp()
        :errorCode(0),pageContext(""),sponsorName(""),sponsorFaceUrl(""),postDataKey(""),extraKey("")
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            pageContext = "";
            sponsorName = "";
            sponsorFaceUrl = "";
            postDataKey = "";
            extraKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(topicInfo, 1);
            _os.write(feeds, 2);
            _os.write(pageContext, 3);
            _os.write(sponsorName, 4);
            _os.write(sponsorFaceUrl, 5);
            _os.write(starNames, 6);
            _os.write(cidNames, 7);
            _os.write(lidNames, 8);
            _os.write(vedioDokiIds, 9);
            _os.write(postDataKey, 10);
            _os.write(extraKey, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(topicInfo, 1, false);
            _is.read(feeds, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(sponsorName, 4, false);
            _is.read(sponsorFaceUrl, 5, false);
            _is.read(starNames, 6, false);
            _is.read(cidNames, 7, false);
            _is.read(lidNames, 8, false);
            _is.read(vedioDokiIds, 9, false);
            _is.read(postDataKey, 10, false);
            _is.read(extraKey, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(topicInfo,"topicInfo");
            _ds.display(feeds,"feeds");
            _ds.display(pageContext,"pageContext");
            _ds.display(sponsorName,"sponsorName");
            _ds.display(sponsorFaceUrl,"sponsorFaceUrl");
            _ds.display(starNames,"starNames");
            _ds.display(cidNames,"cidNames");
            _ds.display(lidNames,"lidNames");
            _ds.display(vedioDokiIds,"vedioDokiIds");
            _ds.display(postDataKey,"postDataKey");
            _ds.display(extraKey,"extraKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(topicInfo, true);
            _ds.displaySimple(feeds, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(sponsorName, true);
            _ds.displaySimple(sponsorFaceUrl, true);
            _ds.displaySimple(starNames, true);
            _ds.displaySimple(cidNames, true);
            _ds.displaySimple(lidNames, true);
            _ds.displaySimple(vedioDokiIds, true);
            _ds.displaySimple(postDataKey, true);
            _ds.displaySimple(extraKey, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        topic_ugc::TopicInfo topicInfo;
        vector<jce::CirclePrimaryFeed> feeds;
        std::string pageContext;
        std::string sponsorName;
        std::string sponsorFaceUrl;
        vector<std::string> starNames;
        vector<std::string> cidNames;
        vector<std::string> lidNames;
        vector<std::string> vedioDokiIds;
        std::string postDataKey;
        std::string extraKey;
    };
    inline bool operator==(const GetTopicResp&l, const GetTopicResp&r)
    {
        return l.errorCode == r.errorCode && l.topicInfo == r.topicInfo && l.feeds == r.feeds && l.pageContext == r.pageContext && l.sponsorName == r.sponsorName && l.sponsorFaceUrl == r.sponsorFaceUrl && l.starNames == r.starNames && l.cidNames == r.cidNames && l.lidNames == r.lidNames && l.vedioDokiIds == r.vedioDokiIds && l.postDataKey == r.postDataKey && l.extraKey == r.extraKey;
    }
    inline bool operator!=(const GetTopicResp&l, const GetTopicResp&r)
    {
        return !(l == r);
    }

    struct SearchTopicRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.SearchTopicRequest";
        }
        static string MD5()
        {
            return "9bda4ac16227127f47ea815aed6f8d9e";
        }
        SearchTopicRequest()
        :title(""),flag(0),reqSrc(0)
        {
        }
        void resetDefautlt()
        {
            title = "";
            flag = 0;
            reqSrc = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(flag, 1);
            _os.write(reqSrc, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(flag, 1, false);
            _is.read(reqSrc, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(flag,"flag");
            _ds.display(reqSrc,"reqSrc");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(flag, true);
            _ds.displaySimple(reqSrc, false);
            return _os;
        }
    public:
        std::string title;
        taf::Int32 flag;
        taf::Int32 reqSrc;
    };
    inline bool operator==(const SearchTopicRequest&l, const SearchTopicRequest&r)
    {
        return l.title == r.title && l.flag == r.flag && l.reqSrc == r.reqSrc;
    }
    inline bool operator!=(const SearchTopicRequest&l, const SearchTopicRequest&r)
    {
        return !(l == r);
    }

    struct SearchTopicResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.SearchTopicResp";
        }
        static string MD5()
        {
            return "05c1432a1dc92ac60b9d9c6161433e36";
        }
        SearchTopicResp()
        :errorCode(0),topicId(""),extraKey("")
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            topicId = "";
            extraKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(topicId, 1);
            _os.write(extraKey, 3);
            _os.write(topicIds, 4);
            _os.write(allTopicIds, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(topicId, 1, false);
            _is.read(extraKey, 3, false);
            _is.read(topicIds, 4, false);
            _is.read(allTopicIds, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(topicId,"topicId");
            _ds.display(extraKey,"extraKey");
            _ds.display(topicIds,"topicIds");
            _ds.display(allTopicIds,"allTopicIds");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(topicId, true);
            _ds.displaySimple(extraKey, true);
            _ds.displaySimple(topicIds, true);
            _ds.displaySimple(allTopicIds, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        std::string topicId;
        std::string extraKey;
        vector<std::string> topicIds;
        vector<std::string> allTopicIds;
    };
    inline bool operator==(const SearchTopicResp&l, const SearchTopicResp&r)
    {
        return l.errorCode == r.errorCode && l.topicId == r.topicId && l.extraKey == r.extraKey && l.topicIds == r.topicIds && l.allTopicIds == r.allTopicIds;
    }
    inline bool operator!=(const SearchTopicResp&l, const SearchTopicResp&r)
    {
        return !(l == r);
    }

    struct SearchTopicsForPubRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.SearchTopicsForPubRequest";
        }
        static string MD5()
        {
            return "14e6636632c63fdfafc03fddb6c460ba";
        }
        SearchTopicsForPubRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(titles, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(titles, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(titles,"titles");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(titles, false);
            return _os;
        }
    public:
        vector<std::string> titles;
    };
    inline bool operator==(const SearchTopicsForPubRequest&l, const SearchTopicsForPubRequest&r)
    {
        return l.titles == r.titles;
    }
    inline bool operator!=(const SearchTopicsForPubRequest&l, const SearchTopicsForPubRequest&r)
    {
        return !(l == r);
    }

    struct SearchTopicsForPubResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.SearchTopicsForPubResp";
        }
        static string MD5()
        {
            return "4266efb956b6e36e16eb878d8f96ce60";
        }
        SearchTopicsForPubResp()
        :errorCode(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(topicIds, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(topicIds, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(topicIds,"topicIds");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(topicIds, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        map<std::string, vector<jce::TopicInfoLite> > topicIds;
    };
    inline bool operator==(const SearchTopicsForPubResp&l, const SearchTopicsForPubResp&r)
    {
        return l.errorCode == r.errorCode && l.topicIds == r.topicIds;
    }
    inline bool operator!=(const SearchTopicsForPubResp&l, const SearchTopicsForPubResp&r)
    {
        return !(l == r);
    }

    struct GetTopicTopListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetTopicTopListRequest";
        }
        static string MD5()
        {
            return "ed6cf077317aff8098933a10621c5592";
        }
        GetTopicTopListRequest()
        :type(0),reqSrc(0),starId(""),cid(""),vid(""),startPage("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            reqSrc = 0;
            starId = "";
            cid = "";
            vid = "";
            startPage = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(reqSrc, 1);
            _os.write(starId, 2);
            _os.write(cid, 3);
            _os.write(vid, 4);
            _os.write(startPage, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(reqSrc, 1, true);
            _is.read(starId, 2, false);
            _is.read(cid, 3, false);
            _is.read(vid, 4, false);
            _is.read(startPage, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(reqSrc,"reqSrc");
            _ds.display(starId,"starId");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(startPage,"startPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(reqSrc, true);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(startPage, false);
            return _os;
        }
    public:
        taf::Int32 type;
        taf::Int32 reqSrc;
        std::string starId;
        std::string cid;
        std::string vid;
        std::string startPage;
    };
    inline bool operator==(const GetTopicTopListRequest&l, const GetTopicTopListRequest&r)
    {
        return l.type == r.type && l.reqSrc == r.reqSrc && l.starId == r.starId && l.cid == r.cid && l.vid == r.vid && l.startPage == r.startPage;
    }
    inline bool operator!=(const GetTopicTopListRequest&l, const GetTopicTopListRequest&r)
    {
        return !(l == r);
    }

    struct GetTopicTopListResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetTopicTopListResp";
        }
        static string MD5()
        {
            return "0f22c0a42f50f4c1385ce735fb4808e0";
        }
        GetTopicTopListResp()
        :errorCode(0),nextPage("")
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            nextPage = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(topics, 1);
            _os.write(nextPage, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(topics, 1, false);
            _is.read(nextPage, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(topics,"topics");
            _ds.display(nextPage,"nextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(topics, true);
            _ds.displaySimple(nextPage, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        vector<topic_ugc::TopicInfo> topics;
        std::string nextPage;
    };
    inline bool operator==(const GetTopicTopListResp&l, const GetTopicTopListResp&r)
    {
        return l.errorCode == r.errorCode && l.topics == r.topics && l.nextPage == r.nextPage;
    }
    inline bool operator!=(const GetTopicTopListResp&l, const GetTopicTopListResp&r)
    {
        return !(l == r);
    }

    struct GetPostsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetPostsRequest";
        }
        static string MD5()
        {
            return "c9a7b07e8b044d0fcbe9339d81fbbd69";
        }
        GetPostsRequest()
        :topicId(""),topicTitle(""),flag(0),startPage("")
        {
        }
        void resetDefautlt()
        {
            topicId = "";
            topicTitle = "";
            flag = 0;
            startPage = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(topicId, 0);
            _os.write(topicTitle, 1);
            _os.write(flag, 2);
            _os.write(startPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(topicId, 0, false);
            _is.read(topicTitle, 1, false);
            _is.read(flag, 2, false);
            _is.read(startPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(topicId,"topicId");
            _ds.display(topicTitle,"topicTitle");
            _ds.display(flag,"flag");
            _ds.display(startPage,"startPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(topicId, true);
            _ds.displaySimple(topicTitle, true);
            _ds.displaySimple(flag, true);
            _ds.displaySimple(startPage, false);
            return _os;
        }
    public:
        std::string topicId;
        std::string topicTitle;
        taf::Int32 flag;
        std::string startPage;
    };
    inline bool operator==(const GetPostsRequest&l, const GetPostsRequest&r)
    {
        return l.topicId == r.topicId && l.topicTitle == r.topicTitle && l.flag == r.flag && l.startPage == r.startPage;
    }
    inline bool operator!=(const GetPostsRequest&l, const GetPostsRequest&r)
    {
        return !(l == r);
    }

    struct GetPostsResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetPostsResp";
        }
        static string MD5()
        {
            return "f579325158696c842da2f6ec5e2adad0";
        }
        GetPostsResp()
        :errorCode(0),nextPage("")
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            nextPage = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(postId, 1);
            _os.write(nextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(postId, 1, false);
            _is.read(nextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(postId,"postId");
            _ds.display(nextPage,"nextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(postId, true);
            _ds.displaySimple(nextPage, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        vector<std::string> postId;
        std::string nextPage;
    };
    inline bool operator==(const GetPostsResp&l, const GetPostsResp&r)
    {
        return l.errorCode == r.errorCode && l.postId == r.postId && l.nextPage == r.nextPage;
    }
    inline bool operator!=(const GetPostsResp&l, const GetPostsResp&r)
    {
        return !(l == r);
    }

    struct GetHotTopicsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetHotTopicsRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        GetHotTopicsRequest()
        :dataKey(""),reqSrc(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            reqSrc = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(reqSrc, 1);
            _os.write(pageContext, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, false);
            _is.read(reqSrc, 1, false);
            _is.read(pageContext, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(reqSrc,"reqSrc");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(reqSrc, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string reqSrc;
        std::string pageContext;
    };
    inline bool operator==(const GetHotTopicsRequest&l, const GetHotTopicsRequest&r)
    {
        return l.dataKey == r.dataKey && l.reqSrc == r.reqSrc && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetHotTopicsRequest&l, const GetHotTopicsRequest&r)
    {
        return !(l == r);
    }

    struct GetHotTopicsResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetHotTopicsResp";
        }
        static string MD5()
        {
            return "0f22c0a42f50f4c1385ce735fb4808e0";
        }
        GetHotTopicsResp()
        :errorCode(0),pageContext("")
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(topics, 1);
            _os.write(pageContext, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(topics, 1, false);
            _is.read(pageContext, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(topics,"topics");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(topics, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        vector<topic_ugc::TopicInfo> topics;
        std::string pageContext;
    };
    inline bool operator==(const GetHotTopicsResp&l, const GetHotTopicsResp&r)
    {
        return l.errorCode == r.errorCode && l.topics == r.topics && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetHotTopicsResp&l, const GetHotTopicsResp&r)
    {
        return !(l == r);
    }

    struct GetPubHasTopicsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetPubHasTopicsRequest";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        GetPubHasTopicsRequest()
        :dataKey(""),cfrom(0)
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            cfrom = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(cfrom, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, false);
            _is.read(cfrom, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(cfrom,"cfrom");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(cfrom, false);
            return _os;
        }
    public:
        std::string dataKey;
        taf::Int32 cfrom;
    };
    inline bool operator==(const GetPubHasTopicsRequest&l, const GetPubHasTopicsRequest&r)
    {
        return l.dataKey == r.dataKey && l.cfrom == r.cfrom;
    }
    inline bool operator!=(const GetPubHasTopicsRequest&l, const GetPubHasTopicsRequest&r)
    {
        return !(l == r);
    }

    struct GetPubHasTopicsResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetPubHasTopicsResp";
        }
        static string MD5()
        {
            return "408e60de42621fb466c689ad63b72e43";
        }
        GetPubHasTopicsResp()
        :errorCode(0),errorMsg(""),bHaveTopics(false)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            errorMsg = "";
            bHaveTopics = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(errorMsg, 1);
            _os.write(bHaveTopics, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(errorMsg, 1, false);
            _is.read(bHaveTopics, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(errorMsg,"errorMsg");
            _ds.display(bHaveTopics,"bHaveTopics");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(errorMsg, true);
            _ds.displaySimple(bHaveTopics, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        std::string errorMsg;
        taf::Bool bHaveTopics;
    };
    inline bool operator==(const GetPubHasTopicsResp&l, const GetPubHasTopicsResp&r)
    {
        return l.errorCode == r.errorCode && l.errorMsg == r.errorMsg && l.bHaveTopics == r.bHaveTopics;
    }
    inline bool operator!=(const GetPubHasTopicsResp&l, const GetPubHasTopicsResp&r)
    {
        return !(l == r);
    }

    struct GetRelatedTopicsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetRelatedTopicsRequest";
        }
        static string MD5()
        {
            return "915ebbbe2c648474135d6b358498c531";
        }
        GetRelatedTopicsRequest()
        :dataKey(""),pageContext(""),scene(0),minCount(0),getAuto(0)
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
            scene = 0;
            minCount = 0;
            getAuto = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
            _os.write(scene, 2);
            _os.write(minCount, 3);
            _os.write(getAuto, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(scene, 2, false);
            _is.read(minCount, 3, false);
            _is.read(getAuto, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(scene,"scene");
            _ds.display(minCount,"minCount");
            _ds.display(getAuto,"getAuto");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(scene, true);
            _ds.displaySimple(minCount, true);
            _ds.displaySimple(getAuto, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
        taf::Int32 scene;
        taf::Int32 minCount;
        taf::Int32 getAuto;
    };
    inline bool operator==(const GetRelatedTopicsRequest&l, const GetRelatedTopicsRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.scene == r.scene && l.minCount == r.minCount && l.getAuto == r.getAuto;
    }
    inline bool operator!=(const GetRelatedTopicsRequest&l, const GetRelatedTopicsRequest&r)
    {
        return !(l == r);
    }

    struct GetRelatedTopicsResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetRelatedTopicsResp";
        }
        static string MD5()
        {
            return "86505240de9843865dee02faad0ce652";
        }
        GetRelatedTopicsResp()
        :errorCode(0),errorMsg(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            errorMsg = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(errorMsg, 1);
            _os.write(topicVec, 2);
            _os.write(pageContext, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(errorMsg, 1, false);
            _is.read(topicVec, 2, false);
            _is.read(pageContext, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(errorMsg,"errorMsg");
            _ds.display(topicVec,"topicVec");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(errorMsg, true);
            _ds.displaySimple(topicVec, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        std::string errorMsg;
        vector<topic_ugc::TopicSummary> topicVec;
        std::string pageContext;
    };
    inline bool operator==(const GetRelatedTopicsResp&l, const GetRelatedTopicsResp&r)
    {
        return l.errorCode == r.errorCode && l.errorMsg == r.errorMsg && l.topicVec == r.topicVec && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetRelatedTopicsResp&l, const GetRelatedTopicsResp&r)
    {
        return !(l == r);
    }

    struct GetTopicListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetTopicListRequest";
        }
        static string MD5()
        {
            return "2c90ab5bcb4e124c04114a55f9c2f9aa";
        }
        GetTopicListRequest()
        :type(0),reqSrc(0),topicType(0),pageSize(0),pageContext("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            reqSrc = 0;
            topicType = 0;
            pageSize = 0;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(reqSrc, 1);
            _os.write(topicType, 2);
            _os.write(pageSize, 3);
            _os.write(pageContext, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(reqSrc, 1, false);
            _is.read(topicType, 2, false);
            _is.read(pageSize, 3, false);
            _is.read(pageContext, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(reqSrc,"reqSrc");
            _ds.display(topicType,"topicType");
            _ds.display(pageSize,"pageSize");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(reqSrc, true);
            _ds.displaySimple(topicType, true);
            _ds.displaySimple(pageSize, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 type;
        taf::Int32 reqSrc;
        taf::Int32 topicType;
        taf::Int32 pageSize;
        std::string pageContext;
    };
    inline bool operator==(const GetTopicListRequest&l, const GetTopicListRequest&r)
    {
        return l.type == r.type && l.reqSrc == r.reqSrc && l.topicType == r.topicType && l.pageSize == r.pageSize && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetTopicListRequest&l, const GetTopicListRequest&r)
    {
        return !(l == r);
    }

    struct GetTopicListResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetTopicListResp";
        }
        static string MD5()
        {
            return "f579325158696c842da2f6ec5e2adad0";
        }
        GetTopicListResp()
        :errorCode(0),nextPageContext("")
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            nextPageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(topicIdList, 1);
            _os.write(nextPageContext, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(topicIdList, 1, false);
            _is.read(nextPageContext, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(topicIdList,"topicIdList");
            _ds.display(nextPageContext,"nextPageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(topicIdList, true);
            _ds.displaySimple(nextPageContext, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        vector<std::string> topicIdList;
        std::string nextPageContext;
    };
    inline bool operator==(const GetTopicListResp&l, const GetTopicListResp&r)
    {
        return l.errorCode == r.errorCode && l.topicIdList == r.topicIdList && l.nextPageContext == r.nextPageContext;
    }
    inline bool operator!=(const GetTopicListResp&l, const GetTopicListResp&r)
    {
        return !(l == r);
    }

    struct GetTopicDetailRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetTopicDetailRequest";
        }
        static string MD5()
        {
            return "2331a47b249bc7b49518252bbb0d7cf1";
        }
        GetTopicDetailRequest()
        :topicId(""),reqSrc(0),needFeeds(0),pageSize(0),pageContext("")
        {
        }
        void resetDefautlt()
        {
            topicId = "";
            reqSrc = 0;
            needFeeds = 0;
            pageSize = 0;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(topicId, 0);
            _os.write(reqSrc, 1);
            _os.write(needFeeds, 2);
            _os.write(pageSize, 3);
            _os.write(pageContext, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(topicId, 0, true);
            _is.read(reqSrc, 1, false);
            _is.read(needFeeds, 2, false);
            _is.read(pageSize, 3, false);
            _is.read(pageContext, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(topicId,"topicId");
            _ds.display(reqSrc,"reqSrc");
            _ds.display(needFeeds,"needFeeds");
            _ds.display(pageSize,"pageSize");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(topicId, true);
            _ds.displaySimple(reqSrc, true);
            _ds.displaySimple(needFeeds, true);
            _ds.displaySimple(pageSize, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string topicId;
        taf::Int32 reqSrc;
        taf::Int32 needFeeds;
        taf::Int32 pageSize;
        std::string pageContext;
    };
    inline bool operator==(const GetTopicDetailRequest&l, const GetTopicDetailRequest&r)
    {
        return l.topicId == r.topicId && l.reqSrc == r.reqSrc && l.needFeeds == r.needFeeds && l.pageSize == r.pageSize && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetTopicDetailRequest&l, const GetTopicDetailRequest&r)
    {
        return !(l == r);
    }

    struct GetTopicDetailResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.GetTopicDetailResp";
        }
        static string MD5()
        {
            return "98937e61b147e14cf6a86509246e500f";
        }
        GetTopicDetailResp()
        :errorCode(0),errorMsg(""),nextPageContext(""),sponsorName(""),sponsorFaceUrl("")
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            errorMsg = "";
            nextPageContext = "";
            sponsorName = "";
            sponsorFaceUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(errorMsg, 1);
            _os.write(topicInfo, 2);
            _os.write(feedids, 3);
            _os.write(nextPageContext, 4);
            _os.write(sponsorName, 5);
            _os.write(sponsorFaceUrl, 6);
            _os.write(starNames, 7);
            _os.write(cidNames, 8);
            _os.write(lidNames, 9);
            _os.write(dokiIds, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(errorMsg, 1, false);
            _is.read(topicInfo, 2, false);
            _is.read(feedids, 3, false);
            _is.read(nextPageContext, 4, false);
            _is.read(sponsorName, 5, false);
            _is.read(sponsorFaceUrl, 6, false);
            _is.read(starNames, 7, false);
            _is.read(cidNames, 8, false);
            _is.read(lidNames, 9, false);
            _is.read(dokiIds, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(errorMsg,"errorMsg");
            _ds.display(topicInfo,"topicInfo");
            _ds.display(feedids,"feedids");
            _ds.display(nextPageContext,"nextPageContext");
            _ds.display(sponsorName,"sponsorName");
            _ds.display(sponsorFaceUrl,"sponsorFaceUrl");
            _ds.display(starNames,"starNames");
            _ds.display(cidNames,"cidNames");
            _ds.display(lidNames,"lidNames");
            _ds.display(dokiIds,"dokiIds");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(errorMsg, true);
            _ds.displaySimple(topicInfo, true);
            _ds.displaySimple(feedids, true);
            _ds.displaySimple(nextPageContext, true);
            _ds.displaySimple(sponsorName, true);
            _ds.displaySimple(sponsorFaceUrl, true);
            _ds.displaySimple(starNames, true);
            _ds.displaySimple(cidNames, true);
            _ds.displaySimple(lidNames, true);
            _ds.displaySimple(dokiIds, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        std::string errorMsg;
        topic_ugc::TopicInfo topicInfo;
        vector<std::string> feedids;
        std::string nextPageContext;
        std::string sponsorName;
        std::string sponsorFaceUrl;
        vector<std::string> starNames;
        vector<std::string> cidNames;
        vector<std::string> lidNames;
        vector<std::string> dokiIds;
    };
    inline bool operator==(const GetTopicDetailResp&l, const GetTopicDetailResp&r)
    {
        return l.errorCode == r.errorCode && l.errorMsg == r.errorMsg && l.topicInfo == r.topicInfo && l.feedids == r.feedids && l.nextPageContext == r.nextPageContext && l.sponsorName == r.sponsorName && l.sponsorFaceUrl == r.sponsorFaceUrl && l.starNames == r.starNames && l.cidNames == r.cidNames && l.lidNames == r.lidNames && l.dokiIds == r.dokiIds;
    }
    inline bool operator!=(const GetTopicDetailResp&l, const GetTopicDetailResp&r)
    {
        return !(l == r);
    }

    struct stStarInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.stStarInfo";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        stStarInfo()
        :star_id(""),star_name(""),ftid("")
        {
        }
        void resetDefautlt()
        {
            star_id = "";
            star_name = "";
            ftid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(star_id, 0);
            _os.write(star_name, 1);
            _os.write(ftid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(star_id, 0, false);
            _is.read(star_name, 1, false);
            _is.read(ftid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(star_id,"star_id");
            _ds.display(star_name,"star_name");
            _ds.display(ftid,"ftid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(star_id, true);
            _ds.displaySimple(star_name, true);
            _ds.displaySimple(ftid, false);
            return _os;
        }
    public:
        std::string star_id;
        std::string star_name;
        std::string ftid;
    };
    inline bool operator==(const stStarInfo&l, const stStarInfo&r)
    {
        return l.star_id == r.star_id && l.star_name == r.star_name && l.ftid == r.ftid;
    }
    inline bool operator!=(const stStarInfo&l, const stStarInfo&r)
    {
        return !(l == r);
    }

    struct autoCreateTopicReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.autoCreateTopicReq";
        }
        static string MD5()
        {
            return "d77acd01a001cc6551ebf88216034813";
        }
        autoCreateTopicReq()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starInfoVec, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starInfoVec, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starInfoVec,"starInfoVec");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starInfoVec, false);
            return _os;
        }
    public:
        vector<topic_ugc::stStarInfo> starInfoVec;
    };
    inline bool operator==(const autoCreateTopicReq&l, const autoCreateTopicReq&r)
    {
        return l.starInfoVec == r.starInfoVec;
    }
    inline bool operator!=(const autoCreateTopicReq&l, const autoCreateTopicReq&r)
    {
        return !(l == r);
    }

    struct autoCreateTopicRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.autoCreateTopicRsp";
        }
        static string MD5()
        {
            return "536dc2c2efa8b35bd79509dfd753eee1";
        }
        autoCreateTopicRsp()
        :errorCode(0),successCount(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            successCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(successCount, 1);
            _os.write(errors, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, false);
            _is.read(successCount, 1, false);
            _is.read(errors, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(successCount,"successCount");
            _ds.display(errors,"errors");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(successCount, true);
            _ds.displaySimple(errors, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        taf::Int32 successCount;
        vector<taf::Int32> errors;
    };
    inline bool operator==(const autoCreateTopicRsp&l, const autoCreateTopicRsp&r)
    {
        return l.errorCode == r.errorCode && l.successCount == r.successCount && l.errors == r.errors;
    }
    inline bool operator!=(const autoCreateTopicRsp&l, const autoCreateTopicRsp&r)
    {
        return !(l == r);
    }

    struct autoDeleteTopicReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.autoDeleteTopicReq";
        }
        static string MD5()
        {
            return "d77acd01a001cc6551ebf88216034813";
        }
        autoDeleteTopicReq()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starInfoVec, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starInfoVec, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starInfoVec,"starInfoVec");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starInfoVec, false);
            return _os;
        }
    public:
        vector<topic_ugc::stStarInfo> starInfoVec;
    };
    inline bool operator==(const autoDeleteTopicReq&l, const autoDeleteTopicReq&r)
    {
        return l.starInfoVec == r.starInfoVec;
    }
    inline bool operator!=(const autoDeleteTopicReq&l, const autoDeleteTopicReq&r)
    {
        return !(l == r);
    }

    struct autoDeleteTopicRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.autoDeleteTopicRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        autoDeleteTopicRsp()
        :errorCode(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
    };
    inline bool operator==(const autoDeleteTopicRsp&l, const autoDeleteTopicRsp&r)
    {
        return l.errorCode == r.errorCode;
    }
    inline bool operator!=(const autoDeleteTopicRsp&l, const autoDeleteTopicRsp&r)
    {
        return !(l == r);
    }

    struct getAutoTopicIdReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.getAutoTopicIdReq";
        }
        static string MD5()
        {
            return "14e6636632c63fdfafc03fddb6c460ba";
        }
        getAutoTopicIdReq()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starIds, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starIds, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starIds,"starIds");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starIds, false);
            return _os;
        }
    public:
        vector<std::string> starIds;
    };
    inline bool operator==(const getAutoTopicIdReq&l, const getAutoTopicIdReq&r)
    {
        return l.starIds == r.starIds;
    }
    inline bool operator!=(const getAutoTopicIdReq&l, const getAutoTopicIdReq&r)
    {
        return !(l == r);
    }

    struct getAutoTopicIdRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.getAutoTopicIdRsp";
        }
        static string MD5()
        {
            return "120f3655a79fe57de264be3a6bfd2d1d";
        }
        getAutoTopicIdRsp()
        :errorCode(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(starId2topicId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, false);
            _is.read(starId2topicId, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(starId2topicId,"starId2topicId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(starId2topicId, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        map<std::string, std::string> starId2topicId;
    };
    inline bool operator==(const getAutoTopicIdRsp&l, const getAutoTopicIdRsp&r)
    {
        return l.errorCode == r.errorCode && l.starId2topicId == r.starId2topicId;
    }
    inline bool operator!=(const getAutoTopicIdRsp&l, const getAutoTopicIdRsp&r)
    {
        return !(l == r);
    }

    struct relationAutoTopicReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.relationAutoTopicReq";
        }
        static string MD5()
        {
            return "6a4500ba43c75177ca5e92de6368f328";
        }
        relationAutoTopicReq()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(addCid2TopicIds, 0);
            _os.write(addLid2TopicIds, 1);
            _os.write(delCid2TopicIds, 2);
            _os.write(delLid2TopicIds, 3);
            _os.write(delCids, 4);
            _os.write(delLids, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(addCid2TopicIds, 0, false);
            _is.read(addLid2TopicIds, 1, false);
            _is.read(delCid2TopicIds, 2, false);
            _is.read(delLid2TopicIds, 3, false);
            _is.read(delCids, 4, false);
            _is.read(delLids, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(addCid2TopicIds,"addCid2TopicIds");
            _ds.display(addLid2TopicIds,"addLid2TopicIds");
            _ds.display(delCid2TopicIds,"delCid2TopicIds");
            _ds.display(delLid2TopicIds,"delLid2TopicIds");
            _ds.display(delCids,"delCids");
            _ds.display(delLids,"delLids");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(addCid2TopicIds, true);
            _ds.displaySimple(addLid2TopicIds, true);
            _ds.displaySimple(delCid2TopicIds, true);
            _ds.displaySimple(delLid2TopicIds, true);
            _ds.displaySimple(delCids, true);
            _ds.displaySimple(delLids, false);
            return _os;
        }
    public:
        map<std::string, vector<std::string> > addCid2TopicIds;
        map<std::string, vector<std::string> > addLid2TopicIds;
        map<std::string, vector<std::string> > delCid2TopicIds;
        map<std::string, vector<std::string> > delLid2TopicIds;
        vector<std::string> delCids;
        vector<std::string> delLids;
    };
    inline bool operator==(const relationAutoTopicReq&l, const relationAutoTopicReq&r)
    {
        return l.addCid2TopicIds == r.addCid2TopicIds && l.addLid2TopicIds == r.addLid2TopicIds && l.delCid2TopicIds == r.delCid2TopicIds && l.delLid2TopicIds == r.delLid2TopicIds && l.delCids == r.delCids && l.delLids == r.delLids;
    }
    inline bool operator!=(const relationAutoTopicReq&l, const relationAutoTopicReq&r)
    {
        return !(l == r);
    }

    struct relationAutoTopicRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "topic_ugc.relationAutoTopicRsp";
        }
        static string MD5()
        {
            return "536dc2c2efa8b35bd79509dfd753eee1";
        }
        relationAutoTopicRsp()
        :errorCode(0),successCount(0)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            successCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(successCount, 1);
            _os.write(errors, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, false);
            _is.read(successCount, 1, false);
            _is.read(errors, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(successCount,"successCount");
            _ds.display(errors,"errors");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(successCount, true);
            _ds.displaySimple(errors, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        taf::Int32 successCount;
        vector<taf::Int32> errors;
    };
    inline bool operator==(const relationAutoTopicRsp&l, const relationAutoTopicRsp&r)
    {
        return l.errorCode == r.errorCode && l.successCount == r.successCount && l.errors == r.errors;
    }
    inline bool operator!=(const relationAutoTopicRsp&l, const relationAutoTopicRsp&r)
    {
        return !(l == r);
    }


}

#define topic_ugc_TopicSummary_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.title,b.title);jce_copy_struct(a.brief,b.brief);jce_copy_struct(a.actionUrl,b.actionUrl);jce_copy_struct(a.starNames,b.starNames);jce_copy_struct(a.playNames,b.playNames);jce_copy_struct(a.photos,b.photos);jce_copy_struct(a.targetId,b.targetId);jce_copy_struct(a.pvCount,b.pvCount);jce_copy_struct(a.feedCount,b.feedCount);

#define topic_ugc_TopicBase_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.title,b.title);jce_copy_struct(a.brief,b.brief);jce_copy_struct(a.sponsor,b.sponsor);jce_copy_struct(a.createTime,b.createTime);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.starIds,b.starIds);jce_copy_struct(a.cids,b.cids);jce_copy_struct(a.vids,b.vids);jce_copy_struct(a.lids,b.lids);jce_copy_struct(a.photos,b.photos);jce_copy_struct(a.sponsorType,b.sponsorType);jce_copy_struct(a.sponsorAccountType,b.sponsorAccountType);jce_copy_struct(a.shareInfo,b.shareInfo);jce_copy_struct(a.activeidList,b.activeidList);jce_copy_struct(a.type,b.type);jce_copy_struct(a.music,b.music);jce_copy_struct(a.channelCategory,b.channelCategory);

#define topic_ugc_TopicInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.topicBase,b.topicBase);jce_copy_struct(a.score,b.score);jce_copy_struct(a.postCount,b.postCount);jce_copy_struct(a.replyCount,b.replyCount);jce_copy_struct(a.readCount,b.readCount);jce_copy_struct(a.thumbCount,b.thumbCount);jce_copy_struct(a.followCount,b.followCount);jce_copy_struct(a.scoreBase,b.scoreBase);jce_copy_struct(a.reserve,b.reserve);jce_copy_struct(a.titleFlag,b.titleFlag);jce_copy_struct(a.namesakeId,b.namesakeId);jce_copy_struct(a.strReserve,b.strReserve);jce_copy_struct(a.status,b.status);

#define topic_ugc_PostInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.postId,b.postId);jce_copy_struct(a.topicId,b.topicId);jce_copy_struct(a.readCount,b.readCount);jce_copy_struct(a.replyCount,b.replyCount);jce_copy_struct(a.thumbCount,b.thumbCount);jce_copy_struct(a.createTime,b.createTime);jce_copy_struct(a.topicIds,b.topicIds);

#define topic_ugc_CreateTopicRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.topicBase,b.topicBase);jce_copy_struct(a.targetId,b.targetId);

#define topic_ugc_CreateTopicResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.topicId,b.topicId);jce_copy_struct(a.title,b.title);jce_copy_struct(a.shareErrCode,b.shareErrCode);jce_copy_struct(a.shareCircleUrl,b.shareCircleUrl);

#define topic_ugc_DeleteTopicRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.topicId,b.topicId);

#define topic_ugc_DeleteTopicResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);

#define topic_ugc_ModifyTopicRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.topicInfo,b.topicInfo);

#define topic_ugc_ModifyTopicResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);

#define topic_ugc_GetTopicRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.topicId,b.topicId);jce_copy_struct(a.reqSrc,b.reqSrc);jce_copy_struct(a.needFeeds,b.needFeeds);jce_copy_struct(a.pageContext,b.pageContext);

#define topic_ugc_GetTopicResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.topicInfo,b.topicInfo);jce_copy_struct(a.feeds,b.feeds);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.sponsorName,b.sponsorName);jce_copy_struct(a.sponsorFaceUrl,b.sponsorFaceUrl);jce_copy_struct(a.starNames,b.starNames);jce_copy_struct(a.cidNames,b.cidNames);jce_copy_struct(a.lidNames,b.lidNames);jce_copy_struct(a.vedioDokiIds,b.vedioDokiIds);jce_copy_struct(a.postDataKey,b.postDataKey);jce_copy_struct(a.extraKey,b.extraKey);

#define topic_ugc_SearchTopicRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.flag,b.flag);jce_copy_struct(a.reqSrc,b.reqSrc);

#define topic_ugc_SearchTopicResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.topicId,b.topicId);jce_copy_struct(a.extraKey,b.extraKey);jce_copy_struct(a.topicIds,b.topicIds);jce_copy_struct(a.allTopicIds,b.allTopicIds);

#define topic_ugc_SearchTopicsForPubRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.titles,b.titles);

#define topic_ugc_SearchTopicsForPubResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.topicIds,b.topicIds);

#define topic_ugc_GetTopicTopListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.reqSrc,b.reqSrc);jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.startPage,b.startPage);

#define topic_ugc_GetTopicTopListResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.topics,b.topics);jce_copy_struct(a.nextPage,b.nextPage);

#define topic_ugc_GetPostsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.topicId,b.topicId);jce_copy_struct(a.topicTitle,b.topicTitle);jce_copy_struct(a.flag,b.flag);jce_copy_struct(a.startPage,b.startPage);

#define topic_ugc_GetPostsResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.postId,b.postId);jce_copy_struct(a.nextPage,b.nextPage);

#define topic_ugc_GetHotTopicsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.reqSrc,b.reqSrc);jce_copy_struct(a.pageContext,b.pageContext);

#define topic_ugc_GetHotTopicsResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.topics,b.topics);jce_copy_struct(a.pageContext,b.pageContext);

#define topic_ugc_GetPubHasTopicsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.cfrom,b.cfrom);

#define topic_ugc_GetPubHasTopicsResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.errorMsg,b.errorMsg);jce_copy_struct(a.bHaveTopics,b.bHaveTopics);

#define topic_ugc_GetRelatedTopicsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.scene,b.scene);jce_copy_struct(a.minCount,b.minCount);jce_copy_struct(a.getAuto,b.getAuto);

#define topic_ugc_GetRelatedTopicsResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.errorMsg,b.errorMsg);jce_copy_struct(a.topicVec,b.topicVec);jce_copy_struct(a.pageContext,b.pageContext);

#define topic_ugc_GetTopicListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.reqSrc,b.reqSrc);jce_copy_struct(a.topicType,b.topicType);jce_copy_struct(a.pageSize,b.pageSize);jce_copy_struct(a.pageContext,b.pageContext);

#define topic_ugc_GetTopicListResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.topicIdList,b.topicIdList);jce_copy_struct(a.nextPageContext,b.nextPageContext);

#define topic_ugc_GetTopicDetailRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.topicId,b.topicId);jce_copy_struct(a.reqSrc,b.reqSrc);jce_copy_struct(a.needFeeds,b.needFeeds);jce_copy_struct(a.pageSize,b.pageSize);jce_copy_struct(a.pageContext,b.pageContext);

#define topic_ugc_GetTopicDetailResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.errorMsg,b.errorMsg);jce_copy_struct(a.topicInfo,b.topicInfo);jce_copy_struct(a.feedids,b.feedids);jce_copy_struct(a.nextPageContext,b.nextPageContext);jce_copy_struct(a.sponsorName,b.sponsorName);jce_copy_struct(a.sponsorFaceUrl,b.sponsorFaceUrl);jce_copy_struct(a.starNames,b.starNames);jce_copy_struct(a.cidNames,b.cidNames);jce_copy_struct(a.lidNames,b.lidNames);jce_copy_struct(a.dokiIds,b.dokiIds);

#define topic_ugc_stStarInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.star_id,b.star_id);jce_copy_struct(a.star_name,b.star_name);jce_copy_struct(a.ftid,b.ftid);

#define topic_ugc_autoCreateTopicReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starInfoVec,b.starInfoVec);

#define topic_ugc_autoCreateTopicRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.successCount,b.successCount);jce_copy_struct(a.errors,b.errors);

#define topic_ugc_autoDeleteTopicReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starInfoVec,b.starInfoVec);

#define topic_ugc_autoDeleteTopicRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);

#define topic_ugc_getAutoTopicIdReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starIds,b.starIds);

#define topic_ugc_getAutoTopicIdRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.starId2topicId,b.starId2topicId);

#define topic_ugc_relationAutoTopicReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.addCid2TopicIds,b.addCid2TopicIds);jce_copy_struct(a.addLid2TopicIds,b.addLid2TopicIds);jce_copy_struct(a.delCid2TopicIds,b.delCid2TopicIds);jce_copy_struct(a.delLid2TopicIds,b.delLid2TopicIds);jce_copy_struct(a.delCids,b.delCids);jce_copy_struct(a.delLids,b.delLids);

#define topic_ugc_relationAutoTopicRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.successCount,b.successCount);jce_copy_struct(a.errors,b.errors);



#endif
