// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_startheme.jce'
// **********************************************************************

#ifndef __QQVIDEO_STARTHEME_H_
#define __QQVIDEO_STARTHEME_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"


namespace jce
{
    struct StarThemeVipData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarThemeVipData";
        }
        static string MD5()
        {
            return "7e93d0637552b9cf202c69496be3efc6";
        }
        StarThemeVipData()
        :isVipTheme(0),dataType(0)
        {
        }
        void resetDefautlt()
        {
            isVipTheme = 0;
            dataType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(isVipTheme, 0);
            _os.write(vipExpireDialogInfos, 1);
            _os.write(dataType, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(isVipTheme, 0, false);
            _is.read(vipExpireDialogInfos, 1, false);
            _is.read(dataType, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(isVipTheme,"isVipTheme");
            _ds.display(vipExpireDialogInfos,"vipExpireDialogInfos");
            _ds.display(dataType,"dataType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(isVipTheme, true);
            _ds.displaySimple(vipExpireDialogInfos, true);
            _ds.displaySimple(dataType, false);
            return _os;
        }
    public:
        taf::Int32 isVipTheme;
        vector<jce::ActionBarInfo> vipExpireDialogInfos;
        taf::Int32 dataType;
    };
    inline bool operator==(const StarThemeVipData&l, const StarThemeVipData&r)
    {
        return l.isVipTheme == r.isVipTheme && l.vipExpireDialogInfos == r.vipExpireDialogInfos && l.dataType == r.dataType;
    }
    inline bool operator!=(const StarThemeVipData&l, const StarThemeVipData&r)
    {
        return !(l == r);
    }

    struct SingleStarThemeData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SingleStarThemeData";
        }
        static string MD5()
        {
            return "6b1853ffef396abcf082e062f808eeae";
        }
        SingleStarThemeData()
        :startThemeId(""),state(0),name(""),source(""),userNum(""),isNewFlag(0),cover_effect_img(""),cover_star_img(""),player_effect_img(""),pull_effect_img(""),pull_star_img(""),recommend_effect_img(""),recommend_star_img(""),setting_star_img(""),tab_img_1(""),tab_img_2(""),tab_img_3(""),tab_img_4(""),star_theme_bgColor(""),groupId(""),star_weibo_name(""),payType(0)
        {
        }
        void resetDefautlt()
        {
            startThemeId = "";
            state = 0;
            name = "";
            source = "";
            userNum = "";
            isNewFlag = 0;
            cover_effect_img = "";
            cover_star_img = "";
            player_effect_img = "";
            pull_effect_img = "";
            pull_star_img = "";
            recommend_effect_img = "";
            recommend_star_img = "";
            setting_star_img = "";
            tab_img_1 = "";
            tab_img_2 = "";
            tab_img_3 = "";
            tab_img_4 = "";
            star_theme_bgColor = "";
            groupId = "";
            star_weibo_name = "";
            payType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(startThemeId, 0);
            _os.write(state, 1);
            _os.write(name, 2);
            _os.write(source, 3);
            _os.write(userNum, 4);
            _os.write(isNewFlag, 5);
            _os.write(markLabelList, 6);
            _os.write(cover_effect_img, 7);
            _os.write(cover_star_img, 8);
            _os.write(player_effect_img, 9);
            _os.write(pull_effect_img, 10);
            _os.write(pull_star_img, 11);
            _os.write(recommend_effect_img, 12);
            _os.write(recommend_star_img, 13);
            _os.write(setting_star_img, 14);
            _os.write(tab_img_1, 15);
            _os.write(tab_img_2, 16);
            _os.write(tab_img_3, 17);
            _os.write(tab_img_4, 18);
            _os.write(star_theme_bgColor, 19);
            _os.write(groupId, 20);
            _os.write(star_weibo_name, 21);
            _os.write(action, 22);
            _os.write(payType, 23);
            _os.write(vipData, 24);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(startThemeId, 0, true);
            _is.read(state, 1, true);
            _is.read(name, 2, false);
            _is.read(source, 3, false);
            _is.read(userNum, 4, false);
            _is.read(isNewFlag, 5, false);
            _is.read(markLabelList, 6, false);
            _is.read(cover_effect_img, 7, false);
            _is.read(cover_star_img, 8, false);
            _is.read(player_effect_img, 9, false);
            _is.read(pull_effect_img, 10, false);
            _is.read(pull_star_img, 11, false);
            _is.read(recommend_effect_img, 12, false);
            _is.read(recommend_star_img, 13, false);
            _is.read(setting_star_img, 14, false);
            _is.read(tab_img_1, 15, false);
            _is.read(tab_img_2, 16, false);
            _is.read(tab_img_3, 17, false);
            _is.read(tab_img_4, 18, false);
            _is.read(star_theme_bgColor, 19, false);
            _is.read(groupId, 20, false);
            _is.read(star_weibo_name, 21, false);
            _is.read(action, 22, false);
            _is.read(payType, 23, true);
            _is.read(vipData, 24, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(startThemeId,"startThemeId");
            _ds.display(state,"state");
            _ds.display(name,"name");
            _ds.display(source,"source");
            _ds.display(userNum,"userNum");
            _ds.display(isNewFlag,"isNewFlag");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(cover_effect_img,"cover_effect_img");
            _ds.display(cover_star_img,"cover_star_img");
            _ds.display(player_effect_img,"player_effect_img");
            _ds.display(pull_effect_img,"pull_effect_img");
            _ds.display(pull_star_img,"pull_star_img");
            _ds.display(recommend_effect_img,"recommend_effect_img");
            _ds.display(recommend_star_img,"recommend_star_img");
            _ds.display(setting_star_img,"setting_star_img");
            _ds.display(tab_img_1,"tab_img_1");
            _ds.display(tab_img_2,"tab_img_2");
            _ds.display(tab_img_3,"tab_img_3");
            _ds.display(tab_img_4,"tab_img_4");
            _ds.display(star_theme_bgColor,"star_theme_bgColor");
            _ds.display(groupId,"groupId");
            _ds.display(star_weibo_name,"star_weibo_name");
            _ds.display(action,"action");
            _ds.display(payType,"payType");
            _ds.display(vipData,"vipData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(startThemeId, true);
            _ds.displaySimple(state, true);
            _ds.displaySimple(name, true);
            _ds.displaySimple(source, true);
            _ds.displaySimple(userNum, true);
            _ds.displaySimple(isNewFlag, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(cover_effect_img, true);
            _ds.displaySimple(cover_star_img, true);
            _ds.displaySimple(player_effect_img, true);
            _ds.displaySimple(pull_effect_img, true);
            _ds.displaySimple(pull_star_img, true);
            _ds.displaySimple(recommend_effect_img, true);
            _ds.displaySimple(recommend_star_img, true);
            _ds.displaySimple(setting_star_img, true);
            _ds.displaySimple(tab_img_1, true);
            _ds.displaySimple(tab_img_2, true);
            _ds.displaySimple(tab_img_3, true);
            _ds.displaySimple(tab_img_4, true);
            _ds.displaySimple(star_theme_bgColor, true);
            _ds.displaySimple(groupId, true);
            _ds.displaySimple(star_weibo_name, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(payType, true);
            _ds.displaySimple(vipData, false);
            return _os;
        }
    public:
        std::string startThemeId;
        taf::Int32 state;
        std::string name;
        std::string source;
        std::string userNum;
        taf::Int32 isNewFlag;
        vector<jce::MarkLabel> markLabelList;
        std::string cover_effect_img;
        std::string cover_star_img;
        std::string player_effect_img;
        std::string pull_effect_img;
        std::string pull_star_img;
        std::string recommend_effect_img;
        std::string recommend_star_img;
        std::string setting_star_img;
        std::string tab_img_1;
        std::string tab_img_2;
        std::string tab_img_3;
        std::string tab_img_4;
        std::string star_theme_bgColor;
        std::string groupId;
        std::string star_weibo_name;
        jce::Action action;
        taf::Int32 payType;
        jce::StarThemeVipData vipData;
    };
    inline bool operator==(const SingleStarThemeData&l, const SingleStarThemeData&r)
    {
        return l.startThemeId == r.startThemeId && l.state == r.state && l.name == r.name && l.source == r.source && l.userNum == r.userNum && l.isNewFlag == r.isNewFlag && l.markLabelList == r.markLabelList && l.cover_effect_img == r.cover_effect_img && l.cover_star_img == r.cover_star_img && l.player_effect_img == r.player_effect_img && l.pull_effect_img == r.pull_effect_img && l.pull_star_img == r.pull_star_img && l.recommend_effect_img == r.recommend_effect_img && l.recommend_star_img == r.recommend_star_img && l.setting_star_img == r.setting_star_img && l.tab_img_1 == r.tab_img_1 && l.tab_img_2 == r.tab_img_2 && l.tab_img_3 == r.tab_img_3 && l.tab_img_4 == r.tab_img_4 && l.star_theme_bgColor == r.star_theme_bgColor && l.groupId == r.groupId && l.star_weibo_name == r.star_weibo_name && l.action == r.action && l.payType == r.payType && l.vipData == r.vipData;
    }
    inline bool operator!=(const SingleStarThemeData&l, const SingleStarThemeData&r)
    {
        return !(l == r);
    }

    struct StarThemeGroupItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarThemeGroupItem";
        }
        static string MD5()
        {
            return "717b39dacb8f65eda91b3faa1bf704b6";
        }
        StarThemeGroupItem()
        :groupId(""),total(0),title("")
        {
        }
        void resetDefautlt()
        {
            groupId = "";
            total = 0;
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(groupId, 0);
            _os.write(total, 1);
            _os.write(title, 2);
            _os.write(starThemeList, 3);
            _os.write(action, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(groupId, 0, true);
            _is.read(total, 1, false);
            _is.read(title, 2, false);
            _is.read(starThemeList, 3, false);
            _is.read(action, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(groupId,"groupId");
            _ds.display(total,"total");
            _ds.display(title,"title");
            _ds.display(starThemeList,"starThemeList");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(groupId, true);
            _ds.displaySimple(total, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(starThemeList, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string groupId;
        taf::Int32 total;
        std::string title;
        vector<jce::SingleStarThemeData> starThemeList;
        jce::Action action;
    };
    inline bool operator==(const StarThemeGroupItem&l, const StarThemeGroupItem&r)
    {
        return l.groupId == r.groupId && l.total == r.total && l.title == r.title && l.starThemeList == r.starThemeList && l.action == r.action;
    }
    inline bool operator!=(const StarThemeGroupItem&l, const StarThemeGroupItem&r)
    {
        return !(l == r);
    }

    struct PayedStarThemeGroupRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PayedStarThemeGroupRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        PayedStarThemeGroupRequest()
        :test(0)
        {
        }
        void resetDefautlt()
        {
            test = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(test, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(test, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(test,"test");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(test, false);
            return _os;
        }
    public:
        taf::Int32 test;
    };
    inline bool operator==(const PayedStarThemeGroupRequest&l, const PayedStarThemeGroupRequest&r)
    {
        return l.test == r.test;
    }
    inline bool operator!=(const PayedStarThemeGroupRequest&l, const PayedStarThemeGroupRequest&r)
    {
        return !(l == r);
    }

    struct PayedStarThemeGroupResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PayedStarThemeGroupResponse";
        }
        static string MD5()
        {
            return "bf7e59cef62aea32ce9d9f41b653e819";
        }
        PayedStarThemeGroupResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(payedGroupItem, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(payedGroupItem, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(payedGroupItem,"payedGroupItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(payedGroupItem, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::StarThemeGroupItem payedGroupItem;
    };
    inline bool operator==(const PayedStarThemeGroupResponse&l, const PayedStarThemeGroupResponse&r)
    {
        return l.errCode == r.errCode && l.payedGroupItem == r.payedGroupItem;
    }
    inline bool operator!=(const PayedStarThemeGroupResponse&l, const PayedStarThemeGroupResponse&r)
    {
        return !(l == r);
    }

    struct StarThemeGroupListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarThemeGroupListRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        StarThemeGroupListRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const StarThemeGroupListRequest&l, const StarThemeGroupListRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const StarThemeGroupListRequest&l, const StarThemeGroupListRequest&r)
    {
        return !(l == r);
    }

    struct StarThemeGroupListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarThemeGroupListResponse";
        }
        static string MD5()
        {
            return "d555b71219019504fa64d0e68dd08fc7";
        }
        StarThemeGroupListResponse()
        :errCode(0),hasNextPage(true),pageContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasNextPage = true;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(bannerImageList, 1);
            _os.write(groupList, 2);
            _os.write(hasNextPage, 4);
            _os.write(pageContext, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(bannerImageList, 1, false);
            _is.read(groupList, 2, false);
            _is.read(hasNextPage, 4, false);
            _is.read(pageContext, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(bannerImageList,"bannerImageList");
            _ds.display(groupList,"groupList");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(bannerImageList, true);
            _ds.displaySimple(groupList, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::VideoImage> bannerImageList;
        vector<jce::StarThemeGroupItem> groupList;
        taf::Bool hasNextPage;
        std::string pageContext;
    };
    inline bool operator==(const StarThemeGroupListResponse&l, const StarThemeGroupListResponse&r)
    {
        return l.errCode == r.errCode && l.bannerImageList == r.bannerImageList && l.groupList == r.groupList && l.hasNextPage == r.hasNextPage && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const StarThemeGroupListResponse&l, const StarThemeGroupListResponse&r)
    {
        return !(l == r);
    }

    struct StarThemeGroupMoreRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarThemeGroupMoreRequest";
        }
        static string MD5()
        {
            return "02c8b7c8dd015754a72e807a03033d5e";
        }
        StarThemeGroupMoreRequest()
        :groupId(""),filterValue(""),pageContext(""),payedGroupType(0)
        {
        }
        void resetDefautlt()
        {
            groupId = "";
            filterValue = "";
            pageContext = "";
            payedGroupType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(groupId, 0);
            _os.write(filterValue, 1);
            _os.write(pageContext, 2);
            _os.write(payedGroupType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(groupId, 0, true);
            _is.read(filterValue, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(payedGroupType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(groupId,"groupId");
            _ds.display(filterValue,"filterValue");
            _ds.display(pageContext,"pageContext");
            _ds.display(payedGroupType,"payedGroupType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(groupId, true);
            _ds.displaySimple(filterValue, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(payedGroupType, false);
            return _os;
        }
    public:
        std::string groupId;
        std::string filterValue;
        std::string pageContext;
        taf::Int32 payedGroupType;
    };
    inline bool operator==(const StarThemeGroupMoreRequest&l, const StarThemeGroupMoreRequest&r)
    {
        return l.groupId == r.groupId && l.filterValue == r.filterValue && l.pageContext == r.pageContext && l.payedGroupType == r.payedGroupType;
    }
    inline bool operator!=(const StarThemeGroupMoreRequest&l, const StarThemeGroupMoreRequest&r)
    {
        return !(l == r);
    }

    struct StarThemeGroupMoreResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarThemeGroupMoreResponse";
        }
        static string MD5()
        {
            return "d80c1ef3acbab513a63adefa0d78d6b6";
        }
        StarThemeGroupMoreResponse()
        :errCode(0),hasNextPage(true),pageContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasNextPage = true;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(filter, 1);
            _os.write(starThemeList, 2);
            _os.write(hasNextPage, 3);
            _os.write(pageContext, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(filter, 1, false);
            _is.read(starThemeList, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(pageContext, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(filter,"filter");
            _ds.display(starThemeList,"starThemeList");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(filter, true);
            _ds.displaySimple(starThemeList, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::VideoFilter filter;
        vector<jce::SingleStarThemeData> starThemeList;
        taf::Bool hasNextPage;
        std::string pageContext;
    };
    inline bool operator==(const StarThemeGroupMoreResponse&l, const StarThemeGroupMoreResponse&r)
    {
        return l.errCode == r.errCode && l.filter == r.filter && l.starThemeList == r.starThemeList && l.hasNextPage == r.hasNextPage && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const StarThemeGroupMoreResponse&l, const StarThemeGroupMoreResponse&r)
    {
        return !(l == r);
    }

    struct SingleStarThemeDetailRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SingleStarThemeDetailRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        SingleStarThemeDetailRequest()
        :startThemeId("")
        {
        }
        void resetDefautlt()
        {
            startThemeId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(startThemeId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(startThemeId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(startThemeId,"startThemeId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(startThemeId, false);
            return _os;
        }
    public:
        std::string startThemeId;
    };
    inline bool operator==(const SingleStarThemeDetailRequest&l, const SingleStarThemeDetailRequest&r)
    {
        return l.startThemeId == r.startThemeId;
    }
    inline bool operator!=(const SingleStarThemeDetailRequest&l, const SingleStarThemeDetailRequest&r)
    {
        return !(l == r);
    }

    struct SingleStarThemeDetailResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SingleStarThemeDetailResponse";
        }
        static string MD5()
        {
            return "6c437993c5d93c2a4f00c9c8dae81973";
        }
        SingleStarThemeDetailResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(detail, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(detail, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(detail,"detail");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(detail, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::SingleStarThemeData detail;
    };
    inline bool operator==(const SingleStarThemeDetailResponse&l, const SingleStarThemeDetailResponse&r)
    {
        return l.errCode == r.errCode && l.detail == r.detail;
    }
    inline bool operator!=(const SingleStarThemeDetailResponse&l, const SingleStarThemeDetailResponse&r)
    {
        return !(l == r);
    }

    struct StarThemeDetectNewRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarThemeDetectNewRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        StarThemeDetectNewRequest()
        :updateKey("")
        {
        }
        void resetDefautlt()
        {
            updateKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(updateKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(updateKey, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(updateKey,"updateKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(updateKey, false);
            return _os;
        }
    public:
        std::string updateKey;
    };
    inline bool operator==(const StarThemeDetectNewRequest&l, const StarThemeDetectNewRequest&r)
    {
        return l.updateKey == r.updateKey;
    }
    inline bool operator!=(const StarThemeDetectNewRequest&l, const StarThemeDetectNewRequest&r)
    {
        return !(l == r);
    }

    struct StarThemeDetectNewResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarThemeDetectNewResponse";
        }
        static string MD5()
        {
            return "a4034c6c83a4b01713c9adc5a7da2111";
        }
        StarThemeDetectNewResponse()
        :errCode(0),updateKey(""),hasNew(true),headImgUrl(""),startThemeId("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            updateKey = "";
            hasNew = true;
            headImgUrl = "";
            startThemeId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(updateKey, 1);
            _os.write(hasNew, 2);
            _os.write(headImgUrl, 3);
            _os.write(startThemeId, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(updateKey, 1, true);
            _is.read(hasNew, 2, false);
            _is.read(headImgUrl, 3, false);
            _is.read(startThemeId, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(updateKey,"updateKey");
            _ds.display(hasNew,"hasNew");
            _ds.display(headImgUrl,"headImgUrl");
            _ds.display(startThemeId,"startThemeId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(updateKey, true);
            _ds.displaySimple(hasNew, true);
            _ds.displaySimple(headImgUrl, true);
            _ds.displaySimple(startThemeId, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string updateKey;
        taf::Bool hasNew;
        std::string headImgUrl;
        std::string startThemeId;
    };
    inline bool operator==(const StarThemeDetectNewResponse&l, const StarThemeDetectNewResponse&r)
    {
        return l.errCode == r.errCode && l.updateKey == r.updateKey && l.hasNew == r.hasNew && l.headImgUrl == r.headImgUrl && l.startThemeId == r.startThemeId;
    }
    inline bool operator!=(const StarThemeDetectNewResponse&l, const StarThemeDetectNewResponse&r)
    {
        return !(l == r);
    }

    struct UseThemeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UseThemeRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        UseThemeRequest()
        :startThemeId("")
        {
        }
        void resetDefautlt()
        {
            startThemeId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(startThemeId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(startThemeId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(startThemeId,"startThemeId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(startThemeId, false);
            return _os;
        }
    public:
        std::string startThemeId;
    };
    inline bool operator==(const UseThemeRequest&l, const UseThemeRequest&r)
    {
        return l.startThemeId == r.startThemeId;
    }
    inline bool operator!=(const UseThemeRequest&l, const UseThemeRequest&r)
    {
        return !(l == r);
    }

    struct UseThemeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UseThemeResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        UseThemeResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const UseThemeResponse&l, const UseThemeResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const UseThemeResponse&l, const UseThemeResponse&r)
    {
        return !(l == r);
    }

    struct StarThemeHistoryItemData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarThemeHistoryItemData";
        }
        static string MD5()
        {
            return "77857cfcf383fda86c2f6ebbbf8e8517";
        }
        StarThemeHistoryItemData()
        :starThemeId(""),starThemeUsedTime(0),syncType(0),openId("")
        {
        }
        void resetDefautlt()
        {
            starThemeId = "";
            starThemeUsedTime = 0;
            syncType = 0;
            openId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starThemeId, 0);
            _os.write(starThemeUsedTime, 1);
            _os.write(syncType, 2);
            _os.write(openId, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starThemeId, 0, true);
            _is.read(starThemeUsedTime, 1, true);
            _is.read(syncType, 2, false);
            _is.read(openId, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starThemeId,"starThemeId");
            _ds.display(starThemeUsedTime,"starThemeUsedTime");
            _ds.display(syncType,"syncType");
            _ds.display(openId,"openId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starThemeId, true);
            _ds.displaySimple(starThemeUsedTime, true);
            _ds.displaySimple(syncType, true);
            _ds.displaySimple(openId, false);
            return _os;
        }
    public:
        std::string starThemeId;
        taf::Int64 starThemeUsedTime;
        taf::Int32 syncType;
        std::string openId;
    };
    inline bool operator==(const StarThemeHistoryItemData&l, const StarThemeHistoryItemData&r)
    {
        return l.starThemeId == r.starThemeId && l.starThemeUsedTime == r.starThemeUsedTime && l.syncType == r.syncType && l.openId == r.openId;
    }
    inline bool operator!=(const StarThemeHistoryItemData&l, const StarThemeHistoryItemData&r)
    {
        return !(l == r);
    }

    struct StarThemeHistoryRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarThemeHistoryRequest";
        }
        static string MD5()
        {
            return "41e6093358c87d7be29a938449f99036";
        }
        StarThemeHistoryRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(historyItemData, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(historyItemData, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(historyItemData,"historyItemData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(historyItemData, false);
            return _os;
        }
    public:
        jce::StarThemeHistoryItemData historyItemData;
    };
    inline bool operator==(const StarThemeHistoryRequest&l, const StarThemeHistoryRequest&r)
    {
        return l.historyItemData == r.historyItemData;
    }
    inline bool operator!=(const StarThemeHistoryRequest&l, const StarThemeHistoryRequest&r)
    {
        return !(l == r);
    }

    struct StarThemeHistoryResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarThemeHistoryResponse";
        }
        static string MD5()
        {
            return "309782aed2f570cb74841a7d410ade2f";
        }
        StarThemeHistoryResponse()
        :errCode(0),starThemeUsedTime(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            starThemeUsedTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(starThemeUsedTime, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(starThemeUsedTime, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(starThemeUsedTime,"starThemeUsedTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(starThemeUsedTime, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int64 starThemeUsedTime;
    };
    inline bool operator==(const StarThemeHistoryResponse&l, const StarThemeHistoryResponse&r)
    {
        return l.errCode == r.errCode && l.starThemeUsedTime == r.starThemeUsedTime;
    }
    inline bool operator!=(const StarThemeHistoryResponse&l, const StarThemeHistoryResponse&r)
    {
        return !(l == r);
    }

    struct AccountBindInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AccountBindInfoRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        AccountBindInfoRequest()
        :test(0)
        {
        }
        void resetDefautlt()
        {
            test = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(test, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(test, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(test,"test");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(test, false);
            return _os;
        }
    public:
        taf::Int32 test;
    };
    inline bool operator==(const AccountBindInfoRequest&l, const AccountBindInfoRequest&r)
    {
        return l.test == r.test;
    }
    inline bool operator!=(const AccountBindInfoRequest&l, const AccountBindInfoRequest&r)
    {
        return !(l == r);
    }

    struct AccountBindInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AccountBindInfoResponse";
        }
        static string MD5()
        {
            return "06f0d6b507e8de5053ae3056f80b2b22";
        }
        AccountBindInfoResponse()
        :errCode(0),starThemeUsedTime(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            starThemeUsedTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(themeItem, 1);
            _os.write(starThemeUsedTime, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(themeItem, 1, false);
            _is.read(starThemeUsedTime, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(themeItem,"themeItem");
            _ds.display(starThemeUsedTime,"starThemeUsedTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(themeItem, true);
            _ds.displaySimple(starThemeUsedTime, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::SingleStarThemeData themeItem;
        taf::Int64 starThemeUsedTime;
    };
    inline bool operator==(const AccountBindInfoResponse&l, const AccountBindInfoResponse&r)
    {
        return l.errCode == r.errCode && l.themeItem == r.themeItem && l.starThemeUsedTime == r.starThemeUsedTime;
    }
    inline bool operator!=(const AccountBindInfoResponse&l, const AccountBindInfoResponse&r)
    {
        return !(l == r);
    }


}

#define jce_StarThemeVipData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.isVipTheme,b.isVipTheme);jce_copy_struct(a.vipExpireDialogInfos,b.vipExpireDialogInfos);jce_copy_struct(a.dataType,b.dataType);

#define jce_SingleStarThemeData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.startThemeId,b.startThemeId);jce_copy_struct(a.state,b.state);jce_copy_struct(a.name,b.name);jce_copy_struct(a.source,b.source);jce_copy_struct(a.userNum,b.userNum);jce_copy_struct(a.isNewFlag,b.isNewFlag);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.cover_effect_img,b.cover_effect_img);jce_copy_struct(a.cover_star_img,b.cover_star_img);jce_copy_struct(a.player_effect_img,b.player_effect_img);jce_copy_struct(a.pull_effect_img,b.pull_effect_img);jce_copy_struct(a.pull_star_img,b.pull_star_img);jce_copy_struct(a.recommend_effect_img,b.recommend_effect_img);jce_copy_struct(a.recommend_star_img,b.recommend_star_img);jce_copy_struct(a.setting_star_img,b.setting_star_img);jce_copy_struct(a.tab_img_1,b.tab_img_1);jce_copy_struct(a.tab_img_2,b.tab_img_2);jce_copy_struct(a.tab_img_3,b.tab_img_3);jce_copy_struct(a.tab_img_4,b.tab_img_4);jce_copy_struct(a.star_theme_bgColor,b.star_theme_bgColor);jce_copy_struct(a.groupId,b.groupId);jce_copy_struct(a.star_weibo_name,b.star_weibo_name);jce_copy_struct(a.action,b.action);jce_copy_struct(a.payType,b.payType);jce_copy_struct(a.vipData,b.vipData);

#define jce_StarThemeGroupItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.groupId,b.groupId);jce_copy_struct(a.total,b.total);jce_copy_struct(a.title,b.title);jce_copy_struct(a.starThemeList,b.starThemeList);jce_copy_struct(a.action,b.action);

#define jce_PayedStarThemeGroupRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.test,b.test);

#define jce_PayedStarThemeGroupResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.payedGroupItem,b.payedGroupItem);

#define jce_StarThemeGroupListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_StarThemeGroupListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.bannerImageList,b.bannerImageList);jce_copy_struct(a.groupList,b.groupList);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_StarThemeGroupMoreRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.groupId,b.groupId);jce_copy_struct(a.filterValue,b.filterValue);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.payedGroupType,b.payedGroupType);

#define jce_StarThemeGroupMoreResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.filter,b.filter);jce_copy_struct(a.starThemeList,b.starThemeList);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_SingleStarThemeDetailRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.startThemeId,b.startThemeId);

#define jce_SingleStarThemeDetailResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.detail,b.detail);

#define jce_StarThemeDetectNewRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.updateKey,b.updateKey);

#define jce_StarThemeDetectNewResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.updateKey,b.updateKey);jce_copy_struct(a.hasNew,b.hasNew);jce_copy_struct(a.headImgUrl,b.headImgUrl);jce_copy_struct(a.startThemeId,b.startThemeId);

#define jce_UseThemeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.startThemeId,b.startThemeId);

#define jce_UseThemeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_StarThemeHistoryItemData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starThemeId,b.starThemeId);jce_copy_struct(a.starThemeUsedTime,b.starThemeUsedTime);jce_copy_struct(a.syncType,b.syncType);jce_copy_struct(a.openId,b.openId);

#define jce_StarThemeHistoryRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.historyItemData,b.historyItemData);

#define jce_StarThemeHistoryResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.starThemeUsedTime,b.starThemeUsedTime);

#define jce_AccountBindInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.test,b.test);

#define jce_AccountBindInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.themeItem,b.themeItem);jce_copy_struct(a.starThemeUsedTime,b.starThemeUsedTime);



#endif
