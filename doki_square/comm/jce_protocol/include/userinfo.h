// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `userinfo.jce'
// **********************************************************************

#ifndef __USERINFO_H_
#define __USERINFO_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace jceUserInfo
{
    enum Command
    {
        CMD_USER_GET_INFO = 62370,
    };
    inline string etos(const Command & e)
    {
        switch(e)
        {
            case CMD_USER_GET_INFO: return "CMD_USER_GET_INFO";
            default: return "";
        }
    }
    inline int stoe(const string & s, Command & e)
    {
        if(s == "CMD_USER_GET_INFO")  { e=CMD_USER_GET_INFO; return 0;}

        return -1;
    }

    struct stFutureStar : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceUserInfo.stFutureStar";
        }
        static string MD5()
        {
            return "53faf9855afb04127a81180d63cd3f19";
        }
        stFutureStar()
        :dwCategory(0),strDesc(""),strLabel(""),strLivingAddr(""),strConstellation(""),ddwSubDokiId(0),strChooseSrc("")
        {
        }
        void resetDefautlt()
        {
            dwCategory = 0;
            strDesc = "";
            strLabel = "";
            strLivingAddr = "";
            strConstellation = "";
            ddwSubDokiId = 0;
            strChooseSrc = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwCategory, 0);
            _os.write(strDesc, 1);
            _os.write(strLabel, 2);
            _os.write(strLivingAddr, 3);
            _os.write(strConstellation, 4);
            _os.write(ddwSubDokiId, 5);
            _os.write(strChooseSrc, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwCategory, 0, true);
            _is.read(strDesc, 1, false);
            _is.read(strLabel, 2, false);
            _is.read(strLivingAddr, 3, false);
            _is.read(strConstellation, 4, false);
            _is.read(ddwSubDokiId, 5, false);
            _is.read(strChooseSrc, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwCategory,"dwCategory");
            _ds.display(strDesc,"strDesc");
            _ds.display(strLabel,"strLabel");
            _ds.display(strLivingAddr,"strLivingAddr");
            _ds.display(strConstellation,"strConstellation");
            _ds.display(ddwSubDokiId,"ddwSubDokiId");
            _ds.display(strChooseSrc,"strChooseSrc");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwCategory, true);
            _ds.displaySimple(strDesc, true);
            _ds.displaySimple(strLabel, true);
            _ds.displaySimple(strLivingAddr, true);
            _ds.displaySimple(strConstellation, true);
            _ds.displaySimple(ddwSubDokiId, true);
            _ds.displaySimple(strChooseSrc, false);
            return _os;
        }
    public:
        taf::Int32 dwCategory;
        std::string strDesc;
        std::string strLabel;
        std::string strLivingAddr;
        std::string strConstellation;
        taf::Int64 ddwSubDokiId;
        std::string strChooseSrc;
    };
    inline bool operator==(const stFutureStar&l, const stFutureStar&r)
    {
        return l.dwCategory == r.dwCategory && l.strDesc == r.strDesc && l.strLabel == r.strLabel && l.strLivingAddr == r.strLivingAddr && l.strConstellation == r.strConstellation && l.ddwSubDokiId == r.ddwSubDokiId && l.strChooseSrc == r.strChooseSrc;
    }
    inline bool operator!=(const stFutureStar&l, const stFutureStar&r)
    {
        return !(l == r);
    }

    struct stActivity : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceUserInfo.stActivity";
        }
        static string MD5()
        {
            return "8bc9b66a32e0fd159e7fcba6fd35f33f";
        }
        stActivity()
        :ddwActivityId(0),strActDesc(""),ddwDokiId(0)
        {
        }
        void resetDefautlt()
        {
            ddwActivityId = 0;
            strActDesc = "";
            ddwDokiId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwActivityId, 0);
            _os.write(strActDesc, 1);
            _os.write(stFutureInfo, 2);
            _os.write(ddwDokiId, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwActivityId, 0, true);
            _is.read(strActDesc, 1, false);
            _is.read(stFutureInfo, 2, false);
            _is.read(ddwDokiId, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwActivityId,"ddwActivityId");
            _ds.display(strActDesc,"strActDesc");
            _ds.display(stFutureInfo,"stFutureInfo");
            _ds.display(ddwDokiId,"ddwDokiId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwActivityId, true);
            _ds.displaySimple(strActDesc, true);
            _ds.displaySimple(stFutureInfo, true);
            _ds.displaySimple(ddwDokiId, false);
            return _os;
        }
    public:
        taf::Int32 ddwActivityId;
        std::string strActDesc;
        jceUserInfo::stFutureStar stFutureInfo;
        taf::Int64 ddwDokiId;
    };
    inline bool operator==(const stActivity&l, const stActivity&r)
    {
        return l.ddwActivityId == r.ddwActivityId && l.strActDesc == r.strActDesc && l.stFutureInfo == r.stFutureInfo && l.ddwDokiId == r.ddwDokiId;
    }
    inline bool operator!=(const stActivity&l, const stActivity&r)
    {
        return !(l == r);
    }

    struct stUserInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceUserInfo.stUserInfo";
        }
        static string MD5()
        {
            return "50cae5bfb80e5e889fd7ed4343f1bd01";
        }
        stUserInfo()
        :vuid(0),head(""),nick(""),introduction(""),identity(0),strTel(""),strIdCard(""),certifyStatus(0)
        {
        }
        void resetDefautlt()
        {
            vuid = 0;
            head = "";
            nick = "";
            introduction = "";
            identity = 0;
            strTel = "";
            strIdCard = "";
            certifyStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vuid, 0);
            _os.write(head, 1);
            _os.write(nick, 2);
            _os.write(introduction, 3);
            _os.write(identity, 4);
            _os.write(vecActInfo, 5);
            _os.write(strTel, 6);
            _os.write(strIdCard, 7);
            _os.write(certifyStatus, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vuid, 0, true);
            _is.read(head, 1, true);
            _is.read(nick, 2, true);
            _is.read(introduction, 3, false);
            _is.read(identity, 4, false);
            _is.read(vecActInfo, 5, false);
            _is.read(strTel, 6, false);
            _is.read(strIdCard, 7, false);
            _is.read(certifyStatus, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vuid,"vuid");
            _ds.display(head,"head");
            _ds.display(nick,"nick");
            _ds.display(introduction,"introduction");
            _ds.display(identity,"identity");
            _ds.display(vecActInfo,"vecActInfo");
            _ds.display(strTel,"strTel");
            _ds.display(strIdCard,"strIdCard");
            _ds.display(certifyStatus,"certifyStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vuid, true);
            _ds.displaySimple(head, true);
            _ds.displaySimple(nick, true);
            _ds.displaySimple(introduction, true);
            _ds.displaySimple(identity, true);
            _ds.displaySimple(vecActInfo, true);
            _ds.displaySimple(strTel, true);
            _ds.displaySimple(strIdCard, true);
            _ds.displaySimple(certifyStatus, false);
            return _os;
        }
    public:
        taf::Int64 vuid;
        std::string head;
        std::string nick;
        std::string introduction;
        taf::Int32 identity;
        vector<jceUserInfo::stActivity> vecActInfo;
        std::string strTel;
        std::string strIdCard;
        taf::Int32 certifyStatus;
    };
    inline bool operator==(const stUserInfo&l, const stUserInfo&r)
    {
        return l.vuid == r.vuid && l.head == r.head && l.nick == r.nick && l.introduction == r.introduction && l.identity == r.identity && l.vecActInfo == r.vecActInfo && l.strTel == r.strTel && l.strIdCard == r.strIdCard && l.certifyStatus == r.certifyStatus;
    }
    inline bool operator!=(const stUserInfo&l, const stUserInfo&r)
    {
        return !(l == r);
    }

    struct stQueryUserInfoReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceUserInfo.stQueryUserInfoReq";
        }
        static string MD5()
        {
            return "99dfcb196c9e99ea934372574238ec97";
        }
        stQueryUserInfoReq()
        :dwFlag(0)
        {
        }
        void resetDefautlt()
        {
            dwFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vecVuid, 0);
            _os.write(dwFlag, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vecVuid, 0, true);
            _is.read(dwFlag, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vecVuid,"vecVuid");
            _ds.display(dwFlag,"dwFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vecVuid, true);
            _ds.displaySimple(dwFlag, false);
            return _os;
        }
    public:
        vector<taf::Int64> vecVuid;
        taf::Int32 dwFlag;
    };
    inline bool operator==(const stQueryUserInfoReq&l, const stQueryUserInfoReq&r)
    {
        return l.vecVuid == r.vecVuid && l.dwFlag == r.dwFlag;
    }
    inline bool operator!=(const stQueryUserInfoReq&l, const stQueryUserInfoReq&r)
    {
        return !(l == r);
    }

    struct stQueryUserInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jceUserInfo.stQueryUserInfoRsp";
        }
        static string MD5()
        {
            return "c2d4777021a3a914c065f64dd550cc0b";
        }
        stQueryUserInfoRsp()
        :iErrCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(mapUserInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(mapUserInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(mapUserInfo,"mapUserInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(mapUserInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        map<taf::Int64, jceUserInfo::stUserInfo> mapUserInfo;
    };
    inline bool operator==(const stQueryUserInfoRsp&l, const stQueryUserInfoRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.mapUserInfo == r.mapUserInfo;
    }
    inline bool operator!=(const stQueryUserInfoRsp&l, const stQueryUserInfoRsp&r)
    {
        return !(l == r);
    }


}

#define jceUserInfo_stFutureStar_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwCategory,b.dwCategory);jce_copy_struct(a.strDesc,b.strDesc);jce_copy_struct(a.strLabel,b.strLabel);jce_copy_struct(a.strLivingAddr,b.strLivingAddr);jce_copy_struct(a.strConstellation,b.strConstellation);jce_copy_struct(a.ddwSubDokiId,b.ddwSubDokiId);jce_copy_struct(a.strChooseSrc,b.strChooseSrc);

#define jceUserInfo_stActivity_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwActivityId,b.ddwActivityId);jce_copy_struct(a.strActDesc,b.strActDesc);jce_copy_struct(a.stFutureInfo,b.stFutureInfo);jce_copy_struct(a.ddwDokiId,b.ddwDokiId);

#define jceUserInfo_stUserInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vuid,b.vuid);jce_copy_struct(a.head,b.head);jce_copy_struct(a.nick,b.nick);jce_copy_struct(a.introduction,b.introduction);jce_copy_struct(a.identity,b.identity);jce_copy_struct(a.vecActInfo,b.vecActInfo);jce_copy_struct(a.strTel,b.strTel);jce_copy_struct(a.strIdCard,b.strIdCard);jce_copy_struct(a.certifyStatus,b.certifyStatus);

#define jceUserInfo_stQueryUserInfoReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vecVuid,b.vecVuid);jce_copy_struct(a.dwFlag,b.dwFlag);

#define jceUserInfo_stQueryUserInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.mapUserInfo,b.mapUserInfo);



#endif
