// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_ona.jce'
// **********************************************************************

#ifndef __QQVIDEO_ONA_H_
#define __QQVIDEO_ONA_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"
#include "qqvideo_vplus_reward.h"
#include "qqvideo_ad.h"


namespace jce
{
    struct ONAViewCSS : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAViewCSS";
        }
        static string MD5()
        {
            return "120f3655a79fe57de264be3a6bfd2d1d";
        }
        ONAViewCSS()
        :styleID(0)
        {
        }
        void resetDefautlt()
        {
            styleID = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(styleID, 0);
            _os.write(propertyList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(styleID, 0, false);
            _is.read(propertyList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(styleID,"styleID");
            _ds.display(propertyList,"propertyList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(styleID, true);
            _ds.displaySimple(propertyList, false);
            return _os;
        }
    public:
        taf::Int32 styleID;
        map<std::string, std::string> propertyList;
    };
    inline bool operator==(const ONAViewCSS&l, const ONAViewCSS&r)
    {
        return l.styleID == r.styleID && l.propertyList == r.propertyList;
    }
    inline bool operator!=(const ONAViewCSS&l, const ONAViewCSS&r)
    {
        return !(l == r);
    }

    struct ONAButtonInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAButtonInfo";
        }
        static string MD5()
        {
            return "4a2ec867c6bdb6b8c52194c019779898";
        }
        ONAButtonInfo()
        :title(""),titleColor(""),bgColor("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            titleColor = "";
            bgColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(titleColor, 1);
            _os.write(bgColor, 2);
            _os.write(action, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(titleColor, 1, false);
            _is.read(bgColor, 2, false);
            _is.read(action, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(titleColor,"titleColor");
            _ds.display(bgColor,"bgColor");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(titleColor, true);
            _ds.displaySimple(bgColor, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string title;
        std::string titleColor;
        std::string bgColor;
        jce::Action action;
    };
    inline bool operator==(const ONAButtonInfo&l, const ONAButtonInfo&r)
    {
        return l.title == r.title && l.titleColor == r.titleColor && l.bgColor == r.bgColor && l.action == r.action;
    }
    inline bool operator!=(const ONAButtonInfo&l, const ONAButtonInfo&r)
    {
        return !(l == r);
    }

    struct ONAMultPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAMultPoster";
        }
        static string MD5()
        {
            return "cfb9218a6c0b3b405ef6089503e726d7";
        }
        ONAMultPoster()
        :showNum(0),style(0),uiType(0)
        {
        }
        void resetDefautlt()
        {
            showNum = 0;
            style = 0;
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(posterList, 0);
            _os.write(showNum, 1);
            _os.write(style, 2);
            _os.write(uiType, 3);
            _os.write(onaCSS, 4);
            _os.write(channelInsertInfo, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(posterList, 0, true);
            _is.read(showNum, 1, false);
            _is.read(style, 2, false);
            _is.read(uiType, 3, false);
            _is.read(onaCSS, 4, false);
            _is.read(channelInsertInfo, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(posterList,"posterList");
            _ds.display(showNum,"showNum");
            _ds.display(style,"style");
            _ds.display(uiType,"uiType");
            _ds.display(onaCSS,"onaCSS");
            _ds.display(channelInsertInfo,"channelInsertInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(posterList, true);
            _ds.displaySimple(showNum, true);
            _ds.displaySimple(style, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(onaCSS, true);
            _ds.displaySimple(channelInsertInfo, false);
            return _os;
        }
    public:
        vector<jce::Poster> posterList;
        taf::Int32 showNum;
        taf::Int32 style;
        taf::Char uiType;
        jce::ONAViewCSS onaCSS;
        jce::ChannelInsertInfo channelInsertInfo;
    };
    inline bool operator==(const ONAMultPoster&l, const ONAMultPoster&r)
    {
        return l.posterList == r.posterList && l.showNum == r.showNum && l.style == r.style && l.uiType == r.uiType && l.onaCSS == r.onaCSS && l.channelInsertInfo == r.channelInsertInfo;
    }
    inline bool operator!=(const ONAMultPoster&l, const ONAMultPoster&r)
    {
        return !(l == r);
    }

    struct ONAHeadPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAHeadPoster";
        }
        static string MD5()
        {
            return "e3e78ac6ff9305db4d816777285f2a2d";
        }
        ONAHeadPoster()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(actor, 1);
            _os.write(rssItem, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(actor, 1, false);
            _is.read(rssItem, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(actor,"actor");
            _ds.display(rssItem,"rssItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(actor, true);
            _ds.displaySimple(rssItem, false);
            return _os;
        }
    public:
        jce::Poster poster;
        jce::ActorInfo actor;
        jce::VRSSItem rssItem;
    };
    inline bool operator==(const ONAHeadPoster&l, const ONAHeadPoster&r)
    {
        return l.poster == r.poster && l.actor == r.actor && l.rssItem == r.rssItem;
    }
    inline bool operator!=(const ONAHeadPoster&l, const ONAHeadPoster&r)
    {
        return !(l == r);
    }

    struct ONAVRSSHeadPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAVRSSHeadPoster";
        }
        static string MD5()
        {
            return "42c0a1cb8443f761c454dd827ec9b1f4";
        }
        ONAVRSSHeadPoster()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(rssItem, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(rssItem, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(rssItem,"rssItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(rssItem, false);
            return _os;
        }
    public:
        jce::VRSSItem rssItem;
    };
    inline bool operator==(const ONAVRSSHeadPoster&l, const ONAVRSSHeadPoster&r)
    {
        return l.rssItem == r.rssItem;
    }
    inline bool operator!=(const ONAVRSSHeadPoster&l, const ONAVRSSHeadPoster&r)
    {
        return !(l == r);
    }

    struct ONAGalleryAdPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAGalleryAdPoster";
        }
        static string MD5()
        {
            return "a456eae1f23b52acf5391748949bc33b";
        }
        ONAGalleryAdPoster()
        :uiType(0),adType(0),adKey(0),extension(""),adSerialNumber(""),bottomPadding(0)
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            adType = 0;
            adKey = 0;
            extension = "";
            adSerialNumber = "";
            bottomPadding = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(adType, 1);
            _os.write(adKey, 2);
            _os.write(posterList, 3);
            _os.write(extension, 4);
            _os.write(adSerialNumber, 5);
            _os.write(insertPosterGroup, 6);
            _os.write(focusInfo, 7);
            _os.write(bottomPadding, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, false);
            _is.read(adType, 1, false);
            _is.read(adKey, 2, false);
            _is.read(posterList, 3, false);
            _is.read(extension, 4, false);
            _is.read(adSerialNumber, 5, false);
            _is.read(insertPosterGroup, 6, false);
            _is.read(focusInfo, 7, false);
            _is.read(bottomPadding, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(adType,"adType");
            _ds.display(adKey,"adKey");
            _ds.display(posterList,"posterList");
            _ds.display(extension,"extension");
            _ds.display(adSerialNumber,"adSerialNumber");
            _ds.display(insertPosterGroup,"insertPosterGroup");
            _ds.display(focusInfo,"focusInfo");
            _ds.display(bottomPadding,"bottomPadding");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(adType, true);
            _ds.displaySimple(adKey, true);
            _ds.displaySimple(posterList, true);
            _ds.displaySimple(extension, true);
            _ds.displaySimple(adSerialNumber, true);
            _ds.displaySimple(insertPosterGroup, true);
            _ds.displaySimple(focusInfo, true);
            _ds.displaySimple(bottomPadding, false);
            return _os;
        }
    public:
        taf::Char uiType;
        taf::Char adType;
        taf::Int32 adKey;
        vector<jce::Poster> posterList;
        std::string extension;
        std::string adSerialNumber;
        vector<jce::PosterGroup> insertPosterGroup;
        jce::AdFocusInfo focusInfo;
        taf::Int32 bottomPadding;
    };
    inline bool operator==(const ONAGalleryAdPoster&l, const ONAGalleryAdPoster&r)
    {
        return l.uiType == r.uiType && l.adType == r.adType && l.adKey == r.adKey && l.posterList == r.posterList && l.extension == r.extension && l.adSerialNumber == r.adSerialNumber && l.insertPosterGroup == r.insertPosterGroup && l.focusInfo == r.focusInfo && l.bottomPadding == r.bottomPadding;
    }
    inline bool operator!=(const ONAGalleryAdPoster&l, const ONAGalleryAdPoster&r)
    {
        return !(l == r);
    }

    struct ONAPosterTitle : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAPosterTitle";
        }
        static string MD5()
        {
            return "c2d6d6f786f7e4988ad47ea036485aee";
        }
        ONAPosterTitle()
        :title(""),subhead(""),style(0),reportParams(""),subTitle(""),reportKey(""),titleColor(""),bgColor(""),uiType(0),rightChainType(0),imagUIType(0),extraInfoType(0)
        {
        }
        void resetDefautlt()
        {
            title = "";
            subhead = "";
            style = 0;
            reportParams = "";
            subTitle = "";
            reportKey = "";
            titleColor = "";
            bgColor = "";
            uiType = 0;
            rightChainType = 0;
            imagUIType = 0;
            extraInfoType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(subhead, 1);
            _os.write(action, 2);
            _os.write(markLabelList, 3);
            _os.write(style, 4);
            _os.write(subMarkLabelList, 5);
            _os.write(reportParams, 6);
            _os.write(subTitle, 7);
            _os.write(imag, 8);
            _os.write(reportKey, 9);
            _os.write(titleColor, 10);
            _os.write(bgColor, 11);
            _os.write(uiType, 12);
            _os.write(onaCSS, 13);
            _os.write(channelInsertItem, 14);
            _os.write(rightChainInfo, 15);
            _os.write(rightChainType, 16);
            _os.write(imagUIType, 17);
            _os.write(extraInfoType, 18);
            _os.write(promotionAppInfo, 19);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(subhead, 1, false);
            _is.read(action, 2, false);
            _is.read(markLabelList, 3, false);
            _is.read(style, 4, false);
            _is.read(subMarkLabelList, 5, false);
            _is.read(reportParams, 6, false);
            _is.read(subTitle, 7, false);
            _is.read(imag, 8, false);
            _is.read(reportKey, 9, false);
            _is.read(titleColor, 10, false);
            _is.read(bgColor, 11, false);
            _is.read(uiType, 12, false);
            _is.read(onaCSS, 13, false);
            _is.read(channelInsertItem, 14, false);
            _is.read(rightChainInfo, 15, false);
            _is.read(rightChainType, 16, false);
            _is.read(imagUIType, 17, false);
            _is.read(extraInfoType, 18, false);
            _is.read(promotionAppInfo, 19, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(subhead,"subhead");
            _ds.display(action,"action");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(style,"style");
            _ds.display(subMarkLabelList,"subMarkLabelList");
            _ds.display(reportParams,"reportParams");
            _ds.display(subTitle,"subTitle");
            _ds.display(imag,"imag");
            _ds.display(reportKey,"reportKey");
            _ds.display(titleColor,"titleColor");
            _ds.display(bgColor,"bgColor");
            _ds.display(uiType,"uiType");
            _ds.display(onaCSS,"onaCSS");
            _ds.display(channelInsertItem,"channelInsertItem");
            _ds.display(rightChainInfo,"rightChainInfo");
            _ds.display(rightChainType,"rightChainType");
            _ds.display(imagUIType,"imagUIType");
            _ds.display(extraInfoType,"extraInfoType");
            _ds.display(promotionAppInfo,"promotionAppInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subhead, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(style, true);
            _ds.displaySimple(subMarkLabelList, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(imag, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(titleColor, true);
            _ds.displaySimple(bgColor, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(onaCSS, true);
            _ds.displaySimple(channelInsertItem, true);
            _ds.displaySimple(rightChainInfo, true);
            _ds.displaySimple(rightChainType, true);
            _ds.displaySimple(imagUIType, true);
            _ds.displaySimple(extraInfoType, true);
            _ds.displaySimple(promotionAppInfo, false);
            return _os;
        }
    public:
        std::string title;
        std::string subhead;
        jce::Action action;
        vector<jce::MarkLabel> markLabelList;
        taf::Char style;
        vector<jce::MarkLabel> subMarkLabelList;
        std::string reportParams;
        std::string subTitle;
        jce::VideoImage imag;
        std::string reportKey;
        std::string titleColor;
        std::string bgColor;
        taf::Int32 uiType;
        jce::ONAViewCSS onaCSS;
        jce::ChannelInsertItem channelInsertItem;
        jce::ActionBarInfo rightChainInfo;
        taf::Int32 rightChainType;
        taf::Int32 imagUIType;
        taf::Int32 extraInfoType;
        jce::PromotionAppDetail promotionAppInfo;
    };
    inline bool operator==(const ONAPosterTitle&l, const ONAPosterTitle&r)
    {
        return l.title == r.title && l.subhead == r.subhead && l.action == r.action && l.markLabelList == r.markLabelList && l.style == r.style && l.subMarkLabelList == r.subMarkLabelList && l.reportParams == r.reportParams && l.subTitle == r.subTitle && l.imag == r.imag && l.reportKey == r.reportKey && l.titleColor == r.titleColor && l.bgColor == r.bgColor && l.uiType == r.uiType && l.onaCSS == r.onaCSS && l.channelInsertItem == r.channelInsertItem && l.rightChainInfo == r.rightChainInfo && l.rightChainType == r.rightChainType && l.imagUIType == r.imagUIType && l.extraInfoType == r.extraInfoType && l.promotionAppInfo == r.promotionAppInfo;
    }
    inline bool operator!=(const ONAPosterTitle&l, const ONAPosterTitle&r)
    {
        return !(l == r);
    }

    struct ONAUserPosterTitle : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAUserPosterTitle";
        }
        static string MD5()
        {
            return "497b803285a25fd2f6799f2a5d88fa51";
        }
        ONAUserPosterTitle()
        :title(""),subhead(""),reportParams(""),deafultTitle(""),style(0),reportKey("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            subhead = "";
            reportParams = "";
            deafultTitle = "";
            style = 0;
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(subhead, 1);
            _os.write(action, 2);
            _os.write(markLabelList, 3);
            _os.write(subMarkLabelList, 4);
            _os.write(reportParams, 5);
            _os.write(deafultTitle, 6);
            _os.write(style, 7);
            _os.write(userPhotoAction, 8);
            _os.write(reportKey, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(subhead, 1, false);
            _is.read(action, 2, false);
            _is.read(markLabelList, 3, false);
            _is.read(subMarkLabelList, 4, false);
            _is.read(reportParams, 5, false);
            _is.read(deafultTitle, 6, false);
            _is.read(style, 7, false);
            _is.read(userPhotoAction, 8, false);
            _is.read(reportKey, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(subhead,"subhead");
            _ds.display(action,"action");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(subMarkLabelList,"subMarkLabelList");
            _ds.display(reportParams,"reportParams");
            _ds.display(deafultTitle,"deafultTitle");
            _ds.display(style,"style");
            _ds.display(userPhotoAction,"userPhotoAction");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subhead, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(subMarkLabelList, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(deafultTitle, true);
            _ds.displaySimple(style, true);
            _ds.displaySimple(userPhotoAction, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        std::string title;
        std::string subhead;
        jce::Action action;
        vector<jce::MarkLabel> markLabelList;
        vector<jce::MarkLabel> subMarkLabelList;
        std::string reportParams;
        std::string deafultTitle;
        taf::Char style;
        jce::Action userPhotoAction;
        std::string reportKey;
    };
    inline bool operator==(const ONAUserPosterTitle&l, const ONAUserPosterTitle&r)
    {
        return l.title == r.title && l.subhead == r.subhead && l.action == r.action && l.markLabelList == r.markLabelList && l.subMarkLabelList == r.subMarkLabelList && l.reportParams == r.reportParams && l.deafultTitle == r.deafultTitle && l.style == r.style && l.userPhotoAction == r.userPhotoAction && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const ONAUserPosterTitle&l, const ONAUserPosterTitle&r)
    {
        return !(l == r);
    }

    struct ONASplitLine : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASplitLine";
        }
        static string MD5()
        {
            return "99eb441ac61657daccc306a1145ecc98";
        }
        ONASplitLine()
        :color(""),aroundSpace(0),uiType(0),title(""),titlePosition(0),location(0),bottomPadding(0)
        {
        }
        void resetDefautlt()
        {
            color = "";
            aroundSpace = 0;
            uiType = 0;
            title = "";
            titlePosition = 0;
            location = 0;
            bottomPadding = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(color, 0);
            _os.write(aroundSpace, 1);
            _os.write(uiType, 2);
            _os.write(title, 3);
            _os.write(titlePosition, 4);
            _os.write(location, 5);
            _os.write(bottomPadding, 6);
            _os.write(onaCSS, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(color, 0, false);
            _is.read(aroundSpace, 1, false);
            _is.read(uiType, 2, false);
            _is.read(title, 3, false);
            _is.read(titlePosition, 4, false);
            _is.read(location, 5, false);
            _is.read(bottomPadding, 6, false);
            _is.read(onaCSS, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(color,"color");
            _ds.display(aroundSpace,"aroundSpace");
            _ds.display(uiType,"uiType");
            _ds.display(title,"title");
            _ds.display(titlePosition,"titlePosition");
            _ds.display(location,"location");
            _ds.display(bottomPadding,"bottomPadding");
            _ds.display(onaCSS,"onaCSS");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(color, true);
            _ds.displaySimple(aroundSpace, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(titlePosition, true);
            _ds.displaySimple(location, true);
            _ds.displaySimple(bottomPadding, true);
            _ds.displaySimple(onaCSS, false);
            return _os;
        }
    public:
        std::string color;
        taf::Char aroundSpace;
        taf::Int32 uiType;
        std::string title;
        taf::Int32 titlePosition;
        taf::Int32 location;
        taf::Int32 bottomPadding;
        jce::ONAViewCSS onaCSS;
    };
    inline bool operator==(const ONASplitLine&l, const ONASplitLine&r)
    {
        return l.color == r.color && l.aroundSpace == r.aroundSpace && l.uiType == r.uiType && l.title == r.title && l.titlePosition == r.titlePosition && l.location == r.location && l.bottomPadding == r.bottomPadding && l.onaCSS == r.onaCSS;
    }
    inline bool operator!=(const ONASplitLine&l, const ONASplitLine&r)
    {
        return !(l == r);
    }

    struct ONALoadMoreAction : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONALoadMoreAction";
        }
        static string MD5()
        {
            return "aafaa6ff41865d96b8e0874d4961afca";
        }
        ONALoadMoreAction()
        :uiType(0),title(""),actionType(0),type(""),dataKey(""),reportParams(""),reportKey(""),routeKey(""),loadSource(0)
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            title = "";
            actionType = 0;
            type = "";
            dataKey = "";
            reportParams = "";
            reportKey = "";
            routeKey = "";
            loadSource = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(title, 1);
            _os.write(actionType, 2);
            _os.write(action, 3);
            _os.write(type, 4);
            _os.write(dataKey, 5);
            _os.write(reportParams, 6);
            _os.write(reportKey, 7);
            _os.write(routeKey, 8);
            _os.write(loadSource, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, true);
            _is.read(title, 1, false);
            _is.read(actionType, 2, false);
            _is.read(action, 3, false);
            _is.read(type, 4, false);
            _is.read(dataKey, 5, false);
            _is.read(reportParams, 6, false);
            _is.read(reportKey, 7, false);
            _is.read(routeKey, 8, false);
            _is.read(loadSource, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(title,"title");
            _ds.display(actionType,"actionType");
            _ds.display(action,"action");
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(routeKey,"routeKey");
            _ds.display(loadSource,"loadSource");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(actionType, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(routeKey, true);
            _ds.displaySimple(loadSource, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        std::string title;
        taf::Int32 actionType;
        jce::Action action;
        std::string type;
        std::string dataKey;
        std::string reportParams;
        std::string reportKey;
        std::string routeKey;
        taf::Int32 loadSource;
    };
    inline bool operator==(const ONALoadMoreAction&l, const ONALoadMoreAction&r)
    {
        return l.uiType == r.uiType && l.title == r.title && l.actionType == r.actionType && l.action == r.action && l.type == r.type && l.dataKey == r.dataKey && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.routeKey == r.routeKey && l.loadSource == r.loadSource;
    }
    inline bool operator!=(const ONALoadMoreAction&l, const ONALoadMoreAction&r)
    {
        return !(l == r);
    }

    struct ONAStarList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAStarList";
        }
        static string MD5()
        {
            return "a83b8e415580ccb55db7012923ad9563";
        }
        ONAStarList()
        :showFlag(0),dataKey(""),reportParams(""),uiStyle(0),reportKey("")
        {
        }
        void resetDefautlt()
        {
            showFlag = 0;
            dataKey = "";
            reportParams = "";
            uiStyle = 0;
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starList, 0);
            _os.write(showFlag, 1);
            _os.write(dataKey, 2);
            _os.write(reportParams, 3);
            _os.write(uiStyle, 4);
            _os.write(reportKey, 5);
            _os.write(onaCSS, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starList, 0, true);
            _is.read(showFlag, 1, true);
            _is.read(dataKey, 2, false);
            _is.read(reportParams, 3, false);
            _is.read(uiStyle, 4, false);
            _is.read(reportKey, 5, false);
            _is.read(onaCSS, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starList,"starList");
            _ds.display(showFlag,"showFlag");
            _ds.display(dataKey,"dataKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(uiStyle,"uiStyle");
            _ds.display(reportKey,"reportKey");
            _ds.display(onaCSS,"onaCSS");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starList, true);
            _ds.displaySimple(showFlag, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(uiStyle, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(onaCSS, false);
            return _os;
        }
    public:
        vector<jce::ActorInfo> starList;
        taf::Char showFlag;
        std::string dataKey;
        std::string reportParams;
        taf::Int32 uiStyle;
        std::string reportKey;
        jce::ONAViewCSS onaCSS;
    };
    inline bool operator==(const ONAStarList&l, const ONAStarList&r)
    {
        return l.starList == r.starList && l.showFlag == r.showFlag && l.dataKey == r.dataKey && l.reportParams == r.reportParams && l.uiStyle == r.uiStyle && l.reportKey == r.reportKey && l.onaCSS == r.onaCSS;
    }
    inline bool operator!=(const ONAStarList&l, const ONAStarList&r)
    {
        return !(l == r);
    }

    struct ONANewsItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONANewsItem";
        }
        static string MD5()
        {
            return "427ced26f4ddb7b0703a397b1d856dd2";
        }
        ONANewsItem()
        :uiType(0),feedbackDataKey(""),feedbackType(""),mdsumVideo("")
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            feedbackDataKey = "";
            feedbackType = "";
            mdsumVideo = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(action, 1);
            _os.write(uiType, 2);
            _os.write(lineTag, 3);
            _os.write(attentItem, 4);
            _os.write(shareItem, 5);
            _os.write(feedbackDataKey, 6);
            _os.write(feedbackType, 7);
            _os.write(mdsumVideo, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(action, 1, false);
            _is.read(uiType, 2, false);
            _is.read(lineTag, 3, false);
            _is.read(attentItem, 4, false);
            _is.read(shareItem, 5, false);
            _is.read(feedbackDataKey, 6, false);
            _is.read(feedbackType, 7, false);
            _is.read(mdsumVideo, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(action,"action");
            _ds.display(uiType,"uiType");
            _ds.display(lineTag,"lineTag");
            _ds.display(attentItem,"attentItem");
            _ds.display(shareItem,"shareItem");
            _ds.display(feedbackDataKey,"feedbackDataKey");
            _ds.display(feedbackType,"feedbackType");
            _ds.display(mdsumVideo,"mdsumVideo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(lineTag, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(feedbackDataKey, true);
            _ds.displaySimple(feedbackType, true);
            _ds.displaySimple(mdsumVideo, false);
            return _os;
        }
    public:
        jce::Poster poster;
        jce::Action action;
        taf::Char uiType;
        vector<jce::IconTagText> lineTag;
        jce::VideoAttentItem attentItem;
        jce::ShareItem shareItem;
        std::string feedbackDataKey;
        std::string feedbackType;
        std::string mdsumVideo;
    };
    inline bool operator==(const ONANewsItem&l, const ONANewsItem&r)
    {
        return l.poster == r.poster && l.action == r.action && l.uiType == r.uiType && l.lineTag == r.lineTag && l.attentItem == r.attentItem && l.shareItem == r.shareItem && l.feedbackDataKey == r.feedbackDataKey && l.feedbackType == r.feedbackType && l.mdsumVideo == r.mdsumVideo;
    }
    inline bool operator!=(const ONANewsItem&l, const ONANewsItem&r)
    {
        return !(l == r);
    }

    struct ONAMatchSchedule : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAMatchSchedule";
        }
        static string MD5()
        {
            return "bb6f08d020568bbdc3d6d9891c287861";
        }
        ONAMatchSchedule()
        :status(0),matchIcon(""),firstText(""),secondText(""),infoTitle(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            status = 0;
            matchIcon = "";
            firstText = "";
            secondText = "";
            infoTitle = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
            _os.write(matchIcon, 1);
            _os.write(firstText, 2);
            _os.write(secondText, 3);
            _os.write(attentItem, 4);
            _os.write(action, 5);
            _os.write(actionBars, 6);
            _os.write(infoTitle, 7);
            _os.write(reportKey, 8);
            _os.write(reportParams, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
            _is.read(matchIcon, 1, false);
            _is.read(firstText, 2, false);
            _is.read(secondText, 3, false);
            _is.read(attentItem, 4, false);
            _is.read(action, 5, false);
            _is.read(actionBars, 6, false);
            _is.read(infoTitle, 7, false);
            _is.read(reportKey, 8, false);
            _is.read(reportParams, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            _ds.display(matchIcon,"matchIcon");
            _ds.display(firstText,"firstText");
            _ds.display(secondText,"secondText");
            _ds.display(attentItem,"attentItem");
            _ds.display(action,"action");
            _ds.display(actionBars,"actionBars");
            _ds.display(infoTitle,"infoTitle");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, true);
            _ds.displaySimple(matchIcon, true);
            _ds.displaySimple(firstText, true);
            _ds.displaySimple(secondText, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(actionBars, true);
            _ds.displaySimple(infoTitle, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 status;
        std::string matchIcon;
        std::string firstText;
        std::string secondText;
        jce::VideoAttentItem attentItem;
        jce::Action action;
        vector<jce::ActionBarInfo> actionBars;
        std::string infoTitle;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAMatchSchedule&l, const ONAMatchSchedule&r)
    {
        return l.status == r.status && l.matchIcon == r.matchIcon && l.firstText == r.firstText && l.secondText == r.secondText && l.attentItem == r.attentItem && l.action == r.action && l.actionBars == r.actionBars && l.infoTitle == r.infoTitle && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAMatchSchedule&l, const ONAMatchSchedule&r)
    {
        return !(l == r);
    }

    struct ONACompeteSchedule : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONACompeteSchedule";
        }
        static string MD5()
        {
            return "971349b659354b3c1ad329a3677ee5ce";
        }
        ONACompeteSchedule()
        :status(0),topIcon(""),topTitle(""),btmIcon(""),btmTitle(""),firstLine(""),secondLine(""),topScore(0),btmScore(0),infoTitle(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            status = 0;
            topIcon = "";
            topTitle = "";
            btmIcon = "";
            btmTitle = "";
            firstLine = "";
            secondLine = "";
            topScore = 0;
            btmScore = 0;
            infoTitle = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
            _os.write(topIcon, 1);
            _os.write(topTitle, 2);
            _os.write(btmIcon, 3);
            _os.write(btmTitle, 4);
            _os.write(firstLine, 5);
            _os.write(secondLine, 6);
            _os.write(topScore, 7);
            _os.write(btmScore, 8);
            _os.write(attentItem, 9);
            _os.write(action, 10);
            _os.write(actionBars, 11);
            _os.write(infoTitle, 12);
            _os.write(reportKey, 13);
            _os.write(reportParams, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
            _is.read(topIcon, 1, true);
            _is.read(topTitle, 2, true);
            _is.read(btmIcon, 3, true);
            _is.read(btmTitle, 4, true);
            _is.read(firstLine, 5, false);
            _is.read(secondLine, 6, false);
            _is.read(topScore, 7, false);
            _is.read(btmScore, 8, false);
            _is.read(attentItem, 9, false);
            _is.read(action, 10, false);
            _is.read(actionBars, 11, false);
            _is.read(infoTitle, 12, false);
            _is.read(reportKey, 13, false);
            _is.read(reportParams, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            _ds.display(topIcon,"topIcon");
            _ds.display(topTitle,"topTitle");
            _ds.display(btmIcon,"btmIcon");
            _ds.display(btmTitle,"btmTitle");
            _ds.display(firstLine,"firstLine");
            _ds.display(secondLine,"secondLine");
            _ds.display(topScore,"topScore");
            _ds.display(btmScore,"btmScore");
            _ds.display(attentItem,"attentItem");
            _ds.display(action,"action");
            _ds.display(actionBars,"actionBars");
            _ds.display(infoTitle,"infoTitle");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, true);
            _ds.displaySimple(topIcon, true);
            _ds.displaySimple(topTitle, true);
            _ds.displaySimple(btmIcon, true);
            _ds.displaySimple(btmTitle, true);
            _ds.displaySimple(firstLine, true);
            _ds.displaySimple(secondLine, true);
            _ds.displaySimple(topScore, true);
            _ds.displaySimple(btmScore, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(actionBars, true);
            _ds.displaySimple(infoTitle, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 status;
        std::string topIcon;
        std::string topTitle;
        std::string btmIcon;
        std::string btmTitle;
        std::string firstLine;
        std::string secondLine;
        taf::Int32 topScore;
        taf::Int32 btmScore;
        jce::VideoAttentItem attentItem;
        jce::Action action;
        vector<jce::ActionBarInfo> actionBars;
        std::string infoTitle;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONACompeteSchedule&l, const ONACompeteSchedule&r)
    {
        return l.status == r.status && l.topIcon == r.topIcon && l.topTitle == r.topTitle && l.btmIcon == r.btmIcon && l.btmTitle == r.btmTitle && l.firstLine == r.firstLine && l.secondLine == r.secondLine && l.topScore == r.topScore && l.btmScore == r.btmScore && l.attentItem == r.attentItem && l.action == r.action && l.actionBars == r.actionBars && l.infoTitle == r.infoTitle && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONACompeteSchedule&l, const ONACompeteSchedule&r)
    {
        return !(l == r);
    }

    struct ONAGrid : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAGrid";
        }
        static string MD5()
        {
            return "9fad42fc1537de1a34c0ecea630dd11f";
        }
        ONAGrid()
        :rowCount(0),uiType(0),childModeButtonShow(0)
        {
        }
        void resetDefautlt()
        {
            rowCount = 0;
            uiType = 0;
            childModeButtonShow = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemList, 0);
            _os.write(rowCount, 1);
            _os.write(uiType, 2);
            _os.write(childModeButtonShow, 3);
            _os.write(onaCSS, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(itemList, 0, true);
            _is.read(rowCount, 1, true);
            _is.read(uiType, 2, false);
            _is.read(childModeButtonShow, 3, false);
            _is.read(onaCSS, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemList,"itemList");
            _ds.display(rowCount,"rowCount");
            _ds.display(uiType,"uiType");
            _ds.display(childModeButtonShow,"childModeButtonShow");
            _ds.display(onaCSS,"onaCSS");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(rowCount, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(childModeButtonShow, true);
            _ds.displaySimple(onaCSS, false);
            return _os;
        }
    public:
        vector<jce::GridItem> itemList;
        taf::Int32 rowCount;
        taf::Char uiType;
        taf::Char childModeButtonShow;
        jce::ONAViewCSS onaCSS;
    };
    inline bool operator==(const ONAGrid&l, const ONAGrid&r)
    {
        return l.itemList == r.itemList && l.rowCount == r.rowCount && l.uiType == r.uiType && l.childModeButtonShow == r.childModeButtonShow && l.onaCSS == r.onaCSS;
    }
    inline bool operator!=(const ONAGrid&l, const ONAGrid&r)
    {
        return !(l == r);
    }

    struct ONADetailsVideoCircleShare : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADetailsVideoCircleShare";
        }
        static string MD5()
        {
            return "43d3f490e181753e5dc78a3ae8f5fa80";
        }
        ONADetailsVideoCircleShare()
        :shareTitle(""),readKey(""),writeKey(""),uiType(0)
        {
        }
        void resetDefautlt()
        {
            shareTitle = "";
            readKey = "";
            writeKey = "";
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(shareTitle, 1);
            _os.write(readKey, 2);
            _os.write(writeKey, 3);
            _os.write(uiType, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(shareTitle, 1, true);
            _is.read(readKey, 2, true);
            _is.read(writeKey, 3, true);
            _is.read(uiType, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(shareTitle,"shareTitle");
            _ds.display(readKey,"readKey");
            _ds.display(writeKey,"writeKey");
            _ds.display(uiType,"uiType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(shareTitle, true);
            _ds.displaySimple(readKey, true);
            _ds.displaySimple(writeKey, true);
            _ds.displaySimple(uiType, false);
            return _os;
        }
    public:
        std::string shareTitle;
        std::string readKey;
        std::string writeKey;
        taf::Char uiType;
    };
    inline bool operator==(const ONADetailsVideoCircleShare&l, const ONADetailsVideoCircleShare&r)
    {
        return l.shareTitle == r.shareTitle && l.readKey == r.readKey && l.writeKey == r.writeKey && l.uiType == r.uiType;
    }
    inline bool operator!=(const ONADetailsVideoCircleShare&l, const ONADetailsVideoCircleShare&r)
    {
        return !(l == r);
    }

    struct ONADetailsToolbar : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADetailsToolbar";
        }
        static string MD5()
        {
            return "9c57b774ed300b156f9aa9332bfdb8d6";
        }
        ONADetailsToolbar()
        :title(""),updateDetails(""),cacheDataKey(""),uiType(0),subTitle(""),feedsNum(0),downloadCopyRight(0),presentRight(0)
        {
        }
        void resetDefautlt()
        {
            title = "";
            updateDetails = "";
            cacheDataKey = "";
            uiType = 0;
            subTitle = "";
            feedsNum = 0;
            downloadCopyRight = 0;
            presentRight = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(updateDetails, 1);
            _os.write(markLabelList, 2);
            _os.write(attentItem, 3);
            _os.write(cacheDataKey, 4);
            _os.write(uiType, 5);
            _os.write(subTitle, 6);
            _os.write(subLabelList, 7);
            _os.write(shareItem, 9);
            _os.write(actors, 10);
            _os.write(feedsNum, 11);
            _os.write(downloadCopyRight, 12);
            _os.write(presentRight, 13);
            _os.write(commentAction, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(updateDetails, 1, false);
            _is.read(markLabelList, 2, false);
            _is.read(attentItem, 3, false);
            _is.read(cacheDataKey, 4, false);
            _is.read(uiType, 5, false);
            _is.read(subTitle, 6, false);
            _is.read(subLabelList, 7, false);
            _is.read(shareItem, 9, false);
            _is.read(actors, 10, false);
            _is.read(feedsNum, 11, false);
            _is.read(downloadCopyRight, 12, false);
            _is.read(presentRight, 13, false);
            _is.read(commentAction, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(updateDetails,"updateDetails");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(attentItem,"attentItem");
            _ds.display(cacheDataKey,"cacheDataKey");
            _ds.display(uiType,"uiType");
            _ds.display(subTitle,"subTitle");
            _ds.display(subLabelList,"subLabelList");
            _ds.display(shareItem,"shareItem");
            _ds.display(actors,"actors");
            _ds.display(feedsNum,"feedsNum");
            _ds.display(downloadCopyRight,"downloadCopyRight");
            _ds.display(presentRight,"presentRight");
            _ds.display(commentAction,"commentAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(updateDetails, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(cacheDataKey, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(subLabelList, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(actors, true);
            _ds.displaySimple(feedsNum, true);
            _ds.displaySimple(downloadCopyRight, true);
            _ds.displaySimple(presentRight, true);
            _ds.displaySimple(commentAction, false);
            return _os;
        }
    public:
        std::string title;
        std::string updateDetails;
        vector<jce::MarkLabel> markLabelList;
        jce::VideoAttentItem attentItem;
        std::string cacheDataKey;
        taf::Char uiType;
        std::string subTitle;
        vector<jce::MarkLabel> subLabelList;
        jce::ShareItem shareItem;
        vector<jce::ActorInfo> actors;
        taf::Int64 feedsNum;
        taf::Int32 downloadCopyRight;
        taf::Int32 presentRight;
        jce::Action commentAction;
    };
    inline bool operator==(const ONADetailsToolbar&l, const ONADetailsToolbar&r)
    {
        return l.title == r.title && l.updateDetails == r.updateDetails && l.markLabelList == r.markLabelList && l.attentItem == r.attentItem && l.cacheDataKey == r.cacheDataKey && l.uiType == r.uiType && l.subTitle == r.subTitle && l.subLabelList == r.subLabelList && l.shareItem == r.shareItem && l.actors == r.actors && l.feedsNum == r.feedsNum && l.downloadCopyRight == r.downloadCopyRight && l.presentRight == r.presentRight && l.commentAction == r.commentAction;
    }
    inline bool operator!=(const ONADetailsToolbar&l, const ONADetailsToolbar&r)
    {
        return !(l == r);
    }

    struct ONADetailsVideoList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADetailsVideoList";
        }
        static string MD5()
        {
            return "4a01b77909bfe662408b6bf86816e7bb";
        }
        ONADetailsVideoList()
        :uiType(0),dataKey(""),reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            dataKey = "";
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(dataKey, 1);
            _os.write(reportParams, 2);
            _os.write(reportKey, 3);
            _os.write(title, 4);
            _os.write(spliteLine, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, true);
            _is.read(dataKey, 1, true);
            _is.read(reportParams, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(title, 4, false);
            _is.read(spliteLine, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(dataKey,"dataKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(title,"title");
            _ds.display(spliteLine,"spliteLine");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(spliteLine, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        std::string dataKey;
        std::string reportParams;
        std::string reportKey;
        jce::ONAPosterTitle title;
        jce::ONASplitLine spliteLine;
    };
    inline bool operator==(const ONADetailsVideoList&l, const ONADetailsVideoList&r)
    {
        return l.uiType == r.uiType && l.dataKey == r.dataKey && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.title == r.title && l.spliteLine == r.spliteLine;
    }
    inline bool operator!=(const ONADetailsVideoList&l, const ONADetailsVideoList&r)
    {
        return !(l == r);
    }

    struct ONADetailsPosterList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADetailsPosterList";
        }
        static string MD5()
        {
            return "e35037339a961db1d2f02879ff5fcdac";
        }
        ONADetailsPosterList()
        :uiType(0),dataKey(""),reportParams(""),reportKey(""),operateFlag(0)
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            dataKey = "";
            reportParams = "";
            reportKey = "";
            operateFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(dataKey, 1);
            _os.write(reportParams, 2);
            _os.write(reportKey, 3);
            _os.write(operateFlag, 4);
            _os.write(mainData, 5);
            _os.write(title, 6);
            _os.write(spliteLine, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, true);
            _is.read(dataKey, 1, true);
            _is.read(reportParams, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(operateFlag, 4, false);
            _is.read(mainData, 5, false);
            _is.read(title, 6, false);
            _is.read(spliteLine, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(dataKey,"dataKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(operateFlag,"operateFlag");
            _ds.display(mainData,"mainData");
            _ds.display(title,"title");
            _ds.display(spliteLine,"spliteLine");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(operateFlag, true);
            _ds.displaySimple(mainData, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(spliteLine, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        std::string dataKey;
        std::string reportParams;
        std::string reportKey;
        taf::Int32 operateFlag;
        jce::CoverDataList mainData;
        jce::ONAPosterTitle title;
        jce::ONASplitLine spliteLine;
    };
    inline bool operator==(const ONADetailsPosterList&l, const ONADetailsPosterList&r)
    {
        return l.uiType == r.uiType && l.dataKey == r.dataKey && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.operateFlag == r.operateFlag && l.mainData == r.mainData && l.title == r.title && l.spliteLine == r.spliteLine;
    }
    inline bool operator!=(const ONADetailsPosterList&l, const ONADetailsPosterList&r)
    {
        return !(l == r);
    }

    struct ONADetailsVerticalVideoList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADetailsVerticalVideoList";
        }
        static string MD5()
        {
            return "59fa05feaa870b06c43452e16c05ac7a";
        }
        ONADetailsVerticalVideoList()
        :dataKey(""),reportParams(""),reportKey(""),maxOutShowsize(0),needChange(0)
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            reportParams = "";
            reportKey = "";
            maxOutShowsize = 0;
            needChange = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(reportParams, 1);
            _os.write(reportKey, 2);
            _os.write(title, 3);
            _os.write(spliteLine, 4);
            _os.write(moreAction, 5);
            _os.write(maxOutShowsize, 6);
            _os.write(needChange, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(reportParams, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(title, 3, false);
            _is.read(spliteLine, 4, false);
            _is.read(moreAction, 5, false);
            _is.read(maxOutShowsize, 6, false);
            _is.read(needChange, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(title,"title");
            _ds.display(spliteLine,"spliteLine");
            _ds.display(moreAction,"moreAction");
            _ds.display(maxOutShowsize,"maxOutShowsize");
            _ds.display(needChange,"needChange");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(spliteLine, true);
            _ds.displaySimple(moreAction, true);
            _ds.displaySimple(maxOutShowsize, true);
            _ds.displaySimple(needChange, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string reportParams;
        std::string reportKey;
        jce::ONAPosterTitle title;
        jce::ONASplitLine spliteLine;
        jce::ONALoadMoreAction moreAction;
        taf::Int32 maxOutShowsize;
        taf::Int32 needChange;
    };
    inline bool operator==(const ONADetailsVerticalVideoList&l, const ONADetailsVerticalVideoList&r)
    {
        return l.dataKey == r.dataKey && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.title == r.title && l.spliteLine == r.spliteLine && l.moreAction == r.moreAction && l.maxOutShowsize == r.maxOutShowsize && l.needChange == r.needChange;
    }
    inline bool operator!=(const ONADetailsVerticalVideoList&l, const ONADetailsVerticalVideoList&r)
    {
        return !(l == r);
    }

    struct ONAAdPlaceHolder : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAAdPlaceHolder";
        }
        static string MD5()
        {
            return "840352e49619ba48b01d23fb33292f2d";
        }
        ONAAdPlaceHolder()
        :reportParams(""),reportKey(""),dataKey(""),adType(0),adKey("")
        {
        }
        void resetDefautlt()
        {
            reportParams = "";
            reportKey = "";
            dataKey = "";
            adType = 0;
            adKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(reportParams, 0);
            _os.write(reportKey, 1);
            _os.write(dataKey, 2);
            _os.write(adType, 3);
            _os.write(adKey, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(reportParams, 0, false);
            _is.read(reportKey, 1, false);
            _is.read(dataKey, 2, false);
            _is.read(adType, 3, false);
            _is.read(adKey, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(dataKey,"dataKey");
            _ds.display(adType,"adType");
            _ds.display(adKey,"adKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(adType, true);
            _ds.displaySimple(adKey, false);
            return _os;
        }
    public:
        std::string reportParams;
        std::string reportKey;
        std::string dataKey;
        taf::Char adType;
        std::string adKey;
    };
    inline bool operator==(const ONAAdPlaceHolder&l, const ONAAdPlaceHolder&r)
    {
        return l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.dataKey == r.dataKey && l.adType == r.adType && l.adKey == r.adKey;
    }
    inline bool operator!=(const ONAAdPlaceHolder&l, const ONAAdPlaceHolder&r)
    {
        return !(l == r);
    }

    struct ONADetailsVerticalPosterList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADetailsVerticalPosterList";
        }
        static string MD5()
        {
            return "355611d50b3cae0e749b62cabccbd76c";
        }
        ONADetailsVerticalPosterList()
        :dataKey(""),reportParams(""),reportKey(""),maxOutShowsize(0),operateFlag(0),needChange(0),adChannelId("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            reportParams = "";
            reportKey = "";
            maxOutShowsize = 0;
            operateFlag = 0;
            needChange = 0;
            adChannelId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(reportParams, 1);
            _os.write(reportKey, 2);
            _os.write(title, 3);
            _os.write(spliteLine, 4);
            _os.write(moreAction, 5);
            _os.write(maxOutShowsize, 6);
            _os.write(mainData, 7);
            _os.write(operateFlag, 8);
            _os.write(needChange, 9);
            _os.write(adPlaceHolderList, 10);
            _os.write(leftImageRightTextAdPosterList, 11);
            _os.write(adContext, 12);
            _os.write(adChannelId, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(reportParams, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(title, 3, false);
            _is.read(spliteLine, 4, false);
            _is.read(moreAction, 5, false);
            _is.read(maxOutShowsize, 6, false);
            _is.read(mainData, 7, false);
            _is.read(operateFlag, 8, false);
            _is.read(needChange, 9, false);
            _is.read(adPlaceHolderList, 10, false);
            _is.read(leftImageRightTextAdPosterList, 11, false);
            _is.read(adContext, 12, false);
            _is.read(adChannelId, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(title,"title");
            _ds.display(spliteLine,"spliteLine");
            _ds.display(moreAction,"moreAction");
            _ds.display(maxOutShowsize,"maxOutShowsize");
            _ds.display(mainData,"mainData");
            _ds.display(operateFlag,"operateFlag");
            _ds.display(needChange,"needChange");
            _ds.display(adPlaceHolderList,"adPlaceHolderList");
            _ds.display(leftImageRightTextAdPosterList,"leftImageRightTextAdPosterList");
            _ds.display(adContext,"adContext");
            _ds.display(adChannelId,"adChannelId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(spliteLine, true);
            _ds.displaySimple(moreAction, true);
            _ds.displaySimple(maxOutShowsize, true);
            _ds.displaySimple(mainData, true);
            _ds.displaySimple(operateFlag, true);
            _ds.displaySimple(needChange, true);
            _ds.displaySimple(adPlaceHolderList, true);
            _ds.displaySimple(leftImageRightTextAdPosterList, true);
            _ds.displaySimple(adContext, true);
            _ds.displaySimple(adChannelId, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string reportParams;
        std::string reportKey;
        jce::ONAPosterTitle title;
        jce::ONASplitLine spliteLine;
        jce::ONALoadMoreAction moreAction;
        taf::Int32 maxOutShowsize;
        jce::CoverDataList mainData;
        taf::Int32 operateFlag;
        taf::Int32 needChange;
        vector<jce::ONAAdPlaceHolder> adPlaceHolderList;
        vector<jce::ONALeftImageRightTextAdPoster> leftImageRightTextAdPosterList;
        vector<std::string> adContext;
        std::string adChannelId;
    };
    inline bool operator==(const ONADetailsVerticalPosterList&l, const ONADetailsVerticalPosterList&r)
    {
        return l.dataKey == r.dataKey && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.title == r.title && l.spliteLine == r.spliteLine && l.moreAction == r.moreAction && l.maxOutShowsize == r.maxOutShowsize && l.mainData == r.mainData && l.operateFlag == r.operateFlag && l.needChange == r.needChange && l.adPlaceHolderList == r.adPlaceHolderList && l.leftImageRightTextAdPosterList == r.leftImageRightTextAdPosterList && l.adContext == r.adContext && l.adChannelId == r.adChannelId;
    }
    inline bool operator!=(const ONADetailsVerticalPosterList&l, const ONADetailsVerticalPosterList&r)
    {
        return !(l == r);
    }

    struct ONADetailsHorizonPosterList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADetailsHorizonPosterList";
        }
        static string MD5()
        {
            return "78b847c00bad2d2adfe67f6286b10ae2";
        }
        ONADetailsHorizonPosterList()
        :dataKey(""),type(0),maxOutShowsize(0),reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            type = 0;
            maxOutShowsize = 0;
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(type, 1);
            _os.write(maxOutShowsize, 2);
            _os.write(title, 3);
            _os.write(moreAction, 4);
            _os.write(reportParams, 5);
            _os.write(reportKey, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(type, 1, false);
            _is.read(maxOutShowsize, 2, false);
            _is.read(title, 3, false);
            _is.read(moreAction, 4, false);
            _is.read(reportParams, 5, false);
            _is.read(reportKey, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(type,"type");
            _ds.display(maxOutShowsize,"maxOutShowsize");
            _ds.display(title,"title");
            _ds.display(moreAction,"moreAction");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(maxOutShowsize, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(moreAction, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        std::string dataKey;
        taf::Char type;
        taf::Int32 maxOutShowsize;
        jce::ONAPosterTitle title;
        jce::Action moreAction;
        std::string reportParams;
        std::string reportKey;
    };
    inline bool operator==(const ONADetailsHorizonPosterList&l, const ONADetailsHorizonPosterList&r)
    {
        return l.dataKey == r.dataKey && l.type == r.type && l.maxOutShowsize == r.maxOutShowsize && l.title == r.title && l.moreAction == r.moreAction && l.reportParams == r.reportParams && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const ONADetailsHorizonPosterList&l, const ONADetailsHorizonPosterList&r)
    {
        return !(l == r);
    }

    struct ONADetailsIntroduction : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADetailsIntroduction";
        }
        static string MD5()
        {
            return "99bbc0736cebebc4d7504126259e65fe";
        }
        ONADetailsIntroduction()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(action, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(action, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string dataKey;
        jce::Action action;
    };
    inline bool operator==(const ONADetailsIntroduction&l, const ONADetailsIntroduction&r)
    {
        return l.dataKey == r.dataKey && l.action == r.action;
    }
    inline bool operator!=(const ONADetailsIntroduction&l, const ONADetailsIntroduction&r)
    {
        return !(l == r);
    }

    struct ONACommentWrite : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONACommentWrite";
        }
        static string MD5()
        {
            return "372e1e8d744696da852cc599516f5e3c";
        }
        ONACommentWrite()
        :commentKey(""),isCanWrite(true),commentTip(""),filterKey(""),title(""),hide(0),uiType(0)
        {
        }
        void resetDefautlt()
        {
            commentKey = "";
            isCanWrite = true;
            commentTip = "";
            filterKey = "";
            title = "";
            hide = 0;
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commentKey, 0);
            _os.write(isCanWrite, 1);
            _os.write(commentTip, 2);
            _os.write(filterKey, 3);
            _os.write(title, 4);
            _os.write(action, 5);
            _os.write(hide, 6);
            _os.write(uiType, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commentKey, 0, true);
            _is.read(isCanWrite, 1, true);
            _is.read(commentTip, 2, false);
            _is.read(filterKey, 3, false);
            _is.read(title, 4, false);
            _is.read(action, 5, false);
            _is.read(hide, 6, false);
            _is.read(uiType, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commentKey,"commentKey");
            _ds.display(isCanWrite,"isCanWrite");
            _ds.display(commentTip,"commentTip");
            _ds.display(filterKey,"filterKey");
            _ds.display(title,"title");
            _ds.display(action,"action");
            _ds.display(hide,"hide");
            _ds.display(uiType,"uiType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commentKey, true);
            _ds.displaySimple(isCanWrite, true);
            _ds.displaySimple(commentTip, true);
            _ds.displaySimple(filterKey, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(hide, true);
            _ds.displaySimple(uiType, false);
            return _os;
        }
    public:
        std::string commentKey;
        taf::Bool isCanWrite;
        std::string commentTip;
        std::string filterKey;
        std::string title;
        jce::Action action;
        taf::Char hide;
        taf::Int32 uiType;
    };
    inline bool operator==(const ONACommentWrite&l, const ONACommentWrite&r)
    {
        return l.commentKey == r.commentKey && l.isCanWrite == r.isCanWrite && l.commentTip == r.commentTip && l.filterKey == r.filterKey && l.title == r.title && l.action == r.action && l.hide == r.hide && l.uiType == r.uiType;
    }
    inline bool operator!=(const ONACommentWrite&l, const ONACommentWrite&r)
    {
        return !(l == r);
    }

    struct ONASearchPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASearchPoster";
        }
        static string MD5()
        {
            return "2a89e52ec7c6076cd8f7189fe9be8a68";
        }
        ONASearchPoster()
        :uiType(0),playBtn(""),clickReportKey(""),mdsumVideo("")
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            playBtn = "";
            clickReportKey = "";
            mdsumVideo = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(videoList, 1);
            _os.write(uiType, 2);
            _os.write(lineLabel, 3);
            _os.write(playBtn, 4);
            _os.write(action, 5);
            _os.write(clickReportKey, 6);
            _os.write(lineTag, 7);
            _os.write(playButtons, 8);
            _os.write(playActionButtons, 9);
            _os.write(moreActionTip, 10);
            _os.write(downloadButton, 11);
            _os.write(mdsumVideo, 12);
            _os.write(rightActionButton, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(videoList, 1, false);
            _is.read(uiType, 2, false);
            _is.read(lineLabel, 3, false);
            _is.read(playBtn, 4, false);
            _is.read(action, 5, false);
            _is.read(clickReportKey, 6, false);
            _is.read(lineTag, 7, false);
            _is.read(playButtons, 8, false);
            _is.read(playActionButtons, 9, false);
            _is.read(moreActionTip, 10, false);
            _is.read(downloadButton, 11, false);
            _is.read(mdsumVideo, 12, false);
            _is.read(rightActionButton, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(videoList,"videoList");
            _ds.display(uiType,"uiType");
            _ds.display(lineLabel,"lineLabel");
            _ds.display(playBtn,"playBtn");
            _ds.display(action,"action");
            _ds.display(clickReportKey,"clickReportKey");
            _ds.display(lineTag,"lineTag");
            _ds.display(playButtons,"playButtons");
            _ds.display(playActionButtons,"playActionButtons");
            _ds.display(moreActionTip,"moreActionTip");
            _ds.display(downloadButton,"downloadButton");
            _ds.display(mdsumVideo,"mdsumVideo");
            _ds.display(rightActionButton,"rightActionButton");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(videoList, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(lineLabel, true);
            _ds.displaySimple(playBtn, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(clickReportKey, true);
            _ds.displaySimple(lineTag, true);
            _ds.displaySimple(playButtons, true);
            _ds.displaySimple(playActionButtons, true);
            _ds.displaySimple(moreActionTip, true);
            _ds.displaySimple(downloadButton, true);
            _ds.displaySimple(mdsumVideo, true);
            _ds.displaySimple(rightActionButton, false);
            return _os;
        }
    public:
        jce::Poster poster;
        vector<jce::VideoItemData> videoList;
        taf::Int32 uiType;
        vector<std::string> lineLabel;
        std::string playBtn;
        jce::Action action;
        std::string clickReportKey;
        vector<jce::IconTagText> lineTag;
        vector<jce::ONAButtonInfo> playButtons;
        vector<jce::ActionBarInfo> playActionButtons;
        jce::ActionBarInfo moreActionTip;
        jce::ActionBarInfo downloadButton;
        std::string mdsumVideo;
        jce::ActionBarInfo rightActionButton;
    };
    inline bool operator==(const ONASearchPoster&l, const ONASearchPoster&r)
    {
        return l.poster == r.poster && l.videoList == r.videoList && l.uiType == r.uiType && l.lineLabel == r.lineLabel && l.playBtn == r.playBtn && l.action == r.action && l.clickReportKey == r.clickReportKey && l.lineTag == r.lineTag && l.playButtons == r.playButtons && l.playActionButtons == r.playActionButtons && l.moreActionTip == r.moreActionTip && l.downloadButton == r.downloadButton && l.mdsumVideo == r.mdsumVideo && l.rightActionButton == r.rightActionButton;
    }
    inline bool operator!=(const ONASearchPoster&l, const ONASearchPoster&r)
    {
        return !(l == r);
    }

    struct ONANoSearchHit : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONANoSearchHit";
        }
        static string MD5()
        {
            return "7130c06b6f2ac3819fe77f3149d4204c";
        }
        ONANoSearchHit()
        :title(""),details(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            details = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(details, 1);
            _os.write(action, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(details, 1, true);
            _is.read(action, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(details,"details");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(details, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string title;
        std::string details;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONANoSearchHit&l, const ONANoSearchHit&r)
    {
        return l.title == r.title && l.details == r.details && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONANoSearchHit&l, const ONANoSearchHit&r)
    {
        return !(l == r);
    }

    struct ONABulletinBoard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONABulletinBoard";
        }
        static string MD5()
        {
            return "aec9b198c15dc7ce961fe690fa84f6d0";
        }
        ONABulletinBoard()
        :isAutoPlayer(true),isLiveVideo(true),pid(""),streamId(""),startTime(0),endTime(0),dislikeMark(true),uiStyle(0)
        {
        }
        void resetDefautlt()
        {
            isAutoPlayer = true;
            isLiveVideo = true;
            pid = "";
            streamId = "";
            startTime = 0;
            endTime = 0;
            dislikeMark = true;
            uiStyle = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(tagTexts, 1);
            _os.write(comments, 2);
            _os.write(action, 3);
            _os.write(ritchComments, 4);
            _os.write(attentItem, 5);
            _os.write(videoData, 6);
            _os.write(isAutoPlayer, 7);
            _os.write(isLiveVideo, 8);
            _os.write(pid, 9);
            _os.write(streamId, 10);
            _os.write(startTime, 11);
            _os.write(endTime, 12);
            _os.write(dislikeMark, 13);
            _os.write(dislikeOptionGroup, 14);
            _os.write(uiStyle, 15);
            _os.write(liveExtra, 16);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(tagTexts, 1, false);
            _is.read(comments, 2, false);
            _is.read(action, 3, false);
            _is.read(ritchComments, 4, false);
            _is.read(attentItem, 5, false);
            _is.read(videoData, 6, false);
            _is.read(isAutoPlayer, 7, false);
            _is.read(isLiveVideo, 8, false);
            _is.read(pid, 9, false);
            _is.read(streamId, 10, false);
            _is.read(startTime, 11, false);
            _is.read(endTime, 12, false);
            _is.read(dislikeMark, 13, false);
            _is.read(dislikeOptionGroup, 14, false);
            _is.read(uiStyle, 15, false);
            _is.read(liveExtra, 16, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(tagTexts,"tagTexts");
            _ds.display(comments,"comments");
            _ds.display(action,"action");
            _ds.display(ritchComments,"ritchComments");
            _ds.display(attentItem,"attentItem");
            _ds.display(videoData,"videoData");
            _ds.display(isAutoPlayer,"isAutoPlayer");
            _ds.display(isLiveVideo,"isLiveVideo");
            _ds.display(pid,"pid");
            _ds.display(streamId,"streamId");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(dislikeMark,"dislikeMark");
            _ds.display(dislikeOptionGroup,"dislikeOptionGroup");
            _ds.display(uiStyle,"uiStyle");
            _ds.display(liveExtra,"liveExtra");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(tagTexts, true);
            _ds.displaySimple(comments, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(ritchComments, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(videoData, true);
            _ds.displaySimple(isAutoPlayer, true);
            _ds.displaySimple(isLiveVideo, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(streamId, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(dislikeMark, true);
            _ds.displaySimple(dislikeOptionGroup, true);
            _ds.displaySimple(uiStyle, true);
            _ds.displaySimple(liveExtra, false);
            return _os;
        }
    public:
        jce::Poster poster;
        vector<jce::IconTagText> tagTexts;
        vector<std::string> comments;
        jce::Action action;
        vector<jce::IconTagText> ritchComments;
        jce::VideoAttentItem attentItem;
        jce::VideoItemData videoData;
        taf::Bool isAutoPlayer;
        taf::Bool isLiveVideo;
        std::string pid;
        std::string streamId;
        taf::Int64 startTime;
        taf::Int64 endTime;
        taf::Bool dislikeMark;
        jce::OptionGroup dislikeOptionGroup;
        taf::Int32 uiStyle;
        jce::VideoItemExtra liveExtra;
    };
    inline bool operator==(const ONABulletinBoard&l, const ONABulletinBoard&r)
    {
        return l.poster == r.poster && l.tagTexts == r.tagTexts && l.comments == r.comments && l.action == r.action && l.ritchComments == r.ritchComments && l.attentItem == r.attentItem && l.videoData == r.videoData && l.isAutoPlayer == r.isAutoPlayer && l.isLiveVideo == r.isLiveVideo && l.pid == r.pid && l.streamId == r.streamId && l.startTime == r.startTime && l.endTime == r.endTime && l.dislikeMark == r.dislikeMark && l.dislikeOptionGroup == r.dislikeOptionGroup && l.uiStyle == r.uiStyle && l.liveExtra == r.liveExtra;
    }
    inline bool operator!=(const ONABulletinBoard&l, const ONABulletinBoard&r)
    {
        return !(l == r);
    }

    struct ONATomLiveBoard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONATomLiveBoard";
        }
        static string MD5()
        {
            return "24165614caaef5131204596466809e15";
        }
        ONATomLiveBoard()
        :uiStyle(0),isAutoPlayer(true)
        {
        }
        void resetDefautlt()
        {
            uiStyle = 0;
            isAutoPlayer = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(uiStyle, 1);
            _os.write(tagTexts, 2);
            _os.write(action, 3);
            _os.write(ritchComments, 4);
            _os.write(attentItem, 5);
            _os.write(videoData, 6);
            _os.write(isAutoPlayer, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(uiStyle, 1, false);
            _is.read(tagTexts, 2, false);
            _is.read(action, 3, false);
            _is.read(ritchComments, 4, false);
            _is.read(attentItem, 5, false);
            _is.read(videoData, 6, false);
            _is.read(isAutoPlayer, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(uiStyle,"uiStyle");
            _ds.display(tagTexts,"tagTexts");
            _ds.display(action,"action");
            _ds.display(ritchComments,"ritchComments");
            _ds.display(attentItem,"attentItem");
            _ds.display(videoData,"videoData");
            _ds.display(isAutoPlayer,"isAutoPlayer");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(uiStyle, true);
            _ds.displaySimple(tagTexts, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(ritchComments, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(videoData, true);
            _ds.displaySimple(isAutoPlayer, false);
            return _os;
        }
    public:
        jce::Poster poster;
        taf::Int32 uiStyle;
        vector<jce::IconTagText> tagTexts;
        jce::Action action;
        vector<jce::IconTagText> ritchComments;
        jce::VideoAttentItem attentItem;
        jce::LiveVideoItemData videoData;
        taf::Bool isAutoPlayer;
    };
    inline bool operator==(const ONATomLiveBoard&l, const ONATomLiveBoard&r)
    {
        return l.poster == r.poster && l.uiStyle == r.uiStyle && l.tagTexts == r.tagTexts && l.action == r.action && l.ritchComments == r.ritchComments && l.attentItem == r.attentItem && l.videoData == r.videoData && l.isAutoPlayer == r.isAutoPlayer;
    }
    inline bool operator!=(const ONATomLiveBoard&l, const ONATomLiveBoard&r)
    {
        return !(l == r);
    }

    struct ONAAppInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAAppInfo";
        }
        static string MD5()
        {
            return "d54bd5e6aba47adb8d3a09f3e3f0f472";
        }
        ONAAppInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(appInfo, 0);
            _os.write(poster, 1);
            _os.write(action, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(appInfo, 0, true);
            _is.read(poster, 1, true);
            _is.read(action, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(appInfo,"appInfo");
            _ds.display(poster,"poster");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(appInfo, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        jce::AppInfo appInfo;
        jce::Poster poster;
        jce::Action action;
    };
    inline bool operator==(const ONAAppInfo&l, const ONAAppInfo&r)
    {
        return l.appInfo == r.appInfo && l.poster == r.poster && l.action == r.action;
    }
    inline bool operator!=(const ONAAppInfo&l, const ONAAppInfo&r)
    {
        return !(l == r);
    }

    struct ONAStarIntroduction : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAStarIntroduction";
        }
        static string MD5()
        {
            return "162dca10b8754d185fa1ced3970b4959";
        }
        ONAStarIntroduction()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starInfo, 0);
            _os.write(kvItemList, 1);
            _os.write(action, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
            _os.write(starList, 5);
            _os.write(introductionVideo, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starInfo, 0, true);
            _is.read(kvItemList, 1, false);
            _is.read(action, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
            _is.read(starList, 5, false);
            _is.read(introductionVideo, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starInfo,"starInfo");
            _ds.display(kvItemList,"kvItemList");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(starList,"starList");
            _ds.display(introductionVideo,"introductionVideo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starInfo, true);
            _ds.displaySimple(kvItemList, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(starList, true);
            _ds.displaySimple(introductionVideo, false);
            return _os;
        }
    public:
        jce::ActorInfo starInfo;
        vector<jce::KVItem> kvItemList;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
        jce::ONAStarList starList;
        jce::ONABulletinBoardV2 introductionVideo;
    };
    inline bool operator==(const ONAStarIntroduction&l, const ONAStarIntroduction&r)
    {
        return l.starInfo == r.starInfo && l.kvItemList == r.kvItemList && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.starList == r.starList && l.introductionVideo == r.introductionVideo;
    }
    inline bool operator!=(const ONAStarIntroduction&l, const ONAStarIntroduction&r)
    {
        return !(l == r);
    }

    struct ONAStarNews : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAStarNews";
        }
        static string MD5()
        {
            return "332e021c99f4ecb7f8a280823a7bbb2a";
        }
        ONAStarNews()
        :content(""),detailInfo(""),shareNum(0),commentNum(0)
        {
        }
        void resetDefautlt()
        {
            content = "";
            detailInfo = "";
            shareNum = 0;
            commentNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(content, 0);
            _os.write(imgList, 1);
            _os.write(detailInfo, 2);
            _os.write(shareNum, 3);
            _os.write(commentNum, 4);
            _os.write(action, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(content, 0, true);
            _is.read(imgList, 1, false);
            _is.read(detailInfo, 2, false);
            _is.read(shareNum, 3, false);
            _is.read(commentNum, 4, false);
            _is.read(action, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(content,"content");
            _ds.display(imgList,"imgList");
            _ds.display(detailInfo,"detailInfo");
            _ds.display(shareNum,"shareNum");
            _ds.display(commentNum,"commentNum");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(content, true);
            _ds.displaySimple(imgList, true);
            _ds.displaySimple(detailInfo, true);
            _ds.displaySimple(shareNum, true);
            _ds.displaySimple(commentNum, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string content;
        vector<jce::VideoImage> imgList;
        std::string detailInfo;
        taf::Int32 shareNum;
        taf::Int32 commentNum;
        jce::Action action;
    };
    inline bool operator==(const ONAStarNews&l, const ONAStarNews&r)
    {
        return l.content == r.content && l.imgList == r.imgList && l.detailInfo == r.detailInfo && l.shareNum == r.shareNum && l.commentNum == r.commentNum && l.action == r.action;
    }
    inline bool operator!=(const ONAStarNews&l, const ONAStarNews&r)
    {
        return !(l == r);
    }

    struct ONAQuoteComment : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAQuoteComment";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        ONAQuoteComment()
        :content(""),rightCornerText("")
        {
        }
        void resetDefautlt()
        {
            content = "";
            rightCornerText = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(content, 0);
            _os.write(rightCornerText, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(content, 0, true);
            _is.read(rightCornerText, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(content,"content");
            _ds.display(rightCornerText,"rightCornerText");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(content, true);
            _ds.displaySimple(rightCornerText, false);
            return _os;
        }
    public:
        std::string content;
        std::string rightCornerText;
    };
    inline bool operator==(const ONAQuoteComment&l, const ONAQuoteComment&r)
    {
        return l.content == r.content && l.rightCornerText == r.rightCornerText;
    }
    inline bool operator!=(const ONAQuoteComment&l, const ONAQuoteComment&r)
    {
        return !(l == r);
    }

    struct ONASummary : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASummary";
        }
        static string MD5()
        {
            return "19c7dde43f18563633ce917c8890d902";
        }
        ONASummary()
        :content(""),defaultLines(0),rightCornerText(""),uiType(0)
        {
        }
        void resetDefautlt()
        {
            content = "";
            defaultLines = 0;
            rightCornerText = "";
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(content, 0);
            _os.write(defaultLines, 1);
            _os.write(rightCornerText, 2);
            _os.write(uiType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(content, 0, true);
            _is.read(defaultLines, 1, false);
            _is.read(rightCornerText, 2, false);
            _is.read(uiType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(content,"content");
            _ds.display(defaultLines,"defaultLines");
            _ds.display(rightCornerText,"rightCornerText");
            _ds.display(uiType,"uiType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(content, true);
            _ds.displaySimple(defaultLines, true);
            _ds.displaySimple(rightCornerText, true);
            _ds.displaySimple(uiType, false);
            return _os;
        }
    public:
        std::string content;
        taf::Int32 defaultLines;
        std::string rightCornerText;
        taf::Char uiType;
    };
    inline bool operator==(const ONASummary&l, const ONASummary&r)
    {
        return l.content == r.content && l.defaultLines == r.defaultLines && l.rightCornerText == r.rightCornerText && l.uiType == r.uiType;
    }
    inline bool operator!=(const ONASummary&l, const ONASummary&r)
    {
        return !(l == r);
    }

    struct ONAActorList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAActorList";
        }
        static string MD5()
        {
            return "7f749eeb58c1bcab2f7c3a996d4edd75";
        }
        ONAActorList()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actorLists, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actorLists, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actorLists,"actorLists");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actorLists, false);
            return _os;
        }
    public:
        vector<jce::ActorList> actorLists;
    };
    inline bool operator==(const ONAActorList&l, const ONAActorList&r)
    {
        return l.actorLists == r.actorLists;
    }
    inline bool operator!=(const ONAActorList&l, const ONAActorList&r)
    {
        return !(l == r);
    }

    struct ONAPictureWall : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAPictureWall";
        }
        static string MD5()
        {
            return "16a3ae18b7184227044354640f8173ce";
        }
        ONAPictureWall()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(images, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(images, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(images,"images");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(images, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::VideoImage> images;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAPictureWall&l, const ONAPictureWall&r)
    {
        return l.images == r.images && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAPictureWall&l, const ONAPictureWall&r)
    {
        return !(l == r);
    }

    struct ONAPursuit : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAPursuit";
        }
        static string MD5()
        {
            return "c7a5530df6504ea07ca64d0673b74e70";
        }
        ONAPursuit()
        :focusIndex(0)
        {
        }
        void resetDefautlt()
        {
            focusIndex = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(list, 0);
            _os.write(focusIndex, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(list, 0, true);
            _is.read(focusIndex, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(list,"list");
            _ds.display(focusIndex,"focusIndex");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(list, true);
            _ds.displaySimple(focusIndex, false);
            return _os;
        }
    public:
        vector<jce::PursuitItem> list;
        taf::Int32 focusIndex;
    };
    inline bool operator==(const ONAPursuit&l, const ONAPursuit&r)
    {
        return l.list == r.list && l.focusIndex == r.focusIndex;
    }
    inline bool operator!=(const ONAPursuit&l, const ONAPursuit&r)
    {
        return !(l == r);
    }

    struct ONAProgramItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAProgramItem";
        }
        static string MD5()
        {
            return "0e3c158f897c59b816723e228a16d70c";
        }
        ONAProgramItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(action, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(action, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        jce::Poster poster;
        jce::Action action;
    };
    inline bool operator==(const ONAProgramItem&l, const ONAProgramItem&r)
    {
        return l.poster == r.poster && l.action == r.action;
    }
    inline bool operator!=(const ONAProgramItem&l, const ONAProgramItem&r)
    {
        return !(l == r);
    }

    struct ONAEnterTip : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAEnterTip";
        }
        static string MD5()
        {
            return "548a879048e11f23150419b7d8d08fb9";
        }
        ONAEnterTip()
        :tipType(0),serverTime(0),reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            tipType = 0;
            serverTime = 0;
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tipType, 0);
            _os.write(action, 1);
            _os.write(urls, 2);
            _os.write(lines, 3);
            _os.write(labels, 4);
            _os.write(apkInfo, 5);
            _os.write(serverTime, 9);
            _os.write(reportParams, 10);
            _os.write(reportKey, 11);
            _os.write(extraReportKVs, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tipType, 0, true);
            _is.read(action, 1, false);
            _is.read(urls, 2, false);
            _is.read(lines, 3, false);
            _is.read(labels, 4, false);
            _is.read(apkInfo, 5, false);
            _is.read(serverTime, 9, false);
            _is.read(reportParams, 10, false);
            _is.read(reportKey, 11, false);
            _is.read(extraReportKVs, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tipType,"tipType");
            _ds.display(action,"action");
            _ds.display(urls,"urls");
            _ds.display(lines,"lines");
            _ds.display(labels,"labels");
            _ds.display(apkInfo,"apkInfo");
            _ds.display(serverTime,"serverTime");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(extraReportKVs,"extraReportKVs");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tipType, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(urls, true);
            _ds.displaySimple(lines, true);
            _ds.displaySimple(labels, true);
            _ds.displaySimple(apkInfo, true);
            _ds.displaySimple(serverTime, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(extraReportKVs, false);
            return _os;
        }
    public:
        taf::Int32 tipType;
        jce::Action action;
        vector<std::string> urls;
        vector<std::string> lines;
        map<std::string, jce::IconTagText> labels;
        jce::AppInfo apkInfo;
        taf::Int64 serverTime;
        std::string reportParams;
        std::string reportKey;
        vector<jce::ExtraReportKV> extraReportKVs;
    };
    inline bool operator==(const ONAEnterTip&l, const ONAEnterTip&r)
    {
        return l.tipType == r.tipType && l.action == r.action && l.urls == r.urls && l.lines == r.lines && l.labels == r.labels && l.apkInfo == r.apkInfo && l.serverTime == r.serverTime && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.extraReportKVs == r.extraReportKVs;
    }
    inline bool operator!=(const ONAEnterTip&l, const ONAEnterTip&r)
    {
        return !(l == r);
    }

    struct ONAVerticalPosterList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAVerticalPosterList";
        }
        static string MD5()
        {
            return "288f6590e8402c241d41f942208644d6";
        }
        ONAVerticalPosterList()
        :uiType(0),reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(posterList, 1);
            _os.write(posterMore, 2);
            _os.write(title, 3);
            _os.write(spliteLine, 4);
            _os.write(moreAction, 5);
            _os.write(reportParams, 6);
            _os.write(reportKey, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, true);
            _is.read(posterList, 1, true);
            _is.read(posterMore, 2, false);
            _is.read(title, 3, false);
            _is.read(spliteLine, 4, false);
            _is.read(moreAction, 5, false);
            _is.read(reportParams, 6, false);
            _is.read(reportKey, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(posterList,"posterList");
            _ds.display(posterMore,"posterMore");
            _ds.display(title,"title");
            _ds.display(spliteLine,"spliteLine");
            _ds.display(moreAction,"moreAction");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(posterList, true);
            _ds.displaySimple(posterMore, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(spliteLine, true);
            _ds.displaySimple(moreAction, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        jce::PosterList posterList;
        vector<jce::PosterList> posterMore;
        jce::ONAPosterTitle title;
        jce::ONASplitLine spliteLine;
        jce::ONALoadMoreAction moreAction;
        std::string reportParams;
        std::string reportKey;
    };
    inline bool operator==(const ONAVerticalPosterList&l, const ONAVerticalPosterList&r)
    {
        return l.uiType == r.uiType && l.posterList == r.posterList && l.posterMore == r.posterMore && l.title == r.title && l.spliteLine == r.spliteLine && l.moreAction == r.moreAction && l.reportParams == r.reportParams && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const ONAVerticalPosterList&l, const ONAVerticalPosterList&r)
    {
        return !(l == r);
    }

    struct ONAPosterList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAPosterList";
        }
        static string MD5()
        {
            return "fc0052974625b9fa30b4e9e0a9998e6c";
        }
        ONAPosterList()
        :uiType(0),reportParams(""),listTitle(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            reportParams = "";
            listTitle = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(posterList, 1);
            _os.write(lines, 2);
            _os.write(reportParams, 3);
            _os.write(listTitle, 4);
            _os.write(reportKey, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, true);
            _is.read(posterList, 1, true);
            _is.read(lines, 2, false);
            _is.read(reportParams, 3, false);
            _is.read(listTitle, 4, false);
            _is.read(reportKey, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(posterList,"posterList");
            _ds.display(lines,"lines");
            _ds.display(reportParams,"reportParams");
            _ds.display(listTitle,"listTitle");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(posterList, true);
            _ds.displaySimple(lines, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(listTitle, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        vector<jce::Poster> posterList;
        vector<std::string> lines;
        std::string reportParams;
        std::string listTitle;
        std::string reportKey;
    };
    inline bool operator==(const ONAPosterList&l, const ONAPosterList&r)
    {
        return l.uiType == r.uiType && l.posterList == r.posterList && l.lines == r.lines && l.reportParams == r.reportParams && l.listTitle == r.listTitle && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const ONAPosterList&l, const ONAPosterList&r)
    {
        return !(l == r);
    }

    struct ONAAttentPosterList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAAttentPosterList";
        }
        static string MD5()
        {
            return "91f76a90124a1c4e74d512a2175bb384";
        }
        ONAAttentPosterList()
        :uiType(0),reportParams(""),reportKey(""),leftPadding(0),maxLine(1)
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            reportParams = "";
            reportKey = "";
            leftPadding = 0;
            maxLine = 1;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(attentPosterList, 1);
            _os.write(lines, 2);
            _os.write(reportParams, 3);
            _os.write(reportKey, 4);
            _os.write(leftPadding, 5);
            _os.write(maxLine, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, true);
            _is.read(attentPosterList, 1, true);
            _is.read(lines, 2, false);
            _is.read(reportParams, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(leftPadding, 5, false);
            _is.read(maxLine, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(attentPosterList,"attentPosterList");
            _ds.display(lines,"lines");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(leftPadding,"leftPadding");
            _ds.display(maxLine,"maxLine");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(attentPosterList, true);
            _ds.displaySimple(lines, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(leftPadding, true);
            _ds.displaySimple(maxLine, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        vector<jce::AttentPoster> attentPosterList;
        vector<std::string> lines;
        std::string reportParams;
        std::string reportKey;
        taf::Int32 leftPadding;
        taf::Int32 maxLine;
    };
    inline bool operator==(const ONAAttentPosterList&l, const ONAAttentPosterList&r)
    {
        return l.uiType == r.uiType && l.attentPosterList == r.attentPosterList && l.lines == r.lines && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.leftPadding == r.leftPadding && l.maxLine == r.maxLine;
    }
    inline bool operator!=(const ONAAttentPosterList&l, const ONAAttentPosterList&r)
    {
        return !(l == r);
    }

    struct ONAIntroduction : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAIntroduction";
        }
        static string MD5()
        {
            return "236e8e638812d0545938ec6a7efb0e67";
        }
        ONAIntroduction()
        :introduction(""),maxLimitLines(0),maxShowLines(0),textColor(""),showStyle(0)
        {
        }
        void resetDefautlt()
        {
            introduction = "";
            maxLimitLines = 0;
            maxShowLines = 0;
            textColor = "";
            showStyle = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(introduction, 0);
            _os.write(maxLimitLines, 1);
            _os.write(maxShowLines, 2);
            _os.write(textColor, 3);
            _os.write(showStyle, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(introduction, 0, true);
            _is.read(maxLimitLines, 1, false);
            _is.read(maxShowLines, 2, false);
            _is.read(textColor, 3, false);
            _is.read(showStyle, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(introduction,"introduction");
            _ds.display(maxLimitLines,"maxLimitLines");
            _ds.display(maxShowLines,"maxShowLines");
            _ds.display(textColor,"textColor");
            _ds.display(showStyle,"showStyle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(introduction, true);
            _ds.displaySimple(maxLimitLines, true);
            _ds.displaySimple(maxShowLines, true);
            _ds.displaySimple(textColor, true);
            _ds.displaySimple(showStyle, false);
            return _os;
        }
    public:
        std::string introduction;
        taf::Int32 maxLimitLines;
        taf::Int32 maxShowLines;
        std::string textColor;
        taf::Int32 showStyle;
    };
    inline bool operator==(const ONAIntroduction&l, const ONAIntroduction&r)
    {
        return l.introduction == r.introduction && l.maxLimitLines == r.maxLimitLines && l.maxShowLines == r.maxShowLines && l.textColor == r.textColor && l.showStyle == r.showStyle;
    }
    inline bool operator!=(const ONAIntroduction&l, const ONAIntroduction&r)
    {
        return !(l == r);
    }

    struct ONADynamicPanel : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADynamicPanel";
        }
        static string MD5()
        {
            return "8d61b639cda77ea57102c6b9cbb5aca2";
        }
        ONADynamicPanel()
        :type(""),dataKey(""),uiType(0)
        {
        }
        void resetDefautlt()
        {
            type = "";
            dataKey = "";
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(dataKey, 1);
            _os.write(uiType, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(dataKey, 1, true);
            _is.read(uiType, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            _ds.display(uiType,"uiType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(uiType, false);
            return _os;
        }
    public:
        std::string type;
        std::string dataKey;
        taf::Int32 uiType;
    };
    inline bool operator==(const ONADynamicPanel&l, const ONADynamicPanel&r)
    {
        return l.type == r.type && l.dataKey == r.dataKey && l.uiType == r.uiType;
    }
    inline bool operator!=(const ONADynamicPanel&l, const ONADynamicPanel&r)
    {
        return !(l == r);
    }

    struct ONAFanNews : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAFanNews";
        }
        static string MD5()
        {
            return "635991fd71d81b4f046a97633825f2cb";
        }
        ONAFanNews()
        :faceUrl(""),detailInfo(""),shareNum(0),commentNum(0),type(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            faceUrl = "";
            detailInfo = "";
            shareNum = 0;
            commentNum = 0;
            type = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(content, 0);
            _os.write(imgList, 1);
            _os.write(faceUrl, 2);
            _os.write(detailInfo, 3);
            _os.write(shareNum, 4);
            _os.write(commentNum, 5);
            _os.write(type, 6);
            _os.write(action, 7);
            _os.write(reportKey, 8);
            _os.write(reportParams, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(content, 0, true);
            _is.read(imgList, 1, false);
            _is.read(faceUrl, 2, false);
            _is.read(detailInfo, 3, false);
            _is.read(shareNum, 4, false);
            _is.read(commentNum, 5, false);
            _is.read(type, 6, false);
            _is.read(action, 7, false);
            _is.read(reportKey, 8, false);
            _is.read(reportParams, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(content,"content");
            _ds.display(imgList,"imgList");
            _ds.display(faceUrl,"faceUrl");
            _ds.display(detailInfo,"detailInfo");
            _ds.display(shareNum,"shareNum");
            _ds.display(commentNum,"commentNum");
            _ds.display(type,"type");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(content, true);
            _ds.displaySimple(imgList, true);
            _ds.displaySimple(faceUrl, true);
            _ds.displaySimple(detailInfo, true);
            _ds.displaySimple(shareNum, true);
            _ds.displaySimple(commentNum, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<std::string> content;
        vector<jce::VideoImage> imgList;
        std::string faceUrl;
        std::string detailInfo;
        taf::Int32 shareNum;
        taf::Int32 commentNum;
        taf::Int32 type;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAFanNews&l, const ONAFanNews&r)
    {
        return l.content == r.content && l.imgList == r.imgList && l.faceUrl == r.faceUrl && l.detailInfo == r.detailInfo && l.shareNum == r.shareNum && l.commentNum == r.commentNum && l.type == r.type && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAFanNews&l, const ONAFanNews&r)
    {
        return !(l == r);
    }

    struct ONAFanNewsWithImgList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAFanNewsWithImgList";
        }
        static string MD5()
        {
            return "8f63fa2e464ef4758e276ef65eeb6f03";
        }
        ONAFanNewsWithImgList()
        :faceUrl(""),detailInfo(""),commentNum(0),type(0)
        {
        }
        void resetDefautlt()
        {
            faceUrl = "";
            detailInfo = "";
            commentNum = 0;
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(content, 0);
            _os.write(imgList, 1);
            _os.write(faceUrl, 2);
            _os.write(detailInfo, 3);
            _os.write(commentNum, 4);
            _os.write(type, 5);
            _os.write(action, 6);
            _os.write(leftIconUrl, 7);
            _os.write(rightIconUrl, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(content, 0, true);
            _is.read(imgList, 1, false);
            _is.read(faceUrl, 2, false);
            _is.read(detailInfo, 3, false);
            _is.read(commentNum, 4, false);
            _is.read(type, 5, false);
            _is.read(action, 6, false);
            _is.read(leftIconUrl, 7, false);
            _is.read(rightIconUrl, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(content,"content");
            _ds.display(imgList,"imgList");
            _ds.display(faceUrl,"faceUrl");
            _ds.display(detailInfo,"detailInfo");
            _ds.display(commentNum,"commentNum");
            _ds.display(type,"type");
            _ds.display(action,"action");
            _ds.display(leftIconUrl,"leftIconUrl");
            _ds.display(rightIconUrl,"rightIconUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(content, true);
            _ds.displaySimple(imgList, true);
            _ds.displaySimple(faceUrl, true);
            _ds.displaySimple(detailInfo, true);
            _ds.displaySimple(commentNum, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(leftIconUrl, true);
            _ds.displaySimple(rightIconUrl, false);
            return _os;
        }
    public:
        vector<std::string> content;
        vector<jce::VideoImage> imgList;
        std::string faceUrl;
        std::string detailInfo;
        taf::Int32 commentNum;
        taf::Int32 type;
        jce::Action action;
        vector<std::string> leftIconUrl;
        vector<std::string> rightIconUrl;
    };
    inline bool operator==(const ONAFanNewsWithImgList&l, const ONAFanNewsWithImgList&r)
    {
        return l.content == r.content && l.imgList == r.imgList && l.faceUrl == r.faceUrl && l.detailInfo == r.detailInfo && l.commentNum == r.commentNum && l.type == r.type && l.action == r.action && l.leftIconUrl == r.leftIconUrl && l.rightIconUrl == r.rightIconUrl;
    }
    inline bool operator!=(const ONAFanNewsWithImgList&l, const ONAFanNewsWithImgList&r)
    {
        return !(l == r);
    }

    struct ONABusinessVoteList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONABusinessVoteList";
        }
        static string MD5()
        {
            return "731866dea268cae2a0df4faa4da812cb";
        }
        ONABusinessVoteList()
        :voteLimit(0),votedCount(0),bottleCount(0),title(""),subhead(""),reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            voteLimit = 0;
            votedCount = 0;
            bottleCount = 0;
            title = "";
            subhead = "";
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(voteList, 0);
            _os.write(voteLimit, 1);
            _os.write(votedCount, 2);
            _os.write(bottleCount, 3);
            _os.write(title, 4);
            _os.write(subhead, 5);
            _os.write(action, 6);
            _os.write(markLabelList, 7);
            _os.write(dialogs, 8);
            _os.write(appInfo, 9);
            _os.write(sharePageAction, 10);
            _os.write(mShareItem, 11);
            _os.write(reportParams, 12);
            _os.write(reportKey, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(voteList, 0, true);
            _is.read(voteLimit, 1, true);
            _is.read(votedCount, 2, true);
            _is.read(bottleCount, 3, true);
            _is.read(title, 4, false);
            _is.read(subhead, 5, false);
            _is.read(action, 6, false);
            _is.read(markLabelList, 7, false);
            _is.read(dialogs, 8, false);
            _is.read(appInfo, 9, false);
            _is.read(sharePageAction, 10, false);
            _is.read(mShareItem, 11, false);
            _is.read(reportParams, 12, false);
            _is.read(reportKey, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(voteList,"voteList");
            _ds.display(voteLimit,"voteLimit");
            _ds.display(votedCount,"votedCount");
            _ds.display(bottleCount,"bottleCount");
            _ds.display(title,"title");
            _ds.display(subhead,"subhead");
            _ds.display(action,"action");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(dialogs,"dialogs");
            _ds.display(appInfo,"appInfo");
            _ds.display(sharePageAction,"sharePageAction");
            _ds.display(mShareItem,"mShareItem");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(voteList, true);
            _ds.displaySimple(voteLimit, true);
            _ds.displaySimple(votedCount, true);
            _ds.displaySimple(bottleCount, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subhead, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(dialogs, true);
            _ds.displaySimple(appInfo, true);
            _ds.displaySimple(sharePageAction, true);
            _ds.displaySimple(mShareItem, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        vector<jce::ActorInfo> voteList;
        taf::Int32 voteLimit;
        taf::Int32 votedCount;
        taf::Int32 bottleCount;
        std::string title;
        std::string subhead;
        jce::Action action;
        vector<jce::MarkLabel> markLabelList;
        map<std::string, jce::CommonDialogInfo> dialogs;
        jce::AppInfo appInfo;
        jce::Action sharePageAction;
        jce::ShareItem mShareItem;
        std::string reportParams;
        std::string reportKey;
    };
    inline bool operator==(const ONABusinessVoteList&l, const ONABusinessVoteList&r)
    {
        return l.voteList == r.voteList && l.voteLimit == r.voteLimit && l.votedCount == r.votedCount && l.bottleCount == r.bottleCount && l.title == r.title && l.subhead == r.subhead && l.action == r.action && l.markLabelList == r.markLabelList && l.dialogs == r.dialogs && l.appInfo == r.appInfo && l.sharePageAction == r.sharePageAction && l.mShareItem == r.mShareItem && l.reportParams == r.reportParams && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const ONABusinessVoteList&l, const ONABusinessVoteList&r)
    {
        return !(l == r);
    }

    struct ONAFanInvolveEntry : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAFanInvolveEntry";
        }
        static string MD5()
        {
            return "14a0db0fcc733c23abb7f8cfb3f41c15";
        }
        ONAFanInvolveEntry()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fanItem, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fanItem, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fanItem,"fanItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fanItem, false);
            return _os;
        }
    public:
        jce::FanInvolveItem fanItem;
    };
    inline bool operator==(const ONAFanInvolveEntry&l, const ONAFanInvolveEntry&r)
    {
        return l.fanItem == r.fanItem;
    }
    inline bool operator!=(const ONAFanInvolveEntry&l, const ONAFanInvolveEntry&r)
    {
        return !(l == r);
    }

    struct ONAPromoteEntry : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAPromoteEntry";
        }
        static string MD5()
        {
            return "44cab9f2cb7ac0734c348c413d163706";
        }
        ONAPromoteEntry()
        :type(0),moreFlag(0),subHead(""),isCanPlaceHoler(false),titleColor("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            moreFlag = 0;
            subHead = "";
            isCanPlaceHoler = false;
            titleColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(poster, 1);
            _os.write(action, 2);
            _os.write(uiStyle, 3);
            _os.write(moreFlag, 4);
            _os.write(subHead, 5);
            _os.write(appInfo, 6);
            _os.write(isCanPlaceHoler, 7);
            _os.write(titleColor, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(poster, 1, true);
            _is.read(action, 2, false);
            _is.read(uiStyle, 3, false);
            _is.read(moreFlag, 4, false);
            _is.read(subHead, 5, false);
            _is.read(appInfo, 6, false);
            _is.read(isCanPlaceHoler, 7, false);
            _is.read(titleColor, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(poster,"poster");
            _ds.display(action,"action");
            _ds.display(uiStyle,"uiStyle");
            _ds.display(moreFlag,"moreFlag");
            _ds.display(subHead,"subHead");
            _ds.display(appInfo,"appInfo");
            _ds.display(isCanPlaceHoler,"isCanPlaceHoler");
            _ds.display(titleColor,"titleColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(uiStyle, true);
            _ds.displaySimple(moreFlag, true);
            _ds.displaySimple(subHead, true);
            _ds.displaySimple(appInfo, true);
            _ds.displaySimple(isCanPlaceHoler, true);
            _ds.displaySimple(titleColor, false);
            return _os;
        }
    public:
        taf::Int32 type;
        jce::Poster poster;
        jce::Action action;
        jce::UIStyle uiStyle;
        taf::Int32 moreFlag;
        std::string subHead;
        jce::GameDownloadItemData appInfo;
        taf::Bool isCanPlaceHoler;
        std::string titleColor;
    };
    inline bool operator==(const ONAPromoteEntry&l, const ONAPromoteEntry&r)
    {
        return l.type == r.type && l.poster == r.poster && l.action == r.action && l.uiStyle == r.uiStyle && l.moreFlag == r.moreFlag && l.subHead == r.subHead && l.appInfo == r.appInfo && l.isCanPlaceHoler == r.isCanPlaceHoler && l.titleColor == r.titleColor;
    }
    inline bool operator!=(const ONAPromoteEntry&l, const ONAPromoteEntry&r)
    {
        return !(l == r);
    }

    struct ONADiscoveryEntry : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADiscoveryEntry";
        }
        static string MD5()
        {
            return "b4ccd3b280dce750f0683b25ace1feac";
        }
        ONADiscoveryEntry()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(discoveryEntryLists, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(discoveryEntryLists, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(discoveryEntryLists,"discoveryEntryLists");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(discoveryEntryLists, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::DiscoveryEntryItem> discoveryEntryLists;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONADiscoveryEntry&l, const ONADiscoveryEntry&r)
    {
        return l.discoveryEntryLists == r.discoveryEntryLists && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONADiscoveryEntry&l, const ONADiscoveryEntry&r)
    {
        return !(l == r);
    }

    struct ONAVideoCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAVideoCard";
        }
        static string MD5()
        {
            return "a7d8a8e9a136ffe6c78c40218a707e55";
        }
        ONAVideoCard()
        :uiType(0),showStyle(0),time("")
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            showStyle = 0;
            time = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(intro, 1);
            _os.write(lineTag, 2);
            _os.write(attentItem, 3);
            _os.write(showStyle, 4);
            _os.write(time, 5);
            _os.write(appendPosters, 6);
            _os.write(commentator, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, true);
            _is.read(intro, 1, true);
            _is.read(lineTag, 2, false);
            _is.read(attentItem, 3, false);
            _is.read(showStyle, 4, false);
            _is.read(time, 5, false);
            _is.read(appendPosters, 6, false);
            _is.read(commentator, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(intro,"intro");
            _ds.display(lineTag,"lineTag");
            _ds.display(attentItem,"attentItem");
            _ds.display(showStyle,"showStyle");
            _ds.display(time,"time");
            _ds.display(appendPosters,"appendPosters");
            _ds.display(commentator,"commentator");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(intro, true);
            _ds.displaySimple(lineTag, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(showStyle, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(appendPosters, true);
            _ds.displaySimple(commentator, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        jce::VideoIntroduction intro;
        vector<jce::IconTagText> lineTag;
        jce::VideoAttentItem attentItem;
        taf::Int32 showStyle;
        std::string time;
        vector<jce::Poster> appendPosters;
        jce::ActorInfo commentator;
    };
    inline bool operator==(const ONAVideoCard&l, const ONAVideoCard&r)
    {
        return l.uiType == r.uiType && l.intro == r.intro && l.lineTag == r.lineTag && l.attentItem == r.attentItem && l.showStyle == r.showStyle && l.time == r.time && l.appendPosters == r.appendPosters && l.commentator == r.commentator;
    }
    inline bool operator!=(const ONAVideoCard&l, const ONAVideoCard&r)
    {
        return !(l == r);
    }

    struct ONAVideoCinema : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAVideoCinema";
        }
        static string MD5()
        {
            return "499a48a6121af39f7c691e3c2b0cff7c";
        }
        ONAVideoCinema()
        :type(0),pageSize(0),version(""),updateText(""),positionId(""),loginType(""),userId(""),showType(0),viewType(0),viewCount(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            pageSize = 0;
            version = "";
            updateText = "";
            positionId = "";
            loginType = "";
            userId = "";
            showType = 0;
            viewType = 0;
            viewCount = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemList, 1);
            _os.write(type, 2);
            _os.write(pageSize, 3);
            _os.write(version, 4);
            _os.write(updateText, 5);
            _os.write(userPosterTitle, 6);
            _os.write(spliteLine, 7);
            _os.write(positionId, 8);
            _os.write(loginType, 9);
            _os.write(userId, 10);
            _os.write(showType, 11);
            _os.write(viewType, 12);
            _os.write(viewCount, 13);
            _os.write(reportKey, 14);
            _os.write(reportParams, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(itemList, 1, true);
            _is.read(type, 2, false);
            _is.read(pageSize, 3, false);
            _is.read(version, 4, false);
            _is.read(updateText, 5, false);
            _is.read(userPosterTitle, 6, false);
            _is.read(spliteLine, 7, false);
            _is.read(positionId, 8, false);
            _is.read(loginType, 9, false);
            _is.read(userId, 10, false);
            _is.read(showType, 11, false);
            _is.read(viewType, 12, false);
            _is.read(viewCount, 13, false);
            _is.read(reportKey, 14, false);
            _is.read(reportParams, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemList,"itemList");
            _ds.display(type,"type");
            _ds.display(pageSize,"pageSize");
            _ds.display(version,"version");
            _ds.display(updateText,"updateText");
            _ds.display(userPosterTitle,"userPosterTitle");
            _ds.display(spliteLine,"spliteLine");
            _ds.display(positionId,"positionId");
            _ds.display(loginType,"loginType");
            _ds.display(userId,"userId");
            _ds.display(showType,"showType");
            _ds.display(viewType,"viewType");
            _ds.display(viewCount,"viewCount");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(pageSize, true);
            _ds.displaySimple(version, true);
            _ds.displaySimple(updateText, true);
            _ds.displaySimple(userPosterTitle, true);
            _ds.displaySimple(spliteLine, true);
            _ds.displaySimple(positionId, true);
            _ds.displaySimple(loginType, true);
            _ds.displaySimple(userId, true);
            _ds.displaySimple(showType, true);
            _ds.displaySimple(viewType, true);
            _ds.displaySimple(viewCount, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::PersonalizeVideoItem> itemList;
        taf::Int32 type;
        taf::Int32 pageSize;
        std::string version;
        std::string updateText;
        jce::ONAUserPosterTitle userPosterTitle;
        jce::ONASplitLine spliteLine;
        std::string positionId;
        std::string loginType;
        std::string userId;
        taf::Int32 showType;
        taf::Int32 viewType;
        taf::Int32 viewCount;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAVideoCinema&l, const ONAVideoCinema&r)
    {
        return l.itemList == r.itemList && l.type == r.type && l.pageSize == r.pageSize && l.version == r.version && l.updateText == r.updateText && l.userPosterTitle == r.userPosterTitle && l.spliteLine == r.spliteLine && l.positionId == r.positionId && l.loginType == r.loginType && l.userId == r.userId && l.showType == r.showType && l.viewType == r.viewType && l.viewCount == r.viewCount && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAVideoCinema&l, const ONAVideoCinema&r)
    {
        return !(l == r);
    }

    struct ONAVideoIntroduction : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAVideoIntroduction";
        }
        static string MD5()
        {
            return "e14367de4c7b64e257e369e10906cd33";
        }
        ONAVideoIntroduction()
        :moreTitle("")
        {
        }
        void resetDefautlt()
        {
            moreTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(intro, 0);
            _os.write(lineTag, 1);
            _os.write(morePoster, 2);
            _os.write(moreTitle, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(intro, 0, true);
            _is.read(lineTag, 1, false);
            _is.read(morePoster, 2, false);
            _is.read(moreTitle, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(intro,"intro");
            _ds.display(lineTag,"lineTag");
            _ds.display(morePoster,"morePoster");
            _ds.display(moreTitle,"moreTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(intro, true);
            _ds.displaySimple(lineTag, true);
            _ds.displaySimple(morePoster, true);
            _ds.displaySimple(moreTitle, false);
            return _os;
        }
    public:
        jce::VideoIntroduction intro;
        vector<jce::IconTagText> lineTag;
        vector<jce::Poster> morePoster;
        std::string moreTitle;
    };
    inline bool operator==(const ONAVideoIntroduction&l, const ONAVideoIntroduction&r)
    {
        return l.intro == r.intro && l.lineTag == r.lineTag && l.morePoster == r.morePoster && l.moreTitle == r.moreTitle;
    }
    inline bool operator!=(const ONAVideoIntroduction&l, const ONAVideoIntroduction&r)
    {
        return !(l == r);
    }

    struct ONAPlaceHolder : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAPlaceHolder";
        }
        static string MD5()
        {
            return "0c267f2bc23121ade4890fa3e15ed6a4";
        }
        ONAPlaceHolder()
        :uiType(0)
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(poster, 1);
            _os.write(btnLabel, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, false);
            _is.read(poster, 1, false);
            _is.read(btnLabel, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(poster,"poster");
            _ds.display(btnLabel,"btnLabel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(btnLabel, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        jce::Poster poster;
        jce::MarkLabel btnLabel;
    };
    inline bool operator==(const ONAPlaceHolder&l, const ONAPlaceHolder&r)
    {
        return l.uiType == r.uiType && l.poster == r.poster && l.btnLabel == r.btnLabel;
    }
    inline bool operator!=(const ONAPlaceHolder&l, const ONAPlaceHolder&r)
    {
        return !(l == r);
    }

    struct ONACoverIntroduction : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONACoverIntroduction";
        }
        static string MD5()
        {
            return "5bb5836bcf89c58da65b049e3d303e65";
        }
        ONACoverIntroduction()
        :uiType(0),dataKey(""),reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            dataKey = "";
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(dataKey, 1);
            _os.write(reportParams, 2);
            _os.write(reportKey, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, true);
            _is.read(dataKey, 1, true);
            _is.read(reportParams, 2, false);
            _is.read(reportKey, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(dataKey,"dataKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        std::string dataKey;
        std::string reportParams;
        std::string reportKey;
    };
    inline bool operator==(const ONACoverIntroduction&l, const ONACoverIntroduction&r)
    {
        return l.uiType == r.uiType && l.dataKey == r.dataKey && l.reportParams == r.reportParams && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const ONACoverIntroduction&l, const ONACoverIntroduction&r)
    {
        return !(l == r);
    }

    struct ONAAppList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAAppList";
        }
        static string MD5()
        {
            return "2e9c6b6c032149342236440c393e308c";
        }
        ONAAppList()
        :uiType(0),reportParams(""),reportKey(""),needPadding(0)
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            reportParams = "";
            reportKey = "";
            needPadding = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(appList, 1);
            _os.write(lines, 2);
            _os.write(reportParams, 3);
            _os.write(reportKey, 4);
            _os.write(needPadding, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, true);
            _is.read(appList, 1, true);
            _is.read(lines, 2, false);
            _is.read(reportParams, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(needPadding, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(appList,"appList");
            _ds.display(lines,"lines");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(needPadding,"needPadding");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(appList, true);
            _ds.displaySimple(lines, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(needPadding, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        vector<jce::GameDownloadItemData> appList;
        vector<std::string> lines;
        std::string reportParams;
        std::string reportKey;
        taf::Int32 needPadding;
    };
    inline bool operator==(const ONAAppList&l, const ONAAppList&r)
    {
        return l.uiType == r.uiType && l.appList == r.appList && l.lines == r.lines && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.needPadding == r.needPadding;
    }
    inline bool operator!=(const ONAAppList&l, const ONAAppList&r)
    {
        return !(l == r);
    }

    struct ONAMultAppPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAMultAppPoster";
        }
        static string MD5()
        {
            return "c54aba4d2e207174939a374221dd7420";
        }
        ONAMultAppPoster()
        :showNum(0)
        {
        }
        void resetDefautlt()
        {
            showNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(appList, 0);
            _os.write(showNum, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(appList, 0, true);
            _is.read(showNum, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(appList,"appList");
            _ds.display(showNum,"showNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(appList, true);
            _ds.displaySimple(showNum, false);
            return _os;
        }
    public:
        vector<jce::GameDownloadItemData> appList;
        taf::Int32 showNum;
    };
    inline bool operator==(const ONAMultAppPoster&l, const ONAMultAppPoster&r)
    {
        return l.appList == r.appList && l.showNum == r.showNum;
    }
    inline bool operator!=(const ONAMultAppPoster&l, const ONAMultAppPoster&r)
    {
        return !(l == r);
    }

    struct ONAVideoListPlayer : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAVideoListPlayer";
        }
        static string MD5()
        {
            return "3488a34fd59c136dc343f7ab65140822";
        }
        ONAVideoListPlayer()
        :isAutoPlay(true),adType(-1),uiType(0),adSerialNumber("")
        {
        }
        void resetDefautlt()
        {
            isAutoPlay = true;
            adType = -1;
            uiType = 0;
            adSerialNumber = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(items, 0);
            _os.write(isAutoPlay, 1);
            _os.write(adType, 2);
            _os.write(uiType, 3);
            _os.write(focusInfo, 4);
            _os.write(adSerialNumber, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(items, 0, true);
            _is.read(isAutoPlay, 1, false);
            _is.read(adType, 2, false);
            _is.read(uiType, 3, false);
            _is.read(focusInfo, 4, false);
            _is.read(adSerialNumber, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(items,"items");
            _ds.display(isAutoPlay,"isAutoPlay");
            _ds.display(adType,"adType");
            _ds.display(uiType,"uiType");
            _ds.display(focusInfo,"focusInfo");
            _ds.display(adSerialNumber,"adSerialNumber");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(items, true);
            _ds.displaySimple(isAutoPlay, true);
            _ds.displaySimple(adType, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(focusInfo, true);
            _ds.displaySimple(adSerialNumber, false);
            return _os;
        }
    public:
        vector<jce::VideoInfoPosterItem> items;
        taf::Bool isAutoPlay;
        taf::Char adType;
        taf::Char uiType;
        jce::AdFocusInfo focusInfo;
        std::string adSerialNumber;
    };
    inline bool operator==(const ONAVideoListPlayer&l, const ONAVideoListPlayer&r)
    {
        return l.items == r.items && l.isAutoPlay == r.isAutoPlay && l.adType == r.adType && l.uiType == r.uiType && l.focusInfo == r.focusInfo && l.adSerialNumber == r.adSerialNumber;
    }
    inline bool operator!=(const ONAVideoListPlayer&l, const ONAVideoListPlayer&r)
    {
        return !(l == r);
    }

    struct ONAVipActionTips : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAVipActionTips";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        ONAVipActionTips()
        :data("")
        {
        }
        void resetDefautlt()
        {
            data = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(data, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(data, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(data,"data");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(data, false);
            return _os;
        }
    public:
        std::string data;
    };
    inline bool operator==(const ONAVipActionTips&l, const ONAVipActionTips&r)
    {
        return l.data == r.data;
    }
    inline bool operator!=(const ONAVipActionTips&l, const ONAVipActionTips&r)
    {
        return !(l == r);
    }

    struct ONALivePreviewBoard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONALivePreviewBoard";
        }
        static string MD5()
        {
            return "a7590464e361ad201bdd1d6bbc4f0962";
        }
        ONALivePreviewBoard()
        :pid(""),isAutoPlayer(true),isLiveVideo(true),startTime(0),endTime(0),likeNums(0),livePollKey(""),starImageUrl(""),title(""),actorsName(""),uiType(0),isLikeShow(true),popularity(0),isPopularityShow(true)
        {
        }
        void resetDefautlt()
        {
            pid = "";
            isAutoPlayer = true;
            isLiveVideo = true;
            startTime = 0;
            endTime = 0;
            likeNums = 0;
            livePollKey = "";
            starImageUrl = "";
            title = "";
            actorsName = "";
            uiType = 0;
            isLikeShow = true;
            popularity = 0;
            isPopularityShow = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pid, 0);
            _os.write(poster, 1);
            _os.write(vodVideoData, 2);
            _os.write(liveVideoData, 3);
            _os.write(action, 4);
            _os.write(isAutoPlayer, 5);
            _os.write(isLiveVideo, 6);
            _os.write(startTime, 7);
            _os.write(endTime, 8);
            _os.write(actors, 9);
            _os.write(likeNums, 10);
            _os.write(livePollKey, 11);
            _os.write(starImageUrl, 12);
            _os.write(title, 13);
            _os.write(actorsName, 14);
            _os.write(uiType, 15);
            _os.write(markLabel, 16);
            _os.write(isLikeShow, 17);
            _os.write(popularity, 18);
            _os.write(isPopularityShow, 19);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pid, 0, true);
            _is.read(poster, 1, true);
            _is.read(vodVideoData, 2, false);
            _is.read(liveVideoData, 3, false);
            _is.read(action, 4, false);
            _is.read(isAutoPlayer, 5, false);
            _is.read(isLiveVideo, 6, false);
            _is.read(startTime, 7, false);
            _is.read(endTime, 8, false);
            _is.read(actors, 9, false);
            _is.read(likeNums, 10, false);
            _is.read(livePollKey, 11, false);
            _is.read(starImageUrl, 12, false);
            _is.read(title, 13, false);
            _is.read(actorsName, 14, false);
            _is.read(uiType, 15, false);
            _is.read(markLabel, 16, false);
            _is.read(isLikeShow, 17, false);
            _is.read(popularity, 18, false);
            _is.read(isPopularityShow, 19, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pid,"pid");
            _ds.display(poster,"poster");
            _ds.display(vodVideoData,"vodVideoData");
            _ds.display(liveVideoData,"liveVideoData");
            _ds.display(action,"action");
            _ds.display(isAutoPlayer,"isAutoPlayer");
            _ds.display(isLiveVideo,"isLiveVideo");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(actors,"actors");
            _ds.display(likeNums,"likeNums");
            _ds.display(livePollKey,"livePollKey");
            _ds.display(starImageUrl,"starImageUrl");
            _ds.display(title,"title");
            _ds.display(actorsName,"actorsName");
            _ds.display(uiType,"uiType");
            _ds.display(markLabel,"markLabel");
            _ds.display(isLikeShow,"isLikeShow");
            _ds.display(popularity,"popularity");
            _ds.display(isPopularityShow,"isPopularityShow");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(vodVideoData, true);
            _ds.displaySimple(liveVideoData, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(isAutoPlayer, true);
            _ds.displaySimple(isLiveVideo, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(actors, true);
            _ds.displaySimple(likeNums, true);
            _ds.displaySimple(livePollKey, true);
            _ds.displaySimple(starImageUrl, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(actorsName, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(markLabel, true);
            _ds.displaySimple(isLikeShow, true);
            _ds.displaySimple(popularity, true);
            _ds.displaySimple(isPopularityShow, false);
            return _os;
        }
    public:
        std::string pid;
        jce::Poster poster;
        jce::VideoItemData vodVideoData;
        jce::LiveVideoItemData liveVideoData;
        jce::Action action;
        taf::Bool isAutoPlayer;
        taf::Bool isLiveVideo;
        taf::Int64 startTime;
        taf::Int64 endTime;
        vector<jce::ActorInfo> actors;
        taf::Int64 likeNums;
        std::string livePollKey;
        std::string starImageUrl;
        std::string title;
        std::string actorsName;
        taf::Int32 uiType;
        jce::MarkLabel markLabel;
        taf::Bool isLikeShow;
        taf::Int64 popularity;
        taf::Bool isPopularityShow;
    };
    inline bool operator==(const ONALivePreviewBoard&l, const ONALivePreviewBoard&r)
    {
        return l.pid == r.pid && l.poster == r.poster && l.vodVideoData == r.vodVideoData && l.liveVideoData == r.liveVideoData && l.action == r.action && l.isAutoPlayer == r.isAutoPlayer && l.isLiveVideo == r.isLiveVideo && l.startTime == r.startTime && l.endTime == r.endTime && l.actors == r.actors && l.likeNums == r.likeNums && l.livePollKey == r.livePollKey && l.starImageUrl == r.starImageUrl && l.title == r.title && l.actorsName == r.actorsName && l.uiType == r.uiType && l.markLabel == r.markLabel && l.isLikeShow == r.isLikeShow && l.popularity == r.popularity && l.isPopularityShow == r.isPopularityShow;
    }
    inline bool operator!=(const ONALivePreviewBoard&l, const ONALivePreviewBoard&r)
    {
        return !(l == r);
    }

    struct ONAFilmPreViewTicket : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAFilmPreViewTicket";
        }
        static string MD5()
        {
            return "2ba1da501271afb602215441f50e7196";
        }
        ONAFilmPreViewTicket()
        :isShowForVip(false),isCanPlaceHoler(false)
        {
        }
        void resetDefautlt()
        {
            isShowForVip = false;
            isCanPlaceHoler = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(hollywoodItem, 0);
            _os.write(buyTicketItem, 1);
            _os.write(isShowForVip, 2);
            _os.write(isCanPlaceHoler, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(hollywoodItem, 0, false);
            _is.read(buyTicketItem, 1, false);
            _is.read(isShowForVip, 2, false);
            _is.read(isCanPlaceHoler, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(hollywoodItem,"hollywoodItem");
            _ds.display(buyTicketItem,"buyTicketItem");
            _ds.display(isShowForVip,"isShowForVip");
            _ds.display(isCanPlaceHoler,"isCanPlaceHoler");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(hollywoodItem, true);
            _ds.displaySimple(buyTicketItem, true);
            _ds.displaySimple(isShowForVip, true);
            _ds.displaySimple(isCanPlaceHoler, false);
            return _os;
        }
    public:
        jce::ActionBarInfo hollywoodItem;
        jce::ActionBarInfo buyTicketItem;
        taf::Bool isShowForVip;
        taf::Bool isCanPlaceHoler;
    };
    inline bool operator==(const ONAFilmPreViewTicket&l, const ONAFilmPreViewTicket&r)
    {
        return l.hollywoodItem == r.hollywoodItem && l.buyTicketItem == r.buyTicketItem && l.isShowForVip == r.isShowForVip && l.isCanPlaceHoler == r.isCanPlaceHoler;
    }
    inline bool operator!=(const ONAFilmPreViewTicket&l, const ONAFilmPreViewTicket&r)
    {
        return !(l == r);
    }

    struct ONAViewShowBox : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAViewShowBox";
        }
        static string MD5()
        {
            return "d03d63f5b2e0eba38251e7b8d8f1fc01";
        }
        ONAViewShowBox()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(data, 0);
            _os.write(batchData, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
            _os.write(actionBar, 4);
            _os.write(rightActionBar, 5);
            _os.write(title, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(data, 0, false);
            _is.read(batchData, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
            _is.read(actionBar, 4, false);
            _is.read(rightActionBar, 5, false);
            _is.read(title, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(data,"data");
            _ds.display(batchData,"batchData");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(actionBar,"actionBar");
            _ds.display(rightActionBar,"rightActionBar");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(data, true);
            _ds.displaySimple(batchData, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(actionBar, true);
            _ds.displaySimple(rightActionBar, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        vector<jce::TempletLine> data;
        jce::BatchData batchData;
        std::string reportKey;
        std::string reportParams;
        jce::ActionBarInfo actionBar;
        jce::ActionBarInfo rightActionBar;
        jce::ONAPosterTitle title;
    };
    inline bool operator==(const ONAViewShowBox&l, const ONAViewShowBox&r)
    {
        return l.data == r.data && l.batchData == r.batchData && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.actionBar == r.actionBar && l.rightActionBar == r.rightActionBar && l.title == r.title;
    }
    inline bool operator!=(const ONAViewShowBox&l, const ONAViewShowBox&r)
    {
        return !(l == r);
    }

    struct ONAReward : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAReward";
        }
        static string MD5()
        {
            return "12ec94706981c9a187117c7a50e8150e";
        }
        ONAReward()
        :infoNoReward(""),infoHasReward(""),rewardTip(""),rewardKey1(""),rewardUrl("")
        {
        }
        void resetDefautlt()
        {
            infoNoReward = "";
            infoHasReward = "";
            rewardTip = "";
            rewardKey1 = "";
            rewardUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(accountState, 0);
            _os.write(infoNoReward, 1);
            _os.write(infoHasReward, 2);
            _os.write(rewardTip, 3);
            _os.write(rewardKey1, 4);
            _os.write(idolAccount, 5);
            _os.write(videoInfo, 6);
            _os.write(rewardUrl, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(accountState, 0, true);
            _is.read(infoNoReward, 1, true);
            _is.read(infoHasReward, 2, true);
            _is.read(rewardTip, 3, true);
            _is.read(rewardKey1, 4, true);
            _is.read(idolAccount, 5, true);
            _is.read(videoInfo, 6, false);
            _is.read(rewardUrl, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(accountState,"accountState");
            _ds.display(infoNoReward,"infoNoReward");
            _ds.display(infoHasReward,"infoHasReward");
            _ds.display(rewardTip,"rewardTip");
            _ds.display(rewardKey1,"rewardKey1");
            _ds.display(idolAccount,"idolAccount");
            _ds.display(videoInfo,"videoInfo");
            _ds.display(rewardUrl,"rewardUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(accountState, true);
            _ds.displaySimple(infoNoReward, true);
            _ds.displaySimple(infoHasReward, true);
            _ds.displaySimple(rewardTip, true);
            _ds.displaySimple(rewardKey1, true);
            _ds.displaySimple(idolAccount, true);
            _ds.displaySimple(videoInfo, true);
            _ds.displaySimple(rewardUrl, false);
            return _os;
        }
    public:
        jce::AccountState accountState;
        std::string infoNoReward;
        std::string infoHasReward;
        std::string rewardTip;
        std::string rewardKey1;
        jce::AccountInfo idolAccount;
        jce::VideoInfo videoInfo;
        std::string rewardUrl;
    };
    inline bool operator==(const ONAReward&l, const ONAReward&r)
    {
        return l.accountState == r.accountState && l.infoNoReward == r.infoNoReward && l.infoHasReward == r.infoHasReward && l.rewardTip == r.rewardTip && l.rewardKey1 == r.rewardKey1 && l.idolAccount == r.idolAccount && l.videoInfo == r.videoInfo && l.rewardUrl == r.rewardUrl;
    }
    inline bool operator!=(const ONAReward&l, const ONAReward&r)
    {
        return !(l == r);
    }

    struct ONAMarketingAttentPosterList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAMarketingAttentPosterList";
        }
        static string MD5()
        {
            return "267d8bb33d5c366661681e638a538aaa";
        }
        ONAMarketingAttentPosterList()
        :uiType(0),reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(attentPoster, 1);
            _os.write(reportParams, 2);
            _os.write(reportKey, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, true);
            _is.read(attentPoster, 1, true);
            _is.read(reportParams, 2, false);
            _is.read(reportKey, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(attentPoster,"attentPoster");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(attentPoster, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        vector<jce::MarketingAttentPoster> attentPoster;
        std::string reportParams;
        std::string reportKey;
    };
    inline bool operator==(const ONAMarketingAttentPosterList&l, const ONAMarketingAttentPosterList&r)
    {
        return l.uiType == r.uiType && l.attentPoster == r.attentPoster && l.reportParams == r.reportParams && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const ONAMarketingAttentPosterList&l, const ONAMarketingAttentPosterList&r)
    {
        return !(l == r);
    }

    struct ONAIpLimitInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAIpLimitInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        ONAIpLimitInfo()
        :mainTitle(""),subTitle("")
        {
        }
        void resetDefautlt()
        {
            mainTitle = "";
            subTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(mainTitle, 0);
            _os.write(subTitle, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(mainTitle, 0, true);
            _is.read(subTitle, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(mainTitle,"mainTitle");
            _ds.display(subTitle,"subTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(mainTitle, true);
            _ds.displaySimple(subTitle, false);
            return _os;
        }
    public:
        std::string mainTitle;
        std::string subTitle;
    };
    inline bool operator==(const ONAIpLimitInfo&l, const ONAIpLimitInfo&r)
    {
        return l.mainTitle == r.mainTitle && l.subTitle == r.subTitle;
    }
    inline bool operator!=(const ONAIpLimitInfo&l, const ONAIpLimitInfo&r)
    {
        return !(l == r);
    }

    struct ONAPromoteList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAPromoteList";
        }
        static string MD5()
        {
            return "4335c272d494fd06d598daddd8984bb6";
        }
        ONAPromoteList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(entryList, 0);
            _os.write(title, 1);
            _os.write(spliteLine, 2);
            _os.write(batchData, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
            _os.write(extraReportKVs, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(entryList, 0, true);
            _is.read(title, 1, false);
            _is.read(spliteLine, 2, false);
            _is.read(batchData, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
            _is.read(extraReportKVs, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(entryList,"entryList");
            _ds.display(title,"title");
            _ds.display(spliteLine,"spliteLine");
            _ds.display(batchData,"batchData");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(extraReportKVs,"extraReportKVs");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(entryList, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(spliteLine, true);
            _ds.displaySimple(batchData, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(extraReportKVs, false);
            return _os;
        }
    public:
        vector<jce::ONAPromoteEntry> entryList;
        jce::ONAPosterTitle title;
        jce::ONASplitLine spliteLine;
        jce::BatchData batchData;
        std::string reportKey;
        std::string reportParams;
        vector<jce::ExtraReportKV> extraReportKVs;
    };
    inline bool operator==(const ONAPromoteList&l, const ONAPromoteList&r)
    {
        return l.entryList == r.entryList && l.title == r.title && l.spliteLine == r.spliteLine && l.batchData == r.batchData && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.extraReportKVs == r.extraReportKVs;
    }
    inline bool operator!=(const ONAPromoteList&l, const ONAPromoteList&r)
    {
        return !(l == r);
    }

    struct ONAGalleryPosterPager : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAGalleryPosterPager";
        }
        static string MD5()
        {
            return "227b1cb3550692473ff1320579d8311c";
        }
        ONAGalleryPosterPager()
        :adType(0),adKey(0),extension(""),adSerialNumber("")
        {
        }
        void resetDefautlt()
        {
            adType = 0;
            adKey = 0;
            extension = "";
            adSerialNumber = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adType, 0);
            _os.write(adKey, 1);
            _os.write(posterList, 2);
            _os.write(extension, 3);
            _os.write(adSerialNumber, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adType, 0, false);
            _is.read(adKey, 1, false);
            _is.read(posterList, 2, false);
            _is.read(extension, 3, false);
            _is.read(adSerialNumber, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adType,"adType");
            _ds.display(adKey,"adKey");
            _ds.display(posterList,"posterList");
            _ds.display(extension,"extension");
            _ds.display(adSerialNumber,"adSerialNumber");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adType, true);
            _ds.displaySimple(adKey, true);
            _ds.displaySimple(posterList, true);
            _ds.displaySimple(extension, true);
            _ds.displaySimple(adSerialNumber, false);
            return _os;
        }
    public:
        taf::Char adType;
        taf::Int32 adKey;
        vector<jce::Poster> posterList;
        std::string extension;
        std::string adSerialNumber;
    };
    inline bool operator==(const ONAGalleryPosterPager&l, const ONAGalleryPosterPager&r)
    {
        return l.adType == r.adType && l.adKey == r.adKey && l.posterList == r.posterList && l.extension == r.extension && l.adSerialNumber == r.adSerialNumber;
    }
    inline bool operator!=(const ONAGalleryPosterPager&l, const ONAGalleryPosterPager&r)
    {
        return !(l == r);
    }

    struct ONASearchMatch : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASearchMatch";
        }
        static string MD5()
        {
            return "35059f87c7000bb3c55b72436b1bbf40";
        }
        ONASearchMatch()
        :searchKey(""),matchResult(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            searchKey = "";
            matchResult = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(searchKey, 0);
            _os.write(matchResult, 1);
            _os.write(hotWordList, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(searchKey, 0, false);
            _is.read(matchResult, 1, false);
            _is.read(hotWordList, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(searchKey,"searchKey");
            _ds.display(matchResult,"matchResult");
            _ds.display(hotWordList,"hotWordList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(searchKey, true);
            _ds.displaySimple(matchResult, true);
            _ds.displaySimple(hotWordList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string searchKey;
        std::string matchResult;
        vector<std::string> hotWordList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONASearchMatch&l, const ONASearchMatch&r)
    {
        return l.searchKey == r.searchKey && l.matchResult == r.matchResult && l.hotWordList == r.hotWordList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONASearchMatch&l, const ONASearchMatch&r)
    {
        return !(l == r);
    }

    struct ONANavPosterList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONANavPosterList";
        }
        static string MD5()
        {
            return "ac8dc8ed7a4c860da3f91ed08310409f";
        }
        ONANavPosterList()
        :uiType(0)
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tabList, 0);
            _os.write(uiType, 1);
            _os.write(posterList, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tabList, 0, true);
            _is.read(uiType, 1, false);
            _is.read(posterList, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tabList,"tabList");
            _ds.display(uiType,"uiType");
            _ds.display(posterList,"posterList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tabList, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(posterList, false);
            return _os;
        }
    public:
        vector<jce::LiveTabModuleInfo> tabList;
        taf::Int32 uiType;
        vector<jce::Poster> posterList;
    };
    inline bool operator==(const ONANavPosterList&l, const ONANavPosterList&r)
    {
        return l.tabList == r.tabList && l.uiType == r.uiType && l.posterList == r.posterList;
    }
    inline bool operator!=(const ONANavPosterList&l, const ONANavPosterList&r)
    {
        return !(l == r);
    }

    struct ONAScoreList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAScoreList";
        }
        static string MD5()
        {
            return "802d9cfcdb9237597ad57ae182424776";
        }
        ONAScoreList()
        :uiType(0),leftImgUrl(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            leftImgUrl = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(scoreList, 1);
            _os.write(leftImgUrl, 2);
            _os.write(action, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, true);
            _is.read(scoreList, 1, true);
            _is.read(leftImgUrl, 2, false);
            _is.read(action, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(scoreList,"scoreList");
            _ds.display(leftImgUrl,"leftImgUrl");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(scoreList, true);
            _ds.displaySimple(leftImgUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        vector<jce::ScoreListItem> scoreList;
        std::string leftImgUrl;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAScoreList&l, const ONAScoreList&r)
    {
        return l.uiType == r.uiType && l.scoreList == r.scoreList && l.leftImgUrl == r.leftImgUrl && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAScoreList&l, const ONAScoreList&r)
    {
        return !(l == r);
    }

    struct ONATagDataGroup : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONATagDataGroup";
        }
        static string MD5()
        {
            return "c57da39a1dd55929888dd791aa3d5a02";
        }
        ONATagDataGroup()
        :textColor(""),backgroundColor(""),reportKey(""),reportParams(""),maxLineNum(0),title("")
        {
        }
        void resetDefautlt()
        {
            textColor = "";
            backgroundColor = "";
            reportKey = "";
            reportParams = "";
            maxLineNum = 0;
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tagList, 0);
            _os.write(textColor, 1);
            _os.write(backgroundColor, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
            _os.write(maxLineNum, 5);
            _os.write(title, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tagList, 0, true);
            _is.read(textColor, 1, false);
            _is.read(backgroundColor, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
            _is.read(maxLineNum, 5, false);
            _is.read(title, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tagList,"tagList");
            _ds.display(textColor,"textColor");
            _ds.display(backgroundColor,"backgroundColor");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(maxLineNum,"maxLineNum");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tagList, true);
            _ds.displaySimple(textColor, true);
            _ds.displaySimple(backgroundColor, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(maxLineNum, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        vector<jce::IconTagText> tagList;
        std::string textColor;
        std::string backgroundColor;
        std::string reportKey;
        std::string reportParams;
        taf::Int32 maxLineNum;
        std::string title;
    };
    inline bool operator==(const ONATagDataGroup&l, const ONATagDataGroup&r)
    {
        return l.tagList == r.tagList && l.textColor == r.textColor && l.backgroundColor == r.backgroundColor && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.maxLineNum == r.maxLineNum && l.title == r.title;
    }
    inline bool operator!=(const ONATagDataGroup&l, const ONATagDataGroup&r)
    {
        return !(l == r);
    }

    struct ONANetworkRed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONANetworkRed";
        }
        static string MD5()
        {
            return "e1bb20c9c0d4d68d5ee12f9b5d7066d2";
        }
        ONANetworkRed()
        :networkRedId("")
        {
        }
        void resetDefautlt()
        {
            networkRedId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(networkRedId, 0);
            _os.write(poster, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(networkRedId, 0, true);
            _is.read(poster, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(networkRedId,"networkRedId");
            _ds.display(poster,"poster");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(networkRedId, true);
            _ds.displaySimple(poster, false);
            return _os;
        }
    public:
        std::string networkRedId;
        jce::Poster poster;
    };
    inline bool operator==(const ONANetworkRed&l, const ONANetworkRed&r)
    {
        return l.networkRedId == r.networkRedId && l.poster == r.poster;
    }
    inline bool operator!=(const ONANetworkRed&l, const ONANetworkRed&r)
    {
        return !(l == r);
    }

    struct ONAScrollTips : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAScrollTips";
        }
        static string MD5()
        {
            return "711ea18b74c72749dc91eaa3c84e9135";
        }
        ONAScrollTips()
        :scrollTime(0),stopTime(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            scrollTime = 0;
            stopTime = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(items, 0);
            _os.write(scrollTime, 1);
            _os.write(stopTime, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(items, 0, true);
            _is.read(scrollTime, 1, false);
            _is.read(stopTime, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(items,"items");
            _ds.display(scrollTime,"scrollTime");
            _ds.display(stopTime,"stopTime");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(items, true);
            _ds.displaySimple(scrollTime, true);
            _ds.displaySimple(stopTime, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::ActionBarInfo> items;
        taf::Int32 scrollTime;
        taf::Int32 stopTime;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAScrollTips&l, const ONAScrollTips&r)
    {
        return l.items == r.items && l.scrollTime == r.scrollTime && l.stopTime == r.stopTime && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAScrollTips&l, const ONAScrollTips&r)
    {
        return !(l == r);
    }

    struct ONAEnterPictures : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAEnterPictures";
        }
        static string MD5()
        {
            return "2ac9846ff475501b93e8248848b35a99";
        }
        ONAEnterPictures()
        :reportKey(""),reportParams(""),limitShowCount(0),hasBottomSpace(true)
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            limitShowCount = 0;
            hasBottomSpace = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(items, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
            _os.write(limitShowCount, 3);
            _os.write(hasBottomSpace, 4);
            _os.write(extraReportKVs, 5);
            _os.write(nonVipItems, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(items, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
            _is.read(limitShowCount, 3, false);
            _is.read(hasBottomSpace, 4, false);
            _is.read(extraReportKVs, 5, false);
            _is.read(nonVipItems, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(items,"items");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(limitShowCount,"limitShowCount");
            _ds.display(hasBottomSpace,"hasBottomSpace");
            _ds.display(extraReportKVs,"extraReportKVs");
            _ds.display(nonVipItems,"nonVipItems");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(items, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(limitShowCount, true);
            _ds.displaySimple(hasBottomSpace, true);
            _ds.displaySimple(extraReportKVs, true);
            _ds.displaySimple(nonVipItems, false);
            return _os;
        }
    public:
        vector<jce::ActionBarInfo> items;
        std::string reportKey;
        std::string reportParams;
        taf::Int32 limitShowCount;
        taf::Bool hasBottomSpace;
        vector<jce::ExtraReportKV> extraReportKVs;
        vector<jce::ActionBarInfo> nonVipItems;
    };
    inline bool operator==(const ONAEnterPictures&l, const ONAEnterPictures&r)
    {
        return l.items == r.items && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.limitShowCount == r.limitShowCount && l.hasBottomSpace == r.hasBottomSpace && l.extraReportKVs == r.extraReportKVs && l.nonVipItems == r.nonVipItems;
    }
    inline bool operator!=(const ONAEnterPictures&l, const ONAEnterPictures&r)
    {
        return !(l == r);
    }

    struct ONAWeiboPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAWeiboPoster";
        }
        static string MD5()
        {
            return "cc7e7bf523864a23f8f4d65b16244bfd";
        }
        ONAWeiboPoster()
        :intro(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            intro = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 1);
            _os.write(intro, 2);
            _os.write(action, 3);
            _os.write(userList, 4);
            _os.write(lines, 5);
            _os.write(reportKey, 6);
            _os.write(reportParams, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 1, true);
            _is.read(intro, 2, false);
            _is.read(action, 3, false);
            _is.read(userList, 4, false);
            _is.read(lines, 5, false);
            _is.read(reportKey, 6, false);
            _is.read(reportParams, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(intro,"intro");
            _ds.display(action,"action");
            _ds.display(userList,"userList");
            _ds.display(lines,"lines");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(intro, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(userList, true);
            _ds.displaySimple(lines, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::Poster poster;
        std::string intro;
        jce::Action action;
        vector<jce::ActorInfo> userList;
        vector<std::string> lines;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAWeiboPoster&l, const ONAWeiboPoster&r)
    {
        return l.poster == r.poster && l.intro == r.intro && l.action == r.action && l.userList == r.userList && l.lines == r.lines && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAWeiboPoster&l, const ONAWeiboPoster&r)
    {
        return !(l == r);
    }

    struct ONASchoolList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASchoolList";
        }
        static string MD5()
        {
            return "25295d6b73f27d1945412d1637915252";
        }
        ONASchoolList()
        :type(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(schoolList, 0);
            _os.write(type, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(schoolList, 0, true);
            _is.read(type, 1, true);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(schoolList,"schoolList");
            _ds.display(type,"type");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(schoolList, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::ActionBarInfo> schoolList;
        taf::Int32 type;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONASchoolList&l, const ONASchoolList&r)
    {
        return l.schoolList == r.schoolList && l.type == r.type && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONASchoolList&l, const ONASchoolList&r)
    {
        return !(l == r);
    }

    struct ONASearchStarList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASearchStarList";
        }
        static string MD5()
        {
            return "92b15650b0a9b9971754edac06e16d1a";
        }
        ONASearchStarList()
        :desc(""),reportKey(""),reportParams(""),listType(0)
        {
        }
        void resetDefautlt()
        {
            desc = "";
            reportKey = "";
            reportParams = "";
            listType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starList, 0);
            _os.write(desc, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
            _os.write(listType, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starList, 0, true);
            _is.read(desc, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
            _is.read(listType, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starList,"starList");
            _ds.display(desc,"desc");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(listType,"listType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starList, true);
            _ds.displaySimple(desc, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(listType, false);
            return _os;
        }
    public:
        vector<jce::ActorInfo> starList;
        std::string desc;
        std::string reportKey;
        std::string reportParams;
        taf::Int32 listType;
    };
    inline bool operator==(const ONASearchStarList&l, const ONASearchStarList&r)
    {
        return l.starList == r.starList && l.desc == r.desc && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.listType == r.listType;
    }
    inline bool operator!=(const ONASearchStarList&l, const ONASearchStarList&r)
    {
        return !(l == r);
    }

    struct ONAStarMeetList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAStarMeetList";
        }
        static string MD5()
        {
            return "1b95f8be96328fb0d35ca6dd85270fdd";
        }
        ONAStarMeetList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(meetList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(meetList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(meetList,"meetList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(meetList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::StarMeetInfo> meetList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAStarMeetList&l, const ONAStarMeetList&r)
    {
        return l.meetList == r.meetList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAStarMeetList&l, const ONAStarMeetList&r)
    {
        return !(l == r);
    }

    struct ONAStarAgenda : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAStarAgenda";
        }
        static string MD5()
        {
            return "5238a377658caa1229523418c235e046";
        }
        ONAStarAgenda()
        :uiType(0),desc(""),status(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            desc = "";
            status = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(actor, 1);
            _os.write(agendaTime, 2);
            _os.write(desc, 3);
            _os.write(topTips, 4);
            _os.write(activityTime, 5);
            _os.write(activityAddr, 6);
            _os.write(action, 7);
            _os.write(status, 8);
            _os.write(reportKey, 9);
            _os.write(reportParams, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, true);
            _is.read(actor, 1, false);
            _is.read(agendaTime, 2, false);
            _is.read(desc, 3, false);
            _is.read(topTips, 4, false);
            _is.read(activityTime, 5, false);
            _is.read(activityAddr, 6, false);
            _is.read(action, 7, false);
            _is.read(status, 8, false);
            _is.read(reportKey, 9, false);
            _is.read(reportParams, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(actor,"actor");
            _ds.display(agendaTime,"agendaTime");
            _ds.display(desc,"desc");
            _ds.display(topTips,"topTips");
            _ds.display(activityTime,"activityTime");
            _ds.display(activityAddr,"activityAddr");
            _ds.display(action,"action");
            _ds.display(status,"status");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(actor, true);
            _ds.displaySimple(agendaTime, true);
            _ds.displaySimple(desc, true);
            _ds.displaySimple(topTips, true);
            _ds.displaySimple(activityTime, true);
            _ds.displaySimple(activityAddr, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        jce::ActorInfo actor;
        jce::AgendaTime agendaTime;
        std::string desc;
        jce::IconTagText topTips;
        jce::IconTagText activityTime;
        jce::IconTagText activityAddr;
        jce::Action action;
        taf::Int32 status;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAStarAgenda&l, const ONAStarAgenda&r)
    {
        return l.uiType == r.uiType && l.actor == r.actor && l.agendaTime == r.agendaTime && l.desc == r.desc && l.topTips == r.topTips && l.activityTime == r.activityTime && l.activityAddr == r.activityAddr && l.action == r.action && l.status == r.status && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAStarAgenda&l, const ONAStarAgenda&r)
    {
        return !(l == r);
    }

    struct ONAStarHotRankInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAStarHotRankInfo";
        }
        static string MD5()
        {
            return "b3c4c45ffc23cef31f386aa77fafc129";
        }
        ONAStarHotRankInfo()
        :reportKey(""),reportParams(""),type(0),uiType(0)
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            type = 0;
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actor, 0);
            _os.write(detailInfo, 1);
            _os.write(relateFans, 2);
            _os.write(detailAction, 4);
            _os.write(moreAction, 5);
            _os.write(reportKey, 6);
            _os.write(reportParams, 7);
            _os.write(type, 8);
            _os.write(giftParam, 9);
            _os.write(uiType, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actor, 0, false);
            _is.read(detailInfo, 1, false);
            _is.read(relateFans, 2, false);
            _is.read(detailAction, 4, false);
            _is.read(moreAction, 5, false);
            _is.read(reportKey, 6, false);
            _is.read(reportParams, 7, false);
            _is.read(type, 8, false);
            _is.read(giftParam, 9, false);
            _is.read(uiType, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actor,"actor");
            _ds.display(detailInfo,"detailInfo");
            _ds.display(relateFans,"relateFans");
            _ds.display(detailAction,"detailAction");
            _ds.display(moreAction,"moreAction");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(type,"type");
            _ds.display(giftParam,"giftParam");
            _ds.display(uiType,"uiType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actor, true);
            _ds.displaySimple(detailInfo, true);
            _ds.displaySimple(relateFans, true);
            _ds.displaySimple(detailAction, true);
            _ds.displaySimple(moreAction, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(giftParam, true);
            _ds.displaySimple(uiType, false);
            return _os;
        }
    public:
        jce::ActorInfo actor;
        vector<jce::KVItem> detailInfo;
        vector<jce::PortraitInfo> relateFans;
        jce::Action detailAction;
        jce::ActionBarInfo moreAction;
        std::string reportKey;
        std::string reportParams;
        taf::Int32 type;
        jce::PresentGiftParam giftParam;
        taf::Char uiType;
    };
    inline bool operator==(const ONAStarHotRankInfo&l, const ONAStarHotRankInfo&r)
    {
        return l.actor == r.actor && l.detailInfo == r.detailInfo && l.relateFans == r.relateFans && l.detailAction == r.detailAction && l.moreAction == r.moreAction && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.type == r.type && l.giftParam == r.giftParam && l.uiType == r.uiType;
    }
    inline bool operator!=(const ONAStarHotRankInfo&l, const ONAStarHotRankInfo&r)
    {
        return !(l == r);
    }

    struct ONAStarHotTopicsInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAStarHotTopicsInfo";
        }
        static string MD5()
        {
            return "64ef79d98bddcdc3b689de5d4e1651c1";
        }
        ONAStarHotTopicsInfo()
        :reportKey(""),reportParams(""),style(0)
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            style = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starTopics, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
            _os.write(style, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starTopics, 0, false);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
            _is.read(style, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starTopics,"starTopics");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(style,"style");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starTopics, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(style, false);
            return _os;
        }
    public:
        vector<jce::StarTopicInfo> starTopics;
        std::string reportKey;
        std::string reportParams;
        taf::Char style;
    };
    inline bool operator==(const ONAStarHotTopicsInfo&l, const ONAStarHotTopicsInfo&r)
    {
        return l.starTopics == r.starTopics && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.style == r.style;
    }
    inline bool operator!=(const ONAStarHotTopicsInfo&l, const ONAStarHotTopicsInfo&r)
    {
        return !(l == r);
    }

    struct ONAFocusStarNews : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAFocusStarNews";
        }
        static string MD5()
        {
            return "c0bd4dbb53bf7fb01f29e8f7f768c207";
        }
        ONAFocusStarNews()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starNews, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starNews, 0, false);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starNews,"starNews");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starNews, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::FanInvolveItem> starNews;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAFocusStarNews&l, const ONAFocusStarNews&r)
    {
        return l.starNews == r.starNews && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAFocusStarNews&l, const ONAFocusStarNews&r)
    {
        return !(l == r);
    }

    struct ONADetailsCommentList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADetailsCommentList";
        }
        static string MD5()
        {
            return "438b528ab5ae7deb0b4a39dc78459599";
        }
        ONADetailsCommentList()
        :commentKey(""),pageContext(""),isAllData(true),reportParams(""),reportKey(""),maxOutShowsize(0),allCommentNum(0)
        {
        }
        void resetDefautlt()
        {
            commentKey = "";
            pageContext = "";
            isAllData = true;
            reportParams = "";
            reportKey = "";
            maxOutShowsize = 0;
            allCommentNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedList, 0);
            _os.write(commentKey, 1);
            _os.write(pageContext, 2);
            _os.write(isAllData, 3);
            _os.write(reportParams, 4);
            _os.write(reportKey, 5);
            _os.write(title, 6);
            _os.write(spliteLine, 7);
            _os.write(moreAction, 8);
            _os.write(maxOutShowsize, 9);
            _os.write(allCommentNum, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedList, 0, false);
            _is.read(commentKey, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(isAllData, 3, false);
            _is.read(reportParams, 4, false);
            _is.read(reportKey, 5, false);
            _is.read(title, 6, false);
            _is.read(spliteLine, 7, false);
            _is.read(moreAction, 8, false);
            _is.read(maxOutShowsize, 9, false);
            _is.read(allCommentNum, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedList,"feedList");
            _ds.display(commentKey,"commentKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(isAllData,"isAllData");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(title,"title");
            _ds.display(spliteLine,"spliteLine");
            _ds.display(moreAction,"moreAction");
            _ds.display(maxOutShowsize,"maxOutShowsize");
            _ds.display(allCommentNum,"allCommentNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedList, true);
            _ds.displaySimple(commentKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isAllData, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(spliteLine, true);
            _ds.displaySimple(moreAction, true);
            _ds.displaySimple(maxOutShowsize, true);
            _ds.displaySimple(allCommentNum, false);
            return _os;
        }
    public:
        vector<jce::CirclePrimaryFeed> feedList;
        std::string commentKey;
        std::string pageContext;
        taf::Bool isAllData;
        std::string reportParams;
        std::string reportKey;
        jce::ONAPosterTitle title;
        jce::ONASplitLine spliteLine;
        jce::ONALoadMoreAction moreAction;
        taf::Int32 maxOutShowsize;
        taf::Int64 allCommentNum;
    };
    inline bool operator==(const ONADetailsCommentList&l, const ONADetailsCommentList&r)
    {
        return l.feedList == r.feedList && l.commentKey == r.commentKey && l.pageContext == r.pageContext && l.isAllData == r.isAllData && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.title == r.title && l.spliteLine == r.spliteLine && l.moreAction == r.moreAction && l.maxOutShowsize == r.maxOutShowsize && l.allCommentNum == r.allCommentNum;
    }
    inline bool operator!=(const ONADetailsCommentList&l, const ONADetailsCommentList&r)
    {
        return !(l == r);
    }

    struct ONAExpandableText : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAExpandableText";
        }
        static string MD5()
        {
            return "80852b071de533c0ed38c58a2df18166";
        }
        ONAExpandableText()
        :content(""),expanded(true),maxLines(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            content = "";
            expanded = true;
            maxLines = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(content, 0);
            _os.write(expanded, 1);
            _os.write(maxLines, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(content, 0, true);
            _is.read(expanded, 1, false);
            _is.read(maxLines, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(content,"content");
            _ds.display(expanded,"expanded");
            _ds.display(maxLines,"maxLines");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(content, true);
            _ds.displaySimple(expanded, true);
            _ds.displaySimple(maxLines, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string content;
        taf::Bool expanded;
        taf::Int32 maxLines;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAExpandableText&l, const ONAExpandableText&r)
    {
        return l.content == r.content && l.expanded == r.expanded && l.maxLines == r.maxLines && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAExpandableText&l, const ONAExpandableText&r)
    {
        return !(l == r);
    }

    struct ONAVideoTipsIntro : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAVideoTipsIntro";
        }
        static string MD5()
        {
            return "c4d7e629c0ca65edfd0bf3b3fb53b7d1";
        }
        ONAVideoTipsIntro()
        :rating(0),tipsFirstLine(""),tipsSecondLine(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            rating = 0;
            tipsFirstLine = "";
            tipsSecondLine = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(rating, 0);
            _os.write(tipsFirstLine, 1);
            _os.write(tipsSecondLine, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(rating, 0, true);
            _is.read(tipsFirstLine, 1, false);
            _is.read(tipsSecondLine, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(rating,"rating");
            _ds.display(tipsFirstLine,"tipsFirstLine");
            _ds.display(tipsSecondLine,"tipsSecondLine");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(rating, true);
            _ds.displaySimple(tipsFirstLine, true);
            _ds.displaySimple(tipsSecondLine, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 rating;
        std::string tipsFirstLine;
        std::string tipsSecondLine;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAVideoTipsIntro&l, const ONAVideoTipsIntro&r)
    {
        return l.rating == r.rating && l.tipsFirstLine == r.tipsFirstLine && l.tipsSecondLine == r.tipsSecondLine && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAVideoTipsIntro&l, const ONAVideoTipsIntro&r)
    {
        return !(l == r);
    }

    struct ONAFilmComment : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAFilmComment";
        }
        static string MD5()
        {
            return "9b9ff8daf7db4838df95e4a03b4cf62e";
        }
        ONAFilmComment()
        :commentTitle(""),commentContent(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            commentTitle = "";
            commentContent = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commentUser, 0);
            _os.write(commentTitle, 1);
            _os.write(commentContent, 2);
            _os.write(detailAction, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commentUser, 0, true);
            _is.read(commentTitle, 1, true);
            _is.read(commentContent, 2, false);
            _is.read(detailAction, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commentUser,"commentUser");
            _ds.display(commentTitle,"commentTitle");
            _ds.display(commentContent,"commentContent");
            _ds.display(detailAction,"detailAction");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commentUser, true);
            _ds.displaySimple(commentTitle, true);
            _ds.displaySimple(commentContent, true);
            _ds.displaySimple(detailAction, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::ActorInfo commentUser;
        std::string commentTitle;
        std::string commentContent;
        jce::Action detailAction;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAFilmComment&l, const ONAFilmComment&r)
    {
        return l.commentUser == r.commentUser && l.commentTitle == r.commentTitle && l.commentContent == r.commentContent && l.detailAction == r.detailAction && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAFilmComment&l, const ONAFilmComment&r)
    {
        return !(l == r);
    }

    struct ONAClassificationList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAClassificationList";
        }
        static string MD5()
        {
            return "8f61a8dd9e913921bcac99393ba34163";
        }
        ONAClassificationList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(classificationList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(classificationList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(classificationList,"classificationList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(classificationList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::ActionBarInfo> classificationList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAClassificationList&l, const ONAClassificationList&r)
    {
        return l.classificationList == r.classificationList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAClassificationList&l, const ONAClassificationList&r)
    {
        return !(l == r);
    }

    struct ONATimeLineTitle : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONATimeLineTitle";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        ONATimeLineTitle()
        :uiType(0),title("")
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(title, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, true);
            _is.read(title, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        std::string title;
    };
    inline bool operator==(const ONATimeLineTitle&l, const ONATimeLineTitle&r)
    {
        return l.uiType == r.uiType && l.title == r.title;
    }
    inline bool operator!=(const ONATimeLineTitle&l, const ONATimeLineTitle&r)
    {
        return !(l == r);
    }

    struct ONATimeLinePoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONATimeLinePoster";
        }
        static string MD5()
        {
            return "bafd94e03ecf558c5e830b85f7874d1f";
        }
        ONATimeLinePoster()
        :uiType(0)
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(poster, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, true);
            _is.read(poster, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(poster,"poster");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(poster, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        jce::Poster poster;
    };
    inline bool operator==(const ONATimeLinePoster&l, const ONATimeLinePoster&r)
    {
        return l.uiType == r.uiType && l.poster == r.poster;
    }
    inline bool operator!=(const ONATimeLinePoster&l, const ONATimeLinePoster&r)
    {
        return !(l == r);
    }

    struct ONAText : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAText";
        }
        static string MD5()
        {
            return "4b1fa9581323685ec1ca2586e1e09a40";
        }
        ONAText()
        :text(""),gravity(0),leftPadding(0),rightPadding(0),textColor(""),textSize(0),backgroundColor(""),bottomPadding(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            text = "";
            gravity = 0;
            leftPadding = 0;
            rightPadding = 0;
            textColor = "";
            textSize = 0;
            backgroundColor = "";
            bottomPadding = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(text, 0);
            _os.write(gravity, 1);
            _os.write(leftPadding, 2);
            _os.write(rightPadding, 3);
            _os.write(textColor, 4);
            _os.write(textSize, 5);
            _os.write(backgroundColor, 6);
            _os.write(bottomPadding, 7);
            _os.write(reportKey, 8);
            _os.write(reportParams, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(text, 0, true);
            _is.read(gravity, 1, false);
            _is.read(leftPadding, 2, false);
            _is.read(rightPadding, 3, false);
            _is.read(textColor, 4, false);
            _is.read(textSize, 5, false);
            _is.read(backgroundColor, 6, false);
            _is.read(bottomPadding, 7, false);
            _is.read(reportKey, 8, false);
            _is.read(reportParams, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(text,"text");
            _ds.display(gravity,"gravity");
            _ds.display(leftPadding,"leftPadding");
            _ds.display(rightPadding,"rightPadding");
            _ds.display(textColor,"textColor");
            _ds.display(textSize,"textSize");
            _ds.display(backgroundColor,"backgroundColor");
            _ds.display(bottomPadding,"bottomPadding");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(text, true);
            _ds.displaySimple(gravity, true);
            _ds.displaySimple(leftPadding, true);
            _ds.displaySimple(rightPadding, true);
            _ds.displaySimple(textColor, true);
            _ds.displaySimple(textSize, true);
            _ds.displaySimple(backgroundColor, true);
            _ds.displaySimple(bottomPadding, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string text;
        taf::Int32 gravity;
        taf::Int32 leftPadding;
        taf::Int32 rightPadding;
        std::string textColor;
        taf::Int32 textSize;
        std::string backgroundColor;
        taf::Int32 bottomPadding;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAText&l, const ONAText&r)
    {
        return l.text == r.text && l.gravity == r.gravity && l.leftPadding == r.leftPadding && l.rightPadding == r.rightPadding && l.textColor == r.textColor && l.textSize == r.textSize && l.backgroundColor == r.backgroundColor && l.bottomPadding == r.bottomPadding && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAText&l, const ONAText&r)
    {
        return !(l == r);
    }

    struct ONARankItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONARankItem";
        }
        static string MD5()
        {
            return "90c00f7b2b2063cafb8c66c931767d9a";
        }
        ONARankItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(item, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(item, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(item,"item");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(item, false);
            return _os;
        }
    public:
        jce::RankItem item;
    };
    inline bool operator==(const ONARankItem&l, const ONARankItem&r)
    {
        return l.item == r.item;
    }
    inline bool operator!=(const ONARankItem&l, const ONARankItem&r)
    {
        return !(l == r);
    }

    struct ONAExploreTagList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAExploreTagList";
        }
        static string MD5()
        {
            return "5ee9e27a1dd53f88957faf05aa25168a";
        }
        ONAExploreTagList()
        :title(""),btnTitle(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            btnTitle = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(tagList, 1);
            _os.write(btnTitle, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(tagList, 1, true);
            _is.read(btnTitle, 2, true);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(tagList,"tagList");
            _ds.display(btnTitle,"btnTitle");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(tagList, true);
            _ds.displaySimple(btnTitle, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string title;
        vector<jce::ExploreTag> tagList;
        std::string btnTitle;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAExploreTagList&l, const ONAExploreTagList&r)
    {
        return l.title == r.title && l.tagList == r.tagList && l.btnTitle == r.btnTitle && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAExploreTagList&l, const ONAExploreTagList&r)
    {
        return !(l == r);
    }

    struct ONAHorizontalBar : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAHorizontalBar";
        }
        static string MD5()
        {
            return "6ae88755cd8b3b8678dd8ce6ea35d0f0";
        }
        ONAHorizontalBar()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::Poster poster;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAHorizontalBar&l, const ONAHorizontalBar&r)
    {
        return l.poster == r.poster && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAHorizontalBar&l, const ONAHorizontalBar&r)
    {
        return !(l == r);
    }

    struct ONAThemePlayer : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAThemePlayer";
        }
        static string MD5()
        {
            return "667bb965dbe35265bd3fd89faf27d5e9";
        }
        ONAThemePlayer()
        :bgImageUrl(""),topMarginRatio(0),heightToWidthRatio(100),textColor(""),bgColor(""),styleID(0),vipBtnImageUrl(""),priorityBtnImageUrl(""),isvipBtnImageUrl("")
        {
        }
        void resetDefautlt()
        {
            bgImageUrl = "";
            topMarginRatio = 0;
            heightToWidthRatio = 100;
            textColor = "";
            bgColor = "";
            styleID = 0;
            vipBtnImageUrl = "";
            priorityBtnImageUrl = "";
            isvipBtnImageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(videoItemData, 0);
            _os.write(bgImageUrl, 1);
            _os.write(topMarginRatio, 2);
            _os.write(heightToWidthRatio, 3);
            _os.write(textColor, 4);
            _os.write(bgColor, 5);
            _os.write(styleID, 6);
            _os.write(vipBtnImageUrl, 7);
            _os.write(vipAction, 8);
            _os.write(priorityBtnImageUrl, 9);
            _os.write(priorityAction, 10);
            _os.write(isvipBtnImageUrl, 11);
            _os.write(isvipAction, 12);
            _os.write(bgImageAction, 13);
            _os.write(loopVideoItemDataList, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(videoItemData, 0, true);
            _is.read(bgImageUrl, 1, true);
            _is.read(topMarginRatio, 2, false);
            _is.read(heightToWidthRatio, 3, false);
            _is.read(textColor, 4, false);
            _is.read(bgColor, 5, false);
            _is.read(styleID, 6, false);
            _is.read(vipBtnImageUrl, 7, false);
            _is.read(vipAction, 8, false);
            _is.read(priorityBtnImageUrl, 9, false);
            _is.read(priorityAction, 10, false);
            _is.read(isvipBtnImageUrl, 11, false);
            _is.read(isvipAction, 12, false);
            _is.read(bgImageAction, 13, false);
            _is.read(loopVideoItemDataList, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(videoItemData,"videoItemData");
            _ds.display(bgImageUrl,"bgImageUrl");
            _ds.display(topMarginRatio,"topMarginRatio");
            _ds.display(heightToWidthRatio,"heightToWidthRatio");
            _ds.display(textColor,"textColor");
            _ds.display(bgColor,"bgColor");
            _ds.display(styleID,"styleID");
            _ds.display(vipBtnImageUrl,"vipBtnImageUrl");
            _ds.display(vipAction,"vipAction");
            _ds.display(priorityBtnImageUrl,"priorityBtnImageUrl");
            _ds.display(priorityAction,"priorityAction");
            _ds.display(isvipBtnImageUrl,"isvipBtnImageUrl");
            _ds.display(isvipAction,"isvipAction");
            _ds.display(bgImageAction,"bgImageAction");
            _ds.display(loopVideoItemDataList,"loopVideoItemDataList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(videoItemData, true);
            _ds.displaySimple(bgImageUrl, true);
            _ds.displaySimple(topMarginRatio, true);
            _ds.displaySimple(heightToWidthRatio, true);
            _ds.displaySimple(textColor, true);
            _ds.displaySimple(bgColor, true);
            _ds.displaySimple(styleID, true);
            _ds.displaySimple(vipBtnImageUrl, true);
            _ds.displaySimple(vipAction, true);
            _ds.displaySimple(priorityBtnImageUrl, true);
            _ds.displaySimple(priorityAction, true);
            _ds.displaySimple(isvipBtnImageUrl, true);
            _ds.displaySimple(isvipAction, true);
            _ds.displaySimple(bgImageAction, true);
            _ds.displaySimple(loopVideoItemDataList, false);
            return _os;
        }
    public:
        jce::VideoItemData videoItemData;
        std::string bgImageUrl;
        taf::Int32 topMarginRatio;
        taf::Int32 heightToWidthRatio;
        std::string textColor;
        std::string bgColor;
        taf::Int32 styleID;
        std::string vipBtnImageUrl;
        jce::Action vipAction;
        std::string priorityBtnImageUrl;
        jce::Action priorityAction;
        std::string isvipBtnImageUrl;
        jce::Action isvipAction;
        jce::Action bgImageAction;
        vector<jce::VideoItemData> loopVideoItemDataList;
    };
    inline bool operator==(const ONAThemePlayer&l, const ONAThemePlayer&r)
    {
        return l.videoItemData == r.videoItemData && l.bgImageUrl == r.bgImageUrl && l.topMarginRatio == r.topMarginRatio && l.heightToWidthRatio == r.heightToWidthRatio && l.textColor == r.textColor && l.bgColor == r.bgColor && l.styleID == r.styleID && l.vipBtnImageUrl == r.vipBtnImageUrl && l.vipAction == r.vipAction && l.priorityBtnImageUrl == r.priorityBtnImageUrl && l.priorityAction == r.priorityAction && l.isvipBtnImageUrl == r.isvipBtnImageUrl && l.isvipAction == r.isvipAction && l.bgImageAction == r.bgImageAction && l.loopVideoItemDataList == r.loopVideoItemDataList;
    }
    inline bool operator!=(const ONAThemePlayer&l, const ONAThemePlayer&r)
    {
        return !(l == r);
    }

    struct ONACompeteScheduleNew : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONACompeteScheduleNew";
        }
        static string MD5()
        {
            return "3b703d2ee17c9fb2d9c3ee37ad3cc989";
        }
        ONACompeteScheduleNew()
        :status(0),leftTeamIconUrl(""),leftTeamTitle(""),rightTeamIconUrl(""),rightTeamTitle(""),infoTitle(""),statusTitle(""),bgStartColor(""),bgEndColor(""),reportKey(""),reportParams(""),topInfoTitle(""),statusBgColor("")
        {
        }
        void resetDefautlt()
        {
            status = 0;
            leftTeamIconUrl = "";
            leftTeamTitle = "";
            rightTeamIconUrl = "";
            rightTeamTitle = "";
            infoTitle = "";
            statusTitle = "";
            bgStartColor = "";
            bgEndColor = "";
            reportKey = "";
            reportParams = "";
            topInfoTitle = "";
            statusBgColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
            _os.write(leftTeamIconUrl, 1);
            _os.write(leftTeamTitle, 2);
            _os.write(rightTeamIconUrl, 3);
            _os.write(rightTeamTitle, 4);
            _os.write(infoTitle, 5);
            _os.write(statusTitle, 6);
            _os.write(action, 7);
            _os.write(bgStartColor, 8);
            _os.write(bgEndColor, 9);
            _os.write(reportKey, 10);
            _os.write(reportParams, 11);
            _os.write(topInfoTitle, 12);
            _os.write(statusBgColor, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
            _is.read(leftTeamIconUrl, 1, true);
            _is.read(leftTeamTitle, 2, true);
            _is.read(rightTeamIconUrl, 3, true);
            _is.read(rightTeamTitle, 4, true);
            _is.read(infoTitle, 5, false);
            _is.read(statusTitle, 6, false);
            _is.read(action, 7, false);
            _is.read(bgStartColor, 8, false);
            _is.read(bgEndColor, 9, false);
            _is.read(reportKey, 10, false);
            _is.read(reportParams, 11, false);
            _is.read(topInfoTitle, 12, false);
            _is.read(statusBgColor, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            _ds.display(leftTeamIconUrl,"leftTeamIconUrl");
            _ds.display(leftTeamTitle,"leftTeamTitle");
            _ds.display(rightTeamIconUrl,"rightTeamIconUrl");
            _ds.display(rightTeamTitle,"rightTeamTitle");
            _ds.display(infoTitle,"infoTitle");
            _ds.display(statusTitle,"statusTitle");
            _ds.display(action,"action");
            _ds.display(bgStartColor,"bgStartColor");
            _ds.display(bgEndColor,"bgEndColor");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(topInfoTitle,"topInfoTitle");
            _ds.display(statusBgColor,"statusBgColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, true);
            _ds.displaySimple(leftTeamIconUrl, true);
            _ds.displaySimple(leftTeamTitle, true);
            _ds.displaySimple(rightTeamIconUrl, true);
            _ds.displaySimple(rightTeamTitle, true);
            _ds.displaySimple(infoTitle, true);
            _ds.displaySimple(statusTitle, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(bgStartColor, true);
            _ds.displaySimple(bgEndColor, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(topInfoTitle, true);
            _ds.displaySimple(statusBgColor, false);
            return _os;
        }
    public:
        taf::Int32 status;
        std::string leftTeamIconUrl;
        std::string leftTeamTitle;
        std::string rightTeamIconUrl;
        std::string rightTeamTitle;
        std::string infoTitle;
        std::string statusTitle;
        jce::Action action;
        std::string bgStartColor;
        std::string bgEndColor;
        std::string reportKey;
        std::string reportParams;
        std::string topInfoTitle;
        std::string statusBgColor;
    };
    inline bool operator==(const ONACompeteScheduleNew&l, const ONACompeteScheduleNew&r)
    {
        return l.status == r.status && l.leftTeamIconUrl == r.leftTeamIconUrl && l.leftTeamTitle == r.leftTeamTitle && l.rightTeamIconUrl == r.rightTeamIconUrl && l.rightTeamTitle == r.rightTeamTitle && l.infoTitle == r.infoTitle && l.statusTitle == r.statusTitle && l.action == r.action && l.bgStartColor == r.bgStartColor && l.bgEndColor == r.bgEndColor && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.topInfoTitle == r.topInfoTitle && l.statusBgColor == r.statusBgColor;
    }
    inline bool operator!=(const ONACompeteScheduleNew&l, const ONACompeteScheduleNew&r)
    {
        return !(l == r);
    }

    struct ONAHorizontalList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAHorizontalList";
        }
        static string MD5()
        {
            return "cf165438434233010ac54e1818320f94";
        }
        ONAHorizontalList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiDatas, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiDatas, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiDatas,"uiDatas");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiDatas, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::TempletLine> uiDatas;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAHorizontalList&l, const ONAHorizontalList&r)
    {
        return l.uiDatas == r.uiDatas && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAHorizontalList&l, const ONAHorizontalList&r)
    {
        return !(l == r);
    }

    struct ONAButtonGroup : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAButtonGroup";
        }
        static string MD5()
        {
            return "8f61a8dd9e913921bcac99393ba34163";
        }
        ONAButtonGroup()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(buttons, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(buttons, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(buttons,"buttons");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(buttons, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::ActionBarInfo> buttons;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAButtonGroup&l, const ONAButtonGroup&r)
    {
        return l.buttons == r.buttons && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAButtonGroup&l, const ONAButtonGroup&r)
    {
        return !(l == r);
    }

    struct ONAGroupSwitch : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAGroupSwitch";
        }
        static string MD5()
        {
            return "e619b5ab9e4e7db20efdada2e2b7a475";
        }
        ONAGroupSwitch()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(groupSwitchList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(groupSwitchList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(groupSwitchList,"groupSwitchList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(groupSwitchList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::GroupSwitchItem> groupSwitchList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAGroupSwitch&l, const ONAGroupSwitch&r)
    {
        return l.groupSwitchList == r.groupSwitchList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAGroupSwitch&l, const ONAGroupSwitch&r)
    {
        return !(l == r);
    }

    struct ONAMatchScheduleNew : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAMatchScheduleNew";
        }
        static string MD5()
        {
            return "d107221cbb6089c966465855b495e661";
        }
        ONAMatchScheduleNew()
        :status(0),matchIcon(""),firstText(""),secondText(""),statusTitle(""),bgStartColor(""),bgEndColor(""),reportKey(""),reportParams(""),statusBgColor("")
        {
        }
        void resetDefautlt()
        {
            status = 0;
            matchIcon = "";
            firstText = "";
            secondText = "";
            statusTitle = "";
            bgStartColor = "";
            bgEndColor = "";
            reportKey = "";
            reportParams = "";
            statusBgColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
            _os.write(matchIcon, 1);
            _os.write(firstText, 2);
            _os.write(secondText, 3);
            _os.write(statusTitle, 4);
            _os.write(action, 5);
            _os.write(bgStartColor, 6);
            _os.write(bgEndColor, 7);
            _os.write(reportKey, 8);
            _os.write(reportParams, 9);
            _os.write(statusBgColor, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
            _is.read(matchIcon, 1, false);
            _is.read(firstText, 2, false);
            _is.read(secondText, 3, false);
            _is.read(statusTitle, 4, false);
            _is.read(action, 5, false);
            _is.read(bgStartColor, 6, false);
            _is.read(bgEndColor, 7, false);
            _is.read(reportKey, 8, false);
            _is.read(reportParams, 9, false);
            _is.read(statusBgColor, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            _ds.display(matchIcon,"matchIcon");
            _ds.display(firstText,"firstText");
            _ds.display(secondText,"secondText");
            _ds.display(statusTitle,"statusTitle");
            _ds.display(action,"action");
            _ds.display(bgStartColor,"bgStartColor");
            _ds.display(bgEndColor,"bgEndColor");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(statusBgColor,"statusBgColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, true);
            _ds.displaySimple(matchIcon, true);
            _ds.displaySimple(firstText, true);
            _ds.displaySimple(secondText, true);
            _ds.displaySimple(statusTitle, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(bgStartColor, true);
            _ds.displaySimple(bgEndColor, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(statusBgColor, false);
            return _os;
        }
    public:
        taf::Int32 status;
        std::string matchIcon;
        std::string firstText;
        std::string secondText;
        std::string statusTitle;
        jce::Action action;
        std::string bgStartColor;
        std::string bgEndColor;
        std::string reportKey;
        std::string reportParams;
        std::string statusBgColor;
    };
    inline bool operator==(const ONAMatchScheduleNew&l, const ONAMatchScheduleNew&r)
    {
        return l.status == r.status && l.matchIcon == r.matchIcon && l.firstText == r.firstText && l.secondText == r.secondText && l.statusTitle == r.statusTitle && l.action == r.action && l.bgStartColor == r.bgStartColor && l.bgEndColor == r.bgEndColor && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.statusBgColor == r.statusBgColor;
    }
    inline bool operator!=(const ONAMatchScheduleNew&l, const ONAMatchScheduleNew&r)
    {
        return !(l == r);
    }

    struct ONALabelList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONALabelList";
        }
        static string MD5()
        {
            return "d99ec0982ce1428c7ec3055491669ea9";
        }
        ONALabelList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tags, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tags, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tags,"tags");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tags, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::IconTagText> tags;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONALabelList&l, const ONALabelList&r)
    {
        return l.tags == r.tags && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONALabelList&l, const ONALabelList&r)
    {
        return !(l == r);
    }

    struct ONABoldStyleEnterTip : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONABoldStyleEnterTip";
        }
        static string MD5()
        {
            return "2fdf6963991f1b032af61477fe72caf0";
        }
        ONABoldStyleEnterTip()
        :title(""),subTitle(""),imageUrl(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            subTitle = "";
            imageUrl = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(subTitle, 1);
            _os.write(imageUrl, 2);
            _os.write(action, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(subTitle, 1, false);
            _is.read(imageUrl, 2, false);
            _is.read(action, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string title;
        std::string subTitle;
        std::string imageUrl;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONABoldStyleEnterTip&l, const ONABoldStyleEnterTip&r)
    {
        return l.title == r.title && l.subTitle == r.subTitle && l.imageUrl == r.imageUrl && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONABoldStyleEnterTip&l, const ONABoldStyleEnterTip&r)
    {
        return !(l == r);
    }

    struct ONASimpleFeed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASimpleFeed";
        }
        static string MD5()
        {
            return "c92d653b39e8f45f49d78f1ef868a887";
        }
        ONASimpleFeed()
        :title(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(iconImgUrls, 1);
            _os.write(action, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(iconImgUrls, 1, false);
            _is.read(action, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(iconImgUrls,"iconImgUrls");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(iconImgUrls, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string title;
        vector<std::string> iconImgUrls;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONASimpleFeed&l, const ONASimpleFeed&r)
    {
        return l.title == r.title && l.iconImgUrls == r.iconImgUrls && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONASimpleFeed&l, const ONASimpleFeed&r)
    {
        return !(l == r);
    }

    struct ONAOptionalText : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAOptionalText";
        }
        static string MD5()
        {
            return "ad336659bc9529492f9e00ecc02bccf0";
        }
        ONAOptionalText()
        :title(""),curIndex(0),reportKey(""),reportParams(""),curDataKey("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            curIndex = 0;
            reportKey = "";
            reportParams = "";
            curDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(curIndex, 1);
            _os.write(optionalList, 2);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
            _os.write(curDataKey, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(curIndex, 1, false);
            _is.read(optionalList, 2, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
            _is.read(curDataKey, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(curIndex,"curIndex");
            _ds.display(optionalList,"optionalList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(curDataKey,"curDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(curIndex, true);
            _ds.displaySimple(optionalList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(curDataKey, false);
            return _os;
        }
    public:
        std::string title;
        taf::Int32 curIndex;
        vector<jce::OptionalItem> optionalList;
        std::string reportKey;
        std::string reportParams;
        std::string curDataKey;
    };
    inline bool operator==(const ONAOptionalText&l, const ONAOptionalText&r)
    {
        return l.title == r.title && l.curIndex == r.curIndex && l.optionalList == r.optionalList && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.curDataKey == r.curDataKey;
    }
    inline bool operator!=(const ONAOptionalText&l, const ONAOptionalText&r)
    {
        return !(l == r);
    }

    struct ONAPrimaryFeed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAPrimaryFeed";
        }
        static string MD5()
        {
            return "dc54d21b99c0d92b34c6787e77f27a49";
        }
        ONAPrimaryFeed()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedInfo, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedInfo,"feedInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedInfo, false);
            return _os;
        }
    public:
        jce::CirclePrimaryFeed feedInfo;
    };
    inline bool operator==(const ONAPrimaryFeed&l, const ONAPrimaryFeed&r)
    {
        return l.feedInfo == r.feedInfo;
    }
    inline bool operator!=(const ONAPrimaryFeed&l, const ONAPrimaryFeed&r)
    {
        return !(l == r);
    }

    struct ONAQAPrimaryFeed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAQAPrimaryFeed";
        }
        static string MD5()
        {
            return "e56fc781188495e91ee6ae7878641b4f";
        }
        ONAQAPrimaryFeed()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(qaFeedInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(qaFeedInfo, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(qaFeedInfo,"qaFeedInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(qaFeedInfo, false);
            return _os;
        }
    public:
        jce::QAPrimaryFeed qaFeedInfo;
    };
    inline bool operator==(const ONAQAPrimaryFeed&l, const ONAQAPrimaryFeed&r)
    {
        return l.qaFeedInfo == r.qaFeedInfo;
    }
    inline bool operator!=(const ONAQAPrimaryFeed&l, const ONAQAPrimaryFeed&r)
    {
        return !(l == r);
    }

    struct ONAWeeklyShowPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAWeeklyShowPoster";
        }
        static string MD5()
        {
            return "30d7d57a3fab3b171093ce3a36e6b22e";
        }
        ONAWeeklyShowPoster()
        :currentDataKey(""),reportParams(""),reportKey(""),uiStyle(0)
        {
        }
        void resetDefautlt()
        {
            currentDataKey = "";
            reportParams = "";
            reportKey = "";
            uiStyle = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(currentDataKey, 0);
            _os.write(tvshowList, 1);
            _os.write(currentPosterList, 2);
            _os.write(reportParams, 3);
            _os.write(reportKey, 4);
            _os.write(uiStyle, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(currentDataKey, 0, true);
            _is.read(tvshowList, 1, false);
            _is.read(currentPosterList, 2, false);
            _is.read(reportParams, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(uiStyle, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(currentDataKey,"currentDataKey");
            _ds.display(tvshowList,"tvshowList");
            _ds.display(currentPosterList,"currentPosterList");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(uiStyle,"uiStyle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(currentDataKey, true);
            _ds.displaySimple(tvshowList, true);
            _ds.displaySimple(currentPosterList, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(uiStyle, false);
            return _os;
        }
    public:
        std::string currentDataKey;
        vector<jce::TVShowWeeklyList> tvshowList;
        vector<jce::AttentPoster> currentPosterList;
        std::string reportParams;
        std::string reportKey;
        taf::Int32 uiStyle;
    };
    inline bool operator==(const ONAWeeklyShowPoster&l, const ONAWeeklyShowPoster&r)
    {
        return l.currentDataKey == r.currentDataKey && l.tvshowList == r.tvshowList && l.currentPosterList == r.currentPosterList && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.uiStyle == r.uiStyle;
    }
    inline bool operator!=(const ONAWeeklyShowPoster&l, const ONAWeeklyShowPoster&r)
    {
        return !(l == r);
    }

    struct ONAThemeMultiPlayer : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAThemeMultiPlayer";
        }
        static string MD5()
        {
            return "37e23348befcfc4bd3aaab4ffd7a6126";
        }
        ONAThemeMultiPlayer()
        :bgImageUrl(""),topMarginRatio(0),heightToWidthRatio(100),bgColor(""),titleColor("")
        {
        }
        void resetDefautlt()
        {
            bgImageUrl = "";
            topMarginRatio = 0;
            heightToWidthRatio = 100;
            bgColor = "";
            titleColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(videoListPlayer, 0);
            _os.write(bgImageUrl, 1);
            _os.write(topMarginRatio, 2);
            _os.write(heightToWidthRatio, 3);
            _os.write(action, 4);
            _os.write(bgColor, 5);
            _os.write(titleColor, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(videoListPlayer, 0, true);
            _is.read(bgImageUrl, 1, false);
            _is.read(topMarginRatio, 2, false);
            _is.read(heightToWidthRatio, 3, false);
            _is.read(action, 4, false);
            _is.read(bgColor, 5, false);
            _is.read(titleColor, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(videoListPlayer,"videoListPlayer");
            _ds.display(bgImageUrl,"bgImageUrl");
            _ds.display(topMarginRatio,"topMarginRatio");
            _ds.display(heightToWidthRatio,"heightToWidthRatio");
            _ds.display(action,"action");
            _ds.display(bgColor,"bgColor");
            _ds.display(titleColor,"titleColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(videoListPlayer, true);
            _ds.displaySimple(bgImageUrl, true);
            _ds.displaySimple(topMarginRatio, true);
            _ds.displaySimple(heightToWidthRatio, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(bgColor, true);
            _ds.displaySimple(titleColor, false);
            return _os;
        }
    public:
        jce::ONAVideoListPlayer videoListPlayer;
        std::string bgImageUrl;
        taf::Int32 topMarginRatio;
        taf::Int32 heightToWidthRatio;
        jce::Action action;
        std::string bgColor;
        std::string titleColor;
    };
    inline bool operator==(const ONAThemeMultiPlayer&l, const ONAThemeMultiPlayer&r)
    {
        return l.videoListPlayer == r.videoListPlayer && l.bgImageUrl == r.bgImageUrl && l.topMarginRatio == r.topMarginRatio && l.heightToWidthRatio == r.heightToWidthRatio && l.action == r.action && l.bgColor == r.bgColor && l.titleColor == r.titleColor;
    }
    inline bool operator!=(const ONAThemeMultiPlayer&l, const ONAThemeMultiPlayer&r)
    {
        return !(l == r);
    }

    struct ONASimpleAttentPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASimpleAttentPoster";
        }
        static string MD5()
        {
            return "e732c44d36fa0b51f4cf1178e8f41682";
        }
        ONASimpleAttentPoster()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::AttentPoster poster;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONASimpleAttentPoster&l, const ONASimpleAttentPoster&r)
    {
        return l.poster == r.poster && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONASimpleAttentPoster&l, const ONASimpleAttentPoster&r)
    {
        return !(l == r);
    }

    struct ONADokiCommonItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiCommonItem";
        }
        static string MD5()
        {
            return "f8cced161e47d964c005268f604d81d6";
        }
        ONADokiCommonItem()
        :reportKey(""),reportParams(""),uiType(0)
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actorInfo, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
            _os.write(uiType, 3);
            _os.write(rightActionButton, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actorInfo, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
            _is.read(uiType, 3, false);
            _is.read(rightActionButton, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actorInfo,"actorInfo");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(uiType,"uiType");
            _ds.display(rightActionButton,"rightActionButton");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actorInfo, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(rightActionButton, false);
            return _os;
        }
    public:
        jce::ActorInfo actorInfo;
        std::string reportKey;
        std::string reportParams;
        taf::Int32 uiType;
        jce::ActionBarInfo rightActionButton;
    };
    inline bool operator==(const ONADokiCommonItem&l, const ONADokiCommonItem&r)
    {
        return l.actorInfo == r.actorInfo && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.uiType == r.uiType && l.rightActionButton == r.rightActionButton;
    }
    inline bool operator!=(const ONADokiCommonItem&l, const ONADokiCommonItem&r)
    {
        return !(l == r);
    }

    struct ONAEmptyPlaceholder : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAEmptyPlaceholder";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        ONAEmptyPlaceholder()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        taf::Int32 type;
    };
    inline bool operator==(const ONAEmptyPlaceholder&l, const ONAEmptyPlaceholder&r)
    {
        return l.type == r.type;
    }
    inline bool operator!=(const ONAEmptyPlaceholder&l, const ONAEmptyPlaceholder&r)
    {
        return !(l == r);
    }

    struct ONAWillReleaseVertical : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAWillReleaseVertical";
        }
        static string MD5()
        {
            return "1ad49cbf60b4ac541cf6be5c655d8c5a";
        }
        ONAWillReleaseVertical()
        :reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(willReleasePosterList, 0);
            _os.write(reportParams, 1);
            _os.write(reportKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(willReleasePosterList, 0, true);
            _is.read(reportParams, 1, false);
            _is.read(reportKey, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(willReleasePosterList,"willReleasePosterList");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(willReleasePosterList, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        vector<jce::WillReleasePoster> willReleasePosterList;
        std::string reportParams;
        std::string reportKey;
    };
    inline bool operator==(const ONAWillReleaseVertical&l, const ONAWillReleaseVertical&r)
    {
        return l.willReleasePosterList == r.willReleasePosterList && l.reportParams == r.reportParams && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const ONAWillReleaseVertical&l, const ONAWillReleaseVertical&r)
    {
        return !(l == r);
    }

    struct ONAWillReleaseHorizontal : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAWillReleaseHorizontal";
        }
        static string MD5()
        {
            return "1ad49cbf60b4ac541cf6be5c655d8c5a";
        }
        ONAWillReleaseHorizontal()
        :reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(willReleasePosterList, 0);
            _os.write(reportParams, 1);
            _os.write(reportKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(willReleasePosterList, 0, true);
            _is.read(reportParams, 1, false);
            _is.read(reportKey, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(willReleasePosterList,"willReleasePosterList");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(willReleasePosterList, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        vector<jce::WillReleasePoster> willReleasePosterList;
        std::string reportParams;
        std::string reportKey;
    };
    inline bool operator==(const ONAWillReleaseHorizontal&l, const ONAWillReleaseHorizontal&r)
    {
        return l.willReleasePosterList == r.willReleasePosterList && l.reportParams == r.reportParams && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const ONAWillReleaseHorizontal&l, const ONAWillReleaseHorizontal&r)
    {
        return !(l == r);
    }

    struct ONAEnterTipV2 : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAEnterTipV2";
        }
        static string MD5()
        {
            return "9c54cd9e006d8a1c9bdce0b7303a8fd0";
        }
        ONAEnterTipV2()
        :tipKey("")
        {
        }
        void resetDefautlt()
        {
            tipKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemList, 0);
            _os.write(tipKey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(itemList, 0, true);
            _is.read(tipKey, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemList,"itemList");
            _ds.display(tipKey,"tipKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(tipKey, false);
            return _os;
        }
    public:
        vector<jce::EnterTipItem> itemList;
        std::string tipKey;
    };
    inline bool operator==(const ONAEnterTipV2&l, const ONAEnterTipV2&r)
    {
        return l.itemList == r.itemList && l.tipKey == r.tipKey;
    }
    inline bool operator!=(const ONAEnterTipV2&l, const ONAEnterTipV2&r)
    {
        return !(l == r);
    }

    struct ONACirclePosterList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONACirclePosterList";
        }
        static string MD5()
        {
            return "e3d1ee7c2513a7c8b11526637661401c";
        }
        ONACirclePosterList()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemList, 0);
            _os.write(report, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(itemList, 0, true);
            _is.read(report, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemList,"itemList");
            _ds.display(report,"report");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(report, false);
            return _os;
        }
    public:
        vector<jce::SimplePoster> itemList;
        jce::ExtraReportKV report;
    };
    inline bool operator==(const ONACirclePosterList&l, const ONACirclePosterList&r)
    {
        return l.itemList == r.itemList && l.report == r.report;
    }
    inline bool operator!=(const ONACirclePosterList&l, const ONACirclePosterList&r)
    {
        return !(l == r);
    }

    struct ONASearchFilterList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASearchFilterList";
        }
        static string MD5()
        {
            return "6b12ee0c6557de1681e3b5a1c54a0c4a";
        }
        ONASearchFilterList()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemList, 0);
            _os.write(report, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(itemList, 0, true);
            _is.read(report, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemList,"itemList");
            _ds.display(report,"report");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(report, false);
            return _os;
        }
    public:
        vector<jce::SearchFilterItem> itemList;
        jce::ExtraReportKV report;
    };
    inline bool operator==(const ONASearchFilterList&l, const ONASearchFilterList&r)
    {
        return l.itemList == r.itemList && l.report == r.report;
    }
    inline bool operator!=(const ONASearchFilterList&l, const ONASearchFilterList&r)
    {
        return !(l == r);
    }

    struct ONARecommendBanner : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONARecommendBanner";
        }
        static string MD5()
        {
            return "79ee0440b4c35477fe839e478a9a0758";
        }
        ONARecommendBanner()
        :adPlaceholder(false)
        {
        }
        void resetDefautlt()
        {
            adPlaceholder = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemList, 0);
            _os.write(report, 1);
            _os.write(adPlaceholder, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(itemList, 0, true);
            _is.read(report, 1, false);
            _is.read(adPlaceholder, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemList,"itemList");
            _ds.display(report,"report");
            _ds.display(adPlaceholder,"adPlaceholder");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(report, true);
            _ds.displaySimple(adPlaceholder, false);
            return _os;
        }
    public:
        vector<jce::RecommendItem> itemList;
        jce::ExtraReportKV report;
        taf::Bool adPlaceholder;
    };
    inline bool operator==(const ONARecommendBanner&l, const ONARecommendBanner&r)
    {
        return l.itemList == r.itemList && l.report == r.report && l.adPlaceholder == r.adPlaceholder;
    }
    inline bool operator!=(const ONARecommendBanner&l, const ONARecommendBanner&r)
    {
        return !(l == r);
    }

    struct ONARecommendList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONARecommendList";
        }
        static string MD5()
        {
            return "c896c469195cca24c25399d8691eaa3f";
        }
        ONARecommendList()
        :linesPerColumn(3)
        {
        }
        void resetDefautlt()
        {
            linesPerColumn = 3;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemList, 0);
            _os.write(linesPerColumn, 1);
            _os.write(report, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(itemList, 0, true);
            _is.read(linesPerColumn, 1, true);
            _is.read(report, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemList,"itemList");
            _ds.display(linesPerColumn,"linesPerColumn");
            _ds.display(report,"report");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(linesPerColumn, true);
            _ds.displaySimple(report, false);
            return _os;
        }
    public:
        vector<jce::RecommendItem> itemList;
        taf::Int32 linesPerColumn;
        jce::ExtraReportKV report;
    };
    inline bool operator==(const ONARecommendList&l, const ONARecommendList&r)
    {
        return l.itemList == r.itemList && l.linesPerColumn == r.linesPerColumn && l.report == r.report;
    }
    inline bool operator!=(const ONARecommendList&l, const ONARecommendList&r)
    {
        return !(l == r);
    }

    struct SearchSubjectBannerItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SearchSubjectBannerItem";
        }
        static string MD5()
        {
            return "422d4eac00f9ebc4f74d5d66c9f6d08e";
        }
        SearchSubjectBannerItem()
        :url(""),height(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            url = "";
            height = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(url, 0);
            _os.write(action, 1);
            _os.write(height, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(url, 0, true);
            _is.read(action, 1, true);
            _is.read(height, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(url,"url");
            _ds.display(action,"action");
            _ds.display(height,"height");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(url, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(height, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string url;
        jce::Action action;
        taf::Int32 height;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const SearchSubjectBannerItem&l, const SearchSubjectBannerItem&r)
    {
        return l.url == r.url && l.action == r.action && l.height == r.height && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const SearchSubjectBannerItem&l, const SearchSubjectBannerItem&r)
    {
        return !(l == r);
    }

    struct ONASearchSubjectBannerList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASearchSubjectBannerList";
        }
        static string MD5()
        {
            return "1f68f4cb7fab78327100c65fa52fe000";
        }
        ONASearchSubjectBannerList()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(itemList, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemList,"itemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemList, false);
            return _os;
        }
    public:
        vector<jce::SearchSubjectBannerItem> itemList;
    };
    inline bool operator==(const ONASearchSubjectBannerList&l, const ONASearchSubjectBannerList&r)
    {
        return l.itemList == r.itemList;
    }
    inline bool operator!=(const ONASearchSubjectBannerList&l, const ONASearchSubjectBannerList&r)
    {
        return !(l == r);
    }

    struct ONASearchSubjectItemList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASearchSubjectItemList";
        }
        static string MD5()
        {
            return "9dee6726643d31968d5796f293510723";
        }
        ONASearchSubjectItemList()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(recommendList, 0);
            _os.write(report, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(recommendList, 0, true);
            _is.read(report, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(recommendList,"recommendList");
            _ds.display(report,"report");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(recommendList, true);
            _ds.displaySimple(report, false);
            return _os;
        }
    public:
        vector<jce::RecommendItem> recommendList;
        jce::ExtraReportKV report;
    };
    inline bool operator==(const ONASearchSubjectItemList&l, const ONASearchSubjectItemList&r)
    {
        return l.recommendList == r.recommendList && l.report == r.report;
    }
    inline bool operator!=(const ONASearchSubjectItemList&l, const ONASearchSubjectItemList&r)
    {
        return !(l == r);
    }

    struct ONATopicHead : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONATopicHead";
        }
        static string MD5()
        {
            return "e76b891554306cd38378f6e3d2c98d82";
        }
        ONATopicHead()
        :reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(topicInfo, 0);
            _os.write(reportParams, 1);
            _os.write(reportKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(topicInfo, 0, true);
            _is.read(reportParams, 1, false);
            _is.read(reportKey, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(topicInfo,"topicInfo");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(topicInfo, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        jce::TopicHead topicInfo;
        std::string reportParams;
        std::string reportKey;
    };
    inline bool operator==(const ONATopicHead&l, const ONATopicHead&r)
    {
        return l.topicInfo == r.topicInfo && l.reportParams == r.reportParams && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const ONATopicHead&l, const ONATopicHead&r)
    {
        return !(l == r);
    }

    struct ONASelfVideoFeed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASelfVideoFeed";
        }
        static string MD5()
        {
            return "31e0794ff16fbc2db9d013a6be2d34cb";
        }
        ONASelfVideoFeed()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedInfo, 0);
            _os.write(markLabelList, 1);
            _os.write(report, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedInfo, 0, true);
            _is.read(markLabelList, 1, false);
            _is.read(report, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedInfo,"feedInfo");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(report,"report");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedInfo, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(report, false);
            return _os;
        }
    public:
        jce::CirclePrimaryFeed feedInfo;
        vector<jce::MarkLabel> markLabelList;
        jce::ExtraReportKV report;
    };
    inline bool operator==(const ONASelfVideoFeed&l, const ONASelfVideoFeed&r)
    {
        return l.feedInfo == r.feedInfo && l.markLabelList == r.markLabelList && l.report == r.report;
    }
    inline bool operator!=(const ONASelfVideoFeed&l, const ONASelfVideoFeed&r)
    {
        return !(l == r);
    }

    struct ONASelfVideoFeedList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASelfVideoFeedList";
        }
        static string MD5()
        {
            return "32310c73586f5550a466cd608a764d26";
        }
        ONASelfVideoFeedList()
        :reportKey(""),reportParams(""),reportEventId(""),uiStyle(0),totalNum(0)
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
            reportEventId = "";
            uiStyle = 0;
            totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
            _os.write(reportEventId, 3);
            _os.write(uiStyle, 4);
            _os.write(totalNum, 5);
            _os.write(groupPageAction, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
            _is.read(reportEventId, 3, false);
            _is.read(uiStyle, 4, false);
            _is.read(totalNum, 5, false);
            _is.read(groupPageAction, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedList,"feedList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportEventId,"reportEventId");
            _ds.display(uiStyle,"uiStyle");
            _ds.display(totalNum,"totalNum");
            _ds.display(groupPageAction,"groupPageAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportEventId, true);
            _ds.displaySimple(uiStyle, true);
            _ds.displaySimple(totalNum, true);
            _ds.displaySimple(groupPageAction, false);
            return _os;
        }
    public:
        vector<jce::ONASelfVideoFeed> feedList;
        std::string reportKey;
        std::string reportParams;
        std::string reportEventId;
        taf::Int32 uiStyle;
        taf::Int32 totalNum;
        jce::Action groupPageAction;
    };
    inline bool operator==(const ONASelfVideoFeedList&l, const ONASelfVideoFeedList&r)
    {
        return l.feedList == r.feedList && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.reportEventId == r.reportEventId && l.uiStyle == r.uiStyle && l.totalNum == r.totalNum && l.groupPageAction == r.groupPageAction;
    }
    inline bool operator!=(const ONASelfVideoFeedList&l, const ONASelfVideoFeedList&r)
    {
        return !(l == r);
    }

    struct ONAVideoTopicCardList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAVideoTopicCardList";
        }
        static string MD5()
        {
            return "b5927b0bb7c784b3f80f21943b8f92b1";
        }
        ONAVideoTopicCardList()
        :sceneType(0),reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            sceneType = 0;
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sceneType, 0);
            _os.write(cardList, 1);
            _os.write(reportParams, 2);
            _os.write(reportKey, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sceneType, 0, false);
            _is.read(cardList, 1, false);
            _is.read(reportParams, 2, false);
            _is.read(reportKey, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sceneType,"sceneType");
            _ds.display(cardList,"cardList");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sceneType, true);
            _ds.displaySimple(cardList, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        taf::Int32 sceneType;
        vector<jce::VideoTopicCard> cardList;
        std::string reportParams;
        std::string reportKey;
    };
    inline bool operator==(const ONAVideoTopicCardList&l, const ONAVideoTopicCardList&r)
    {
        return l.sceneType == r.sceneType && l.cardList == r.cardList && l.reportParams == r.reportParams && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const ONAVideoTopicCardList&l, const ONAVideoTopicCardList&r)
    {
        return !(l == r);
    }

    struct ONASmallVideoItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASmallVideoItem";
        }
        static string MD5()
        {
            return "262dc96c0f671c473e78719d51b59380";
        }
        ONASmallVideoItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, false);
            return _os;
        }
    public:
        jce::Poster poster;
    };
    inline bool operator==(const ONASmallVideoItem&l, const ONASmallVideoItem&r)
    {
        return l.poster == r.poster;
    }
    inline bool operator!=(const ONASmallVideoItem&l, const ONASmallVideoItem&r)
    {
        return !(l == r);
    }

    struct ONASmallVideoList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASmallVideoList";
        }
        static string MD5()
        {
            return "5132deb5fcff1bd386700bbc66544cd6";
        }
        ONASmallVideoList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(videoList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(videoList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(videoList,"videoList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(videoList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::ONASmallVideoItem> videoList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONASmallVideoList&l, const ONASmallVideoList&r)
    {
        return l.videoList == r.videoList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONASmallVideoList&l, const ONASmallVideoList&r)
    {
        return !(l == r);
    }

    struct ONARssVerticalVideo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONARssVerticalVideo";
        }
        static string MD5()
        {
            return "75cee0b0b207413a28a48cbbf56b5f18";
        }
        ONARssVerticalVideo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(verticalVideo, 0);
            _os.write(markLabelList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(verticalVideo, 0, true);
            _is.read(markLabelList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(verticalVideo,"verticalVideo");
            _ds.display(markLabelList,"markLabelList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(verticalVideo, true);
            _ds.displaySimple(markLabelList, false);
            return _os;
        }
    public:
        jce::ONABulletinBoardV2 verticalVideo;
        vector<jce::MarkLabel> markLabelList;
    };
    inline bool operator==(const ONARssVerticalVideo&l, const ONARssVerticalVideo&r)
    {
        return l.verticalVideo == r.verticalVideo && l.markLabelList == r.markLabelList;
    }
    inline bool operator!=(const ONARssVerticalVideo&l, const ONARssVerticalVideo&r)
    {
        return !(l == r);
    }

    struct ONARssVerticalVideoList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONARssVerticalVideoList";
        }
        static string MD5()
        {
            return "c22e7051c3fb98f19d6ed212fadc785c";
        }
        ONARssVerticalVideoList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(videoList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(videoList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(videoList,"videoList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(videoList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::ONARssVerticalVideo> videoList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONARssVerticalVideoList&l, const ONARssVerticalVideoList&r)
    {
        return l.videoList == r.videoList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONARssVerticalVideoList&l, const ONARssVerticalVideoList&r)
    {
        return !(l == r);
    }

    struct ONAImmersionVideoList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAImmersionVideoList";
        }
        static string MD5()
        {
            return "2982b4fc8738085827e7d78af08c9059";
        }
        ONAImmersionVideoList()
        :dataKey(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(videoList, 0);
            _os.write(dataKey, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(videoList, 0, true);
            _is.read(dataKey, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(videoList,"videoList");
            _ds.display(dataKey,"dataKey");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(videoList, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::ONABulletinBoardV2> videoList;
        std::string dataKey;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAImmersionVideoList&l, const ONAImmersionVideoList&r)
    {
        return l.videoList == r.videoList && l.dataKey == r.dataKey && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAImmersionVideoList&l, const ONAImmersionVideoList&r)
    {
        return !(l == r);
    }

    struct ONASpokesPersonRecommend : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASpokesPersonRecommend";
        }
        static string MD5()
        {
            return "a75c27a7c476450cb5a8bf611d066958";
        }
        ONASpokesPersonRecommend()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(spokesPersonList, 0);
            _os.write(posterTitle, 1);
            _os.write(changeButton, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(spokesPersonList, 0, true);
            _is.read(posterTitle, 1, true);
            _is.read(changeButton, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(spokesPersonList,"spokesPersonList");
            _ds.display(posterTitle,"posterTitle");
            _ds.display(changeButton,"changeButton");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(spokesPersonList, true);
            _ds.displaySimple(posterTitle, true);
            _ds.displaySimple(changeButton, false);
            return _os;
        }
    public:
        vector<jce::SpokesPersonRecommend> spokesPersonList;
        vector<jce::ONAPosterTitle> posterTitle;
        jce::ActionBarInfo changeButton;
    };
    inline bool operator==(const ONASpokesPersonRecommend&l, const ONASpokesPersonRecommend&r)
    {
        return l.spokesPersonList == r.spokesPersonList && l.posterTitle == r.posterTitle && l.changeButton == r.changeButton;
    }
    inline bool operator!=(const ONASpokesPersonRecommend&l, const ONASpokesPersonRecommend&r)
    {
        return !(l == r);
    }

    struct ONAVIPLevelEntry : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAVIPLevelEntry";
        }
        static string MD5()
        {
            return "4b3264e809f26278cd46d1501f1ff69a";
        }
        ONAVIPLevelEntry()
        :bgImageUrl("")
        {
        }
        void resetDefautlt()
        {
            bgImageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(VIPlevelEntrys, 0);
            _os.write(bgImageUrl, 1);
            _os.write(posterTitle, 2);
            _os.write(reportInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(VIPlevelEntrys, 0, true);
            _is.read(bgImageUrl, 1, false);
            _is.read(posterTitle, 2, false);
            _is.read(reportInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(VIPlevelEntrys,"VIPlevelEntrys");
            _ds.display(bgImageUrl,"bgImageUrl");
            _ds.display(posterTitle,"posterTitle");
            _ds.display(reportInfo,"reportInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(VIPlevelEntrys, true);
            _ds.displaySimple(bgImageUrl, true);
            _ds.displaySimple(posterTitle, true);
            _ds.displaySimple(reportInfo, false);
            return _os;
        }
    public:
        vector<jce::VIPLevelEntry> VIPlevelEntrys;
        std::string bgImageUrl;
        jce::ONAPosterTitle posterTitle;
        jce::ExtraReportKV reportInfo;
    };
    inline bool operator==(const ONAVIPLevelEntry&l, const ONAVIPLevelEntry&r)
    {
        return l.VIPlevelEntrys == r.VIPlevelEntrys && l.bgImageUrl == r.bgImageUrl && l.posterTitle == r.posterTitle && l.reportInfo == r.reportInfo;
    }
    inline bool operator!=(const ONAVIPLevelEntry&l, const ONAVIPLevelEntry&r)
    {
        return !(l == r);
    }

    struct ONATopicCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONATopicCard";
        }
        static string MD5()
        {
            return "ac1c1082bb10117766374f6763984cfd";
        }
        ONATopicCard()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commonCard, 0);
            _os.write(videoCard, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commonCard, 0, false);
            _is.read(videoCard, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commonCard,"commonCard");
            _ds.display(videoCard,"videoCard");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commonCard, true);
            _ds.displaySimple(videoCard, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::CommonTopicCard commonCard;
        jce::VideoTopicCard videoCard;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONATopicCard&l, const ONATopicCard&r)
    {
        return l.commonCard == r.commonCard && l.videoCard == r.videoCard && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONATopicCard&l, const ONATopicCard&r)
    {
        return !(l == r);
    }

    struct ONATopicCardList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONATopicCardList";
        }
        static string MD5()
        {
            return "06d0f27d976772a4e75537c7332a2b85";
        }
        ONATopicCardList()
        :reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cardList, 0);
            _os.write(reportParams, 1);
            _os.write(reportKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cardList, 0, false);
            _is.read(reportParams, 1, false);
            _is.read(reportKey, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cardList,"cardList");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cardList, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        vector<jce::ONATopicCard> cardList;
        std::string reportParams;
        std::string reportKey;
    };
    inline bool operator==(const ONATopicCardList&l, const ONATopicCardList&r)
    {
        return l.cardList == r.cardList && l.reportParams == r.reportParams && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const ONATopicCardList&l, const ONATopicCardList&r)
    {
        return !(l == r);
    }

    struct ONASearchDokiFeed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASearchDokiFeed";
        }
        static string MD5()
        {
            return "722bd0d07785ee0313538c087e89f21b";
        }
        ONASearchDokiFeed()
        :title(""),time(0)
        {
        }
        void resetDefautlt()
        {
            title = "";
            time = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(tagTexts, 1);
            _os.write(imageUrls, 2);
            _os.write(videoPoster, 3);
            _os.write(action, 4);
            _os.write(report, 5);
            _os.write(time, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(tagTexts, 1, false);
            _is.read(imageUrls, 2, false);
            _is.read(videoPoster, 3, false);
            _is.read(action, 4, false);
            _is.read(report, 5, false);
            _is.read(time, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(tagTexts,"tagTexts");
            _ds.display(imageUrls,"imageUrls");
            _ds.display(videoPoster,"videoPoster");
            _ds.display(action,"action");
            _ds.display(report,"report");
            _ds.display(time,"time");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(tagTexts, true);
            _ds.displaySimple(imageUrls, true);
            _ds.displaySimple(videoPoster, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(report, true);
            _ds.displaySimple(time, false);
            return _os;
        }
    public:
        std::string title;
        jce::IconTagText tagTexts;
        vector<std::string> imageUrls;
        jce::SimplePoster videoPoster;
        jce::Action action;
        jce::ExtraReportKV report;
        taf::Int64 time;
    };
    inline bool operator==(const ONASearchDokiFeed&l, const ONASearchDokiFeed&r)
    {
        return l.title == r.title && l.tagTexts == r.tagTexts && l.imageUrls == r.imageUrls && l.videoPoster == r.videoPoster && l.action == r.action && l.report == r.report && l.time == r.time;
    }
    inline bool operator!=(const ONASearchDokiFeed&l, const ONASearchDokiFeed&r)
    {
        return !(l == r);
    }

    struct ONAActorTitle : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAActorTitle";
        }
        static string MD5()
        {
            return "cd840603a49ee0e773982d534f191e60";
        }
        ONAActorTitle()
        :title(""),subTitle(""),actionTips(""),hasActionArrow(true),reportKey(""),reportParams(""),actionArrowPosition(0),titleColor(""),actionArrowColor(""),reportEventId("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            subTitle = "";
            actionTips = "";
            hasActionArrow = true;
            reportKey = "";
            reportParams = "";
            actionArrowPosition = 0;
            titleColor = "";
            actionArrowColor = "";
            reportEventId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actorInfo, 0);
            _os.write(title, 1);
            _os.write(subTitle, 2);
            _os.write(actionTips, 3);
            _os.write(action, 4);
            _os.write(hasActionArrow, 5);
            _os.write(reportKey, 6);
            _os.write(reportParams, 7);
            _os.write(actorCircleColors, 8);
            _os.write(actionArrowPosition, 9);
            _os.write(titleColor, 10);
            _os.write(actionArrowColor, 11);
            _os.write(reportEventId, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actorInfo, 0, false);
            _is.read(title, 1, false);
            _is.read(subTitle, 2, false);
            _is.read(actionTips, 3, false);
            _is.read(action, 4, false);
            _is.read(hasActionArrow, 5, false);
            _is.read(reportKey, 6, false);
            _is.read(reportParams, 7, false);
            _is.read(actorCircleColors, 8, false);
            _is.read(actionArrowPosition, 9, false);
            _is.read(titleColor, 10, false);
            _is.read(actionArrowColor, 11, false);
            _is.read(reportEventId, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actorInfo,"actorInfo");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(actionTips,"actionTips");
            _ds.display(action,"action");
            _ds.display(hasActionArrow,"hasActionArrow");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(actorCircleColors,"actorCircleColors");
            _ds.display(actionArrowPosition,"actionArrowPosition");
            _ds.display(titleColor,"titleColor");
            _ds.display(actionArrowColor,"actionArrowColor");
            _ds.display(reportEventId,"reportEventId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actorInfo, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(actionTips, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(hasActionArrow, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(actorCircleColors, true);
            _ds.displaySimple(actionArrowPosition, true);
            _ds.displaySimple(titleColor, true);
            _ds.displaySimple(actionArrowColor, true);
            _ds.displaySimple(reportEventId, false);
            return _os;
        }
    public:
        jce::ActorInfo actorInfo;
        std::string title;
        std::string subTitle;
        std::string actionTips;
        jce::Action action;
        taf::Bool hasActionArrow;
        std::string reportKey;
        std::string reportParams;
        vector<std::string> actorCircleColors;
        taf::Int32 actionArrowPosition;
        std::string titleColor;
        std::string actionArrowColor;
        std::string reportEventId;
    };
    inline bool operator==(const ONAActorTitle&l, const ONAActorTitle&r)
    {
        return l.actorInfo == r.actorInfo && l.title == r.title && l.subTitle == r.subTitle && l.actionTips == r.actionTips && l.action == r.action && l.hasActionArrow == r.hasActionArrow && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.actorCircleColors == r.actorCircleColors && l.actionArrowPosition == r.actionArrowPosition && l.titleColor == r.titleColor && l.actionArrowColor == r.actionArrowColor && l.reportEventId == r.reportEventId;
    }
    inline bool operator!=(const ONAActorTitle&l, const ONAActorTitle&r)
    {
        return !(l == r);
    }

    struct ONADokiDaily : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiDaily";
        }
        static string MD5()
        {
            return "7ae6a15d9816a44a47e6bc83ace87f38";
        }
        ONADokiDaily()
        :iconUrl(""),splitUrl(""),mainBgColor(""),reportParams(""),reportKey(""),uiType(0)
        {
        }
        void resetDefautlt()
        {
            iconUrl = "";
            splitUrl = "";
            mainBgColor = "";
            reportParams = "";
            reportKey = "";
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iconUrl, 0);
            _os.write(splitUrl, 1);
            _os.write(mainBgColor, 2);
            _os.write(newsList, 3);
            _os.write(reportParams, 4);
            _os.write(reportKey, 5);
            _os.write(uiType, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iconUrl, 0, true);
            _is.read(splitUrl, 1, false);
            _is.read(mainBgColor, 2, false);
            _is.read(newsList, 3, false);
            _is.read(reportParams, 4, false);
            _is.read(reportKey, 5, false);
            _is.read(uiType, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iconUrl,"iconUrl");
            _ds.display(splitUrl,"splitUrl");
            _ds.display(mainBgColor,"mainBgColor");
            _ds.display(newsList,"newsList");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(uiType,"uiType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(splitUrl, true);
            _ds.displaySimple(mainBgColor, true);
            _ds.displaySimple(newsList, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(uiType, false);
            return _os;
        }
    public:
        std::string iconUrl;
        std::string splitUrl;
        std::string mainBgColor;
        vector<jce::ActionBarInfo> newsList;
        std::string reportParams;
        std::string reportKey;
        taf::Int32 uiType;
    };
    inline bool operator==(const ONADokiDaily&l, const ONADokiDaily&r)
    {
        return l.iconUrl == r.iconUrl && l.splitUrl == r.splitUrl && l.mainBgColor == r.mainBgColor && l.newsList == r.newsList && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.uiType == r.uiType;
    }
    inline bool operator!=(const ONADokiDaily&l, const ONADokiDaily&r)
    {
        return !(l == r);
    }

    struct ONADokiFeedCard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiFeedCard";
        }
        static string MD5()
        {
            return "4101121039a81f0495dd725c6aa0240f";
        }
        ONADokiFeedCard()
        :reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dokiInfo, 0);
            _os.write(joinBarInfo, 1);
            _os.write(feed, 2);
            _os.write(author, 3);
            _os.write(rightAction, 4);
            _os.write(feedAction, 5);
            _os.write(reportParams, 6);
            _os.write(reportKey, 7);
            _os.write(actorCircleColors, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dokiInfo, 0, false);
            _is.read(joinBarInfo, 1, false);
            _is.read(feed, 2, false);
            _is.read(author, 3, false);
            _is.read(rightAction, 4, false);
            _is.read(feedAction, 5, false);
            _is.read(reportParams, 6, false);
            _is.read(reportKey, 7, false);
            _is.read(actorCircleColors, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dokiInfo,"dokiInfo");
            _ds.display(joinBarInfo,"joinBarInfo");
            _ds.display(feed,"feed");
            _ds.display(author,"author");
            _ds.display(rightAction,"rightAction");
            _ds.display(feedAction,"feedAction");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(actorCircleColors,"actorCircleColors");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dokiInfo, true);
            _ds.displaySimple(joinBarInfo, true);
            _ds.displaySimple(feed, true);
            _ds.displaySimple(author, true);
            _ds.displaySimple(rightAction, true);
            _ds.displaySimple(feedAction, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(actorCircleColors, false);
            return _os;
        }
    public:
        jce::ActorInfo dokiInfo;
        jce::ActionBarInfo joinBarInfo;
        jce::CirclePrimaryFeed feed;
        jce::ActorInfo author;
        jce::ActionBarInfo rightAction;
        jce::Action feedAction;
        std::string reportParams;
        std::string reportKey;
        vector<std::string> actorCircleColors;
    };
    inline bool operator==(const ONADokiFeedCard&l, const ONADokiFeedCard&r)
    {
        return l.dokiInfo == r.dokiInfo && l.joinBarInfo == r.joinBarInfo && l.feed == r.feed && l.author == r.author && l.rightAction == r.rightAction && l.feedAction == r.feedAction && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.actorCircleColors == r.actorCircleColors;
    }
    inline bool operator!=(const ONADokiFeedCard&l, const ONADokiFeedCard&r)
    {
        return !(l == r);
    }

    struct ONADokiFeedCardList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiFeedCardList";
        }
        static string MD5()
        {
            return "54b7f445fa644bd4e45d4951c259a0ff";
        }
        ONADokiFeedCardList()
        :reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cardList, 0);
            _os.write(reportParams, 1);
            _os.write(reportKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cardList, 0, false);
            _is.read(reportParams, 1, false);
            _is.read(reportKey, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cardList,"cardList");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cardList, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        vector<jce::ONADokiFeedCard> cardList;
        std::string reportParams;
        std::string reportKey;
    };
    inline bool operator==(const ONADokiFeedCardList&l, const ONADokiFeedCardList&r)
    {
        return l.cardList == r.cardList && l.reportParams == r.reportParams && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const ONADokiFeedCardList&l, const ONADokiFeedCardList&r)
    {
        return !(l == r);
    }

    struct ONADokiFollowStarRankBroadcast : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiFollowStarRankBroadcast";
        }
        static string MD5()
        {
            return "cea3b25133346c5fc28e91d7eaa41baa";
        }
        ONADokiFollowStarRankBroadcast()
        :reportParams(""),reportKey(""),uiType(0)
        {
        }
        void resetDefautlt()
        {
            reportParams = "";
            reportKey = "";
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(rankContent, 0);
            _os.write(reportParams, 1);
            _os.write(reportKey, 2);
            _os.write(uiType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(rankContent, 0, true);
            _is.read(reportParams, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(uiType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(rankContent,"rankContent");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(uiType,"uiType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(rankContent, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(uiType, false);
            return _os;
        }
    public:
        jce::PrimaryFeedSpecialContent rankContent;
        std::string reportParams;
        std::string reportKey;
        taf::Int32 uiType;
    };
    inline bool operator==(const ONADokiFollowStarRankBroadcast&l, const ONADokiFollowStarRankBroadcast&r)
    {
        return l.rankContent == r.rankContent && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.uiType == r.uiType;
    }
    inline bool operator!=(const ONADokiFollowStarRankBroadcast&l, const ONADokiFollowStarRankBroadcast&r)
    {
        return !(l == r);
    }

    struct ONAShortVideoItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAShortVideoItem";
        }
        static string MD5()
        {
            return "4313f30da2cc4485969f61741bc66cdc";
        }
        ONAShortVideoItem()
        :itemType(0)
        {
        }
        void resetDefautlt()
        {
            itemType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(basicVideo, 0);
            _os.write(itemType, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(basicVideo, 0, true);
            _is.read(itemType, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(basicVideo,"basicVideo");
            _ds.display(itemType,"itemType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(basicVideo, true);
            _ds.displaySimple(itemType, false);
            return _os;
        }
    public:
        jce::ONABulletinBoardV2 basicVideo;
        taf::Int32 itemType;
    };
    inline bool operator==(const ONAShortVideoItem&l, const ONAShortVideoItem&r)
    {
        return l.basicVideo == r.basicVideo && l.itemType == r.itemType;
    }
    inline bool operator!=(const ONAShortVideoItem&l, const ONAShortVideoItem&r)
    {
        return !(l == r);
    }

    struct ONADokiFeedPosterList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONADokiFeedPosterList";
        }
        static string MD5()
        {
            return "12a60e73dc169a2f70d4984ca850db60";
        }
        ONADokiFeedPosterList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedList, 0, false);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedList,"feedList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::DokiFeedPoster> feedList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONADokiFeedPosterList&l, const ONADokiFeedPosterList&r)
    {
        return l.feedList == r.feedList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONADokiFeedPosterList&l, const ONADokiFeedPosterList&r)
    {
        return !(l == r);
    }

    struct ONAMileStone : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAMileStone";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        ONAMileStone()
        :title(""),subTitle(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            subTitle = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(subTitle, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(subTitle, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string title;
        std::string subTitle;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAMileStone&l, const ONAMileStone&r)
    {
        return l.title == r.title && l.subTitle == r.subTitle && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAMileStone&l, const ONAMileStone&r)
    {
        return !(l == r);
    }

    struct ONATodayRecommendPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONATodayRecommendPoster";
        }
        static string MD5()
        {
            return "7162cfd36a97b6f143c813b11c1e8c33";
        }
        ONATodayRecommendPoster()
        :shareReportKey(""),shareReportParams("")
        {
        }
        void resetDefautlt()
        {
            shareReportKey = "";
            shareReportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(posterList, 1);
            _os.write(bigPosterImageList, 2);
            _os.write(shareReportKey, 3);
            _os.write(shareReportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(posterList, 1, false);
            _is.read(bigPosterImageList, 2, false);
            _is.read(shareReportKey, 3, false);
            _is.read(shareReportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(posterList,"posterList");
            _ds.display(bigPosterImageList,"bigPosterImageList");
            _ds.display(shareReportKey,"shareReportKey");
            _ds.display(shareReportParams,"shareReportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(posterList, true);
            _ds.displaySimple(bigPosterImageList, true);
            _ds.displaySimple(shareReportKey, true);
            _ds.displaySimple(shareReportParams, false);
            return _os;
        }
    public:
        jce::ONAPosterTitle title;
        vector<jce::Poster> posterList;
        vector<std::string> bigPosterImageList;
        std::string shareReportKey;
        std::string shareReportParams;
    };
    inline bool operator==(const ONATodayRecommendPoster&l, const ONATodayRecommendPoster&r)
    {
        return l.title == r.title && l.posterList == r.posterList && l.bigPosterImageList == r.bigPosterImageList && l.shareReportKey == r.shareReportKey && l.shareReportParams == r.shareReportParams;
    }
    inline bool operator!=(const ONATodayRecommendPoster&l, const ONATodayRecommendPoster&r)
    {
        return !(l == r);
    }

    struct ONAThemeGalleryPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAThemeGalleryPoster";
        }
        static string MD5()
        {
            return "d65d946942ef4d617ea3085c7c6c0914";
        }
        ONAThemeGalleryPoster()
        :backgroundImgUrl(""),foregroundImgUrl(""),textColor("")
        {
        }
        void resetDefautlt()
        {
            backgroundImgUrl = "";
            foregroundImgUrl = "";
            textColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(galleryPoster, 0);
            _os.write(backgroundImgUrl, 1);
            _os.write(foregroundImgUrl, 2);
            _os.write(textColor, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(galleryPoster, 0, true);
            _is.read(backgroundImgUrl, 1, false);
            _is.read(foregroundImgUrl, 2, false);
            _is.read(textColor, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(galleryPoster,"galleryPoster");
            _ds.display(backgroundImgUrl,"backgroundImgUrl");
            _ds.display(foregroundImgUrl,"foregroundImgUrl");
            _ds.display(textColor,"textColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(galleryPoster, true);
            _ds.displaySimple(backgroundImgUrl, true);
            _ds.displaySimple(foregroundImgUrl, true);
            _ds.displaySimple(textColor, false);
            return _os;
        }
    public:
        jce::ONAGalleryAdPoster galleryPoster;
        std::string backgroundImgUrl;
        std::string foregroundImgUrl;
        std::string textColor;
    };
    inline bool operator==(const ONAThemeGalleryPoster&l, const ONAThemeGalleryPoster&r)
    {
        return l.galleryPoster == r.galleryPoster && l.backgroundImgUrl == r.backgroundImgUrl && l.foregroundImgUrl == r.foregroundImgUrl && l.textColor == r.textColor;
    }
    inline bool operator!=(const ONAThemeGalleryPoster&l, const ONAThemeGalleryPoster&r)
    {
        return !(l == r);
    }

    struct ONAHotDiscuss : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAHotDiscuss";
        }
        static string MD5()
        {
            return "275e6a59bb43d8969e9d6d5883023640";
        }
        ONAHotDiscuss()
        :iconImgUrl(""),reportParams(""),reportKey(""),moreImgUrl("")
        {
        }
        void resetDefautlt()
        {
            iconImgUrl = "";
            reportParams = "";
            reportKey = "";
            moreImgUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(list, 0);
            _os.write(iconImgUrl, 1);
            _os.write(action, 2);
            _os.write(reportParams, 3);
            _os.write(reportKey, 4);
            _os.write(moreImgUrl, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(list, 0, true);
            _is.read(iconImgUrl, 1, false);
            _is.read(action, 2, false);
            _is.read(reportParams, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(moreImgUrl, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(list,"list");
            _ds.display(iconImgUrl,"iconImgUrl");
            _ds.display(action,"action");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(moreImgUrl,"moreImgUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(list, true);
            _ds.displaySimple(iconImgUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(moreImgUrl, false);
            return _os;
        }
    public:
        vector<jce::ActionBarInfo> list;
        std::string iconImgUrl;
        jce::Action action;
        std::string reportParams;
        std::string reportKey;
        std::string moreImgUrl;
    };
    inline bool operator==(const ONAHotDiscuss&l, const ONAHotDiscuss&r)
    {
        return l.list == r.list && l.iconImgUrl == r.iconImgUrl && l.action == r.action && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.moreImgUrl == r.moreImgUrl;
    }
    inline bool operator!=(const ONAHotDiscuss&l, const ONAHotDiscuss&r)
    {
        return !(l == r);
    }

    struct ONAThemeCataLog : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAThemeCataLog";
        }
        static string MD5()
        {
            return "8f61a8dd9e913921bcac99393ba34163";
        }
        ONAThemeCataLog()
        :reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(list, 0);
            _os.write(reportParams, 1);
            _os.write(reportKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(list, 0, true);
            _is.read(reportParams, 1, false);
            _is.read(reportKey, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(list,"list");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(list, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        vector<jce::ActionBarInfo> list;
        std::string reportParams;
        std::string reportKey;
    };
    inline bool operator==(const ONAThemeCataLog&l, const ONAThemeCataLog&r)
    {
        return l.list == r.list && l.reportParams == r.reportParams && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const ONAThemeCataLog&l, const ONAThemeCataLog&r)
    {
        return !(l == r);
    }

    struct ONAThemeTitlePoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAThemeTitlePoster";
        }
        static string MD5()
        {
            return "34b1211e02f0cd6b1dea3079f5c0dea3";
        }
        ONAThemeTitlePoster()
        :title(""),titleColor("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            titleColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(titleColor, 1);
            _os.write(action, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(titleColor, 1, false);
            _is.read(action, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(titleColor,"titleColor");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(titleColor, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string title;
        std::string titleColor;
        jce::Action action;
    };
    inline bool operator==(const ONAThemeTitlePoster&l, const ONAThemeTitlePoster&r)
    {
        return l.title == r.title && l.titleColor == r.titleColor && l.action == r.action;
    }
    inline bool operator!=(const ONAThemeTitlePoster&l, const ONAThemeTitlePoster&r)
    {
        return !(l == r);
    }

    struct ONACoverVideoItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONACoverVideoItem";
        }
        static string MD5()
        {
            return "56e9d2978cd29b7ea5a41f90b003395a";
        }
        ONACoverVideoItem()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(action, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(action, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::Poster poster;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONACoverVideoItem&l, const ONACoverVideoItem&r)
    {
        return l.poster == r.poster && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONACoverVideoItem&l, const ONACoverVideoItem&r)
    {
        return !(l == r);
    }

    struct ONAShortVideoPosterList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAShortVideoPosterList";
        }
        static string MD5()
        {
            return "19f98796afdb7d9f1c25060efcf51872";
        }
        ONAShortVideoPosterList()
        :isHaveNextPage(true),dataKey(""),pageContext(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            isHaveNextPage = true;
            dataKey = "";
            pageContext = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataList, 0);
            _os.write(isHaveNextPage, 1);
            _os.write(dataKey, 2);
            _os.write(pageContext, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataList, 0, true);
            _is.read(isHaveNextPage, 1, false);
            _is.read(dataKey, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataList,"dataList");
            _ds.display(isHaveNextPage,"isHaveNextPage");
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataList, true);
            _ds.displaySimple(isHaveNextPage, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::TempletLine> dataList;
        taf::Bool isHaveNextPage;
        std::string dataKey;
        std::string pageContext;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAShortVideoPosterList&l, const ONAShortVideoPosterList&r)
    {
        return l.dataList == r.dataList && l.isHaveNextPage == r.isHaveNextPage && l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAShortVideoPosterList&l, const ONAShortVideoPosterList&r)
    {
        return !(l == r);
    }

    struct ONAUserStudyPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAUserStudyPoster";
        }
        static string MD5()
        {
            return "5bba48bcc25125643fd5bc239a6e4562";
        }
        ONAUserStudyPoster()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(titleInfo, 0);
            _os.write(posterList, 1);
            _os.write(extraData, 2);
            _os.write(reportInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(titleInfo, 0, true);
            _is.read(posterList, 1, true);
            _is.read(extraData, 2, false);
            _is.read(reportInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(titleInfo,"titleInfo");
            _ds.display(posterList,"posterList");
            _ds.display(extraData,"extraData");
            _ds.display(reportInfo,"reportInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(titleInfo, true);
            _ds.displaySimple(posterList, true);
            _ds.displaySimple(extraData, true);
            _ds.displaySimple(reportInfo, false);
            return _os;
        }
    public:
        jce::ONAPosterTitle titleInfo;
        jce::ONAAttentPosterList posterList;
        map<std::string, std::string> extraData;
        jce::ExtraReportKV reportInfo;
    };
    inline bool operator==(const ONAUserStudyPoster&l, const ONAUserStudyPoster&r)
    {
        return l.titleInfo == r.titleInfo && l.posterList == r.posterList && l.extraData == r.extraData && l.reportInfo == r.reportInfo;
    }
    inline bool operator!=(const ONAUserStudyPoster&l, const ONAUserStudyPoster&r)
    {
        return !(l == r);
    }

    struct ONAKnowledgePayBar : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAKnowledgePayBar";
        }
        static string MD5()
        {
            return "49773bc06a13eecefafc52d5f33f70bd";
        }
        ONAKnowledgePayBar()
        :originPrice(""),vipPrice(""),iapOriginPrice(""),iapVipPrice(""),vidCountString(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            originPrice = "";
            vipPrice = "";
            iapOriginPrice = "";
            iapVipPrice = "";
            vidCountString = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(originPrice, 0);
            _os.write(vipPrice, 1);
            _os.write(iapOriginPrice, 2);
            _os.write(iapVipPrice, 3);
            _os.write(vidCountString, 4);
            _os.write(singleInfo, 5);
            _os.write(vipOnlyInfo, 6);
            _os.write(reportKey, 7);
            _os.write(reportParams, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(originPrice, 0, true);
            _is.read(vipPrice, 1, true);
            _is.read(iapOriginPrice, 2, true);
            _is.read(iapVipPrice, 3, true);
            _is.read(vidCountString, 4, true);
            _is.read(singleInfo, 5, false);
            _is.read(vipOnlyInfo, 6, false);
            _is.read(reportKey, 7, false);
            _is.read(reportParams, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(originPrice,"originPrice");
            _ds.display(vipPrice,"vipPrice");
            _ds.display(iapOriginPrice,"iapOriginPrice");
            _ds.display(iapVipPrice,"iapVipPrice");
            _ds.display(vidCountString,"vidCountString");
            _ds.display(singleInfo,"singleInfo");
            _ds.display(vipOnlyInfo,"vipOnlyInfo");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(originPrice, true);
            _ds.displaySimple(vipPrice, true);
            _ds.displaySimple(iapOriginPrice, true);
            _ds.displaySimple(iapVipPrice, true);
            _ds.displaySimple(vidCountString, true);
            _ds.displaySimple(singleInfo, true);
            _ds.displaySimple(vipOnlyInfo, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string originPrice;
        std::string vipPrice;
        std::string iapOriginPrice;
        std::string iapVipPrice;
        std::string vidCountString;
        jce::KnowledgePayBarSingleInfo singleInfo;
        jce::KnowledgePayBarVipOnlyInfo vipOnlyInfo;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAKnowledgePayBar&l, const ONAKnowledgePayBar&r)
    {
        return l.originPrice == r.originPrice && l.vipPrice == r.vipPrice && l.iapOriginPrice == r.iapOriginPrice && l.iapVipPrice == r.iapVipPrice && l.vidCountString == r.vidCountString && l.singleInfo == r.singleInfo && l.vipOnlyInfo == r.vipOnlyInfo && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAKnowledgePayBar&l, const ONAKnowledgePayBar&r)
    {
        return !(l == r);
    }

    struct ONAIntroductionPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAIntroductionPoster";
        }
        static string MD5()
        {
            return "08b31cb0db1635176aa17be0ac1a3f4a";
        }
        ONAIntroductionPoster()
        :heightToWidthRatio(0),dataKey(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            heightToWidthRatio = 0;
            dataKey = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(heightToWidthRatio, 1);
            _os.write(dataKey, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(heightToWidthRatio, 1, true);
            _is.read(dataKey, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(heightToWidthRatio,"heightToWidthRatio");
            _ds.display(dataKey,"dataKey");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(heightToWidthRatio, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::Poster poster;
        taf::Int32 heightToWidthRatio;
        std::string dataKey;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAIntroductionPoster&l, const ONAIntroductionPoster&r)
    {
        return l.poster == r.poster && l.heightToWidthRatio == r.heightToWidthRatio && l.dataKey == r.dataKey && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAIntroductionPoster&l, const ONAIntroductionPoster&r)
    {
        return !(l == r);
    }

    struct ONAKnowledgeIntroduction : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAKnowledgeIntroduction";
        }
        static string MD5()
        {
            return "0613689d923aaa31892b12f42f836c1c";
        }
        ONAKnowledgeIntroduction()
        :title(""),subtitle(""),dataKey(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            subtitle = "";
            dataKey = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(poster, 0);
            _os.write(title, 1);
            _os.write(subtitle, 2);
            _os.write(dataKey, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(poster, 0, true);
            _is.read(title, 1, true);
            _is.read(subtitle, 2, true);
            _is.read(dataKey, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(poster,"poster");
            _ds.display(title,"title");
            _ds.display(subtitle,"subtitle");
            _ds.display(dataKey,"dataKey");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subtitle, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::Poster poster;
        std::string title;
        std::string subtitle;
        std::string dataKey;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAKnowledgeIntroduction&l, const ONAKnowledgeIntroduction&r)
    {
        return l.poster == r.poster && l.title == r.title && l.subtitle == r.subtitle && l.dataKey == r.dataKey && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAKnowledgeIntroduction&l, const ONAKnowledgeIntroduction&r)
    {
        return !(l == r);
    }

    struct ONAVRSSDokiList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAVRSSDokiList";
        }
        static string MD5()
        {
            return "3fe82e4297e7c765803fbe95e6d12708";
        }
        ONAVRSSDokiList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataList, 0, false);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataList,"dataList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::ActorData> dataList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAVRSSDokiList&l, const ONAVRSSDokiList&r)
    {
        return l.dataList == r.dataList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAVRSSDokiList&l, const ONAVRSSDokiList&r)
    {
        return !(l == r);
    }

    struct ONACirclePicMoreList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONACirclePicMoreList";
        }
        static string MD5()
        {
            return "a14c362e856852d28080a2704f509818";
        }
        ONACirclePicMoreList()
        :totalNum(0)
        {
        }
        void resetDefautlt()
        {
            totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataList, 0);
            _os.write(totalNum, 1);
            _os.write(groupPageAction, 2);
            _os.write(report, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataList, 0, true);
            _is.read(totalNum, 1, true);
            _is.read(groupPageAction, 2, false);
            _is.read(report, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataList,"dataList");
            _ds.display(totalNum,"totalNum");
            _ds.display(groupPageAction,"groupPageAction");
            _ds.display(report,"report");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataList, true);
            _ds.displaySimple(totalNum, true);
            _ds.displaySimple(groupPageAction, true);
            _ds.displaySimple(report, false);
            return _os;
        }
    public:
        vector<jce::CircleMsgImageUrl> dataList;
        taf::Int32 totalNum;
        jce::Action groupPageAction;
        jce::ExtraReportKV report;
    };
    inline bool operator==(const ONACirclePicMoreList&l, const ONACirclePicMoreList&r)
    {
        return l.dataList == r.dataList && l.totalNum == r.totalNum && l.groupPageAction == r.groupPageAction && l.report == r.report;
    }
    inline bool operator!=(const ONACirclePicMoreList&l, const ONACirclePicMoreList&r)
    {
        return !(l == r);
    }

    struct ONAYooGameListItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAYooGameListItem";
        }
        static string MD5()
        {
            return "b459c5ea6536f641e7e35e68e5360f58";
        }
        ONAYooGameListItem()
        :bgImgUrl(""),headImgUrl(""),headImgType(0),headImgBorder(""),gameName(""),gameAuthor(""),gameDescription(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            bgImgUrl = "";
            headImgUrl = "";
            headImgType = 0;
            headImgBorder = "";
            gameName = "";
            gameAuthor = "";
            gameDescription = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cardList, 0);
            _os.write(bgImgUrl, 1);
            _os.write(headImgUrl, 2);
            _os.write(headImgType, 3);
            _os.write(headImgBorder, 4);
            _os.write(gameName, 5);
            _os.write(gameAuthor, 6);
            _os.write(gameDescription, 7);
            _os.write(action, 8);
            _os.write(reportKey, 9);
            _os.write(reportParams, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cardList, 0, true);
            _is.read(bgImgUrl, 1, false);
            _is.read(headImgUrl, 2, false);
            _is.read(headImgType, 3, false);
            _is.read(headImgBorder, 4, false);
            _is.read(gameName, 5, false);
            _is.read(gameAuthor, 6, false);
            _is.read(gameDescription, 7, false);
            _is.read(action, 8, false);
            _is.read(reportKey, 9, false);
            _is.read(reportParams, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cardList,"cardList");
            _ds.display(bgImgUrl,"bgImgUrl");
            _ds.display(headImgUrl,"headImgUrl");
            _ds.display(headImgType,"headImgType");
            _ds.display(headImgBorder,"headImgBorder");
            _ds.display(gameName,"gameName");
            _ds.display(gameAuthor,"gameAuthor");
            _ds.display(gameDescription,"gameDescription");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cardList, true);
            _ds.displaySimple(bgImgUrl, true);
            _ds.displaySimple(headImgUrl, true);
            _ds.displaySimple(headImgType, true);
            _ds.displaySimple(headImgBorder, true);
            _ds.displaySimple(gameName, true);
            _ds.displaySimple(gameAuthor, true);
            _ds.displaySimple(gameDescription, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::YooGameCard> cardList;
        std::string bgImgUrl;
        std::string headImgUrl;
        taf::Char headImgType;
        std::string headImgBorder;
        std::string gameName;
        std::string gameAuthor;
        std::string gameDescription;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAYooGameListItem&l, const ONAYooGameListItem&r)
    {
        return l.cardList == r.cardList && l.bgImgUrl == r.bgImgUrl && l.headImgUrl == r.headImgUrl && l.headImgType == r.headImgType && l.headImgBorder == r.headImgBorder && l.gameName == r.gameName && l.gameAuthor == r.gameAuthor && l.gameDescription == r.gameDescription && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAYooGameListItem&l, const ONAYooGameListItem&r)
    {
        return !(l == r);
    }

    struct ONACircleMsgImage : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONACircleMsgImage";
        }
        static string MD5()
        {
            return "67a8ece003bf9483292da466eaad3096";
        }
        ONACircleMsgImage()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(circleMsgImg, 0);
            _os.write(report, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(circleMsgImg, 0, true);
            _is.read(report, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(circleMsgImg,"circleMsgImg");
            _ds.display(report,"report");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(circleMsgImg, true);
            _ds.displaySimple(report, false);
            return _os;
        }
    public:
        jce::CircleMsgImageUrl circleMsgImg;
        jce::ExtraReportKV report;
    };
    inline bool operator==(const ONACircleMsgImage&l, const ONACircleMsgImage&r)
    {
        return l.circleMsgImg == r.circleMsgImg && l.report == r.report;
    }
    inline bool operator!=(const ONACircleMsgImage&l, const ONACircleMsgImage&r)
    {
        return !(l == r);
    }

    struct ONASearchStarBanner : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASearchStarBanner";
        }
        static string MD5()
        {
            return "4a101b9b20135fdcdf6ccbeb7d468b8b";
        }
        ONASearchStarBanner()
        :starName(""),bannerType(0),intro(""),leftTitle(""),leftNum(""),rightTitle(""),rightNum(""),artAImageUrl(""),artBImageUrl(""),backgroundUrl(""),buttonUrl(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            starName = "";
            bannerType = 0;
            intro = "";
            leftTitle = "";
            leftNum = "";
            rightTitle = "";
            rightNum = "";
            artAImageUrl = "";
            artBImageUrl = "";
            backgroundUrl = "";
            buttonUrl = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starName, 0);
            _os.write(bannerType, 1);
            _os.write(intro, 2);
            _os.write(leftTitle, 3);
            _os.write(leftNum, 4);
            _os.write(rightTitle, 5);
            _os.write(rightNum, 6);
            _os.write(artAImageUrl, 7);
            _os.write(artBImageUrl, 8);
            _os.write(backgroundUrl, 9);
            _os.write(buttonUrl, 10);
            _os.write(action, 11);
            _os.write(rankAction, 12);
            _os.write(reportKey, 13);
            _os.write(reportParams, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starName, 0, true);
            _is.read(bannerType, 1, true);
            _is.read(intro, 2, false);
            _is.read(leftTitle, 3, false);
            _is.read(leftNum, 4, false);
            _is.read(rightTitle, 5, false);
            _is.read(rightNum, 6, false);
            _is.read(artAImageUrl, 7, false);
            _is.read(artBImageUrl, 8, false);
            _is.read(backgroundUrl, 9, false);
            _is.read(buttonUrl, 10, false);
            _is.read(action, 11, false);
            _is.read(rankAction, 12, false);
            _is.read(reportKey, 13, false);
            _is.read(reportParams, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starName,"starName");
            _ds.display(bannerType,"bannerType");
            _ds.display(intro,"intro");
            _ds.display(leftTitle,"leftTitle");
            _ds.display(leftNum,"leftNum");
            _ds.display(rightTitle,"rightTitle");
            _ds.display(rightNum,"rightNum");
            _ds.display(artAImageUrl,"artAImageUrl");
            _ds.display(artBImageUrl,"artBImageUrl");
            _ds.display(backgroundUrl,"backgroundUrl");
            _ds.display(buttonUrl,"buttonUrl");
            _ds.display(action,"action");
            _ds.display(rankAction,"rankAction");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starName, true);
            _ds.displaySimple(bannerType, true);
            _ds.displaySimple(intro, true);
            _ds.displaySimple(leftTitle, true);
            _ds.displaySimple(leftNum, true);
            _ds.displaySimple(rightTitle, true);
            _ds.displaySimple(rightNum, true);
            _ds.displaySimple(artAImageUrl, true);
            _ds.displaySimple(artBImageUrl, true);
            _ds.displaySimple(backgroundUrl, true);
            _ds.displaySimple(buttonUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(rankAction, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string starName;
        taf::Char bannerType;
        std::string intro;
        std::string leftTitle;
        std::string leftNum;
        std::string rightTitle;
        std::string rightNum;
        std::string artAImageUrl;
        std::string artBImageUrl;
        std::string backgroundUrl;
        std::string buttonUrl;
        jce::Action action;
        jce::Action rankAction;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONASearchStarBanner&l, const ONASearchStarBanner&r)
    {
        return l.starName == r.starName && l.bannerType == r.bannerType && l.intro == r.intro && l.leftTitle == r.leftTitle && l.leftNum == r.leftNum && l.rightTitle == r.rightTitle && l.rightNum == r.rightNum && l.artAImageUrl == r.artAImageUrl && l.artBImageUrl == r.artBImageUrl && l.backgroundUrl == r.backgroundUrl && l.buttonUrl == r.buttonUrl && l.action == r.action && l.rankAction == r.rankAction && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONASearchStarBanner&l, const ONASearchStarBanner&r)
    {
        return !(l == r);
    }

    struct ONASearchYooList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASearchYooList";
        }
        static string MD5()
        {
            return "baa94cf8db428ac6f8d8233c98486043";
        }
        ONASearchYooList()
        :reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cardList, 0);
            _os.write(reportKey, 1);
            _os.write(reportParams, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cardList, 0, true);
            _is.read(reportKey, 1, false);
            _is.read(reportParams, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cardList,"cardList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cardList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::YooGameCard> cardList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONASearchYooList&l, const ONASearchYooList&r)
    {
        return l.cardList == r.cardList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONASearchYooList&l, const ONASearchYooList&r)
    {
        return !(l == r);
    }

    struct ONAImage : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAImage";
        }
        static string MD5()
        {
            return "a0ac35e93b6b01cbf606132dbae6dfdb";
        }
        ONAImage()
        :imageUrl(""),topPadding(0),leftPadding(0),bottomPadding(0),rightPadding(0),heightToWidthRatio(100),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
            topPadding = 0;
            leftPadding = 0;
            bottomPadding = 0;
            rightPadding = 0;
            heightToWidthRatio = 100;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrl, 0);
            _os.write(topPadding, 1);
            _os.write(leftPadding, 2);
            _os.write(bottomPadding, 3);
            _os.write(rightPadding, 4);
            _os.write(heightToWidthRatio, 5);
            _os.write(reportKey, 6);
            _os.write(reportParams, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrl, 0, true);
            _is.read(topPadding, 1, false);
            _is.read(leftPadding, 2, false);
            _is.read(bottomPadding, 3, false);
            _is.read(rightPadding, 4, false);
            _is.read(heightToWidthRatio, 5, false);
            _is.read(reportKey, 6, false);
            _is.read(reportParams, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrl,"imageUrl");
            _ds.display(topPadding,"topPadding");
            _ds.display(leftPadding,"leftPadding");
            _ds.display(bottomPadding,"bottomPadding");
            _ds.display(rightPadding,"rightPadding");
            _ds.display(heightToWidthRatio,"heightToWidthRatio");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(topPadding, true);
            _ds.displaySimple(leftPadding, true);
            _ds.displaySimple(bottomPadding, true);
            _ds.displaySimple(rightPadding, true);
            _ds.displaySimple(heightToWidthRatio, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string imageUrl;
        taf::Int32 topPadding;
        taf::Int32 leftPadding;
        taf::Int32 bottomPadding;
        taf::Int32 rightPadding;
        taf::Int32 heightToWidthRatio;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAImage&l, const ONAImage&r)
    {
        return l.imageUrl == r.imageUrl && l.topPadding == r.topPadding && l.leftPadding == r.leftPadding && l.bottomPadding == r.bottomPadding && l.rightPadding == r.rightPadding && l.heightToWidthRatio == r.heightToWidthRatio && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAImage&l, const ONAImage&r)
    {
        return !(l == r);
    }

    struct ONAThemeAdPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAThemeAdPoster";
        }
        static string MD5()
        {
            return "69806072e31023ea7343a407e7208d5d";
        }
        ONAThemeAdPoster()
        :bgImageUrl(""),topMarginRatio(0),heightToWidthRatio(100),textColor(""),bgColor("")
        {
        }
        void resetDefautlt()
        {
            bgImageUrl = "";
            topMarginRatio = 0;
            heightToWidthRatio = 100;
            textColor = "";
            bgColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(gallerAdPoster, 0);
            _os.write(bgImageUrl, 1);
            _os.write(topMarginRatio, 2);
            _os.write(heightToWidthRatio, 3);
            _os.write(textColor, 4);
            _os.write(bgColor, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(gallerAdPoster, 0, true);
            _is.read(bgImageUrl, 1, true);
            _is.read(topMarginRatio, 2, false);
            _is.read(heightToWidthRatio, 3, false);
            _is.read(textColor, 4, false);
            _is.read(bgColor, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(gallerAdPoster,"gallerAdPoster");
            _ds.display(bgImageUrl,"bgImageUrl");
            _ds.display(topMarginRatio,"topMarginRatio");
            _ds.display(heightToWidthRatio,"heightToWidthRatio");
            _ds.display(textColor,"textColor");
            _ds.display(bgColor,"bgColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(gallerAdPoster, true);
            _ds.displaySimple(bgImageUrl, true);
            _ds.displaySimple(topMarginRatio, true);
            _ds.displaySimple(heightToWidthRatio, true);
            _ds.displaySimple(textColor, true);
            _ds.displaySimple(bgColor, false);
            return _os;
        }
    public:
        jce::ONAGalleryAdPoster gallerAdPoster;
        std::string bgImageUrl;
        taf::Int32 topMarginRatio;
        taf::Int32 heightToWidthRatio;
        std::string textColor;
        std::string bgColor;
    };
    inline bool operator==(const ONAThemeAdPoster&l, const ONAThemeAdPoster&r)
    {
        return l.gallerAdPoster == r.gallerAdPoster && l.bgImageUrl == r.bgImageUrl && l.topMarginRatio == r.topMarginRatio && l.heightToWidthRatio == r.heightToWidthRatio && l.textColor == r.textColor && l.bgColor == r.bgColor;
    }
    inline bool operator!=(const ONAThemeAdPoster&l, const ONAThemeAdPoster&r)
    {
        return !(l == r);
    }

    struct ONARelatedRecommendImgItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONARelatedRecommendImgItem";
        }
        static string MD5()
        {
            return "74f9e0df866d32b8039a2a67a69474c6";
        }
        ONARelatedRecommendImgItem()
        :feedId(""),reportKey(""),reportParams(""),imgPreViewHasRecommends(true),reportEventId("")
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            reportKey = "";
            reportParams = "";
            imgPreViewHasRecommends = true;
            reportEventId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imgs, 0);
            _os.write(feedId, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
            _os.write(imgPreViewHasRecommends, 4);
            _os.write(reportEventId, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imgs, 0, true);
            _is.read(feedId, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
            _is.read(imgPreViewHasRecommends, 4, false);
            _is.read(reportEventId, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imgs,"imgs");
            _ds.display(feedId,"feedId");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(imgPreViewHasRecommends,"imgPreViewHasRecommends");
            _ds.display(reportEventId,"reportEventId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imgs, true);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(imgPreViewHasRecommends, true);
            _ds.displaySimple(reportEventId, false);
            return _os;
        }
    public:
        vector<jce::CircleMsgImageUrl> imgs;
        std::string feedId;
        std::string reportKey;
        std::string reportParams;
        taf::Bool imgPreViewHasRecommends;
        std::string reportEventId;
    };
    inline bool operator==(const ONARelatedRecommendImgItem&l, const ONARelatedRecommendImgItem&r)
    {
        return l.imgs == r.imgs && l.feedId == r.feedId && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.imgPreViewHasRecommends == r.imgPreViewHasRecommends && l.reportEventId == r.reportEventId;
    }
    inline bool operator!=(const ONARelatedRecommendImgItem&l, const ONARelatedRecommendImgItem&r)
    {
        return !(l == r);
    }

    struct ONARelatedRecommendImgList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONARelatedRecommendImgList";
        }
        static string MD5()
        {
            return "b22fbb7aaa0da38c319f82f98fc84bc0";
        }
        ONARelatedRecommendImgList()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imgs, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imgs, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imgs,"imgs");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imgs, false);
            return _os;
        }
    public:
        vector<jce::ONARelatedRecommendImgItem> imgs;
    };
    inline bool operator==(const ONARelatedRecommendImgList&l, const ONARelatedRecommendImgList&r)
    {
        return l.imgs == r.imgs;
    }
    inline bool operator!=(const ONARelatedRecommendImgList&l, const ONARelatedRecommendImgList&r)
    {
        return !(l == r);
    }

    struct ONAShortStripLongBoard : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAShortStripLongBoard";
        }
        static string MD5()
        {
            return "61a0ea66f3087c919586d231e183a019";
        }
        ONAShortStripLongBoard()
        :insertNewLineDataKey(""),insertNewLineProgress(0),reportEventId(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            insertNewLineDataKey = "";
            insertNewLineProgress = 0;
            reportEventId = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(shortVideoPoster, 0);
            _os.write(longVideoPoster, 1);
            _os.write(action, 2);
            _os.write(shortVideoData, 3);
            _os.write(attentItem, 4);
            _os.write(insertNewLineDataKey, 5);
            _os.write(insertNewLineProgress, 6);
            _os.write(reportEventId, 7);
            _os.write(reportKey, 8);
            _os.write(reportParams, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(shortVideoPoster, 0, true);
            _is.read(longVideoPoster, 1, false);
            _is.read(action, 2, false);
            _is.read(shortVideoData, 3, false);
            _is.read(attentItem, 4, false);
            _is.read(insertNewLineDataKey, 5, false);
            _is.read(insertNewLineProgress, 6, false);
            _is.read(reportEventId, 7, false);
            _is.read(reportKey, 8, false);
            _is.read(reportParams, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(shortVideoPoster,"shortVideoPoster");
            _ds.display(longVideoPoster,"longVideoPoster");
            _ds.display(action,"action");
            _ds.display(shortVideoData,"shortVideoData");
            _ds.display(attentItem,"attentItem");
            _ds.display(insertNewLineDataKey,"insertNewLineDataKey");
            _ds.display(insertNewLineProgress,"insertNewLineProgress");
            _ds.display(reportEventId,"reportEventId");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(shortVideoPoster, true);
            _ds.displaySimple(longVideoPoster, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(shortVideoData, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(insertNewLineDataKey, true);
            _ds.displaySimple(insertNewLineProgress, true);
            _ds.displaySimple(reportEventId, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::Poster shortVideoPoster;
        jce::Poster longVideoPoster;
        jce::Action action;
        jce::VideoItemData shortVideoData;
        jce::VideoAttentItem attentItem;
        std::string insertNewLineDataKey;
        taf::Int32 insertNewLineProgress;
        std::string reportEventId;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONAShortStripLongBoard&l, const ONAShortStripLongBoard&r)
    {
        return l.shortVideoPoster == r.shortVideoPoster && l.longVideoPoster == r.longVideoPoster && l.action == r.action && l.shortVideoData == r.shortVideoData && l.attentItem == r.attentItem && l.insertNewLineDataKey == r.insertNewLineDataKey && l.insertNewLineProgress == r.insertNewLineProgress && l.reportEventId == r.reportEventId && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONAShortStripLongBoard&l, const ONAShortStripLongBoard&r)
    {
        return !(l == r);
    }

    struct ONATopicCoverPosterList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONATopicCoverPosterList";
        }
        static string MD5()
        {
            return "20b87909f6b0b9095d712fb434f273cf";
        }
        ONATopicCoverPosterList()
        :uiType(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(posterList, 0);
            _os.write(uiType, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(posterList, 0, true);
            _is.read(uiType, 1, true);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(posterList,"posterList");
            _ds.display(uiType,"uiType");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(posterList, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        vector<jce::TopicCoverPoster> posterList;
        taf::Int32 uiType;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const ONATopicCoverPosterList&l, const ONATopicCoverPosterList&r)
    {
        return l.posterList == r.posterList && l.uiType == r.uiType && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const ONATopicCoverPosterList&l, const ONATopicCoverPosterList&r)
    {
        return !(l == r);
    }


}

#define jce_ONAViewCSS_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.styleID,b.styleID);jce_copy_struct(a.propertyList,b.propertyList);

#define jce_ONAButtonInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.titleColor,b.titleColor);jce_copy_struct(a.bgColor,b.bgColor);jce_copy_struct(a.action,b.action);

#define jce_ONAMultPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.posterList,b.posterList);jce_copy_struct(a.showNum,b.showNum);jce_copy_struct(a.style,b.style);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.onaCSS,b.onaCSS);jce_copy_struct(a.channelInsertInfo,b.channelInsertInfo);

#define jce_ONAHeadPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.actor,b.actor);jce_copy_struct(a.rssItem,b.rssItem);

#define jce_ONAVRSSHeadPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.rssItem,b.rssItem);

#define jce_ONAGalleryAdPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.adType,b.adType);jce_copy_struct(a.adKey,b.adKey);jce_copy_struct(a.posterList,b.posterList);jce_copy_struct(a.extension,b.extension);jce_copy_struct(a.adSerialNumber,b.adSerialNumber);jce_copy_struct(a.insertPosterGroup,b.insertPosterGroup);jce_copy_struct(a.focusInfo,b.focusInfo);jce_copy_struct(a.bottomPadding,b.bottomPadding);

#define jce_ONAPosterTitle_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.subhead,b.subhead);jce_copy_struct(a.action,b.action);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.style,b.style);jce_copy_struct(a.subMarkLabelList,b.subMarkLabelList);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.imag,b.imag);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.titleColor,b.titleColor);jce_copy_struct(a.bgColor,b.bgColor);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.onaCSS,b.onaCSS);jce_copy_struct(a.channelInsertItem,b.channelInsertItem);jce_copy_struct(a.rightChainInfo,b.rightChainInfo);jce_copy_struct(a.rightChainType,b.rightChainType);jce_copy_struct(a.imagUIType,b.imagUIType);jce_copy_struct(a.extraInfoType,b.extraInfoType);jce_copy_struct(a.promotionAppInfo,b.promotionAppInfo);

#define jce_ONAUserPosterTitle_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.subhead,b.subhead);jce_copy_struct(a.action,b.action);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.subMarkLabelList,b.subMarkLabelList);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.deafultTitle,b.deafultTitle);jce_copy_struct(a.style,b.style);jce_copy_struct(a.userPhotoAction,b.userPhotoAction);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_ONASplitLine_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.color,b.color);jce_copy_struct(a.aroundSpace,b.aroundSpace);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.title,b.title);jce_copy_struct(a.titlePosition,b.titlePosition);jce_copy_struct(a.location,b.location);jce_copy_struct(a.bottomPadding,b.bottomPadding);jce_copy_struct(a.onaCSS,b.onaCSS);

#define jce_ONALoadMoreAction_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.title,b.title);jce_copy_struct(a.actionType,b.actionType);jce_copy_struct(a.action,b.action);jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.routeKey,b.routeKey);jce_copy_struct(a.loadSource,b.loadSource);

#define jce_ONAStarList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starList,b.starList);jce_copy_struct(a.showFlag,b.showFlag);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.uiStyle,b.uiStyle);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.onaCSS,b.onaCSS);

#define jce_ONANewsItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.action,b.action);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.lineTag,b.lineTag);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.feedbackDataKey,b.feedbackDataKey);jce_copy_struct(a.feedbackType,b.feedbackType);jce_copy_struct(a.mdsumVideo,b.mdsumVideo);

#define jce_ONAMatchSchedule_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);jce_copy_struct(a.matchIcon,b.matchIcon);jce_copy_struct(a.firstText,b.firstText);jce_copy_struct(a.secondText,b.secondText);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.action,b.action);jce_copy_struct(a.actionBars,b.actionBars);jce_copy_struct(a.infoTitle,b.infoTitle);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONACompeteSchedule_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);jce_copy_struct(a.topIcon,b.topIcon);jce_copy_struct(a.topTitle,b.topTitle);jce_copy_struct(a.btmIcon,b.btmIcon);jce_copy_struct(a.btmTitle,b.btmTitle);jce_copy_struct(a.firstLine,b.firstLine);jce_copy_struct(a.secondLine,b.secondLine);jce_copy_struct(a.topScore,b.topScore);jce_copy_struct(a.btmScore,b.btmScore);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.action,b.action);jce_copy_struct(a.actionBars,b.actionBars);jce_copy_struct(a.infoTitle,b.infoTitle);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAGrid_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.rowCount,b.rowCount);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.childModeButtonShow,b.childModeButtonShow);jce_copy_struct(a.onaCSS,b.onaCSS);

#define jce_ONADetailsVideoCircleShare_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.shareTitle,b.shareTitle);jce_copy_struct(a.readKey,b.readKey);jce_copy_struct(a.writeKey,b.writeKey);jce_copy_struct(a.uiType,b.uiType);

#define jce_ONADetailsToolbar_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.updateDetails,b.updateDetails);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.cacheDataKey,b.cacheDataKey);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.subLabelList,b.subLabelList);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.actors,b.actors);jce_copy_struct(a.feedsNum,b.feedsNum);jce_copy_struct(a.downloadCopyRight,b.downloadCopyRight);jce_copy_struct(a.presentRight,b.presentRight);jce_copy_struct(a.commentAction,b.commentAction);

#define jce_ONADetailsVideoList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.title,b.title);jce_copy_struct(a.spliteLine,b.spliteLine);

#define jce_ONADetailsPosterList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.operateFlag,b.operateFlag);jce_copy_struct(a.mainData,b.mainData);jce_copy_struct(a.title,b.title);jce_copy_struct(a.spliteLine,b.spliteLine);

#define jce_ONADetailsVerticalVideoList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.title,b.title);jce_copy_struct(a.spliteLine,b.spliteLine);jce_copy_struct(a.moreAction,b.moreAction);jce_copy_struct(a.maxOutShowsize,b.maxOutShowsize);jce_copy_struct(a.needChange,b.needChange);

#define jce_ONAAdPlaceHolder_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.adType,b.adType);jce_copy_struct(a.adKey,b.adKey);

#define jce_ONADetailsVerticalPosterList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.title,b.title);jce_copy_struct(a.spliteLine,b.spliteLine);jce_copy_struct(a.moreAction,b.moreAction);jce_copy_struct(a.maxOutShowsize,b.maxOutShowsize);jce_copy_struct(a.mainData,b.mainData);jce_copy_struct(a.operateFlag,b.operateFlag);jce_copy_struct(a.needChange,b.needChange);jce_copy_struct(a.adPlaceHolderList,b.adPlaceHolderList);jce_copy_struct(a.leftImageRightTextAdPosterList,b.leftImageRightTextAdPosterList);jce_copy_struct(a.adContext,b.adContext);jce_copy_struct(a.adChannelId,b.adChannelId);

#define jce_ONADetailsHorizonPosterList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.type,b.type);jce_copy_struct(a.maxOutShowsize,b.maxOutShowsize);jce_copy_struct(a.title,b.title);jce_copy_struct(a.moreAction,b.moreAction);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_ONADetailsIntroduction_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.action,b.action);

#define jce_ONACommentWrite_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commentKey,b.commentKey);jce_copy_struct(a.isCanWrite,b.isCanWrite);jce_copy_struct(a.commentTip,b.commentTip);jce_copy_struct(a.filterKey,b.filterKey);jce_copy_struct(a.title,b.title);jce_copy_struct(a.action,b.action);jce_copy_struct(a.hide,b.hide);jce_copy_struct(a.uiType,b.uiType);

#define jce_ONASearchPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.videoList,b.videoList);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.lineLabel,b.lineLabel);jce_copy_struct(a.playBtn,b.playBtn);jce_copy_struct(a.action,b.action);jce_copy_struct(a.clickReportKey,b.clickReportKey);jce_copy_struct(a.lineTag,b.lineTag);jce_copy_struct(a.playButtons,b.playButtons);jce_copy_struct(a.playActionButtons,b.playActionButtons);jce_copy_struct(a.moreActionTip,b.moreActionTip);jce_copy_struct(a.downloadButton,b.downloadButton);jce_copy_struct(a.mdsumVideo,b.mdsumVideo);jce_copy_struct(a.rightActionButton,b.rightActionButton);

#define jce_ONANoSearchHit_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.details,b.details);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONABulletinBoard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.tagTexts,b.tagTexts);jce_copy_struct(a.comments,b.comments);jce_copy_struct(a.action,b.action);jce_copy_struct(a.ritchComments,b.ritchComments);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.videoData,b.videoData);jce_copy_struct(a.isAutoPlayer,b.isAutoPlayer);jce_copy_struct(a.isLiveVideo,b.isLiveVideo);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.streamId,b.streamId);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.dislikeMark,b.dislikeMark);jce_copy_struct(a.dislikeOptionGroup,b.dislikeOptionGroup);jce_copy_struct(a.uiStyle,b.uiStyle);jce_copy_struct(a.liveExtra,b.liveExtra);

#define jce_ONATomLiveBoard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.uiStyle,b.uiStyle);jce_copy_struct(a.tagTexts,b.tagTexts);jce_copy_struct(a.action,b.action);jce_copy_struct(a.ritchComments,b.ritchComments);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.videoData,b.videoData);jce_copy_struct(a.isAutoPlayer,b.isAutoPlayer);

#define jce_ONAAppInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.appInfo,b.appInfo);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.action,b.action);

#define jce_ONAStarIntroduction_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starInfo,b.starInfo);jce_copy_struct(a.kvItemList,b.kvItemList);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.starList,b.starList);jce_copy_struct(a.introductionVideo,b.introductionVideo);

#define jce_ONAStarNews_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.content,b.content);jce_copy_struct(a.imgList,b.imgList);jce_copy_struct(a.detailInfo,b.detailInfo);jce_copy_struct(a.shareNum,b.shareNum);jce_copy_struct(a.commentNum,b.commentNum);jce_copy_struct(a.action,b.action);

#define jce_ONAQuoteComment_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.content,b.content);jce_copy_struct(a.rightCornerText,b.rightCornerText);

#define jce_ONASummary_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.content,b.content);jce_copy_struct(a.defaultLines,b.defaultLines);jce_copy_struct(a.rightCornerText,b.rightCornerText);jce_copy_struct(a.uiType,b.uiType);

#define jce_ONAActorList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actorLists,b.actorLists);

#define jce_ONAPictureWall_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.images,b.images);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAPursuit_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.list,b.list);jce_copy_struct(a.focusIndex,b.focusIndex);

#define jce_ONAProgramItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.action,b.action);

#define jce_ONAEnterTip_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tipType,b.tipType);jce_copy_struct(a.action,b.action);jce_copy_struct(a.urls,b.urls);jce_copy_struct(a.lines,b.lines);jce_copy_struct(a.labels,b.labels);jce_copy_struct(a.apkInfo,b.apkInfo);jce_copy_struct(a.serverTime,b.serverTime);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.extraReportKVs,b.extraReportKVs);

#define jce_ONAVerticalPosterList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.posterList,b.posterList);jce_copy_struct(a.posterMore,b.posterMore);jce_copy_struct(a.title,b.title);jce_copy_struct(a.spliteLine,b.spliteLine);jce_copy_struct(a.moreAction,b.moreAction);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_ONAPosterList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.posterList,b.posterList);jce_copy_struct(a.lines,b.lines);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.listTitle,b.listTitle);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_ONAAttentPosterList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.attentPosterList,b.attentPosterList);jce_copy_struct(a.lines,b.lines);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.leftPadding,b.leftPadding);jce_copy_struct(a.maxLine,b.maxLine);

#define jce_ONAIntroduction_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.introduction,b.introduction);jce_copy_struct(a.maxLimitLines,b.maxLimitLines);jce_copy_struct(a.maxShowLines,b.maxShowLines);jce_copy_struct(a.textColor,b.textColor);jce_copy_struct(a.showStyle,b.showStyle);

#define jce_ONADynamicPanel_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.uiType,b.uiType);

#define jce_ONAFanNews_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.content,b.content);jce_copy_struct(a.imgList,b.imgList);jce_copy_struct(a.faceUrl,b.faceUrl);jce_copy_struct(a.detailInfo,b.detailInfo);jce_copy_struct(a.shareNum,b.shareNum);jce_copy_struct(a.commentNum,b.commentNum);jce_copy_struct(a.type,b.type);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAFanNewsWithImgList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.content,b.content);jce_copy_struct(a.imgList,b.imgList);jce_copy_struct(a.faceUrl,b.faceUrl);jce_copy_struct(a.detailInfo,b.detailInfo);jce_copy_struct(a.commentNum,b.commentNum);jce_copy_struct(a.type,b.type);jce_copy_struct(a.action,b.action);jce_copy_struct(a.leftIconUrl,b.leftIconUrl);jce_copy_struct(a.rightIconUrl,b.rightIconUrl);

#define jce_ONABusinessVoteList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.voteList,b.voteList);jce_copy_struct(a.voteLimit,b.voteLimit);jce_copy_struct(a.votedCount,b.votedCount);jce_copy_struct(a.bottleCount,b.bottleCount);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subhead,b.subhead);jce_copy_struct(a.action,b.action);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.dialogs,b.dialogs);jce_copy_struct(a.appInfo,b.appInfo);jce_copy_struct(a.sharePageAction,b.sharePageAction);jce_copy_struct(a.mShareItem,b.mShareItem);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_ONAFanInvolveEntry_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fanItem,b.fanItem);

#define jce_ONAPromoteEntry_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.action,b.action);jce_copy_struct(a.uiStyle,b.uiStyle);jce_copy_struct(a.moreFlag,b.moreFlag);jce_copy_struct(a.subHead,b.subHead);jce_copy_struct(a.appInfo,b.appInfo);jce_copy_struct(a.isCanPlaceHoler,b.isCanPlaceHoler);jce_copy_struct(a.titleColor,b.titleColor);

#define jce_ONADiscoveryEntry_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.discoveryEntryLists,b.discoveryEntryLists);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAVideoCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.intro,b.intro);jce_copy_struct(a.lineTag,b.lineTag);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.showStyle,b.showStyle);jce_copy_struct(a.time,b.time);jce_copy_struct(a.appendPosters,b.appendPosters);jce_copy_struct(a.commentator,b.commentator);

#define jce_ONAVideoCinema_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.type,b.type);jce_copy_struct(a.pageSize,b.pageSize);jce_copy_struct(a.version,b.version);jce_copy_struct(a.updateText,b.updateText);jce_copy_struct(a.userPosterTitle,b.userPosterTitle);jce_copy_struct(a.spliteLine,b.spliteLine);jce_copy_struct(a.positionId,b.positionId);jce_copy_struct(a.loginType,b.loginType);jce_copy_struct(a.userId,b.userId);jce_copy_struct(a.showType,b.showType);jce_copy_struct(a.viewType,b.viewType);jce_copy_struct(a.viewCount,b.viewCount);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAVideoIntroduction_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.intro,b.intro);jce_copy_struct(a.lineTag,b.lineTag);jce_copy_struct(a.morePoster,b.morePoster);jce_copy_struct(a.moreTitle,b.moreTitle);

#define jce_ONAPlaceHolder_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.btnLabel,b.btnLabel);

#define jce_ONACoverIntroduction_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_ONAAppList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.appList,b.appList);jce_copy_struct(a.lines,b.lines);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.needPadding,b.needPadding);

#define jce_ONAMultAppPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.appList,b.appList);jce_copy_struct(a.showNum,b.showNum);

#define jce_ONAVideoListPlayer_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.items,b.items);jce_copy_struct(a.isAutoPlay,b.isAutoPlay);jce_copy_struct(a.adType,b.adType);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.focusInfo,b.focusInfo);jce_copy_struct(a.adSerialNumber,b.adSerialNumber);

#define jce_ONAVipActionTips_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.data,b.data);

#define jce_ONALivePreviewBoard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.vodVideoData,b.vodVideoData);jce_copy_struct(a.liveVideoData,b.liveVideoData);jce_copy_struct(a.action,b.action);jce_copy_struct(a.isAutoPlayer,b.isAutoPlayer);jce_copy_struct(a.isLiveVideo,b.isLiveVideo);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.actors,b.actors);jce_copy_struct(a.likeNums,b.likeNums);jce_copy_struct(a.livePollKey,b.livePollKey);jce_copy_struct(a.starImageUrl,b.starImageUrl);jce_copy_struct(a.title,b.title);jce_copy_struct(a.actorsName,b.actorsName);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.markLabel,b.markLabel);jce_copy_struct(a.isLikeShow,b.isLikeShow);jce_copy_struct(a.popularity,b.popularity);jce_copy_struct(a.isPopularityShow,b.isPopularityShow);

#define jce_ONAFilmPreViewTicket_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.hollywoodItem,b.hollywoodItem);jce_copy_struct(a.buyTicketItem,b.buyTicketItem);jce_copy_struct(a.isShowForVip,b.isShowForVip);jce_copy_struct(a.isCanPlaceHoler,b.isCanPlaceHoler);

#define jce_ONAViewShowBox_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.data,b.data);jce_copy_struct(a.batchData,b.batchData);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.actionBar,b.actionBar);jce_copy_struct(a.rightActionBar,b.rightActionBar);jce_copy_struct(a.title,b.title);

#define jce_ONAReward_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.accountState,b.accountState);jce_copy_struct(a.infoNoReward,b.infoNoReward);jce_copy_struct(a.infoHasReward,b.infoHasReward);jce_copy_struct(a.rewardTip,b.rewardTip);jce_copy_struct(a.rewardKey1,b.rewardKey1);jce_copy_struct(a.idolAccount,b.idolAccount);jce_copy_struct(a.videoInfo,b.videoInfo);jce_copy_struct(a.rewardUrl,b.rewardUrl);

#define jce_ONAMarketingAttentPosterList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.attentPoster,b.attentPoster);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_ONAIpLimitInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.mainTitle,b.mainTitle);jce_copy_struct(a.subTitle,b.subTitle);

#define jce_ONAPromoteList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.entryList,b.entryList);jce_copy_struct(a.title,b.title);jce_copy_struct(a.spliteLine,b.spliteLine);jce_copy_struct(a.batchData,b.batchData);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.extraReportKVs,b.extraReportKVs);

#define jce_ONAGalleryPosterPager_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adType,b.adType);jce_copy_struct(a.adKey,b.adKey);jce_copy_struct(a.posterList,b.posterList);jce_copy_struct(a.extension,b.extension);jce_copy_struct(a.adSerialNumber,b.adSerialNumber);

#define jce_ONASearchMatch_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.searchKey,b.searchKey);jce_copy_struct(a.matchResult,b.matchResult);jce_copy_struct(a.hotWordList,b.hotWordList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONANavPosterList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tabList,b.tabList);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.posterList,b.posterList);

#define jce_ONAScoreList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.scoreList,b.scoreList);jce_copy_struct(a.leftImgUrl,b.leftImgUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONATagDataGroup_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tagList,b.tagList);jce_copy_struct(a.textColor,b.textColor);jce_copy_struct(a.backgroundColor,b.backgroundColor);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.maxLineNum,b.maxLineNum);jce_copy_struct(a.title,b.title);

#define jce_ONANetworkRed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.networkRedId,b.networkRedId);jce_copy_struct(a.poster,b.poster);

#define jce_ONAScrollTips_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.items,b.items);jce_copy_struct(a.scrollTime,b.scrollTime);jce_copy_struct(a.stopTime,b.stopTime);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAEnterPictures_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.items,b.items);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.limitShowCount,b.limitShowCount);jce_copy_struct(a.hasBottomSpace,b.hasBottomSpace);jce_copy_struct(a.extraReportKVs,b.extraReportKVs);jce_copy_struct(a.nonVipItems,b.nonVipItems);

#define jce_ONAWeiboPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.intro,b.intro);jce_copy_struct(a.action,b.action);jce_copy_struct(a.userList,b.userList);jce_copy_struct(a.lines,b.lines);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONASchoolList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.schoolList,b.schoolList);jce_copy_struct(a.type,b.type);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONASearchStarList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starList,b.starList);jce_copy_struct(a.desc,b.desc);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.listType,b.listType);

#define jce_ONAStarMeetList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.meetList,b.meetList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAStarAgenda_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.actor,b.actor);jce_copy_struct(a.agendaTime,b.agendaTime);jce_copy_struct(a.desc,b.desc);jce_copy_struct(a.topTips,b.topTips);jce_copy_struct(a.activityTime,b.activityTime);jce_copy_struct(a.activityAddr,b.activityAddr);jce_copy_struct(a.action,b.action);jce_copy_struct(a.status,b.status);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAStarHotRankInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actor,b.actor);jce_copy_struct(a.detailInfo,b.detailInfo);jce_copy_struct(a.relateFans,b.relateFans);jce_copy_struct(a.detailAction,b.detailAction);jce_copy_struct(a.moreAction,b.moreAction);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.type,b.type);jce_copy_struct(a.giftParam,b.giftParam);jce_copy_struct(a.uiType,b.uiType);

#define jce_ONAStarHotTopicsInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starTopics,b.starTopics);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.style,b.style);

#define jce_ONAFocusStarNews_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starNews,b.starNews);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONADetailsCommentList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedList,b.feedList);jce_copy_struct(a.commentKey,b.commentKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isAllData,b.isAllData);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.title,b.title);jce_copy_struct(a.spliteLine,b.spliteLine);jce_copy_struct(a.moreAction,b.moreAction);jce_copy_struct(a.maxOutShowsize,b.maxOutShowsize);jce_copy_struct(a.allCommentNum,b.allCommentNum);

#define jce_ONAExpandableText_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.content,b.content);jce_copy_struct(a.expanded,b.expanded);jce_copy_struct(a.maxLines,b.maxLines);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAVideoTipsIntro_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.rating,b.rating);jce_copy_struct(a.tipsFirstLine,b.tipsFirstLine);jce_copy_struct(a.tipsSecondLine,b.tipsSecondLine);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAFilmComment_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commentUser,b.commentUser);jce_copy_struct(a.commentTitle,b.commentTitle);jce_copy_struct(a.commentContent,b.commentContent);jce_copy_struct(a.detailAction,b.detailAction);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAClassificationList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.classificationList,b.classificationList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONATimeLineTitle_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.title,b.title);

#define jce_ONATimeLinePoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.poster,b.poster);

#define jce_ONAText_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.text,b.text);jce_copy_struct(a.gravity,b.gravity);jce_copy_struct(a.leftPadding,b.leftPadding);jce_copy_struct(a.rightPadding,b.rightPadding);jce_copy_struct(a.textColor,b.textColor);jce_copy_struct(a.textSize,b.textSize);jce_copy_struct(a.backgroundColor,b.backgroundColor);jce_copy_struct(a.bottomPadding,b.bottomPadding);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONARankItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.item,b.item);

#define jce_ONAExploreTagList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.tagList,b.tagList);jce_copy_struct(a.btnTitle,b.btnTitle);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAHorizontalBar_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAThemePlayer_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.videoItemData,b.videoItemData);jce_copy_struct(a.bgImageUrl,b.bgImageUrl);jce_copy_struct(a.topMarginRatio,b.topMarginRatio);jce_copy_struct(a.heightToWidthRatio,b.heightToWidthRatio);jce_copy_struct(a.textColor,b.textColor);jce_copy_struct(a.bgColor,b.bgColor);jce_copy_struct(a.styleID,b.styleID);jce_copy_struct(a.vipBtnImageUrl,b.vipBtnImageUrl);jce_copy_struct(a.vipAction,b.vipAction);jce_copy_struct(a.priorityBtnImageUrl,b.priorityBtnImageUrl);jce_copy_struct(a.priorityAction,b.priorityAction);jce_copy_struct(a.isvipBtnImageUrl,b.isvipBtnImageUrl);jce_copy_struct(a.isvipAction,b.isvipAction);jce_copy_struct(a.bgImageAction,b.bgImageAction);jce_copy_struct(a.loopVideoItemDataList,b.loopVideoItemDataList);

#define jce_ONACompeteScheduleNew_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);jce_copy_struct(a.leftTeamIconUrl,b.leftTeamIconUrl);jce_copy_struct(a.leftTeamTitle,b.leftTeamTitle);jce_copy_struct(a.rightTeamIconUrl,b.rightTeamIconUrl);jce_copy_struct(a.rightTeamTitle,b.rightTeamTitle);jce_copy_struct(a.infoTitle,b.infoTitle);jce_copy_struct(a.statusTitle,b.statusTitle);jce_copy_struct(a.action,b.action);jce_copy_struct(a.bgStartColor,b.bgStartColor);jce_copy_struct(a.bgEndColor,b.bgEndColor);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.topInfoTitle,b.topInfoTitle);jce_copy_struct(a.statusBgColor,b.statusBgColor);

#define jce_ONAHorizontalList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiDatas,b.uiDatas);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAButtonGroup_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.buttons,b.buttons);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAGroupSwitch_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.groupSwitchList,b.groupSwitchList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAMatchScheduleNew_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);jce_copy_struct(a.matchIcon,b.matchIcon);jce_copy_struct(a.firstText,b.firstText);jce_copy_struct(a.secondText,b.secondText);jce_copy_struct(a.statusTitle,b.statusTitle);jce_copy_struct(a.action,b.action);jce_copy_struct(a.bgStartColor,b.bgStartColor);jce_copy_struct(a.bgEndColor,b.bgEndColor);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.statusBgColor,b.statusBgColor);

#define jce_ONALabelList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tags,b.tags);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONABoldStyleEnterTip_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONASimpleFeed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.iconImgUrls,b.iconImgUrls);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAOptionalText_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.curIndex,b.curIndex);jce_copy_struct(a.optionalList,b.optionalList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.curDataKey,b.curDataKey);

#define jce_ONAPrimaryFeed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedInfo,b.feedInfo);

#define jce_ONAQAPrimaryFeed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.qaFeedInfo,b.qaFeedInfo);

#define jce_ONAWeeklyShowPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.currentDataKey,b.currentDataKey);jce_copy_struct(a.tvshowList,b.tvshowList);jce_copy_struct(a.currentPosterList,b.currentPosterList);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.uiStyle,b.uiStyle);

#define jce_ONAThemeMultiPlayer_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.videoListPlayer,b.videoListPlayer);jce_copy_struct(a.bgImageUrl,b.bgImageUrl);jce_copy_struct(a.topMarginRatio,b.topMarginRatio);jce_copy_struct(a.heightToWidthRatio,b.heightToWidthRatio);jce_copy_struct(a.action,b.action);jce_copy_struct(a.bgColor,b.bgColor);jce_copy_struct(a.titleColor,b.titleColor);

#define jce_ONASimpleAttentPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONADokiCommonItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actorInfo,b.actorInfo);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.rightActionButton,b.rightActionButton);

#define jce_ONAEmptyPlaceholder_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);

#define jce_ONAWillReleaseVertical_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.willReleasePosterList,b.willReleasePosterList);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_ONAWillReleaseHorizontal_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.willReleasePosterList,b.willReleasePosterList);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_ONAEnterTipV2_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.tipKey,b.tipKey);

#define jce_ONACirclePosterList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.report,b.report);

#define jce_ONASearchFilterList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.report,b.report);

#define jce_ONARecommendBanner_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.report,b.report);jce_copy_struct(a.adPlaceholder,b.adPlaceholder);

#define jce_ONARecommendList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.linesPerColumn,b.linesPerColumn);jce_copy_struct(a.report,b.report);

#define jce_SearchSubjectBannerItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.url,b.url);jce_copy_struct(a.action,b.action);jce_copy_struct(a.height,b.height);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONASearchSubjectBannerList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemList,b.itemList);

#define jce_ONASearchSubjectItemList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.recommendList,b.recommendList);jce_copy_struct(a.report,b.report);

#define jce_ONATopicHead_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.topicInfo,b.topicInfo);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_ONASelfVideoFeed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedInfo,b.feedInfo);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.report,b.report);

#define jce_ONASelfVideoFeedList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedList,b.feedList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportEventId,b.reportEventId);jce_copy_struct(a.uiStyle,b.uiStyle);jce_copy_struct(a.totalNum,b.totalNum);jce_copy_struct(a.groupPageAction,b.groupPageAction);

#define jce_ONAVideoTopicCardList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sceneType,b.sceneType);jce_copy_struct(a.cardList,b.cardList);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_ONASmallVideoItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);

#define jce_ONASmallVideoList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.videoList,b.videoList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONARssVerticalVideo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.verticalVideo,b.verticalVideo);jce_copy_struct(a.markLabelList,b.markLabelList);

#define jce_ONARssVerticalVideoList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.videoList,b.videoList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAImmersionVideoList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.videoList,b.videoList);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONASpokesPersonRecommend_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.spokesPersonList,b.spokesPersonList);jce_copy_struct(a.posterTitle,b.posterTitle);jce_copy_struct(a.changeButton,b.changeButton);

#define jce_ONAVIPLevelEntry_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.VIPlevelEntrys,b.VIPlevelEntrys);jce_copy_struct(a.bgImageUrl,b.bgImageUrl);jce_copy_struct(a.posterTitle,b.posterTitle);jce_copy_struct(a.reportInfo,b.reportInfo);

#define jce_ONATopicCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commonCard,b.commonCard);jce_copy_struct(a.videoCard,b.videoCard);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONATopicCardList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cardList,b.cardList);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_ONASearchDokiFeed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.tagTexts,b.tagTexts);jce_copy_struct(a.imageUrls,b.imageUrls);jce_copy_struct(a.videoPoster,b.videoPoster);jce_copy_struct(a.action,b.action);jce_copy_struct(a.report,b.report);jce_copy_struct(a.time,b.time);

#define jce_ONAActorTitle_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actorInfo,b.actorInfo);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.actionTips,b.actionTips);jce_copy_struct(a.action,b.action);jce_copy_struct(a.hasActionArrow,b.hasActionArrow);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.actorCircleColors,b.actorCircleColors);jce_copy_struct(a.actionArrowPosition,b.actionArrowPosition);jce_copy_struct(a.titleColor,b.titleColor);jce_copy_struct(a.actionArrowColor,b.actionArrowColor);jce_copy_struct(a.reportEventId,b.reportEventId);

#define jce_ONADokiDaily_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.splitUrl,b.splitUrl);jce_copy_struct(a.mainBgColor,b.mainBgColor);jce_copy_struct(a.newsList,b.newsList);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.uiType,b.uiType);

#define jce_ONADokiFeedCard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dokiInfo,b.dokiInfo);jce_copy_struct(a.joinBarInfo,b.joinBarInfo);jce_copy_struct(a.feed,b.feed);jce_copy_struct(a.author,b.author);jce_copy_struct(a.rightAction,b.rightAction);jce_copy_struct(a.feedAction,b.feedAction);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.actorCircleColors,b.actorCircleColors);

#define jce_ONADokiFeedCardList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cardList,b.cardList);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_ONADokiFollowStarRankBroadcast_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.rankContent,b.rankContent);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.uiType,b.uiType);

#define jce_ONAShortVideoItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.basicVideo,b.basicVideo);jce_copy_struct(a.itemType,b.itemType);

#define jce_ONADokiFeedPosterList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedList,b.feedList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAMileStone_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONATodayRecommendPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.posterList,b.posterList);jce_copy_struct(a.bigPosterImageList,b.bigPosterImageList);jce_copy_struct(a.shareReportKey,b.shareReportKey);jce_copy_struct(a.shareReportParams,b.shareReportParams);

#define jce_ONAThemeGalleryPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.galleryPoster,b.galleryPoster);jce_copy_struct(a.backgroundImgUrl,b.backgroundImgUrl);jce_copy_struct(a.foregroundImgUrl,b.foregroundImgUrl);jce_copy_struct(a.textColor,b.textColor);

#define jce_ONAHotDiscuss_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.list,b.list);jce_copy_struct(a.iconImgUrl,b.iconImgUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.moreImgUrl,b.moreImgUrl);

#define jce_ONAThemeCataLog_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.list,b.list);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_ONAThemeTitlePoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.titleColor,b.titleColor);jce_copy_struct(a.action,b.action);

#define jce_ONACoverVideoItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAShortVideoPosterList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataList,b.dataList);jce_copy_struct(a.isHaveNextPage,b.isHaveNextPage);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAUserStudyPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.titleInfo,b.titleInfo);jce_copy_struct(a.posterList,b.posterList);jce_copy_struct(a.extraData,b.extraData);jce_copy_struct(a.reportInfo,b.reportInfo);

#define jce_ONAKnowledgePayBar_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.originPrice,b.originPrice);jce_copy_struct(a.vipPrice,b.vipPrice);jce_copy_struct(a.iapOriginPrice,b.iapOriginPrice);jce_copy_struct(a.iapVipPrice,b.iapVipPrice);jce_copy_struct(a.vidCountString,b.vidCountString);jce_copy_struct(a.singleInfo,b.singleInfo);jce_copy_struct(a.vipOnlyInfo,b.vipOnlyInfo);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAIntroductionPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.heightToWidthRatio,b.heightToWidthRatio);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAKnowledgeIntroduction_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subtitle,b.subtitle);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAVRSSDokiList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataList,b.dataList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONACirclePicMoreList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataList,b.dataList);jce_copy_struct(a.totalNum,b.totalNum);jce_copy_struct(a.groupPageAction,b.groupPageAction);jce_copy_struct(a.report,b.report);

#define jce_ONAYooGameListItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cardList,b.cardList);jce_copy_struct(a.bgImgUrl,b.bgImgUrl);jce_copy_struct(a.headImgUrl,b.headImgUrl);jce_copy_struct(a.headImgType,b.headImgType);jce_copy_struct(a.headImgBorder,b.headImgBorder);jce_copy_struct(a.gameName,b.gameName);jce_copy_struct(a.gameAuthor,b.gameAuthor);jce_copy_struct(a.gameDescription,b.gameDescription);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONACircleMsgImage_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.circleMsgImg,b.circleMsgImg);jce_copy_struct(a.report,b.report);

#define jce_ONASearchStarBanner_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starName,b.starName);jce_copy_struct(a.bannerType,b.bannerType);jce_copy_struct(a.intro,b.intro);jce_copy_struct(a.leftTitle,b.leftTitle);jce_copy_struct(a.leftNum,b.leftNum);jce_copy_struct(a.rightTitle,b.rightTitle);jce_copy_struct(a.rightNum,b.rightNum);jce_copy_struct(a.artAImageUrl,b.artAImageUrl);jce_copy_struct(a.artBImageUrl,b.artBImageUrl);jce_copy_struct(a.backgroundUrl,b.backgroundUrl);jce_copy_struct(a.buttonUrl,b.buttonUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.rankAction,b.rankAction);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONASearchYooList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cardList,b.cardList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAImage_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.topPadding,b.topPadding);jce_copy_struct(a.leftPadding,b.leftPadding);jce_copy_struct(a.bottomPadding,b.bottomPadding);jce_copy_struct(a.rightPadding,b.rightPadding);jce_copy_struct(a.heightToWidthRatio,b.heightToWidthRatio);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONAThemeAdPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.gallerAdPoster,b.gallerAdPoster);jce_copy_struct(a.bgImageUrl,b.bgImageUrl);jce_copy_struct(a.topMarginRatio,b.topMarginRatio);jce_copy_struct(a.heightToWidthRatio,b.heightToWidthRatio);jce_copy_struct(a.textColor,b.textColor);jce_copy_struct(a.bgColor,b.bgColor);

#define jce_ONARelatedRecommendImgItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imgs,b.imgs);jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.imgPreViewHasRecommends,b.imgPreViewHasRecommends);jce_copy_struct(a.reportEventId,b.reportEventId);

#define jce_ONARelatedRecommendImgList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imgs,b.imgs);

#define jce_ONAShortStripLongBoard_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.shortVideoPoster,b.shortVideoPoster);jce_copy_struct(a.longVideoPoster,b.longVideoPoster);jce_copy_struct(a.action,b.action);jce_copy_struct(a.shortVideoData,b.shortVideoData);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.insertNewLineDataKey,b.insertNewLineDataKey);jce_copy_struct(a.insertNewLineProgress,b.insertNewLineProgress);jce_copy_struct(a.reportEventId,b.reportEventId);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONATopicCoverPosterList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.posterList,b.posterList);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);



#endif
