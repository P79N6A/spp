// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_ad.jce'
// **********************************************************************

#ifndef __QQVIDEO_AD_H_
#define __QQVIDEO_AD_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"
#include "qqvideo_ad_common.h"


namespace jce
{
    struct ONAAdPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAAdPoster";
        }
        static string MD5()
        {
            return "3dd5cfd4fe18b3e49841d3e447e85aed";
        }
        ONAAdPoster()
        :adId(""),title(""),subtitle(""),imageUrl(""),type(0),picType(0),downloadUrl(""),uiStyle(0),adReportKey(""),adReportParams(""),downloadType(0),vid("")
        {
        }
        void resetDefautlt()
        {
            adId = "";
            title = "";
            subtitle = "";
            imageUrl = "";
            type = 0;
            picType = 0;
            downloadUrl = "";
            uiStyle = 0;
            adReportKey = "";
            adReportParams = "";
            downloadType = 0;
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adId, 0);
            _os.write(title, 1);
            _os.write(subtitle, 2);
            _os.write(corner, 3);
            _os.write(markLabelList, 4);
            _os.write(imageUrl, 5);
            _os.write(report, 6);
            _os.write(type, 7);
            _os.write(picType, 8);
            _os.write(downloadUrl, 9);
            _os.write(shareItem, 10);
            _os.write(uiStyle, 11);
            _os.write(extraParam, 12);
            _os.write(adReportKey, 13);
            _os.write(adReportParams, 14);
            _os.write(downloadType, 15);
            _os.write(adExperiment, 16);
            _os.write(vid, 17);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adId, 0, false);
            _is.read(title, 1, false);
            _is.read(subtitle, 2, false);
            _is.read(corner, 3, false);
            _is.read(markLabelList, 4, false);
            _is.read(imageUrl, 5, false);
            _is.read(report, 6, false);
            _is.read(type, 7, false);
            _is.read(picType, 8, false);
            _is.read(downloadUrl, 9, false);
            _is.read(shareItem, 10, false);
            _is.read(uiStyle, 11, false);
            _is.read(extraParam, 12, false);
            _is.read(adReportKey, 13, false);
            _is.read(adReportParams, 14, false);
            _is.read(downloadType, 15, false);
            _is.read(adExperiment, 16, false);
            _is.read(vid, 17, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adId,"adId");
            _ds.display(title,"title");
            _ds.display(subtitle,"subtitle");
            _ds.display(corner,"corner");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(report,"report");
            _ds.display(type,"type");
            _ds.display(picType,"picType");
            _ds.display(downloadUrl,"downloadUrl");
            _ds.display(shareItem,"shareItem");
            _ds.display(uiStyle,"uiStyle");
            _ds.display(extraParam,"extraParam");
            _ds.display(adReportKey,"adReportKey");
            _ds.display(adReportParams,"adReportParams");
            _ds.display(downloadType,"downloadType");
            _ds.display(adExperiment,"adExperiment");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adId, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subtitle, true);
            _ds.displaySimple(corner, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(report, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(picType, true);
            _ds.displaySimple(downloadUrl, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(uiStyle, true);
            _ds.displaySimple(extraParam, true);
            _ds.displaySimple(adReportKey, true);
            _ds.displaySimple(adReportParams, true);
            _ds.displaySimple(downloadType, true);
            _ds.displaySimple(adExperiment, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string adId;
        std::string title;
        std::string subtitle;
        jce::AdCorner corner;
        vector<jce::MarkLabel> markLabelList;
        std::string imageUrl;
        map<std::string, jce::AdReport> report;
        taf::Int32 type;
        taf::Int32 picType;
        std::string downloadUrl;
        jce::AdShareItem shareItem;
        taf::Int32 uiStyle;
        map<std::string, std::string> extraParam;
        std::string adReportKey;
        std::string adReportParams;
        taf::Int32 downloadType;
        map<std::string, std::string> adExperiment;
        std::string vid;
    };
    inline bool operator==(const ONAAdPoster&l, const ONAAdPoster&r)
    {
        return l.adId == r.adId && l.title == r.title && l.subtitle == r.subtitle && l.corner == r.corner && l.markLabelList == r.markLabelList && l.imageUrl == r.imageUrl && l.report == r.report && l.type == r.type && l.picType == r.picType && l.downloadUrl == r.downloadUrl && l.shareItem == r.shareItem && l.uiStyle == r.uiStyle && l.extraParam == r.extraParam && l.adReportKey == r.adReportKey && l.adReportParams == r.adReportParams && l.downloadType == r.downloadType && l.adExperiment == r.adExperiment && l.vid == r.vid;
    }
    inline bool operator!=(const ONAAdPoster&l, const ONAAdPoster&r)
    {
        return !(l == r);
    }

    struct ONAVideoAdPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAVideoAdPoster";
        }
        static string MD5()
        {
            return "44dbdfe198d2f9afd1bacf7272128eaa";
        }
        ONAVideoAdPoster()
        :adId(""),title(""),subtitle(""),imageUrl(""),vid(""),type(0),downloadUrl(""),isAutoPlayNext(false),adReportKey(""),adReportParams(""),isAutoPlayer(false)
        {
        }
        void resetDefautlt()
        {
            adId = "";
            title = "";
            subtitle = "";
            imageUrl = "";
            vid = "";
            type = 0;
            downloadUrl = "";
            isAutoPlayNext = false;
            adReportKey = "";
            adReportParams = "";
            isAutoPlayer = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adId, 0);
            _os.write(title, 1);
            _os.write(subtitle, 2);
            _os.write(corner, 3);
            _os.write(markLabelList, 4);
            _os.write(imageUrl, 5);
            _os.write(action, 6);
            _os.write(vid, 7);
            _os.write(report, 8);
            _os.write(type, 9);
            _os.write(downloadUrl, 10);
            _os.write(shareItem, 11);
            _os.write(extraParam, 12);
            _os.write(isAutoPlayNext, 13);
            _os.write(adReportKey, 14);
            _os.write(adReportParams, 15);
            _os.write(adExperiment, 16);
            _os.write(isAutoPlayer, 17);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adId, 0, false);
            _is.read(title, 1, false);
            _is.read(subtitle, 2, false);
            _is.read(corner, 3, false);
            _is.read(markLabelList, 4, false);
            _is.read(imageUrl, 5, false);
            _is.read(action, 6, false);
            _is.read(vid, 7, false);
            _is.read(report, 8, false);
            _is.read(type, 9, false);
            _is.read(downloadUrl, 10, false);
            _is.read(shareItem, 11, false);
            _is.read(extraParam, 12, false);
            _is.read(isAutoPlayNext, 13, false);
            _is.read(adReportKey, 14, false);
            _is.read(adReportParams, 15, false);
            _is.read(adExperiment, 16, false);
            _is.read(isAutoPlayer, 17, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adId,"adId");
            _ds.display(title,"title");
            _ds.display(subtitle,"subtitle");
            _ds.display(corner,"corner");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(action,"action");
            _ds.display(vid,"vid");
            _ds.display(report,"report");
            _ds.display(type,"type");
            _ds.display(downloadUrl,"downloadUrl");
            _ds.display(shareItem,"shareItem");
            _ds.display(extraParam,"extraParam");
            _ds.display(isAutoPlayNext,"isAutoPlayNext");
            _ds.display(adReportKey,"adReportKey");
            _ds.display(adReportParams,"adReportParams");
            _ds.display(adExperiment,"adExperiment");
            _ds.display(isAutoPlayer,"isAutoPlayer");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adId, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subtitle, true);
            _ds.displaySimple(corner, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(report, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(downloadUrl, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(extraParam, true);
            _ds.displaySimple(isAutoPlayNext, true);
            _ds.displaySimple(adReportKey, true);
            _ds.displaySimple(adReportParams, true);
            _ds.displaySimple(adExperiment, true);
            _ds.displaySimple(isAutoPlayer, false);
            return _os;
        }
    public:
        std::string adId;
        std::string title;
        std::string subtitle;
        jce::AdCorner corner;
        vector<jce::MarkLabel> markLabelList;
        std::string imageUrl;
        jce::Action action;
        std::string vid;
        map<std::string, jce::AdReport> report;
        taf::Int32 type;
        std::string downloadUrl;
        jce::AdShareItem shareItem;
        map<std::string, std::string> extraParam;
        taf::Bool isAutoPlayNext;
        std::string adReportKey;
        std::string adReportParams;
        map<std::string, std::string> adExperiment;
        taf::Bool isAutoPlayer;
    };
    inline bool operator==(const ONAVideoAdPoster&l, const ONAVideoAdPoster&r)
    {
        return l.adId == r.adId && l.title == r.title && l.subtitle == r.subtitle && l.corner == r.corner && l.markLabelList == r.markLabelList && l.imageUrl == r.imageUrl && l.action == r.action && l.vid == r.vid && l.report == r.report && l.type == r.type && l.downloadUrl == r.downloadUrl && l.shareItem == r.shareItem && l.extraParam == r.extraParam && l.isAutoPlayNext == r.isAutoPlayNext && l.adReportKey == r.adReportKey && l.adReportParams == r.adReportParams && l.adExperiment == r.adExperiment && l.isAutoPlayer == r.isAutoPlayer;
    }
    inline bool operator!=(const ONAVideoAdPoster&l, const ONAVideoAdPoster&r)
    {
        return !(l == r);
    }

    struct ONABrandVideoAdPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONABrandVideoAdPoster";
        }
        static string MD5()
        {
            return "a3de8e14627a3e60abec7c867faa9f16";
        }
        ONABrandVideoAdPoster()
        :orderId(""),brandPhotoUrl(""),brandName(""),slogan(""),imageUrl(""),vid(""),isAutoPlayer(true),debugMsg("")
        {
        }
        void resetDefautlt()
        {
            orderId = "";
            brandPhotoUrl = "";
            brandName = "";
            slogan = "";
            imageUrl = "";
            vid = "";
            isAutoPlayer = true;
            debugMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(orderId, 0);
            _os.write(exposureItem, 1);
            _os.write(positionItem, 2);
            _os.write(brandPhotoUrl, 3);
            _os.write(brandName, 4);
            _os.write(slogan, 5);
            _os.write(actionButtonInfo, 6);
            _os.write(imageUrl, 7);
            _os.write(brandAction, 8);
            _os.write(videoAction, 9);
            _os.write(vid, 10);
            _os.write(shareItem, 11);
            _os.write(isAutoPlayer, 12);
            _os.write(debugMsg, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(orderId, 0, true);
            _is.read(exposureItem, 1, false);
            _is.read(positionItem, 2, false);
            _is.read(brandPhotoUrl, 3, false);
            _is.read(brandName, 4, false);
            _is.read(slogan, 5, false);
            _is.read(actionButtonInfo, 6, false);
            _is.read(imageUrl, 7, false);
            _is.read(brandAction, 8, false);
            _is.read(videoAction, 9, false);
            _is.read(vid, 10, false);
            _is.read(shareItem, 11, false);
            _is.read(isAutoPlayer, 12, false);
            _is.read(debugMsg, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(orderId,"orderId");
            _ds.display(exposureItem,"exposureItem");
            _ds.display(positionItem,"positionItem");
            _ds.display(brandPhotoUrl,"brandPhotoUrl");
            _ds.display(brandName,"brandName");
            _ds.display(slogan,"slogan");
            _ds.display(actionButtonInfo,"actionButtonInfo");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(brandAction,"brandAction");
            _ds.display(videoAction,"videoAction");
            _ds.display(vid,"vid");
            _ds.display(shareItem,"shareItem");
            _ds.display(isAutoPlayer,"isAutoPlayer");
            _ds.display(debugMsg,"debugMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(orderId, true);
            _ds.displaySimple(exposureItem, true);
            _ds.displaySimple(positionItem, true);
            _ds.displaySimple(brandPhotoUrl, true);
            _ds.displaySimple(brandName, true);
            _ds.displaySimple(slogan, true);
            _ds.displaySimple(actionButtonInfo, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(brandAction, true);
            _ds.displaySimple(videoAction, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(isAutoPlayer, true);
            _ds.displaySimple(debugMsg, false);
            return _os;
        }
    public:
        std::string orderId;
        jce::AdInSideVideoExposureItem exposureItem;
        jce::AdPositionItem positionItem;
        std::string brandPhotoUrl;
        std::string brandName;
        std::string slogan;
        jce::AdActionButtonInfo actionButtonInfo;
        std::string imageUrl;
        jce::AdAction brandAction;
        jce::AdAction videoAction;
        std::string vid;
        jce::AdShareItem shareItem;
        taf::Bool isAutoPlayer;
        std::string debugMsg;
    };
    inline bool operator==(const ONABrandVideoAdPoster&l, const ONABrandVideoAdPoster&r)
    {
        return l.orderId == r.orderId && l.exposureItem == r.exposureItem && l.positionItem == r.positionItem && l.brandPhotoUrl == r.brandPhotoUrl && l.brandName == r.brandName && l.slogan == r.slogan && l.actionButtonInfo == r.actionButtonInfo && l.imageUrl == r.imageUrl && l.brandAction == r.brandAction && l.videoAction == r.videoAction && l.vid == r.vid && l.shareItem == r.shareItem && l.isAutoPlayer == r.isAutoPlayer && l.debugMsg == r.debugMsg;
    }
    inline bool operator!=(const ONABrandVideoAdPoster&l, const ONABrandVideoAdPoster&r)
    {
        return !(l == r);
    }

    struct ONAAppPullAdPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAAppPullAdPoster";
        }
        static string MD5()
        {
            return "b922a27e2682554e305a57dd59697329";
        }
        ONAAppPullAdPoster()
        :title(""),subtitle(""),imageUrl(""),type(0),uiStyle(0),reportKey(""),reportParam(""),downloadUrl("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            subtitle = "";
            imageUrl = "";
            type = 0;
            uiStyle = 0;
            reportKey = "";
            reportParam = "";
            downloadUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(subtitle, 1);
            _os.write(corner, 2);
            _os.write(imageUrl, 3);
            _os.write(type, 4);
            _os.write(uiStyle, 5);
            _os.write(action, 6);
            _os.write(reportKey, 7);
            _os.write(reportParam, 8);
            _os.write(downloadUrl, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(subtitle, 1, false);
            _is.read(corner, 2, false);
            _is.read(imageUrl, 3, false);
            _is.read(type, 4, false);
            _is.read(uiStyle, 5, false);
            _is.read(action, 6, false);
            _is.read(reportKey, 7, false);
            _is.read(reportParam, 8, false);
            _is.read(downloadUrl, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(subtitle,"subtitle");
            _ds.display(corner,"corner");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(type,"type");
            _ds.display(uiStyle,"uiStyle");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParam,"reportParam");
            _ds.display(downloadUrl,"downloadUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subtitle, true);
            _ds.displaySimple(corner, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(uiStyle, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParam, true);
            _ds.displaySimple(downloadUrl, false);
            return _os;
        }
    public:
        std::string title;
        std::string subtitle;
        jce::AdCorner corner;
        std::string imageUrl;
        taf::Int32 type;
        taf::Int32 uiStyle;
        jce::Action action;
        std::string reportKey;
        std::string reportParam;
        std::string downloadUrl;
    };
    inline bool operator==(const ONAAppPullAdPoster&l, const ONAAppPullAdPoster&r)
    {
        return l.title == r.title && l.subtitle == r.subtitle && l.corner == r.corner && l.imageUrl == r.imageUrl && l.type == r.type && l.uiStyle == r.uiStyle && l.action == r.action && l.reportKey == r.reportKey && l.reportParam == r.reportParam && l.downloadUrl == r.downloadUrl;
    }
    inline bool operator!=(const ONAAppPullAdPoster&l, const ONAAppPullAdPoster&r)
    {
        return !(l == r);
    }

    struct ONALeftImageRightTextAdPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONALeftImageRightTextAdPoster";
        }
        static string MD5()
        {
            return "63c296915dd7dc92f4b927d32494dc86";
        }
        ONALeftImageRightTextAdPoster()
        :seq(0),adId(""),title(""),subtitle(""),imageUrl(""),type(0),downloadUrl(""),adReportKey(""),adReportParams("")
        {
        }
        void resetDefautlt()
        {
            seq = 0;
            adId = "";
            title = "";
            subtitle = "";
            imageUrl = "";
            type = 0;
            downloadUrl = "";
            adReportKey = "";
            adReportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(seq, 0);
            _os.write(adId, 1);
            _os.write(title, 2);
            _os.write(subtitle, 3);
            _os.write(corner, 4);
            _os.write(markLabel, 5);
            _os.write(imageUrl, 6);
            _os.write(report, 7);
            _os.write(type, 8);
            _os.write(downloadUrl, 9);
            _os.write(extraParam, 10);
            _os.write(adReportKey, 11);
            _os.write(adReportParams, 12);
            _os.write(adExperiment, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(seq, 0, true);
            _is.read(adId, 1, false);
            _is.read(title, 2, false);
            _is.read(subtitle, 3, false);
            _is.read(corner, 4, false);
            _is.read(markLabel, 5, false);
            _is.read(imageUrl, 6, false);
            _is.read(report, 7, false);
            _is.read(type, 8, false);
            _is.read(downloadUrl, 9, false);
            _is.read(extraParam, 10, false);
            _is.read(adReportKey, 11, false);
            _is.read(adReportParams, 12, false);
            _is.read(adExperiment, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(seq,"seq");
            _ds.display(adId,"adId");
            _ds.display(title,"title");
            _ds.display(subtitle,"subtitle");
            _ds.display(corner,"corner");
            _ds.display(markLabel,"markLabel");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(report,"report");
            _ds.display(type,"type");
            _ds.display(downloadUrl,"downloadUrl");
            _ds.display(extraParam,"extraParam");
            _ds.display(adReportKey,"adReportKey");
            _ds.display(adReportParams,"adReportParams");
            _ds.display(adExperiment,"adExperiment");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(adId, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subtitle, true);
            _ds.displaySimple(corner, true);
            _ds.displaySimple(markLabel, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(report, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(downloadUrl, true);
            _ds.displaySimple(extraParam, true);
            _ds.displaySimple(adReportKey, true);
            _ds.displaySimple(adReportParams, true);
            _ds.displaySimple(adExperiment, false);
            return _os;
        }
    public:
        taf::Int32 seq;
        std::string adId;
        std::string title;
        std::string subtitle;
        jce::AdCorner corner;
        jce::MarkLabel markLabel;
        std::string imageUrl;
        map<std::string, jce::AdReport> report;
        taf::Int32 type;
        std::string downloadUrl;
        map<std::string, std::string> extraParam;
        std::string adReportKey;
        std::string adReportParams;
        map<std::string, std::string> adExperiment;
    };
    inline bool operator==(const ONALeftImageRightTextAdPoster&l, const ONALeftImageRightTextAdPoster&r)
    {
        return l.seq == r.seq && l.adId == r.adId && l.title == r.title && l.subtitle == r.subtitle && l.corner == r.corner && l.markLabel == r.markLabel && l.imageUrl == r.imageUrl && l.report == r.report && l.type == r.type && l.downloadUrl == r.downloadUrl && l.extraParam == r.extraParam && l.adReportKey == r.adReportKey && l.adReportParams == r.adReportParams && l.adExperiment == r.adExperiment;
    }
    inline bool operator!=(const ONALeftImageRightTextAdPoster&l, const ONALeftImageRightTextAdPoster&r)
    {
        return !(l == r);
    }

    struct AdFocusPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdFocusPoster";
        }
        static string MD5()
        {
            return "47860adf464b28b266e0a2a80ef9cc81";
        }
        AdFocusPoster()
        :adId(""),title(""),subtitle(""),imageUrl(""),type(0),downloadUrl(""),insertIndex(0),adReportKey(""),adReportParams(""),downloadType(0),vid("")
        {
        }
        void resetDefautlt()
        {
            adId = "";
            title = "";
            subtitle = "";
            imageUrl = "";
            type = 0;
            downloadUrl = "";
            insertIndex = 0;
            adReportKey = "";
            adReportParams = "";
            downloadType = 0;
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adId, 0);
            _os.write(title, 1);
            _os.write(subtitle, 2);
            _os.write(corner, 3);
            _os.write(markLabelList, 4);
            _os.write(imageUrl, 5);
            _os.write(clickReport, 6);
            _os.write(exposureReport, 7);
            _os.write(effectReport, 8);
            _os.write(type, 9);
            _os.write(downloadUrl, 10);
            _os.write(extraParam, 11);
            _os.write(insertIndex, 12);
            _os.write(adReportKey, 13);
            _os.write(adReportParams, 14);
            _os.write(downloadType, 15);
            _os.write(playReport, 16);
            _os.write(vid, 17);
            _os.write(adExperiment, 18);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adId, 0, false);
            _is.read(title, 1, false);
            _is.read(subtitle, 2, false);
            _is.read(corner, 3, false);
            _is.read(markLabelList, 4, false);
            _is.read(imageUrl, 5, false);
            _is.read(clickReport, 6, false);
            _is.read(exposureReport, 7, false);
            _is.read(effectReport, 8, false);
            _is.read(type, 9, false);
            _is.read(downloadUrl, 10, false);
            _is.read(extraParam, 11, false);
            _is.read(insertIndex, 12, false);
            _is.read(adReportKey, 13, false);
            _is.read(adReportParams, 14, false);
            _is.read(downloadType, 15, false);
            _is.read(playReport, 16, false);
            _is.read(vid, 17, false);
            _is.read(adExperiment, 18, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adId,"adId");
            _ds.display(title,"title");
            _ds.display(subtitle,"subtitle");
            _ds.display(corner,"corner");
            _ds.display(markLabelList,"markLabelList");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(clickReport,"clickReport");
            _ds.display(exposureReport,"exposureReport");
            _ds.display(effectReport,"effectReport");
            _ds.display(type,"type");
            _ds.display(downloadUrl,"downloadUrl");
            _ds.display(extraParam,"extraParam");
            _ds.display(insertIndex,"insertIndex");
            _ds.display(adReportKey,"adReportKey");
            _ds.display(adReportParams,"adReportParams");
            _ds.display(downloadType,"downloadType");
            _ds.display(playReport,"playReport");
            _ds.display(vid,"vid");
            _ds.display(adExperiment,"adExperiment");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adId, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subtitle, true);
            _ds.displaySimple(corner, true);
            _ds.displaySimple(markLabelList, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(clickReport, true);
            _ds.displaySimple(exposureReport, true);
            _ds.displaySimple(effectReport, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(downloadUrl, true);
            _ds.displaySimple(extraParam, true);
            _ds.displaySimple(insertIndex, true);
            _ds.displaySimple(adReportKey, true);
            _ds.displaySimple(adReportParams, true);
            _ds.displaySimple(downloadType, true);
            _ds.displaySimple(playReport, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(adExperiment, false);
            return _os;
        }
    public:
        std::string adId;
        std::string title;
        std::string subtitle;
        jce::AdCorner corner;
        vector<jce::MarkLabel> markLabelList;
        std::string imageUrl;
        jce::AdReport clickReport;
        jce::AdReport exposureReport;
        jce::AdReport effectReport;
        taf::Int32 type;
        std::string downloadUrl;
        map<std::string, std::string> extraParam;
        taf::Int32 insertIndex;
        std::string adReportKey;
        std::string adReportParams;
        taf::Int32 downloadType;
        jce::AdReport playReport;
        std::string vid;
        map<std::string, std::string> adExperiment;
    };
    inline bool operator==(const AdFocusPoster&l, const AdFocusPoster&r)
    {
        return l.adId == r.adId && l.title == r.title && l.subtitle == r.subtitle && l.corner == r.corner && l.markLabelList == r.markLabelList && l.imageUrl == r.imageUrl && l.clickReport == r.clickReport && l.exposureReport == r.exposureReport && l.effectReport == r.effectReport && l.type == r.type && l.downloadUrl == r.downloadUrl && l.extraParam == r.extraParam && l.insertIndex == r.insertIndex && l.adReportKey == r.adReportKey && l.adReportParams == r.adReportParams && l.downloadType == r.downloadType && l.playReport == r.playReport && l.vid == r.vid && l.adExperiment == r.adExperiment;
    }
    inline bool operator!=(const AdFocusPoster&l, const AdFocusPoster&r)
    {
        return !(l == r);
    }

    struct AdFocusInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdFocusInfo";
        }
        static string MD5()
        {
            return "f26d72d7c4c9fe8b1c1065b779108a33";
        }
        AdFocusInfo()
        :adStrategy(0)
        {
        }
        void resetDefautlt()
        {
            adStrategy = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adStrategy, 0);
            _os.write(adFocusPostor, 1);
            _os.write(sdkResponseInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adStrategy, 0, false);
            _is.read(adFocusPostor, 1, false);
            _is.read(sdkResponseInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adStrategy,"adStrategy");
            _ds.display(adFocusPostor,"adFocusPostor");
            _ds.display(sdkResponseInfo,"sdkResponseInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adStrategy, true);
            _ds.displaySimple(adFocusPostor, true);
            _ds.displaySimple(sdkResponseInfo, false);
            return _os;
        }
    public:
        taf::Int32 adStrategy;
        vector<jce::AdFocusPoster> adFocusPostor;
        jce::AdSdkResponseInfo sdkResponseInfo;
    };
    inline bool operator==(const AdFocusInfo&l, const AdFocusInfo&r)
    {
        return l.adStrategy == r.adStrategy && l.adFocusPostor == r.adFocusPostor && l.sdkResponseInfo == r.sdkResponseInfo;
    }
    inline bool operator!=(const AdFocusInfo&l, const AdFocusInfo&r)
    {
        return !(l == r);
    }

    struct AdRecommendSearchItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdRecommendSearchItem";
        }
        static string MD5()
        {
            return "cdc09ef508cdb59493a85639242d44bb";
        }
        AdRecommendSearchItem()
        :title(""),adIcon(""),adIconColor(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            adIcon = "";
            adIconColor = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adBaseInfo, 0);
            _os.write(title, 1);
            _os.write(adIcon, 2);
            _os.write(adIconColor, 3);
            _os.write(action, 4);
            _os.write(reportKey, 5);
            _os.write(reportParams, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adBaseInfo, 0, false);
            _is.read(title, 1, false);
            _is.read(adIcon, 2, false);
            _is.read(adIconColor, 3, false);
            _is.read(action, 4, false);
            _is.read(reportKey, 5, false);
            _is.read(reportParams, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adBaseInfo,"adBaseInfo");
            _ds.display(title,"title");
            _ds.display(adIcon,"adIcon");
            _ds.display(adIconColor,"adIconColor");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adBaseInfo, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(adIcon, true);
            _ds.displaySimple(adIconColor, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        jce::AdBaseInfo adBaseInfo;
        std::string title;
        std::string adIcon;
        std::string adIconColor;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const AdRecommendSearchItem&l, const AdRecommendSearchItem&r)
    {
        return l.adBaseInfo == r.adBaseInfo && l.title == r.title && l.adIcon == r.adIcon && l.adIconColor == r.adIconColor && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const AdRecommendSearchItem&l, const AdRecommendSearchItem&r)
    {
        return !(l == r);
    }

    struct ONASearchRecommendAdPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONASearchRecommendAdPoster";
        }
        static string MD5()
        {
            return "e45805568714d44c2065e0c5782619a9";
        }
        ONASearchRecommendAdPoster()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adRecommendList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adRecommendList, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adRecommendList,"adRecommendList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adRecommendList, false);
            return _os;
        }
    public:
        vector<jce::AdRecommendSearchItem> adRecommendList;
    };
    inline bool operator==(const ONASearchRecommendAdPoster&l, const ONASearchRecommendAdPoster&r)
    {
        return l.adRecommendList == r.adRecommendList;
    }
    inline bool operator!=(const ONASearchRecommendAdPoster&l, const ONASearchRecommendAdPoster&r)
    {
        return !(l == r);
    }

    struct AdTitleInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdTitleInfo";
        }
        static string MD5()
        {
            return "e5f305c5e8aeba31bb48e9fc30f109d3";
        }
        AdTitleInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adBaseInfo, 0);
            _os.write(adPoster, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adBaseInfo, 0, false);
            _is.read(adPoster, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adBaseInfo,"adBaseInfo");
            _ds.display(adPoster,"adPoster");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adBaseInfo, true);
            _ds.displaySimple(adPoster, false);
            return _os;
        }
    public:
        jce::AdBaseInfo adBaseInfo;
        jce::Poster adPoster;
    };
    inline bool operator==(const AdTitleInfo&l, const AdTitleInfo&r)
    {
        return l.adBaseInfo == r.adBaseInfo && l.adPoster == r.adPoster;
    }
    inline bool operator!=(const AdTitleInfo&l, const AdTitleInfo&r)
    {
        return !(l == r);
    }

    struct ONAAdEmptyOrderPoster : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ONAAdEmptyOrderPoster";
        }
        static string MD5()
        {
            return "6b7e1de14aea326cb63032ba2f8f046d";
        }
        ONAAdEmptyOrderPoster()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(adBaseInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(adBaseInfo, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(adBaseInfo,"adBaseInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(adBaseInfo, false);
            return _os;
        }
    public:
        jce::AdBaseInfo adBaseInfo;
    };
    inline bool operator==(const ONAAdEmptyOrderPoster&l, const ONAAdEmptyOrderPoster&r)
    {
        return l.adBaseInfo == r.adBaseInfo;
    }
    inline bool operator!=(const ONAAdEmptyOrderPoster&l, const ONAAdEmptyOrderPoster&r)
    {
        return !(l == r);
    }


}

#define jce_ONAAdPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adId,b.adId);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subtitle,b.subtitle);jce_copy_struct(a.corner,b.corner);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.report,b.report);jce_copy_struct(a.type,b.type);jce_copy_struct(a.picType,b.picType);jce_copy_struct(a.downloadUrl,b.downloadUrl);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.uiStyle,b.uiStyle);jce_copy_struct(a.extraParam,b.extraParam);jce_copy_struct(a.adReportKey,b.adReportKey);jce_copy_struct(a.adReportParams,b.adReportParams);jce_copy_struct(a.downloadType,b.downloadType);jce_copy_struct(a.adExperiment,b.adExperiment);jce_copy_struct(a.vid,b.vid);

#define jce_ONAVideoAdPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adId,b.adId);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subtitle,b.subtitle);jce_copy_struct(a.corner,b.corner);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.report,b.report);jce_copy_struct(a.type,b.type);jce_copy_struct(a.downloadUrl,b.downloadUrl);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.extraParam,b.extraParam);jce_copy_struct(a.isAutoPlayNext,b.isAutoPlayNext);jce_copy_struct(a.adReportKey,b.adReportKey);jce_copy_struct(a.adReportParams,b.adReportParams);jce_copy_struct(a.adExperiment,b.adExperiment);jce_copy_struct(a.isAutoPlayer,b.isAutoPlayer);

#define jce_ONABrandVideoAdPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.orderId,b.orderId);jce_copy_struct(a.exposureItem,b.exposureItem);jce_copy_struct(a.positionItem,b.positionItem);jce_copy_struct(a.brandPhotoUrl,b.brandPhotoUrl);jce_copy_struct(a.brandName,b.brandName);jce_copy_struct(a.slogan,b.slogan);jce_copy_struct(a.actionButtonInfo,b.actionButtonInfo);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.brandAction,b.brandAction);jce_copy_struct(a.videoAction,b.videoAction);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.isAutoPlayer,b.isAutoPlayer);jce_copy_struct(a.debugMsg,b.debugMsg);

#define jce_ONAAppPullAdPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.subtitle,b.subtitle);jce_copy_struct(a.corner,b.corner);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.type,b.type);jce_copy_struct(a.uiStyle,b.uiStyle);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParam,b.reportParam);jce_copy_struct(a.downloadUrl,b.downloadUrl);

#define jce_ONALeftImageRightTextAdPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.adId,b.adId);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subtitle,b.subtitle);jce_copy_struct(a.corner,b.corner);jce_copy_struct(a.markLabel,b.markLabel);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.report,b.report);jce_copy_struct(a.type,b.type);jce_copy_struct(a.downloadUrl,b.downloadUrl);jce_copy_struct(a.extraParam,b.extraParam);jce_copy_struct(a.adReportKey,b.adReportKey);jce_copy_struct(a.adReportParams,b.adReportParams);jce_copy_struct(a.adExperiment,b.adExperiment);

#define jce_AdFocusPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adId,b.adId);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subtitle,b.subtitle);jce_copy_struct(a.corner,b.corner);jce_copy_struct(a.markLabelList,b.markLabelList);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.clickReport,b.clickReport);jce_copy_struct(a.exposureReport,b.exposureReport);jce_copy_struct(a.effectReport,b.effectReport);jce_copy_struct(a.type,b.type);jce_copy_struct(a.downloadUrl,b.downloadUrl);jce_copy_struct(a.extraParam,b.extraParam);jce_copy_struct(a.insertIndex,b.insertIndex);jce_copy_struct(a.adReportKey,b.adReportKey);jce_copy_struct(a.adReportParams,b.adReportParams);jce_copy_struct(a.downloadType,b.downloadType);jce_copy_struct(a.playReport,b.playReport);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.adExperiment,b.adExperiment);

#define jce_AdFocusInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adStrategy,b.adStrategy);jce_copy_struct(a.adFocusPostor,b.adFocusPostor);jce_copy_struct(a.sdkResponseInfo,b.sdkResponseInfo);

#define jce_AdRecommendSearchItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adBaseInfo,b.adBaseInfo);jce_copy_struct(a.title,b.title);jce_copy_struct(a.adIcon,b.adIcon);jce_copy_struct(a.adIconColor,b.adIconColor);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_ONASearchRecommendAdPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adRecommendList,b.adRecommendList);

#define jce_AdTitleInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adBaseInfo,b.adBaseInfo);jce_copy_struct(a.adPoster,b.adPoster);

#define jce_ONAAdEmptyOrderPoster_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.adBaseInfo,b.adBaseInfo);



#endif
