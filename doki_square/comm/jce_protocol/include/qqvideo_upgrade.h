// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_upgrade.jce'
// **********************************************************************

#ifndef __QQVIDEO_UPGRADE_H_
#define __QQVIDEO_UPGRADE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"


namespace jce
{
    struct WebAppH5Version : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WebAppH5Version";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        WebAppH5Version()
        :packageId(""),version("")
        {
        }
        void resetDefautlt()
        {
            packageId = "";
            version = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(packageId, 0);
            _os.write(version, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(packageId, 0, true);
            _is.read(version, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(packageId,"packageId");
            _ds.display(version,"version");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(packageId, true);
            _ds.displaySimple(version, false);
            return _os;
        }
    public:
        std::string packageId;
        std::string version;
    };
    inline bool operator==(const WebAppH5Version&l, const WebAppH5Version&r)
    {
        return l.packageId == r.packageId && l.version == r.version;
    }
    inline bool operator!=(const WebAppH5Version&l, const WebAppH5Version&r)
    {
        return !(l == r);
    }

    struct WebAppUpgradeItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WebAppUpgradeItem";
        }
        static string MD5()
        {
            return "35c0f4a3976d1db18b564035c7a98a0b";
        }
        WebAppUpgradeItem()
        :packageId(""),packageVersionDesc(""),packageVersion(""),packageHash(""),packageUrl(""),unixtime(0),updateIntervalTime(0)
        {
        }
        void resetDefautlt()
        {
            packageId = "";
            packageVersionDesc = "";
            packageVersion = "";
            packageHash = "";
            packageUrl = "";
            unixtime = 0;
            updateIntervalTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(packageId, 0);
            _os.write(packageVersionDesc, 1);
            _os.write(packageVersion, 2);
            _os.write(packageHash, 3);
            _os.write(packageUrl, 4);
            _os.write(unixtime, 5);
            _os.write(updateIntervalTime, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(packageId, 0, true);
            _is.read(packageVersionDesc, 1, false);
            _is.read(packageVersion, 2, false);
            _is.read(packageHash, 3, false);
            _is.read(packageUrl, 4, false);
            _is.read(unixtime, 5, false);
            _is.read(updateIntervalTime, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(packageId,"packageId");
            _ds.display(packageVersionDesc,"packageVersionDesc");
            _ds.display(packageVersion,"packageVersion");
            _ds.display(packageHash,"packageHash");
            _ds.display(packageUrl,"packageUrl");
            _ds.display(unixtime,"unixtime");
            _ds.display(updateIntervalTime,"updateIntervalTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(packageId, true);
            _ds.displaySimple(packageVersionDesc, true);
            _ds.displaySimple(packageVersion, true);
            _ds.displaySimple(packageHash, true);
            _ds.displaySimple(packageUrl, true);
            _ds.displaySimple(unixtime, true);
            _ds.displaySimple(updateIntervalTime, false);
            return _os;
        }
    public:
        std::string packageId;
        std::string packageVersionDesc;
        std::string packageVersion;
        std::string packageHash;
        std::string packageUrl;
        taf::Int32 unixtime;
        taf::Int32 updateIntervalTime;
    };
    inline bool operator==(const WebAppUpgradeItem&l, const WebAppUpgradeItem&r)
    {
        return l.packageId == r.packageId && l.packageVersionDesc == r.packageVersionDesc && l.packageVersion == r.packageVersion && l.packageHash == r.packageHash && l.packageUrl == r.packageUrl && l.unixtime == r.unixtime && l.updateIntervalTime == r.updateIntervalTime;
    }
    inline bool operator!=(const WebAppUpgradeItem&l, const WebAppUpgradeItem&r)
    {
        return !(l == r);
    }

    struct WebAppUpgradeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WebAppUpgradeRequest";
        }
        static string MD5()
        {
            return "b26b56e06bed884df7f0d0a2735c8859";
        }
        WebAppUpgradeRequest()
        :isJailBreak(0),unixTime(0)
        {
        }
        void resetDefautlt()
        {
            isJailBreak = 0;
            unixTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(version, 0);
            _os.write(isJailBreak, 1);
            _os.write(unixTime, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(version, 0, true);
            _is.read(isJailBreak, 1, false);
            _is.read(unixTime, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(version,"version");
            _ds.display(isJailBreak,"isJailBreak");
            _ds.display(unixTime,"unixTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(version, true);
            _ds.displaySimple(isJailBreak, true);
            _ds.displaySimple(unixTime, false);
            return _os;
        }
    public:
        vector<jce::WebAppH5Version> version;
        taf::Int32 isJailBreak;
        taf::Int32 unixTime;
    };
    inline bool operator==(const WebAppUpgradeRequest&l, const WebAppUpgradeRequest&r)
    {
        return l.version == r.version && l.isJailBreak == r.isJailBreak && l.unixTime == r.unixTime;
    }
    inline bool operator!=(const WebAppUpgradeRequest&l, const WebAppUpgradeRequest&r)
    {
        return !(l == r);
    }

    struct WebAppUpgradeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WebAppUpgradeResponse";
        }
        static string MD5()
        {
            return "f88f68663553186822fef38db84328dd";
        }
        WebAppUpgradeResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(h5Item, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(h5Item, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(h5Item,"h5Item");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(h5Item, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::WebAppUpgradeItem> h5Item;
    };
    inline bool operator==(const WebAppUpgradeResponse&l, const WebAppUpgradeResponse&r)
    {
        return l.errCode == r.errCode && l.h5Item == r.h5Item;
    }
    inline bool operator!=(const WebAppUpgradeResponse&l, const WebAppUpgradeResponse&r)
    {
        return !(l == r);
    }

    struct AppExitDialogData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AppExitDialogData";
        }
        static string MD5()
        {
            return "bc1d9998e4583bff1a4f48e6debfbe73";
        }
        AppExitDialogData()
        :content(""),internval(0),condition(0)
        {
        }
        void resetDefautlt()
        {
            content = "";
            internval = 0;
            condition = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(content, 0);
            _os.write(action, 1);
            _os.write(internval, 2);
            _os.write(condition, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(content, 0, true);
            _is.read(action, 1, true);
            _is.read(internval, 2, false);
            _is.read(condition, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(content,"content");
            _ds.display(action,"action");
            _ds.display(internval,"internval");
            _ds.display(condition,"condition");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(content, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(internval, true);
            _ds.displaySimple(condition, false);
            return _os;
        }
    public:
        std::string content;
        jce::Action action;
        taf::Int64 internval;
        taf::Int32 condition;
    };
    inline bool operator==(const AppExitDialogData&l, const AppExitDialogData&r)
    {
        return l.content == r.content && l.action == r.action && l.internval == r.internval && l.condition == r.condition;
    }
    inline bool operator!=(const AppExitDialogData&l, const AppExitDialogData&r)
    {
        return !(l == r);
    }

    struct OperationConfigItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.OperationConfigItem";
        }
        static string MD5()
        {
            return "35edd5b484452a4307bcee54aa0d90f6";
        }
        OperationConfigItem()
        :id(""),startTime(0),endTime(0),displayLimit(0)
        {
        }
        void resetDefautlt()
        {
            id = "";
            startTime = 0;
            endTime = 0;
            displayLimit = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(action, 1);
            _os.write(startTime, 2);
            _os.write(endTime, 3);
            _os.write(displayLimit, 4);
            _os.write(h5VersionList, 5);
            _os.write(appExitDialogData, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, true);
            _is.read(action, 1, true);
            _is.read(startTime, 2, true);
            _is.read(endTime, 3, true);
            _is.read(displayLimit, 4, true);
            _is.read(h5VersionList, 5, false);
            _is.read(appExitDialogData, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(action,"action");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(displayLimit,"displayLimit");
            _ds.display(h5VersionList,"h5VersionList");
            _ds.display(appExitDialogData,"appExitDialogData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(displayLimit, true);
            _ds.displaySimple(h5VersionList, true);
            _ds.displaySimple(appExitDialogData, false);
            return _os;
        }
    public:
        std::string id;
        jce::Action action;
        taf::Int64 startTime;
        taf::Int64 endTime;
        taf::Int32 displayLimit;
        vector<jce::WebAppH5Version> h5VersionList;
        jce::AppExitDialogData appExitDialogData;
    };
    inline bool operator==(const OperationConfigItem&l, const OperationConfigItem&r)
    {
        return l.id == r.id && l.action == r.action && l.startTime == r.startTime && l.endTime == r.endTime && l.displayLimit == r.displayLimit && l.h5VersionList == r.h5VersionList && l.appExitDialogData == r.appExitDialogData;
    }
    inline bool operator!=(const OperationConfigItem&l, const OperationConfigItem&r)
    {
        return !(l == r);
    }

    struct AppRemoteConfigItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AppRemoteConfigItem";
        }
        static string MD5()
        {
            return "c297b145d80600c8fa9c810d01f37c27";
        }
        AppRemoteConfigItem()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(operationConfigItems, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(operationConfigItems, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(operationConfigItems,"operationConfigItems");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(operationConfigItems, false);
            return _os;
        }
    public:
        vector<jce::OperationConfigItem> operationConfigItems;
    };
    inline bool operator==(const AppRemoteConfigItem&l, const AppRemoteConfigItem&r)
    {
        return l.operationConfigItems == r.operationConfigItems;
    }
    inline bool operator!=(const AppRemoteConfigItem&l, const AppRemoteConfigItem&r)
    {
        return !(l == r);
    }

    struct AppRemoteConfigRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AppRemoteConfigRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        AppRemoteConfigRequest()
        :version(0)
        {
        }
        void resetDefautlt()
        {
            version = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(version, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(version, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(version,"version");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(version, false);
            return _os;
        }
    public:
        taf::Int32 version;
    };
    inline bool operator==(const AppRemoteConfigRequest&l, const AppRemoteConfigRequest&r)
    {
        return l.version == r.version;
    }
    inline bool operator!=(const AppRemoteConfigRequest&l, const AppRemoteConfigRequest&r)
    {
        return !(l == r);
    }

    struct AppRemoteConfigResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AppRemoteConfigResponse";
        }
        static string MD5()
        {
            return "91d0a39484b07d82ee1333531b2fac41";
        }
        AppRemoteConfigResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(appRemoteConfigItem, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(appRemoteConfigItem, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(appRemoteConfigItem,"appRemoteConfigItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(appRemoteConfigItem, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::AppRemoteConfigItem appRemoteConfigItem;
    };
    inline bool operator==(const AppRemoteConfigResponse&l, const AppRemoteConfigResponse&r)
    {
        return l.errCode == r.errCode && l.appRemoteConfigItem == r.appRemoteConfigItem;
    }
    inline bool operator!=(const AppRemoteConfigResponse&l, const AppRemoteConfigResponse&r)
    {
        return !(l == r);
    }

    struct AssistAppInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AssistAppInfo";
        }
        static string MD5()
        {
            return "8aef3711ca93f682d5e01ca071c1d888";
        }
        AssistAppInfo()
        :appPackageName(""),serviceComponent(""),serviceScheme(""),activityComponent(""),activityScheme(""),action(""),category("")
        {
        }
        void resetDefautlt()
        {
            appPackageName = "";
            serviceComponent = "";
            serviceScheme = "";
            activityComponent = "";
            activityScheme = "";
            action = "";
            category = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(appPackageName, 0);
            _os.write(serviceComponent, 1);
            _os.write(serviceScheme, 2);
            _os.write(activityComponent, 3);
            _os.write(activityScheme, 4);
            _os.write(action, 5);
            _os.write(category, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(appPackageName, 0, true);
            _is.read(serviceComponent, 1, true);
            _is.read(serviceScheme, 2, false);
            _is.read(activityComponent, 3, false);
            _is.read(activityScheme, 4, false);
            _is.read(action, 5, false);
            _is.read(category, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(appPackageName,"appPackageName");
            _ds.display(serviceComponent,"serviceComponent");
            _ds.display(serviceScheme,"serviceScheme");
            _ds.display(activityComponent,"activityComponent");
            _ds.display(activityScheme,"activityScheme");
            _ds.display(action,"action");
            _ds.display(category,"category");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(appPackageName, true);
            _ds.displaySimple(serviceComponent, true);
            _ds.displaySimple(serviceScheme, true);
            _ds.displaySimple(activityComponent, true);
            _ds.displaySimple(activityScheme, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(category, false);
            return _os;
        }
    public:
        std::string appPackageName;
        std::string serviceComponent;
        std::string serviceScheme;
        std::string activityComponent;
        std::string activityScheme;
        std::string action;
        std::string category;
    };
    inline bool operator==(const AssistAppInfo&l, const AssistAppInfo&r)
    {
        return l.appPackageName == r.appPackageName && l.serviceComponent == r.serviceComponent && l.serviceScheme == r.serviceScheme && l.activityComponent == r.activityComponent && l.activityScheme == r.activityScheme && l.action == r.action && l.category == r.category;
    }
    inline bool operator!=(const AssistAppInfo&l, const AssistAppInfo&r)
    {
        return !(l == r);
    }

    struct AssistAppConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AssistAppConfig";
        }
        static string MD5()
        {
            return "11d48eab758487dae681f65b7d43d0b2";
        }
        AssistAppConfig()
        :assistEnable(0),assistMinInterval(0),assistMaxRetry(0),assistStopInterval(0),assistMultiProcessor(0),assistDefaultProcessor("")
        {
        }
        void resetDefautlt()
        {
            assistEnable = 0;
            assistMinInterval = 0;
            assistMaxRetry = 0;
            assistStopInterval = 0;
            assistMultiProcessor = 0;
            assistDefaultProcessor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(assistEnable, 0);
            _os.write(assistMinInterval, 1);
            _os.write(assistMaxRetry, 2);
            _os.write(assistStopInterval, 3);
            _os.write(assistMultiProcessor, 4);
            _os.write(assistDefaultProcessor, 5);
            _os.write(appList, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(assistEnable, 0, true);
            _is.read(assistMinInterval, 1, true);
            _is.read(assistMaxRetry, 2, true);
            _is.read(assistStopInterval, 3, true);
            _is.read(assistMultiProcessor, 4, true);
            _is.read(assistDefaultProcessor, 5, true);
            _is.read(appList, 6, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(assistEnable,"assistEnable");
            _ds.display(assistMinInterval,"assistMinInterval");
            _ds.display(assistMaxRetry,"assistMaxRetry");
            _ds.display(assistStopInterval,"assistStopInterval");
            _ds.display(assistMultiProcessor,"assistMultiProcessor");
            _ds.display(assistDefaultProcessor,"assistDefaultProcessor");
            _ds.display(appList,"appList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(assistEnable, true);
            _ds.displaySimple(assistMinInterval, true);
            _ds.displaySimple(assistMaxRetry, true);
            _ds.displaySimple(assistStopInterval, true);
            _ds.displaySimple(assistMultiProcessor, true);
            _ds.displaySimple(assistDefaultProcessor, true);
            _ds.displaySimple(appList, false);
            return _os;
        }
    public:
        taf::Int32 assistEnable;
        taf::Int64 assistMinInterval;
        taf::Int32 assistMaxRetry;
        taf::Int64 assistStopInterval;
        taf::Int32 assistMultiProcessor;
        std::string assistDefaultProcessor;
        vector<jce::AssistAppInfo> appList;
    };
    inline bool operator==(const AssistAppConfig&l, const AssistAppConfig&r)
    {
        return l.assistEnable == r.assistEnable && l.assistMinInterval == r.assistMinInterval && l.assistMaxRetry == r.assistMaxRetry && l.assistStopInterval == r.assistStopInterval && l.assistMultiProcessor == r.assistMultiProcessor && l.assistDefaultProcessor == r.assistDefaultProcessor && l.appList == r.appList;
    }
    inline bool operator!=(const AssistAppConfig&l, const AssistAppConfig&r)
    {
        return !(l == r);
    }

    struct CommonConfigRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommonConfigRequest";
        }
        static string MD5()
        {
            return "14e6636632c63fdfafc03fddb6c460ba";
        }
        CommonConfigRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(modelIds, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(modelIds, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(modelIds,"modelIds");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(modelIds, false);
            return _os;
        }
    public:
        vector<std::string> modelIds;
    };
    inline bool operator==(const CommonConfigRequest&l, const CommonConfigRequest&r)
    {
        return l.modelIds == r.modelIds;
    }
    inline bool operator!=(const CommonConfigRequest&l, const CommonConfigRequest&r)
    {
        return !(l == r);
    }

    struct CommonConfigResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommonConfigResponse";
        }
        static string MD5()
        {
            return "f9ee4c6f2a6a1df1037b9bbc45712703";
        }
        CommonConfigResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(datas, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(datas, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(datas,"datas");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(datas, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        map<std::string, vector<taf::Char> > datas;
    };
    inline bool operator==(const CommonConfigResponse&l, const CommonConfigResponse&r)
    {
        return l.errCode == r.errCode && l.datas == r.datas;
    }
    inline bool operator!=(const CommonConfigResponse&l, const CommonConfigResponse&r)
    {
        return !(l == r);
    }

    struct ApkInstallConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ApkInstallConfig";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        ApkInstallConfig()
        :installPolicy(0)
        {
        }
        void resetDefautlt()
        {
            installPolicy = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(installPolicy, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(installPolicy, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(installPolicy,"installPolicy");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(installPolicy, false);
            return _os;
        }
    public:
        taf::Int32 installPolicy;
    };
    inline bool operator==(const ApkInstallConfig&l, const ApkInstallConfig&r)
    {
        return l.installPolicy == r.installPolicy;
    }
    inline bool operator!=(const ApkInstallConfig&l, const ApkInstallConfig&r)
    {
        return !(l == r);
    }

    struct TextConfigInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TextConfigInfo";
        }
        static string MD5()
        {
            return "14e6636632c63fdfafc03fddb6c460ba";
        }
        TextConfigInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(textList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(textList, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(textList,"textList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(textList, false);
            return _os;
        }
    public:
        vector<std::string> textList;
    };
    inline bool operator==(const TextConfigInfo&l, const TextConfigInfo&r)
    {
        return l.textList == r.textList;
    }
    inline bool operator!=(const TextConfigInfo&l, const TextConfigInfo&r)
    {
        return !(l == r);
    }

    struct AlertInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AlertInfo";
        }
        static string MD5()
        {
            return "193067419a23a300601abb9a82a7a9f1";
        }
        AlertInfo()
        :message(""),leftTitle(""),rightTitle(""),imageUrl("")
        {
        }
        void resetDefautlt()
        {
            message = "";
            leftTitle = "";
            rightTitle = "";
            imageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(message, 0);
            _os.write(leftTitle, 1);
            _os.write(rightTitle, 2);
            _os.write(leftAction, 3);
            _os.write(rightAction, 4);
            _os.write(imageUrl, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(message, 0, true);
            _is.read(leftTitle, 1, true);
            _is.read(rightTitle, 2, true);
            _is.read(leftAction, 3, false);
            _is.read(rightAction, 4, false);
            _is.read(imageUrl, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(message,"message");
            _ds.display(leftTitle,"leftTitle");
            _ds.display(rightTitle,"rightTitle");
            _ds.display(leftAction,"leftAction");
            _ds.display(rightAction,"rightAction");
            _ds.display(imageUrl,"imageUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(message, true);
            _ds.displaySimple(leftTitle, true);
            _ds.displaySimple(rightTitle, true);
            _ds.displaySimple(leftAction, true);
            _ds.displaySimple(rightAction, true);
            _ds.displaySimple(imageUrl, false);
            return _os;
        }
    public:
        std::string message;
        std::string leftTitle;
        std::string rightTitle;
        jce::Action leftAction;
        jce::Action rightAction;
        std::string imageUrl;
    };
    inline bool operator==(const AlertInfo&l, const AlertInfo&r)
    {
        return l.message == r.message && l.leftTitle == r.leftTitle && l.rightTitle == r.rightTitle && l.leftAction == r.leftAction && l.rightAction == r.rightAction && l.imageUrl == r.imageUrl;
    }
    inline bool operator!=(const AlertInfo&l, const AlertInfo&r)
    {
        return !(l == r);
    }

    struct PlayerTipsInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PlayerTipsInfo";
        }
        static string MD5()
        {
            return "f4b83f59b5ebf8cb28ee72deb00d6916";
        }
        PlayerTipsInfo()
        :strTips(""),highlightMsg(""),tipsId(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            strTips = "";
            highlightMsg = "";
            tipsId = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strTips, 0);
            _os.write(highlightMsg, 1);
            _os.write(highlightAction, 2);
            _os.write(tipsId, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strTips, 0, true);
            _is.read(highlightMsg, 1, false);
            _is.read(highlightAction, 2, false);
            _is.read(tipsId, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strTips,"strTips");
            _ds.display(highlightMsg,"highlightMsg");
            _ds.display(highlightAction,"highlightAction");
            _ds.display(tipsId,"tipsId");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strTips, true);
            _ds.displaySimple(highlightMsg, true);
            _ds.displaySimple(highlightAction, true);
            _ds.displaySimple(tipsId, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string strTips;
        std::string highlightMsg;
        jce::Action highlightAction;
        std::string tipsId;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const PlayerTipsInfo&l, const PlayerTipsInfo&r)
    {
        return l.strTips == r.strTips && l.highlightMsg == r.highlightMsg && l.highlightAction == r.highlightAction && l.tipsId == r.tipsId && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const PlayerTipsInfo&l, const PlayerTipsInfo&r)
    {
        return !(l == r);
    }

    struct OperatorInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.OperatorInfo";
        }
        static string MD5()
        {
            return "7171fb0e00d17b1da1437ccf4331d3b9";
        }
        OperatorInfo()
        :operatorStyle(0),netWorkType(0),interval(0),orderState(0),alertId(""),maxCanceledTimes(0)
        {
        }
        void resetDefautlt()
        {
            operatorStyle = 0;
            netWorkType = 0;
            interval = 0;
            orderState = 0;
            alertId = "";
            maxCanceledTimes = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(operatorStyle, 0);
            _os.write(netWorkType, 1);
            _os.write(interval, 2);
            _os.write(alertInfo, 3);
            _os.write(orderState, 4);
            _os.write(alertId, 5);
            _os.write(maxCanceledTimes, 6);
            _os.write(tipsInfo, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(operatorStyle, 0, true);
            _is.read(netWorkType, 1, false);
            _is.read(interval, 2, false);
            _is.read(alertInfo, 3, false);
            _is.read(orderState, 4, false);
            _is.read(alertId, 5, false);
            _is.read(maxCanceledTimes, 6, false);
            _is.read(tipsInfo, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(operatorStyle,"operatorStyle");
            _ds.display(netWorkType,"netWorkType");
            _ds.display(interval,"interval");
            _ds.display(alertInfo,"alertInfo");
            _ds.display(orderState,"orderState");
            _ds.display(alertId,"alertId");
            _ds.display(maxCanceledTimes,"maxCanceledTimes");
            _ds.display(tipsInfo,"tipsInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(operatorStyle, true);
            _ds.displaySimple(netWorkType, true);
            _ds.displaySimple(interval, true);
            _ds.displaySimple(alertInfo, true);
            _ds.displaySimple(orderState, true);
            _ds.displaySimple(alertId, true);
            _ds.displaySimple(maxCanceledTimes, true);
            _ds.displaySimple(tipsInfo, false);
            return _os;
        }
    public:
        taf::Int32 operatorStyle;
        taf::Int32 netWorkType;
        taf::Int32 interval;
        jce::AlertInfo alertInfo;
        taf::Int32 orderState;
        std::string alertId;
        taf::Int32 maxCanceledTimes;
        jce::PlayerTipsInfo tipsInfo;
    };
    inline bool operator==(const OperatorInfo&l, const OperatorInfo&r)
    {
        return l.operatorStyle == r.operatorStyle && l.netWorkType == r.netWorkType && l.interval == r.interval && l.alertInfo == r.alertInfo && l.orderState == r.orderState && l.alertId == r.alertId && l.maxCanceledTimes == r.maxCanceledTimes && l.tipsInfo == r.tipsInfo;
    }
    inline bool operator!=(const OperatorInfo&l, const OperatorInfo&r)
    {
        return !(l == r);
    }

    struct OperatorsConfigInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.OperatorsConfigInfo";
        }
        static string MD5()
        {
            return "a995ae2bf482dc4ad0aa280bbd346da6";
        }
        OperatorsConfigInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(operatorInfos, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(operatorInfos, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(operatorInfos,"operatorInfos");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(operatorInfos, false);
            return _os;
        }
    public:
        vector<jce::OperatorInfo> operatorInfos;
    };
    inline bool operator==(const OperatorsConfigInfo&l, const OperatorsConfigInfo&r)
    {
        return l.operatorInfos == r.operatorInfos;
    }
    inline bool operator!=(const OperatorsConfigInfo&l, const OperatorsConfigInfo&r)
    {
        return !(l == r);
    }

    struct LogReportConfigInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LogReportConfigInfo";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        LogReportConfigInfo()
        :jceLogSampleRate(10),localLogAutoReport(0)
        {
        }
        void resetDefautlt()
        {
            jceLogSampleRate = 10;
            localLogAutoReport = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(jceLogSampleRate, 0);
            _os.write(localLogAutoReport, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(jceLogSampleRate, 0, false);
            _is.read(localLogAutoReport, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(jceLogSampleRate,"jceLogSampleRate");
            _ds.display(localLogAutoReport,"localLogAutoReport");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(jceLogSampleRate, true);
            _ds.displaySimple(localLogAutoReport, false);
            return _os;
        }
    public:
        taf::Int32 jceLogSampleRate;
        taf::Int32 localLogAutoReport;
    };
    inline bool operator==(const LogReportConfigInfo&l, const LogReportConfigInfo&r)
    {
        return l.jceLogSampleRate == r.jceLogSampleRate && l.localLogAutoReport == r.localLogAutoReport;
    }
    inline bool operator!=(const LogReportConfigInfo&l, const LogReportConfigInfo&r)
    {
        return !(l == r);
    }

    struct OperatorTipRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.OperatorTipRequest";
        }
        static string MD5()
        {
            return "5776fd7103fcea055637c7e8b9708bb0";
        }
        OperatorTipRequest()
        :operatorStyle(0),tipsId(""),exposureCount(0)
        {
        }
        void resetDefautlt()
        {
            operatorStyle = 0;
            tipsId = "";
            exposureCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(operatorStyle, 0);
            _os.write(tipsId, 1);
            _os.write(exposureCount, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(operatorStyle, 0, true);
            _is.read(tipsId, 1, true);
            _is.read(exposureCount, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(operatorStyle,"operatorStyle");
            _ds.display(tipsId,"tipsId");
            _ds.display(exposureCount,"exposureCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(operatorStyle, true);
            _ds.displaySimple(tipsId, true);
            _ds.displaySimple(exposureCount, false);
            return _os;
        }
    public:
        taf::Int32 operatorStyle;
        std::string tipsId;
        taf::Int32 exposureCount;
    };
    inline bool operator==(const OperatorTipRequest&l, const OperatorTipRequest&r)
    {
        return l.operatorStyle == r.operatorStyle && l.tipsId == r.tipsId && l.exposureCount == r.exposureCount;
    }
    inline bool operator!=(const OperatorTipRequest&l, const OperatorTipRequest&r)
    {
        return !(l == r);
    }

    struct OperatorTipResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.OperatorTipResponse";
        }
        static string MD5()
        {
            return "36438e12e0eb92174800fd5f0ff57f6d";
        }
        OperatorTipResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(operatorTipInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(operatorTipInfo, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(operatorTipInfo,"operatorTipInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(operatorTipInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::OperatorInfo operatorTipInfo;
    };
    inline bool operator==(const OperatorTipResponse&l, const OperatorTipResponse&r)
    {
        return l.errCode == r.errCode && l.operatorTipInfo == r.operatorTipInfo;
    }
    inline bool operator!=(const OperatorTipResponse&l, const OperatorTipResponse&r)
    {
        return !(l == r);
    }

    struct SettingsConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SettingsConfig";
        }
        static string MD5()
        {
            return "959e5f645613d6d7c2f3708766a01b87";
        }
        SettingsConfig()
        :useVnUserCenter(true)
        {
        }
        void resetDefautlt()
        {
            useVnUserCenter = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(useVnUserCenter, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(useVnUserCenter, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(useVnUserCenter,"useVnUserCenter");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(useVnUserCenter, false);
            return _os;
        }
    public:
        taf::Bool useVnUserCenter;
    };
    inline bool operator==(const SettingsConfig&l, const SettingsConfig&r)
    {
        return l.useVnUserCenter == r.useVnUserCenter;
    }
    inline bool operator!=(const SettingsConfig&l, const SettingsConfig&r)
    {
        return !(l == r);
    }

    struct BindPhoneNumberConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.BindPhoneNumberConfig";
        }
        static string MD5()
        {
            return "253f61635562fa068205cd3d63e39653";
        }
        BindPhoneNumberConfig()
        :needBindSwitch(false),tipsType(0),tipsTitle(""),tipsMessage(""),loginBindH5Url(""),downloadBindH5Url(""),downloadTipsInterval(7)
        {
        }
        void resetDefautlt()
        {
            needBindSwitch = false;
            tipsType = 0;
            tipsTitle = "";
            tipsMessage = "";
            loginBindH5Url = "";
            downloadBindH5Url = "";
            downloadTipsInterval = 7;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(needBindSwitch, 0);
            _os.write(tipsType, 1);
            _os.write(tipsTitle, 2);
            _os.write(tipsMessage, 3);
            _os.write(loginBindH5Url, 4);
            _os.write(downloadBindH5Url, 5);
            _os.write(downloadTipsInterval, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(needBindSwitch, 0, true);
            _is.read(tipsType, 1, false);
            _is.read(tipsTitle, 2, false);
            _is.read(tipsMessage, 3, false);
            _is.read(loginBindH5Url, 4, false);
            _is.read(downloadBindH5Url, 5, false);
            _is.read(downloadTipsInterval, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(needBindSwitch,"needBindSwitch");
            _ds.display(tipsType,"tipsType");
            _ds.display(tipsTitle,"tipsTitle");
            _ds.display(tipsMessage,"tipsMessage");
            _ds.display(loginBindH5Url,"loginBindH5Url");
            _ds.display(downloadBindH5Url,"downloadBindH5Url");
            _ds.display(downloadTipsInterval,"downloadTipsInterval");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(needBindSwitch, true);
            _ds.displaySimple(tipsType, true);
            _ds.displaySimple(tipsTitle, true);
            _ds.displaySimple(tipsMessage, true);
            _ds.displaySimple(loginBindH5Url, true);
            _ds.displaySimple(downloadBindH5Url, true);
            _ds.displaySimple(downloadTipsInterval, false);
            return _os;
        }
    public:
        taf::Bool needBindSwitch;
        taf::Int32 tipsType;
        std::string tipsTitle;
        std::string tipsMessage;
        std::string loginBindH5Url;
        std::string downloadBindH5Url;
        taf::Int32 downloadTipsInterval;
    };
    inline bool operator==(const BindPhoneNumberConfig&l, const BindPhoneNumberConfig&r)
    {
        return l.needBindSwitch == r.needBindSwitch && l.tipsType == r.tipsType && l.tipsTitle == r.tipsTitle && l.tipsMessage == r.tipsMessage && l.loginBindH5Url == r.loginBindH5Url && l.downloadBindH5Url == r.downloadBindH5Url && l.downloadTipsInterval == r.downloadTipsInterval;
    }
    inline bool operator!=(const BindPhoneNumberConfig&l, const BindPhoneNumberConfig&r)
    {
        return !(l == r);
    }


}

#define jce_WebAppH5Version_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.packageId,b.packageId);jce_copy_struct(a.version,b.version);

#define jce_WebAppUpgradeItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.packageId,b.packageId);jce_copy_struct(a.packageVersionDesc,b.packageVersionDesc);jce_copy_struct(a.packageVersion,b.packageVersion);jce_copy_struct(a.packageHash,b.packageHash);jce_copy_struct(a.packageUrl,b.packageUrl);jce_copy_struct(a.unixtime,b.unixtime);jce_copy_struct(a.updateIntervalTime,b.updateIntervalTime);

#define jce_WebAppUpgradeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.version,b.version);jce_copy_struct(a.isJailBreak,b.isJailBreak);jce_copy_struct(a.unixTime,b.unixTime);

#define jce_WebAppUpgradeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.h5Item,b.h5Item);

#define jce_AppExitDialogData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.content,b.content);jce_copy_struct(a.action,b.action);jce_copy_struct(a.internval,b.internval);jce_copy_struct(a.condition,b.condition);

#define jce_OperationConfigItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.action,b.action);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.displayLimit,b.displayLimit);jce_copy_struct(a.h5VersionList,b.h5VersionList);jce_copy_struct(a.appExitDialogData,b.appExitDialogData);

#define jce_AppRemoteConfigItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.operationConfigItems,b.operationConfigItems);

#define jce_AppRemoteConfigRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.version,b.version);

#define jce_AppRemoteConfigResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.appRemoteConfigItem,b.appRemoteConfigItem);

#define jce_AssistAppInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.appPackageName,b.appPackageName);jce_copy_struct(a.serviceComponent,b.serviceComponent);jce_copy_struct(a.serviceScheme,b.serviceScheme);jce_copy_struct(a.activityComponent,b.activityComponent);jce_copy_struct(a.activityScheme,b.activityScheme);jce_copy_struct(a.action,b.action);jce_copy_struct(a.category,b.category);

#define jce_AssistAppConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.assistEnable,b.assistEnable);jce_copy_struct(a.assistMinInterval,b.assistMinInterval);jce_copy_struct(a.assistMaxRetry,b.assistMaxRetry);jce_copy_struct(a.assistStopInterval,b.assistStopInterval);jce_copy_struct(a.assistMultiProcessor,b.assistMultiProcessor);jce_copy_struct(a.assistDefaultProcessor,b.assistDefaultProcessor);jce_copy_struct(a.appList,b.appList);

#define jce_CommonConfigRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.modelIds,b.modelIds);

#define jce_CommonConfigResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.datas,b.datas);

#define jce_ApkInstallConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.installPolicy,b.installPolicy);

#define jce_TextConfigInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.textList,b.textList);

#define jce_AlertInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.message,b.message);jce_copy_struct(a.leftTitle,b.leftTitle);jce_copy_struct(a.rightTitle,b.rightTitle);jce_copy_struct(a.leftAction,b.leftAction);jce_copy_struct(a.rightAction,b.rightAction);jce_copy_struct(a.imageUrl,b.imageUrl);

#define jce_PlayerTipsInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strTips,b.strTips);jce_copy_struct(a.highlightMsg,b.highlightMsg);jce_copy_struct(a.highlightAction,b.highlightAction);jce_copy_struct(a.tipsId,b.tipsId);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_OperatorInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.operatorStyle,b.operatorStyle);jce_copy_struct(a.netWorkType,b.netWorkType);jce_copy_struct(a.interval,b.interval);jce_copy_struct(a.alertInfo,b.alertInfo);jce_copy_struct(a.orderState,b.orderState);jce_copy_struct(a.alertId,b.alertId);jce_copy_struct(a.maxCanceledTimes,b.maxCanceledTimes);jce_copy_struct(a.tipsInfo,b.tipsInfo);

#define jce_OperatorsConfigInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.operatorInfos,b.operatorInfos);

#define jce_LogReportConfigInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.jceLogSampleRate,b.jceLogSampleRate);jce_copy_struct(a.localLogAutoReport,b.localLogAutoReport);

#define jce_OperatorTipRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.operatorStyle,b.operatorStyle);jce_copy_struct(a.tipsId,b.tipsId);jce_copy_struct(a.exposureCount,b.exposureCount);

#define jce_OperatorTipResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.operatorTipInfo,b.operatorTipInfo);

#define jce_SettingsConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.useVnUserCenter,b.useVnUserCenter);

#define jce_BindPhoneNumberConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.needBindSwitch,b.needBindSwitch);jce_copy_struct(a.tipsType,b.tipsType);jce_copy_struct(a.tipsTitle,b.tipsTitle);jce_copy_struct(a.tipsMessage,b.tipsMessage);jce_copy_struct(a.loginBindH5Url,b.loginBindH5Url);jce_copy_struct(a.downloadBindH5Url,b.downloadBindH5Url);jce_copy_struct(a.downloadTipsInterval,b.downloadTipsInterval);



#endif
