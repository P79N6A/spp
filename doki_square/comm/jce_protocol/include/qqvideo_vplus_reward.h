// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_vplus_reward.jce'
// **********************************************************************

#ifndef __QQVIDEO_VPLUS_REWARD_H_
#define __QQVIDEO_VPLUS_REWARD_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace jce
{
    struct CommRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        CommRsp()
        :retCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            retCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(retCode, 0);
            _os.write(errMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(retCode, 0, true);
            _is.read(errMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(retCode,"retCode");
            _ds.display(errMsg,"errMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(retCode, true);
            _ds.displaySimple(errMsg, false);
            return _os;
        }
    public:
        taf::Int32 retCode;
        std::string errMsg;
    };
    inline bool operator==(const CommRsp&l, const CommRsp&r)
    {
        return l.retCode == r.retCode && l.errMsg == r.errMsg;
    }
    inline bool operator!=(const CommRsp&l, const CommRsp&r)
    {
        return !(l == r);
    }

    struct AccountInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AccountInfo";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        AccountInfo()
        :account(""),accounttype(0)
        {
        }
        void resetDefautlt()
        {
            account = "";
            accounttype = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(account, 0);
            _os.write(accounttype, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(account, 0, true);
            _is.read(accounttype, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(account,"account");
            _ds.display(accounttype,"accounttype");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(account, true);
            _ds.displaySimple(accounttype, false);
            return _os;
        }
    public:
        std::string account;
        taf::Int32 accounttype;
    };
    inline bool operator==(const AccountInfo&l, const AccountInfo&r)
    {
        return l.account == r.account && l.accounttype == r.accounttype;
    }
    inline bool operator!=(const AccountInfo&l, const AccountInfo&r)
    {
        return !(l == r);
    }

    struct VideoInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoInfo";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        VideoInfo()
        :iVType(0),strId("")
        {
        }
        void resetDefautlt()
        {
            iVType = 0;
            strId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iVType, 0);
            _os.write(strId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iVType, 0, true);
            _is.read(strId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iVType,"iVType");
            _ds.display(strId,"strId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iVType, true);
            _ds.displaySimple(strId, false);
            return _os;
        }
    public:
        taf::Int32 iVType;
        std::string strId;
    };
    inline bool operator==(const VideoInfo&l, const VideoInfo&r)
    {
        return l.iVType == r.iVType && l.strId == r.strId;
    }
    inline bool operator!=(const VideoInfo&l, const VideoInfo&r)
    {
        return !(l == r);
    }

    struct GetEncrpyKeyRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetEncrpyKeyRequest";
        }
        static string MD5()
        {
            return "8d0ff4d1b664f2339669bf0f8c1ed6fe";
        }
        GetEncrpyKeyRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stIdolInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stIdolInfo, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stIdolInfo,"stIdolInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stIdolInfo, false);
            return _os;
        }
    public:
        jce::AccountInfo stIdolInfo;
    };
    inline bool operator==(const GetEncrpyKeyRequest&l, const GetEncrpyKeyRequest&r)
    {
        return l.stIdolInfo == r.stIdolInfo;
    }
    inline bool operator!=(const GetEncrpyKeyRequest&l, const GetEncrpyKeyRequest&r)
    {
        return !(l == r);
    }

    struct GetEncrpyKeyResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetEncrpyKeyResponse";
        }
        static string MD5()
        {
            return "1d853618541d8d9cfc5d7b7c2be66f0a";
        }
        GetEncrpyKeyResponse()
        :strEncrpyKey(""),sDomain("")
        {
        }
        void resetDefautlt()
        {
            strEncrpyKey = "";
            sDomain = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stCommRsp, 0);
            _os.write(strEncrpyKey, 1);
            _os.write(sDomain, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stCommRsp, 0, true);
            _is.read(strEncrpyKey, 1, true);
            _is.read(sDomain, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stCommRsp,"stCommRsp");
            _ds.display(strEncrpyKey,"strEncrpyKey");
            _ds.display(sDomain,"sDomain");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stCommRsp, true);
            _ds.displaySimple(strEncrpyKey, true);
            _ds.displaySimple(sDomain, false);
            return _os;
        }
    public:
        jce::CommRsp stCommRsp;
        std::string strEncrpyKey;
        std::string sDomain;
    };
    inline bool operator==(const GetEncrpyKeyResponse&l, const GetEncrpyKeyResponse&r)
    {
        return l.stCommRsp == r.stCommRsp && l.strEncrpyKey == r.strEncrpyKey && l.sDomain == r.sDomain;
    }
    inline bool operator!=(const GetEncrpyKeyResponse&l, const GetEncrpyKeyResponse&r)
    {
        return !(l == r);
    }

    struct CheckEncrpyRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckEncrpyRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        CheckEncrpyRequest()
        :strKey1(""),strKey2(""),strNickname("")
        {
        }
        void resetDefautlt()
        {
            strKey1 = "";
            strKey2 = "";
            strNickname = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strKey1, 0);
            _os.write(strKey2, 1);
            _os.write(strNickname, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strKey1, 0, true);
            _is.read(strKey2, 1, true);
            _is.read(strNickname, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strKey1,"strKey1");
            _ds.display(strKey2,"strKey2");
            _ds.display(strNickname,"strNickname");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strKey1, true);
            _ds.displaySimple(strKey2, true);
            _ds.displaySimple(strNickname, false);
            return _os;
        }
    public:
        std::string strKey1;
        std::string strKey2;
        std::string strNickname;
    };
    inline bool operator==(const CheckEncrpyRequest&l, const CheckEncrpyRequest&r)
    {
        return l.strKey1 == r.strKey1 && l.strKey2 == r.strKey2 && l.strNickname == r.strNickname;
    }
    inline bool operator!=(const CheckEncrpyRequest&l, const CheckEncrpyRequest&r)
    {
        return !(l == r);
    }

    struct CheckEncrpyResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckEncrpyResponse";
        }
        static string MD5()
        {
            return "71a4ab1bb9bfc557bf20b79a96206c67";
        }
        CheckEncrpyResponse()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stCommRsp, 0);
            _os.write(stFansInfo, 1);
            _os.write(stIdolInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stCommRsp, 0, true);
            _is.read(stFansInfo, 1, false);
            _is.read(stIdolInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stCommRsp,"stCommRsp");
            _ds.display(stFansInfo,"stFansInfo");
            _ds.display(stIdolInfo,"stIdolInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stCommRsp, true);
            _ds.displaySimple(stFansInfo, true);
            _ds.displaySimple(stIdolInfo, false);
            return _os;
        }
    public:
        jce::CommRsp stCommRsp;
        jce::AccountInfo stFansInfo;
        jce::AccountInfo stIdolInfo;
    };
    inline bool operator==(const CheckEncrpyResponse&l, const CheckEncrpyResponse&r)
    {
        return l.stCommRsp == r.stCommRsp && l.stFansInfo == r.stFansInfo && l.stIdolInfo == r.stIdolInfo;
    }
    inline bool operator!=(const CheckEncrpyResponse&l, const CheckEncrpyResponse&r)
    {
        return !(l == r);
    }

    struct RewardWaterLogRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RewardWaterLogRequest";
        }
        static string MD5()
        {
            return "86e3682e2e5084190683e8aedf197dd9";
        }
        RewardWaterLogRequest()
        :iSceneType(0),iRewardNum(0),strPlatForm(""),strAppInfo(""),iClientIp(0),strGuid("")
        {
        }
        void resetDefautlt()
        {
            iSceneType = 0;
            iRewardNum = 0;
            strPlatForm = "";
            strAppInfo = "";
            iClientIp = 0;
            strGuid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vecFansAccountInfo, 0);
            _os.write(stIdolAccountInfo, 1);
            _os.write(iSceneType, 2);
            _os.write(iRewardNum, 3);
            _os.write(strPlatForm, 4);
            _os.write(strAppInfo, 5);
            _os.write(iClientIp, 6);
            _os.write(strGuid, 7);
            _os.write(stVideoInfo, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vecFansAccountInfo, 0, true);
            _is.read(stIdolAccountInfo, 1, true);
            _is.read(iSceneType, 2, true);
            _is.read(iRewardNum, 3, true);
            _is.read(strPlatForm, 4, true);
            _is.read(strAppInfo, 5, true);
            _is.read(iClientIp, 6, true);
            _is.read(strGuid, 7, true);
            _is.read(stVideoInfo, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vecFansAccountInfo,"vecFansAccountInfo");
            _ds.display(stIdolAccountInfo,"stIdolAccountInfo");
            _ds.display(iSceneType,"iSceneType");
            _ds.display(iRewardNum,"iRewardNum");
            _ds.display(strPlatForm,"strPlatForm");
            _ds.display(strAppInfo,"strAppInfo");
            _ds.display(iClientIp,"iClientIp");
            _ds.display(strGuid,"strGuid");
            _ds.display(stVideoInfo,"stVideoInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vecFansAccountInfo, true);
            _ds.displaySimple(stIdolAccountInfo, true);
            _ds.displaySimple(iSceneType, true);
            _ds.displaySimple(iRewardNum, true);
            _ds.displaySimple(strPlatForm, true);
            _ds.displaySimple(strAppInfo, true);
            _ds.displaySimple(iClientIp, true);
            _ds.displaySimple(strGuid, true);
            _ds.displaySimple(stVideoInfo, false);
            return _os;
        }
    public:
        vector<jce::AccountInfo> vecFansAccountInfo;
        jce::AccountInfo stIdolAccountInfo;
        taf::Int32 iSceneType;
        taf::Int64 iRewardNum;
        std::string strPlatForm;
        std::string strAppInfo;
        taf::Int64 iClientIp;
        std::string strGuid;
        jce::VideoInfo stVideoInfo;
    };
    inline bool operator==(const RewardWaterLogRequest&l, const RewardWaterLogRequest&r)
    {
        return l.vecFansAccountInfo == r.vecFansAccountInfo && l.stIdolAccountInfo == r.stIdolAccountInfo && l.iSceneType == r.iSceneType && l.iRewardNum == r.iRewardNum && l.strPlatForm == r.strPlatForm && l.strAppInfo == r.strAppInfo && l.iClientIp == r.iClientIp && l.strGuid == r.strGuid && l.stVideoInfo == r.stVideoInfo;
    }
    inline bool operator!=(const RewardWaterLogRequest&l, const RewardWaterLogRequest&r)
    {
        return !(l == r);
    }

    struct RewardWaterLogResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RewardWaterLogResponse";
        }
        static string MD5()
        {
            return "4184bfd727fe38f78d4d269f974dc35f";
        }
        RewardWaterLogResponse()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stCommRsp, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stCommRsp, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stCommRsp,"stCommRsp");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stCommRsp, false);
            return _os;
        }
    public:
        jce::CommRsp stCommRsp;
    };
    inline bool operator==(const RewardWaterLogResponse&l, const RewardWaterLogResponse&r)
    {
        return l.stCommRsp == r.stCommRsp;
    }
    inline bool operator!=(const RewardWaterLogResponse&l, const RewardWaterLogResponse&r)
    {
        return !(l == r);
    }

    struct CheckWhiteIdolAndFansHeadRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckWhiteIdolAndFansHeadRequest";
        }
        static string MD5()
        {
            return "a47803ca707f0ed451a251985e5aadd1";
        }
        CheckWhiteIdolAndFansHeadRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stIdolAccount, 0);
            _os.write(stVideoInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stIdolAccount, 0, true);
            _is.read(stVideoInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stIdolAccount,"stIdolAccount");
            _ds.display(stVideoInfo,"stVideoInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stIdolAccount, true);
            _ds.displaySimple(stVideoInfo, false);
            return _os;
        }
    public:
        jce::AccountInfo stIdolAccount;
        jce::VideoInfo stVideoInfo;
    };
    inline bool operator==(const CheckWhiteIdolAndFansHeadRequest&l, const CheckWhiteIdolAndFansHeadRequest&r)
    {
        return l.stIdolAccount == r.stIdolAccount && l.stVideoInfo == r.stVideoInfo;
    }
    inline bool operator!=(const CheckWhiteIdolAndFansHeadRequest&l, const CheckWhiteIdolAndFansHeadRequest&r)
    {
        return !(l == r);
    }

    struct MyUserInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MyUserInfo";
        }
        static string MD5()
        {
            return "a22a60a0056c905db28dd64822a2033c";
        }
        MyUserInfo()
        :ddwVuid(0),strHeadUrl(""),strNickName("")
        {
        }
        void resetDefautlt()
        {
            ddwVuid = 0;
            strHeadUrl = "";
            strNickName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwVuid, 0);
            _os.write(strHeadUrl, 1);
            _os.write(strNickName, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwVuid, 0, true);
            _is.read(strHeadUrl, 1, false);
            _is.read(strNickName, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwVuid,"ddwVuid");
            _ds.display(strHeadUrl,"strHeadUrl");
            _ds.display(strNickName,"strNickName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwVuid, true);
            _ds.displaySimple(strHeadUrl, true);
            _ds.displaySimple(strNickName, false);
            return _os;
        }
    public:
        taf::Int64 ddwVuid;
        std::string strHeadUrl;
        std::string strNickName;
    };
    inline bool operator==(const MyUserInfo&l, const MyUserInfo&r)
    {
        return l.ddwVuid == r.ddwVuid && l.strHeadUrl == r.strHeadUrl && l.strNickName == r.strNickName;
    }
    inline bool operator!=(const MyUserInfo&l, const MyUserInfo&r)
    {
        return !(l == r);
    }

    struct AccountState : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AccountState";
        }
        static string MD5()
        {
            return "1503f2c0093f64429868895db8e2284b";
        }
        AccountState()
        :iState(0),iRewardNum(0),iRewardCnt(0)
        {
        }
        void resetDefautlt()
        {
            iState = 0;
            iRewardNum = 0;
            iRewardCnt = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stAccountInfo, 0);
            _os.write(iState, 1);
            _os.write(vecFansInfo, 2);
            _os.write(iRewardNum, 3);
            _os.write(iRewardCnt, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stAccountInfo, 0, true);
            _is.read(iState, 1, true);
            _is.read(vecFansInfo, 2, false);
            _is.read(iRewardNum, 3, false);
            _is.read(iRewardCnt, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stAccountInfo,"stAccountInfo");
            _ds.display(iState,"iState");
            _ds.display(vecFansInfo,"vecFansInfo");
            _ds.display(iRewardNum,"iRewardNum");
            _ds.display(iRewardCnt,"iRewardCnt");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stAccountInfo, true);
            _ds.displaySimple(iState, true);
            _ds.displaySimple(vecFansInfo, true);
            _ds.displaySimple(iRewardNum, true);
            _ds.displaySimple(iRewardCnt, false);
            return _os;
        }
    public:
        jce::AccountInfo stAccountInfo;
        taf::Int32 iState;
        vector<jce::MyUserInfo> vecFansInfo;
        taf::Int32 iRewardNum;
        taf::Int32 iRewardCnt;
    };
    inline bool operator==(const AccountState&l, const AccountState&r)
    {
        return l.stAccountInfo == r.stAccountInfo && l.iState == r.iState && l.vecFansInfo == r.vecFansInfo && l.iRewardNum == r.iRewardNum && l.iRewardCnt == r.iRewardCnt;
    }
    inline bool operator!=(const AccountState&l, const AccountState&r)
    {
        return !(l == r);
    }

    struct CheckWhiteIdolAndFansHeadResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckWhiteIdolAndFansHeadResponse";
        }
        static string MD5()
        {
            return "38763982f287338034f00e14a006bf64";
        }
        CheckWhiteIdolAndFansHeadResponse()
        :strKey1(""),strRewardUrl("")
        {
        }
        void resetDefautlt()
        {
            strKey1 = "";
            strRewardUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stCommRsp, 0);
            _os.write(stIdolState, 1);
            _os.write(strKey1, 2);
            _os.write(strRewardUrl, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stCommRsp, 0, true);
            _is.read(stIdolState, 1, false);
            _is.read(strKey1, 2, false);
            _is.read(strRewardUrl, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stCommRsp,"stCommRsp");
            _ds.display(stIdolState,"stIdolState");
            _ds.display(strKey1,"strKey1");
            _ds.display(strRewardUrl,"strRewardUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stCommRsp, true);
            _ds.displaySimple(stIdolState, true);
            _ds.displaySimple(strKey1, true);
            _ds.displaySimple(strRewardUrl, false);
            return _os;
        }
    public:
        jce::CommRsp stCommRsp;
        jce::AccountState stIdolState;
        std::string strKey1;
        std::string strRewardUrl;
    };
    inline bool operator==(const CheckWhiteIdolAndFansHeadResponse&l, const CheckWhiteIdolAndFansHeadResponse&r)
    {
        return l.stCommRsp == r.stCommRsp && l.stIdolState == r.stIdolState && l.strKey1 == r.strKey1 && l.strRewardUrl == r.strRewardUrl;
    }
    inline bool operator!=(const CheckWhiteIdolAndFansHeadResponse&l, const CheckWhiteIdolAndFansHeadResponse&r)
    {
        return !(l == r);
    }

    struct GetRewardFansHeadAndNumRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetRewardFansHeadAndNumRequest";
        }
        static string MD5()
        {
            return "a47803ca707f0ed451a251985e5aadd1";
        }
        GetRewardFansHeadAndNumRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stIdolAccount, 0);
            _os.write(stVideoInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stIdolAccount, 0, true);
            _is.read(stVideoInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stIdolAccount,"stIdolAccount");
            _ds.display(stVideoInfo,"stVideoInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stIdolAccount, true);
            _ds.displaySimple(stVideoInfo, false);
            return _os;
        }
    public:
        jce::AccountInfo stIdolAccount;
        jce::VideoInfo stVideoInfo;
    };
    inline bool operator==(const GetRewardFansHeadAndNumRequest&l, const GetRewardFansHeadAndNumRequest&r)
    {
        return l.stIdolAccount == r.stIdolAccount && l.stVideoInfo == r.stVideoInfo;
    }
    inline bool operator!=(const GetRewardFansHeadAndNumRequest&l, const GetRewardFansHeadAndNumRequest&r)
    {
        return !(l == r);
    }

    struct GetRewardFansHeadAndNumResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetRewardFansHeadAndNumResponse";
        }
        static string MD5()
        {
            return "e62ab2453978d5bf984028acbd592a2e";
        }
        GetRewardFansHeadAndNumResponse()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stCommRsp, 0);
            _os.write(stIdolState, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stCommRsp, 0, true);
            _is.read(stIdolState, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stCommRsp,"stCommRsp");
            _ds.display(stIdolState,"stIdolState");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stCommRsp, true);
            _ds.displaySimple(stIdolState, false);
            return _os;
        }
    public:
        jce::CommRsp stCommRsp;
        jce::AccountState stIdolState;
    };
    inline bool operator==(const GetRewardFansHeadAndNumResponse&l, const GetRewardFansHeadAndNumResponse&r)
    {
        return l.stCommRsp == r.stCommRsp && l.stIdolState == r.stIdolState;
    }
    inline bool operator!=(const GetRewardFansHeadAndNumResponse&l, const GetRewardFansHeadAndNumResponse&r)
    {
        return !(l == r);
    }


}

#define jce_CommRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.retCode,b.retCode);jce_copy_struct(a.errMsg,b.errMsg);

#define jce_AccountInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.account,b.account);jce_copy_struct(a.accounttype,b.accounttype);

#define jce_VideoInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iVType,b.iVType);jce_copy_struct(a.strId,b.strId);

#define jce_GetEncrpyKeyRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stIdolInfo,b.stIdolInfo);

#define jce_GetEncrpyKeyResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stCommRsp,b.stCommRsp);jce_copy_struct(a.strEncrpyKey,b.strEncrpyKey);jce_copy_struct(a.sDomain,b.sDomain);

#define jce_CheckEncrpyRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strKey1,b.strKey1);jce_copy_struct(a.strKey2,b.strKey2);jce_copy_struct(a.strNickname,b.strNickname);

#define jce_CheckEncrpyResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stCommRsp,b.stCommRsp);jce_copy_struct(a.stFansInfo,b.stFansInfo);jce_copy_struct(a.stIdolInfo,b.stIdolInfo);

#define jce_RewardWaterLogRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vecFansAccountInfo,b.vecFansAccountInfo);jce_copy_struct(a.stIdolAccountInfo,b.stIdolAccountInfo);jce_copy_struct(a.iSceneType,b.iSceneType);jce_copy_struct(a.iRewardNum,b.iRewardNum);jce_copy_struct(a.strPlatForm,b.strPlatForm);jce_copy_struct(a.strAppInfo,b.strAppInfo);jce_copy_struct(a.iClientIp,b.iClientIp);jce_copy_struct(a.strGuid,b.strGuid);jce_copy_struct(a.stVideoInfo,b.stVideoInfo);

#define jce_RewardWaterLogResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stCommRsp,b.stCommRsp);

#define jce_CheckWhiteIdolAndFansHeadRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stIdolAccount,b.stIdolAccount);jce_copy_struct(a.stVideoInfo,b.stVideoInfo);

#define jce_MyUserInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwVuid,b.ddwVuid);jce_copy_struct(a.strHeadUrl,b.strHeadUrl);jce_copy_struct(a.strNickName,b.strNickName);

#define jce_AccountState_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stAccountInfo,b.stAccountInfo);jce_copy_struct(a.iState,b.iState);jce_copy_struct(a.vecFansInfo,b.vecFansInfo);jce_copy_struct(a.iRewardNum,b.iRewardNum);jce_copy_struct(a.iRewardCnt,b.iRewardCnt);

#define jce_CheckWhiteIdolAndFansHeadResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stCommRsp,b.stCommRsp);jce_copy_struct(a.stIdolState,b.stIdolState);jce_copy_struct(a.strKey1,b.strKey1);jce_copy_struct(a.strRewardUrl,b.strRewardUrl);

#define jce_GetRewardFansHeadAndNumRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stIdolAccount,b.stIdolAccount);jce_copy_struct(a.stVideoInfo,b.stVideoInfo);

#define jce_GetRewardFansHeadAndNumResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stCommRsp,b.stCommRsp);jce_copy_struct(a.stIdolState,b.stIdolState);



#endif
