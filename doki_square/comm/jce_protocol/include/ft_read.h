// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `ft_read.jce'
// **********************************************************************

#ifndef __FT_READ_H_
#define __FT_READ_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace CFtReadPro
{
    enum FeedType
    {
        FEED_TYPE_NORMAL = 0,
        FEED_TYPE_VIDEO = 1,
        FEED_TYPE_FORCPIC = 2,
        FEED_TYPE_HOTPOST = 3,
        FEED_TYPE_ARTICLE = 4,
        FEED_TYPE_DABANG = 5,
        FEED_TYPE_USELESS = 6,
    };
    inline string etos(const FeedType & e)
    {
        switch(e)
        {
            case FEED_TYPE_NORMAL: return "FEED_TYPE_NORMAL";
            case FEED_TYPE_VIDEO: return "FEED_TYPE_VIDEO";
            case FEED_TYPE_FORCPIC: return "FEED_TYPE_FORCPIC";
            case FEED_TYPE_HOTPOST: return "FEED_TYPE_HOTPOST";
            case FEED_TYPE_ARTICLE: return "FEED_TYPE_ARTICLE";
            case FEED_TYPE_DABANG: return "FEED_TYPE_DABANG";
            case FEED_TYPE_USELESS: return "FEED_TYPE_USELESS";
            default: return "";
        }
    }
    inline int stoe(const string & s, FeedType & e)
    {
        if(s == "FEED_TYPE_NORMAL")  { e=FEED_TYPE_NORMAL; return 0;}
        if(s == "FEED_TYPE_VIDEO")  { e=FEED_TYPE_VIDEO; return 0;}
        if(s == "FEED_TYPE_FORCPIC")  { e=FEED_TYPE_FORCPIC; return 0;}
        if(s == "FEED_TYPE_HOTPOST")  { e=FEED_TYPE_HOTPOST; return 0;}
        if(s == "FEED_TYPE_ARTICLE")  { e=FEED_TYPE_ARTICLE; return 0;}
        if(s == "FEED_TYPE_DABANG")  { e=FEED_TYPE_DABANG; return 0;}
        if(s == "FEED_TYPE_USELESS")  { e=FEED_TYPE_USELESS; return 0;}

        return -1;
    }

    enum ReasonType
    {
        REASON_NONE = 0,
        REASON_FIRST_CATE = 101,
        REASON_SECOND_CATE = 102,
        REASON_TAG = 103,
        REASON_LBS = 104,
        REASON_TITLE = 105,
        REASON_USER_GROUP = 106,
    };
    inline string etos(const ReasonType & e)
    {
        switch(e)
        {
            case REASON_NONE: return "REASON_NONE";
            case REASON_FIRST_CATE: return "REASON_FIRST_CATE";
            case REASON_SECOND_CATE: return "REASON_SECOND_CATE";
            case REASON_TAG: return "REASON_TAG";
            case REASON_LBS: return "REASON_LBS";
            case REASON_TITLE: return "REASON_TITLE";
            case REASON_USER_GROUP: return "REASON_USER_GROUP";
            default: return "";
        }
    }
    inline int stoe(const string & s, ReasonType & e)
    {
        if(s == "REASON_NONE")  { e=REASON_NONE; return 0;}
        if(s == "REASON_FIRST_CATE")  { e=REASON_FIRST_CATE; return 0;}
        if(s == "REASON_SECOND_CATE")  { e=REASON_SECOND_CATE; return 0;}
        if(s == "REASON_TAG")  { e=REASON_TAG; return 0;}
        if(s == "REASON_LBS")  { e=REASON_LBS; return 0;}
        if(s == "REASON_TITLE")  { e=REASON_TITLE; return 0;}
        if(s == "REASON_USER_GROUP")  { e=REASON_USER_GROUP; return 0;}

        return -1;
    }

    enum ModuleCmd
    {
        CMD_READ_MYFT = 60441,
        CMD_READ_MYPOST = 60442,
        CMD_READ_MYCOMMENT = 60443,
        CMD_READ_MYMSGCNT = 60444,
        CMD_READ_MYMSGLIST = 60445,
        CMD_READ_POSTDETAIL = 60448,
        CMD_READ_POSTLIST = 60446,
        CMD_READ_HOTPOSTLIST = 60447,
        CMD_READ_USERINFTINFO = 60449,
        CMD_READ_FTRANK = 60450,
        CMD_READ_FTRANKMENU = 60507,
        CMD_READ_FTFANSRANK = 60538,
        CMD_READ_FTDETAIL = 60547,
        CMD_READ_HOTFT = 60561,
        CMD_READ_FTFANS = 60583,
        CMD_READ_RECOMMPOSTLIST = 60750,
        CMD_READ_RTIME_RECOMMPOST = 60889,
        CMD_READ_FTSTARRANK = 61004,
        CMD_READ_FTSTARRANKDETAIL = 61005,
        CMD_READ_FTEXCLFEEDS = 61031,
        CMD_READ_FTDYNCFEEDS = 61030,
        CMD_READ_FTSTARHISTLIST = 61118,
        CMD_READ_FTTOURTAB = 61124,
        CMD_READ_FTTOPICLIST = 61305,
        CMD_READ_FTTOPNEWSLIST = 61332,
        CMD_READ_FTFOCUSINFO = 61478,
        CMD_READ_MYALLFT = 61884,
        CMD_READ_FTBASEINFO = 62491,
    };
    inline string etos(const ModuleCmd & e)
    {
        switch(e)
        {
            case CMD_READ_MYFT: return "CMD_READ_MYFT";
            case CMD_READ_MYPOST: return "CMD_READ_MYPOST";
            case CMD_READ_MYCOMMENT: return "CMD_READ_MYCOMMENT";
            case CMD_READ_MYMSGCNT: return "CMD_READ_MYMSGCNT";
            case CMD_READ_MYMSGLIST: return "CMD_READ_MYMSGLIST";
            case CMD_READ_POSTDETAIL: return "CMD_READ_POSTDETAIL";
            case CMD_READ_POSTLIST: return "CMD_READ_POSTLIST";
            case CMD_READ_HOTPOSTLIST: return "CMD_READ_HOTPOSTLIST";
            case CMD_READ_USERINFTINFO: return "CMD_READ_USERINFTINFO";
            case CMD_READ_FTRANK: return "CMD_READ_FTRANK";
            case CMD_READ_FTRANKMENU: return "CMD_READ_FTRANKMENU";
            case CMD_READ_FTFANSRANK: return "CMD_READ_FTFANSRANK";
            case CMD_READ_FTDETAIL: return "CMD_READ_FTDETAIL";
            case CMD_READ_HOTFT: return "CMD_READ_HOTFT";
            case CMD_READ_FTFANS: return "CMD_READ_FTFANS";
            case CMD_READ_RECOMMPOSTLIST: return "CMD_READ_RECOMMPOSTLIST";
            case CMD_READ_RTIME_RECOMMPOST: return "CMD_READ_RTIME_RECOMMPOST";
            case CMD_READ_FTSTARRANK: return "CMD_READ_FTSTARRANK";
            case CMD_READ_FTSTARRANKDETAIL: return "CMD_READ_FTSTARRANKDETAIL";
            case CMD_READ_FTEXCLFEEDS: return "CMD_READ_FTEXCLFEEDS";
            case CMD_READ_FTDYNCFEEDS: return "CMD_READ_FTDYNCFEEDS";
            case CMD_READ_FTSTARHISTLIST: return "CMD_READ_FTSTARHISTLIST";
            case CMD_READ_FTTOURTAB: return "CMD_READ_FTTOURTAB";
            case CMD_READ_FTTOPICLIST: return "CMD_READ_FTTOPICLIST";
            case CMD_READ_FTTOPNEWSLIST: return "CMD_READ_FTTOPNEWSLIST";
            case CMD_READ_FTFOCUSINFO: return "CMD_READ_FTFOCUSINFO";
            case CMD_READ_MYALLFT: return "CMD_READ_MYALLFT";
            case CMD_READ_FTBASEINFO: return "CMD_READ_FTBASEINFO";
            default: return "";
        }
    }
    inline int stoe(const string & s, ModuleCmd & e)
    {
        if(s == "CMD_READ_MYFT")  { e=CMD_READ_MYFT; return 0;}
        if(s == "CMD_READ_MYPOST")  { e=CMD_READ_MYPOST; return 0;}
        if(s == "CMD_READ_MYCOMMENT")  { e=CMD_READ_MYCOMMENT; return 0;}
        if(s == "CMD_READ_MYMSGCNT")  { e=CMD_READ_MYMSGCNT; return 0;}
        if(s == "CMD_READ_MYMSGLIST")  { e=CMD_READ_MYMSGLIST; return 0;}
        if(s == "CMD_READ_POSTDETAIL")  { e=CMD_READ_POSTDETAIL; return 0;}
        if(s == "CMD_READ_POSTLIST")  { e=CMD_READ_POSTLIST; return 0;}
        if(s == "CMD_READ_HOTPOSTLIST")  { e=CMD_READ_HOTPOSTLIST; return 0;}
        if(s == "CMD_READ_USERINFTINFO")  { e=CMD_READ_USERINFTINFO; return 0;}
        if(s == "CMD_READ_FTRANK")  { e=CMD_READ_FTRANK; return 0;}
        if(s == "CMD_READ_FTRANKMENU")  { e=CMD_READ_FTRANKMENU; return 0;}
        if(s == "CMD_READ_FTFANSRANK")  { e=CMD_READ_FTFANSRANK; return 0;}
        if(s == "CMD_READ_FTDETAIL")  { e=CMD_READ_FTDETAIL; return 0;}
        if(s == "CMD_READ_HOTFT")  { e=CMD_READ_HOTFT; return 0;}
        if(s == "CMD_READ_FTFANS")  { e=CMD_READ_FTFANS; return 0;}
        if(s == "CMD_READ_RECOMMPOSTLIST")  { e=CMD_READ_RECOMMPOSTLIST; return 0;}
        if(s == "CMD_READ_RTIME_RECOMMPOST")  { e=CMD_READ_RTIME_RECOMMPOST; return 0;}
        if(s == "CMD_READ_FTSTARRANK")  { e=CMD_READ_FTSTARRANK; return 0;}
        if(s == "CMD_READ_FTSTARRANKDETAIL")  { e=CMD_READ_FTSTARRANKDETAIL; return 0;}
        if(s == "CMD_READ_FTEXCLFEEDS")  { e=CMD_READ_FTEXCLFEEDS; return 0;}
        if(s == "CMD_READ_FTDYNCFEEDS")  { e=CMD_READ_FTDYNCFEEDS; return 0;}
        if(s == "CMD_READ_FTSTARHISTLIST")  { e=CMD_READ_FTSTARHISTLIST; return 0;}
        if(s == "CMD_READ_FTTOURTAB")  { e=CMD_READ_FTTOURTAB; return 0;}
        if(s == "CMD_READ_FTTOPICLIST")  { e=CMD_READ_FTTOPICLIST; return 0;}
        if(s == "CMD_READ_FTTOPNEWSLIST")  { e=CMD_READ_FTTOPNEWSLIST; return 0;}
        if(s == "CMD_READ_FTFOCUSINFO")  { e=CMD_READ_FTFOCUSINFO; return 0;}
        if(s == "CMD_READ_MYALLFT")  { e=CMD_READ_MYALLFT; return 0;}
        if(s == "CMD_READ_FTBASEINFO")  { e=CMD_READ_FTBASEINFO; return 0;}

        return -1;
    }

    enum ModuleErrCode
    {
        RT_SUC = 0,
        RT_ERR_PACKET = 1001,
        RT_INPUT_INVALID = 1002,
        RT_SERVER_ERROR = 1003,
        RT_ENCODE_RSP_PKG_FAIL = 1004,
        RT_READ_MYFT_FAIL = 1005,
        RT_READ_MYPOST_FAIL = 1006,
        RT_READ_MYCOMMENT_FAIL = 1007,
        RT_READ_MYMSGCNT_FAIL = 1008,
        RT_READ_MYMSGLIST_FAIL = 1009,
        RT_READ_POSTDETAIL_FAIL = 1010,
        RT_READ_POSTLIST_FAIL = 1011,
        RT_READ_HOTPOSTLIST_FAIL = 1012,
        RT_READ_USERINFTINFO_FAIL = 1013,
        RT_READ_FTRANK_FAIL = 1014,
        RT_READ_FTRANKMENU_FAIL = 1015,
        RT_READ_FTFANSRANK_FAIL = 1016,
        RT_READ_FTDETAIL_FAIL = 1017,
        RT_READ_HOTFT_FAIL = 1018,
        RT_READ_FTFANS_FAIL = 1019,
        RT_READ_RTIME_REC_CACHE_NO_DATA = 1020,
        RT_READ_RTIME_REC_REPEAT = 1021,
        RT_READ_RTIME_NO_RECOMM = 1022,
        RT_READ_FTSTARRANK_FAIL = 1023,
        RT_READ_FTSTARRANKDETAIL_FAIL = 1024,
        RT_READ_FTFOCUS_FAIL = 1025,
    };
    inline string etos(const ModuleErrCode & e)
    {
        switch(e)
        {
            case RT_SUC: return "RT_SUC";
            case RT_ERR_PACKET: return "RT_ERR_PACKET";
            case RT_INPUT_INVALID: return "RT_INPUT_INVALID";
            case RT_SERVER_ERROR: return "RT_SERVER_ERROR";
            case RT_ENCODE_RSP_PKG_FAIL: return "RT_ENCODE_RSP_PKG_FAIL";
            case RT_READ_MYFT_FAIL: return "RT_READ_MYFT_FAIL";
            case RT_READ_MYPOST_FAIL: return "RT_READ_MYPOST_FAIL";
            case RT_READ_MYCOMMENT_FAIL: return "RT_READ_MYCOMMENT_FAIL";
            case RT_READ_MYMSGCNT_FAIL: return "RT_READ_MYMSGCNT_FAIL";
            case RT_READ_MYMSGLIST_FAIL: return "RT_READ_MYMSGLIST_FAIL";
            case RT_READ_POSTDETAIL_FAIL: return "RT_READ_POSTDETAIL_FAIL";
            case RT_READ_POSTLIST_FAIL: return "RT_READ_POSTLIST_FAIL";
            case RT_READ_HOTPOSTLIST_FAIL: return "RT_READ_HOTPOSTLIST_FAIL";
            case RT_READ_USERINFTINFO_FAIL: return "RT_READ_USERINFTINFO_FAIL";
            case RT_READ_FTRANK_FAIL: return "RT_READ_FTRANK_FAIL";
            case RT_READ_FTRANKMENU_FAIL: return "RT_READ_FTRANKMENU_FAIL";
            case RT_READ_FTFANSRANK_FAIL: return "RT_READ_FTFANSRANK_FAIL";
            case RT_READ_FTDETAIL_FAIL: return "RT_READ_FTDETAIL_FAIL";
            case RT_READ_HOTFT_FAIL: return "RT_READ_HOTFT_FAIL";
            case RT_READ_FTFANS_FAIL: return "RT_READ_FTFANS_FAIL";
            case RT_READ_RTIME_REC_CACHE_NO_DATA: return "RT_READ_RTIME_REC_CACHE_NO_DATA";
            case RT_READ_RTIME_REC_REPEAT: return "RT_READ_RTIME_REC_REPEAT";
            case RT_READ_RTIME_NO_RECOMM: return "RT_READ_RTIME_NO_RECOMM";
            case RT_READ_FTSTARRANK_FAIL: return "RT_READ_FTSTARRANK_FAIL";
            case RT_READ_FTSTARRANKDETAIL_FAIL: return "RT_READ_FTSTARRANKDETAIL_FAIL";
            case RT_READ_FTFOCUS_FAIL: return "RT_READ_FTFOCUS_FAIL";
            default: return "";
        }
    }
    inline int stoe(const string & s, ModuleErrCode & e)
    {
        if(s == "RT_SUC")  { e=RT_SUC; return 0;}
        if(s == "RT_ERR_PACKET")  { e=RT_ERR_PACKET; return 0;}
        if(s == "RT_INPUT_INVALID")  { e=RT_INPUT_INVALID; return 0;}
        if(s == "RT_SERVER_ERROR")  { e=RT_SERVER_ERROR; return 0;}
        if(s == "RT_ENCODE_RSP_PKG_FAIL")  { e=RT_ENCODE_RSP_PKG_FAIL; return 0;}
        if(s == "RT_READ_MYFT_FAIL")  { e=RT_READ_MYFT_FAIL; return 0;}
        if(s == "RT_READ_MYPOST_FAIL")  { e=RT_READ_MYPOST_FAIL; return 0;}
        if(s == "RT_READ_MYCOMMENT_FAIL")  { e=RT_READ_MYCOMMENT_FAIL; return 0;}
        if(s == "RT_READ_MYMSGCNT_FAIL")  { e=RT_READ_MYMSGCNT_FAIL; return 0;}
        if(s == "RT_READ_MYMSGLIST_FAIL")  { e=RT_READ_MYMSGLIST_FAIL; return 0;}
        if(s == "RT_READ_POSTDETAIL_FAIL")  { e=RT_READ_POSTDETAIL_FAIL; return 0;}
        if(s == "RT_READ_POSTLIST_FAIL")  { e=RT_READ_POSTLIST_FAIL; return 0;}
        if(s == "RT_READ_HOTPOSTLIST_FAIL")  { e=RT_READ_HOTPOSTLIST_FAIL; return 0;}
        if(s == "RT_READ_USERINFTINFO_FAIL")  { e=RT_READ_USERINFTINFO_FAIL; return 0;}
        if(s == "RT_READ_FTRANK_FAIL")  { e=RT_READ_FTRANK_FAIL; return 0;}
        if(s == "RT_READ_FTRANKMENU_FAIL")  { e=RT_READ_FTRANKMENU_FAIL; return 0;}
        if(s == "RT_READ_FTFANSRANK_FAIL")  { e=RT_READ_FTFANSRANK_FAIL; return 0;}
        if(s == "RT_READ_FTDETAIL_FAIL")  { e=RT_READ_FTDETAIL_FAIL; return 0;}
        if(s == "RT_READ_HOTFT_FAIL")  { e=RT_READ_HOTFT_FAIL; return 0;}
        if(s == "RT_READ_FTFANS_FAIL")  { e=RT_READ_FTFANS_FAIL; return 0;}
        if(s == "RT_READ_RTIME_REC_CACHE_NO_DATA")  { e=RT_READ_RTIME_REC_CACHE_NO_DATA; return 0;}
        if(s == "RT_READ_RTIME_REC_REPEAT")  { e=RT_READ_RTIME_REC_REPEAT; return 0;}
        if(s == "RT_READ_RTIME_NO_RECOMM")  { e=RT_READ_RTIME_NO_RECOMM; return 0;}
        if(s == "RT_READ_FTSTARRANK_FAIL")  { e=RT_READ_FTSTARRANK_FAIL; return 0;}
        if(s == "RT_READ_FTSTARRANKDETAIL_FAIL")  { e=RT_READ_FTSTARRANKDETAIL_FAIL; return 0;}
        if(s == "RT_READ_FTFOCUS_FAIL")  { e=RT_READ_FTFOCUS_FAIL; return 0;}

        return -1;
    }

    struct FanTuanImageInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanImageInfo";
        }
        static string MD5()
        {
            return "92478333d6a10869af6214b470f4ceda";
        }
        FanTuanImageInfo()
        :dwPlayTime(0),strImageUrl(""),strWaterFlagUrl(""),strHandWriteInfo(""),iWidth(0),iHeight(0),cImageType(0)
        {
        }
        void resetDefautlt()
        {
            dwPlayTime = 0;
            strImageUrl = "";
            strWaterFlagUrl = "";
            strHandWriteInfo = "";
            iWidth = 0;
            iHeight = 0;
            cImageType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwPlayTime, 0);
            _os.write(strImageUrl, 1);
            _os.write(strWaterFlagUrl, 2);
            _os.write(strHandWriteInfo, 3);
            _os.write(iWidth, 4);
            _os.write(iHeight, 5);
            _os.write(cImageType, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwPlayTime, 0, true);
            _is.read(strImageUrl, 1, true);
            _is.read(strWaterFlagUrl, 2, false);
            _is.read(strHandWriteInfo, 3, false);
            _is.read(iWidth, 4, false);
            _is.read(iHeight, 5, false);
            _is.read(cImageType, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwPlayTime,"dwPlayTime");
            _ds.display(strImageUrl,"strImageUrl");
            _ds.display(strWaterFlagUrl,"strWaterFlagUrl");
            _ds.display(strHandWriteInfo,"strHandWriteInfo");
            _ds.display(iWidth,"iWidth");
            _ds.display(iHeight,"iHeight");
            _ds.display(cImageType,"cImageType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwPlayTime, true);
            _ds.displaySimple(strImageUrl, true);
            _ds.displaySimple(strWaterFlagUrl, true);
            _ds.displaySimple(strHandWriteInfo, true);
            _ds.displaySimple(iWidth, true);
            _ds.displaySimple(iHeight, true);
            _ds.displaySimple(cImageType, false);
            return _os;
        }
    public:
        taf::UInt32 dwPlayTime;
        std::string strImageUrl;
        std::string strWaterFlagUrl;
        std::string strHandWriteInfo;
        taf::Int32 iWidth;
        taf::Int32 iHeight;
        taf::UInt8 cImageType;
    };
    inline bool operator==(const FanTuanImageInfo&l, const FanTuanImageInfo&r)
    {
        return l.dwPlayTime == r.dwPlayTime && l.strImageUrl == r.strImageUrl && l.strWaterFlagUrl == r.strWaterFlagUrl && l.strHandWriteInfo == r.strHandWriteInfo && l.iWidth == r.iWidth && l.iHeight == r.iHeight && l.cImageType == r.cImageType;
    }
    inline bool operator!=(const FanTuanImageInfo&l, const FanTuanImageInfo&r)
    {
        return !(l == r);
    }

    struct FanTuanShortVideoInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanShortVideoInfo";
        }
        static string MD5()
        {
            return "6f59d01bc8b3e6f204830490680a10cd";
        }
        FanTuanShortVideoInfo()
        :strVid(""),strH5Url(""),dwPlayTime(0),strImageUrl(""),strPlayUrl(""),strDesc(""),bIsDemoVideo(false)
        {
        }
        void resetDefautlt()
        {
            strVid = "";
            strH5Url = "";
            dwPlayTime = 0;
            strImageUrl = "";
            strPlayUrl = "";
            strDesc = "";
            bIsDemoVideo = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strVid, 0);
            _os.write(strH5Url, 1);
            _os.write(dwPlayTime, 2);
            _os.write(strImageUrl, 3);
            _os.write(strPlayUrl, 4);
            _os.write(strDesc, 5);
            _os.write(bIsDemoVideo, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strVid, 0, true);
            _is.read(strH5Url, 1, true);
            _is.read(dwPlayTime, 2, true);
            _is.read(strImageUrl, 3, true);
            _is.read(strPlayUrl, 4, false);
            _is.read(strDesc, 5, false);
            _is.read(bIsDemoVideo, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strVid,"strVid");
            _ds.display(strH5Url,"strH5Url");
            _ds.display(dwPlayTime,"dwPlayTime");
            _ds.display(strImageUrl,"strImageUrl");
            _ds.display(strPlayUrl,"strPlayUrl");
            _ds.display(strDesc,"strDesc");
            _ds.display(bIsDemoVideo,"bIsDemoVideo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strVid, true);
            _ds.displaySimple(strH5Url, true);
            _ds.displaySimple(dwPlayTime, true);
            _ds.displaySimple(strImageUrl, true);
            _ds.displaySimple(strPlayUrl, true);
            _ds.displaySimple(strDesc, true);
            _ds.displaySimple(bIsDemoVideo, false);
            return _os;
        }
    public:
        std::string strVid;
        std::string strH5Url;
        taf::UInt32 dwPlayTime;
        std::string strImageUrl;
        std::string strPlayUrl;
        std::string strDesc;
        taf::Bool bIsDemoVideo;
    };
    inline bool operator==(const FanTuanShortVideoInfo&l, const FanTuanShortVideoInfo&r)
    {
        return l.strVid == r.strVid && l.strH5Url == r.strH5Url && l.dwPlayTime == r.dwPlayTime && l.strImageUrl == r.strImageUrl && l.strPlayUrl == r.strPlayUrl && l.strDesc == r.strDesc && l.bIsDemoVideo == r.bIsDemoVideo;
    }
    inline bool operator!=(const FanTuanShortVideoInfo&l, const FanTuanShortVideoInfo&r)
    {
        return !(l == r);
    }

    struct STFtShareItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STFtShareItem";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        STFtShareItem()
        :shareUrl(""),shareTitle(""),shareSubTitle(""),shareImgUrl(""),circleShareKey("")
        {
        }
        void resetDefautlt()
        {
            shareUrl = "";
            shareTitle = "";
            shareSubTitle = "";
            shareImgUrl = "";
            circleShareKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(shareUrl, 1);
            _os.write(shareTitle, 2);
            _os.write(shareSubTitle, 3);
            _os.write(shareImgUrl, 4);
            _os.write(circleShareKey, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(shareUrl, 1, false);
            _is.read(shareTitle, 2, false);
            _is.read(shareSubTitle, 3, false);
            _is.read(shareImgUrl, 4, false);
            _is.read(circleShareKey, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(shareUrl,"shareUrl");
            _ds.display(shareTitle,"shareTitle");
            _ds.display(shareSubTitle,"shareSubTitle");
            _ds.display(shareImgUrl,"shareImgUrl");
            _ds.display(circleShareKey,"circleShareKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(shareUrl, true);
            _ds.displaySimple(shareTitle, true);
            _ds.displaySimple(shareSubTitle, true);
            _ds.displaySimple(shareImgUrl, true);
            _ds.displaySimple(circleShareKey, false);
            return _os;
        }
    public:
        std::string shareUrl;
        std::string shareTitle;
        std::string shareSubTitle;
        std::string shareImgUrl;
        std::string circleShareKey;
    };
    inline bool operator==(const STFtShareItem&l, const STFtShareItem&r)
    {
        return l.shareUrl == r.shareUrl && l.shareTitle == r.shareTitle && l.shareSubTitle == r.shareSubTitle && l.shareImgUrl == r.shareImgUrl && l.circleShareKey == r.circleShareKey;
    }
    inline bool operator!=(const STFtShareItem&l, const STFtShareItem&r)
    {
        return !(l == r);
    }

    struct STFtVideoAttentItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STFtVideoAttentItem";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        STFtVideoAttentItem()
        :attentKey("")
        {
        }
        void resetDefautlt()
        {
            attentKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(attentKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(attentKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(attentKey,"attentKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(attentKey, false);
            return _os;
        }
    public:
        std::string attentKey;
    };
    inline bool operator==(const STFtVideoAttentItem&l, const STFtVideoAttentItem&r)
    {
        return l.attentKey == r.attentKey;
    }
    inline bool operator!=(const STFtVideoAttentItem&l, const STFtVideoAttentItem&r)
    {
        return !(l == r);
    }

    struct FanTuanLongVideoInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanLongVideoInfo";
        }
        static string MD5()
        {
            return "3c054d16ee5d201777261c5854cdc733";
        }
        FanTuanLongVideoInfo()
        :strVid(""),dwPlayTime(0),strTitle(""),strImageUrl(""),strPlayUrl(""),strPlayRight(""),strSecondTitle(""),cFromFlag(0),strDefn(""),ddwPlayCount(0)
        {
        }
        void resetDefautlt()
        {
            strVid = "";
            dwPlayTime = 0;
            strTitle = "";
            strImageUrl = "";
            strPlayUrl = "";
            strPlayRight = "";
            strSecondTitle = "";
            cFromFlag = 0;
            strDefn = "";
            ddwPlayCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strVid, 0);
            _os.write(dwPlayTime, 1);
            _os.write(strTitle, 2);
            _os.write(strImageUrl, 3);
            _os.write(strPlayUrl, 4);
            _os.write(strPlayRight, 5);
            _os.write(strSecondTitle, 6);
            _os.write(cFromFlag, 7);
            _os.write(stFtShareItem, 8);
            _os.write(strDefn, 9);
            _os.write(stFtAttentItem, 10);
            _os.write(ddwPlayCount, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strVid, 0, true);
            _is.read(dwPlayTime, 1, true);
            _is.read(strTitle, 2, true);
            _is.read(strImageUrl, 3, true);
            _is.read(strPlayUrl, 4, false);
            _is.read(strPlayRight, 5, false);
            _is.read(strSecondTitle, 6, false);
            _is.read(cFromFlag, 7, false);
            _is.read(stFtShareItem, 8, false);
            _is.read(strDefn, 9, false);
            _is.read(stFtAttentItem, 10, false);
            _is.read(ddwPlayCount, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strVid,"strVid");
            _ds.display(dwPlayTime,"dwPlayTime");
            _ds.display(strTitle,"strTitle");
            _ds.display(strImageUrl,"strImageUrl");
            _ds.display(strPlayUrl,"strPlayUrl");
            _ds.display(strPlayRight,"strPlayRight");
            _ds.display(strSecondTitle,"strSecondTitle");
            _ds.display(cFromFlag,"cFromFlag");
            _ds.display(stFtShareItem,"stFtShareItem");
            _ds.display(strDefn,"strDefn");
            _ds.display(stFtAttentItem,"stFtAttentItem");
            _ds.display(ddwPlayCount,"ddwPlayCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strVid, true);
            _ds.displaySimple(dwPlayTime, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(strImageUrl, true);
            _ds.displaySimple(strPlayUrl, true);
            _ds.displaySimple(strPlayRight, true);
            _ds.displaySimple(strSecondTitle, true);
            _ds.displaySimple(cFromFlag, true);
            _ds.displaySimple(stFtShareItem, true);
            _ds.displaySimple(strDefn, true);
            _ds.displaySimple(stFtAttentItem, true);
            _ds.displaySimple(ddwPlayCount, false);
            return _os;
        }
    public:
        std::string strVid;
        taf::UInt32 dwPlayTime;
        std::string strTitle;
        std::string strImageUrl;
        std::string strPlayUrl;
        std::string strPlayRight;
        std::string strSecondTitle;
        taf::UInt8 cFromFlag;
        CFtReadPro::STFtShareItem stFtShareItem;
        std::string strDefn;
        CFtReadPro::STFtVideoAttentItem stFtAttentItem;
        taf::Int64 ddwPlayCount;
    };
    inline bool operator==(const FanTuanLongVideoInfo&l, const FanTuanLongVideoInfo&r)
    {
        return l.strVid == r.strVid && l.dwPlayTime == r.dwPlayTime && l.strTitle == r.strTitle && l.strImageUrl == r.strImageUrl && l.strPlayUrl == r.strPlayUrl && l.strPlayRight == r.strPlayRight && l.strSecondTitle == r.strSecondTitle && l.cFromFlag == r.cFromFlag && l.stFtShareItem == r.stFtShareItem && l.strDefn == r.strDefn && l.stFtAttentItem == r.stFtAttentItem && l.ddwPlayCount == r.ddwPlayCount;
    }
    inline bool operator!=(const FanTuanLongVideoInfo&l, const FanTuanLongVideoInfo&r)
    {
        return !(l == r);
    }

    struct FanTuanLiveInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanLiveInfo";
        }
        static string MD5()
        {
            return "14d47a4dd9f774d83bb6146d7aeb7f51";
        }
        FanTuanLiveInfo()
        :dwPid(0),cPidType(0)
        {
        }
        void resetDefautlt()
        {
            dwPid = 0;
            cPidType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwPid, 0);
            _os.write(cPidType, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwPid, 0, true);
            _is.read(cPidType, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwPid,"dwPid");
            _ds.display(cPidType,"cPidType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwPid, true);
            _ds.displaySimple(cPidType, false);
            return _os;
        }
    public:
        taf::UInt32 dwPid;
        taf::UInt8 cPidType;
    };
    inline bool operator==(const FanTuanLiveInfo&l, const FanTuanLiveInfo&r)
    {
        return l.dwPid == r.dwPid && l.cPidType == r.cPidType;
    }
    inline bool operator!=(const FanTuanLiveInfo&l, const FanTuanLiveInfo&r)
    {
        return !(l == r);
    }

    struct FanTuanUserInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanUserInfo";
        }
        static string MD5()
        {
            return "75e47aba60f1293fec1876658e7a80d0";
        }
        FanTuanUserInfo()
        :ddwUserId(0),strAccount(""),sThirdLogin(0),sAccoutType(0),strNick(""),strHead(""),strRegion(""),sGender(0),lRegisterTime(0),lCoralUserid(0),sCheckStatus(0),ddwMeal(0),ddwPostNum(0),ddwDeletePostNum(0),ddwCommentNum(0),ddwDeleteCommentNum(0),ddwCommentedNum(0),ddwUpedNum(0),strLable(""),sLevel(1)
        {
        }
        void resetDefautlt()
        {
            ddwUserId = 0;
            strAccount = "";
            sThirdLogin = 0;
            sAccoutType = 0;
            strNick = "";
            strHead = "";
            strRegion = "";
            sGender = 0;
            lRegisterTime = 0;
            lCoralUserid = 0;
            sCheckStatus = 0;
            ddwMeal = 0;
            ddwPostNum = 0;
            ddwDeletePostNum = 0;
            ddwCommentNum = 0;
            ddwDeleteCommentNum = 0;
            ddwCommentedNum = 0;
            ddwUpedNum = 0;
            strLable = "";
            sLevel = 1;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwUserId, 1);
            _os.write(strAccount, 2);
            _os.write(sThirdLogin, 3);
            _os.write(sAccoutType, 4);
            _os.write(strNick, 5);
            _os.write(strHead, 6);
            _os.write(strRegion, 7);
            _os.write(sGender, 8);
            _os.write(lRegisterTime, 9);
            _os.write(lCoralUserid, 10);
            _os.write(sCheckStatus, 11);
            _os.write(ddwMeal, 12);
            _os.write(ddwPostNum, 13);
            _os.write(ddwDeletePostNum, 14);
            _os.write(ddwCommentNum, 15);
            _os.write(ddwDeleteCommentNum, 16);
            _os.write(ddwCommentedNum, 17);
            _os.write(ddwUpedNum, 18);
            _os.write(strLable, 19);
            _os.write(sLevel, 20);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwUserId, 1, true);
            _is.read(strAccount, 2, true);
            _is.read(sThirdLogin, 3, true);
            _is.read(sAccoutType, 4, true);
            _is.read(strNick, 5, false);
            _is.read(strHead, 6, false);
            _is.read(strRegion, 7, false);
            _is.read(sGender, 8, false);
            _is.read(lRegisterTime, 9, false);
            _is.read(lCoralUserid, 10, false);
            _is.read(sCheckStatus, 11, false);
            _is.read(ddwMeal, 12, false);
            _is.read(ddwPostNum, 13, false);
            _is.read(ddwDeletePostNum, 14, false);
            _is.read(ddwCommentNum, 15, false);
            _is.read(ddwDeleteCommentNum, 16, false);
            _is.read(ddwCommentedNum, 17, false);
            _is.read(ddwUpedNum, 18, false);
            _is.read(strLable, 19, false);
            _is.read(sLevel, 20, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwUserId,"ddwUserId");
            _ds.display(strAccount,"strAccount");
            _ds.display(sThirdLogin,"sThirdLogin");
            _ds.display(sAccoutType,"sAccoutType");
            _ds.display(strNick,"strNick");
            _ds.display(strHead,"strHead");
            _ds.display(strRegion,"strRegion");
            _ds.display(sGender,"sGender");
            _ds.display(lRegisterTime,"lRegisterTime");
            _ds.display(lCoralUserid,"lCoralUserid");
            _ds.display(sCheckStatus,"sCheckStatus");
            _ds.display(ddwMeal,"ddwMeal");
            _ds.display(ddwPostNum,"ddwPostNum");
            _ds.display(ddwDeletePostNum,"ddwDeletePostNum");
            _ds.display(ddwCommentNum,"ddwCommentNum");
            _ds.display(ddwDeleteCommentNum,"ddwDeleteCommentNum");
            _ds.display(ddwCommentedNum,"ddwCommentedNum");
            _ds.display(ddwUpedNum,"ddwUpedNum");
            _ds.display(strLable,"strLable");
            _ds.display(sLevel,"sLevel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwUserId, true);
            _ds.displaySimple(strAccount, true);
            _ds.displaySimple(sThirdLogin, true);
            _ds.displaySimple(sAccoutType, true);
            _ds.displaySimple(strNick, true);
            _ds.displaySimple(strHead, true);
            _ds.displaySimple(strRegion, true);
            _ds.displaySimple(sGender, true);
            _ds.displaySimple(lRegisterTime, true);
            _ds.displaySimple(lCoralUserid, true);
            _ds.displaySimple(sCheckStatus, true);
            _ds.displaySimple(ddwMeal, true);
            _ds.displaySimple(ddwPostNum, true);
            _ds.displaySimple(ddwDeletePostNum, true);
            _ds.displaySimple(ddwCommentNum, true);
            _ds.displaySimple(ddwDeleteCommentNum, true);
            _ds.displaySimple(ddwCommentedNum, true);
            _ds.displaySimple(ddwUpedNum, true);
            _ds.displaySimple(strLable, true);
            _ds.displaySimple(sLevel, false);
            return _os;
        }
    public:
        taf::Int64 ddwUserId;
        std::string strAccount;
        taf::Short sThirdLogin;
        taf::Short sAccoutType;
        std::string strNick;
        std::string strHead;
        std::string strRegion;
        taf::Short sGender;
        taf::Int64 lRegisterTime;
        taf::Int64 lCoralUserid;
        taf::Short sCheckStatus;
        taf::Int64 ddwMeal;
        taf::Int64 ddwPostNum;
        taf::Int64 ddwDeletePostNum;
        taf::Int64 ddwCommentNum;
        taf::Int64 ddwDeleteCommentNum;
        taf::Int64 ddwCommentedNum;
        taf::Int64 ddwUpedNum;
        std::string strLable;
        taf::Short sLevel;
    };
    inline bool operator==(const FanTuanUserInfo&l, const FanTuanUserInfo&r)
    {
        return l.ddwUserId == r.ddwUserId && l.strAccount == r.strAccount && l.sThirdLogin == r.sThirdLogin && l.sAccoutType == r.sAccoutType && l.strNick == r.strNick && l.strHead == r.strHead && l.strRegion == r.strRegion && l.sGender == r.sGender && l.lRegisterTime == r.lRegisterTime && l.lCoralUserid == r.lCoralUserid && l.sCheckStatus == r.sCheckStatus && l.ddwMeal == r.ddwMeal && l.ddwPostNum == r.ddwPostNum && l.ddwDeletePostNum == r.ddwDeletePostNum && l.ddwCommentNum == r.ddwCommentNum && l.ddwDeleteCommentNum == r.ddwDeleteCommentNum && l.ddwCommentedNum == r.ddwCommentedNum && l.ddwUpedNum == r.ddwUpedNum && l.strLable == r.strLable && l.sLevel == r.sLevel;
    }
    inline bool operator!=(const FanTuanUserInfo&l, const FanTuanUserInfo&r)
    {
        return !(l == r);
    }

    struct FanTuanScoreInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanScoreInfo";
        }
        static string MD5()
        {
            return "bdfbfd02398c6cd4d63ce70f37b70b91";
        }
        FanTuanScoreInfo()
        :dwFanTuanId(0),strStarScore(""),ddwVideoView(0),ddwNewView(0),ddwAttNum(0),ddwActNum(0),ddwLiveNum(0),dwLastRank(0),dwCurRank(0),strTopScore("")
        {
        }
        void resetDefautlt()
        {
            dwFanTuanId = 0;
            strStarScore = "";
            ddwVideoView = 0;
            ddwNewView = 0;
            ddwAttNum = 0;
            ddwActNum = 0;
            ddwLiveNum = 0;
            dwLastRank = 0;
            dwCurRank = 0;
            strTopScore = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwFanTuanId, 1);
            _os.write(strStarScore, 2);
            _os.write(ddwVideoView, 3);
            _os.write(ddwNewView, 4);
            _os.write(ddwAttNum, 5);
            _os.write(ddwActNum, 6);
            _os.write(ddwLiveNum, 7);
            _os.write(dwLastRank, 8);
            _os.write(dwCurRank, 9);
            _os.write(strTopScore, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwFanTuanId, 1, true);
            _is.read(strStarScore, 2, false);
            _is.read(ddwVideoView, 3, false);
            _is.read(ddwNewView, 4, false);
            _is.read(ddwAttNum, 5, false);
            _is.read(ddwActNum, 6, false);
            _is.read(ddwLiveNum, 7, false);
            _is.read(dwLastRank, 8, false);
            _is.read(dwCurRank, 9, false);
            _is.read(strTopScore, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(strStarScore,"strStarScore");
            _ds.display(ddwVideoView,"ddwVideoView");
            _ds.display(ddwNewView,"ddwNewView");
            _ds.display(ddwAttNum,"ddwAttNum");
            _ds.display(ddwActNum,"ddwActNum");
            _ds.display(ddwLiveNum,"ddwLiveNum");
            _ds.display(dwLastRank,"dwLastRank");
            _ds.display(dwCurRank,"dwCurRank");
            _ds.display(strTopScore,"strTopScore");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(strStarScore, true);
            _ds.displaySimple(ddwVideoView, true);
            _ds.displaySimple(ddwNewView, true);
            _ds.displaySimple(ddwAttNum, true);
            _ds.displaySimple(ddwActNum, true);
            _ds.displaySimple(ddwLiveNum, true);
            _ds.displaySimple(dwLastRank, true);
            _ds.displaySimple(dwCurRank, true);
            _ds.displaySimple(strTopScore, false);
            return _os;
        }
    public:
        taf::UInt32 dwFanTuanId;
        std::string strStarScore;
        taf::Int64 ddwVideoView;
        taf::Int64 ddwNewView;
        taf::Int64 ddwAttNum;
        taf::Int64 ddwActNum;
        taf::Int64 ddwLiveNum;
        taf::UInt32 dwLastRank;
        taf::UInt32 dwCurRank;
        std::string strTopScore;
    };
    inline bool operator==(const FanTuanScoreInfo&l, const FanTuanScoreInfo&r)
    {
        return l.dwFanTuanId == r.dwFanTuanId && l.strStarScore == r.strStarScore && l.ddwVideoView == r.ddwVideoView && l.ddwNewView == r.ddwNewView && l.ddwAttNum == r.ddwAttNum && l.ddwActNum == r.ddwActNum && l.ddwLiveNum == r.ddwLiveNum && l.dwLastRank == r.dwLastRank && l.dwCurRank == r.dwCurRank && l.strTopScore == r.strTopScore;
    }
    inline bool operator!=(const FanTuanScoreInfo&l, const FanTuanScoreInfo&r)
    {
        return !(l == r);
    }

    struct CircleMsgImageUrl : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.CircleMsgImageUrl";
        }
        static string MD5()
        {
            return "153b63c6c2057ff18ac5a311256ff6f5";
        }
        CircleMsgImageUrl()
        :strUrl(""),strThumbUrl(""),ddwTime(0)
        {
        }
        void resetDefautlt()
        {
            strUrl = "";
            strThumbUrl = "";
            ddwTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strUrl, 0);
            _os.write(strThumbUrl, 1);
            _os.write(ddwTime, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strUrl, 0, true);
            _is.read(strThumbUrl, 1, false);
            _is.read(ddwTime, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strUrl,"strUrl");
            _ds.display(strThumbUrl,"strThumbUrl");
            _ds.display(ddwTime,"ddwTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strUrl, true);
            _ds.displaySimple(strThumbUrl, true);
            _ds.displaySimple(ddwTime, false);
            return _os;
        }
    public:
        std::string strUrl;
        std::string strThumbUrl;
        taf::Int64 ddwTime;
    };
    inline bool operator==(const CircleMsgImageUrl&l, const CircleMsgImageUrl&r)
    {
        return l.strUrl == r.strUrl && l.strThumbUrl == r.strThumbUrl && l.ddwTime == r.ddwTime;
    }
    inline bool operator!=(const CircleMsgImageUrl&l, const CircleMsgImageUrl&r)
    {
        return !(l == r);
    }

    struct CircleCommentFeed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.CircleCommentFeed";
        }
        static string MD5()
        {
            return "e8e4967d106fdf653c52beb9703182f1";
        }
        CircleCommentFeed()
        :strFeedId(""),strContent(""),ddwTime(0),parentCommentId(""),seq(""),dataKey(""),strActorName(""),strFaceImageUrl(""),userType(0)
        {
        }
        void resetDefautlt()
        {
            strFeedId = "";
            strContent = "";
            ddwTime = 0;
            parentCommentId = "";
            seq = "";
            dataKey = "";
            strActorName = "";
            strFaceImageUrl = "";
            userType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strFeedId, 0);
            _os.write(strContent, 1);
            _os.write(ddwTime, 2);
            _os.write(parentCommentId, 5);
            _os.write(seq, 6);
            _os.write(dataKey, 7);
            _os.write(strActorName, 8);
            _os.write(strFaceImageUrl, 9);
            _os.write(userType, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strFeedId, 0, true);
            _is.read(strContent, 1, true);
            _is.read(ddwTime, 2, true);
            _is.read(parentCommentId, 5, false);
            _is.read(seq, 6, false);
            _is.read(dataKey, 7, false);
            _is.read(strActorName, 8, false);
            _is.read(strFaceImageUrl, 9, false);
            _is.read(userType, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strFeedId,"strFeedId");
            _ds.display(strContent,"strContent");
            _ds.display(ddwTime,"ddwTime");
            _ds.display(parentCommentId,"parentCommentId");
            _ds.display(seq,"seq");
            _ds.display(dataKey,"dataKey");
            _ds.display(strActorName,"strActorName");
            _ds.display(strFaceImageUrl,"strFaceImageUrl");
            _ds.display(userType,"userType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strFeedId, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(ddwTime, true);
            _ds.displaySimple(parentCommentId, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(strActorName, true);
            _ds.displaySimple(strFaceImageUrl, true);
            _ds.displaySimple(userType, false);
            return _os;
        }
    public:
        std::string strFeedId;
        std::string strContent;
        taf::Int64 ddwTime;
        std::string parentCommentId;
        std::string seq;
        std::string dataKey;
        std::string strActorName;
        std::string strFaceImageUrl;
        taf::Char userType;
    };
    inline bool operator==(const CircleCommentFeed&l, const CircleCommentFeed&r)
    {
        return l.strFeedId == r.strFeedId && l.strContent == r.strContent && l.ddwTime == r.ddwTime && l.parentCommentId == r.parentCommentId && l.seq == r.seq && l.dataKey == r.dataKey && l.strActorName == r.strActorName && l.strFaceImageUrl == r.strFaceImageUrl && l.userType == r.userType;
    }
    inline bool operator!=(const CircleCommentFeed&l, const CircleCommentFeed&r)
    {
        return !(l == r);
    }

    struct CircleVoiceFeed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.CircleVoiceFeed";
        }
        static string MD5()
        {
            return "0e0d21decfd3baedbf16a88143a2d9f9";
        }
        CircleVoiceFeed()
        :strVoiceId(""),dwDuration(0),bPermanent(true),storageFlag(0)
        {
        }
        void resetDefautlt()
        {
            strVoiceId = "";
            dwDuration = 0;
            bPermanent = true;
            storageFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strVoiceId, 0);
            _os.write(dwDuration, 1);
            _os.write(bPermanent, 2);
            _os.write(storageFlag, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strVoiceId, 0, true);
            _is.read(dwDuration, 1, false);
            _is.read(bPermanent, 2, false);
            _is.read(storageFlag, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strVoiceId,"strVoiceId");
            _ds.display(dwDuration,"dwDuration");
            _ds.display(bPermanent,"bPermanent");
            _ds.display(storageFlag,"storageFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strVoiceId, true);
            _ds.displaySimple(dwDuration, true);
            _ds.displaySimple(bPermanent, true);
            _ds.displaySimple(storageFlag, false);
            return _os;
        }
    public:
        std::string strVoiceId;
        taf::Int32 dwDuration;
        taf::Bool bPermanent;
        taf::Char storageFlag;
    };
    inline bool operator==(const CircleVoiceFeed&l, const CircleVoiceFeed&r)
    {
        return l.strVoiceId == r.strVoiceId && l.dwDuration == r.dwDuration && l.bPermanent == r.bPermanent && l.storageFlag == r.storageFlag;
    }
    inline bool operator!=(const CircleVoiceFeed&l, const CircleVoiceFeed&r)
    {
        return !(l == r);
    }

    struct stFTFocusInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.stFTFocusInfo";
        }
        static string MD5()
        {
            return "1c3f64090157df9bd0122cd9ac61f279";
        }
        stFTFocusInfo()
        :title(""),pic(""),vid(""),cid(""),pid(""),url(""),feedid(""),topicid("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            pic = "";
            vid = "";
            cid = "";
            pid = "";
            url = "";
            feedid = "";
            topicid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(pic, 1);
            _os.write(vid, 2);
            _os.write(cid, 3);
            _os.write(pid, 4);
            _os.write(url, 5);
            _os.write(feedid, 6);
            _os.write(topicid, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(pic, 1, true);
            _is.read(vid, 2, false);
            _is.read(cid, 3, false);
            _is.read(pid, 4, false);
            _is.read(url, 5, false);
            _is.read(feedid, 6, false);
            _is.read(topicid, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(pic,"pic");
            _ds.display(vid,"vid");
            _ds.display(cid,"cid");
            _ds.display(pid,"pid");
            _ds.display(url,"url");
            _ds.display(feedid,"feedid");
            _ds.display(topicid,"topicid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(pic, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(url, true);
            _ds.displaySimple(feedid, true);
            _ds.displaySimple(topicid, false);
            return _os;
        }
    public:
        std::string title;
        std::string pic;
        std::string vid;
        std::string cid;
        std::string pid;
        std::string url;
        std::string feedid;
        std::string topicid;
    };
    inline bool operator==(const stFTFocusInfo&l, const stFTFocusInfo&r)
    {
        return l.title == r.title && l.pic == r.pic && l.vid == r.vid && l.cid == r.cid && l.pid == r.pid && l.url == r.url && l.feedid == r.feedid && l.topicid == r.topicid;
    }
    inline bool operator!=(const stFTFocusInfo&l, const stFTFocusInfo&r)
    {
        return !(l == r);
    }

    struct FanTuanMsgUserInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanMsgUserInfo";
        }
        static string MD5()
        {
            return "14e370758a3940b847add86df2e5fad8";
        }
        FanTuanMsgUserInfo()
        :cUserType(0),strHead(""),strNick(""),strStarId(""),strFtId("")
        {
        }
        void resetDefautlt()
        {
            cUserType = 0;
            strHead = "";
            strNick = "";
            strStarId = "";
            strFtId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cUserType, 0);
            _os.write(strHead, 1);
            _os.write(strNick, 2);
            _os.write(strStarId, 3);
            _os.write(strFtId, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cUserType, 0, false);
            _is.read(strHead, 1, false);
            _is.read(strNick, 2, false);
            _is.read(strStarId, 3, false);
            _is.read(strFtId, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cUserType,"cUserType");
            _ds.display(strHead,"strHead");
            _ds.display(strNick,"strNick");
            _ds.display(strStarId,"strStarId");
            _ds.display(strFtId,"strFtId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cUserType, true);
            _ds.displaySimple(strHead, true);
            _ds.displaySimple(strNick, true);
            _ds.displaySimple(strStarId, true);
            _ds.displaySimple(strFtId, false);
            return _os;
        }
    public:
        taf::UInt8 cUserType;
        std::string strHead;
        std::string strNick;
        std::string strStarId;
        std::string strFtId;
    };
    inline bool operator==(const FanTuanMsgUserInfo&l, const FanTuanMsgUserInfo&r)
    {
        return l.cUserType == r.cUserType && l.strHead == r.strHead && l.strNick == r.strNick && l.strStarId == r.strStarId && l.strFtId == r.strFtId;
    }
    inline bool operator!=(const FanTuanMsgUserInfo&l, const FanTuanMsgUserInfo&r)
    {
        return !(l == r);
    }

    struct ReportInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.ReportInfo";
        }
        static string MD5()
        {
            return "7e59e810040e881ed73433685997d0a2";
        }
        ReportInfo()
        :bucketId(""),algId(""),reasonType(0),reason(""),strategyId(""),dwSeqNum(0)
        {
        }
        void resetDefautlt()
        {
            bucketId = "";
            algId = "";
            reasonType = 0;
            reason = "";
            strategyId = "";
            dwSeqNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bucketId, 0);
            _os.write(algId, 1);
            _os.write(reasonType, 2);
            _os.write(reason, 3);
            _os.write(strategyId, 4);
            _os.write(dwSeqNum, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bucketId, 0, true);
            _is.read(algId, 1, true);
            _is.read(reasonType, 2, false);
            _is.read(reason, 3, false);
            _is.read(strategyId, 4, false);
            _is.read(dwSeqNum, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bucketId,"bucketId");
            _ds.display(algId,"algId");
            _ds.display(reasonType,"reasonType");
            _ds.display(reason,"reason");
            _ds.display(strategyId,"strategyId");
            _ds.display(dwSeqNum,"dwSeqNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bucketId, true);
            _ds.displaySimple(algId, true);
            _ds.displaySimple(reasonType, true);
            _ds.displaySimple(reason, true);
            _ds.displaySimple(strategyId, true);
            _ds.displaySimple(dwSeqNum, false);
            return _os;
        }
    public:
        std::string bucketId;
        std::string algId;
        taf::UInt32 reasonType;
        std::string reason;
        std::string strategyId;
        taf::UInt32 dwSeqNum;
    };
    inline bool operator==(const ReportInfo&l, const ReportInfo&r)
    {
        return l.bucketId == r.bucketId && l.algId == r.algId && l.reasonType == r.reasonType && l.reason == r.reason && l.strategyId == r.strategyId && l.dwSeqNum == r.dwSeqNum;
    }
    inline bool operator!=(const ReportInfo&l, const ReportInfo&r)
    {
        return !(l == r);
    }

    struct STFTLiveInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STFTLiveInfo";
        }
        static string MD5()
        {
            return "7c9d04d36ec868b316df9b5199572df7";
        }
        STFTLiveInfo()
        :strPid(""),ddwStartTime(0),ddwEndTime(0),ddwBookCount(0),ddwViewCount(0),strImgtag(""),dwPlayStatus(0),strTitle(""),strCoverUrl(""),strLiveType(""),streamStyle("")
        {
        }
        void resetDefautlt()
        {
            strPid = "";
            ddwStartTime = 0;
            ddwEndTime = 0;
            ddwBookCount = 0;
            ddwViewCount = 0;
            strImgtag = "";
            dwPlayStatus = 0;
            strTitle = "";
            strCoverUrl = "";
            strLiveType = "";
            streamStyle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strPid, 1);
            _os.write(ddwStartTime, 2);
            _os.write(ddwEndTime, 3);
            _os.write(ddwBookCount, 4);
            _os.write(ddwViewCount, 5);
            _os.write(strImgtag, 6);
            _os.write(stFtAttentItem, 7);
            _os.write(dwPlayStatus, 8);
            _os.write(vecFantuanId, 9);
            _os.write(strTitle, 10);
            _os.write(strCoverUrl, 11);
            _os.write(strLiveType, 12);
            _os.write(streamStyle, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strPid, 1, false);
            _is.read(ddwStartTime, 2, false);
            _is.read(ddwEndTime, 3, false);
            _is.read(ddwBookCount, 4, false);
            _is.read(ddwViewCount, 5, false);
            _is.read(strImgtag, 6, false);
            _is.read(stFtAttentItem, 7, false);
            _is.read(dwPlayStatus, 8, false);
            _is.read(vecFantuanId, 9, false);
            _is.read(strTitle, 10, false);
            _is.read(strCoverUrl, 11, false);
            _is.read(strLiveType, 12, false);
            _is.read(streamStyle, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strPid,"strPid");
            _ds.display(ddwStartTime,"ddwStartTime");
            _ds.display(ddwEndTime,"ddwEndTime");
            _ds.display(ddwBookCount,"ddwBookCount");
            _ds.display(ddwViewCount,"ddwViewCount");
            _ds.display(strImgtag,"strImgtag");
            _ds.display(stFtAttentItem,"stFtAttentItem");
            _ds.display(dwPlayStatus,"dwPlayStatus");
            _ds.display(vecFantuanId,"vecFantuanId");
            _ds.display(strTitle,"strTitle");
            _ds.display(strCoverUrl,"strCoverUrl");
            _ds.display(strLiveType,"strLiveType");
            _ds.display(streamStyle,"streamStyle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strPid, true);
            _ds.displaySimple(ddwStartTime, true);
            _ds.displaySimple(ddwEndTime, true);
            _ds.displaySimple(ddwBookCount, true);
            _ds.displaySimple(ddwViewCount, true);
            _ds.displaySimple(strImgtag, true);
            _ds.displaySimple(stFtAttentItem, true);
            _ds.displaySimple(dwPlayStatus, true);
            _ds.displaySimple(vecFantuanId, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(strCoverUrl, true);
            _ds.displaySimple(strLiveType, true);
            _ds.displaySimple(streamStyle, false);
            return _os;
        }
    public:
        std::string strPid;
        taf::Int64 ddwStartTime;
        taf::Int64 ddwEndTime;
        taf::Int64 ddwBookCount;
        taf::Int64 ddwViewCount;
        std::string strImgtag;
        CFtReadPro::STFtVideoAttentItem stFtAttentItem;
        taf::Int32 dwPlayStatus;
        vector<taf::Int32> vecFantuanId;
        std::string strTitle;
        std::string strCoverUrl;
        std::string strLiveType;
        std::string streamStyle;
    };
    inline bool operator==(const STFTLiveInfo&l, const STFTLiveInfo&r)
    {
        return l.strPid == r.strPid && l.ddwStartTime == r.ddwStartTime && l.ddwEndTime == r.ddwEndTime && l.ddwBookCount == r.ddwBookCount && l.ddwViewCount == r.ddwViewCount && l.strImgtag == r.strImgtag && l.stFtAttentItem == r.stFtAttentItem && l.dwPlayStatus == r.dwPlayStatus && l.vecFantuanId == r.vecFantuanId && l.strTitle == r.strTitle && l.strCoverUrl == r.strCoverUrl && l.strLiveType == r.strLiveType && l.streamStyle == r.streamStyle;
    }
    inline bool operator!=(const STFTLiveInfo&l, const STFTLiveInfo&r)
    {
        return !(l == r);
    }

    struct STFTSourceInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STFTSourceInfo";
        }
        static string MD5()
        {
            return "f004d9b7526f5ef99e8883174489f3d5";
        }
        STFTSourceInfo()
        :vid(""),cid(""),lid(""),strTitle(""),posterUrl("")
        {
        }
        void resetDefautlt()
        {
            vid = "";
            cid = "";
            lid = "";
            strTitle = "";
            posterUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 1);
            _os.write(cid, 2);
            _os.write(lid, 3);
            _os.write(strTitle, 4);
            _os.write(posterUrl, 5);
            _os.write(attentInfo, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 1, false);
            _is.read(cid, 2, false);
            _is.read(lid, 3, false);
            _is.read(strTitle, 4, false);
            _is.read(posterUrl, 5, false);
            _is.read(attentInfo, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(cid,"cid");
            _ds.display(lid,"lid");
            _ds.display(strTitle,"strTitle");
            _ds.display(posterUrl,"posterUrl");
            _ds.display(attentInfo,"attentInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(posterUrl, true);
            _ds.displaySimple(attentInfo, false);
            return _os;
        }
    public:
        std::string vid;
        std::string cid;
        std::string lid;
        std::string strTitle;
        std::string posterUrl;
        CFtReadPro::STFtVideoAttentItem attentInfo;
    };
    inline bool operator==(const STFTSourceInfo&l, const STFTSourceInfo&r)
    {
        return l.vid == r.vid && l.cid == r.cid && l.lid == r.lid && l.strTitle == r.strTitle && l.posterUrl == r.posterUrl && l.attentInfo == r.attentInfo;
    }
    inline bool operator!=(const STFTSourceInfo&l, const STFTSourceInfo&r)
    {
        return !(l == r);
    }

    struct FTArticleInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FTArticleInfo";
        }
        static string MD5()
        {
            return "8aef3711ca93f682d5e01ca071c1d888";
        }
        FTArticleInfo()
        :strArticleId(""),strArticleTitle(""),strIntroduction(""),strContent(""),strMediaId(""),strMediaName(""),strMediaIcon("")
        {
        }
        void resetDefautlt()
        {
            strArticleId = "";
            strArticleTitle = "";
            strIntroduction = "";
            strContent = "";
            strMediaId = "";
            strMediaName = "";
            strMediaIcon = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strArticleId, 1);
            _os.write(strArticleTitle, 2);
            _os.write(strIntroduction, 3);
            _os.write(strContent, 4);
            _os.write(strMediaId, 5);
            _os.write(strMediaName, 6);
            _os.write(strMediaIcon, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strArticleId, 1, true);
            _is.read(strArticleTitle, 2, true);
            _is.read(strIntroduction, 3, false);
            _is.read(strContent, 4, false);
            _is.read(strMediaId, 5, false);
            _is.read(strMediaName, 6, false);
            _is.read(strMediaIcon, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strArticleId,"strArticleId");
            _ds.display(strArticleTitle,"strArticleTitle");
            _ds.display(strIntroduction,"strIntroduction");
            _ds.display(strContent,"strContent");
            _ds.display(strMediaId,"strMediaId");
            _ds.display(strMediaName,"strMediaName");
            _ds.display(strMediaIcon,"strMediaIcon");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strArticleId, true);
            _ds.displaySimple(strArticleTitle, true);
            _ds.displaySimple(strIntroduction, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(strMediaId, true);
            _ds.displaySimple(strMediaName, true);
            _ds.displaySimple(strMediaIcon, false);
            return _os;
        }
    public:
        std::string strArticleId;
        std::string strArticleTitle;
        std::string strIntroduction;
        std::string strContent;
        std::string strMediaId;
        std::string strMediaName;
        std::string strMediaIcon;
    };
    inline bool operator==(const FTArticleInfo&l, const FTArticleInfo&r)
    {
        return l.strArticleId == r.strArticleId && l.strArticleTitle == r.strArticleTitle && l.strIntroduction == r.strIntroduction && l.strContent == r.strContent && l.strMediaId == r.strMediaId && l.strMediaName == r.strMediaName && l.strMediaIcon == r.strMediaIcon;
    }
    inline bool operator!=(const FTArticleInfo&l, const FTArticleInfo&r)
    {
        return !(l == r);
    }

    struct FanTuanMsgComm : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanMsgComm";
        }
        static string MD5()
        {
            return "40d508b7e55332ca3d9c20d69c524279";
        }
        FanTuanMsgComm()
        :strTitle(""),strContent(""),strLable(""),strJumpUrl(""),strVoteId(""),strCid("")
        {
        }
        void resetDefautlt()
        {
            strTitle = "";
            strContent = "";
            strLable = "";
            strJumpUrl = "";
            strVoteId = "";
            strCid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strTitle, 1);
            _os.write(strContent, 2);
            _os.write(strLable, 3);
            _os.write(vecImageList, 4);
            _os.write(vecShortVideoList, 5);
            _os.write(vecLongVideoList, 6);
            _os.write(strJumpUrl, 7);
            _os.write(strVoteId, 8);
            _os.write(strCid, 9);
            _os.write(stLiveInfo, 10);
            _os.write(stVideoSrc, 11);
            _os.write(stArticleInfo, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strTitle, 1, true);
            _is.read(strContent, 2, true);
            _is.read(strLable, 3, false);
            _is.read(vecImageList, 4, false);
            _is.read(vecShortVideoList, 5, false);
            _is.read(vecLongVideoList, 6, false);
            _is.read(strJumpUrl, 7, false);
            _is.read(strVoteId, 8, false);
            _is.read(strCid, 9, false);
            _is.read(stLiveInfo, 10, false);
            _is.read(stVideoSrc, 11, false);
            _is.read(stArticleInfo, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strTitle,"strTitle");
            _ds.display(strContent,"strContent");
            _ds.display(strLable,"strLable");
            _ds.display(vecImageList,"vecImageList");
            _ds.display(vecShortVideoList,"vecShortVideoList");
            _ds.display(vecLongVideoList,"vecLongVideoList");
            _ds.display(strJumpUrl,"strJumpUrl");
            _ds.display(strVoteId,"strVoteId");
            _ds.display(strCid,"strCid");
            _ds.display(stLiveInfo,"stLiveInfo");
            _ds.display(stVideoSrc,"stVideoSrc");
            _ds.display(stArticleInfo,"stArticleInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(strLable, true);
            _ds.displaySimple(vecImageList, true);
            _ds.displaySimple(vecShortVideoList, true);
            _ds.displaySimple(vecLongVideoList, true);
            _ds.displaySimple(strJumpUrl, true);
            _ds.displaySimple(strVoteId, true);
            _ds.displaySimple(strCid, true);
            _ds.displaySimple(stLiveInfo, true);
            _ds.displaySimple(stVideoSrc, true);
            _ds.displaySimple(stArticleInfo, false);
            return _os;
        }
    public:
        std::string strTitle;
        std::string strContent;
        std::string strLable;
        vector<CFtReadPro::FanTuanImageInfo> vecImageList;
        vector<CFtReadPro::FanTuanShortVideoInfo> vecShortVideoList;
        vector<CFtReadPro::FanTuanLongVideoInfo> vecLongVideoList;
        std::string strJumpUrl;
        std::string strVoteId;
        std::string strCid;
        CFtReadPro::FanTuanLiveInfo stLiveInfo;
        CFtReadPro::STFTSourceInfo stVideoSrc;
        CFtReadPro::FTArticleInfo stArticleInfo;
    };
    inline bool operator==(const FanTuanMsgComm&l, const FanTuanMsgComm&r)
    {
        return l.strTitle == r.strTitle && l.strContent == r.strContent && l.strLable == r.strLable && l.vecImageList == r.vecImageList && l.vecShortVideoList == r.vecShortVideoList && l.vecLongVideoList == r.vecLongVideoList && l.strJumpUrl == r.strJumpUrl && l.strVoteId == r.strVoteId && l.strCid == r.strCid && l.stLiveInfo == r.stLiveInfo && l.stVideoSrc == r.stVideoSrc && l.stArticleInfo == r.stArticleInfo;
    }
    inline bool operator!=(const FanTuanMsgComm&l, const FanTuanMsgComm&r)
    {
        return !(l == r);
    }

    struct FanTuanMsgInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanMsgInfo";
        }
        static string MD5()
        {
            return "4081523e4869fe23e905677af6aee445";
        }
        FanTuanMsgInfo()
        :ddwMsgId(0),ddwUserId(0),dwPubTime(0),dwMsgType(0),dwStatus(0),dwFanTuanId(0),dwUpNum(0),dwCommentNum(0),dwFloorNum(0),ddwParentMsgId(0),ddwParentUserId(0),ddwRootMsgId(0),ddwRootUserId(0),dwMsgFlags(0),dwOpFlags(0),dwInFloorNum(0),dwLastCmtTime(0),cFeedType(0),dwIncreaseId(0),isLike(0),ddwReadCnt(0)
        {
        }
        void resetDefautlt()
        {
            ddwMsgId = 0;
            ddwUserId = 0;
            dwPubTime = 0;
            dwMsgType = 0;
            dwStatus = 0;
            dwFanTuanId = 0;
            dwUpNum = 0;
            dwCommentNum = 0;
            dwFloorNum = 0;
            ddwParentMsgId = 0;
            ddwParentUserId = 0;
            ddwRootMsgId = 0;
            ddwRootUserId = 0;
            dwMsgFlags = 0;
            dwOpFlags = 0;
            dwInFloorNum = 0;
            dwLastCmtTime = 0;
            cFeedType = 0;
            dwIncreaseId = 0;
            isLike = 0;
            ddwReadCnt = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwMsgId, 1);
            _os.write(ddwUserId, 2);
            _os.write(dwPubTime, 3);
            _os.write(dwMsgType, 4);
            _os.write(dwStatus, 5);
            _os.write(dwFanTuanId, 6);
            _os.write(dwUpNum, 7);
            _os.write(dwCommentNum, 8);
            _os.write(dwFloorNum, 9);
            _os.write(stFtMsgComm, 10);
            _os.write(ddwParentMsgId, 11);
            _os.write(ddwParentUserId, 12);
            _os.write(ddwRootMsgId, 13);
            _os.write(ddwRootUserId, 14);
            _os.write(dwMsgFlags, 15);
            _os.write(dwOpFlags, 16);
            _os.write(dwInFloorNum, 17);
            _os.write(dwLastCmtTime, 18);
            _os.write(cFeedType, 19);
            _os.write(dwIncreaseId, 20);
            _os.write(stReportInfo, 21);
            _os.write(stUserInfo, 23);
            _os.write(isLike, 24);
            _os.write(vecRelFantuanId, 25);
            _os.write(ddwReadCnt, 26);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwMsgId, 1, true);
            _is.read(ddwUserId, 2, true);
            _is.read(dwPubTime, 3, true);
            _is.read(dwMsgType, 4, true);
            _is.read(dwStatus, 5, true);
            _is.read(dwFanTuanId, 6, true);
            _is.read(dwUpNum, 7, false);
            _is.read(dwCommentNum, 8, false);
            _is.read(dwFloorNum, 9, false);
            _is.read(stFtMsgComm, 10, false);
            _is.read(ddwParentMsgId, 11, false);
            _is.read(ddwParentUserId, 12, false);
            _is.read(ddwRootMsgId, 13, false);
            _is.read(ddwRootUserId, 14, false);
            _is.read(dwMsgFlags, 15, false);
            _is.read(dwOpFlags, 16, false);
            _is.read(dwInFloorNum, 17, false);
            _is.read(dwLastCmtTime, 18, false);
            _is.read(cFeedType, 19, false);
            _is.read(dwIncreaseId, 20, false);
            _is.read(stReportInfo, 21, false);
            _is.read(stUserInfo, 23, false);
            _is.read(isLike, 24, false);
            _is.read(vecRelFantuanId, 25, false);
            _is.read(ddwReadCnt, 26, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwMsgId,"ddwMsgId");
            _ds.display(ddwUserId,"ddwUserId");
            _ds.display(dwPubTime,"dwPubTime");
            _ds.display(dwMsgType,"dwMsgType");
            _ds.display(dwStatus,"dwStatus");
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(dwUpNum,"dwUpNum");
            _ds.display(dwCommentNum,"dwCommentNum");
            _ds.display(dwFloorNum,"dwFloorNum");
            _ds.display(stFtMsgComm,"stFtMsgComm");
            _ds.display(ddwParentMsgId,"ddwParentMsgId");
            _ds.display(ddwParentUserId,"ddwParentUserId");
            _ds.display(ddwRootMsgId,"ddwRootMsgId");
            _ds.display(ddwRootUserId,"ddwRootUserId");
            _ds.display(dwMsgFlags,"dwMsgFlags");
            _ds.display(dwOpFlags,"dwOpFlags");
            _ds.display(dwInFloorNum,"dwInFloorNum");
            _ds.display(dwLastCmtTime,"dwLastCmtTime");
            _ds.display(cFeedType,"cFeedType");
            _ds.display(dwIncreaseId,"dwIncreaseId");
            _ds.display(stReportInfo,"stReportInfo");
            _ds.display(stUserInfo,"stUserInfo");
            _ds.display(isLike,"isLike");
            _ds.display(vecRelFantuanId,"vecRelFantuanId");
            _ds.display(ddwReadCnt,"ddwReadCnt");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwMsgId, true);
            _ds.displaySimple(ddwUserId, true);
            _ds.displaySimple(dwPubTime, true);
            _ds.displaySimple(dwMsgType, true);
            _ds.displaySimple(dwStatus, true);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(dwUpNum, true);
            _ds.displaySimple(dwCommentNum, true);
            _ds.displaySimple(dwFloorNum, true);
            _ds.displaySimple(stFtMsgComm, true);
            _ds.displaySimple(ddwParentMsgId, true);
            _ds.displaySimple(ddwParentUserId, true);
            _ds.displaySimple(ddwRootMsgId, true);
            _ds.displaySimple(ddwRootUserId, true);
            _ds.displaySimple(dwMsgFlags, true);
            _ds.displaySimple(dwOpFlags, true);
            _ds.displaySimple(dwInFloorNum, true);
            _ds.displaySimple(dwLastCmtTime, true);
            _ds.displaySimple(cFeedType, true);
            _ds.displaySimple(dwIncreaseId, true);
            _ds.displaySimple(stReportInfo, true);
            _ds.displaySimple(stUserInfo, true);
            _ds.displaySimple(isLike, true);
            _ds.displaySimple(vecRelFantuanId, true);
            _ds.displaySimple(ddwReadCnt, false);
            return _os;
        }
    public:
        taf::Int64 ddwMsgId;
        taf::Int64 ddwUserId;
        taf::UInt32 dwPubTime;
        taf::UInt32 dwMsgType;
        taf::UInt32 dwStatus;
        taf::UInt32 dwFanTuanId;
        taf::UInt32 dwUpNum;
        taf::UInt32 dwCommentNum;
        taf::UInt32 dwFloorNum;
        CFtReadPro::FanTuanMsgComm stFtMsgComm;
        taf::Int64 ddwParentMsgId;
        taf::Int64 ddwParentUserId;
        taf::Int64 ddwRootMsgId;
        taf::Int64 ddwRootUserId;
        taf::UInt32 dwMsgFlags;
        taf::UInt32 dwOpFlags;
        taf::UInt32 dwInFloorNum;
        taf::UInt32 dwLastCmtTime;
        taf::UInt8 cFeedType;
        taf::Int64 dwIncreaseId;
        CFtReadPro::ReportInfo stReportInfo;
        CFtReadPro::FanTuanMsgUserInfo stUserInfo;
        taf::Char isLike;
        vector<taf::UInt32> vecRelFantuanId;
        taf::Int64 ddwReadCnt;
    };
    inline bool operator==(const FanTuanMsgInfo&l, const FanTuanMsgInfo&r)
    {
        return l.ddwMsgId == r.ddwMsgId && l.ddwUserId == r.ddwUserId && l.dwPubTime == r.dwPubTime && l.dwMsgType == r.dwMsgType && l.dwStatus == r.dwStatus && l.dwFanTuanId == r.dwFanTuanId && l.dwUpNum == r.dwUpNum && l.dwCommentNum == r.dwCommentNum && l.dwFloorNum == r.dwFloorNum && l.stFtMsgComm == r.stFtMsgComm && l.ddwParentMsgId == r.ddwParentMsgId && l.ddwParentUserId == r.ddwParentUserId && l.ddwRootMsgId == r.ddwRootMsgId && l.ddwRootUserId == r.ddwRootUserId && l.dwMsgFlags == r.dwMsgFlags && l.dwOpFlags == r.dwOpFlags && l.dwInFloorNum == r.dwInFloorNum && l.dwLastCmtTime == r.dwLastCmtTime && l.cFeedType == r.cFeedType && l.dwIncreaseId == r.dwIncreaseId && l.stReportInfo == r.stReportInfo && l.stUserInfo == r.stUserInfo && l.isLike == r.isLike && l.vecRelFantuanId == r.vecRelFantuanId && l.ddwReadCnt == r.ddwReadCnt;
    }
    inline bool operator!=(const FanTuanMsgInfo&l, const FanTuanMsgInfo&r)
    {
        return !(l == r);
    }

    struct STFTTourInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STFTTourInfo";
        }
        static string MD5()
        {
            return "79e798fac218c1ee2733612db711cb8d";
        }
        STFTTourInfo()
        :strTitle(""),ddwActTime(0),strAction(""),strTourPic(""),dwSerial(0)
        {
        }
        void resetDefautlt()
        {
            strTitle = "";
            ddwActTime = 0;
            strAction = "";
            strTourPic = "";
            dwSerial = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strTitle, 1);
            _os.write(ddwActTime, 2);
            _os.write(strAction, 3);
            _os.write(strTourPic, 4);
            _os.write(dwSerial, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strTitle, 1, false);
            _is.read(ddwActTime, 2, false);
            _is.read(strAction, 3, false);
            _is.read(strTourPic, 4, false);
            _is.read(dwSerial, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strTitle,"strTitle");
            _ds.display(ddwActTime,"ddwActTime");
            _ds.display(strAction,"strAction");
            _ds.display(strTourPic,"strTourPic");
            _ds.display(dwSerial,"dwSerial");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(ddwActTime, true);
            _ds.displaySimple(strAction, true);
            _ds.displaySimple(strTourPic, true);
            _ds.displaySimple(dwSerial, false);
            return _os;
        }
    public:
        std::string strTitle;
        taf::Int64 ddwActTime;
        std::string strAction;
        std::string strTourPic;
        taf::Int32 dwSerial;
    };
    inline bool operator==(const STFTTourInfo&l, const STFTTourInfo&r)
    {
        return l.strTitle == r.strTitle && l.ddwActTime == r.ddwActTime && l.strAction == r.strAction && l.strTourPic == r.strTourPic && l.dwSerial == r.dwSerial;
    }
    inline bool operator!=(const STFTTourInfo&l, const STFTTourInfo&r)
    {
        return !(l == r);
    }

    struct FanTuanStarMsgExtendInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanStarMsgExtendInfo";
        }
        static string MD5()
        {
            return "63ab9d7b9538bd5ed4145a81c13d537f";
        }
        FanTuanStarMsgExtendInfo()
        :strContent(""),ddwTime(0),strVideoTitle(""),dwFollowCount(0),dwLikeCount(0),strActUrl(""),strFeedId(""),strCoverUrl(""),dwCommentCount(0),ddwCacheTime(0),isLike(0)
        {
        }
        void resetDefautlt()
        {
            strContent = "";
            ddwTime = 0;
            strVideoTitle = "";
            dwFollowCount = 0;
            dwLikeCount = 0;
            strActUrl = "";
            strFeedId = "";
            strCoverUrl = "";
            dwCommentCount = 0;
            ddwCacheTime = 0;
            isLike = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stVideoAttentItem, 0);
            _os.write(strContent, 1);
            _os.write(ddwTime, 2);
            _os.write(strVideoTitle, 3);
            _os.write(dwFollowCount, 4);
            _os.write(dwLikeCount, 5);
            _os.write(stPhotos, 6);
            _os.write(stComments, 7);
            _os.write(strActUrl, 8);
            _os.write(stShortVideo, 9);
            _os.write(strFeedId, 10);
            _os.write(strCoverUrl, 11);
            _os.write(dwCommentCount, 12);
            _os.write(stVoices, 13);
            _os.write(ddwCacheTime, 14);
            _os.write(isLike, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stVideoAttentItem, 0, false);
            _is.read(strContent, 1, false);
            _is.read(ddwTime, 2, false);
            _is.read(strVideoTitle, 3, false);
            _is.read(dwFollowCount, 4, false);
            _is.read(dwLikeCount, 5, false);
            _is.read(stPhotos, 6, false);
            _is.read(stComments, 7, false);
            _is.read(strActUrl, 8, false);
            _is.read(stShortVideo, 9, false);
            _is.read(strFeedId, 10, false);
            _is.read(strCoverUrl, 11, false);
            _is.read(dwCommentCount, 12, false);
            _is.read(stVoices, 13, false);
            _is.read(ddwCacheTime, 14, false);
            _is.read(isLike, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stVideoAttentItem,"stVideoAttentItem");
            _ds.display(strContent,"strContent");
            _ds.display(ddwTime,"ddwTime");
            _ds.display(strVideoTitle,"strVideoTitle");
            _ds.display(dwFollowCount,"dwFollowCount");
            _ds.display(dwLikeCount,"dwLikeCount");
            _ds.display(stPhotos,"stPhotos");
            _ds.display(stComments,"stComments");
            _ds.display(strActUrl,"strActUrl");
            _ds.display(stShortVideo,"stShortVideo");
            _ds.display(strFeedId,"strFeedId");
            _ds.display(strCoverUrl,"strCoverUrl");
            _ds.display(dwCommentCount,"dwCommentCount");
            _ds.display(stVoices,"stVoices");
            _ds.display(ddwCacheTime,"ddwCacheTime");
            _ds.display(isLike,"isLike");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stVideoAttentItem, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(ddwTime, true);
            _ds.displaySimple(strVideoTitle, true);
            _ds.displaySimple(dwFollowCount, true);
            _ds.displaySimple(dwLikeCount, true);
            _ds.displaySimple(stPhotos, true);
            _ds.displaySimple(stComments, true);
            _ds.displaySimple(strActUrl, true);
            _ds.displaySimple(stShortVideo, true);
            _ds.displaySimple(strFeedId, true);
            _ds.displaySimple(strCoverUrl, true);
            _ds.displaySimple(dwCommentCount, true);
            _ds.displaySimple(stVoices, true);
            _ds.displaySimple(ddwCacheTime, true);
            _ds.displaySimple(isLike, false);
            return _os;
        }
    public:
        CFtReadPro::STFtVideoAttentItem stVideoAttentItem;
        std::string strContent;
        taf::Int64 ddwTime;
        std::string strVideoTitle;
        taf::Int32 dwFollowCount;
        taf::Int32 dwLikeCount;
        vector<CFtReadPro::CircleMsgImageUrl> stPhotos;
        vector<CFtReadPro::CircleCommentFeed> stComments;
        std::string strActUrl;
        vector<CFtReadPro::FanTuanShortVideoInfo> stShortVideo;
        std::string strFeedId;
        std::string strCoverUrl;
        taf::Int32 dwCommentCount;
        vector<CFtReadPro::CircleVoiceFeed> stVoices;
        taf::Int64 ddwCacheTime;
        taf::Char isLike;
    };
    inline bool operator==(const FanTuanStarMsgExtendInfo&l, const FanTuanStarMsgExtendInfo&r)
    {
        return l.stVideoAttentItem == r.stVideoAttentItem && l.strContent == r.strContent && l.ddwTime == r.ddwTime && l.strVideoTitle == r.strVideoTitle && l.dwFollowCount == r.dwFollowCount && l.dwLikeCount == r.dwLikeCount && l.stPhotos == r.stPhotos && l.stComments == r.stComments && l.strActUrl == r.strActUrl && l.stShortVideo == r.stShortVideo && l.strFeedId == r.strFeedId && l.strCoverUrl == r.strCoverUrl && l.dwCommentCount == r.dwCommentCount && l.stVoices == r.stVoices && l.ddwCacheTime == r.ddwCacheTime && l.isLike == r.isLike;
    }
    inline bool operator!=(const FanTuanStarMsgExtendInfo&l, const FanTuanStarMsgExtendInfo&r)
    {
        return !(l == r);
    }

    struct STFTVoteInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STFTVoteInfo";
        }
        static string MD5()
        {
            return "cb4558a7d1cbd8cbf583df7337cc71f1";
        }
        STFTVoteInfo()
        :strVoteId(""),ddwVoteNum(0)
        {
        }
        void resetDefautlt()
        {
            strVoteId = "";
            ddwVoteNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strVoteId, 1);
            _os.write(ddwVoteNum, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strVoteId, 1, false);
            _is.read(ddwVoteNum, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strVoteId,"strVoteId");
            _ds.display(ddwVoteNum,"ddwVoteNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strVoteId, true);
            _ds.displaySimple(ddwVoteNum, false);
            return _os;
        }
    public:
        std::string strVoteId;
        taf::Int64 ddwVoteNum;
    };
    inline bool operator==(const STFTVoteInfo&l, const STFTVoteInfo&r)
    {
        return l.strVoteId == r.strVoteId && l.ddwVoteNum == r.ddwVoteNum;
    }
    inline bool operator!=(const STFTVoteInfo&l, const STFTVoteInfo&r)
    {
        return !(l == r);
    }

    struct STLatesFeedsInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STLatesFeedsInfo";
        }
        static string MD5()
        {
            return "d438ffb1c134a3f8ea984d851aa7415e";
        }
        STLatesFeedsInfo()
        :ddwShowTime(0),dwType(0),dwSourceId(0),strTitle(""),strSubTitle(""),strContent(""),strCid(""),strLinkURL(""),ddwExclMid(0)
        {
        }
        void resetDefautlt()
        {
            ddwShowTime = 0;
            dwType = 0;
            dwSourceId = 0;
            strTitle = "";
            strSubTitle = "";
            strContent = "";
            strCid = "";
            strLinkURL = "";
            ddwExclMid = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwShowTime, 1);
            _os.write(dwType, 2);
            _os.write(dwSourceId, 3);
            _os.write(strTitle, 4);
            _os.write(strSubTitle, 5);
            _os.write(vecPicUrl, 6);
            _os.write(shareItem, 7);
            _os.write(strContent, 8);
            _os.write(stVideoInfo, 9);
            _os.write(strCid, 10);
            _os.write(stLiveInfo, 11);
            _os.write(stFtMsgInfo, 12);
            _os.write(stFtCommInfo, 13);
            _os.write(vecRecFtIdList, 14);
            _os.write(stFtTourInfo, 15);
            _os.write(strLinkURL, 16);
            _os.write(stStarMsgExtInfo, 17);
            _os.write(ddwExclMid, 18);
            _os.write(stFtVoteInfo, 19);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwShowTime, 1, false);
            _is.read(dwType, 2, false);
            _is.read(dwSourceId, 3, false);
            _is.read(strTitle, 4, false);
            _is.read(strSubTitle, 5, false);
            _is.read(vecPicUrl, 6, false);
            _is.read(shareItem, 7, false);
            _is.read(strContent, 8, false);
            _is.read(stVideoInfo, 9, false);
            _is.read(strCid, 10, false);
            _is.read(stLiveInfo, 11, false);
            _is.read(stFtMsgInfo, 12, false);
            _is.read(stFtCommInfo, 13, false);
            _is.read(vecRecFtIdList, 14, false);
            _is.read(stFtTourInfo, 15, false);
            _is.read(strLinkURL, 16, false);
            _is.read(stStarMsgExtInfo, 17, false);
            _is.read(ddwExclMid, 18, false);
            _is.read(stFtVoteInfo, 19, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwShowTime,"ddwShowTime");
            _ds.display(dwType,"dwType");
            _ds.display(dwSourceId,"dwSourceId");
            _ds.display(strTitle,"strTitle");
            _ds.display(strSubTitle,"strSubTitle");
            _ds.display(vecPicUrl,"vecPicUrl");
            _ds.display(shareItem,"shareItem");
            _ds.display(strContent,"strContent");
            _ds.display(stVideoInfo,"stVideoInfo");
            _ds.display(strCid,"strCid");
            _ds.display(stLiveInfo,"stLiveInfo");
            _ds.display(stFtMsgInfo,"stFtMsgInfo");
            _ds.display(stFtCommInfo,"stFtCommInfo");
            _ds.display(vecRecFtIdList,"vecRecFtIdList");
            _ds.display(stFtTourInfo,"stFtTourInfo");
            _ds.display(strLinkURL,"strLinkURL");
            _ds.display(stStarMsgExtInfo,"stStarMsgExtInfo");
            _ds.display(ddwExclMid,"ddwExclMid");
            _ds.display(stFtVoteInfo,"stFtVoteInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwShowTime, true);
            _ds.displaySimple(dwType, true);
            _ds.displaySimple(dwSourceId, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(strSubTitle, true);
            _ds.displaySimple(vecPicUrl, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(stVideoInfo, true);
            _ds.displaySimple(strCid, true);
            _ds.displaySimple(stLiveInfo, true);
            _ds.displaySimple(stFtMsgInfo, true);
            _ds.displaySimple(stFtCommInfo, true);
            _ds.displaySimple(vecRecFtIdList, true);
            _ds.displaySimple(stFtTourInfo, true);
            _ds.displaySimple(strLinkURL, true);
            _ds.displaySimple(stStarMsgExtInfo, true);
            _ds.displaySimple(ddwExclMid, true);
            _ds.displaySimple(stFtVoteInfo, false);
            return _os;
        }
    public:
        taf::Int64 ddwShowTime;
        taf::UInt32 dwType;
        taf::UInt32 dwSourceId;
        std::string strTitle;
        std::string strSubTitle;
        vector<std::string> vecPicUrl;
        CFtReadPro::STFtShareItem shareItem;
        std::string strContent;
        CFtReadPro::FanTuanLongVideoInfo stVideoInfo;
        std::string strCid;
        CFtReadPro::STFTLiveInfo stLiveInfo;
        CFtReadPro::FanTuanMsgInfo stFtMsgInfo;
        CFtReadPro::FanTuanMsgInfo stFtCommInfo;
        vector<taf::Int32> vecRecFtIdList;
        CFtReadPro::STFTTourInfo stFtTourInfo;
        std::string strLinkURL;
        CFtReadPro::FanTuanStarMsgExtendInfo stStarMsgExtInfo;
        taf::Int64 ddwExclMid;
        CFtReadPro::STFTVoteInfo stFtVoteInfo;
    };
    inline bool operator==(const STLatesFeedsInfo&l, const STLatesFeedsInfo&r)
    {
        return l.ddwShowTime == r.ddwShowTime && l.dwType == r.dwType && l.dwSourceId == r.dwSourceId && l.strTitle == r.strTitle && l.strSubTitle == r.strSubTitle && l.vecPicUrl == r.vecPicUrl && l.shareItem == r.shareItem && l.strContent == r.strContent && l.stVideoInfo == r.stVideoInfo && l.strCid == r.strCid && l.stLiveInfo == r.stLiveInfo && l.stFtMsgInfo == r.stFtMsgInfo && l.stFtCommInfo == r.stFtCommInfo && l.vecRecFtIdList == r.vecRecFtIdList && l.stFtTourInfo == r.stFtTourInfo && l.strLinkURL == r.strLinkURL && l.stStarMsgExtInfo == r.stStarMsgExtInfo && l.ddwExclMid == r.ddwExclMid && l.stFtVoteInfo == r.stFtVoteInfo;
    }
    inline bool operator!=(const STLatesFeedsInfo&l, const STLatesFeedsInfo&r)
    {
        return !(l == r);
    }

    struct FanTuanDetailInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanDetailInfo";
        }
        static string MD5()
        {
            return "41867b5d78684224511c3b16172b2899";
        }
        FanTuanDetailInfo()
        :dwFanTuanId(0),strStarAccount(""),strTitle(""),strSubTitle(""),strDesc(""),strinFansNick(""),strBanner(""),strAppBanner(""),strAppBannerBack(""),strHeader(""),strAppHeader(""),ddwPostNum(0),ddwFanNum(0),ddwMealNum(0),dwRank(0),strRankName(""),iType(0),iPubStatus(0),dwTargetid(0),bAttention(0),dwUpdateNum(0),dwVuid(0),cDokiType(0),strCidList(""),strLidList(""),strUpdateTxt(""),strSeriesId(""),strSeriesTitle(""),ctype(0),positive_trailer(0)
        {
        }
        void resetDefautlt()
        {
            dwFanTuanId = 0;
            strStarAccount = "";
            strTitle = "";
            strSubTitle = "";
            strDesc = "";
            strinFansNick = "";
            strBanner = "";
            strAppBanner = "";
            strAppBannerBack = "";
            strHeader = "";
            strAppHeader = "";
            ddwPostNum = 0;
            ddwFanNum = 0;
            ddwMealNum = 0;
            dwRank = 0;
            strRankName = "";
            iType = 0;
            iPubStatus = 0;
            dwTargetid = 0;
            bAttention = 0;
            dwUpdateNum = 0;
            dwVuid = 0;
            cDokiType = 0;
            strCidList = "";
            strLidList = "";
            strUpdateTxt = "";
            strSeriesId = "";
            strSeriesTitle = "";
            ctype = 0;
            positive_trailer = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwFanTuanId, 1);
            _os.write(strStarAccount, 2);
            _os.write(strTitle, 3);
            _os.write(strSubTitle, 4);
            _os.write(strDesc, 5);
            _os.write(strinFansNick, 6);
            _os.write(strBanner, 7);
            _os.write(strAppBanner, 8);
            _os.write(strAppBannerBack, 9);
            _os.write(strHeader, 10);
            _os.write(strAppHeader, 11);
            _os.write(vecRelativeList, 12);
            _os.write(vecRelativeStar, 13);
            _os.write(ddwPostNum, 14);
            _os.write(ddwFanNum, 15);
            _os.write(ddwMealNum, 16);
            _os.write(dwRank, 17);
            _os.write(strRankName, 18);
            _os.write(vecLeader, 19);
            _os.write(vecFuLeader, 20);
            _os.write(iType, 21);
            _os.write(iPubStatus, 22);
            _os.write(dwTargetid, 23);
            _os.write(bAttention, 24);
            _os.write(stFanTuanScoreInfo, 25);
            _os.write(dwUpdateNum, 26);
            _os.write(dwVuid, 27);
            _os.write(latestDyncFeeds, 28);
            _os.write(cDokiType, 29);
            _os.write(strCidList, 30);
            _os.write(strLidList, 31);
            _os.write(strUpdateTxt, 32);
            _os.write(strSeriesId, 33);
            _os.write(strSeriesTitle, 34);
            _os.write(ctype, 35);
            _os.write(positive_trailer, 36);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwFanTuanId, 1, true);
            _is.read(strStarAccount, 2, false);
            _is.read(strTitle, 3, false);
            _is.read(strSubTitle, 4, false);
            _is.read(strDesc, 5, false);
            _is.read(strinFansNick, 6, false);
            _is.read(strBanner, 7, false);
            _is.read(strAppBanner, 8, false);
            _is.read(strAppBannerBack, 9, false);
            _is.read(strHeader, 10, false);
            _is.read(strAppHeader, 11, false);
            _is.read(vecRelativeList, 12, false);
            _is.read(vecRelativeStar, 13, false);
            _is.read(ddwPostNum, 14, false);
            _is.read(ddwFanNum, 15, false);
            _is.read(ddwMealNum, 16, false);
            _is.read(dwRank, 17, false);
            _is.read(strRankName, 18, false);
            _is.read(vecLeader, 19, false);
            _is.read(vecFuLeader, 20, false);
            _is.read(iType, 21, false);
            _is.read(iPubStatus, 22, false);
            _is.read(dwTargetid, 23, false);
            _is.read(bAttention, 24, false);
            _is.read(stFanTuanScoreInfo, 25, false);
            _is.read(dwUpdateNum, 26, false);
            _is.read(dwVuid, 27, false);
            _is.read(latestDyncFeeds, 28, false);
            _is.read(cDokiType, 29, false);
            _is.read(strCidList, 30, false);
            _is.read(strLidList, 31, false);
            _is.read(strUpdateTxt, 32, false);
            _is.read(strSeriesId, 33, false);
            _is.read(strSeriesTitle, 34, false);
            _is.read(ctype, 35, false);
            _is.read(positive_trailer, 36, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(strStarAccount,"strStarAccount");
            _ds.display(strTitle,"strTitle");
            _ds.display(strSubTitle,"strSubTitle");
            _ds.display(strDesc,"strDesc");
            _ds.display(strinFansNick,"strinFansNick");
            _ds.display(strBanner,"strBanner");
            _ds.display(strAppBanner,"strAppBanner");
            _ds.display(strAppBannerBack,"strAppBannerBack");
            _ds.display(strHeader,"strHeader");
            _ds.display(strAppHeader,"strAppHeader");
            _ds.display(vecRelativeList,"vecRelativeList");
            _ds.display(vecRelativeStar,"vecRelativeStar");
            _ds.display(ddwPostNum,"ddwPostNum");
            _ds.display(ddwFanNum,"ddwFanNum");
            _ds.display(ddwMealNum,"ddwMealNum");
            _ds.display(dwRank,"dwRank");
            _ds.display(strRankName,"strRankName");
            _ds.display(vecLeader,"vecLeader");
            _ds.display(vecFuLeader,"vecFuLeader");
            _ds.display(iType,"iType");
            _ds.display(iPubStatus,"iPubStatus");
            _ds.display(dwTargetid,"dwTargetid");
            _ds.display(bAttention,"bAttention");
            _ds.display(stFanTuanScoreInfo,"stFanTuanScoreInfo");
            _ds.display(dwUpdateNum,"dwUpdateNum");
            _ds.display(dwVuid,"dwVuid");
            _ds.display(latestDyncFeeds,"latestDyncFeeds");
            _ds.display(cDokiType,"cDokiType");
            _ds.display(strCidList,"strCidList");
            _ds.display(strLidList,"strLidList");
            _ds.display(strUpdateTxt,"strUpdateTxt");
            _ds.display(strSeriesId,"strSeriesId");
            _ds.display(strSeriesTitle,"strSeriesTitle");
            _ds.display(ctype,"ctype");
            _ds.display(positive_trailer,"positive_trailer");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(strStarAccount, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(strSubTitle, true);
            _ds.displaySimple(strDesc, true);
            _ds.displaySimple(strinFansNick, true);
            _ds.displaySimple(strBanner, true);
            _ds.displaySimple(strAppBanner, true);
            _ds.displaySimple(strAppBannerBack, true);
            _ds.displaySimple(strHeader, true);
            _ds.displaySimple(strAppHeader, true);
            _ds.displaySimple(vecRelativeList, true);
            _ds.displaySimple(vecRelativeStar, true);
            _ds.displaySimple(ddwPostNum, true);
            _ds.displaySimple(ddwFanNum, true);
            _ds.displaySimple(ddwMealNum, true);
            _ds.displaySimple(dwRank, true);
            _ds.displaySimple(strRankName, true);
            _ds.displaySimple(vecLeader, true);
            _ds.displaySimple(vecFuLeader, true);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(iPubStatus, true);
            _ds.displaySimple(dwTargetid, true);
            _ds.displaySimple(bAttention, true);
            _ds.displaySimple(stFanTuanScoreInfo, true);
            _ds.displaySimple(dwUpdateNum, true);
            _ds.displaySimple(dwVuid, true);
            _ds.displaySimple(latestDyncFeeds, true);
            _ds.displaySimple(cDokiType, true);
            _ds.displaySimple(strCidList, true);
            _ds.displaySimple(strLidList, true);
            _ds.displaySimple(strUpdateTxt, true);
            _ds.displaySimple(strSeriesId, true);
            _ds.displaySimple(strSeriesTitle, true);
            _ds.displaySimple(ctype, true);
            _ds.displaySimple(positive_trailer, false);
            return _os;
        }
    public:
        taf::UInt32 dwFanTuanId;
        std::string strStarAccount;
        std::string strTitle;
        std::string strSubTitle;
        std::string strDesc;
        std::string strinFansNick;
        std::string strBanner;
        std::string strAppBanner;
        std::string strAppBannerBack;
        std::string strHeader;
        std::string strAppHeader;
        vector<taf::UInt32> vecRelativeList;
        vector<std::string> vecRelativeStar;
        taf::Int64 ddwPostNum;
        taf::Int64 ddwFanNum;
        taf::Int64 ddwMealNum;
        taf::UInt32 dwRank;
        std::string strRankName;
        vector<CFtReadPro::FanTuanUserInfo> vecLeader;
        vector<CFtReadPro::FanTuanUserInfo> vecFuLeader;
        taf::Int32 iType;
        taf::Int32 iPubStatus;
        taf::UInt32 dwTargetid;
        taf::Char bAttention;
        CFtReadPro::FanTuanScoreInfo stFanTuanScoreInfo;
        taf::Int32 dwUpdateNum;
        taf::UInt32 dwVuid;
        CFtReadPro::STLatesFeedsInfo latestDyncFeeds;
        taf::Char cDokiType;
        std::string strCidList;
        std::string strLidList;
        std::string strUpdateTxt;
        std::string strSeriesId;
        std::string strSeriesTitle;
        taf::Int32 ctype;
        taf::Int32 positive_trailer;
    };
    inline bool operator==(const FanTuanDetailInfo&l, const FanTuanDetailInfo&r)
    {
        return l.dwFanTuanId == r.dwFanTuanId && l.strStarAccount == r.strStarAccount && l.strTitle == r.strTitle && l.strSubTitle == r.strSubTitle && l.strDesc == r.strDesc && l.strinFansNick == r.strinFansNick && l.strBanner == r.strBanner && l.strAppBanner == r.strAppBanner && l.strAppBannerBack == r.strAppBannerBack && l.strHeader == r.strHeader && l.strAppHeader == r.strAppHeader && l.vecRelativeList == r.vecRelativeList && l.vecRelativeStar == r.vecRelativeStar && l.ddwPostNum == r.ddwPostNum && l.ddwFanNum == r.ddwFanNum && l.ddwMealNum == r.ddwMealNum && l.dwRank == r.dwRank && l.strRankName == r.strRankName && l.vecLeader == r.vecLeader && l.vecFuLeader == r.vecFuLeader && l.iType == r.iType && l.iPubStatus == r.iPubStatus && l.dwTargetid == r.dwTargetid && l.bAttention == r.bAttention && l.stFanTuanScoreInfo == r.stFanTuanScoreInfo && l.dwUpdateNum == r.dwUpdateNum && l.dwVuid == r.dwVuid && l.latestDyncFeeds == r.latestDyncFeeds && l.cDokiType == r.cDokiType && l.strCidList == r.strCidList && l.strLidList == r.strLidList && l.strUpdateTxt == r.strUpdateTxt && l.strSeriesId == r.strSeriesId && l.strSeriesTitle == r.strSeriesTitle && l.ctype == r.ctype && l.positive_trailer == r.positive_trailer;
    }
    inline bool operator!=(const FanTuanDetailInfo&l, const FanTuanDetailInfo&r)
    {
        return !(l == r);
    }

    struct FanTuanUserInFTInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanUserInFTInfo";
        }
        static string MD5()
        {
            return "1d0d2c3d47be778ce7e0dd4003df4863";
        }
        FanTuanUserInFTInfo()
        :ddwUserId(0),dwFanTuanId(0),cStatus(0),cSignToday(0),dwSignCnt(0),dwIdentityFlags(0),dwAuthFlags(0),dwRank(0),dwMealNum(0)
        {
        }
        void resetDefautlt()
        {
            ddwUserId = 0;
            dwFanTuanId = 0;
            cStatus = 0;
            cSignToday = 0;
            dwSignCnt = 0;
            dwIdentityFlags = 0;
            dwAuthFlags = 0;
            dwRank = 0;
            dwMealNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwUserId, 1);
            _os.write(dwFanTuanId, 2);
            _os.write(cStatus, 3);
            _os.write(cSignToday, 4);
            _os.write(dwSignCnt, 5);
            _os.write(dwIdentityFlags, 6);
            _os.write(dwAuthFlags, 7);
            _os.write(dwRank, 8);
            _os.write(dwMealNum, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwUserId, 1, true);
            _is.read(dwFanTuanId, 2, true);
            _is.read(cStatus, 3, false);
            _is.read(cSignToday, 4, false);
            _is.read(dwSignCnt, 5, false);
            _is.read(dwIdentityFlags, 6, false);
            _is.read(dwAuthFlags, 7, false);
            _is.read(dwRank, 8, false);
            _is.read(dwMealNum, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwUserId,"ddwUserId");
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(cStatus,"cStatus");
            _ds.display(cSignToday,"cSignToday");
            _ds.display(dwSignCnt,"dwSignCnt");
            _ds.display(dwIdentityFlags,"dwIdentityFlags");
            _ds.display(dwAuthFlags,"dwAuthFlags");
            _ds.display(dwRank,"dwRank");
            _ds.display(dwMealNum,"dwMealNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwUserId, true);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(cStatus, true);
            _ds.displaySimple(cSignToday, true);
            _ds.displaySimple(dwSignCnt, true);
            _ds.displaySimple(dwIdentityFlags, true);
            _ds.displaySimple(dwAuthFlags, true);
            _ds.displaySimple(dwRank, true);
            _ds.displaySimple(dwMealNum, false);
            return _os;
        }
    public:
        taf::Int64 ddwUserId;
        taf::UInt32 dwFanTuanId;
        taf::UInt8 cStatus;
        taf::UInt8 cSignToday;
        taf::UInt32 dwSignCnt;
        taf::UInt32 dwIdentityFlags;
        taf::UInt32 dwAuthFlags;
        taf::UInt32 dwRank;
        taf::UInt32 dwMealNum;
    };
    inline bool operator==(const FanTuanUserInFTInfo&l, const FanTuanUserInFTInfo&r)
    {
        return l.ddwUserId == r.ddwUserId && l.dwFanTuanId == r.dwFanTuanId && l.cStatus == r.cStatus && l.cSignToday == r.cSignToday && l.dwSignCnt == r.dwSignCnt && l.dwIdentityFlags == r.dwIdentityFlags && l.dwAuthFlags == r.dwAuthFlags && l.dwRank == r.dwRank && l.dwMealNum == r.dwMealNum;
    }
    inline bool operator!=(const FanTuanUserInFTInfo&l, const FanTuanUserInFTInfo&r)
    {
        return !(l == r);
    }

    struct FanTuanRankMenu : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanRankMenu";
        }
        static string MD5()
        {
            return "8f6c6d6905d40943b1a759f311f2da90";
        }
        FanTuanRankMenu()
        :dwTime(0),cWeekNum(0),strTitle("")
        {
        }
        void resetDefautlt()
        {
            dwTime = 0;
            cWeekNum = 0;
            strTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwTime, 1);
            _os.write(cWeekNum, 2);
            _os.write(strTitle, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwTime, 1, true);
            _is.read(cWeekNum, 2, false);
            _is.read(strTitle, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwTime,"dwTime");
            _ds.display(cWeekNum,"cWeekNum");
            _ds.display(strTitle,"strTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwTime, true);
            _ds.displaySimple(cWeekNum, true);
            _ds.displaySimple(strTitle, false);
            return _os;
        }
    public:
        taf::UInt32 dwTime;
        taf::UInt8 cWeekNum;
        std::string strTitle;
    };
    inline bool operator==(const FanTuanRankMenu&l, const FanTuanRankMenu&r)
    {
        return l.dwTime == r.dwTime && l.cWeekNum == r.cWeekNum && l.strTitle == r.strTitle;
    }
    inline bool operator!=(const FanTuanRankMenu&l, const FanTuanRankMenu&r)
    {
        return !(l == r);
    }

    struct FanTuanMyFTReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanMyFTReq";
        }
        static string MD5()
        {
            return "544eb87ab435290e4ae7d27ff46ce295";
        }
        FanTuanMyFTReq()
        :ddwUserId(0),wPageFlags(0),dwFanTuanId(0),dwReqNum(0),strWeight(""),iFlag(0)
        {
        }
        void resetDefautlt()
        {
            ddwUserId = 0;
            wPageFlags = 0;
            dwFanTuanId = 0;
            dwReqNum = 0;
            strWeight = "";
            iFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwUserId, 1);
            _os.write(wPageFlags, 2);
            _os.write(dwFanTuanId, 3);
            _os.write(dwReqNum, 4);
            _os.write(strWeight, 5);
            _os.write(iFlag, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwUserId, 1, true);
            _is.read(wPageFlags, 2, false);
            _is.read(dwFanTuanId, 3, false);
            _is.read(dwReqNum, 4, false);
            _is.read(strWeight, 5, false);
            _is.read(iFlag, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwUserId,"ddwUserId");
            _ds.display(wPageFlags,"wPageFlags");
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(strWeight,"strWeight");
            _ds.display(iFlag,"iFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwUserId, true);
            _ds.displaySimple(wPageFlags, true);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(strWeight, true);
            _ds.displaySimple(iFlag, false);
            return _os;
        }
    public:
        taf::Int64 ddwUserId;
        taf::UInt16 wPageFlags;
        taf::UInt32 dwFanTuanId;
        taf::UInt32 dwReqNum;
        std::string strWeight;
        taf::UInt16 iFlag;
    };
    inline bool operator==(const FanTuanMyFTReq&l, const FanTuanMyFTReq&r)
    {
        return l.ddwUserId == r.ddwUserId && l.wPageFlags == r.wPageFlags && l.dwFanTuanId == r.dwFanTuanId && l.dwReqNum == r.dwReqNum && l.strWeight == r.strWeight && l.iFlag == r.iFlag;
    }
    inline bool operator!=(const FanTuanMyFTReq&l, const FanTuanMyFTReq&r)
    {
        return !(l == r);
    }

    struct FanTuanMyFTRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanMyFTRsp";
        }
        static string MD5()
        {
            return "d4d3c0090ccf5460bad11b0531603bac";
        }
        FanTuanMyFTRsp()
        :iErrCode(0),strErrMsg(""),dwFanTuanId(0),bHasNextPage(false),strWeight("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            dwFanTuanId = 0;
            bHasNextPage = false;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecMyFtList, 3);
            _os.write(dwFanTuanId, 4);
            _os.write(bHasNextPage, 5);
            _os.write(strWeight, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecMyFtList, 3, false);
            _is.read(dwFanTuanId, 4, false);
            _is.read(bHasNextPage, 5, false);
            _is.read(strWeight, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecMyFtList,"vecMyFtList");
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strWeight,"strWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecMyFtList, true);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strWeight, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::FanTuanDetailInfo> vecMyFtList;
        taf::UInt32 dwFanTuanId;
        taf::Bool bHasNextPage;
        std::string strWeight;
    };
    inline bool operator==(const FanTuanMyFTRsp&l, const FanTuanMyFTRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecMyFtList == r.vecMyFtList && l.dwFanTuanId == r.dwFanTuanId && l.bHasNextPage == r.bHasNextPage && l.strWeight == r.strWeight;
    }
    inline bool operator!=(const FanTuanMyFTRsp&l, const FanTuanMyFTRsp&r)
    {
        return !(l == r);
    }

    struct FanTuanMyPostReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanMyPostReq";
        }
        static string MD5()
        {
            return "6834058e545b8534792308d2b772f43e";
        }
        FanTuanMyPostReq()
        :ddwUserId(0),wPageFlags(0),ddwPostId(0),dwReqNum(0),strWeight("")
        {
        }
        void resetDefautlt()
        {
            ddwUserId = 0;
            wPageFlags = 0;
            ddwPostId = 0;
            dwReqNum = 0;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwUserId, 1);
            _os.write(wPageFlags, 2);
            _os.write(ddwPostId, 3);
            _os.write(dwReqNum, 4);
            _os.write(strWeight, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwUserId, 1, true);
            _is.read(wPageFlags, 2, false);
            _is.read(ddwPostId, 3, false);
            _is.read(dwReqNum, 4, false);
            _is.read(strWeight, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwUserId,"ddwUserId");
            _ds.display(wPageFlags,"wPageFlags");
            _ds.display(ddwPostId,"ddwPostId");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(strWeight,"strWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwUserId, true);
            _ds.displaySimple(wPageFlags, true);
            _ds.displaySimple(ddwPostId, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(strWeight, false);
            return _os;
        }
    public:
        taf::Int64 ddwUserId;
        taf::UInt16 wPageFlags;
        taf::Int64 ddwPostId;
        taf::UInt32 dwReqNum;
        std::string strWeight;
    };
    inline bool operator==(const FanTuanMyPostReq&l, const FanTuanMyPostReq&r)
    {
        return l.ddwUserId == r.ddwUserId && l.wPageFlags == r.wPageFlags && l.ddwPostId == r.ddwPostId && l.dwReqNum == r.dwReqNum && l.strWeight == r.strWeight;
    }
    inline bool operator!=(const FanTuanMyPostReq&l, const FanTuanMyPostReq&r)
    {
        return !(l == r);
    }

    struct FanTuanMyPostRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanMyPostRsp";
        }
        static string MD5()
        {
            return "6e23f5a659bac20983b187e4ff570bbc";
        }
        FanTuanMyPostRsp()
        :iErrCode(0),strErrMsg(""),ddwPostId(0),bHasNextPage(false),strWeight("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            ddwPostId = 0;
            bHasNextPage = false;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecFtMsgInfo, 3);
            _os.write(mapFtDetailInfo, 4);
            _os.write(ddwPostId, 5);
            _os.write(bHasNextPage, 6);
            _os.write(strWeight, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecFtMsgInfo, 3, false);
            _is.read(mapFtDetailInfo, 4, false);
            _is.read(ddwPostId, 5, false);
            _is.read(bHasNextPage, 6, false);
            _is.read(strWeight, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFtMsgInfo,"vecFtMsgInfo");
            _ds.display(mapFtDetailInfo,"mapFtDetailInfo");
            _ds.display(ddwPostId,"ddwPostId");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strWeight,"strWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFtMsgInfo, true);
            _ds.displaySimple(mapFtDetailInfo, true);
            _ds.displaySimple(ddwPostId, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strWeight, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::FanTuanMsgInfo> vecFtMsgInfo;
        map<taf::UInt32, CFtReadPro::FanTuanDetailInfo> mapFtDetailInfo;
        taf::Int64 ddwPostId;
        taf::Bool bHasNextPage;
        std::string strWeight;
    };
    inline bool operator==(const FanTuanMyPostRsp&l, const FanTuanMyPostRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecFtMsgInfo == r.vecFtMsgInfo && l.mapFtDetailInfo == r.mapFtDetailInfo && l.ddwPostId == r.ddwPostId && l.bHasNextPage == r.bHasNextPage && l.strWeight == r.strWeight;
    }
    inline bool operator!=(const FanTuanMyPostRsp&l, const FanTuanMyPostRsp&r)
    {
        return !(l == r);
    }

    struct FanTuanMyCommentReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanMyCommentReq";
        }
        static string MD5()
        {
            return "6834058e545b8534792308d2b772f43e";
        }
        FanTuanMyCommentReq()
        :ddwUserId(0),wPageFlags(0),ddwCommentId(0),dwReqNum(0),strWeight("")
        {
        }
        void resetDefautlt()
        {
            ddwUserId = 0;
            wPageFlags = 0;
            ddwCommentId = 0;
            dwReqNum = 0;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwUserId, 1);
            _os.write(wPageFlags, 2);
            _os.write(ddwCommentId, 3);
            _os.write(dwReqNum, 4);
            _os.write(strWeight, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwUserId, 1, true);
            _is.read(wPageFlags, 2, false);
            _is.read(ddwCommentId, 3, false);
            _is.read(dwReqNum, 4, false);
            _is.read(strWeight, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwUserId,"ddwUserId");
            _ds.display(wPageFlags,"wPageFlags");
            _ds.display(ddwCommentId,"ddwCommentId");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(strWeight,"strWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwUserId, true);
            _ds.displaySimple(wPageFlags, true);
            _ds.displaySimple(ddwCommentId, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(strWeight, false);
            return _os;
        }
    public:
        taf::Int64 ddwUserId;
        taf::UInt16 wPageFlags;
        taf::Int64 ddwCommentId;
        taf::UInt32 dwReqNum;
        std::string strWeight;
    };
    inline bool operator==(const FanTuanMyCommentReq&l, const FanTuanMyCommentReq&r)
    {
        return l.ddwUserId == r.ddwUserId && l.wPageFlags == r.wPageFlags && l.ddwCommentId == r.ddwCommentId && l.dwReqNum == r.dwReqNum && l.strWeight == r.strWeight;
    }
    inline bool operator!=(const FanTuanMyCommentReq&l, const FanTuanMyCommentReq&r)
    {
        return !(l == r);
    }

    struct FanTuanMyCommentRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanMyCommentRsp";
        }
        static string MD5()
        {
            return "3c2562b823421cd9608db5a4ea31b3c2";
        }
        FanTuanMyCommentRsp()
        :iErrCode(0),strErrMsg(""),ddwCommentId(0),bHasNextPage(false),strWeight("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            ddwCommentId = 0;
            bHasNextPage = false;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecFtMsgInfo, 3);
            _os.write(mapFtUserInfo, 4);
            _os.write(mapFtDetailInfo, 5);
            _os.write(mapFtCommentParentInfo, 6);
            _os.write(ddwCommentId, 7);
            _os.write(bHasNextPage, 8);
            _os.write(strWeight, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecFtMsgInfo, 3, false);
            _is.read(mapFtUserInfo, 4, false);
            _is.read(mapFtDetailInfo, 5, false);
            _is.read(mapFtCommentParentInfo, 6, false);
            _is.read(ddwCommentId, 7, false);
            _is.read(bHasNextPage, 8, false);
            _is.read(strWeight, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFtMsgInfo,"vecFtMsgInfo");
            _ds.display(mapFtUserInfo,"mapFtUserInfo");
            _ds.display(mapFtDetailInfo,"mapFtDetailInfo");
            _ds.display(mapFtCommentParentInfo,"mapFtCommentParentInfo");
            _ds.display(ddwCommentId,"ddwCommentId");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strWeight,"strWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFtMsgInfo, true);
            _ds.displaySimple(mapFtUserInfo, true);
            _ds.displaySimple(mapFtDetailInfo, true);
            _ds.displaySimple(mapFtCommentParentInfo, true);
            _ds.displaySimple(ddwCommentId, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strWeight, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::FanTuanMsgInfo> vecFtMsgInfo;
        map<taf::Int64, CFtReadPro::FanTuanUserInfo> mapFtUserInfo;
        map<taf::UInt32, CFtReadPro::FanTuanDetailInfo> mapFtDetailInfo;
        map<taf::Int64, CFtReadPro::FanTuanMsgInfo> mapFtCommentParentInfo;
        taf::Int64 ddwCommentId;
        taf::Bool bHasNextPage;
        std::string strWeight;
    };
    inline bool operator==(const FanTuanMyCommentRsp&l, const FanTuanMyCommentRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecFtMsgInfo == r.vecFtMsgInfo && l.mapFtUserInfo == r.mapFtUserInfo && l.mapFtDetailInfo == r.mapFtDetailInfo && l.mapFtCommentParentInfo == r.mapFtCommentParentInfo && l.ddwCommentId == r.ddwCommentId && l.bHasNextPage == r.bHasNextPage && l.strWeight == r.strWeight;
    }
    inline bool operator!=(const FanTuanMyCommentRsp&l, const FanTuanMyCommentRsp&r)
    {
        return !(l == r);
    }

    struct FanTuanUnReadMsgCountReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanUnReadMsgCountReq";
        }
        static string MD5()
        {
            return "85d34c9911a804af92e3a22f16b1b6e9";
        }
        FanTuanUnReadMsgCountReq()
        :ddwUserId(0),ddwMsgId(0),strLastSeqId("")
        {
        }
        void resetDefautlt()
        {
            ddwUserId = 0;
            ddwMsgId = 0;
            strLastSeqId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwUserId, 1);
            _os.write(ddwMsgId, 2);
            _os.write(strLastSeqId, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwUserId, 1, true);
            _is.read(ddwMsgId, 2, false);
            _is.read(strLastSeqId, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwUserId,"ddwUserId");
            _ds.display(ddwMsgId,"ddwMsgId");
            _ds.display(strLastSeqId,"strLastSeqId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwUserId, true);
            _ds.displaySimple(ddwMsgId, true);
            _ds.displaySimple(strLastSeqId, false);
            return _os;
        }
    public:
        taf::Int64 ddwUserId;
        taf::Int64 ddwMsgId;
        std::string strLastSeqId;
    };
    inline bool operator==(const FanTuanUnReadMsgCountReq&l, const FanTuanUnReadMsgCountReq&r)
    {
        return l.ddwUserId == r.ddwUserId && l.ddwMsgId == r.ddwMsgId && l.strLastSeqId == r.strLastSeqId;
    }
    inline bool operator!=(const FanTuanUnReadMsgCountReq&l, const FanTuanUnReadMsgCountReq&r)
    {
        return !(l == r);
    }

    struct FanTuanUnReadMsgCountRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanUnReadMsgCountRsp";
        }
        static string MD5()
        {
            return "4e7a7871cabd03d03eda7684bef0a2ca";
        }
        FanTuanUnReadMsgCountRsp()
        :iErrCode(0),strErrMsg(""),dwUnReadMsgNum(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            dwUnReadMsgNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(dwUnReadMsgNum, 3);
            _os.write(vecFtUserInfo, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(dwUnReadMsgNum, 3, false);
            _is.read(vecFtUserInfo, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(dwUnReadMsgNum,"dwUnReadMsgNum");
            _ds.display(vecFtUserInfo,"vecFtUserInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(dwUnReadMsgNum, true);
            _ds.displaySimple(vecFtUserInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        taf::Int32 dwUnReadMsgNum;
        vector<CFtReadPro::FanTuanUserInfo> vecFtUserInfo;
    };
    inline bool operator==(const FanTuanUnReadMsgCountRsp&l, const FanTuanUnReadMsgCountRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.dwUnReadMsgNum == r.dwUnReadMsgNum && l.vecFtUserInfo == r.vecFtUserInfo;
    }
    inline bool operator!=(const FanTuanUnReadMsgCountRsp&l, const FanTuanUnReadMsgCountRsp&r)
    {
        return !(l == r);
    }

    struct FanTuanMsgListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanMsgListReq";
        }
        static string MD5()
        {
            return "f791f4288bfceb6bffd7d47662bf6272";
        }
        FanTuanMsgListReq()
        :ddwUserId(0),iType(0),wPageFlags(0),ddwMsgId(0),dwReqNum(0),strWeight(""),strLastSeqId("")
        {
        }
        void resetDefautlt()
        {
            ddwUserId = 0;
            iType = 0;
            wPageFlags = 0;
            ddwMsgId = 0;
            dwReqNum = 0;
            strWeight = "";
            strLastSeqId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwUserId, 1);
            _os.write(iType, 2);
            _os.write(wPageFlags, 3);
            _os.write(ddwMsgId, 4);
            _os.write(dwReqNum, 5);
            _os.write(strWeight, 6);
            _os.write(strLastSeqId, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwUserId, 1, true);
            _is.read(iType, 2, true);
            _is.read(wPageFlags, 3, false);
            _is.read(ddwMsgId, 4, false);
            _is.read(dwReqNum, 5, false);
            _is.read(strWeight, 6, false);
            _is.read(strLastSeqId, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwUserId,"ddwUserId");
            _ds.display(iType,"iType");
            _ds.display(wPageFlags,"wPageFlags");
            _ds.display(ddwMsgId,"ddwMsgId");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(strWeight,"strWeight");
            _ds.display(strLastSeqId,"strLastSeqId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwUserId, true);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(wPageFlags, true);
            _ds.displaySimple(ddwMsgId, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(strWeight, true);
            _ds.displaySimple(strLastSeqId, false);
            return _os;
        }
    public:
        taf::Int64 ddwUserId;
        taf::Int32 iType;
        taf::UInt16 wPageFlags;
        taf::Int64 ddwMsgId;
        taf::UInt32 dwReqNum;
        std::string strWeight;
        std::string strLastSeqId;
    };
    inline bool operator==(const FanTuanMsgListReq&l, const FanTuanMsgListReq&r)
    {
        return l.ddwUserId == r.ddwUserId && l.iType == r.iType && l.wPageFlags == r.wPageFlags && l.ddwMsgId == r.ddwMsgId && l.dwReqNum == r.dwReqNum && l.strWeight == r.strWeight && l.strLastSeqId == r.strLastSeqId;
    }
    inline bool operator!=(const FanTuanMsgListReq&l, const FanTuanMsgListReq&r)
    {
        return !(l == r);
    }

    struct FanTuanMsgListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanMsgListRsp";
        }
        static string MD5()
        {
            return "ef7197915531dfc819684f6be8f2af69";
        }
        FanTuanMsgListRsp()
        :iErrCode(0),strErrMsg(""),ddwMsgId(0),bHasNextPage(false),strWeight(""),strLastSeqId("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            ddwMsgId = 0;
            bHasNextPage = false;
            strWeight = "";
            strLastSeqId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecFtMsgInfo, 3);
            _os.write(mapFtUserInfo, 4);
            _os.write(mapFtDetailInfo, 5);
            _os.write(mapFtCommentParentInfo, 6);
            _os.write(ddwMsgId, 7);
            _os.write(bHasNextPage, 8);
            _os.write(strWeight, 9);
            _os.write(strLastSeqId, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecFtMsgInfo, 3, false);
            _is.read(mapFtUserInfo, 4, false);
            _is.read(mapFtDetailInfo, 5, false);
            _is.read(mapFtCommentParentInfo, 6, false);
            _is.read(ddwMsgId, 7, false);
            _is.read(bHasNextPage, 8, false);
            _is.read(strWeight, 9, false);
            _is.read(strLastSeqId, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFtMsgInfo,"vecFtMsgInfo");
            _ds.display(mapFtUserInfo,"mapFtUserInfo");
            _ds.display(mapFtDetailInfo,"mapFtDetailInfo");
            _ds.display(mapFtCommentParentInfo,"mapFtCommentParentInfo");
            _ds.display(ddwMsgId,"ddwMsgId");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strWeight,"strWeight");
            _ds.display(strLastSeqId,"strLastSeqId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFtMsgInfo, true);
            _ds.displaySimple(mapFtUserInfo, true);
            _ds.displaySimple(mapFtDetailInfo, true);
            _ds.displaySimple(mapFtCommentParentInfo, true);
            _ds.displaySimple(ddwMsgId, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strWeight, true);
            _ds.displaySimple(strLastSeqId, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::FanTuanMsgInfo> vecFtMsgInfo;
        map<taf::Int64, CFtReadPro::FanTuanUserInfo> mapFtUserInfo;
        map<taf::UInt32, CFtReadPro::FanTuanDetailInfo> mapFtDetailInfo;
        map<taf::Int64, CFtReadPro::FanTuanMsgInfo> mapFtCommentParentInfo;
        taf::Int64 ddwMsgId;
        taf::Bool bHasNextPage;
        std::string strWeight;
        std::string strLastSeqId;
    };
    inline bool operator==(const FanTuanMsgListRsp&l, const FanTuanMsgListRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecFtMsgInfo == r.vecFtMsgInfo && l.mapFtUserInfo == r.mapFtUserInfo && l.mapFtDetailInfo == r.mapFtDetailInfo && l.mapFtCommentParentInfo == r.mapFtCommentParentInfo && l.ddwMsgId == r.ddwMsgId && l.bHasNextPage == r.bHasNextPage && l.strWeight == r.strWeight && l.strLastSeqId == r.strLastSeqId;
    }
    inline bool operator!=(const FanTuanMsgListRsp&l, const FanTuanMsgListRsp&r)
    {
        return !(l == r);
    }

    struct FantuanPostListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FantuanPostListReq";
        }
        static string MD5()
        {
            return "f8a8bc1173e9d3ca613911de3441d7e5";
        }
        FantuanPostListReq()
        :dwFanTuanId(0),wPageFlags(0),ddwPostId(0),dwReqNum(0),strWeight(""),cDetailFlag(0)
        {
        }
        void resetDefautlt()
        {
            dwFanTuanId = 0;
            wPageFlags = 0;
            ddwPostId = 0;
            dwReqNum = 0;
            strWeight = "";
            cDetailFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwFanTuanId, 1);
            _os.write(wPageFlags, 2);
            _os.write(ddwPostId, 3);
            _os.write(dwReqNum, 4);
            _os.write(strWeight, 5);
            _os.write(cDetailFlag, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwFanTuanId, 1, true);
            _is.read(wPageFlags, 2, false);
            _is.read(ddwPostId, 3, false);
            _is.read(dwReqNum, 4, false);
            _is.read(strWeight, 5, false);
            _is.read(cDetailFlag, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(wPageFlags,"wPageFlags");
            _ds.display(ddwPostId,"ddwPostId");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(strWeight,"strWeight");
            _ds.display(cDetailFlag,"cDetailFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(wPageFlags, true);
            _ds.displaySimple(ddwPostId, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(strWeight, true);
            _ds.displaySimple(cDetailFlag, false);
            return _os;
        }
    public:
        taf::UInt32 dwFanTuanId;
        taf::UInt16 wPageFlags;
        taf::Int64 ddwPostId;
        taf::UInt32 dwReqNum;
        std::string strWeight;
        taf::UInt32 cDetailFlag;
    };
    inline bool operator==(const FantuanPostListReq&l, const FantuanPostListReq&r)
    {
        return l.dwFanTuanId == r.dwFanTuanId && l.wPageFlags == r.wPageFlags && l.ddwPostId == r.ddwPostId && l.dwReqNum == r.dwReqNum && l.strWeight == r.strWeight && l.cDetailFlag == r.cDetailFlag;
    }
    inline bool operator!=(const FantuanPostListReq&l, const FantuanPostListReq&r)
    {
        return !(l == r);
    }

    struct FantuanPostListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FantuanPostListRsp";
        }
        static string MD5()
        {
            return "944d78c5291e7dab75d5e60cd15c777b";
        }
        FantuanPostListRsp()
        :iErrCode(0),strErrMsg(""),ddwPostId(0),bHasNextPage(false),strWeight("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            ddwPostId = 0;
            bHasNextPage = false;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecFtMsgInfo, 3);
            _os.write(mapFtUserInfo, 4);
            _os.write(ddwPostId, 5);
            _os.write(bHasNextPage, 6);
            _os.write(strWeight, 7);
            _os.write(mapFtDetailInfo, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecFtMsgInfo, 3, false);
            _is.read(mapFtUserInfo, 4, false);
            _is.read(ddwPostId, 5, false);
            _is.read(bHasNextPage, 6, false);
            _is.read(strWeight, 7, false);
            _is.read(mapFtDetailInfo, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFtMsgInfo,"vecFtMsgInfo");
            _ds.display(mapFtUserInfo,"mapFtUserInfo");
            _ds.display(ddwPostId,"ddwPostId");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strWeight,"strWeight");
            _ds.display(mapFtDetailInfo,"mapFtDetailInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFtMsgInfo, true);
            _ds.displaySimple(mapFtUserInfo, true);
            _ds.displaySimple(ddwPostId, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strWeight, true);
            _ds.displaySimple(mapFtDetailInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::FanTuanMsgInfo> vecFtMsgInfo;
        map<taf::Int64, CFtReadPro::FanTuanUserInfo> mapFtUserInfo;
        taf::Int64 ddwPostId;
        taf::Bool bHasNextPage;
        std::string strWeight;
        map<taf::UInt32, CFtReadPro::FanTuanDetailInfo> mapFtDetailInfo;
    };
    inline bool operator==(const FantuanPostListRsp&l, const FantuanPostListRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecFtMsgInfo == r.vecFtMsgInfo && l.mapFtUserInfo == r.mapFtUserInfo && l.ddwPostId == r.ddwPostId && l.bHasNextPage == r.bHasNextPage && l.strWeight == r.strWeight && l.mapFtDetailInfo == r.mapFtDetailInfo;
    }
    inline bool operator!=(const FantuanPostListRsp&l, const FantuanPostListRsp&r)
    {
        return !(l == r);
    }

    struct FantuanHotPostListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FantuanHotPostListReq";
        }
        static string MD5()
        {
            return "4a754f606ca712ac3852a451e0109e92";
        }
        FantuanHotPostListReq()
        :wPageFlags(0),ddwPostId(0),dwReqNum(0),strWeight("")
        {
        }
        void resetDefautlt()
        {
            wPageFlags = 0;
            ddwPostId = 0;
            dwReqNum = 0;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(wPageFlags, 1);
            _os.write(ddwPostId, 2);
            _os.write(dwReqNum, 3);
            _os.write(strWeight, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(wPageFlags, 1, false);
            _is.read(ddwPostId, 2, false);
            _is.read(dwReqNum, 3, false);
            _is.read(strWeight, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(wPageFlags,"wPageFlags");
            _ds.display(ddwPostId,"ddwPostId");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(strWeight,"strWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(wPageFlags, true);
            _ds.displaySimple(ddwPostId, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(strWeight, false);
            return _os;
        }
    public:
        taf::UInt16 wPageFlags;
        taf::Int64 ddwPostId;
        taf::UInt32 dwReqNum;
        std::string strWeight;
    };
    inline bool operator==(const FantuanHotPostListReq&l, const FantuanHotPostListReq&r)
    {
        return l.wPageFlags == r.wPageFlags && l.ddwPostId == r.ddwPostId && l.dwReqNum == r.dwReqNum && l.strWeight == r.strWeight;
    }
    inline bool operator!=(const FantuanHotPostListReq&l, const FantuanHotPostListReq&r)
    {
        return !(l == r);
    }

    struct FantuanHotPostListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FantuanHotPostListRsp";
        }
        static string MD5()
        {
            return "b2ec69da78ee80c1535996968526dfe5";
        }
        FantuanHotPostListRsp()
        :iErrCode(0),strErrMsg(""),ddwPostId(0),bHasNextPage(false),strWeight("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            ddwPostId = 0;
            bHasNextPage = false;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecFtMsgInfo, 3);
            _os.write(mapFtDetailInfo, 4);
            _os.write(ddwPostId, 5);
            _os.write(bHasNextPage, 6);
            _os.write(strWeight, 7);
            _os.write(mapFtUserInfo, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecFtMsgInfo, 3, false);
            _is.read(mapFtDetailInfo, 4, false);
            _is.read(ddwPostId, 5, false);
            _is.read(bHasNextPage, 6, false);
            _is.read(strWeight, 7, false);
            _is.read(mapFtUserInfo, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFtMsgInfo,"vecFtMsgInfo");
            _ds.display(mapFtDetailInfo,"mapFtDetailInfo");
            _ds.display(ddwPostId,"ddwPostId");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strWeight,"strWeight");
            _ds.display(mapFtUserInfo,"mapFtUserInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFtMsgInfo, true);
            _ds.displaySimple(mapFtDetailInfo, true);
            _ds.displaySimple(ddwPostId, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strWeight, true);
            _ds.displaySimple(mapFtUserInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::FanTuanMsgInfo> vecFtMsgInfo;
        map<taf::UInt32, CFtReadPro::FanTuanDetailInfo> mapFtDetailInfo;
        taf::Int64 ddwPostId;
        taf::Bool bHasNextPage;
        std::string strWeight;
        map<taf::Int64, CFtReadPro::FanTuanUserInfo> mapFtUserInfo;
    };
    inline bool operator==(const FantuanHotPostListRsp&l, const FantuanHotPostListRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecFtMsgInfo == r.vecFtMsgInfo && l.mapFtDetailInfo == r.mapFtDetailInfo && l.ddwPostId == r.ddwPostId && l.bHasNextPage == r.bHasNextPage && l.strWeight == r.strWeight && l.mapFtUserInfo == r.mapFtUserInfo;
    }
    inline bool operator!=(const FantuanHotPostListRsp&l, const FantuanHotPostListRsp&r)
    {
        return !(l == r);
    }

    struct FantuanTopicListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FantuanTopicListReq";
        }
        static string MD5()
        {
            return "4a754f606ca712ac3852a451e0109e92";
        }
        FantuanTopicListReq()
        :wPageFlags(0),ddwPostId(0),dwReqNum(0),strWeight("")
        {
        }
        void resetDefautlt()
        {
            wPageFlags = 0;
            ddwPostId = 0;
            dwReqNum = 0;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(wPageFlags, 1);
            _os.write(ddwPostId, 2);
            _os.write(dwReqNum, 3);
            _os.write(strWeight, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(wPageFlags, 1, false);
            _is.read(ddwPostId, 2, false);
            _is.read(dwReqNum, 3, false);
            _is.read(strWeight, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(wPageFlags,"wPageFlags");
            _ds.display(ddwPostId,"ddwPostId");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(strWeight,"strWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(wPageFlags, true);
            _ds.displaySimple(ddwPostId, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(strWeight, false);
            return _os;
        }
    public:
        taf::UInt16 wPageFlags;
        taf::Int64 ddwPostId;
        taf::UInt32 dwReqNum;
        std::string strWeight;
    };
    inline bool operator==(const FantuanTopicListReq&l, const FantuanTopicListReq&r)
    {
        return l.wPageFlags == r.wPageFlags && l.ddwPostId == r.ddwPostId && l.dwReqNum == r.dwReqNum && l.strWeight == r.strWeight;
    }
    inline bool operator!=(const FantuanTopicListReq&l, const FantuanTopicListReq&r)
    {
        return !(l == r);
    }

    struct FantuanTopicListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FantuanTopicListRsp";
        }
        static string MD5()
        {
            return "b2ec69da78ee80c1535996968526dfe5";
        }
        FantuanTopicListRsp()
        :iErrCode(0),strErrMsg(""),ddwPostId(0),bHasNextPage(false),strWeight("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            ddwPostId = 0;
            bHasNextPage = false;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecFtMsgInfo, 3);
            _os.write(mapFtDetailInfo, 4);
            _os.write(ddwPostId, 5);
            _os.write(bHasNextPage, 6);
            _os.write(strWeight, 7);
            _os.write(mapFtUserInfo, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecFtMsgInfo, 3, false);
            _is.read(mapFtDetailInfo, 4, false);
            _is.read(ddwPostId, 5, false);
            _is.read(bHasNextPage, 6, false);
            _is.read(strWeight, 7, false);
            _is.read(mapFtUserInfo, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFtMsgInfo,"vecFtMsgInfo");
            _ds.display(mapFtDetailInfo,"mapFtDetailInfo");
            _ds.display(ddwPostId,"ddwPostId");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strWeight,"strWeight");
            _ds.display(mapFtUserInfo,"mapFtUserInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFtMsgInfo, true);
            _ds.displaySimple(mapFtDetailInfo, true);
            _ds.displaySimple(ddwPostId, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strWeight, true);
            _ds.displaySimple(mapFtUserInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::FanTuanMsgInfo> vecFtMsgInfo;
        map<taf::UInt32, CFtReadPro::FanTuanDetailInfo> mapFtDetailInfo;
        taf::Int64 ddwPostId;
        taf::Bool bHasNextPage;
        std::string strWeight;
        map<taf::Int64, CFtReadPro::FanTuanUserInfo> mapFtUserInfo;
    };
    inline bool operator==(const FantuanTopicListRsp&l, const FantuanTopicListRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecFtMsgInfo == r.vecFtMsgInfo && l.mapFtDetailInfo == r.mapFtDetailInfo && l.ddwPostId == r.ddwPostId && l.bHasNextPage == r.bHasNextPage && l.strWeight == r.strWeight && l.mapFtUserInfo == r.mapFtUserInfo;
    }
    inline bool operator!=(const FantuanTopicListRsp&l, const FantuanTopicListRsp&r)
    {
        return !(l == r);
    }

    struct FantuanTopNewsListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FantuanTopNewsListReq";
        }
        static string MD5()
        {
            return "4a754f606ca712ac3852a451e0109e92";
        }
        FantuanTopNewsListReq()
        :wPageFlags(0),ddwPostId(0),dwReqNum(0),strWeight("")
        {
        }
        void resetDefautlt()
        {
            wPageFlags = 0;
            ddwPostId = 0;
            dwReqNum = 0;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(wPageFlags, 1);
            _os.write(ddwPostId, 2);
            _os.write(dwReqNum, 3);
            _os.write(strWeight, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(wPageFlags, 1, false);
            _is.read(ddwPostId, 2, false);
            _is.read(dwReqNum, 3, false);
            _is.read(strWeight, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(wPageFlags,"wPageFlags");
            _ds.display(ddwPostId,"ddwPostId");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(strWeight,"strWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(wPageFlags, true);
            _ds.displaySimple(ddwPostId, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(strWeight, false);
            return _os;
        }
    public:
        taf::UInt16 wPageFlags;
        taf::Int64 ddwPostId;
        taf::UInt32 dwReqNum;
        std::string strWeight;
    };
    inline bool operator==(const FantuanTopNewsListReq&l, const FantuanTopNewsListReq&r)
    {
        return l.wPageFlags == r.wPageFlags && l.ddwPostId == r.ddwPostId && l.dwReqNum == r.dwReqNum && l.strWeight == r.strWeight;
    }
    inline bool operator!=(const FantuanTopNewsListReq&l, const FantuanTopNewsListReq&r)
    {
        return !(l == r);
    }

    struct FantuanTopNewsListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FantuanTopNewsListRsp";
        }
        static string MD5()
        {
            return "b2ec69da78ee80c1535996968526dfe5";
        }
        FantuanTopNewsListRsp()
        :iErrCode(0),strErrMsg(""),ddwPostId(0),bHasNextPage(false),strWeight("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            ddwPostId = 0;
            bHasNextPage = false;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecFtMsgInfo, 3);
            _os.write(mapFtDetailInfo, 4);
            _os.write(ddwPostId, 5);
            _os.write(bHasNextPage, 6);
            _os.write(strWeight, 7);
            _os.write(mapFtUserInfo, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecFtMsgInfo, 3, false);
            _is.read(mapFtDetailInfo, 4, false);
            _is.read(ddwPostId, 5, false);
            _is.read(bHasNextPage, 6, false);
            _is.read(strWeight, 7, false);
            _is.read(mapFtUserInfo, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFtMsgInfo,"vecFtMsgInfo");
            _ds.display(mapFtDetailInfo,"mapFtDetailInfo");
            _ds.display(ddwPostId,"ddwPostId");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strWeight,"strWeight");
            _ds.display(mapFtUserInfo,"mapFtUserInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFtMsgInfo, true);
            _ds.displaySimple(mapFtDetailInfo, true);
            _ds.displaySimple(ddwPostId, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strWeight, true);
            _ds.displaySimple(mapFtUserInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::FanTuanMsgInfo> vecFtMsgInfo;
        map<taf::UInt32, CFtReadPro::FanTuanDetailInfo> mapFtDetailInfo;
        taf::Int64 ddwPostId;
        taf::Bool bHasNextPage;
        std::string strWeight;
        map<taf::Int64, CFtReadPro::FanTuanUserInfo> mapFtUserInfo;
    };
    inline bool operator==(const FantuanTopNewsListRsp&l, const FantuanTopNewsListRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecFtMsgInfo == r.vecFtMsgInfo && l.mapFtDetailInfo == r.mapFtDetailInfo && l.ddwPostId == r.ddwPostId && l.bHasNextPage == r.bHasNextPage && l.strWeight == r.strWeight && l.mapFtUserInfo == r.mapFtUserInfo;
    }
    inline bool operator!=(const FantuanTopNewsListRsp&l, const FantuanTopNewsListRsp&r)
    {
        return !(l == r);
    }

    struct FanTuanPostDetailReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanPostDetailReq";
        }
        static string MD5()
        {
            return "148e5813b759f9125b0278130076a1bc";
        }
        FanTuanPostDetailReq()
        :ddwPostId(0),wPageFlags(0),ddwCommentId(0),dwReqNum(0),strWeight(""),dwCurPages(0),cType(1)
        {
        }
        void resetDefautlt()
        {
            ddwPostId = 0;
            wPageFlags = 0;
            ddwCommentId = 0;
            dwReqNum = 0;
            strWeight = "";
            dwCurPages = 0;
            cType = 1;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwPostId, 1);
            _os.write(wPageFlags, 2);
            _os.write(ddwCommentId, 3);
            _os.write(dwReqNum, 4);
            _os.write(strWeight, 5);
            _os.write(dwCurPages, 6);
            _os.write(cType, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwPostId, 1, true);
            _is.read(wPageFlags, 2, false);
            _is.read(ddwCommentId, 3, false);
            _is.read(dwReqNum, 4, false);
            _is.read(strWeight, 5, false);
            _is.read(dwCurPages, 6, false);
            _is.read(cType, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwPostId,"ddwPostId");
            _ds.display(wPageFlags,"wPageFlags");
            _ds.display(ddwCommentId,"ddwCommentId");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(strWeight,"strWeight");
            _ds.display(dwCurPages,"dwCurPages");
            _ds.display(cType,"cType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwPostId, true);
            _ds.displaySimple(wPageFlags, true);
            _ds.displaySimple(ddwCommentId, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(strWeight, true);
            _ds.displaySimple(dwCurPages, true);
            _ds.displaySimple(cType, false);
            return _os;
        }
    public:
        taf::Int64 ddwPostId;
        taf::UInt16 wPageFlags;
        taf::Int64 ddwCommentId;
        taf::UInt32 dwReqNum;
        std::string strWeight;
        taf::UInt32 dwCurPages;
        taf::UInt8 cType;
    };
    inline bool operator==(const FanTuanPostDetailReq&l, const FanTuanPostDetailReq&r)
    {
        return l.ddwPostId == r.ddwPostId && l.wPageFlags == r.wPageFlags && l.ddwCommentId == r.ddwCommentId && l.dwReqNum == r.dwReqNum && l.strWeight == r.strWeight && l.dwCurPages == r.dwCurPages && l.cType == r.cType;
    }
    inline bool operator!=(const FanTuanPostDetailReq&l, const FanTuanPostDetailReq&r)
    {
        return !(l == r);
    }

    struct FanTuanPostDetailRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanPostDetailRsp";
        }
        static string MD5()
        {
            return "9426c6b70e05dd2c2eb30fd9b411461d";
        }
        FanTuanPostDetailRsp()
        :iErrCode(0),strErrMsg(""),ddwCommentId(0),bHasNextPage(false),strWeight(""),dwPageNum(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            ddwCommentId = 0;
            bHasNextPage = false;
            strWeight = "";
            dwPageNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(stFtMsgInfo, 3);
            _os.write(vecFtMsgInfo, 4);
            _os.write(mapFtUserInfo, 5);
            _os.write(mapFtCommentParentInfo, 6);
            _os.write(mapFtDetailInfo, 7);
            _os.write(ddwCommentId, 8);
            _os.write(bHasNextPage, 9);
            _os.write(strWeight, 10);
            _os.write(dwPageNum, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(stFtMsgInfo, 3, false);
            _is.read(vecFtMsgInfo, 4, false);
            _is.read(mapFtUserInfo, 5, false);
            _is.read(mapFtCommentParentInfo, 6, false);
            _is.read(mapFtDetailInfo, 7, false);
            _is.read(ddwCommentId, 8, false);
            _is.read(bHasNextPage, 9, false);
            _is.read(strWeight, 10, false);
            _is.read(dwPageNum, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stFtMsgInfo,"stFtMsgInfo");
            _ds.display(vecFtMsgInfo,"vecFtMsgInfo");
            _ds.display(mapFtUserInfo,"mapFtUserInfo");
            _ds.display(mapFtCommentParentInfo,"mapFtCommentParentInfo");
            _ds.display(mapFtDetailInfo,"mapFtDetailInfo");
            _ds.display(ddwCommentId,"ddwCommentId");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strWeight,"strWeight");
            _ds.display(dwPageNum,"dwPageNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stFtMsgInfo, true);
            _ds.displaySimple(vecFtMsgInfo, true);
            _ds.displaySimple(mapFtUserInfo, true);
            _ds.displaySimple(mapFtCommentParentInfo, true);
            _ds.displaySimple(mapFtDetailInfo, true);
            _ds.displaySimple(ddwCommentId, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strWeight, true);
            _ds.displaySimple(dwPageNum, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        CFtReadPro::FanTuanMsgInfo stFtMsgInfo;
        vector<CFtReadPro::FanTuanMsgInfo> vecFtMsgInfo;
        map<taf::Int64, CFtReadPro::FanTuanUserInfo> mapFtUserInfo;
        map<taf::Int64, CFtReadPro::FanTuanMsgInfo> mapFtCommentParentInfo;
        map<taf::UInt32, CFtReadPro::FanTuanDetailInfo> mapFtDetailInfo;
        taf::Int64 ddwCommentId;
        taf::Bool bHasNextPage;
        std::string strWeight;
        taf::UInt32 dwPageNum;
    };
    inline bool operator==(const FanTuanPostDetailRsp&l, const FanTuanPostDetailRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.stFtMsgInfo == r.stFtMsgInfo && l.vecFtMsgInfo == r.vecFtMsgInfo && l.mapFtUserInfo == r.mapFtUserInfo && l.mapFtCommentParentInfo == r.mapFtCommentParentInfo && l.mapFtDetailInfo == r.mapFtDetailInfo && l.ddwCommentId == r.ddwCommentId && l.bHasNextPage == r.bHasNextPage && l.strWeight == r.strWeight && l.dwPageNum == r.dwPageNum;
    }
    inline bool operator!=(const FanTuanPostDetailRsp&l, const FanTuanPostDetailRsp&r)
    {
        return !(l == r);
    }

    struct FanTuanUserInFTInfoReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanUserInFTInfoReq";
        }
        static string MD5()
        {
            return "51f2ee90bad0aa66336a499366d5f2a8";
        }
        FanTuanUserInFTInfoReq()
        :ddwUserId(0),dwDataType(0)
        {
        }
        void resetDefautlt()
        {
            ddwUserId = 0;
            dwDataType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwUserId, 0);
            _os.write(vecFtIdList, 1);
            _os.write(dwDataType, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwUserId, 0, true);
            _is.read(vecFtIdList, 1, true);
            _is.read(dwDataType, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwUserId,"ddwUserId");
            _ds.display(vecFtIdList,"vecFtIdList");
            _ds.display(dwDataType,"dwDataType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwUserId, true);
            _ds.displaySimple(vecFtIdList, true);
            _ds.displaySimple(dwDataType, false);
            return _os;
        }
    public:
        taf::Int64 ddwUserId;
        vector<taf::UInt32> vecFtIdList;
        taf::UInt32 dwDataType;
    };
    inline bool operator==(const FanTuanUserInFTInfoReq&l, const FanTuanUserInFTInfoReq&r)
    {
        return l.ddwUserId == r.ddwUserId && l.vecFtIdList == r.vecFtIdList && l.dwDataType == r.dwDataType;
    }
    inline bool operator!=(const FanTuanUserInFTInfoReq&l, const FanTuanUserInFTInfoReq&r)
    {
        return !(l == r);
    }

    struct FanTuanUserInFTInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanUserInFTInfoRsp";
        }
        static string MD5()
        {
            return "51e93262bd3d59822b35b71186f07f0c";
        }
        FanTuanUserInFTInfoRsp()
        :iErrCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecFtUserInFtInfo, 3);
            _os.write(mapFtUserInfo, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecFtUserInFtInfo, 3, false);
            _is.read(mapFtUserInfo, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFtUserInFtInfo,"vecFtUserInFtInfo");
            _ds.display(mapFtUserInfo,"mapFtUserInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFtUserInFtInfo, true);
            _ds.displaySimple(mapFtUserInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::FanTuanUserInFTInfo> vecFtUserInFtInfo;
        map<taf::Int64, CFtReadPro::FanTuanUserInfo> mapFtUserInfo;
    };
    inline bool operator==(const FanTuanUserInFTInfoRsp&l, const FanTuanUserInFTInfoRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecFtUserInFtInfo == r.vecFtUserInFtInfo && l.mapFtUserInfo == r.mapFtUserInfo;
    }
    inline bool operator!=(const FanTuanUserInFTInfoRsp&l, const FanTuanUserInFTInfoRsp&r)
    {
        return !(l == r);
    }

    struct FanTuanRankMenuReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanRankMenuReq";
        }
        static string MD5()
        {
            return "58924c4317bf844bab0c35f806c8ff85";
        }
        FanTuanRankMenuReq()
        :cRankType(0),wPageFlags(0),dwTime(0),dwReqNum(0),strWeight("")
        {
        }
        void resetDefautlt()
        {
            cRankType = 0;
            wPageFlags = 0;
            dwTime = 0;
            dwReqNum = 0;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cRankType, 1);
            _os.write(wPageFlags, 2);
            _os.write(dwTime, 3);
            _os.write(dwReqNum, 4);
            _os.write(strWeight, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cRankType, 1, true);
            _is.read(wPageFlags, 2, false);
            _is.read(dwTime, 3, false);
            _is.read(dwReqNum, 4, false);
            _is.read(strWeight, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cRankType,"cRankType");
            _ds.display(wPageFlags,"wPageFlags");
            _ds.display(dwTime,"dwTime");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(strWeight,"strWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cRankType, true);
            _ds.displaySimple(wPageFlags, true);
            _ds.displaySimple(dwTime, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(strWeight, false);
            return _os;
        }
    public:
        taf::UInt8 cRankType;
        taf::UInt16 wPageFlags;
        taf::UInt32 dwTime;
        taf::UInt32 dwReqNum;
        std::string strWeight;
    };
    inline bool operator==(const FanTuanRankMenuReq&l, const FanTuanRankMenuReq&r)
    {
        return l.cRankType == r.cRankType && l.wPageFlags == r.wPageFlags && l.dwTime == r.dwTime && l.dwReqNum == r.dwReqNum && l.strWeight == r.strWeight;
    }
    inline bool operator!=(const FanTuanRankMenuReq&l, const FanTuanRankMenuReq&r)
    {
        return !(l == r);
    }

    struct FanTuanRankMenuRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanRankMenuRsp";
        }
        static string MD5()
        {
            return "38c0b706fbeae3c1d74cc711a26f837a";
        }
        FanTuanRankMenuRsp()
        :iErrCode(0),strErrMsg(""),dwTime(0),bHasNextPage(false),strWeight("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            dwTime = 0;
            bHasNextPage = false;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecFtRankMenuList, 3);
            _os.write(dwTime, 4);
            _os.write(bHasNextPage, 5);
            _os.write(strWeight, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecFtRankMenuList, 3, false);
            _is.read(dwTime, 4, false);
            _is.read(bHasNextPage, 5, false);
            _is.read(strWeight, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFtRankMenuList,"vecFtRankMenuList");
            _ds.display(dwTime,"dwTime");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strWeight,"strWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFtRankMenuList, true);
            _ds.displaySimple(dwTime, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strWeight, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::FanTuanRankMenu> vecFtRankMenuList;
        taf::UInt32 dwTime;
        taf::Bool bHasNextPage;
        std::string strWeight;
    };
    inline bool operator==(const FanTuanRankMenuRsp&l, const FanTuanRankMenuRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecFtRankMenuList == r.vecFtRankMenuList && l.dwTime == r.dwTime && l.bHasNextPage == r.bHasNextPage && l.strWeight == r.strWeight;
    }
    inline bool operator!=(const FanTuanRankMenuRsp&l, const FanTuanRankMenuRsp&r)
    {
        return !(l == r);
    }

    struct FanTuanRankReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanRankReq";
        }
        static string MD5()
        {
            return "67be945c2407a35b07a601c1b8f22c6f";
        }
        FanTuanRankReq()
        :cRankType(0),dwTime(0),wPageFlags(0),dwFanTuanId(0),dwReqNum(0),strWeight(""),cDetailFlag(0)
        {
        }
        void resetDefautlt()
        {
            cRankType = 0;
            dwTime = 0;
            wPageFlags = 0;
            dwFanTuanId = 0;
            dwReqNum = 0;
            strWeight = "";
            cDetailFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cRankType, 1);
            _os.write(dwTime, 2);
            _os.write(wPageFlags, 3);
            _os.write(dwFanTuanId, 4);
            _os.write(dwReqNum, 5);
            _os.write(strWeight, 6);
            _os.write(cDetailFlag, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cRankType, 1, true);
            _is.read(dwTime, 2, false);
            _is.read(wPageFlags, 3, false);
            _is.read(dwFanTuanId, 4, false);
            _is.read(dwReqNum, 5, false);
            _is.read(strWeight, 6, false);
            _is.read(cDetailFlag, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cRankType,"cRankType");
            _ds.display(dwTime,"dwTime");
            _ds.display(wPageFlags,"wPageFlags");
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(strWeight,"strWeight");
            _ds.display(cDetailFlag,"cDetailFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cRankType, true);
            _ds.displaySimple(dwTime, true);
            _ds.displaySimple(wPageFlags, true);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(strWeight, true);
            _ds.displaySimple(cDetailFlag, false);
            return _os;
        }
    public:
        taf::UInt8 cRankType;
        taf::UInt32 dwTime;
        taf::UInt16 wPageFlags;
        taf::UInt32 dwFanTuanId;
        taf::UInt32 dwReqNum;
        std::string strWeight;
        taf::UInt32 cDetailFlag;
    };
    inline bool operator==(const FanTuanRankReq&l, const FanTuanRankReq&r)
    {
        return l.cRankType == r.cRankType && l.dwTime == r.dwTime && l.wPageFlags == r.wPageFlags && l.dwFanTuanId == r.dwFanTuanId && l.dwReqNum == r.dwReqNum && l.strWeight == r.strWeight && l.cDetailFlag == r.cDetailFlag;
    }
    inline bool operator!=(const FanTuanRankReq&l, const FanTuanRankReq&r)
    {
        return !(l == r);
    }

    struct FanTuanRankRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanRankRsp";
        }
        static string MD5()
        {
            return "cc6f7f93e34b577358130b8cd76f5ac9";
        }
        FanTuanRankRsp()
        :iErrCode(0),strErrMsg(""),dwFanTuanId(0),bHasNextPage(false),strWeight("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            dwFanTuanId = 0;
            bHasNextPage = false;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(mapFtRankList, 3);
            _os.write(dwFanTuanId, 4);
            _os.write(bHasNextPage, 5);
            _os.write(strWeight, 6);
            _os.write(mapRankPicUrl, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(mapFtRankList, 3, false);
            _is.read(dwFanTuanId, 4, false);
            _is.read(bHasNextPage, 5, false);
            _is.read(strWeight, 6, false);
            _is.read(mapRankPicUrl, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(mapFtRankList,"mapFtRankList");
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strWeight,"strWeight");
            _ds.display(mapRankPicUrl,"mapRankPicUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(mapFtRankList, true);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strWeight, true);
            _ds.displaySimple(mapRankPicUrl, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        map<taf::UInt8, vector<CFtReadPro::FanTuanDetailInfo> > mapFtRankList;
        taf::UInt32 dwFanTuanId;
        taf::Bool bHasNextPage;
        std::string strWeight;
        map<taf::UInt8, vector<std::string> > mapRankPicUrl;
    };
    inline bool operator==(const FanTuanRankRsp&l, const FanTuanRankRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.mapFtRankList == r.mapFtRankList && l.dwFanTuanId == r.dwFanTuanId && l.bHasNextPage == r.bHasNextPage && l.strWeight == r.strWeight && l.mapRankPicUrl == r.mapRankPicUrl;
    }
    inline bool operator!=(const FanTuanRankRsp&l, const FanTuanRankRsp&r)
    {
        return !(l == r);
    }

    struct FanTuanFansRankReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanFansRankReq";
        }
        static string MD5()
        {
            return "e688960a9955f0898ac10f9825433816";
        }
        FanTuanFansRankReq()
        :dwFanTuanId(0),wPageFlags(0),ddwUserId(0),dwReqNum(0),strWeight("")
        {
        }
        void resetDefautlt()
        {
            dwFanTuanId = 0;
            wPageFlags = 0;
            ddwUserId = 0;
            dwReqNum = 0;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwFanTuanId, 1);
            _os.write(wPageFlags, 2);
            _os.write(ddwUserId, 3);
            _os.write(dwReqNum, 4);
            _os.write(strWeight, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwFanTuanId, 1, true);
            _is.read(wPageFlags, 2, false);
            _is.read(ddwUserId, 3, false);
            _is.read(dwReqNum, 4, false);
            _is.read(strWeight, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(wPageFlags,"wPageFlags");
            _ds.display(ddwUserId,"ddwUserId");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(strWeight,"strWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(wPageFlags, true);
            _ds.displaySimple(ddwUserId, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(strWeight, false);
            return _os;
        }
    public:
        taf::UInt32 dwFanTuanId;
        taf::UInt16 wPageFlags;
        taf::Int64 ddwUserId;
        taf::UInt32 dwReqNum;
        std::string strWeight;
    };
    inline bool operator==(const FanTuanFansRankReq&l, const FanTuanFansRankReq&r)
    {
        return l.dwFanTuanId == r.dwFanTuanId && l.wPageFlags == r.wPageFlags && l.ddwUserId == r.ddwUserId && l.dwReqNum == r.dwReqNum && l.strWeight == r.strWeight;
    }
    inline bool operator!=(const FanTuanFansRankReq&l, const FanTuanFansRankReq&r)
    {
        return !(l == r);
    }

    struct FanTuanFansRankRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanFansRankRsp";
        }
        static string MD5()
        {
            return "032333aa516484d9cb58067f103c546f";
        }
        FanTuanFansRankRsp()
        :iErrCode(0),strErrMsg(""),ddwUserId(0),bHasNextPage(false),strWeight(""),ddwTotal(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            ddwUserId = 0;
            bHasNextPage = false;
            strWeight = "";
            ddwTotal = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecFtUserInFtInfo, 3);
            _os.write(mapFtUserInfo, 4);
            _os.write(ddwUserId, 5);
            _os.write(bHasNextPage, 6);
            _os.write(strWeight, 7);
            _os.write(ddwTotal, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecFtUserInFtInfo, 3, false);
            _is.read(mapFtUserInfo, 4, false);
            _is.read(ddwUserId, 5, false);
            _is.read(bHasNextPage, 6, false);
            _is.read(strWeight, 7, false);
            _is.read(ddwTotal, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFtUserInFtInfo,"vecFtUserInFtInfo");
            _ds.display(mapFtUserInfo,"mapFtUserInfo");
            _ds.display(ddwUserId,"ddwUserId");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strWeight,"strWeight");
            _ds.display(ddwTotal,"ddwTotal");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFtUserInFtInfo, true);
            _ds.displaySimple(mapFtUserInfo, true);
            _ds.displaySimple(ddwUserId, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strWeight, true);
            _ds.displaySimple(ddwTotal, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::FanTuanUserInFTInfo> vecFtUserInFtInfo;
        map<taf::Int64, CFtReadPro::FanTuanUserInfo> mapFtUserInfo;
        taf::Int64 ddwUserId;
        taf::Bool bHasNextPage;
        std::string strWeight;
        taf::Int64 ddwTotal;
    };
    inline bool operator==(const FanTuanFansRankRsp&l, const FanTuanFansRankRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecFtUserInFtInfo == r.vecFtUserInFtInfo && l.mapFtUserInfo == r.mapFtUserInfo && l.ddwUserId == r.ddwUserId && l.bHasNextPage == r.bHasNextPage && l.strWeight == r.strWeight && l.ddwTotal == r.ddwTotal;
    }
    inline bool operator!=(const FanTuanFansRankRsp&l, const FanTuanFansRankRsp&r)
    {
        return !(l == r);
    }

    struct FanTuanDetailReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanDetailReq";
        }
        static string MD5()
        {
            return "256dddf7d3f47a709b126d25e34aac44";
        }
        FanTuanDetailReq()
        :dwFanTuanId(0)
        {
        }
        void resetDefautlt()
        {
            dwFanTuanId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwFanTuanId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwFanTuanId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwFanTuanId,"dwFanTuanId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwFanTuanId, false);
            return _os;
        }
    public:
        taf::UInt32 dwFanTuanId;
    };
    inline bool operator==(const FanTuanDetailReq&l, const FanTuanDetailReq&r)
    {
        return l.dwFanTuanId == r.dwFanTuanId;
    }
    inline bool operator!=(const FanTuanDetailReq&l, const FanTuanDetailReq&r)
    {
        return !(l == r);
    }

    struct FanTuanDetailRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanDetailRsp";
        }
        static string MD5()
        {
            return "4aacf6d587202bae91b10ee02eb5e1f4";
        }
        FanTuanDetailRsp()
        :iErrCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(stFtDetailInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(stFtDetailInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stFtDetailInfo,"stFtDetailInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stFtDetailInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        CFtReadPro::FanTuanDetailInfo stFtDetailInfo;
    };
    inline bool operator==(const FanTuanDetailRsp&l, const FanTuanDetailRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.stFtDetailInfo == r.stFtDetailInfo;
    }
    inline bool operator!=(const FanTuanDetailRsp&l, const FanTuanDetailRsp&r)
    {
        return !(l == r);
    }

    struct FanTuanHotFtReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanHotFtReq";
        }
        static string MD5()
        {
            return "0cb9790dc2771f04f3c5543c3517e262";
        }
        FanTuanHotFtReq()
        :dwFanTuanId(0),dwReqNum(0),strWeight("")
        {
        }
        void resetDefautlt()
        {
            dwFanTuanId = 0;
            dwReqNum = 0;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwFanTuanId, 1);
            _os.write(dwReqNum, 2);
            _os.write(strWeight, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwFanTuanId, 1, false);
            _is.read(dwReqNum, 2, false);
            _is.read(strWeight, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(strWeight,"strWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(strWeight, false);
            return _os;
        }
    public:
        taf::UInt32 dwFanTuanId;
        taf::UInt32 dwReqNum;
        std::string strWeight;
    };
    inline bool operator==(const FanTuanHotFtReq&l, const FanTuanHotFtReq&r)
    {
        return l.dwFanTuanId == r.dwFanTuanId && l.dwReqNum == r.dwReqNum && l.strWeight == r.strWeight;
    }
    inline bool operator!=(const FanTuanHotFtReq&l, const FanTuanHotFtReq&r)
    {
        return !(l == r);
    }

    struct FanTuanHotFtRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanHotFtRsp";
        }
        static string MD5()
        {
            return "d4d3c0090ccf5460bad11b0531603bac";
        }
        FanTuanHotFtRsp()
        :iErrCode(0),strErrMsg(""),dwFanTuanId(0),bHasNextPage(false),strWeight("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            dwFanTuanId = 0;
            bHasNextPage = false;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecFtDetailInfo, 3);
            _os.write(dwFanTuanId, 4);
            _os.write(bHasNextPage, 5);
            _os.write(strWeight, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecFtDetailInfo, 3, false);
            _is.read(dwFanTuanId, 4, false);
            _is.read(bHasNextPage, 5, false);
            _is.read(strWeight, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFtDetailInfo,"vecFtDetailInfo");
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strWeight,"strWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFtDetailInfo, true);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strWeight, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::FanTuanDetailInfo> vecFtDetailInfo;
        taf::UInt32 dwFanTuanId;
        taf::Bool bHasNextPage;
        std::string strWeight;
    };
    inline bool operator==(const FanTuanHotFtRsp&l, const FanTuanHotFtRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecFtDetailInfo == r.vecFtDetailInfo && l.dwFanTuanId == r.dwFanTuanId && l.bHasNextPage == r.bHasNextPage && l.strWeight == r.strWeight;
    }
    inline bool operator!=(const FanTuanHotFtRsp&l, const FanTuanHotFtRsp&r)
    {
        return !(l == r);
    }

    struct FanTuanFtFansReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanFtFansReq";
        }
        static string MD5()
        {
            return "acd20b81de68f55013e884239a903c2f";
        }
        FanTuanFtFansReq()
        :dwFanTuanId(0),dwReqNum(0),ddwUserid(0),strWeight("")
        {
        }
        void resetDefautlt()
        {
            dwFanTuanId = 0;
            dwReqNum = 0;
            ddwUserid = 0;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwFanTuanId, 1);
            _os.write(dwReqNum, 2);
            _os.write(ddwUserid, 3);
            _os.write(strWeight, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwFanTuanId, 1, false);
            _is.read(dwReqNum, 2, false);
            _is.read(ddwUserid, 3, false);
            _is.read(strWeight, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(ddwUserid,"ddwUserid");
            _ds.display(strWeight,"strWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(ddwUserid, true);
            _ds.displaySimple(strWeight, false);
            return _os;
        }
    public:
        taf::UInt32 dwFanTuanId;
        taf::UInt32 dwReqNum;
        taf::Int64 ddwUserid;
        std::string strWeight;
    };
    inline bool operator==(const FanTuanFtFansReq&l, const FanTuanFtFansReq&r)
    {
        return l.dwFanTuanId == r.dwFanTuanId && l.dwReqNum == r.dwReqNum && l.ddwUserid == r.ddwUserid && l.strWeight == r.strWeight;
    }
    inline bool operator!=(const FanTuanFtFansReq&l, const FanTuanFtFansReq&r)
    {
        return !(l == r);
    }

    struct FanTuanFtFansRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanFtFansRsp";
        }
        static string MD5()
        {
            return "5c094c3b60789271aea9fc1f8dbbac71";
        }
        FanTuanFtFansRsp()
        :iErrCode(0),strErrMsg(""),ddwUserid(0),bHasNextPage(false),strWeight("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            ddwUserid = 0;
            bHasNextPage = false;
            strWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecFtUserInfo, 3);
            _os.write(ddwUserid, 4);
            _os.write(bHasNextPage, 5);
            _os.write(strWeight, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecFtUserInfo, 3, false);
            _is.read(ddwUserid, 4, false);
            _is.read(bHasNextPage, 5, false);
            _is.read(strWeight, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFtUserInfo,"vecFtUserInfo");
            _ds.display(ddwUserid,"ddwUserid");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strWeight,"strWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFtUserInfo, true);
            _ds.displaySimple(ddwUserid, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strWeight, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::FanTuanUserInfo> vecFtUserInfo;
        taf::UInt32 ddwUserid;
        taf::Bool bHasNextPage;
        std::string strWeight;
    };
    inline bool operator==(const FanTuanFtFansRsp&l, const FanTuanFtFansRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecFtUserInfo == r.vecFtUserInfo && l.ddwUserid == r.ddwUserid && l.bHasNextPage == r.bHasNextPage && l.strWeight == r.strWeight;
    }
    inline bool operator!=(const FanTuanFtFansRsp&l, const FanTuanFtFansRsp&r)
    {
        return !(l == r);
    }

    struct FanTuanRecPostListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanRecPostListReq";
        }
        static string MD5()
        {
            return "47d1720544d82c78f7c878373fbf5d19";
        }
        FanTuanRecPostListReq()
        :ddwUserId(0),wPageFlags(0),ddwPostId(0),dwReqNum(0),strWeight(""),strOldWeight("")
        {
        }
        void resetDefautlt()
        {
            ddwUserId = 0;
            wPageFlags = 0;
            ddwPostId = 0;
            dwReqNum = 0;
            strWeight = "";
            strOldWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwUserId, 1);
            _os.write(wPageFlags, 2);
            _os.write(ddwPostId, 3);
            _os.write(dwReqNum, 4);
            _os.write(strWeight, 5);
            _os.write(strOldWeight, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwUserId, 1, true);
            _is.read(wPageFlags, 2, false);
            _is.read(ddwPostId, 3, false);
            _is.read(dwReqNum, 4, false);
            _is.read(strWeight, 5, false);
            _is.read(strOldWeight, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwUserId,"ddwUserId");
            _ds.display(wPageFlags,"wPageFlags");
            _ds.display(ddwPostId,"ddwPostId");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(strWeight,"strWeight");
            _ds.display(strOldWeight,"strOldWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwUserId, true);
            _ds.displaySimple(wPageFlags, true);
            _ds.displaySimple(ddwPostId, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(strWeight, true);
            _ds.displaySimple(strOldWeight, false);
            return _os;
        }
    public:
        taf::Int64 ddwUserId;
        taf::UInt16 wPageFlags;
        taf::Int64 ddwPostId;
        taf::UInt32 dwReqNum;
        std::string strWeight;
        std::string strOldWeight;
    };
    inline bool operator==(const FanTuanRecPostListReq&l, const FanTuanRecPostListReq&r)
    {
        return l.ddwUserId == r.ddwUserId && l.wPageFlags == r.wPageFlags && l.ddwPostId == r.ddwPostId && l.dwReqNum == r.dwReqNum && l.strWeight == r.strWeight && l.strOldWeight == r.strOldWeight;
    }
    inline bool operator!=(const FanTuanRecPostListReq&l, const FanTuanRecPostListReq&r)
    {
        return !(l == r);
    }

    struct FanTuanRecPostListResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanRecPostListResp";
        }
        static string MD5()
        {
            return "e103344d2a7c96df28e19c873423b2d5";
        }
        FanTuanRecPostListResp()
        :iErrCode(0),strErrMsg(""),ddwPostId(0),bHasNextPage(false),strWeight(""),strOldWeight("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            ddwPostId = 0;
            bHasNextPage = false;
            strWeight = "";
            strOldWeight = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecFtMsgInfo, 3);
            _os.write(mapFtUserInfo, 4);
            _os.write(ddwPostId, 5);
            _os.write(bHasNextPage, 6);
            _os.write(strWeight, 7);
            _os.write(mapFtDetailInfo, 8);
            _os.write(vecFtUserInFtInfo, 9);
            _os.write(vecDaBangFtDetailInfo, 10);
            _os.write(strOldWeight, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecFtMsgInfo, 3, false);
            _is.read(mapFtUserInfo, 4, false);
            _is.read(ddwPostId, 5, false);
            _is.read(bHasNextPage, 6, false);
            _is.read(strWeight, 7, false);
            _is.read(mapFtDetailInfo, 8, false);
            _is.read(vecFtUserInFtInfo, 9, false);
            _is.read(vecDaBangFtDetailInfo, 10, false);
            _is.read(strOldWeight, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFtMsgInfo,"vecFtMsgInfo");
            _ds.display(mapFtUserInfo,"mapFtUserInfo");
            _ds.display(ddwPostId,"ddwPostId");
            _ds.display(bHasNextPage,"bHasNextPage");
            _ds.display(strWeight,"strWeight");
            _ds.display(mapFtDetailInfo,"mapFtDetailInfo");
            _ds.display(vecFtUserInFtInfo,"vecFtUserInFtInfo");
            _ds.display(vecDaBangFtDetailInfo,"vecDaBangFtDetailInfo");
            _ds.display(strOldWeight,"strOldWeight");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFtMsgInfo, true);
            _ds.displaySimple(mapFtUserInfo, true);
            _ds.displaySimple(ddwPostId, true);
            _ds.displaySimple(bHasNextPage, true);
            _ds.displaySimple(strWeight, true);
            _ds.displaySimple(mapFtDetailInfo, true);
            _ds.displaySimple(vecFtUserInFtInfo, true);
            _ds.displaySimple(vecDaBangFtDetailInfo, true);
            _ds.displaySimple(strOldWeight, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::FanTuanMsgInfo> vecFtMsgInfo;
        map<taf::Int64, CFtReadPro::FanTuanUserInfo> mapFtUserInfo;
        taf::Int64 ddwPostId;
        taf::Bool bHasNextPage;
        std::string strWeight;
        map<taf::UInt32, CFtReadPro::FanTuanDetailInfo> mapFtDetailInfo;
        vector<CFtReadPro::FanTuanUserInFTInfo> vecFtUserInFtInfo;
        vector<CFtReadPro::FanTuanDetailInfo> vecDaBangFtDetailInfo;
        std::string strOldWeight;
    };
    inline bool operator==(const FanTuanRecPostListResp&l, const FanTuanRecPostListResp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecFtMsgInfo == r.vecFtMsgInfo && l.mapFtUserInfo == r.mapFtUserInfo && l.ddwPostId == r.ddwPostId && l.bHasNextPage == r.bHasNextPage && l.strWeight == r.strWeight && l.mapFtDetailInfo == r.mapFtDetailInfo && l.vecFtUserInFtInfo == r.vecFtUserInFtInfo && l.vecDaBangFtDetailInfo == r.vecDaBangFtDetailInfo && l.strOldWeight == r.strOldWeight;
    }
    inline bool operator!=(const FanTuanRecPostListResp&l, const FanTuanRecPostListResp&r)
    {
        return !(l == r);
    }

    struct STRecCacheData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STRecCacheData";
        }
        static string MD5()
        {
            return "96acc4511c4ddc5f3b89759d62f7cadd";
        }
        STRecCacheData()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vecFtRecPostList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vecFtRecPostList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vecFtRecPostList,"vecFtRecPostList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vecFtRecPostList, false);
            return _os;
        }
    public:
        vector<CFtReadPro::FanTuanRecPostListResp> vecFtRecPostList;
    };
    inline bool operator==(const STRecCacheData&l, const STRecCacheData&r)
    {
        return l.vecFtRecPostList == r.vecFtRecPostList;
    }
    inline bool operator!=(const STRecCacheData&l, const STRecCacheData&r)
    {
        return !(l == r);
    }

    struct FanTuanRTimeRecPostReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanRTimeRecPostReq";
        }
        static string MD5()
        {
            return "625a5c89be5586e36b41f6f761f8117c";
        }
        FanTuanRTimeRecPostReq()
        :ddwUserId(0),dwFanTuanId(0),cFeedType(0),strOldWeight(""),dwIncreaseId(0)
        {
        }
        void resetDefautlt()
        {
            ddwUserId = 0;
            dwFanTuanId = 0;
            cFeedType = 0;
            strOldWeight = "";
            dwIncreaseId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwUserId, 1);
            _os.write(dwFanTuanId, 2);
            _os.write(vecShortVidList, 3);
            _os.write(cFeedType, 4);
            _os.write(strOldWeight, 5);
            _os.write(dwIncreaseId, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwUserId, 1, true);
            _is.read(dwFanTuanId, 2, true);
            _is.read(vecShortVidList, 3, false);
            _is.read(cFeedType, 4, false);
            _is.read(strOldWeight, 5, false);
            _is.read(dwIncreaseId, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwUserId,"ddwUserId");
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(vecShortVidList,"vecShortVidList");
            _ds.display(cFeedType,"cFeedType");
            _ds.display(strOldWeight,"strOldWeight");
            _ds.display(dwIncreaseId,"dwIncreaseId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwUserId, true);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(vecShortVidList, true);
            _ds.displaySimple(cFeedType, true);
            _ds.displaySimple(strOldWeight, true);
            _ds.displaySimple(dwIncreaseId, false);
            return _os;
        }
    public:
        taf::Int64 ddwUserId;
        taf::UInt32 dwFanTuanId;
        vector<std::string> vecShortVidList;
        taf::UInt8 cFeedType;
        std::string strOldWeight;
        taf::Int64 dwIncreaseId;
    };
    inline bool operator==(const FanTuanRTimeRecPostReq&l, const FanTuanRTimeRecPostReq&r)
    {
        return l.ddwUserId == r.ddwUserId && l.dwFanTuanId == r.dwFanTuanId && l.vecShortVidList == r.vecShortVidList && l.cFeedType == r.cFeedType && l.strOldWeight == r.strOldWeight && l.dwIncreaseId == r.dwIncreaseId;
    }
    inline bool operator!=(const FanTuanRTimeRecPostReq&l, const FanTuanRTimeRecPostReq&r)
    {
        return !(l == r);
    }

    struct FanTuanRTimeRecPostResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanRTimeRecPostResp";
        }
        static string MD5()
        {
            return "90831f2e165e4b0f0877535f48257413";
        }
        FanTuanRTimeRecPostResp()
        :iErrCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(mapFtMsgInfo, 3);
            _os.write(mapFtDetailInfo, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(mapFtMsgInfo, 3, false);
            _is.read(mapFtDetailInfo, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(mapFtMsgInfo,"mapFtMsgInfo");
            _ds.display(mapFtDetailInfo,"mapFtDetailInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(mapFtMsgInfo, true);
            _ds.displaySimple(mapFtDetailInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        map<std::string, CFtReadPro::FanTuanMsgInfo> mapFtMsgInfo;
        map<taf::UInt32, CFtReadPro::FanTuanDetailInfo> mapFtDetailInfo;
    };
    inline bool operator==(const FanTuanRTimeRecPostResp&l, const FanTuanRTimeRecPostResp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.mapFtMsgInfo == r.mapFtMsgInfo && l.mapFtDetailInfo == r.mapFtDetailInfo;
    }
    inline bool operator!=(const FanTuanRTimeRecPostResp&l, const FanTuanRTimeRecPostResp&r)
    {
        return !(l == r);
    }

    struct STRecCacheIndexData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STRecCacheIndexData";
        }
        static string MD5()
        {
            return "7b2384fc7e44f6a84b08eb94885c9a85";
        }
        STRecCacheIndexData()
        :dwTimestamp(0)
        {
        }
        void resetDefautlt()
        {
            dwTimestamp = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwTimestamp, 1);
            _os.write(stFtMsgInfo, 2);
            _os.write(vecDaBangFtDetailInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwTimestamp, 1, true);
            _is.read(stFtMsgInfo, 2, false);
            _is.read(vecDaBangFtDetailInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwTimestamp,"dwTimestamp");
            _ds.display(stFtMsgInfo,"stFtMsgInfo");
            _ds.display(vecDaBangFtDetailInfo,"vecDaBangFtDetailInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwTimestamp, true);
            _ds.displaySimple(stFtMsgInfo, true);
            _ds.displaySimple(vecDaBangFtDetailInfo, false);
            return _os;
        }
    public:
        taf::UInt32 dwTimestamp;
        CFtReadPro::FanTuanMsgInfo stFtMsgInfo;
        vector<CFtReadPro::FanTuanDetailInfo> vecDaBangFtDetailInfo;
    };
    inline bool operator==(const STRecCacheIndexData&l, const STRecCacheIndexData&r)
    {
        return l.dwTimestamp == r.dwTimestamp && l.stFtMsgInfo == r.stFtMsgInfo && l.vecDaBangFtDetailInfo == r.vecDaBangFtDetailInfo;
    }
    inline bool operator!=(const STRecCacheIndexData&l, const STRecCacheIndexData&r)
    {
        return !(l == r);
    }

    struct FanTuanStarRankMenuReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanStarRankMenuReq";
        }
        static string MD5()
        {
            return "08ac913174a799e75c5187664599dbdf";
        }
        FanTuanStarRankMenuReq()
        :cRankType(0),wPageFlags(0),cTimeType(0),dwTime(0),dwReqNum(0),dwPage(0)
        {
        }
        void resetDefautlt()
        {
            cRankType = 0;
            wPageFlags = 0;
            cTimeType = 0;
            dwTime = 0;
            dwReqNum = 0;
            dwPage = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cRankType, 1);
            _os.write(wPageFlags, 2);
            _os.write(cTimeType, 3);
            _os.write(dwTime, 4);
            _os.write(dwReqNum, 5);
            _os.write(dwPage, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cRankType, 1, true);
            _is.read(wPageFlags, 2, false);
            _is.read(cTimeType, 3, false);
            _is.read(dwTime, 4, false);
            _is.read(dwReqNum, 5, false);
            _is.read(dwPage, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cRankType,"cRankType");
            _ds.display(wPageFlags,"wPageFlags");
            _ds.display(cTimeType,"cTimeType");
            _ds.display(dwTime,"dwTime");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(dwPage,"dwPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cRankType, true);
            _ds.displaySimple(wPageFlags, true);
            _ds.displaySimple(cTimeType, true);
            _ds.displaySimple(dwTime, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(dwPage, false);
            return _os;
        }
    public:
        taf::UInt8 cRankType;
        taf::UInt16 wPageFlags;
        taf::UInt16 cTimeType;
        taf::UInt32 dwTime;
        taf::UInt32 dwReqNum;
        taf::UInt32 dwPage;
    };
    inline bool operator==(const FanTuanStarRankMenuReq&l, const FanTuanStarRankMenuReq&r)
    {
        return l.cRankType == r.cRankType && l.wPageFlags == r.wPageFlags && l.cTimeType == r.cTimeType && l.dwTime == r.dwTime && l.dwReqNum == r.dwReqNum && l.dwPage == r.dwPage;
    }
    inline bool operator!=(const FanTuanStarRankMenuReq&l, const FanTuanStarRankMenuReq&r)
    {
        return !(l == r);
    }

    struct FanTuanStarRankMenuRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanStarRankMenuRsp";
        }
        static string MD5()
        {
            return "aa77441e74e5389858e8498cc8855007";
        }
        FanTuanStarRankMenuRsp()
        :iErrCode(0),strErrMsg(""),dwTime(0),dwPeri(0),bHasNextPage(false)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            dwTime = 0;
            dwPeri = 0;
            bHasNextPage = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(mapFtStarRankInfo, 3);
            _os.write(dwTime, 4);
            _os.write(dwPeri, 5);
            _os.write(bHasNextPage, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(mapFtStarRankInfo, 3, false);
            _is.read(dwTime, 4, false);
            _is.read(dwPeri, 5, false);
            _is.read(bHasNextPage, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(mapFtStarRankInfo,"mapFtStarRankInfo");
            _ds.display(dwTime,"dwTime");
            _ds.display(dwPeri,"dwPeri");
            _ds.display(bHasNextPage,"bHasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(mapFtStarRankInfo, true);
            _ds.displaySimple(dwTime, true);
            _ds.displaySimple(dwPeri, true);
            _ds.displaySimple(bHasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        map<taf::UInt8, vector<CFtReadPro::FanTuanDetailInfo> > mapFtStarRankInfo;
        taf::UInt32 dwTime;
        taf::UInt32 dwPeri;
        taf::Bool bHasNextPage;
    };
    inline bool operator==(const FanTuanStarRankMenuRsp&l, const FanTuanStarRankMenuRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.mapFtStarRankInfo == r.mapFtStarRankInfo && l.dwTime == r.dwTime && l.dwPeri == r.dwPeri && l.bHasNextPage == r.bHasNextPage;
    }
    inline bool operator!=(const FanTuanStarRankMenuRsp&l, const FanTuanStarRankMenuRsp&r)
    {
        return !(l == r);
    }

    struct FanTuanStarHistRankReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanStarHistRankReq";
        }
        static string MD5()
        {
            return "ec46b4fe812169bf527015d089068e34";
        }
        FanTuanStarHistRankReq()
        :cReqNum(0)
        {
        }
        void resetDefautlt()
        {
            cReqNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cReqNum, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cReqNum, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cReqNum,"cReqNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cReqNum, false);
            return _os;
        }
    public:
        taf::UInt8 cReqNum;
    };
    inline bool operator==(const FanTuanStarHistRankReq&l, const FanTuanStarHistRankReq&r)
    {
        return l.cReqNum == r.cReqNum;
    }
    inline bool operator!=(const FanTuanStarHistRankReq&l, const FanTuanStarHistRankReq&r)
    {
        return !(l == r);
    }

    struct FanTuanStarHistRankRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanStarHistRankRsp";
        }
        static string MD5()
        {
            return "bb215ca5033840148410ad861bfa8ae9";
        }
        FanTuanStarHistRankRsp()
        :iErrCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecStartTime, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecStartTime, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecStartTime,"vecStartTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecStartTime, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<taf::UInt32> vecStartTime;
    };
    inline bool operator==(const FanTuanStarHistRankRsp&l, const FanTuanStarHistRankRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecStartTime == r.vecStartTime;
    }
    inline bool operator!=(const FanTuanStarHistRankRsp&l, const FanTuanStarHistRankRsp&r)
    {
        return !(l == r);
    }

    struct FanTuanStarRankInfoReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanStarRankInfoReq";
        }
        static string MD5()
        {
            return "fd7ecd2dfc48f16dd3fb73953c3b81a3";
        }
        FanTuanStarRankInfoReq()
        :dwFanTuanId(0),dwTime(0),cTimeType(0),dwStarId(0),bFrom(0)
        {
        }
        void resetDefautlt()
        {
            dwFanTuanId = 0;
            dwTime = 0;
            cTimeType = 0;
            dwStarId = 0;
            bFrom = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwFanTuanId, 1);
            _os.write(dwTime, 2);
            _os.write(cTimeType, 3);
            _os.write(dwStarId, 4);
            _os.write(bFrom, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwFanTuanId, 1, true);
            _is.read(dwTime, 2, false);
            _is.read(cTimeType, 3, false);
            _is.read(dwStarId, 4, false);
            _is.read(bFrom, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(dwTime,"dwTime");
            _ds.display(cTimeType,"cTimeType");
            _ds.display(dwStarId,"dwStarId");
            _ds.display(bFrom,"bFrom");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(dwTime, true);
            _ds.displaySimple(cTimeType, true);
            _ds.displaySimple(dwStarId, true);
            _ds.displaySimple(bFrom, false);
            return _os;
        }
    public:
        taf::UInt32 dwFanTuanId;
        taf::UInt32 dwTime;
        taf::UInt32 cTimeType;
        taf::UInt32 dwStarId;
        taf::Char bFrom;
    };
    inline bool operator==(const FanTuanStarRankInfoReq&l, const FanTuanStarRankInfoReq&r)
    {
        return l.dwFanTuanId == r.dwFanTuanId && l.dwTime == r.dwTime && l.cTimeType == r.cTimeType && l.dwStarId == r.dwStarId && l.bFrom == r.bFrom;
    }
    inline bool operator!=(const FanTuanStarRankInfoReq&l, const FanTuanStarRankInfoReq&r)
    {
        return !(l == r);
    }

    struct FanTuanStarRankLink : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanStarRankLink";
        }
        static string MD5()
        {
            return "6cf1348cdd69f924109dd734bc911528";
        }
        FanTuanStarRankLink()
        :strDyncLink(""),strVideoLink(""),strLiveLink(""),strProdLink(""),strActLink(""),strRankLink("")
        {
        }
        void resetDefautlt()
        {
            strDyncLink = "";
            strVideoLink = "";
            strLiveLink = "";
            strProdLink = "";
            strActLink = "";
            strRankLink = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDyncLink, 1);
            _os.write(strVideoLink, 2);
            _os.write(strLiveLink, 3);
            _os.write(strProdLink, 4);
            _os.write(strActLink, 5);
            _os.write(strRankLink, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDyncLink, 1, false);
            _is.read(strVideoLink, 2, false);
            _is.read(strLiveLink, 3, false);
            _is.read(strProdLink, 4, false);
            _is.read(strActLink, 5, false);
            _is.read(strRankLink, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDyncLink,"strDyncLink");
            _ds.display(strVideoLink,"strVideoLink");
            _ds.display(strLiveLink,"strLiveLink");
            _ds.display(strProdLink,"strProdLink");
            _ds.display(strActLink,"strActLink");
            _ds.display(strRankLink,"strRankLink");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDyncLink, true);
            _ds.displaySimple(strVideoLink, true);
            _ds.displaySimple(strLiveLink, true);
            _ds.displaySimple(strProdLink, true);
            _ds.displaySimple(strActLink, true);
            _ds.displaySimple(strRankLink, false);
            return _os;
        }
    public:
        std::string strDyncLink;
        std::string strVideoLink;
        std::string strLiveLink;
        std::string strProdLink;
        std::string strActLink;
        std::string strRankLink;
    };
    inline bool operator==(const FanTuanStarRankLink&l, const FanTuanStarRankLink&r)
    {
        return l.strDyncLink == r.strDyncLink && l.strVideoLink == r.strVideoLink && l.strLiveLink == r.strLiveLink && l.strProdLink == r.strProdLink && l.strActLink == r.strActLink && l.strRankLink == r.strRankLink;
    }
    inline bool operator!=(const FanTuanStarRankLink&l, const FanTuanStarRankLink&r)
    {
        return !(l == r);
    }

    struct FanTuanStarRankInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanStarRankInfoRsp";
        }
        static string MD5()
        {
            return "037c378fada1ae135159d3c7febaefa8";
        }
        FanTuanStarRankInfoRsp()
        :iErrCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(stCurDetailInfo, 3);
            _os.write(stBackGoundScore, 4);
            _os.write(stRankLink, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(stCurDetailInfo, 3, false);
            _is.read(stBackGoundScore, 4, false);
            _is.read(stRankLink, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stCurDetailInfo,"stCurDetailInfo");
            _ds.display(stBackGoundScore,"stBackGoundScore");
            _ds.display(stRankLink,"stRankLink");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stCurDetailInfo, true);
            _ds.displaySimple(stBackGoundScore, true);
            _ds.displaySimple(stRankLink, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        CFtReadPro::FanTuanDetailInfo stCurDetailInfo;
        CFtReadPro::FanTuanScoreInfo stBackGoundScore;
        CFtReadPro::FanTuanStarRankLink stRankLink;
    };
    inline bool operator==(const FanTuanStarRankInfoRsp&l, const FanTuanStarRankInfoRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.stCurDetailInfo == r.stCurDetailInfo && l.stBackGoundScore == r.stBackGoundScore && l.stRankLink == r.stRankLink;
    }
    inline bool operator!=(const FanTuanStarRankInfoRsp&l, const FanTuanStarRankInfoRsp&r)
    {
        return !(l == r);
    }

    struct stFTStarCommingInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.stFTStarCommingInfo";
        }
        static string MD5()
        {
            return "73557893636d231ed7351cc72a6accfc";
        }
        stFTStarCommingInfo()
        :dwVersion(0),bTips(0),strImageUrl(""),strTitle(""),cid(""),vid(""),pid(""),strUrl(""),dwStartTime(0),dwEndTime(0)
        {
        }
        void resetDefautlt()
        {
            dwVersion = 0;
            bTips = 0;
            strImageUrl = "";
            strTitle = "";
            cid = "";
            vid = "";
            pid = "";
            strUrl = "";
            dwStartTime = 0;
            dwEndTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwVersion, 1);
            _os.write(bTips, 2);
            _os.write(strImageUrl, 3);
            _os.write(strTitle, 4);
            _os.write(cid, 5);
            _os.write(vid, 6);
            _os.write(pid, 7);
            _os.write(strUrl, 8);
            _os.write(dwStartTime, 9);
            _os.write(dwEndTime, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwVersion, 1, false);
            _is.read(bTips, 2, false);
            _is.read(strImageUrl, 3, false);
            _is.read(strTitle, 4, false);
            _is.read(cid, 5, false);
            _is.read(vid, 6, false);
            _is.read(pid, 7, false);
            _is.read(strUrl, 8, false);
            _is.read(dwStartTime, 9, false);
            _is.read(dwEndTime, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwVersion,"dwVersion");
            _ds.display(bTips,"bTips");
            _ds.display(strImageUrl,"strImageUrl");
            _ds.display(strTitle,"strTitle");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(pid,"pid");
            _ds.display(strUrl,"strUrl");
            _ds.display(dwStartTime,"dwStartTime");
            _ds.display(dwEndTime,"dwEndTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwVersion, true);
            _ds.displaySimple(bTips, true);
            _ds.displaySimple(strImageUrl, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(strUrl, true);
            _ds.displaySimple(dwStartTime, true);
            _ds.displaySimple(dwEndTime, false);
            return _os;
        }
    public:
        taf::Int64 dwVersion;
        taf::Int32 bTips;
        std::string strImageUrl;
        std::string strTitle;
        std::string cid;
        std::string vid;
        std::string pid;
        std::string strUrl;
        taf::Int64 dwStartTime;
        taf::Int64 dwEndTime;
    };
    inline bool operator==(const stFTStarCommingInfo&l, const stFTStarCommingInfo&r)
    {
        return l.dwVersion == r.dwVersion && l.bTips == r.bTips && l.strImageUrl == r.strImageUrl && l.strTitle == r.strTitle && l.cid == r.cid && l.vid == r.vid && l.pid == r.pid && l.strUrl == r.strUrl && l.dwStartTime == r.dwStartTime && l.dwEndTime == r.dwEndTime;
    }
    inline bool operator!=(const stFTStarCommingInfo&l, const stFTStarCommingInfo&r)
    {
        return !(l == r);
    }

    struct STExclusiveFeedsInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STExclusiveFeedsInfo";
        }
        static string MD5()
        {
            return "fdcfbcd64c681dcbac9778811fb6c291";
        }
        STExclusiveFeedsInfo()
        :ddwShowTime(0),dwType(0),dwSourceId(0),strTitle(""),strSubTitle(""),strContent(""),strCid(""),strLinkURL(""),ddwExclMid(0)
        {
        }
        void resetDefautlt()
        {
            ddwShowTime = 0;
            dwType = 0;
            dwSourceId = 0;
            strTitle = "";
            strSubTitle = "";
            strContent = "";
            strCid = "";
            strLinkURL = "";
            ddwExclMid = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwShowTime, 1);
            _os.write(vecFantuanDetail, 2);
            _os.write(dwType, 3);
            _os.write(dwSourceId, 4);
            _os.write(strTitle, 5);
            _os.write(strSubTitle, 6);
            _os.write(vecPicUrl, 7);
            _os.write(shareItem, 8);
            _os.write(strContent, 9);
            _os.write(stVideoInfo, 10);
            _os.write(strCid, 11);
            _os.write(stLiveInfo, 12);
            _os.write(stFtMsgInfo, 13);
            _os.write(stFtCommInfo, 14);
            _os.write(vecRecFtIdList, 15);
            _os.write(stFtTourInfo, 16);
            _os.write(strLinkURL, 17);
            _os.write(stStarMsgExtInfo, 18);
            _os.write(ddwExclMid, 19);
            _os.write(stFtVoteInfo, 20);
            _os.write(stStarCommingInfo, 21);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwShowTime, 1, false);
            _is.read(vecFantuanDetail, 2, false);
            _is.read(dwType, 3, false);
            _is.read(dwSourceId, 4, false);
            _is.read(strTitle, 5, false);
            _is.read(strSubTitle, 6, false);
            _is.read(vecPicUrl, 7, false);
            _is.read(shareItem, 8, false);
            _is.read(strContent, 9, false);
            _is.read(stVideoInfo, 10, false);
            _is.read(strCid, 11, false);
            _is.read(stLiveInfo, 12, false);
            _is.read(stFtMsgInfo, 13, false);
            _is.read(stFtCommInfo, 14, false);
            _is.read(vecRecFtIdList, 15, false);
            _is.read(stFtTourInfo, 16, false);
            _is.read(strLinkURL, 17, false);
            _is.read(stStarMsgExtInfo, 18, false);
            _is.read(ddwExclMid, 19, false);
            _is.read(stFtVoteInfo, 20, false);
            _is.read(stStarCommingInfo, 21, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwShowTime,"ddwShowTime");
            _ds.display(vecFantuanDetail,"vecFantuanDetail");
            _ds.display(dwType,"dwType");
            _ds.display(dwSourceId,"dwSourceId");
            _ds.display(strTitle,"strTitle");
            _ds.display(strSubTitle,"strSubTitle");
            _ds.display(vecPicUrl,"vecPicUrl");
            _ds.display(shareItem,"shareItem");
            _ds.display(strContent,"strContent");
            _ds.display(stVideoInfo,"stVideoInfo");
            _ds.display(strCid,"strCid");
            _ds.display(stLiveInfo,"stLiveInfo");
            _ds.display(stFtMsgInfo,"stFtMsgInfo");
            _ds.display(stFtCommInfo,"stFtCommInfo");
            _ds.display(vecRecFtIdList,"vecRecFtIdList");
            _ds.display(stFtTourInfo,"stFtTourInfo");
            _ds.display(strLinkURL,"strLinkURL");
            _ds.display(stStarMsgExtInfo,"stStarMsgExtInfo");
            _ds.display(ddwExclMid,"ddwExclMid");
            _ds.display(stFtVoteInfo,"stFtVoteInfo");
            _ds.display(stStarCommingInfo,"stStarCommingInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwShowTime, true);
            _ds.displaySimple(vecFantuanDetail, true);
            _ds.displaySimple(dwType, true);
            _ds.displaySimple(dwSourceId, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(strSubTitle, true);
            _ds.displaySimple(vecPicUrl, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(stVideoInfo, true);
            _ds.displaySimple(strCid, true);
            _ds.displaySimple(stLiveInfo, true);
            _ds.displaySimple(stFtMsgInfo, true);
            _ds.displaySimple(stFtCommInfo, true);
            _ds.displaySimple(vecRecFtIdList, true);
            _ds.displaySimple(stFtTourInfo, true);
            _ds.displaySimple(strLinkURL, true);
            _ds.displaySimple(stStarMsgExtInfo, true);
            _ds.displaySimple(ddwExclMid, true);
            _ds.displaySimple(stFtVoteInfo, true);
            _ds.displaySimple(stStarCommingInfo, false);
            return _os;
        }
    public:
        taf::Int64 ddwShowTime;
        vector<CFtReadPro::FanTuanDetailInfo> vecFantuanDetail;
        taf::UInt32 dwType;
        taf::UInt32 dwSourceId;
        std::string strTitle;
        std::string strSubTitle;
        vector<std::string> vecPicUrl;
        CFtReadPro::STFtShareItem shareItem;
        std::string strContent;
        CFtReadPro::FanTuanLongVideoInfo stVideoInfo;
        std::string strCid;
        CFtReadPro::STFTLiveInfo stLiveInfo;
        CFtReadPro::FanTuanMsgInfo stFtMsgInfo;
        CFtReadPro::FanTuanMsgInfo stFtCommInfo;
        vector<taf::Int32> vecRecFtIdList;
        CFtReadPro::STFTTourInfo stFtTourInfo;
        std::string strLinkURL;
        CFtReadPro::FanTuanStarMsgExtendInfo stStarMsgExtInfo;
        taf::Int64 ddwExclMid;
        CFtReadPro::STFTVoteInfo stFtVoteInfo;
        CFtReadPro::stFTStarCommingInfo stStarCommingInfo;
    };
    inline bool operator==(const STExclusiveFeedsInfo&l, const STExclusiveFeedsInfo&r)
    {
        return l.ddwShowTime == r.ddwShowTime && l.vecFantuanDetail == r.vecFantuanDetail && l.dwType == r.dwType && l.dwSourceId == r.dwSourceId && l.strTitle == r.strTitle && l.strSubTitle == r.strSubTitle && l.vecPicUrl == r.vecPicUrl && l.shareItem == r.shareItem && l.strContent == r.strContent && l.stVideoInfo == r.stVideoInfo && l.strCid == r.strCid && l.stLiveInfo == r.stLiveInfo && l.stFtMsgInfo == r.stFtMsgInfo && l.stFtCommInfo == r.stFtCommInfo && l.vecRecFtIdList == r.vecRecFtIdList && l.stFtTourInfo == r.stFtTourInfo && l.strLinkURL == r.strLinkURL && l.stStarMsgExtInfo == r.stStarMsgExtInfo && l.ddwExclMid == r.ddwExclMid && l.stFtVoteInfo == r.stFtVoteInfo && l.stStarCommingInfo == r.stStarCommingInfo;
    }
    inline bool operator!=(const STExclusiveFeedsInfo&l, const STExclusiveFeedsInfo&r)
    {
        return !(l == r);
    }

    struct STExclusiveFeedsReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STExclusiveFeedsReq";
        }
        static string MD5()
        {
            return "a13cd6de8162637eed6572f567dc5833";
        }
        STExclusiveFeedsReq()
        :dwType(0),pageContext(""),dwReqNum(0)
        {
        }
        void resetDefautlt()
        {
            dwType = 0;
            pageContext = "";
            dwReqNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwType, 1);
            _os.write(pageContext, 2);
            _os.write(dwReqNum, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwType, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(dwReqNum, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwType,"dwType");
            _ds.display(pageContext,"pageContext");
            _ds.display(dwReqNum,"dwReqNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwType, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(dwReqNum, false);
            return _os;
        }
    public:
        taf::UInt32 dwType;
        std::string pageContext;
        taf::UInt32 dwReqNum;
    };
    inline bool operator==(const STExclusiveFeedsReq&l, const STExclusiveFeedsReq&r)
    {
        return l.dwType == r.dwType && l.pageContext == r.pageContext && l.dwReqNum == r.dwReqNum;
    }
    inline bool operator!=(const STExclusiveFeedsReq&l, const STExclusiveFeedsReq&r)
    {
        return !(l == r);
    }

    struct STExclusiveFeedsResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STExclusiveFeedsResp";
        }
        static string MD5()
        {
            return "cd175ca37031fd7c072920be6a7c7b22";
        }
        STExclusiveFeedsResp()
        :iErrCode(0),strErrMsg(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(pageContext, 3);
            _os.write(vecLiveInfo, 4);
            _os.write(vecExclusiveList, 5);
            _os.write(mapFtDetailInfo, 6);
            _os.write(starEnterInfo, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(vecLiveInfo, 4, false);
            _is.read(vecExclusiveList, 5, false);
            _is.read(mapFtDetailInfo, 6, false);
            _is.read(starEnterInfo, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(pageContext,"pageContext");
            _ds.display(vecLiveInfo,"vecLiveInfo");
            _ds.display(vecExclusiveList,"vecExclusiveList");
            _ds.display(mapFtDetailInfo,"mapFtDetailInfo");
            _ds.display(starEnterInfo,"starEnterInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(vecLiveInfo, true);
            _ds.displaySimple(vecExclusiveList, true);
            _ds.displaySimple(mapFtDetailInfo, true);
            _ds.displaySimple(starEnterInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        std::string pageContext;
        vector<CFtReadPro::STFTLiveInfo> vecLiveInfo;
        vector<CFtReadPro::STExclusiveFeedsInfo> vecExclusiveList;
        map<taf::UInt32, CFtReadPro::FanTuanDetailInfo> mapFtDetailInfo;
        CFtReadPro::STExclusiveFeedsInfo starEnterInfo;
    };
    inline bool operator==(const STExclusiveFeedsResp&l, const STExclusiveFeedsResp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.pageContext == r.pageContext && l.vecLiveInfo == r.vecLiveInfo && l.vecExclusiveList == r.vecExclusiveList && l.mapFtDetailInfo == r.mapFtDetailInfo && l.starEnterInfo == r.starEnterInfo;
    }
    inline bool operator!=(const STExclusiveFeedsResp&l, const STExclusiveFeedsResp&r)
    {
        return !(l == r);
    }

    struct STFTTourTab : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STFTTourTab";
        }
        static string MD5()
        {
            return "4939d8b23021c88f29bd89b6f7192958";
        }
        STFTTourTab()
        :dwStartTime(0),dwEndTime(0)
        {
        }
        void resetDefautlt()
        {
            dwStartTime = 0;
            dwEndTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwStartTime, 1);
            _os.write(dwEndTime, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwStartTime, 1, false);
            _is.read(dwEndTime, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwStartTime,"dwStartTime");
            _ds.display(dwEndTime,"dwEndTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwStartTime, true);
            _ds.displaySimple(dwEndTime, false);
            return _os;
        }
    public:
        taf::UInt32 dwStartTime;
        taf::UInt32 dwEndTime;
    };
    inline bool operator==(const STFTTourTab&l, const STFTTourTab&r)
    {
        return l.dwStartTime == r.dwStartTime && l.dwEndTime == r.dwEndTime;
    }
    inline bool operator!=(const STFTTourTab&l, const STFTTourTab&r)
    {
        return !(l == r);
    }

    struct STStarDyncFeedsReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STStarDyncFeedsReq";
        }
        static string MD5()
        {
            return "d1458206eeb755ee198e651e70d2f85e";
        }
        STStarDyncFeedsReq()
        :dwFanTuanId(0),dwSourceId(0),pageContext(""),dwReqNum(0),ddwUserId(0),bNewReq(true)
        {
        }
        void resetDefautlt()
        {
            dwFanTuanId = 0;
            dwSourceId = 0;
            pageContext = "";
            dwReqNum = 0;
            ddwUserId = 0;
            bNewReq = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwFanTuanId, 0);
            _os.write(dwSourceId, 1);
            _os.write(pageContext, 2);
            _os.write(dwReqNum, 3);
            _os.write(ddwUserId, 4);
            _os.write(bNewReq, 5);
            _os.write(stTourTab, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwFanTuanId, 0, false);
            _is.read(dwSourceId, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(dwReqNum, 3, false);
            _is.read(ddwUserId, 4, false);
            _is.read(bNewReq, 5, false);
            _is.read(stTourTab, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwFanTuanId,"dwFanTuanId");
            _ds.display(dwSourceId,"dwSourceId");
            _ds.display(pageContext,"pageContext");
            _ds.display(dwReqNum,"dwReqNum");
            _ds.display(ddwUserId,"ddwUserId");
            _ds.display(bNewReq,"bNewReq");
            _ds.display(stTourTab,"stTourTab");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwFanTuanId, true);
            _ds.displaySimple(dwSourceId, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(dwReqNum, true);
            _ds.displaySimple(ddwUserId, true);
            _ds.displaySimple(bNewReq, true);
            _ds.displaySimple(stTourTab, false);
            return _os;
        }
    public:
        taf::UInt32 dwFanTuanId;
        taf::UInt32 dwSourceId;
        std::string pageContext;
        taf::UInt32 dwReqNum;
        taf::Int64 ddwUserId;
        taf::Bool bNewReq;
        CFtReadPro::STFTTourTab stTourTab;
    };
    inline bool operator==(const STStarDyncFeedsReq&l, const STStarDyncFeedsReq&r)
    {
        return l.dwFanTuanId == r.dwFanTuanId && l.dwSourceId == r.dwSourceId && l.pageContext == r.pageContext && l.dwReqNum == r.dwReqNum && l.ddwUserId == r.ddwUserId && l.bNewReq == r.bNewReq && l.stTourTab == r.stTourTab;
    }
    inline bool operator!=(const STStarDyncFeedsReq&l, const STStarDyncFeedsReq&r)
    {
        return !(l == r);
    }

    struct STStarDyncFeedsResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STStarDyncFeedsResp";
        }
        static string MD5()
        {
            return "fdb19ab7308fec783d84378418367220";
        }
        STStarDyncFeedsResp()
        :iErrCode(0),strErrMsg(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(pageContext, 3);
            _os.write(vecExclusiveList, 4);
            _os.write(stFanTuanDetailInfo, 5);
            _os.write(vecFtTourInfo, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(vecExclusiveList, 4, false);
            _is.read(stFanTuanDetailInfo, 5, false);
            _is.read(vecFtTourInfo, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(pageContext,"pageContext");
            _ds.display(vecExclusiveList,"vecExclusiveList");
            _ds.display(stFanTuanDetailInfo,"stFanTuanDetailInfo");
            _ds.display(vecFtTourInfo,"vecFtTourInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(vecExclusiveList, true);
            _ds.displaySimple(stFanTuanDetailInfo, true);
            _ds.displaySimple(vecFtTourInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        std::string pageContext;
        vector<CFtReadPro::STExclusiveFeedsInfo> vecExclusiveList;
        CFtReadPro::FanTuanDetailInfo stFanTuanDetailInfo;
        vector<CFtReadPro::STFTTourInfo> vecFtTourInfo;
    };
    inline bool operator==(const STStarDyncFeedsResp&l, const STStarDyncFeedsResp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.pageContext == r.pageContext && l.vecExclusiveList == r.vecExclusiveList && l.stFanTuanDetailInfo == r.stFanTuanDetailInfo && l.vecFtTourInfo == r.vecFtTourInfo;
    }
    inline bool operator!=(const STStarDyncFeedsResp&l, const STStarDyncFeedsResp&r)
    {
        return !(l == r);
    }

    struct STTourTabReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STTourTabReq";
        }
        static string MD5()
        {
            return "256dddf7d3f47a709b126d25e34aac44";
        }
        STTourTabReq()
        :dwFanTuanId(0)
        {
        }
        void resetDefautlt()
        {
            dwFanTuanId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwFanTuanId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwFanTuanId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwFanTuanId,"dwFanTuanId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwFanTuanId, false);
            return _os;
        }
    public:
        taf::UInt32 dwFanTuanId;
    };
    inline bool operator==(const STTourTabReq&l, const STTourTabReq&r)
    {
        return l.dwFanTuanId == r.dwFanTuanId;
    }
    inline bool operator!=(const STTourTabReq&l, const STTourTabReq&r)
    {
        return !(l == r);
    }

    struct STTourTabResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STTourTabResp";
        }
        static string MD5()
        {
            return "7be7b799ec75ab00c9c75942786d1868";
        }
        STTourTabResp()
        :iErrCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(vecTabInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 1, true);
            _is.read(strErrMsg, 2, false);
            _is.read(vecTabInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecTabInfo,"vecTabInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecTabInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::STFTTourTab> vecTabInfo;
    };
    inline bool operator==(const STTourTabResp&l, const STTourTabResp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecTabInfo == r.vecTabInfo;
    }
    inline bool operator!=(const STTourTabResp&l, const STTourTabResp&r)
    {
        return !(l == r);
    }

    struct STFTGetFocusReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STFTGetFocusReq";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        STFTGetFocusReq()
        :strId("")
        {
        }
        void resetDefautlt()
        {
            strId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strId,"strId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strId, false);
            return _os;
        }
    public:
        std::string strId;
    };
    inline bool operator==(const STFTGetFocusReq&l, const STFTGetFocusReq&r)
    {
        return l.strId == r.strId;
    }
    inline bool operator!=(const STFTGetFocusReq&l, const STFTGetFocusReq&r)
    {
        return !(l == r);
    }

    struct STFTGetFocusRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STFTGetFocusRsp";
        }
        static string MD5()
        {
            return "f290e063ddff133e2d6b3f8ecec811a8";
        }
        STFTGetFocusRsp()
        :iErrCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecFocusInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(vecFocusInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFocusInfo,"vecFocusInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFocusInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::stFTFocusInfo> vecFocusInfo;
    };
    inline bool operator==(const STFTGetFocusRsp&l, const STFTGetFocusRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecFocusInfo == r.vecFocusInfo;
    }
    inline bool operator!=(const STFTGetFocusRsp&l, const STFTGetFocusRsp&r)
    {
        return !(l == r);
    }

    struct STFTFollowInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.STFTFollowInfo";
        }
        static string MD5()
        {
            return "bcdab25845af3d13d13a3ffa45b256bd";
        }
        STFTFollowInfo()
        :ddwFtId(0),dwFollwTime(0)
        {
        }
        void resetDefautlt()
        {
            ddwFtId = 0;
            dwFollwTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwFtId, 0);
            _os.write(dwFollwTime, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwFtId, 0, true);
            _is.read(dwFollwTime, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwFtId,"ddwFtId");
            _ds.display(dwFollwTime,"dwFollwTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwFtId, true);
            _ds.displaySimple(dwFollwTime, false);
            return _os;
        }
    public:
        taf::Int64 ddwFtId;
        taf::Int32 dwFollwTime;
    };
    inline bool operator==(const STFTFollowInfo&l, const STFTFollowInfo&r)
    {
        return l.ddwFtId == r.ddwFtId && l.dwFollwTime == r.dwFollwTime;
    }
    inline bool operator!=(const STFTFollowInfo&l, const STFTFollowInfo&r)
    {
        return !(l == r);
    }

    struct FanTuanMyAllFTReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanMyAllFTReq";
        }
        static string MD5()
        {
            return "30853d491657732e3ce21e7054b66b97";
        }
        FanTuanMyAllFTReq()
        :ddwUserId(0),iOption(0),iOrder(0)
        {
        }
        void resetDefautlt()
        {
            ddwUserId = 0;
            iOption = 0;
            iOrder = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwUserId, 0);
            _os.write(iOption, 1);
            _os.write(iOrder, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwUserId, 0, true);
            _is.read(iOption, 1, false);
            _is.read(iOrder, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwUserId,"ddwUserId");
            _ds.display(iOption,"iOption");
            _ds.display(iOrder,"iOrder");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwUserId, true);
            _ds.displaySimple(iOption, true);
            _ds.displaySimple(iOrder, false);
            return _os;
        }
    public:
        taf::Int64 ddwUserId;
        taf::Int32 iOption;
        taf::Int32 iOrder;
    };
    inline bool operator==(const FanTuanMyAllFTReq&l, const FanTuanMyAllFTReq&r)
    {
        return l.ddwUserId == r.ddwUserId && l.iOption == r.iOption && l.iOrder == r.iOrder;
    }
    inline bool operator!=(const FanTuanMyAllFTReq&l, const FanTuanMyAllFTReq&r)
    {
        return !(l == r);
    }

    struct FanTuanMyAllFTRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FanTuanMyAllFTRsp";
        }
        static string MD5()
        {
            return "538db489cf32cb25b94725bf3b489e76";
        }
        FanTuanMyAllFTRsp()
        :iErrCode(0),strErrMsg(""),iFollowCount(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
            iFollowCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecMyFtList, 2);
            _os.write(iFollowCount, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(vecMyFtList, 2, false);
            _is.read(iFollowCount, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecMyFtList,"vecMyFtList");
            _ds.display(iFollowCount,"iFollowCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecMyFtList, true);
            _ds.displaySimple(iFollowCount, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        vector<CFtReadPro::STFTFollowInfo> vecMyFtList;
        taf::Int32 iFollowCount;
    };
    inline bool operator==(const FanTuanMyAllFTRsp&l, const FanTuanMyAllFTRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.vecMyFtList == r.vecMyFtList && l.iFollowCount == r.iFollowCount;
    }
    inline bool operator!=(const FanTuanMyAllFTRsp&l, const FanTuanMyAllFTRsp&r)
    {
        return !(l == r);
    }

    struct FtImageInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FtImageInfo";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        FtImageInfo()
        :strHeadImg(""),strBackImg(""),strColorImg("")
        {
        }
        void resetDefautlt()
        {
            strHeadImg = "";
            strBackImg = "";
            strColorImg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strHeadImg, 0);
            _os.write(strBackImg, 1);
            _os.write(strColorImg, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strHeadImg, 0, false);
            _is.read(strBackImg, 1, false);
            _is.read(strColorImg, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strHeadImg,"strHeadImg");
            _ds.display(strBackImg,"strBackImg");
            _ds.display(strColorImg,"strColorImg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strHeadImg, true);
            _ds.displaySimple(strBackImg, true);
            _ds.displaySimple(strColorImg, false);
            return _os;
        }
    public:
        std::string strHeadImg;
        std::string strBackImg;
        std::string strColorImg;
    };
    inline bool operator==(const FtImageInfo&l, const FtImageInfo&r)
    {
        return l.strHeadImg == r.strHeadImg && l.strBackImg == r.strBackImg && l.strColorImg == r.strColorImg;
    }
    inline bool operator!=(const FtImageInfo&l, const FtImageInfo&r)
    {
        return !(l == r);
    }

    struct VideoFtInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.VideoFtInfo";
        }
        static string MD5()
        {
            return "a5c9019ea89f626dc426a978258ff1f1";
        }
        VideoFtInfo()
        :strLids(""),strCids(""),strKeyWords(""),strLabel(""),dwStatus(0)
        {
        }
        void resetDefautlt()
        {
            strLids = "";
            strCids = "";
            strKeyWords = "";
            strLabel = "";
            dwStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strLids, 0);
            _os.write(strCids, 1);
            _os.write(strKeyWords, 2);
            _os.write(strLabel, 3);
            _os.write(dwStatus, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strLids, 0, false);
            _is.read(strCids, 1, false);
            _is.read(strKeyWords, 2, false);
            _is.read(strLabel, 3, false);
            _is.read(dwStatus, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strLids,"strLids");
            _ds.display(strCids,"strCids");
            _ds.display(strKeyWords,"strKeyWords");
            _ds.display(strLabel,"strLabel");
            _ds.display(dwStatus,"dwStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strLids, true);
            _ds.displaySimple(strCids, true);
            _ds.displaySimple(strKeyWords, true);
            _ds.displaySimple(strLabel, true);
            _ds.displaySimple(dwStatus, false);
            return _os;
        }
    public:
        std::string strLids;
        std::string strCids;
        std::string strKeyWords;
        std::string strLabel;
        taf::Int32 dwStatus;
    };
    inline bool operator==(const VideoFtInfo&l, const VideoFtInfo&r)
    {
        return l.strLids == r.strLids && l.strCids == r.strCids && l.strKeyWords == r.strKeyWords && l.strLabel == r.strLabel && l.dwStatus == r.dwStatus;
    }
    inline bool operator!=(const VideoFtInfo&l, const VideoFtInfo&r)
    {
        return !(l == r);
    }

    struct FtBaseInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.FtBaseInfo";
        }
        static string MD5()
        {
            return "ea82b50f723dacc59ed93a6e2fd57677";
        }
        FtBaseInfo()
        :ddwFtId(0),ddwStarId(0),dwCategory(0),strName(""),ddwFansNum(0),dwDelFalg(0),dwType(0)
        {
        }
        void resetDefautlt()
        {
            ddwFtId = 0;
            ddwStarId = 0;
            dwCategory = 0;
            strName = "";
            ddwFansNum = 0;
            dwDelFalg = 0;
            dwType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwFtId, 0);
            _os.write(ddwStarId, 1);
            _os.write(dwCategory, 2);
            _os.write(stFtImageInfo, 3);
            _os.write(strName, 4);
            _os.write(ddwFansNum, 5);
            _os.write(stVideoFtInfo, 6);
            _os.write(dwDelFalg, 7);
            _os.write(dwType, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwFtId, 0, true);
            _is.read(ddwStarId, 1, false);
            _is.read(dwCategory, 2, true);
            _is.read(stFtImageInfo, 3, false);
            _is.read(strName, 4, false);
            _is.read(ddwFansNum, 5, false);
            _is.read(stVideoFtInfo, 6, false);
            _is.read(dwDelFalg, 7, false);
            _is.read(dwType, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwFtId,"ddwFtId");
            _ds.display(ddwStarId,"ddwStarId");
            _ds.display(dwCategory,"dwCategory");
            _ds.display(stFtImageInfo,"stFtImageInfo");
            _ds.display(strName,"strName");
            _ds.display(ddwFansNum,"ddwFansNum");
            _ds.display(stVideoFtInfo,"stVideoFtInfo");
            _ds.display(dwDelFalg,"dwDelFalg");
            _ds.display(dwType,"dwType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwFtId, true);
            _ds.displaySimple(ddwStarId, true);
            _ds.displaySimple(dwCategory, true);
            _ds.displaySimple(stFtImageInfo, true);
            _ds.displaySimple(strName, true);
            _ds.displaySimple(ddwFansNum, true);
            _ds.displaySimple(stVideoFtInfo, true);
            _ds.displaySimple(dwDelFalg, true);
            _ds.displaySimple(dwType, false);
            return _os;
        }
    public:
        taf::Int64 ddwFtId;
        taf::Int64 ddwStarId;
        taf::Int32 dwCategory;
        CFtReadPro::FtImageInfo stFtImageInfo;
        std::string strName;
        taf::Int64 ddwFansNum;
        CFtReadPro::VideoFtInfo stVideoFtInfo;
        taf::Int32 dwDelFalg;
        taf::Int32 dwType;
    };
    inline bool operator==(const FtBaseInfo&l, const FtBaseInfo&r)
    {
        return l.ddwFtId == r.ddwFtId && l.ddwStarId == r.ddwStarId && l.dwCategory == r.dwCategory && l.stFtImageInfo == r.stFtImageInfo && l.strName == r.strName && l.ddwFansNum == r.ddwFansNum && l.stVideoFtInfo == r.stVideoFtInfo && l.dwDelFalg == r.dwDelFalg && l.dwType == r.dwType;
    }
    inline bool operator!=(const FtBaseInfo&l, const FtBaseInfo&r)
    {
        return !(l == r);
    }

    struct GetFtBaseInfoReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.GetFtBaseInfoReq";
        }
        static string MD5()
        {
            return "99dfcb196c9e99ea934372574238ec97";
        }
        GetFtBaseInfoReq()
        :dwFlag(0)
        {
        }
        void resetDefautlt()
        {
            dwFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vecFtId, 0);
            _os.write(dwFlag, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vecFtId, 0, true);
            _is.read(dwFlag, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vecFtId,"vecFtId");
            _ds.display(dwFlag,"dwFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vecFtId, true);
            _ds.displaySimple(dwFlag, false);
            return _os;
        }
    public:
        vector<taf::Int64> vecFtId;
        taf::Int32 dwFlag;
    };
    inline bool operator==(const GetFtBaseInfoReq&l, const GetFtBaseInfoReq&r)
    {
        return l.vecFtId == r.vecFtId && l.dwFlag == r.dwFlag;
    }
    inline bool operator!=(const GetFtBaseInfoReq&l, const GetFtBaseInfoReq&r)
    {
        return !(l == r);
    }

    struct GetFtBaseInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CFtReadPro.GetFtBaseInfoRsp";
        }
        static string MD5()
        {
            return "4911103608e8a2ec7ed2c21eb0b5cc0a";
        }
        GetFtBaseInfoRsp()
        :iErrCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(mapFtBaseInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(mapFtBaseInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(mapFtBaseInfo,"mapFtBaseInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(mapFtBaseInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
        map<taf::Int64, CFtReadPro::FtBaseInfo> mapFtBaseInfo;
    };
    inline bool operator==(const GetFtBaseInfoRsp&l, const GetFtBaseInfoRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg && l.mapFtBaseInfo == r.mapFtBaseInfo;
    }
    inline bool operator!=(const GetFtBaseInfoRsp&l, const GetFtBaseInfoRsp&r)
    {
        return !(l == r);
    }


}

#define CFtReadPro_FanTuanImageInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwPlayTime,b.dwPlayTime);jce_copy_struct(a.strImageUrl,b.strImageUrl);jce_copy_struct(a.strWaterFlagUrl,b.strWaterFlagUrl);jce_copy_struct(a.strHandWriteInfo,b.strHandWriteInfo);jce_copy_struct(a.iWidth,b.iWidth);jce_copy_struct(a.iHeight,b.iHeight);jce_copy_struct(a.cImageType,b.cImageType);

#define CFtReadPro_FanTuanShortVideoInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strVid,b.strVid);jce_copy_struct(a.strH5Url,b.strH5Url);jce_copy_struct(a.dwPlayTime,b.dwPlayTime);jce_copy_struct(a.strImageUrl,b.strImageUrl);jce_copy_struct(a.strPlayUrl,b.strPlayUrl);jce_copy_struct(a.strDesc,b.strDesc);jce_copy_struct(a.bIsDemoVideo,b.bIsDemoVideo);

#define CFtReadPro_STFtShareItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.shareUrl,b.shareUrl);jce_copy_struct(a.shareTitle,b.shareTitle);jce_copy_struct(a.shareSubTitle,b.shareSubTitle);jce_copy_struct(a.shareImgUrl,b.shareImgUrl);jce_copy_struct(a.circleShareKey,b.circleShareKey);

#define CFtReadPro_STFtVideoAttentItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.attentKey,b.attentKey);

#define CFtReadPro_FanTuanLongVideoInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strVid,b.strVid);jce_copy_struct(a.dwPlayTime,b.dwPlayTime);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.strImageUrl,b.strImageUrl);jce_copy_struct(a.strPlayUrl,b.strPlayUrl);jce_copy_struct(a.strPlayRight,b.strPlayRight);jce_copy_struct(a.strSecondTitle,b.strSecondTitle);jce_copy_struct(a.cFromFlag,b.cFromFlag);jce_copy_struct(a.stFtShareItem,b.stFtShareItem);jce_copy_struct(a.strDefn,b.strDefn);jce_copy_struct(a.stFtAttentItem,b.stFtAttentItem);jce_copy_struct(a.ddwPlayCount,b.ddwPlayCount);

#define CFtReadPro_FanTuanLiveInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwPid,b.dwPid);jce_copy_struct(a.cPidType,b.cPidType);

#define CFtReadPro_FanTuanUserInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwUserId,b.ddwUserId);jce_copy_struct(a.strAccount,b.strAccount);jce_copy_struct(a.sThirdLogin,b.sThirdLogin);jce_copy_struct(a.sAccoutType,b.sAccoutType);jce_copy_struct(a.strNick,b.strNick);jce_copy_struct(a.strHead,b.strHead);jce_copy_struct(a.strRegion,b.strRegion);jce_copy_struct(a.sGender,b.sGender);jce_copy_struct(a.lRegisterTime,b.lRegisterTime);jce_copy_struct(a.lCoralUserid,b.lCoralUserid);jce_copy_struct(a.sCheckStatus,b.sCheckStatus);jce_copy_struct(a.ddwMeal,b.ddwMeal);jce_copy_struct(a.ddwPostNum,b.ddwPostNum);jce_copy_struct(a.ddwDeletePostNum,b.ddwDeletePostNum);jce_copy_struct(a.ddwCommentNum,b.ddwCommentNum);jce_copy_struct(a.ddwDeleteCommentNum,b.ddwDeleteCommentNum);jce_copy_struct(a.ddwCommentedNum,b.ddwCommentedNum);jce_copy_struct(a.ddwUpedNum,b.ddwUpedNum);jce_copy_struct(a.strLable,b.strLable);jce_copy_struct(a.sLevel,b.sLevel);

#define CFtReadPro_FanTuanScoreInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.strStarScore,b.strStarScore);jce_copy_struct(a.ddwVideoView,b.ddwVideoView);jce_copy_struct(a.ddwNewView,b.ddwNewView);jce_copy_struct(a.ddwAttNum,b.ddwAttNum);jce_copy_struct(a.ddwActNum,b.ddwActNum);jce_copy_struct(a.ddwLiveNum,b.ddwLiveNum);jce_copy_struct(a.dwLastRank,b.dwLastRank);jce_copy_struct(a.dwCurRank,b.dwCurRank);jce_copy_struct(a.strTopScore,b.strTopScore);

#define CFtReadPro_CircleMsgImageUrl_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strUrl,b.strUrl);jce_copy_struct(a.strThumbUrl,b.strThumbUrl);jce_copy_struct(a.ddwTime,b.ddwTime);

#define CFtReadPro_CircleCommentFeed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strFeedId,b.strFeedId);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.ddwTime,b.ddwTime);jce_copy_struct(a.parentCommentId,b.parentCommentId);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.strActorName,b.strActorName);jce_copy_struct(a.strFaceImageUrl,b.strFaceImageUrl);jce_copy_struct(a.userType,b.userType);

#define CFtReadPro_CircleVoiceFeed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strVoiceId,b.strVoiceId);jce_copy_struct(a.dwDuration,b.dwDuration);jce_copy_struct(a.bPermanent,b.bPermanent);jce_copy_struct(a.storageFlag,b.storageFlag);

#define CFtReadPro_stFTFocusInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.pic,b.pic);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.url,b.url);jce_copy_struct(a.feedid,b.feedid);jce_copy_struct(a.topicid,b.topicid);

#define CFtReadPro_FanTuanMsgUserInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cUserType,b.cUserType);jce_copy_struct(a.strHead,b.strHead);jce_copy_struct(a.strNick,b.strNick);jce_copy_struct(a.strStarId,b.strStarId);jce_copy_struct(a.strFtId,b.strFtId);

#define CFtReadPro_ReportInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bucketId,b.bucketId);jce_copy_struct(a.algId,b.algId);jce_copy_struct(a.reasonType,b.reasonType);jce_copy_struct(a.reason,b.reason);jce_copy_struct(a.strategyId,b.strategyId);jce_copy_struct(a.dwSeqNum,b.dwSeqNum);

#define CFtReadPro_STFTLiveInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strPid,b.strPid);jce_copy_struct(a.ddwStartTime,b.ddwStartTime);jce_copy_struct(a.ddwEndTime,b.ddwEndTime);jce_copy_struct(a.ddwBookCount,b.ddwBookCount);jce_copy_struct(a.ddwViewCount,b.ddwViewCount);jce_copy_struct(a.strImgtag,b.strImgtag);jce_copy_struct(a.stFtAttentItem,b.stFtAttentItem);jce_copy_struct(a.dwPlayStatus,b.dwPlayStatus);jce_copy_struct(a.vecFantuanId,b.vecFantuanId);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.strCoverUrl,b.strCoverUrl);jce_copy_struct(a.strLiveType,b.strLiveType);jce_copy_struct(a.streamStyle,b.streamStyle);

#define CFtReadPro_STFTSourceInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.posterUrl,b.posterUrl);jce_copy_struct(a.attentInfo,b.attentInfo);

#define CFtReadPro_FTArticleInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strArticleId,b.strArticleId);jce_copy_struct(a.strArticleTitle,b.strArticleTitle);jce_copy_struct(a.strIntroduction,b.strIntroduction);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.strMediaId,b.strMediaId);jce_copy_struct(a.strMediaName,b.strMediaName);jce_copy_struct(a.strMediaIcon,b.strMediaIcon);

#define CFtReadPro_FanTuanMsgComm_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.strLable,b.strLable);jce_copy_struct(a.vecImageList,b.vecImageList);jce_copy_struct(a.vecShortVideoList,b.vecShortVideoList);jce_copy_struct(a.vecLongVideoList,b.vecLongVideoList);jce_copy_struct(a.strJumpUrl,b.strJumpUrl);jce_copy_struct(a.strVoteId,b.strVoteId);jce_copy_struct(a.strCid,b.strCid);jce_copy_struct(a.stLiveInfo,b.stLiveInfo);jce_copy_struct(a.stVideoSrc,b.stVideoSrc);jce_copy_struct(a.stArticleInfo,b.stArticleInfo);

#define CFtReadPro_FanTuanMsgInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwMsgId,b.ddwMsgId);jce_copy_struct(a.ddwUserId,b.ddwUserId);jce_copy_struct(a.dwPubTime,b.dwPubTime);jce_copy_struct(a.dwMsgType,b.dwMsgType);jce_copy_struct(a.dwStatus,b.dwStatus);jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.dwUpNum,b.dwUpNum);jce_copy_struct(a.dwCommentNum,b.dwCommentNum);jce_copy_struct(a.dwFloorNum,b.dwFloorNum);jce_copy_struct(a.stFtMsgComm,b.stFtMsgComm);jce_copy_struct(a.ddwParentMsgId,b.ddwParentMsgId);jce_copy_struct(a.ddwParentUserId,b.ddwParentUserId);jce_copy_struct(a.ddwRootMsgId,b.ddwRootMsgId);jce_copy_struct(a.ddwRootUserId,b.ddwRootUserId);jce_copy_struct(a.dwMsgFlags,b.dwMsgFlags);jce_copy_struct(a.dwOpFlags,b.dwOpFlags);jce_copy_struct(a.dwInFloorNum,b.dwInFloorNum);jce_copy_struct(a.dwLastCmtTime,b.dwLastCmtTime);jce_copy_struct(a.cFeedType,b.cFeedType);jce_copy_struct(a.dwIncreaseId,b.dwIncreaseId);jce_copy_struct(a.stReportInfo,b.stReportInfo);jce_copy_struct(a.stUserInfo,b.stUserInfo);jce_copy_struct(a.isLike,b.isLike);jce_copy_struct(a.vecRelFantuanId,b.vecRelFantuanId);jce_copy_struct(a.ddwReadCnt,b.ddwReadCnt);

#define CFtReadPro_STFTTourInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.ddwActTime,b.ddwActTime);jce_copy_struct(a.strAction,b.strAction);jce_copy_struct(a.strTourPic,b.strTourPic);jce_copy_struct(a.dwSerial,b.dwSerial);

#define CFtReadPro_FanTuanStarMsgExtendInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stVideoAttentItem,b.stVideoAttentItem);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.ddwTime,b.ddwTime);jce_copy_struct(a.strVideoTitle,b.strVideoTitle);jce_copy_struct(a.dwFollowCount,b.dwFollowCount);jce_copy_struct(a.dwLikeCount,b.dwLikeCount);jce_copy_struct(a.stPhotos,b.stPhotos);jce_copy_struct(a.stComments,b.stComments);jce_copy_struct(a.strActUrl,b.strActUrl);jce_copy_struct(a.stShortVideo,b.stShortVideo);jce_copy_struct(a.strFeedId,b.strFeedId);jce_copy_struct(a.strCoverUrl,b.strCoverUrl);jce_copy_struct(a.dwCommentCount,b.dwCommentCount);jce_copy_struct(a.stVoices,b.stVoices);jce_copy_struct(a.ddwCacheTime,b.ddwCacheTime);jce_copy_struct(a.isLike,b.isLike);

#define CFtReadPro_STFTVoteInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strVoteId,b.strVoteId);jce_copy_struct(a.ddwVoteNum,b.ddwVoteNum);

#define CFtReadPro_STLatesFeedsInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwShowTime,b.ddwShowTime);jce_copy_struct(a.dwType,b.dwType);jce_copy_struct(a.dwSourceId,b.dwSourceId);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.strSubTitle,b.strSubTitle);jce_copy_struct(a.vecPicUrl,b.vecPicUrl);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.stVideoInfo,b.stVideoInfo);jce_copy_struct(a.strCid,b.strCid);jce_copy_struct(a.stLiveInfo,b.stLiveInfo);jce_copy_struct(a.stFtMsgInfo,b.stFtMsgInfo);jce_copy_struct(a.stFtCommInfo,b.stFtCommInfo);jce_copy_struct(a.vecRecFtIdList,b.vecRecFtIdList);jce_copy_struct(a.stFtTourInfo,b.stFtTourInfo);jce_copy_struct(a.strLinkURL,b.strLinkURL);jce_copy_struct(a.stStarMsgExtInfo,b.stStarMsgExtInfo);jce_copy_struct(a.ddwExclMid,b.ddwExclMid);jce_copy_struct(a.stFtVoteInfo,b.stFtVoteInfo);

#define CFtReadPro_FanTuanDetailInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.strStarAccount,b.strStarAccount);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.strSubTitle,b.strSubTitle);jce_copy_struct(a.strDesc,b.strDesc);jce_copy_struct(a.strinFansNick,b.strinFansNick);jce_copy_struct(a.strBanner,b.strBanner);jce_copy_struct(a.strAppBanner,b.strAppBanner);jce_copy_struct(a.strAppBannerBack,b.strAppBannerBack);jce_copy_struct(a.strHeader,b.strHeader);jce_copy_struct(a.strAppHeader,b.strAppHeader);jce_copy_struct(a.vecRelativeList,b.vecRelativeList);jce_copy_struct(a.vecRelativeStar,b.vecRelativeStar);jce_copy_struct(a.ddwPostNum,b.ddwPostNum);jce_copy_struct(a.ddwFanNum,b.ddwFanNum);jce_copy_struct(a.ddwMealNum,b.ddwMealNum);jce_copy_struct(a.dwRank,b.dwRank);jce_copy_struct(a.strRankName,b.strRankName);jce_copy_struct(a.vecLeader,b.vecLeader);jce_copy_struct(a.vecFuLeader,b.vecFuLeader);jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.iPubStatus,b.iPubStatus);jce_copy_struct(a.dwTargetid,b.dwTargetid);jce_copy_struct(a.bAttention,b.bAttention);jce_copy_struct(a.stFanTuanScoreInfo,b.stFanTuanScoreInfo);jce_copy_struct(a.dwUpdateNum,b.dwUpdateNum);jce_copy_struct(a.dwVuid,b.dwVuid);jce_copy_struct(a.latestDyncFeeds,b.latestDyncFeeds);jce_copy_struct(a.cDokiType,b.cDokiType);jce_copy_struct(a.strCidList,b.strCidList);jce_copy_struct(a.strLidList,b.strLidList);jce_copy_struct(a.strUpdateTxt,b.strUpdateTxt);jce_copy_struct(a.strSeriesId,b.strSeriesId);jce_copy_struct(a.strSeriesTitle,b.strSeriesTitle);jce_copy_struct(a.ctype,b.ctype);jce_copy_struct(a.positive_trailer,b.positive_trailer);

#define CFtReadPro_FanTuanUserInFTInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwUserId,b.ddwUserId);jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.cStatus,b.cStatus);jce_copy_struct(a.cSignToday,b.cSignToday);jce_copy_struct(a.dwSignCnt,b.dwSignCnt);jce_copy_struct(a.dwIdentityFlags,b.dwIdentityFlags);jce_copy_struct(a.dwAuthFlags,b.dwAuthFlags);jce_copy_struct(a.dwRank,b.dwRank);jce_copy_struct(a.dwMealNum,b.dwMealNum);

#define CFtReadPro_FanTuanRankMenu_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwTime,b.dwTime);jce_copy_struct(a.cWeekNum,b.cWeekNum);jce_copy_struct(a.strTitle,b.strTitle);

#define CFtReadPro_FanTuanMyFTReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwUserId,b.ddwUserId);jce_copy_struct(a.wPageFlags,b.wPageFlags);jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.strWeight,b.strWeight);jce_copy_struct(a.iFlag,b.iFlag);

#define CFtReadPro_FanTuanMyFTRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecMyFtList,b.vecMyFtList);jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strWeight,b.strWeight);

#define CFtReadPro_FanTuanMyPostReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwUserId,b.ddwUserId);jce_copy_struct(a.wPageFlags,b.wPageFlags);jce_copy_struct(a.ddwPostId,b.ddwPostId);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.strWeight,b.strWeight);

#define CFtReadPro_FanTuanMyPostRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFtMsgInfo,b.vecFtMsgInfo);jce_copy_struct(a.mapFtDetailInfo,b.mapFtDetailInfo);jce_copy_struct(a.ddwPostId,b.ddwPostId);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strWeight,b.strWeight);

#define CFtReadPro_FanTuanMyCommentReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwUserId,b.ddwUserId);jce_copy_struct(a.wPageFlags,b.wPageFlags);jce_copy_struct(a.ddwCommentId,b.ddwCommentId);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.strWeight,b.strWeight);

#define CFtReadPro_FanTuanMyCommentRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFtMsgInfo,b.vecFtMsgInfo);jce_copy_struct(a.mapFtUserInfo,b.mapFtUserInfo);jce_copy_struct(a.mapFtDetailInfo,b.mapFtDetailInfo);jce_copy_struct(a.mapFtCommentParentInfo,b.mapFtCommentParentInfo);jce_copy_struct(a.ddwCommentId,b.ddwCommentId);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strWeight,b.strWeight);

#define CFtReadPro_FanTuanUnReadMsgCountReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwUserId,b.ddwUserId);jce_copy_struct(a.ddwMsgId,b.ddwMsgId);jce_copy_struct(a.strLastSeqId,b.strLastSeqId);

#define CFtReadPro_FanTuanUnReadMsgCountRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.dwUnReadMsgNum,b.dwUnReadMsgNum);jce_copy_struct(a.vecFtUserInfo,b.vecFtUserInfo);

#define CFtReadPro_FanTuanMsgListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwUserId,b.ddwUserId);jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.wPageFlags,b.wPageFlags);jce_copy_struct(a.ddwMsgId,b.ddwMsgId);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.strWeight,b.strWeight);jce_copy_struct(a.strLastSeqId,b.strLastSeqId);

#define CFtReadPro_FanTuanMsgListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFtMsgInfo,b.vecFtMsgInfo);jce_copy_struct(a.mapFtUserInfo,b.mapFtUserInfo);jce_copy_struct(a.mapFtDetailInfo,b.mapFtDetailInfo);jce_copy_struct(a.mapFtCommentParentInfo,b.mapFtCommentParentInfo);jce_copy_struct(a.ddwMsgId,b.ddwMsgId);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strWeight,b.strWeight);jce_copy_struct(a.strLastSeqId,b.strLastSeqId);

#define CFtReadPro_FantuanPostListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.wPageFlags,b.wPageFlags);jce_copy_struct(a.ddwPostId,b.ddwPostId);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.strWeight,b.strWeight);jce_copy_struct(a.cDetailFlag,b.cDetailFlag);

#define CFtReadPro_FantuanPostListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFtMsgInfo,b.vecFtMsgInfo);jce_copy_struct(a.mapFtUserInfo,b.mapFtUserInfo);jce_copy_struct(a.ddwPostId,b.ddwPostId);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strWeight,b.strWeight);jce_copy_struct(a.mapFtDetailInfo,b.mapFtDetailInfo);

#define CFtReadPro_FantuanHotPostListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.wPageFlags,b.wPageFlags);jce_copy_struct(a.ddwPostId,b.ddwPostId);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.strWeight,b.strWeight);

#define CFtReadPro_FantuanHotPostListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFtMsgInfo,b.vecFtMsgInfo);jce_copy_struct(a.mapFtDetailInfo,b.mapFtDetailInfo);jce_copy_struct(a.ddwPostId,b.ddwPostId);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strWeight,b.strWeight);jce_copy_struct(a.mapFtUserInfo,b.mapFtUserInfo);

#define CFtReadPro_FantuanTopicListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.wPageFlags,b.wPageFlags);jce_copy_struct(a.ddwPostId,b.ddwPostId);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.strWeight,b.strWeight);

#define CFtReadPro_FantuanTopicListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFtMsgInfo,b.vecFtMsgInfo);jce_copy_struct(a.mapFtDetailInfo,b.mapFtDetailInfo);jce_copy_struct(a.ddwPostId,b.ddwPostId);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strWeight,b.strWeight);jce_copy_struct(a.mapFtUserInfo,b.mapFtUserInfo);

#define CFtReadPro_FantuanTopNewsListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.wPageFlags,b.wPageFlags);jce_copy_struct(a.ddwPostId,b.ddwPostId);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.strWeight,b.strWeight);

#define CFtReadPro_FantuanTopNewsListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFtMsgInfo,b.vecFtMsgInfo);jce_copy_struct(a.mapFtDetailInfo,b.mapFtDetailInfo);jce_copy_struct(a.ddwPostId,b.ddwPostId);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strWeight,b.strWeight);jce_copy_struct(a.mapFtUserInfo,b.mapFtUserInfo);

#define CFtReadPro_FanTuanPostDetailReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwPostId,b.ddwPostId);jce_copy_struct(a.wPageFlags,b.wPageFlags);jce_copy_struct(a.ddwCommentId,b.ddwCommentId);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.strWeight,b.strWeight);jce_copy_struct(a.dwCurPages,b.dwCurPages);jce_copy_struct(a.cType,b.cType);

#define CFtReadPro_FanTuanPostDetailRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stFtMsgInfo,b.stFtMsgInfo);jce_copy_struct(a.vecFtMsgInfo,b.vecFtMsgInfo);jce_copy_struct(a.mapFtUserInfo,b.mapFtUserInfo);jce_copy_struct(a.mapFtCommentParentInfo,b.mapFtCommentParentInfo);jce_copy_struct(a.mapFtDetailInfo,b.mapFtDetailInfo);jce_copy_struct(a.ddwCommentId,b.ddwCommentId);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strWeight,b.strWeight);jce_copy_struct(a.dwPageNum,b.dwPageNum);

#define CFtReadPro_FanTuanUserInFTInfoReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwUserId,b.ddwUserId);jce_copy_struct(a.vecFtIdList,b.vecFtIdList);jce_copy_struct(a.dwDataType,b.dwDataType);

#define CFtReadPro_FanTuanUserInFTInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFtUserInFtInfo,b.vecFtUserInFtInfo);jce_copy_struct(a.mapFtUserInfo,b.mapFtUserInfo);

#define CFtReadPro_FanTuanRankMenuReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cRankType,b.cRankType);jce_copy_struct(a.wPageFlags,b.wPageFlags);jce_copy_struct(a.dwTime,b.dwTime);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.strWeight,b.strWeight);

#define CFtReadPro_FanTuanRankMenuRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFtRankMenuList,b.vecFtRankMenuList);jce_copy_struct(a.dwTime,b.dwTime);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strWeight,b.strWeight);

#define CFtReadPro_FanTuanRankReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cRankType,b.cRankType);jce_copy_struct(a.dwTime,b.dwTime);jce_copy_struct(a.wPageFlags,b.wPageFlags);jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.strWeight,b.strWeight);jce_copy_struct(a.cDetailFlag,b.cDetailFlag);

#define CFtReadPro_FanTuanRankRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.mapFtRankList,b.mapFtRankList);jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strWeight,b.strWeight);jce_copy_struct(a.mapRankPicUrl,b.mapRankPicUrl);

#define CFtReadPro_FanTuanFansRankReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.wPageFlags,b.wPageFlags);jce_copy_struct(a.ddwUserId,b.ddwUserId);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.strWeight,b.strWeight);

#define CFtReadPro_FanTuanFansRankRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFtUserInFtInfo,b.vecFtUserInFtInfo);jce_copy_struct(a.mapFtUserInfo,b.mapFtUserInfo);jce_copy_struct(a.ddwUserId,b.ddwUserId);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strWeight,b.strWeight);jce_copy_struct(a.ddwTotal,b.ddwTotal);

#define CFtReadPro_FanTuanDetailReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);

#define CFtReadPro_FanTuanDetailRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stFtDetailInfo,b.stFtDetailInfo);

#define CFtReadPro_FanTuanHotFtReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.strWeight,b.strWeight);

#define CFtReadPro_FanTuanHotFtRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFtDetailInfo,b.vecFtDetailInfo);jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strWeight,b.strWeight);

#define CFtReadPro_FanTuanFtFansReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.ddwUserid,b.ddwUserid);jce_copy_struct(a.strWeight,b.strWeight);

#define CFtReadPro_FanTuanFtFansRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFtUserInfo,b.vecFtUserInfo);jce_copy_struct(a.ddwUserid,b.ddwUserid);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strWeight,b.strWeight);

#define CFtReadPro_FanTuanRecPostListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwUserId,b.ddwUserId);jce_copy_struct(a.wPageFlags,b.wPageFlags);jce_copy_struct(a.ddwPostId,b.ddwPostId);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.strWeight,b.strWeight);jce_copy_struct(a.strOldWeight,b.strOldWeight);

#define CFtReadPro_FanTuanRecPostListResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFtMsgInfo,b.vecFtMsgInfo);jce_copy_struct(a.mapFtUserInfo,b.mapFtUserInfo);jce_copy_struct(a.ddwPostId,b.ddwPostId);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);jce_copy_struct(a.strWeight,b.strWeight);jce_copy_struct(a.mapFtDetailInfo,b.mapFtDetailInfo);jce_copy_struct(a.vecFtUserInFtInfo,b.vecFtUserInFtInfo);jce_copy_struct(a.vecDaBangFtDetailInfo,b.vecDaBangFtDetailInfo);jce_copy_struct(a.strOldWeight,b.strOldWeight);

#define CFtReadPro_STRecCacheData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vecFtRecPostList,b.vecFtRecPostList);

#define CFtReadPro_FanTuanRTimeRecPostReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwUserId,b.ddwUserId);jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.vecShortVidList,b.vecShortVidList);jce_copy_struct(a.cFeedType,b.cFeedType);jce_copy_struct(a.strOldWeight,b.strOldWeight);jce_copy_struct(a.dwIncreaseId,b.dwIncreaseId);

#define CFtReadPro_FanTuanRTimeRecPostResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.mapFtMsgInfo,b.mapFtMsgInfo);jce_copy_struct(a.mapFtDetailInfo,b.mapFtDetailInfo);

#define CFtReadPro_STRecCacheIndexData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwTimestamp,b.dwTimestamp);jce_copy_struct(a.stFtMsgInfo,b.stFtMsgInfo);jce_copy_struct(a.vecDaBangFtDetailInfo,b.vecDaBangFtDetailInfo);

#define CFtReadPro_FanTuanStarRankMenuReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cRankType,b.cRankType);jce_copy_struct(a.wPageFlags,b.wPageFlags);jce_copy_struct(a.cTimeType,b.cTimeType);jce_copy_struct(a.dwTime,b.dwTime);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.dwPage,b.dwPage);

#define CFtReadPro_FanTuanStarRankMenuRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.mapFtStarRankInfo,b.mapFtStarRankInfo);jce_copy_struct(a.dwTime,b.dwTime);jce_copy_struct(a.dwPeri,b.dwPeri);jce_copy_struct(a.bHasNextPage,b.bHasNextPage);

#define CFtReadPro_FanTuanStarHistRankReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cReqNum,b.cReqNum);

#define CFtReadPro_FanTuanStarHistRankRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecStartTime,b.vecStartTime);

#define CFtReadPro_FanTuanStarRankInfoReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.dwTime,b.dwTime);jce_copy_struct(a.cTimeType,b.cTimeType);jce_copy_struct(a.dwStarId,b.dwStarId);jce_copy_struct(a.bFrom,b.bFrom);

#define CFtReadPro_FanTuanStarRankLink_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDyncLink,b.strDyncLink);jce_copy_struct(a.strVideoLink,b.strVideoLink);jce_copy_struct(a.strLiveLink,b.strLiveLink);jce_copy_struct(a.strProdLink,b.strProdLink);jce_copy_struct(a.strActLink,b.strActLink);jce_copy_struct(a.strRankLink,b.strRankLink);

#define CFtReadPro_FanTuanStarRankInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stCurDetailInfo,b.stCurDetailInfo);jce_copy_struct(a.stBackGoundScore,b.stBackGoundScore);jce_copy_struct(a.stRankLink,b.stRankLink);

#define CFtReadPro_stFTStarCommingInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwVersion,b.dwVersion);jce_copy_struct(a.bTips,b.bTips);jce_copy_struct(a.strImageUrl,b.strImageUrl);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.strUrl,b.strUrl);jce_copy_struct(a.dwStartTime,b.dwStartTime);jce_copy_struct(a.dwEndTime,b.dwEndTime);

#define CFtReadPro_STExclusiveFeedsInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwShowTime,b.ddwShowTime);jce_copy_struct(a.vecFantuanDetail,b.vecFantuanDetail);jce_copy_struct(a.dwType,b.dwType);jce_copy_struct(a.dwSourceId,b.dwSourceId);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.strSubTitle,b.strSubTitle);jce_copy_struct(a.vecPicUrl,b.vecPicUrl);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.stVideoInfo,b.stVideoInfo);jce_copy_struct(a.strCid,b.strCid);jce_copy_struct(a.stLiveInfo,b.stLiveInfo);jce_copy_struct(a.stFtMsgInfo,b.stFtMsgInfo);jce_copy_struct(a.stFtCommInfo,b.stFtCommInfo);jce_copy_struct(a.vecRecFtIdList,b.vecRecFtIdList);jce_copy_struct(a.stFtTourInfo,b.stFtTourInfo);jce_copy_struct(a.strLinkURL,b.strLinkURL);jce_copy_struct(a.stStarMsgExtInfo,b.stStarMsgExtInfo);jce_copy_struct(a.ddwExclMid,b.ddwExclMid);jce_copy_struct(a.stFtVoteInfo,b.stFtVoteInfo);jce_copy_struct(a.stStarCommingInfo,b.stStarCommingInfo);

#define CFtReadPro_STExclusiveFeedsReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwType,b.dwType);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.dwReqNum,b.dwReqNum);

#define CFtReadPro_STExclusiveFeedsResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.vecLiveInfo,b.vecLiveInfo);jce_copy_struct(a.vecExclusiveList,b.vecExclusiveList);jce_copy_struct(a.mapFtDetailInfo,b.mapFtDetailInfo);jce_copy_struct(a.starEnterInfo,b.starEnterInfo);

#define CFtReadPro_STFTTourTab_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwStartTime,b.dwStartTime);jce_copy_struct(a.dwEndTime,b.dwEndTime);

#define CFtReadPro_STStarDyncFeedsReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);jce_copy_struct(a.dwSourceId,b.dwSourceId);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.dwReqNum,b.dwReqNum);jce_copy_struct(a.ddwUserId,b.ddwUserId);jce_copy_struct(a.bNewReq,b.bNewReq);jce_copy_struct(a.stTourTab,b.stTourTab);

#define CFtReadPro_STStarDyncFeedsResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.vecExclusiveList,b.vecExclusiveList);jce_copy_struct(a.stFanTuanDetailInfo,b.stFanTuanDetailInfo);jce_copy_struct(a.vecFtTourInfo,b.vecFtTourInfo);

#define CFtReadPro_STTourTabReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwFanTuanId,b.dwFanTuanId);

#define CFtReadPro_STTourTabResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecTabInfo,b.vecTabInfo);

#define CFtReadPro_STFTGetFocusReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strId,b.strId);

#define CFtReadPro_STFTGetFocusRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFocusInfo,b.vecFocusInfo);

#define CFtReadPro_STFTFollowInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwFtId,b.ddwFtId);jce_copy_struct(a.dwFollwTime,b.dwFollwTime);

#define CFtReadPro_FanTuanMyAllFTReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwUserId,b.ddwUserId);jce_copy_struct(a.iOption,b.iOption);jce_copy_struct(a.iOrder,b.iOrder);

#define CFtReadPro_FanTuanMyAllFTRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecMyFtList,b.vecMyFtList);jce_copy_struct(a.iFollowCount,b.iFollowCount);

#define CFtReadPro_FtImageInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strHeadImg,b.strHeadImg);jce_copy_struct(a.strBackImg,b.strBackImg);jce_copy_struct(a.strColorImg,b.strColorImg);

#define CFtReadPro_VideoFtInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strLids,b.strLids);jce_copy_struct(a.strCids,b.strCids);jce_copy_struct(a.strKeyWords,b.strKeyWords);jce_copy_struct(a.strLabel,b.strLabel);jce_copy_struct(a.dwStatus,b.dwStatus);

#define CFtReadPro_FtBaseInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwFtId,b.ddwFtId);jce_copy_struct(a.ddwStarId,b.ddwStarId);jce_copy_struct(a.dwCategory,b.dwCategory);jce_copy_struct(a.stFtImageInfo,b.stFtImageInfo);jce_copy_struct(a.strName,b.strName);jce_copy_struct(a.ddwFansNum,b.ddwFansNum);jce_copy_struct(a.stVideoFtInfo,b.stVideoFtInfo);jce_copy_struct(a.dwDelFalg,b.dwDelFalg);jce_copy_struct(a.dwType,b.dwType);

#define CFtReadPro_GetFtBaseInfoReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vecFtId,b.vecFtId);jce_copy_struct(a.dwFlag,b.dwFlag);

#define CFtReadPro_GetFtBaseInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.mapFtBaseInfo,b.mapFtBaseInfo);



#endif
