// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_cutvideo.jce'
// **********************************************************************

#ifndef __QQVIDEO_CUTVIDEO_H_
#define __QQVIDEO_CUTVIDEO_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace cutvideo
{
    struct VideoGraffity : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "cutvideo.VideoGraffity";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        VideoGraffity()
        :type(0),content("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            content = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(content, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(content, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(content,"content");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(content, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string content;
    };
    inline bool operator==(const VideoGraffity&l, const VideoGraffity&r)
    {
        return l.type == r.type && l.content == r.content;
    }
    inline bool operator!=(const VideoGraffity&l, const VideoGraffity&r)
    {
        return !(l == r);
    }

    struct VideoSplitRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "cutvideo.VideoSplitRequest";
        }
        static string MD5()
        {
            return "96f5b854fb25188de906eab9e9e1cbbb";
        }
        VideoSplitRequest()
        :vid(""),startMs(0),endMs(0),defn(0),script(""),cid(""),pid(""),zid(""),columnId(""),title(""),subtitle(""),miniVid(""),splitType(0)
        {
        }
        void resetDefautlt()
        {
            vid = "";
            startMs = 0;
            endMs = 0;
            defn = 0;
            script = "";
            cid = "";
            pid = "";
            zid = "";
            columnId = "";
            title = "";
            subtitle = "";
            miniVid = "";
            splitType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(startMs, 1);
            _os.write(endMs, 2);
            _os.write(defn, 3);
            _os.write(graffiti, 4);
            _os.write(script, 5);
            _os.write(cid, 6);
            _os.write(pid, 7);
            _os.write(zid, 8);
            _os.write(columnId, 9);
            _os.write(title, 10);
            _os.write(subtitle, 11);
            _os.write(miniVid, 12);
            _os.write(splitType, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, true);
            _is.read(startMs, 1, true);
            _is.read(endMs, 2, true);
            _is.read(defn, 3, false);
            _is.read(graffiti, 4, false);
            _is.read(script, 5, false);
            _is.read(cid, 6, false);
            _is.read(pid, 7, false);
            _is.read(zid, 8, false);
            _is.read(columnId, 9, false);
            _is.read(title, 10, false);
            _is.read(subtitle, 11, false);
            _is.read(miniVid, 12, false);
            _is.read(splitType, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(startMs,"startMs");
            _ds.display(endMs,"endMs");
            _ds.display(defn,"defn");
            _ds.display(graffiti,"graffiti");
            _ds.display(script,"script");
            _ds.display(cid,"cid");
            _ds.display(pid,"pid");
            _ds.display(zid,"zid");
            _ds.display(columnId,"columnId");
            _ds.display(title,"title");
            _ds.display(subtitle,"subtitle");
            _ds.display(miniVid,"miniVid");
            _ds.display(splitType,"splitType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(startMs, true);
            _ds.displaySimple(endMs, true);
            _ds.displaySimple(defn, true);
            _ds.displaySimple(graffiti, true);
            _ds.displaySimple(script, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(zid, true);
            _ds.displaySimple(columnId, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subtitle, true);
            _ds.displaySimple(miniVid, true);
            _ds.displaySimple(splitType, false);
            return _os;
        }
    public:
        std::string vid;
        taf::Int32 startMs;
        taf::Int32 endMs;
        taf::Int32 defn;
        map<std::string, cutvideo::VideoGraffity> graffiti;
        std::string script;
        std::string cid;
        std::string pid;
        std::string zid;
        std::string columnId;
        std::string title;
        std::string subtitle;
        std::string miniVid;
        taf::Int32 splitType;
    };
    inline bool operator==(const VideoSplitRequest&l, const VideoSplitRequest&r)
    {
        return l.vid == r.vid && l.startMs == r.startMs && l.endMs == r.endMs && l.defn == r.defn && l.graffiti == r.graffiti && l.script == r.script && l.cid == r.cid && l.pid == r.pid && l.zid == r.zid && l.columnId == r.columnId && l.title == r.title && l.subtitle == r.subtitle && l.miniVid == r.miniVid && l.splitType == r.splitType;
    }
    inline bool operator!=(const VideoSplitRequest&l, const VideoSplitRequest&r)
    {
        return !(l == r);
    }

    struct VideoSplitGif : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "cutvideo.VideoSplitGif";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        VideoSplitGif()
        :miniVid(""),thumbnailUrl(""),gifUrl("")
        {
        }
        void resetDefautlt()
        {
            miniVid = "";
            thumbnailUrl = "";
            gifUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(miniVid, 0);
            _os.write(thumbnailUrl, 1);
            _os.write(gifUrl, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(miniVid, 0, false);
            _is.read(thumbnailUrl, 1, false);
            _is.read(gifUrl, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(miniVid,"miniVid");
            _ds.display(thumbnailUrl,"thumbnailUrl");
            _ds.display(gifUrl,"gifUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(miniVid, true);
            _ds.displaySimple(thumbnailUrl, true);
            _ds.displaySimple(gifUrl, false);
            return _os;
        }
    public:
        std::string miniVid;
        std::string thumbnailUrl;
        std::string gifUrl;
    };
    inline bool operator==(const VideoSplitGif&l, const VideoSplitGif&r)
    {
        return l.miniVid == r.miniVid && l.thumbnailUrl == r.thumbnailUrl && l.gifUrl == r.gifUrl;
    }
    inline bool operator!=(const VideoSplitGif&l, const VideoSplitGif&r)
    {
        return !(l == r);
    }

    struct VideoSplitResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "cutvideo.VideoSplitResponse";
        }
        static string MD5()
        {
            return "f4729a9f5337e4cc722f18d764856069";
        }
        VideoSplitResponse()
        :errCode(0),msg(""),vid(""),h5Url(""),imageUrl(""),time(0),playUrl(""),description(""),title(""),subtitle(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            msg = "";
            vid = "";
            h5Url = "";
            imageUrl = "";
            time = 0;
            playUrl = "";
            description = "";
            title = "";
            subtitle = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(msg, 1);
            _os.write(vid, 2);
            _os.write(h5Url, 3);
            _os.write(imageUrl, 4);
            _os.write(time, 5);
            _os.write(playUrl, 6);
            _os.write(description, 7);
            _os.write(title, 8);
            _os.write(subtitle, 9);
            _os.write(reportParams, 10);
            _os.write(gifInfo, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(msg, 1, true);
            _is.read(vid, 2, true);
            _is.read(h5Url, 3, true);
            _is.read(imageUrl, 4, true);
            _is.read(time, 5, true);
            _is.read(playUrl, 6, false);
            _is.read(description, 7, false);
            _is.read(title, 8, false);
            _is.read(subtitle, 9, false);
            _is.read(reportParams, 10, false);
            _is.read(gifInfo, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(msg,"msg");
            _ds.display(vid,"vid");
            _ds.display(h5Url,"h5Url");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(time,"time");
            _ds.display(playUrl,"playUrl");
            _ds.display(description,"description");
            _ds.display(title,"title");
            _ds.display(subtitle,"subtitle");
            _ds.display(reportParams,"reportParams");
            _ds.display(gifInfo,"gifInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(msg, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(h5Url, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(playUrl, true);
            _ds.displaySimple(description, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subtitle, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(gifInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string msg;
        std::string vid;
        std::string h5Url;
        std::string imageUrl;
        taf::Int64 time;
        std::string playUrl;
        std::string description;
        std::string title;
        std::string subtitle;
        std::string reportParams;
        cutvideo::VideoSplitGif gifInfo;
    };
    inline bool operator==(const VideoSplitResponse&l, const VideoSplitResponse&r)
    {
        return l.errCode == r.errCode && l.msg == r.msg && l.vid == r.vid && l.h5Url == r.h5Url && l.imageUrl == r.imageUrl && l.time == r.time && l.playUrl == r.playUrl && l.description == r.description && l.title == r.title && l.subtitle == r.subtitle && l.reportParams == r.reportParams && l.gifInfo == r.gifInfo;
    }
    inline bool operator!=(const VideoSplitResponse&l, const VideoSplitResponse&r)
    {
        return !(l == r);
    }


}

#define cutvideo_VideoGraffity_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.content,b.content);

#define cutvideo_VideoSplitRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.startMs,b.startMs);jce_copy_struct(a.endMs,b.endMs);jce_copy_struct(a.defn,b.defn);jce_copy_struct(a.graffiti,b.graffiti);jce_copy_struct(a.script,b.script);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.zid,b.zid);jce_copy_struct(a.columnId,b.columnId);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subtitle,b.subtitle);jce_copy_struct(a.miniVid,b.miniVid);jce_copy_struct(a.splitType,b.splitType);

#define cutvideo_VideoSplitGif_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.miniVid,b.miniVid);jce_copy_struct(a.thumbnailUrl,b.thumbnailUrl);jce_copy_struct(a.gifUrl,b.gifUrl);

#define cutvideo_VideoSplitResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.msg,b.msg);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.h5Url,b.h5Url);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.time,b.time);jce_copy_struct(a.playUrl,b.playUrl);jce_copy_struct(a.description,b.description);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subtitle,b.subtitle);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.gifInfo,b.gifInfo);



#endif
