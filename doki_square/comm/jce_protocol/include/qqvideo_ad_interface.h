// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_ad_interface.jce'
// **********************************************************************

#ifndef __QQVIDEO_AD_INTERFACE_H_
#define __QQVIDEO_AD_INTERFACE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_ad_common.h"


namespace jce
{
    struct AdDetailRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdDetailRequest";
        }
        static string MD5()
        {
            return "6db3dc28145d54cabae89e3b23a34676";
        }
        AdDetailRequest()
        :vid(""),cid(""),lid(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            vid = "";
            cid = "";
            lid = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(cid, 1);
            _os.write(lid, 2);
            _os.write(appContext, 3);
            _os.write(dataMap, 4);
            _os.write(pageContext, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, false);
            _is.read(cid, 1, false);
            _is.read(lid, 2, false);
            _is.read(appContext, 3, false);
            _is.read(dataMap, 4, false);
            _is.read(pageContext, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(cid,"cid");
            _ds.display(lid,"lid");
            _ds.display(appContext,"appContext");
            _ds.display(dataMap,"dataMap");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(appContext, true);
            _ds.displaySimple(dataMap, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string vid;
        std::string cid;
        std::string lid;
        vector<std::string> appContext;
        map<std::string, jce::AdDetailShowSizeInfo> dataMap;
        std::string pageContext;
    };
    inline bool operator==(const AdDetailRequest&l, const AdDetailRequest&r)
    {
        return l.vid == r.vid && l.cid == r.cid && l.lid == r.lid && l.appContext == r.appContext && l.dataMap == r.dataMap && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const AdDetailRequest&l, const AdDetailRequest&r)
    {
        return !(l == r);
    }

    struct AdDetailResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AdDetailResponse";
        }
        static string MD5()
        {
            return "62bfcdfed38f0150cedda6392c4dd1b8";
        }
        AdDetailResponse()
        :errCode(0),pageContext(""),hasNextPage(false)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(dataMap, 1);
            _os.write(appContext, 2);
            _os.write(pageContext, 3);
            _os.write(hasNextPage, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(dataMap, 1, false);
            _is.read(appContext, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(hasNextPage, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(dataMap,"dataMap");
            _ds.display(appContext,"appContext");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(dataMap, true);
            _ds.displaySimple(appContext, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        map<std::string, vector<jce::AdONATempletLine> > dataMap;
        vector<std::string> appContext;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const AdDetailResponse&l, const AdDetailResponse&r)
    {
        return l.errCode == r.errCode && l.dataMap == r.dataMap && l.appContext == r.appContext && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const AdDetailResponse&l, const AdDetailResponse&r)
    {
        return !(l == r);
    }


}

#define jce_AdDetailRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.appContext,b.appContext);jce_copy_struct(a.dataMap,b.dataMap);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_AdDetailResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.dataMap,b.dataMap);jce_copy_struct(a.appContext,b.appContext);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);



#endif
