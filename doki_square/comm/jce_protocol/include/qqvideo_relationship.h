// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_relationship.jce'
// **********************************************************************

#ifndef __QQVIDEO_RELATIONSHIP_H_
#define __QQVIDEO_RELATIONSHIP_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace jce
{
    enum RSCmd
    {
        CMD_GET_RS_LIST = 57685,
        CMD_GET_COMM_RS_LIST = 57686,
        CMD_INSERT_ONE_USER = 57696,
        CMD_UPDATE_UIN_LIST = 57697,
        CMD_ADD_BLACK_LIST = 57698,
    };
    inline string etos(const RSCmd & e)
    {
        switch(e)
        {
            case CMD_GET_RS_LIST: return "CMD_GET_RS_LIST";
            case CMD_GET_COMM_RS_LIST: return "CMD_GET_COMM_RS_LIST";
            case CMD_INSERT_ONE_USER: return "CMD_INSERT_ONE_USER";
            case CMD_UPDATE_UIN_LIST: return "CMD_UPDATE_UIN_LIST";
            case CMD_ADD_BLACK_LIST: return "CMD_ADD_BLACK_LIST";
            default: return "";
        }
    }
    inline int stoe(const string & s, RSCmd & e)
    {
        if(s == "CMD_GET_RS_LIST")  { e=CMD_GET_RS_LIST; return 0;}
        if(s == "CMD_GET_COMM_RS_LIST")  { e=CMD_GET_COMM_RS_LIST; return 0;}
        if(s == "CMD_INSERT_ONE_USER")  { e=CMD_INSERT_ONE_USER; return 0;}
        if(s == "CMD_UPDATE_UIN_LIST")  { e=CMD_UPDATE_UIN_LIST; return 0;}
        if(s == "CMD_ADD_BLACK_LIST")  { e=CMD_ADD_BLACK_LIST; return 0;}

        return -1;
    }

    struct STWxToken : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.STWxToken";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        STWxToken()
        :strOpenId(""),strAccessToken("")
        {
        }
        void resetDefautlt()
        {
            strOpenId = "";
            strAccessToken = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strOpenId, 1);
            _os.write(strAccessToken, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strOpenId, 1, true);
            _is.read(strAccessToken, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strOpenId,"strOpenId");
            _ds.display(strAccessToken,"strAccessToken");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strOpenId, true);
            _ds.displaySimple(strAccessToken, false);
            return _os;
        }
    public:
        std::string strOpenId;
        std::string strAccessToken;
    };
    inline bool operator==(const STWxToken&l, const STWxToken&r)
    {
        return l.strOpenId == r.strOpenId && l.strAccessToken == r.strAccessToken;
    }
    inline bool operator!=(const STWxToken&l, const STWxToken&r)
    {
        return !(l == r);
    }

    struct STPtLoginToken : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.STPtLoginToken";
        }
        static string MD5()
        {
            return "8bbe8250fc379d09106ac34a9c548439";
        }
        STPtLoginToken()
        :ddwUin(0),strSkey(""),dwKeyType(0),dwAppid(0)
        {
        }
        void resetDefautlt()
        {
            ddwUin = 0;
            strSkey = "";
            dwKeyType = 0;
            dwAppid = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwUin, 1);
            _os.write(strSkey, 2);
            _os.write(dwKeyType, 3);
            _os.write(dwAppid, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwUin, 1, true);
            _is.read(strSkey, 2, true);
            _is.read(dwKeyType, 3, true);
            _is.read(dwAppid, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwUin,"ddwUin");
            _ds.display(strSkey,"strSkey");
            _ds.display(dwKeyType,"dwKeyType");
            _ds.display(dwAppid,"dwAppid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwUin, true);
            _ds.displaySimple(strSkey, true);
            _ds.displaySimple(dwKeyType, true);
            _ds.displaySimple(dwAppid, false);
            return _os;
        }
    public:
        taf::Int64 ddwUin;
        std::string strSkey;
        taf::UInt32 dwKeyType;
        taf::UInt32 dwAppid;
    };
    inline bool operator==(const STPtLoginToken&l, const STPtLoginToken&r)
    {
        return l.ddwUin == r.ddwUin && l.strSkey == r.strSkey && l.dwKeyType == r.dwKeyType && l.dwAppid == r.dwAppid;
    }
    inline bool operator!=(const STPtLoginToken&l, const STPtLoginToken&r)
    {
        return !(l == r);
    }

    struct InsertOneUserRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.InsertOneUserRequest";
        }
        static string MD5()
        {
            return "6e092aae284c53ddc8b2cec07cc006c6";
        }
        InsertOneUserRequest()
        :dwVersion(0),dwUserId(0),cFrom(0),cType(0)
        {
        }
        void resetDefautlt()
        {
            dwVersion = 0;
            dwUserId = 0;
            cFrom = 0;
            cType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwVersion, 1);
            _os.write(dwUserId, 2);
            _os.write(cFrom, 3);
            _os.write(cType, 4);
            _os.write(stWxToken, 5);
            _os.write(stPtLoginToken, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwVersion, 1, true);
            _is.read(dwUserId, 2, true);
            _is.read(cFrom, 3, true);
            _is.read(cType, 4, false);
            _is.read(stWxToken, 5, false);
            _is.read(stPtLoginToken, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwVersion,"dwVersion");
            _ds.display(dwUserId,"dwUserId");
            _ds.display(cFrom,"cFrom");
            _ds.display(cType,"cType");
            _ds.display(stWxToken,"stWxToken");
            _ds.display(stPtLoginToken,"stPtLoginToken");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwVersion, true);
            _ds.displaySimple(dwUserId, true);
            _ds.displaySimple(cFrom, true);
            _ds.displaySimple(cType, true);
            _ds.displaySimple(stWxToken, true);
            _ds.displaySimple(stPtLoginToken, false);
            return _os;
        }
    public:
        taf::Int32 dwVersion;
        taf::Int64 dwUserId;
        taf::UInt8 cFrom;
        taf::UInt8 cType;
        jce::STWxToken stWxToken;
        jce::STPtLoginToken stPtLoginToken;
    };
    inline bool operator==(const InsertOneUserRequest&l, const InsertOneUserRequest&r)
    {
        return l.dwVersion == r.dwVersion && l.dwUserId == r.dwUserId && l.cFrom == r.cFrom && l.cType == r.cType && l.stWxToken == r.stWxToken && l.stPtLoginToken == r.stPtLoginToken;
    }
    inline bool operator!=(const InsertOneUserRequest&l, const InsertOneUserRequest&r)
    {
        return !(l == r);
    }

    struct InsertOneUserResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.InsertOneUserResponse";
        }
        static string MD5()
        {
            return "fcbebef4f26b85424d14d8a87ad46ffa";
        }
        InsertOneUserResponse()
        :errCode(0),dwUserId(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            dwUserId = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(dwUserId, 1);
            _os.write(strErrMsg, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(dwUserId, 1, false);
            _is.read(strErrMsg, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(dwUserId,"dwUserId");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(dwUserId, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int64 dwUserId;
        std::string strErrMsg;
    };
    inline bool operator==(const InsertOneUserResponse&l, const InsertOneUserResponse&r)
    {
        return l.errCode == r.errCode && l.dwUserId == r.dwUserId && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const InsertOneUserResponse&l, const InsertOneUserResponse&r)
    {
        return !(l == r);
    }


}

#define jce_STWxToken_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strOpenId,b.strOpenId);jce_copy_struct(a.strAccessToken,b.strAccessToken);

#define jce_STPtLoginToken_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwUin,b.ddwUin);jce_copy_struct(a.strSkey,b.strSkey);jce_copy_struct(a.dwKeyType,b.dwKeyType);jce_copy_struct(a.dwAppid,b.dwAppid);

#define jce_InsertOneUserRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwVersion,b.dwVersion);jce_copy_struct(a.dwUserId,b.dwUserId);jce_copy_struct(a.cFrom,b.cFrom);jce_copy_struct(a.cType,b.cType);jce_copy_struct(a.stWxToken,b.stWxToken);jce_copy_struct(a.stPtLoginToken,b.stPtLoginToken);

#define jce_InsertOneUserResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.dwUserId,b.dwUserId);jce_copy_struct(a.strErrMsg,b.strErrMsg);



#endif
