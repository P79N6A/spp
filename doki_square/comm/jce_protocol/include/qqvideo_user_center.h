// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_user_center.jce'
// **********************************************************************

#ifndef __QQVIDEO_USER_CENTER_H_
#define __QQVIDEO_USER_CENTER_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"


namespace jce
{
    struct UserCenterThirdItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserCenterThirdItem";
        }
        static string MD5()
        {
            return "2ab56abfeed9d445f8cf07317652fe45";
        }
        UserCenterThirdItem()
        :title(""),iconUrl(""),redHotId(""),redHotVersion(0),redHotStatus(true),itemId(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            iconUrl = "";
            redHotId = "";
            redHotVersion = 0;
            redHotStatus = true;
            itemId = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(iconUrl, 1);
            _os.write(action, 2);
            _os.write(redHotId, 3);
            _os.write(redHotVersion, 4);
            _os.write(redHotStatus, 5);
            _os.write(itemId, 6);
            _os.write(reportKey, 7);
            _os.write(reportParams, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(iconUrl, 1, false);
            _is.read(action, 2, false);
            _is.read(redHotId, 3, false);
            _is.read(redHotVersion, 4, false);
            _is.read(redHotStatus, 5, false);
            _is.read(itemId, 6, false);
            _is.read(reportKey, 7, false);
            _is.read(reportParams, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(iconUrl,"iconUrl");
            _ds.display(action,"action");
            _ds.display(redHotId,"redHotId");
            _ds.display(redHotVersion,"redHotVersion");
            _ds.display(redHotStatus,"redHotStatus");
            _ds.display(itemId,"itemId");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(redHotId, true);
            _ds.displaySimple(redHotVersion, true);
            _ds.displaySimple(redHotStatus, true);
            _ds.displaySimple(itemId, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string title;
        std::string iconUrl;
        jce::Action action;
        std::string redHotId;
        taf::Int64 redHotVersion;
        taf::Bool redHotStatus;
        std::string itemId;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const UserCenterThirdItem&l, const UserCenterThirdItem&r)
    {
        return l.title == r.title && l.iconUrl == r.iconUrl && l.action == r.action && l.redHotId == r.redHotId && l.redHotVersion == r.redHotVersion && l.redHotStatus == r.redHotStatus && l.itemId == r.itemId && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const UserCenterThirdItem&l, const UserCenterThirdItem&r)
    {
        return !(l == r);
    }

    struct UserCenterThirdSection : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserCenterThirdSection";
        }
        static string MD5()
        {
            return "91348eb39c162a438251d550b9b624fe";
        }
        UserCenterThirdSection()
        :sectionKey("")
        {
        }
        void resetDefautlt()
        {
            sectionKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sectionKey, 0);
            _os.write(barInfo, 1);
            _os.write(items, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sectionKey, 0, true);
            _is.read(barInfo, 1, false);
            _is.read(items, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sectionKey,"sectionKey");
            _ds.display(barInfo,"barInfo");
            _ds.display(items,"items");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sectionKey, true);
            _ds.displaySimple(barInfo, true);
            _ds.displaySimple(items, false);
            return _os;
        }
    public:
        std::string sectionKey;
        jce::ActionBarInfo barInfo;
        vector<jce::UserCenterThirdItem> items;
    };
    inline bool operator==(const UserCenterThirdSection&l, const UserCenterThirdSection&r)
    {
        return l.sectionKey == r.sectionKey && l.barInfo == r.barInfo && l.items == r.items;
    }
    inline bool operator!=(const UserCenterThirdSection&l, const UserCenterThirdSection&r)
    {
        return !(l == r);
    }

    struct UserCenterInterestItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserCenterInterestItem";
        }
        static string MD5()
        {
            return "995ac6dd781d46d19294cae27dc9a0a2";
        }
        UserCenterInterestItem()
        :title(""),subTitle(""),iconUrl(""),redHotId(""),redHotVersion(0),redHotStatus(true),itemId(""),bgColor(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            subTitle = "";
            iconUrl = "";
            redHotId = "";
            redHotVersion = 0;
            redHotStatus = true;
            itemId = "";
            bgColor = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(subTitle, 1);
            _os.write(iconUrl, 2);
            _os.write(action, 3);
            _os.write(redHotId, 4);
            _os.write(redHotVersion, 5);
            _os.write(redHotStatus, 6);
            _os.write(itemId, 7);
            _os.write(bgColor, 8);
            _os.write(reportKey, 9);
            _os.write(reportParams, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(subTitle, 1, false);
            _is.read(iconUrl, 2, false);
            _is.read(action, 3, false);
            _is.read(redHotId, 4, false);
            _is.read(redHotVersion, 5, false);
            _is.read(redHotStatus, 6, false);
            _is.read(itemId, 7, false);
            _is.read(bgColor, 8, false);
            _is.read(reportKey, 9, false);
            _is.read(reportParams, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(iconUrl,"iconUrl");
            _ds.display(action,"action");
            _ds.display(redHotId,"redHotId");
            _ds.display(redHotVersion,"redHotVersion");
            _ds.display(redHotStatus,"redHotStatus");
            _ds.display(itemId,"itemId");
            _ds.display(bgColor,"bgColor");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(redHotId, true);
            _ds.displaySimple(redHotVersion, true);
            _ds.displaySimple(redHotStatus, true);
            _ds.displaySimple(itemId, true);
            _ds.displaySimple(bgColor, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string title;
        std::string subTitle;
        std::string iconUrl;
        jce::Action action;
        std::string redHotId;
        taf::Int64 redHotVersion;
        taf::Bool redHotStatus;
        std::string itemId;
        std::string bgColor;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const UserCenterInterestItem&l, const UserCenterInterestItem&r)
    {
        return l.title == r.title && l.subTitle == r.subTitle && l.iconUrl == r.iconUrl && l.action == r.action && l.redHotId == r.redHotId && l.redHotVersion == r.redHotVersion && l.redHotStatus == r.redHotStatus && l.itemId == r.itemId && l.bgColor == r.bgColor && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const UserCenterInterestItem&l, const UserCenterInterestItem&r)
    {
        return !(l == r);
    }

    struct UserCenterInterestSection : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserCenterInterestSection";
        }
        static string MD5()
        {
            return "8f5a7ccd46f5fc1c011d62b84a6797c4";
        }
        UserCenterInterestSection()
        :sectionKey("")
        {
        }
        void resetDefautlt()
        {
            sectionKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sectionKey, 0);
            _os.write(barInfo, 1);
            _os.write(items, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sectionKey, 0, true);
            _is.read(barInfo, 1, false);
            _is.read(items, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sectionKey,"sectionKey");
            _ds.display(barInfo,"barInfo");
            _ds.display(items,"items");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sectionKey, true);
            _ds.displaySimple(barInfo, true);
            _ds.displaySimple(items, false);
            return _os;
        }
    public:
        std::string sectionKey;
        jce::ActionBarInfo barInfo;
        vector<jce::UserCenterInterestItem> items;
    };
    inline bool operator==(const UserCenterInterestSection&l, const UserCenterInterestSection&r)
    {
        return l.sectionKey == r.sectionKey && l.barInfo == r.barInfo && l.items == r.items;
    }
    inline bool operator!=(const UserCenterInterestSection&l, const UserCenterInterestSection&r)
    {
        return !(l == r);
    }

    struct VCoinInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VCoinInfo";
        }
        static string MD5()
        {
            return "26f21973f434ae00beab680a78160827";
        }
        VCoinInfo()
        :title(""),iconUrl("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            iconUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(iconUrl, 1);
            _os.write(action, 2);
            _os.write(signInTextMap, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(iconUrl, 1, false);
            _is.read(action, 2, false);
            _is.read(signInTextMap, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(iconUrl,"iconUrl");
            _ds.display(action,"action");
            _ds.display(signInTextMap,"signInTextMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(signInTextMap, false);
            return _os;
        }
    public:
        std::string title;
        std::string iconUrl;
        jce::Action action;
        map<std::string, std::string> signInTextMap;
    };
    inline bool operator==(const VCoinInfo&l, const VCoinInfo&r)
    {
        return l.title == r.title && l.iconUrl == r.iconUrl && l.action == r.action && l.signInTextMap == r.signInTextMap;
    }
    inline bool operator!=(const VCoinInfo&l, const VCoinInfo&r)
    {
        return !(l == r);
    }

    struct UserCenterOperationRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserCenterOperationRequest";
        }
        static string MD5()
        {
            return "9bda4ac16227127f47ea815aed6f8d9e";
        }
        UserCenterOperationRequest()
        :imei(""),carrier(-1),requestType(0)
        {
        }
        void resetDefautlt()
        {
            imei = "";
            carrier = -1;
            requestType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imei, 0);
            _os.write(carrier, 1);
            _os.write(requestType, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imei, 0, false);
            _is.read(carrier, 1, false);
            _is.read(requestType, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imei,"imei");
            _ds.display(carrier,"carrier");
            _ds.display(requestType,"requestType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imei, true);
            _ds.displaySimple(carrier, true);
            _ds.displaySimple(requestType, false);
            return _os;
        }
    public:
        std::string imei;
        taf::Int32 carrier;
        taf::Int32 requestType;
    };
    inline bool operator==(const UserCenterOperationRequest&l, const UserCenterOperationRequest&r)
    {
        return l.imei == r.imei && l.carrier == r.carrier && l.requestType == r.requestType;
    }
    inline bool operator!=(const UserCenterOperationRequest&l, const UserCenterOperationRequest&r)
    {
        return !(l == r);
    }

    struct UserCenterOperationResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserCenterOperationResponse";
        }
        static string MD5()
        {
            return "949e5f84ce608d93c2ca00b93fc17301";
        }
        UserCenterOperationResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(thirdSections, 1);
            _os.write(interestSections, 2);
            _os.write(vCoinInfo, 3);
            _os.write(otherSections, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(thirdSections, 1, false);
            _is.read(interestSections, 2, false);
            _is.read(vCoinInfo, 3, false);
            _is.read(otherSections, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(thirdSections,"thirdSections");
            _ds.display(interestSections,"interestSections");
            _ds.display(vCoinInfo,"vCoinInfo");
            _ds.display(otherSections,"otherSections");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(thirdSections, true);
            _ds.displaySimple(interestSections, true);
            _ds.displaySimple(vCoinInfo, true);
            _ds.displaySimple(otherSections, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::UserCenterThirdSection> thirdSections;
        vector<jce::UserCenterInterestSection> interestSections;
        jce::VCoinInfo vCoinInfo;
        vector<jce::UserCenterInterestSection> otherSections;
    };
    inline bool operator==(const UserCenterOperationResponse&l, const UserCenterOperationResponse&r)
    {
        return l.errCode == r.errCode && l.thirdSections == r.thirdSections && l.interestSections == r.interestSections && l.vCoinInfo == r.vCoinInfo && l.otherSections == r.otherSections;
    }
    inline bool operator!=(const UserCenterOperationResponse&l, const UserCenterOperationResponse&r)
    {
        return !(l == r);
    }


}

#define jce_UserCenterThirdItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.redHotId,b.redHotId);jce_copy_struct(a.redHotVersion,b.redHotVersion);jce_copy_struct(a.redHotStatus,b.redHotStatus);jce_copy_struct(a.itemId,b.itemId);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_UserCenterThirdSection_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sectionKey,b.sectionKey);jce_copy_struct(a.barInfo,b.barInfo);jce_copy_struct(a.items,b.items);

#define jce_UserCenterInterestItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.redHotId,b.redHotId);jce_copy_struct(a.redHotVersion,b.redHotVersion);jce_copy_struct(a.redHotStatus,b.redHotStatus);jce_copy_struct(a.itemId,b.itemId);jce_copy_struct(a.bgColor,b.bgColor);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_UserCenterInterestSection_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sectionKey,b.sectionKey);jce_copy_struct(a.barInfo,b.barInfo);jce_copy_struct(a.items,b.items);

#define jce_VCoinInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.signInTextMap,b.signInTextMap);

#define jce_UserCenterOperationRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imei,b.imei);jce_copy_struct(a.carrier,b.carrier);jce_copy_struct(a.requestType,b.requestType);

#define jce_UserCenterOperationResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.thirdSections,b.thirdSections);jce_copy_struct(a.interestSections,b.interestSections);jce_copy_struct(a.vCoinInfo,b.vCoinInfo);jce_copy_struct(a.otherSections,b.otherSections);



#endif
