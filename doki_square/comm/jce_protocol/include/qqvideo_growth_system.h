// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_growth_system.jce'
// **********************************************************************

#ifndef __QQVIDEO_GROWTH_SYSTEM_H_
#define __QQVIDEO_GROWTH_SYSTEM_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"


namespace jce
{
    struct TaskTipsInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TaskTipsInfo";
        }
        static string MD5()
        {
            return "e38f8366f522287fff8834343bd9e6c3";
        }
        TaskTipsInfo()
        :uiType(0),title(""),subTitle(""),leftIconImgUrl(""),bgImgUrl(""),h5Url(""),reportKey(""),reportParams(""),leftIconPosition(0)
        {
        }
        void resetDefautlt()
        {
            uiType = 0;
            title = "";
            subTitle = "";
            leftIconImgUrl = "";
            bgImgUrl = "";
            h5Url = "";
            reportKey = "";
            reportParams = "";
            leftIconPosition = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uiType, 0);
            _os.write(title, 1);
            _os.write(subTitle, 2);
            _os.write(leftIconImgUrl, 3);
            _os.write(bgImgUrl, 4);
            _os.write(h5Url, 5);
            _os.write(action, 6);
            _os.write(reportKey, 7);
            _os.write(reportParams, 8);
            _os.write(rightButton, 9);
            _os.write(leftIconPosition, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uiType, 0, true);
            _is.read(title, 1, false);
            _is.read(subTitle, 2, false);
            _is.read(leftIconImgUrl, 3, false);
            _is.read(bgImgUrl, 4, false);
            _is.read(h5Url, 5, false);
            _is.read(action, 6, false);
            _is.read(reportKey, 7, false);
            _is.read(reportParams, 8, false);
            _is.read(rightButton, 9, false);
            _is.read(leftIconPosition, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uiType,"uiType");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(leftIconImgUrl,"leftIconImgUrl");
            _ds.display(bgImgUrl,"bgImgUrl");
            _ds.display(h5Url,"h5Url");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(rightButton,"rightButton");
            _ds.display(leftIconPosition,"leftIconPosition");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(leftIconImgUrl, true);
            _ds.displaySimple(bgImgUrl, true);
            _ds.displaySimple(h5Url, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(rightButton, true);
            _ds.displaySimple(leftIconPosition, false);
            return _os;
        }
    public:
        taf::Int32 uiType;
        std::string title;
        std::string subTitle;
        std::string leftIconImgUrl;
        std::string bgImgUrl;
        std::string h5Url;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
        jce::ActionBarInfo rightButton;
        taf::Int32 leftIconPosition;
    };
    inline bool operator==(const TaskTipsInfo&l, const TaskTipsInfo&r)
    {
        return l.uiType == r.uiType && l.title == r.title && l.subTitle == r.subTitle && l.leftIconImgUrl == r.leftIconImgUrl && l.bgImgUrl == r.bgImgUrl && l.h5Url == r.h5Url && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.rightButton == r.rightButton && l.leftIconPosition == r.leftIconPosition;
    }
    inline bool operator!=(const TaskTipsInfo&l, const TaskTipsInfo&r)
    {
        return !(l == r);
    }

    struct GrowthSystemTasksCompletedInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GrowthSystemTasksCompletedInfo";
        }
        static string MD5()
        {
            return "fe7f858185951d5c0fc222dc302fc764";
        }
        GrowthSystemTasksCompletedInfo()
        :totalTaskNum(0),finishTaskNum(0)
        {
        }
        void resetDefautlt()
        {
            totalTaskNum = 0;
            finishTaskNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(totalTaskNum, 0);
            _os.write(finishTaskNum, 1);
            _os.write(action, 2);
            _os.write(finishTaskTypes, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(totalTaskNum, 0, false);
            _is.read(finishTaskNum, 1, false);
            _is.read(action, 2, false);
            _is.read(finishTaskTypes, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(totalTaskNum,"totalTaskNum");
            _ds.display(finishTaskNum,"finishTaskNum");
            _ds.display(action,"action");
            _ds.display(finishTaskTypes,"finishTaskTypes");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(totalTaskNum, true);
            _ds.displaySimple(finishTaskNum, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(finishTaskTypes, false);
            return _os;
        }
    public:
        taf::Int32 totalTaskNum;
        taf::Int32 finishTaskNum;
        jce::Action action;
        vector<taf::Int32> finishTaskTypes;
    };
    inline bool operator==(const GrowthSystemTasksCompletedInfo&l, const GrowthSystemTasksCompletedInfo&r)
    {
        return l.totalTaskNum == r.totalTaskNum && l.finishTaskNum == r.finishTaskNum && l.action == r.action && l.finishTaskTypes == r.finishTaskTypes;
    }
    inline bool operator!=(const GrowthSystemTasksCompletedInfo&l, const GrowthSystemTasksCompletedInfo&r)
    {
        return !(l == r);
    }

    struct GrowthSystemRewardInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GrowthSystemRewardInfo";
        }
        static string MD5()
        {
            return "38fc5c5e9644109902b859ab2a7a0517";
        }
        GrowthSystemRewardInfo()
        :rewardType(0),rewardInonUrl(""),totalRewardNum(0),singleRewardNum(0)
        {
        }
        void resetDefautlt()
        {
            rewardType = 0;
            rewardInonUrl = "";
            totalRewardNum = 0;
            singleRewardNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(rewardType, 0);
            _os.write(rewardInonUrl, 1);
            _os.write(totalRewardNum, 2);
            _os.write(singleRewardNum, 3);
            _os.write(rewardAction, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(rewardType, 0, false);
            _is.read(rewardInonUrl, 1, false);
            _is.read(totalRewardNum, 2, false);
            _is.read(singleRewardNum, 3, false);
            _is.read(rewardAction, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(rewardType,"rewardType");
            _ds.display(rewardInonUrl,"rewardInonUrl");
            _ds.display(totalRewardNum,"totalRewardNum");
            _ds.display(singleRewardNum,"singleRewardNum");
            _ds.display(rewardAction,"rewardAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(rewardType, true);
            _ds.displaySimple(rewardInonUrl, true);
            _ds.displaySimple(totalRewardNum, true);
            _ds.displaySimple(singleRewardNum, true);
            _ds.displaySimple(rewardAction, false);
            return _os;
        }
    public:
        taf::Int32 rewardType;
        std::string rewardInonUrl;
        taf::Int32 totalRewardNum;
        taf::Int32 singleRewardNum;
        jce::Action rewardAction;
    };
    inline bool operator==(const GrowthSystemRewardInfo&l, const GrowthSystemRewardInfo&r)
    {
        return l.rewardType == r.rewardType && l.rewardInonUrl == r.rewardInonUrl && l.totalRewardNum == r.totalRewardNum && l.singleRewardNum == r.singleRewardNum && l.rewardAction == r.rewardAction;
    }
    inline bool operator!=(const GrowthSystemRewardInfo&l, const GrowthSystemRewardInfo&r)
    {
        return !(l == r);
    }

    struct GrowthSystemTaskRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GrowthSystemTaskRequest";
        }
        static string MD5()
        {
            return "7c9a8a8283b77be459086ef764a8e323";
        }
        GrowthSystemTaskRequest()
        :taskType(0),systemType(0),degreeLevel(0),exHttpData("")
        {
        }
        void resetDefautlt()
        {
            taskType = 0;
            systemType = 0;
            degreeLevel = 0;
            exHttpData = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(taskType, 0);
            _os.write(extraData, 1);
            _os.write(systemType, 2);
            _os.write(degreeLevel, 3);
            _os.write(exHttpData, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(taskType, 0, true);
            _is.read(extraData, 1, false);
            _is.read(systemType, 2, false);
            _is.read(degreeLevel, 3, false);
            _is.read(exHttpData, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(taskType,"taskType");
            _ds.display(extraData,"extraData");
            _ds.display(systemType,"systemType");
            _ds.display(degreeLevel,"degreeLevel");
            _ds.display(exHttpData,"exHttpData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(taskType, true);
            _ds.displaySimple(extraData, true);
            _ds.displaySimple(systemType, true);
            _ds.displaySimple(degreeLevel, true);
            _ds.displaySimple(exHttpData, false);
            return _os;
        }
    public:
        taf::Int32 taskType;
        map<std::string, std::string> extraData;
        taf::Int32 systemType;
        taf::Int32 degreeLevel;
        std::string exHttpData;
    };
    inline bool operator==(const GrowthSystemTaskRequest&l, const GrowthSystemTaskRequest&r)
    {
        return l.taskType == r.taskType && l.extraData == r.extraData && l.systemType == r.systemType && l.degreeLevel == r.degreeLevel && l.exHttpData == r.exHttpData;
    }
    inline bool operator!=(const GrowthSystemTaskRequest&l, const GrowthSystemTaskRequest&r)
    {
        return !(l == r);
    }

    struct GrowthSystemTaskResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GrowthSystemTaskResponse";
        }
        static string MD5()
        {
            return "b6645405b10a5b204ead89f9be45881f";
        }
        GrowthSystemTaskResponse()
        :errorCode(0),taskType(0),systemType(0),isCurTaskFinished(false)
        {
        }
        void resetDefautlt()
        {
            errorCode = 0;
            taskType = 0;
            systemType = 0;
            isCurTaskFinished = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errorCode, 0);
            _os.write(taskType, 1);
            _os.write(systemType, 2);
            _os.write(tipsInfo, 3);
            _os.write(degreeLabel, 4);
            _os.write(isCurTaskFinished, 5);
            _os.write(tasksCompletedInfo, 6);
            _os.write(rewardInfo, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errorCode, 0, true);
            _is.read(taskType, 1, false);
            _is.read(systemType, 2, false);
            _is.read(tipsInfo, 3, false);
            _is.read(degreeLabel, 4, false);
            _is.read(isCurTaskFinished, 5, false);
            _is.read(tasksCompletedInfo, 6, false);
            _is.read(rewardInfo, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errorCode,"errorCode");
            _ds.display(taskType,"taskType");
            _ds.display(systemType,"systemType");
            _ds.display(tipsInfo,"tipsInfo");
            _ds.display(degreeLabel,"degreeLabel");
            _ds.display(isCurTaskFinished,"isCurTaskFinished");
            _ds.display(tasksCompletedInfo,"tasksCompletedInfo");
            _ds.display(rewardInfo,"rewardInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(taskType, true);
            _ds.displaySimple(systemType, true);
            _ds.displaySimple(tipsInfo, true);
            _ds.displaySimple(degreeLabel, true);
            _ds.displaySimple(isCurTaskFinished, true);
            _ds.displaySimple(tasksCompletedInfo, true);
            _ds.displaySimple(rewardInfo, false);
            return _os;
        }
    public:
        taf::Int32 errorCode;
        taf::Int32 taskType;
        taf::Int32 systemType;
        jce::TaskTipsInfo tipsInfo;
        jce::DegreeLabel degreeLabel;
        taf::Bool isCurTaskFinished;
        jce::GrowthSystemTasksCompletedInfo tasksCompletedInfo;
        vector<jce::GrowthSystemRewardInfo> rewardInfo;
    };
    inline bool operator==(const GrowthSystemTaskResponse&l, const GrowthSystemTaskResponse&r)
    {
        return l.errorCode == r.errorCode && l.taskType == r.taskType && l.systemType == r.systemType && l.tipsInfo == r.tipsInfo && l.degreeLabel == r.degreeLabel && l.isCurTaskFinished == r.isCurTaskFinished && l.tasksCompletedInfo == r.tasksCompletedInfo && l.rewardInfo == r.rewardInfo;
    }
    inline bool operator!=(const GrowthSystemTaskResponse&l, const GrowthSystemTaskResponse&r)
    {
        return !(l == r);
    }


}

#define jce_TaskTipsInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.leftIconImgUrl,b.leftIconImgUrl);jce_copy_struct(a.bgImgUrl,b.bgImgUrl);jce_copy_struct(a.h5Url,b.h5Url);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.rightButton,b.rightButton);jce_copy_struct(a.leftIconPosition,b.leftIconPosition);

#define jce_GrowthSystemTasksCompletedInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.totalTaskNum,b.totalTaskNum);jce_copy_struct(a.finishTaskNum,b.finishTaskNum);jce_copy_struct(a.action,b.action);jce_copy_struct(a.finishTaskTypes,b.finishTaskTypes);

#define jce_GrowthSystemRewardInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.rewardType,b.rewardType);jce_copy_struct(a.rewardInonUrl,b.rewardInonUrl);jce_copy_struct(a.totalRewardNum,b.totalRewardNum);jce_copy_struct(a.singleRewardNum,b.singleRewardNum);jce_copy_struct(a.rewardAction,b.rewardAction);

#define jce_GrowthSystemTaskRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.taskType,b.taskType);jce_copy_struct(a.extraData,b.extraData);jce_copy_struct(a.systemType,b.systemType);jce_copy_struct(a.degreeLevel,b.degreeLevel);jce_copy_struct(a.exHttpData,b.exHttpData);

#define jce_GrowthSystemTaskResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.taskType,b.taskType);jce_copy_struct(a.systemType,b.systemType);jce_copy_struct(a.tipsInfo,b.tipsInfo);jce_copy_struct(a.degreeLabel,b.degreeLabel);jce_copy_struct(a.isCurTaskFinished,b.isCurTaskFinished);jce_copy_struct(a.tasksCompletedInfo,b.tasksCompletedInfo);jce_copy_struct(a.rewardInfo,b.rewardInfo);



#endif
