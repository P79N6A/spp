// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_circle.jce'
// **********************************************************************

#ifndef __QQVIDEO_CIRCLE_H_
#define __QQVIDEO_CIRCLE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"
#include "qqvideo_user_info.h"


namespace jce
{
    struct CircleNotifyMessage : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleNotifyMessage";
        }
        static string MD5()
        {
            return "f4abc5b2dda4b7c137e22ab90cfc5bd2";
        }
        CircleNotifyMessage()
        :seqid(""),rootFeedId(""),imageUrl(""),type(0),rootContent("")
        {
        }
        void resetDefautlt()
        {
            seqid = "";
            rootFeedId = "";
            imageUrl = "";
            type = 0;
            rootContent = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(seqid, 0);
            _os.write(rootFeedId, 1);
            _os.write(commentFeed, 2);
            _os.write(imageUrl, 3);
            _os.write(type, 4);
            _os.write(rootContent, 5);
            _os.write(action, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(seqid, 0, true);
            _is.read(rootFeedId, 1, true);
            _is.read(commentFeed, 2, true);
            _is.read(imageUrl, 3, false);
            _is.read(type, 4, false);
            _is.read(rootContent, 5, false);
            _is.read(action, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(seqid,"seqid");
            _ds.display(rootFeedId,"rootFeedId");
            _ds.display(commentFeed,"commentFeed");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(type,"type");
            _ds.display(rootContent,"rootContent");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(seqid, true);
            _ds.displaySimple(rootFeedId, true);
            _ds.displaySimple(commentFeed, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(rootContent, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string seqid;
        std::string rootFeedId;
        jce::CircleCommentFeed commentFeed;
        std::string imageUrl;
        taf::Char type;
        std::string rootContent;
        jce::Action action;
    };
    inline bool operator==(const CircleNotifyMessage&l, const CircleNotifyMessage&r)
    {
        return l.seqid == r.seqid && l.rootFeedId == r.rootFeedId && l.commentFeed == r.commentFeed && l.imageUrl == r.imageUrl && l.type == r.type && l.rootContent == r.rootContent && l.action == r.action;
    }
    inline bool operator!=(const CircleNotifyMessage&l, const CircleNotifyMessage&r)
    {
        return !(l == r);
    }

    struct PrimaryFeedList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PrimaryFeedList";
        }
        static string MD5()
        {
            return "e612781b0fb8b7c658863c3886349f23";
        }
        PrimaryFeedList()
        :feedTitle("")
        {
        }
        void resetDefautlt()
        {
            feedTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedTitle, 0);
            _os.write(feedList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedTitle, 0, true);
            _is.read(feedList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedTitle,"feedTitle");
            _ds.display(feedList,"feedList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedTitle, true);
            _ds.displaySimple(feedList, false);
            return _os;
        }
    public:
        std::string feedTitle;
        vector<jce::CirclePrimaryFeed> feedList;
    };
    inline bool operator==(const PrimaryFeedList&l, const PrimaryFeedList&r)
    {
        return l.feedTitle == r.feedTitle && l.feedList == r.feedList;
    }
    inline bool operator!=(const PrimaryFeedList&l, const PrimaryFeedList&r)
    {
        return !(l == r);
    }

    struct RelationUserInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RelationUserInfo";
        }
        static string MD5()
        {
            return "ed2e0a2adc7de0ab2d6a16980cd8b78a";
        }
        RelationUserInfo()
        :newFlag(0),actorNameAddition(""),status(0)
        {
        }
        void resetDefautlt()
        {
            newFlag = 0;
            actorNameAddition = "";
            status = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(user, 0);
            _os.write(newFlag, 1);
            _os.write(actorNameAddition, 2);
            _os.write(status, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(user, 0, true);
            _is.read(newFlag, 1, false);
            _is.read(actorNameAddition, 2, false);
            _is.read(status, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(user,"user");
            _ds.display(newFlag,"newFlag");
            _ds.display(actorNameAddition,"actorNameAddition");
            _ds.display(status,"status");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(user, true);
            _ds.displaySimple(newFlag, true);
            _ds.displaySimple(actorNameAddition, true);
            _ds.displaySimple(status, false);
            return _os;
        }
    public:
        jce::ActorInfo user;
        taf::Int32 newFlag;
        std::string actorNameAddition;
        taf::Int32 status;
    };
    inline bool operator==(const RelationUserInfo&l, const RelationUserInfo&r)
    {
        return l.user == r.user && l.newFlag == r.newFlag && l.actorNameAddition == r.actorNameAddition && l.status == r.status;
    }
    inline bool operator!=(const RelationUserInfo&l, const RelationUserInfo&r)
    {
        return !(l == r);
    }

    struct CircleLongVideo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleLongVideo";
        }
        static string MD5()
        {
            return "cd6f9c8523e4a216a991457e1d5337ac";
        }
        CircleLongVideo()
        :vid(""),duration(""),title(""),pic(""),playUrl(""),playright(""),secondtitle(""),isFromFlag(0)
        {
        }
        void resetDefautlt()
        {
            vid = "";
            duration = "";
            title = "";
            pic = "";
            playUrl = "";
            playright = "";
            secondtitle = "";
            isFromFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(duration, 1);
            _os.write(title, 2);
            _os.write(pic, 3);
            _os.write(playUrl, 4);
            _os.write(playright, 5);
            _os.write(secondtitle, 6);
            _os.write(isFromFlag, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, true);
            _is.read(duration, 1, true);
            _is.read(title, 2, true);
            _is.read(pic, 3, true);
            _is.read(playUrl, 4, false);
            _is.read(playright, 5, false);
            _is.read(secondtitle, 6, false);
            _is.read(isFromFlag, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(duration,"duration");
            _ds.display(title,"title");
            _ds.display(pic,"pic");
            _ds.display(playUrl,"playUrl");
            _ds.display(playright,"playright");
            _ds.display(secondtitle,"secondtitle");
            _ds.display(isFromFlag,"isFromFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(duration, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(pic, true);
            _ds.displaySimple(playUrl, true);
            _ds.displaySimple(playright, true);
            _ds.displaySimple(secondtitle, true);
            _ds.displaySimple(isFromFlag, false);
            return _os;
        }
    public:
        std::string vid;
        std::string duration;
        std::string title;
        std::string pic;
        std::string playUrl;
        std::string playright;
        std::string secondtitle;
        taf::Int64 isFromFlag;
    };
    inline bool operator==(const CircleLongVideo&l, const CircleLongVideo&r)
    {
        return l.vid == r.vid && l.duration == r.duration && l.title == r.title && l.pic == r.pic && l.playUrl == r.playUrl && l.playright == r.playright && l.secondtitle == r.secondtitle && l.isFromFlag == r.isFromFlag;
    }
    inline bool operator!=(const CircleLongVideo&l, const CircleLongVideo&r)
    {
        return !(l == r);
    }

    struct FtExtInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FtExtInfo";
        }
        static string MD5()
        {
            return "1f94260635e213f0e74b698daf08e156";
        }
        FtExtInfo()
        :ftMsgid(""),ftFloor(0),ftId(""),ftTitle(""),ftCreateTime(0),ftFlags(0)
        {
        }
        void resetDefautlt()
        {
            ftMsgid = "";
            ftFloor = 0;
            ftId = "";
            ftTitle = "";
            ftCreateTime = 0;
            ftFlags = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ftMsgid, 0);
            _os.write(ftFloor, 1);
            _os.write(ftId, 2);
            _os.write(ftTitle, 3);
            _os.write(ftCreateTime, 4);
            _os.write(ftFlags, 5);
            _os.write(ftVideoInfo, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ftMsgid, 0, false);
            _is.read(ftFloor, 1, false);
            _is.read(ftId, 2, false);
            _is.read(ftTitle, 3, false);
            _is.read(ftCreateTime, 4, false);
            _is.read(ftFlags, 5, false);
            _is.read(ftVideoInfo, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ftMsgid,"ftMsgid");
            _ds.display(ftFloor,"ftFloor");
            _ds.display(ftId,"ftId");
            _ds.display(ftTitle,"ftTitle");
            _ds.display(ftCreateTime,"ftCreateTime");
            _ds.display(ftFlags,"ftFlags");
            _ds.display(ftVideoInfo,"ftVideoInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ftMsgid, true);
            _ds.displaySimple(ftFloor, true);
            _ds.displaySimple(ftId, true);
            _ds.displaySimple(ftTitle, true);
            _ds.displaySimple(ftCreateTime, true);
            _ds.displaySimple(ftFlags, true);
            _ds.displaySimple(ftVideoInfo, false);
            return _os;
        }
    public:
        std::string ftMsgid;
        taf::Int32 ftFloor;
        std::string ftId;
        std::string ftTitle;
        taf::Int32 ftCreateTime;
        taf::Int32 ftFlags;
        jce::BasicVideoInfo ftVideoInfo;
    };
    inline bool operator==(const FtExtInfo&l, const FtExtInfo&r)
    {
        return l.ftMsgid == r.ftMsgid && l.ftFloor == r.ftFloor && l.ftId == r.ftId && l.ftTitle == r.ftTitle && l.ftCreateTime == r.ftCreateTime && l.ftFlags == r.ftFlags && l.ftVideoInfo == r.ftVideoInfo;
    }
    inline bool operator!=(const FtExtInfo&l, const FtExtInfo&r)
    {
        return !(l == r);
    }

    struct FollowActionBarsInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FollowActionBarsInfo";
        }
        static string MD5()
        {
            return "e988fb225ae26fecb38506b772b69947";
        }
        FollowActionBarsInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dokiBar, 0);
            _os.write(followBar, 1);
            _os.write(fansBar, 2);
            _os.write(favoratesBar, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dokiBar, 0, false);
            _is.read(followBar, 1, false);
            _is.read(fansBar, 2, false);
            _is.read(favoratesBar, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dokiBar,"dokiBar");
            _ds.display(followBar,"followBar");
            _ds.display(fansBar,"fansBar");
            _ds.display(favoratesBar,"favoratesBar");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dokiBar, true);
            _ds.displaySimple(followBar, true);
            _ds.displaySimple(fansBar, true);
            _ds.displaySimple(favoratesBar, false);
            return _os;
        }
    public:
        jce::ActionBarInfo dokiBar;
        jce::ActionBarInfo followBar;
        jce::ActionBarInfo fansBar;
        jce::ActionBarInfo favoratesBar;
    };
    inline bool operator==(const FollowActionBarsInfo&l, const FollowActionBarsInfo&r)
    {
        return l.dokiBar == r.dokiBar && l.followBar == r.followBar && l.fansBar == r.fansBar && l.favoratesBar == r.favoratesBar;
    }
    inline bool operator!=(const FollowActionBarsInfo&l, const FollowActionBarsInfo&r)
    {
        return !(l == r);
    }

    struct CirclePubMsgRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CirclePubMsgRequest";
        }
        static string MD5()
        {
            return "d1fdfd4056629ab3a44367dee1621a89";
        }
        CirclePubMsgRequest()
        :dataKey(""),content(""),title(""),vid(""),seq(""),commentId(""),targetId(""),checktype(0),shareMask(0),cfrom(0),dmContentKey(""),dwTimePoint(0),wxScore("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            content = "";
            title = "";
            vid = "";
            seq = "";
            commentId = "";
            targetId = "";
            checktype = 0;
            shareMask = 0;
            cfrom = 0;
            dmContentKey = "";
            dwTimePoint = 0;
            wxScore = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(content, 1);
            _os.write(imageList, 2);
            _os.write(blackList, 3);
            _os.write(title, 4);
            _os.write(vid, 5);
            _os.write(seq, 6);
            _os.write(videoList, 7);
            _os.write(commentId, 8);
            _os.write(videoInfo, 9);
            _os.write(targetId, 11);
            _os.write(checktype, 12);
            _os.write(shareMask, 13);
            _os.write(shareInfo, 14);
            _os.write(shareToken, 15);
            _os.write(cfrom, 16);
            _os.write(longVideoList, 18);
            _os.write(ftExtInfo, 19);
            _os.write(voiceList, 20);
            _os.write(dmContentKey, 21);
            _os.write(userStarInfo, 22);
            _os.write(dwTimePoint, 23);
            _os.write(wxScore, 24);
            _os.write(voteInfo, 25);
            _os.write(fanRelateList, 26);
            _os.write(omInfo, 27);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(content, 1, false);
            _is.read(imageList, 2, false);
            _is.read(blackList, 3, false);
            _is.read(title, 4, false);
            _is.read(vid, 5, false);
            _is.read(seq, 6, false);
            _is.read(videoList, 7, false);
            _is.read(commentId, 8, false);
            _is.read(videoInfo, 9, false);
            _is.read(targetId, 11, false);
            _is.read(checktype, 12, false);
            _is.read(shareMask, 13, false);
            _is.read(shareInfo, 14, false);
            _is.read(shareToken, 15, false);
            _is.read(cfrom, 16, false);
            _is.read(longVideoList, 18, false);
            _is.read(ftExtInfo, 19, false);
            _is.read(voiceList, 20, false);
            _is.read(dmContentKey, 21, false);
            _is.read(userStarInfo, 22, false);
            _is.read(dwTimePoint, 23, false);
            _is.read(wxScore, 24, false);
            _is.read(voteInfo, 25, false);
            _is.read(fanRelateList, 26, false);
            _is.read(omInfo, 27, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(content,"content");
            _ds.display(imageList,"imageList");
            _ds.display(blackList,"blackList");
            _ds.display(title,"title");
            _ds.display(vid,"vid");
            _ds.display(seq,"seq");
            _ds.display(videoList,"videoList");
            _ds.display(commentId,"commentId");
            _ds.display(videoInfo,"videoInfo");
            _ds.display(targetId,"targetId");
            _ds.display(checktype,"checktype");
            _ds.display(shareMask,"shareMask");
            _ds.display(shareInfo,"shareInfo");
            _ds.display(shareToken,"shareToken");
            _ds.display(cfrom,"cfrom");
            _ds.display(longVideoList,"longVideoList");
            _ds.display(ftExtInfo,"ftExtInfo");
            _ds.display(voiceList,"voiceList");
            _ds.display(dmContentKey,"dmContentKey");
            _ds.display(userStarInfo,"userStarInfo");
            _ds.display(dwTimePoint,"dwTimePoint");
            _ds.display(wxScore,"wxScore");
            _ds.display(voteInfo,"voteInfo");
            _ds.display(fanRelateList,"fanRelateList");
            _ds.display(omInfo,"omInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(imageList, true);
            _ds.displaySimple(blackList, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(videoList, true);
            _ds.displaySimple(commentId, true);
            _ds.displaySimple(videoInfo, true);
            _ds.displaySimple(targetId, true);
            _ds.displaySimple(checktype, true);
            _ds.displaySimple(shareMask, true);
            _ds.displaySimple(shareInfo, true);
            _ds.displaySimple(shareToken, true);
            _ds.displaySimple(cfrom, true);
            _ds.displaySimple(longVideoList, true);
            _ds.displaySimple(ftExtInfo, true);
            _ds.displaySimple(voiceList, true);
            _ds.displaySimple(dmContentKey, true);
            _ds.displaySimple(userStarInfo, true);
            _ds.displaySimple(dwTimePoint, true);
            _ds.displaySimple(wxScore, true);
            _ds.displaySimple(voteInfo, true);
            _ds.displaySimple(fanRelateList, true);
            _ds.displaySimple(omInfo, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string content;
        vector<jce::CircleUploadImageUrl> imageList;
        vector<std::string> blackList;
        std::string title;
        std::string vid;
        std::string seq;
        vector<jce::CircleShortVideoUrl> videoList;
        std::string commentId;
        jce::CirclePosterInfo videoInfo;
        std::string targetId;
        taf::Int32 checktype;
        taf::Int32 shareMask;
        jce::ShareItem shareInfo;
        jce::ShareToken shareToken;
        taf::Int32 cfrom;
        vector<jce::CircleLongVideo> longVideoList;
        jce::FtExtInfo ftExtInfo;
        vector<jce::ApolloVoiceData> voiceList;
        std::string dmContentKey;
        jce::STStarInfo userStarInfo;
        taf::Int32 dwTimePoint;
        std::string wxScore;
        jce::FeedVoteInfo voteInfo;
        vector<jce::FanInvolveItem> fanRelateList;
        jce::FeedOMInfo omInfo;
    };
    inline bool operator==(const CirclePubMsgRequest&l, const CirclePubMsgRequest&r)
    {
        return l.dataKey == r.dataKey && l.content == r.content && l.imageList == r.imageList && l.blackList == r.blackList && l.title == r.title && l.vid == r.vid && l.seq == r.seq && l.videoList == r.videoList && l.commentId == r.commentId && l.videoInfo == r.videoInfo && l.targetId == r.targetId && l.checktype == r.checktype && l.shareMask == r.shareMask && l.shareInfo == r.shareInfo && l.shareToken == r.shareToken && l.cfrom == r.cfrom && l.longVideoList == r.longVideoList && l.ftExtInfo == r.ftExtInfo && l.voiceList == r.voiceList && l.dmContentKey == r.dmContentKey && l.userStarInfo == r.userStarInfo && l.dwTimePoint == r.dwTimePoint && l.wxScore == r.wxScore && l.voteInfo == r.voteInfo && l.fanRelateList == r.fanRelateList && l.omInfo == r.omInfo;
    }
    inline bool operator!=(const CirclePubMsgRequest&l, const CirclePubMsgRequest&r)
    {
        return !(l == r);
    }

    struct CirclePubMsgResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CirclePubMsgResponse";
        }
        static string MD5()
        {
            return "dde194de0f3ce014c143ee49eadf8776";
        }
        CirclePubMsgResponse()
        :errCode(0),seq(""),shareErrCode(0),shareCircleUrl("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            seq = "";
            shareErrCode = 0;
            shareCircleUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(feed, 1);
            _os.write(seq, 2);
            _os.write(shareErrCode, 3);
            _os.write(shareCircleUrl, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(feed, 1, false);
            _is.read(seq, 2, false);
            _is.read(shareErrCode, 3, false);
            _is.read(shareCircleUrl, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(feed,"feed");
            _ds.display(seq,"seq");
            _ds.display(shareErrCode,"shareErrCode");
            _ds.display(shareCircleUrl,"shareCircleUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(feed, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(shareErrCode, true);
            _ds.displaySimple(shareCircleUrl, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::CirclePrimaryFeed feed;
        std::string seq;
        taf::Int32 shareErrCode;
        std::string shareCircleUrl;
    };
    inline bool operator==(const CirclePubMsgResponse&l, const CirclePubMsgResponse&r)
    {
        return l.errCode == r.errCode && l.feed == r.feed && l.seq == r.seq && l.shareErrCode == r.shareErrCode && l.shareCircleUrl == r.shareCircleUrl;
    }
    inline bool operator!=(const CirclePubMsgResponse&l, const CirclePubMsgResponse&r)
    {
        return !(l == r);
    }

    struct CirclePostCommentRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CirclePostCommentRequest";
        }
        static string MD5()
        {
            return "2c0fa7fa78be50f380eecd753257dbb0";
        }
        CirclePostCommentRequest()
        :feedId(""),content(""),seq(""),dataKey(""),commentId(""),targetId(""),checktype(0),cfrom(0)
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            content = "";
            seq = "";
            dataKey = "";
            commentId = "";
            targetId = "";
            checktype = 0;
            cfrom = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(content, 1);
            _os.write(seq, 2);
            _os.write(dataKey, 3);
            _os.write(commentId, 4);
            _os.write(targetId, 5);
            _os.write(checktype, 6);
            _os.write(cfrom, 7);
            _os.write(imageList, 9);
            _os.write(ftExtInfo, 10);
            _os.write(userStarInfo, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(content, 1, true);
            _is.read(seq, 2, false);
            _is.read(dataKey, 3, false);
            _is.read(commentId, 4, false);
            _is.read(targetId, 5, false);
            _is.read(checktype, 6, false);
            _is.read(cfrom, 7, false);
            _is.read(imageList, 9, false);
            _is.read(ftExtInfo, 10, false);
            _is.read(userStarInfo, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(content,"content");
            _ds.display(seq,"seq");
            _ds.display(dataKey,"dataKey");
            _ds.display(commentId,"commentId");
            _ds.display(targetId,"targetId");
            _ds.display(checktype,"checktype");
            _ds.display(cfrom,"cfrom");
            _ds.display(imageList,"imageList");
            _ds.display(ftExtInfo,"ftExtInfo");
            _ds.display(userStarInfo,"userStarInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(commentId, true);
            _ds.displaySimple(targetId, true);
            _ds.displaySimple(checktype, true);
            _ds.displaySimple(cfrom, true);
            _ds.displaySimple(imageList, true);
            _ds.displaySimple(ftExtInfo, true);
            _ds.displaySimple(userStarInfo, false);
            return _os;
        }
    public:
        std::string feedId;
        std::string content;
        std::string seq;
        std::string dataKey;
        std::string commentId;
        std::string targetId;
        taf::Int32 checktype;
        taf::Int32 cfrom;
        vector<jce::CircleUploadImageUrl> imageList;
        jce::FtExtInfo ftExtInfo;
        jce::STStarInfo userStarInfo;
    };
    inline bool operator==(const CirclePostCommentRequest&l, const CirclePostCommentRequest&r)
    {
        return l.feedId == r.feedId && l.content == r.content && l.seq == r.seq && l.dataKey == r.dataKey && l.commentId == r.commentId && l.targetId == r.targetId && l.checktype == r.checktype && l.cfrom == r.cfrom && l.imageList == r.imageList && l.ftExtInfo == r.ftExtInfo && l.userStarInfo == r.userStarInfo;
    }
    inline bool operator!=(const CirclePostCommentRequest&l, const CirclePostCommentRequest&r)
    {
        return !(l == r);
    }

    struct CirclePostCommentResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CirclePostCommentResponse";
        }
        static string MD5()
        {
            return "193d97f2b3ae058b1b082d7c7dce4c7a";
        }
        CirclePostCommentResponse()
        :errCode(0),seq("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            seq = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(comment, 1);
            _os.write(seq, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(comment, 1, false);
            _is.read(seq, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(comment,"comment");
            _ds.display(seq,"seq");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(comment, true);
            _ds.displaySimple(seq, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::CircleCommentFeed comment;
        std::string seq;
    };
    inline bool operator==(const CirclePostCommentResponse&l, const CirclePostCommentResponse&r)
    {
        return l.errCode == r.errCode && l.comment == r.comment && l.seq == r.seq;
    }
    inline bool operator!=(const CirclePostCommentResponse&l, const CirclePostCommentResponse&r)
    {
        return !(l == r);
    }

    struct CircleMsgLikeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleMsgLikeRequest";
        }
        static string MD5()
        {
            return "cff81ab9bbdaf58d2bee5fed5222f856";
        }
        CircleMsgLikeRequest()
        :feedId(""),likeFlag(0),seq(""),dataKey(""),cfrom(0)
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            likeFlag = 0;
            seq = "";
            dataKey = "";
            cfrom = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(likeFlag, 1);
            _os.write(seq, 2);
            _os.write(dataKey, 3);
            _os.write(cfrom, 4);
            _os.write(ftExtInfo, 6);
            _os.write(userStarInfo, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(likeFlag, 1, true);
            _is.read(seq, 2, false);
            _is.read(dataKey, 3, false);
            _is.read(cfrom, 4, false);
            _is.read(ftExtInfo, 6, false);
            _is.read(userStarInfo, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(likeFlag,"likeFlag");
            _ds.display(seq,"seq");
            _ds.display(dataKey,"dataKey");
            _ds.display(cfrom,"cfrom");
            _ds.display(ftExtInfo,"ftExtInfo");
            _ds.display(userStarInfo,"userStarInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(likeFlag, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(cfrom, true);
            _ds.displaySimple(ftExtInfo, true);
            _ds.displaySimple(userStarInfo, false);
            return _os;
        }
    public:
        std::string feedId;
        taf::Char likeFlag;
        std::string seq;
        std::string dataKey;
        taf::Int32 cfrom;
        jce::FtExtInfo ftExtInfo;
        jce::STStarInfo userStarInfo;
    };
    inline bool operator==(const CircleMsgLikeRequest&l, const CircleMsgLikeRequest&r)
    {
        return l.feedId == r.feedId && l.likeFlag == r.likeFlag && l.seq == r.seq && l.dataKey == r.dataKey && l.cfrom == r.cfrom && l.ftExtInfo == r.ftExtInfo && l.userStarInfo == r.userStarInfo;
    }
    inline bool operator!=(const CircleMsgLikeRequest&l, const CircleMsgLikeRequest&r)
    {
        return !(l == r);
    }

    struct CircleMsgLikeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleMsgLikeResponse";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        CircleMsgLikeResponse()
        :errCode(0),seq("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            seq = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(seq, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(seq, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(seq,"seq");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(seq, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string seq;
    };
    inline bool operator==(const CircleMsgLikeResponse&l, const CircleMsgLikeResponse&r)
    {
        return l.errCode == r.errCode && l.seq == r.seq;
    }
    inline bool operator!=(const CircleMsgLikeResponse&l, const CircleMsgLikeResponse&r)
    {
        return !(l == r);
    }

    struct CircleMsgReportRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleMsgReportRequest";
        }
        static string MD5()
        {
            return "103a0b71307d9d789a3fce3552e3b49a";
        }
        CircleMsgReportRequest()
        :feedId(""),reportType(0),description(""),seq(""),dataKey(""),cfrom(0)
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            reportType = 0;
            description = "";
            seq = "";
            dataKey = "";
            cfrom = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(reportType, 1);
            _os.write(description, 2);
            _os.write(seq, 3);
            _os.write(dataKey, 4);
            _os.write(cfrom, 5);
            _os.write(ftExtInfo, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(reportType, 1, false);
            _is.read(description, 2, false);
            _is.read(seq, 3, false);
            _is.read(dataKey, 4, false);
            _is.read(cfrom, 5, false);
            _is.read(ftExtInfo, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(reportType,"reportType");
            _ds.display(description,"description");
            _ds.display(seq,"seq");
            _ds.display(dataKey,"dataKey");
            _ds.display(cfrom,"cfrom");
            _ds.display(ftExtInfo,"ftExtInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(reportType, true);
            _ds.displaySimple(description, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(cfrom, true);
            _ds.displaySimple(ftExtInfo, false);
            return _os;
        }
    public:
        std::string feedId;
        taf::Int32 reportType;
        std::string description;
        std::string seq;
        std::string dataKey;
        taf::Int32 cfrom;
        jce::FtExtInfo ftExtInfo;
    };
    inline bool operator==(const CircleMsgReportRequest&l, const CircleMsgReportRequest&r)
    {
        return l.feedId == r.feedId && l.reportType == r.reportType && l.description == r.description && l.seq == r.seq && l.dataKey == r.dataKey && l.cfrom == r.cfrom && l.ftExtInfo == r.ftExtInfo;
    }
    inline bool operator!=(const CircleMsgReportRequest&l, const CircleMsgReportRequest&r)
    {
        return !(l == r);
    }

    struct CircleMsgReportResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleMsgReportResponse";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        CircleMsgReportResponse()
        :errCode(0),seq("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            seq = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(seq, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(seq, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(seq,"seq");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(seq, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string seq;
    };
    inline bool operator==(const CircleMsgReportResponse&l, const CircleMsgReportResponse&r)
    {
        return l.errCode == r.errCode && l.seq == r.seq;
    }
    inline bool operator!=(const CircleMsgReportResponse&l, const CircleMsgReportResponse&r)
    {
        return !(l == r);
    }

    struct CircleMsgDeleteRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleMsgDeleteRequest";
        }
        static string MD5()
        {
            return "4c34fa02eaca53ff3b398402b45a3823";
        }
        CircleMsgDeleteRequest()
        :feedId(""),seq(""),dataKey(""),modifyType(0),cfrom(0)
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            seq = "";
            dataKey = "";
            modifyType = 0;
            cfrom = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(seq, 1);
            _os.write(dataKey, 2);
            _os.write(modifyType, 3);
            _os.write(cfrom, 4);
            _os.write(ftExtInfo, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(seq, 1, false);
            _is.read(dataKey, 2, false);
            _is.read(modifyType, 3, false);
            _is.read(cfrom, 4, false);
            _is.read(ftExtInfo, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(seq,"seq");
            _ds.display(dataKey,"dataKey");
            _ds.display(modifyType,"modifyType");
            _ds.display(cfrom,"cfrom");
            _ds.display(ftExtInfo,"ftExtInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(modifyType, true);
            _ds.displaySimple(cfrom, true);
            _ds.displaySimple(ftExtInfo, false);
            return _os;
        }
    public:
        std::string feedId;
        std::string seq;
        std::string dataKey;
        taf::Int32 modifyType;
        taf::Int32 cfrom;
        jce::FtExtInfo ftExtInfo;
    };
    inline bool operator==(const CircleMsgDeleteRequest&l, const CircleMsgDeleteRequest&r)
    {
        return l.feedId == r.feedId && l.seq == r.seq && l.dataKey == r.dataKey && l.modifyType == r.modifyType && l.cfrom == r.cfrom && l.ftExtInfo == r.ftExtInfo;
    }
    inline bool operator!=(const CircleMsgDeleteRequest&l, const CircleMsgDeleteRequest&r)
    {
        return !(l == r);
    }

    struct CircleMsgDeleteResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleMsgDeleteResponse";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        CircleMsgDeleteResponse()
        :errCode(0),seq("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            seq = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(seq, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(seq, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(seq,"seq");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(seq, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string seq;
    };
    inline bool operator==(const CircleMsgDeleteResponse&l, const CircleMsgDeleteResponse&r)
    {
        return l.errCode == r.errCode && l.seq == r.seq;
    }
    inline bool operator!=(const CircleMsgDeleteResponse&l, const CircleMsgDeleteResponse&r)
    {
        return !(l == r);
    }

    struct CircleGetVideoSelectListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetVideoSelectListRequest";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        CircleGetVideoSelectListRequest()
        :flag(0),pageContext("")
        {
        }
        void resetDefautlt()
        {
            flag = 0;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(flag, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(flag, 0, false);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(flag,"flag");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(flag, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 flag;
        std::string pageContext;
    };
    inline bool operator==(const CircleGetVideoSelectListRequest&l, const CircleGetVideoSelectListRequest&r)
    {
        return l.flag == r.flag && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const CircleGetVideoSelectListRequest&l, const CircleGetVideoSelectListRequest&r)
    {
        return !(l == r);
    }

    struct CircleGetVideoSelectListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetVideoSelectListResponse";
        }
        static string MD5()
        {
            return "ae93d7c411ce756a3160150b4fb9d1f1";
        }
        CircleGetVideoSelectListResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(coverDataMap, 2);
            _os.write(pageContext, 3);
            _os.write(hasNextPage, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(coverDataMap, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(hasNextPage, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(coverDataMap,"coverDataMap");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(coverDataMap, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        map<std::string, jce::CoverDataList> coverDataMap;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const CircleGetVideoSelectListResponse&l, const CircleGetVideoSelectListResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.coverDataMap == r.coverDataMap && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const CircleGetVideoSelectListResponse&l, const CircleGetVideoSelectListResponse&r)
    {
        return !(l == r);
    }

    struct CircleGetScreenShotsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetScreenShotsRequest";
        }
        static string MD5()
        {
            return "02c8b7c8dd015754a72e807a03033d5e";
        }
        CircleGetScreenShotsRequest()
        :dataKey(""),pageContext(""),vid(""),type(0)
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
            vid = "";
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
            _os.write(vid, 2);
            _os.write(type, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(vid, 2, false);
            _is.read(type, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(vid,"vid");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
        std::string vid;
        taf::Int32 type;
    };
    inline bool operator==(const CircleGetScreenShotsRequest&l, const CircleGetScreenShotsRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.vid == r.vid && l.type == r.type;
    }
    inline bool operator!=(const CircleGetScreenShotsRequest&l, const CircleGetScreenShotsRequest&r)
    {
        return !(l == r);
    }

    struct CircleGetScreenShotsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetScreenShotsResponse";
        }
        static string MD5()
        {
            return "7bfb27bfa7849ee430ee1907e278eb28";
        }
        CircleGetScreenShotsResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(imageList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(videoList, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(imageList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(videoList, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(imageList,"imageList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(videoList,"videoList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(imageList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(videoList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::CircleMsgImageUrl> imageList;
        std::string pageContext;
        taf::Bool hasNextPage;
        vector<jce::CircleShortVideoUrl> videoList;
    };
    inline bool operator==(const CircleGetScreenShotsResponse&l, const CircleGetScreenShotsResponse&r)
    {
        return l.errCode == r.errCode && l.imageList == r.imageList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.videoList == r.videoList;
    }
    inline bool operator!=(const CircleGetScreenShotsResponse&l, const CircleGetScreenShotsResponse&r)
    {
        return !(l == r);
    }

    struct CircleGetHomeTimeLineRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetHomeTimeLineRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        CircleGetHomeTimeLineRequest()
        :pageContext(""),reportContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
            _os.write(reportContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
            _is.read(reportContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            _ds.display(reportContext,"reportContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(reportContext, false);
            return _os;
        }
    public:
        std::string pageContext;
        std::string reportContext;
    };
    inline bool operator==(const CircleGetHomeTimeLineRequest&l, const CircleGetHomeTimeLineRequest&r)
    {
        return l.pageContext == r.pageContext && l.reportContext == r.reportContext;
    }
    inline bool operator!=(const CircleGetHomeTimeLineRequest&l, const CircleGetHomeTimeLineRequest&r)
    {
        return !(l == r);
    }

    struct CircleGetHomeTimeLineResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetHomeTimeLineResponse";
        }
        static string MD5()
        {
            return "da6ae8f146fe0c6ea1bd33d266b5f2c6";
        }
        CircleGetHomeTimeLineResponse()
        :errCode(0),pageContext(""),hasNextPage(true),reportContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(feedList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(userInfo, 4);
            _os.write(labelList, 5);
            _os.write(degreeAction, 6);
            _os.write(reportContext, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(feedList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(userInfo, 4, false);
            _is.read(labelList, 5, false);
            _is.read(degreeAction, 6, false);
            _is.read(reportContext, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(feedList,"feedList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(userInfo,"userInfo");
            _ds.display(labelList,"labelList");
            _ds.display(degreeAction,"degreeAction");
            _ds.display(reportContext,"reportContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(feedList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(labelList, true);
            _ds.displaySimple(degreeAction, true);
            _ds.displaySimple(reportContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::CirclePrimaryFeed> feedList;
        std::string pageContext;
        taf::Bool hasNextPage;
        jce::ActorInfo userInfo;
        vector<jce::DegreeLabel> labelList;
        jce::Action degreeAction;
        std::string reportContext;
    };
    inline bool operator==(const CircleGetHomeTimeLineResponse&l, const CircleGetHomeTimeLineResponse&r)
    {
        return l.errCode == r.errCode && l.feedList == r.feedList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.userInfo == r.userInfo && l.labelList == r.labelList && l.degreeAction == r.degreeAction && l.reportContext == r.reportContext;
    }
    inline bool operator!=(const CircleGetHomeTimeLineResponse&l, const CircleGetHomeTimeLineResponse&r)
    {
        return !(l == r);
    }

    struct CircleGetHotTimeLineRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetHotTimeLineRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        CircleGetHotTimeLineRequest()
        :pageContext(""),refreshContext(""),reportContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
            refreshContext = "";
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
            _os.write(refreshContext, 1);
            _os.write(reportContext, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
            _is.read(refreshContext, 1, false);
            _is.read(reportContext, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            _ds.display(refreshContext,"refreshContext");
            _ds.display(reportContext,"reportContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(refreshContext, true);
            _ds.displaySimple(reportContext, false);
            return _os;
        }
    public:
        std::string pageContext;
        std::string refreshContext;
        std::string reportContext;
    };
    inline bool operator==(const CircleGetHotTimeLineRequest&l, const CircleGetHotTimeLineRequest&r)
    {
        return l.pageContext == r.pageContext && l.refreshContext == r.refreshContext && l.reportContext == r.reportContext;
    }
    inline bool operator!=(const CircleGetHotTimeLineRequest&l, const CircleGetHotTimeLineRequest&r)
    {
        return !(l == r);
    }

    struct CircleGetHotTimeLineResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetHotTimeLineResponse";
        }
        static string MD5()
        {
            return "5517a28f4553a482327eb01a53015c3c";
        }
        CircleGetHotTimeLineResponse()
        :errCode(0),pageContext(""),hasNextPage(true),refreshContext(""),reportContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            refreshContext = "";
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(feedList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(userInfo, 4);
            _os.write(refreshContext, 5);
            _os.write(reportContext, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(feedList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(userInfo, 4, false);
            _is.read(refreshContext, 5, false);
            _is.read(reportContext, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(feedList,"feedList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(userInfo,"userInfo");
            _ds.display(refreshContext,"refreshContext");
            _ds.display(reportContext,"reportContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(feedList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(refreshContext, true);
            _ds.displaySimple(reportContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::CirclePrimaryFeed> feedList;
        std::string pageContext;
        taf::Bool hasNextPage;
        jce::ActorInfo userInfo;
        std::string refreshContext;
        std::string reportContext;
    };
    inline bool operator==(const CircleGetHotTimeLineResponse&l, const CircleGetHotTimeLineResponse&r)
    {
        return l.errCode == r.errCode && l.feedList == r.feedList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.userInfo == r.userInfo && l.refreshContext == r.refreshContext && l.reportContext == r.reportContext;
    }
    inline bool operator!=(const CircleGetHotTimeLineResponse&l, const CircleGetHotTimeLineResponse&r)
    {
        return !(l == r);
    }

    struct CircleGetCoralTimeLineRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetCoralTimeLineRequest";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        CircleGetCoralTimeLineRequest()
        :dataKey(""),vid(""),pageContext(""),reportContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            vid = "";
            pageContext = "";
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(vid, 1);
            _os.write(pageContext, 2);
            _os.write(reportContext, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(vid, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(reportContext, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(vid,"vid");
            _ds.display(pageContext,"pageContext");
            _ds.display(reportContext,"reportContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(reportContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string vid;
        std::string pageContext;
        std::string reportContext;
    };
    inline bool operator==(const CircleGetCoralTimeLineRequest&l, const CircleGetCoralTimeLineRequest&r)
    {
        return l.dataKey == r.dataKey && l.vid == r.vid && l.pageContext == r.pageContext && l.reportContext == r.reportContext;
    }
    inline bool operator!=(const CircleGetCoralTimeLineRequest&l, const CircleGetCoralTimeLineRequest&r)
    {
        return !(l == r);
    }

    struct CircleGetCoralTimeLineResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetCoralTimeLineResponse";
        }
        static string MD5()
        {
            return "01a6d5ae62b7083be0fbff0403288626";
        }
        CircleGetCoralTimeLineResponse()
        :errCode(0),pageContext(""),hasNextPage(true),reportContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(feedList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(userInfo, 4);
            _os.write(coralSummaryInfo, 5);
            _os.write(reportContext, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(feedList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(userInfo, 4, false);
            _is.read(coralSummaryInfo, 5, false);
            _is.read(reportContext, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(feedList,"feedList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(userInfo,"userInfo");
            _ds.display(coralSummaryInfo,"coralSummaryInfo");
            _ds.display(reportContext,"reportContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(feedList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(coralSummaryInfo, true);
            _ds.displaySimple(reportContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::CirclePrimaryFeed> feedList;
        std::string pageContext;
        taf::Bool hasNextPage;
        jce::ActorInfo userInfo;
        jce::CoralSummaryInfo coralSummaryInfo;
        std::string reportContext;
    };
    inline bool operator==(const CircleGetCoralTimeLineResponse&l, const CircleGetCoralTimeLineResponse&r)
    {
        return l.errCode == r.errCode && l.feedList == r.feedList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.userInfo == r.userInfo && l.coralSummaryInfo == r.coralSummaryInfo && l.reportContext == r.reportContext;
    }
    inline bool operator!=(const CircleGetCoralTimeLineResponse&l, const CircleGetCoralTimeLineResponse&r)
    {
        return !(l == r);
    }

    struct CircleGetStarTimeLineRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetStarTimeLineRequest";
        }
        static string MD5()
        {
            return "840352e49619ba48b01d23fb33292f2d";
        }
        CircleGetStarTimeLineRequest()
        :dataKey(""),vid(""),pageContext(""),scene(0),reportContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            vid = "";
            pageContext = "";
            scene = 0;
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(vid, 1);
            _os.write(pageContext, 2);
            _os.write(scene, 3);
            _os.write(reportContext, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(vid, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(scene, 3, false);
            _is.read(reportContext, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(vid,"vid");
            _ds.display(pageContext,"pageContext");
            _ds.display(scene,"scene");
            _ds.display(reportContext,"reportContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(scene, true);
            _ds.displaySimple(reportContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string vid;
        std::string pageContext;
        taf::Char scene;
        std::string reportContext;
    };
    inline bool operator==(const CircleGetStarTimeLineRequest&l, const CircleGetStarTimeLineRequest&r)
    {
        return l.dataKey == r.dataKey && l.vid == r.vid && l.pageContext == r.pageContext && l.scene == r.scene && l.reportContext == r.reportContext;
    }
    inline bool operator!=(const CircleGetStarTimeLineRequest&l, const CircleGetStarTimeLineRequest&r)
    {
        return !(l == r);
    }

    struct CircleGetStarTimeLineResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetStarTimeLineResponse";
        }
        static string MD5()
        {
            return "33105215cc244c960ac1a35675dd3c8a";
        }
        CircleGetStarTimeLineResponse()
        :errCode(0),pageContext(""),hasNextPage(true),reportContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(feedList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(reportContext, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(feedList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(reportContext, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(feedList,"feedList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(reportContext,"reportContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(feedList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(reportContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::CirclePrimaryFeed> feedList;
        std::string pageContext;
        taf::Bool hasNextPage;
        std::string reportContext;
    };
    inline bool operator==(const CircleGetStarTimeLineResponse&l, const CircleGetStarTimeLineResponse&r)
    {
        return l.errCode == r.errCode && l.feedList == r.feedList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.reportContext == r.reportContext;
    }
    inline bool operator!=(const CircleGetStarTimeLineResponse&l, const CircleGetStarTimeLineResponse&r)
    {
        return !(l == r);
    }

    struct CircleGetUserTimeLineRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetUserTimeLineRequest";
        }
        static string MD5()
        {
            return "02c8b7c8dd015754a72e807a03033d5e";
        }
        CircleGetUserTimeLineRequest()
        :userId(""),pageContext(""),reportContext(""),type(0)
        {
        }
        void resetDefautlt()
        {
            userId = "";
            pageContext = "";
            reportContext = "";
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(userId, 0);
            _os.write(pageContext, 1);
            _os.write(reportContext, 2);
            _os.write(type, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(userId, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(reportContext, 2, false);
            _is.read(type, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(userId,"userId");
            _ds.display(pageContext,"pageContext");
            _ds.display(reportContext,"reportContext");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(userId, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        std::string userId;
        std::string pageContext;
        std::string reportContext;
        taf::Int32 type;
    };
    inline bool operator==(const CircleGetUserTimeLineRequest&l, const CircleGetUserTimeLineRequest&r)
    {
        return l.userId == r.userId && l.pageContext == r.pageContext && l.reportContext == r.reportContext && l.type == r.type;
    }
    inline bool operator!=(const CircleGetUserTimeLineRequest&l, const CircleGetUserTimeLineRequest&r)
    {
        return !(l == r);
    }

    struct CircleGetUserTimeLineResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetUserTimeLineResponse";
        }
        static string MD5()
        {
            return "c4e5da2d6f10550be535a527afbc69ea";
        }
        CircleGetUserTimeLineResponse()
        :errCode(0),pageContext(""),hasNextPage(true),isFriend(0),reportContext(""),followStatus(0),followedNum(0),maxFollowNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            isFriend = 0;
            reportContext = "";
            followStatus = 0;
            followedNum = 0;
            maxFollowNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(feedList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(isFriend, 4);
            _os.write(userInfo, 5);
            _os.write(labelList, 6);
            _os.write(degreeAction, 7);
            _os.write(reportContext, 8);
            _os.write(followActionBars, 9);
            _os.write(followStatus, 10);
            _os.write(followedNum, 11);
            _os.write(maxFollowNum, 12);
            _os.write(actionList, 13);
            _os.write(medalMap, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(feedList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(isFriend, 4, false);
            _is.read(userInfo, 5, false);
            _is.read(labelList, 6, false);
            _is.read(degreeAction, 7, false);
            _is.read(reportContext, 8, false);
            _is.read(followActionBars, 9, false);
            _is.read(followStatus, 10, false);
            _is.read(followedNum, 11, false);
            _is.read(maxFollowNum, 12, false);
            _is.read(actionList, 13, false);
            _is.read(medalMap, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(feedList,"feedList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(isFriend,"isFriend");
            _ds.display(userInfo,"userInfo");
            _ds.display(labelList,"labelList");
            _ds.display(degreeAction,"degreeAction");
            _ds.display(reportContext,"reportContext");
            _ds.display(followActionBars,"followActionBars");
            _ds.display(followStatus,"followStatus");
            _ds.display(followedNum,"followedNum");
            _ds.display(maxFollowNum,"maxFollowNum");
            _ds.display(actionList,"actionList");
            _ds.display(medalMap,"medalMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(feedList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(isFriend, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(labelList, true);
            _ds.displaySimple(degreeAction, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(followActionBars, true);
            _ds.displaySimple(followStatus, true);
            _ds.displaySimple(followedNum, true);
            _ds.displaySimple(maxFollowNum, true);
            _ds.displaySimple(actionList, true);
            _ds.displaySimple(medalMap, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::CirclePrimaryFeed> feedList;
        std::string pageContext;
        taf::Bool hasNextPage;
        taf::Int32 isFriend;
        jce::ActorInfo userInfo;
        vector<jce::DegreeLabel> labelList;
        jce::Action degreeAction;
        std::string reportContext;
        jce::FollowActionBarsInfo followActionBars;
        taf::Int32 followStatus;
        taf::Int32 followedNum;
        taf::Int32 maxFollowNum;
        vector<jce::TextAction> actionList;
        map<std::string, jce::DegreeLabel> medalMap;
    };
    inline bool operator==(const CircleGetUserTimeLineResponse&l, const CircleGetUserTimeLineResponse&r)
    {
        return l.errCode == r.errCode && l.feedList == r.feedList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.isFriend == r.isFriend && l.userInfo == r.userInfo && l.labelList == r.labelList && l.degreeAction == r.degreeAction && l.reportContext == r.reportContext && l.followActionBars == r.followActionBars && l.followStatus == r.followStatus && l.followedNum == r.followedNum && l.maxFollowNum == r.maxFollowNum && l.actionList == r.actionList && l.medalMap == r.medalMap;
    }
    inline bool operator!=(const CircleGetUserTimeLineResponse&l, const CircleGetUserTimeLineResponse&r)
    {
        return !(l == r);
    }

    struct CircleGetUserTimeLineV3Request : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetUserTimeLineV3Request";
        }
        static string MD5()
        {
            return "02c8b7c8dd015754a72e807a03033d5e";
        }
        CircleGetUserTimeLineV3Request()
        :userId(""),pageContext(""),reportContext(""),type(0)
        {
        }
        void resetDefautlt()
        {
            userId = "";
            pageContext = "";
            reportContext = "";
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(userId, 0);
            _os.write(pageContext, 1);
            _os.write(reportContext, 2);
            _os.write(type, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(userId, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(reportContext, 2, false);
            _is.read(type, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(userId,"userId");
            _ds.display(pageContext,"pageContext");
            _ds.display(reportContext,"reportContext");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(userId, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        std::string userId;
        std::string pageContext;
        std::string reportContext;
        taf::Int32 type;
    };
    inline bool operator==(const CircleGetUserTimeLineV3Request&l, const CircleGetUserTimeLineV3Request&r)
    {
        return l.userId == r.userId && l.pageContext == r.pageContext && l.reportContext == r.reportContext && l.type == r.type;
    }
    inline bool operator!=(const CircleGetUserTimeLineV3Request&l, const CircleGetUserTimeLineV3Request&r)
    {
        return !(l == r);
    }

    struct CircleGetUserTimeLineV3Response : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetUserTimeLineV3Response";
        }
        static string MD5()
        {
            return "395f8b3551a2e9c5c827d5a812d32ad6";
        }
        CircleGetUserTimeLineV3Response()
        :errCode(0),pageContext(""),reportContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            reportContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(reportContext, 3);
            _os.write(hasNextPage, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(reportContext, 3, false);
            _is.read(hasNextPage, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(reportContext,"reportContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        std::string reportContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const CircleGetUserTimeLineV3Response&l, const CircleGetUserTimeLineV3Response&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.reportContext == r.reportContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const CircleGetUserTimeLineV3Response&l, const CircleGetUserTimeLineV3Response&r)
    {
        return !(l == r);
    }

    struct CircleGetVideoTimeLineRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetVideoTimeLineRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        CircleGetVideoTimeLineRequest()
        :dataKey(""),pageContext(""),vid("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
            _os.write(vid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(vid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
        std::string vid;
    };
    inline bool operator==(const CircleGetVideoTimeLineRequest&l, const CircleGetVideoTimeLineRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.vid == r.vid;
    }
    inline bool operator!=(const CircleGetVideoTimeLineRequest&l, const CircleGetVideoTimeLineRequest&r)
    {
        return !(l == r);
    }

    struct CircleGetVideoTimeLineResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetVideoTimeLineResponse";
        }
        static string MD5()
        {
            return "12e5861a246303b12f4b5a5d20da7213";
        }
        CircleGetVideoTimeLineResponse()
        :errCode(0),hasNextPage(true),pageContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasNextPage = true;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(resultList, 1);
            _os.write(hasNextPage, 2);
            _os.write(pageContext, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(resultList, 1, false);
            _is.read(hasNextPage, 2, false);
            _is.read(pageContext, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(resultList,"resultList");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(resultList, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::PrimaryFeedList> resultList;
        taf::Bool hasNextPage;
        std::string pageContext;
    };
    inline bool operator==(const CircleGetVideoTimeLineResponse&l, const CircleGetVideoTimeLineResponse&r)
    {
        return l.errCode == r.errCode && l.resultList == r.resultList && l.hasNextPage == r.hasNextPage && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const CircleGetVideoTimeLineResponse&l, const CircleGetVideoTimeLineResponse&r)
    {
        return !(l == r);
    }

    struct CircleGetPrimaryFeedDetailRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetPrimaryFeedDetailRequest";
        }
        static string MD5()
        {
            return "a08a83d6aa1be9a0a075e3321f53c9aa";
        }
        CircleGetPrimaryFeedDetailRequest()
        :feedId(""),pageContext(""),dataKey(""),commentId(""),commentTime(0),type(0),rankIndex(0)
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            pageContext = "";
            dataKey = "";
            commentId = "";
            commentTime = 0;
            type = 0;
            rankIndex = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(pageContext, 1);
            _os.write(dataKey, 3);
            _os.write(commentId, 4);
            _os.write(commentTime, 5);
            _os.write(type, 6);
            _os.write(rankIndex, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(dataKey, 3, false);
            _is.read(commentId, 4, false);
            _is.read(commentTime, 5, false);
            _is.read(type, 6, false);
            _is.read(rankIndex, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(pageContext,"pageContext");
            _ds.display(dataKey,"dataKey");
            _ds.display(commentId,"commentId");
            _ds.display(commentTime,"commentTime");
            _ds.display(type,"type");
            _ds.display(rankIndex,"rankIndex");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(commentId, true);
            _ds.displaySimple(commentTime, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(rankIndex, false);
            return _os;
        }
    public:
        std::string feedId;
        std::string pageContext;
        std::string dataKey;
        std::string commentId;
        taf::Int64 commentTime;
        taf::Int32 type;
        taf::Int32 rankIndex;
    };
    inline bool operator==(const CircleGetPrimaryFeedDetailRequest&l, const CircleGetPrimaryFeedDetailRequest&r)
    {
        return l.feedId == r.feedId && l.pageContext == r.pageContext && l.dataKey == r.dataKey && l.commentId == r.commentId && l.commentTime == r.commentTime && l.type == r.type && l.rankIndex == r.rankIndex;
    }
    inline bool operator!=(const CircleGetPrimaryFeedDetailRequest&l, const CircleGetPrimaryFeedDetailRequest&r)
    {
        return !(l == r);
    }

    struct CircleGetPrimaryFeedDetailResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetPrimaryFeedDetailResponse";
        }
        static string MD5()
        {
            return "318b761acb56f032b09de243dde70216";
        }
        CircleGetPrimaryFeedDetailResponse()
        :errCode(0),pageContext(""),hasNextPage(true),hasPreviousPage(false)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            hasPreviousPage = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(primaryFeed, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(hasPreviousPage, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(primaryFeed, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(hasPreviousPage, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(primaryFeed,"primaryFeed");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(hasPreviousPage,"hasPreviousPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(primaryFeed, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(hasPreviousPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::CirclePrimaryFeed primaryFeed;
        std::string pageContext;
        taf::Bool hasNextPage;
        taf::Bool hasPreviousPage;
    };
    inline bool operator==(const CircleGetPrimaryFeedDetailResponse&l, const CircleGetPrimaryFeedDetailResponse&r)
    {
        return l.errCode == r.errCode && l.primaryFeed == r.primaryFeed && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.hasPreviousPage == r.hasPreviousPage;
    }
    inline bool operator!=(const CircleGetPrimaryFeedDetailResponse&l, const CircleGetPrimaryFeedDetailResponse&r)
    {
        return !(l == r);
    }

    struct CircleGetNotifyMessageListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetNotifyMessageListRequest";
        }
        static string MD5()
        {
            return "c3c010126b78068fe5053a4e3246ab56";
        }
        CircleGetNotifyMessageListRequest()
        :type(0),isReadOption(true),lastSeqId(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            isReadOption = true;
            lastSeqId = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(isReadOption, 1);
            _os.write(lastSeqId, 2);
            _os.write(pageContext, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(isReadOption, 1, true);
            _is.read(lastSeqId, 2, false);
            _is.read(pageContext, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(isReadOption,"isReadOption");
            _ds.display(lastSeqId,"lastSeqId");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(isReadOption, true);
            _ds.displaySimple(lastSeqId, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 type;
        taf::Bool isReadOption;
        std::string lastSeqId;
        std::string pageContext;
    };
    inline bool operator==(const CircleGetNotifyMessageListRequest&l, const CircleGetNotifyMessageListRequest&r)
    {
        return l.type == r.type && l.isReadOption == r.isReadOption && l.lastSeqId == r.lastSeqId && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const CircleGetNotifyMessageListRequest&l, const CircleGetNotifyMessageListRequest&r)
    {
        return !(l == r);
    }

    struct CircleGetNotifyMessageListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetNotifyMessageListResponse";
        }
        static string MD5()
        {
            return "72fb8bc5baad86131a0eb301f6d32712";
        }
        CircleGetNotifyMessageListResponse()
        :errCode(0),hasNextPage(true),pageContext(""),total(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasNextPage = true;
            pageContext = "";
            total = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(hasNextPage, 1);
            _os.write(pageContext, 2);
            _os.write(total, 3);
            _os.write(msgList, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(hasNextPage, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(total, 3, false);
            _is.read(msgList, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(pageContext,"pageContext");
            _ds.display(total,"total");
            _ds.display(msgList,"msgList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(total, true);
            _ds.displaySimple(msgList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Bool hasNextPage;
        std::string pageContext;
        taf::Int32 total;
        vector<jce::CircleNotifyMessage> msgList;
    };
    inline bool operator==(const CircleGetNotifyMessageListResponse&l, const CircleGetNotifyMessageListResponse&r)
    {
        return l.errCode == r.errCode && l.hasNextPage == r.hasNextPage && l.pageContext == r.pageContext && l.total == r.total && l.msgList == r.msgList;
    }
    inline bool operator!=(const CircleGetNotifyMessageListResponse&l, const CircleGetNotifyMessageListResponse&r)
    {
        return !(l == r);
    }

    struct CircleGetUnReadMsgCountRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetUnReadMsgCountRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        CircleGetUnReadMsgCountRequest()
        :lastSeqId("")
        {
        }
        void resetDefautlt()
        {
            lastSeqId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lastSeqId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lastSeqId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lastSeqId,"lastSeqId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lastSeqId, false);
            return _os;
        }
    public:
        std::string lastSeqId;
    };
    inline bool operator==(const CircleGetUnReadMsgCountRequest&l, const CircleGetUnReadMsgCountRequest&r)
    {
        return l.lastSeqId == r.lastSeqId;
    }
    inline bool operator!=(const CircleGetUnReadMsgCountRequest&l, const CircleGetUnReadMsgCountRequest&r)
    {
        return !(l == r);
    }

    struct CircleGetUnReadMsgCountResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetUnReadMsgCountResponse";
        }
        static string MD5()
        {
            return "cc6b76ae0325922ef0136deb45921b3a";
        }
        CircleGetUnReadMsgCountResponse()
        :errCode(0),num(0),headUrl(""),showType(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            num = 0;
            headUrl = "";
            showType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(num, 1);
            _os.write(headUrl, 2);
            _os.write(showType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(num, 1, false);
            _is.read(headUrl, 2, false);
            _is.read(showType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(num,"num");
            _ds.display(headUrl,"headUrl");
            _ds.display(showType,"showType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(num, true);
            _ds.displaySimple(headUrl, true);
            _ds.displaySimple(showType, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 num;
        std::string headUrl;
        taf::Int32 showType;
    };
    inline bool operator==(const CircleGetUnReadMsgCountResponse&l, const CircleGetUnReadMsgCountResponse&r)
    {
        return l.errCode == r.errCode && l.num == r.num && l.headUrl == r.headUrl && l.showType == r.showType;
    }
    inline bool operator!=(const CircleGetUnReadMsgCountResponse&l, const CircleGetUnReadMsgCountResponse&r)
    {
        return !(l == r);
    }

    struct CircleSharerInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleSharerInfoRequest";
        }
        static string MD5()
        {
            return "19cfb41a66359c894f1dcce10dba2a65";
        }
        CircleSharerInfoRequest()
        :readKey(""),type(0),vid("")
        {
        }
        void resetDefautlt()
        {
            readKey = "";
            type = 0;
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(readKey, 0);
            _os.write(type, 1);
            _os.write(vid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(readKey, 0, true);
            _is.read(type, 1, false);
            _is.read(vid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(readKey,"readKey");
            _ds.display(type,"type");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(readKey, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string readKey;
        taf::Int32 type;
        std::string vid;
    };
    inline bool operator==(const CircleSharerInfoRequest&l, const CircleSharerInfoRequest&r)
    {
        return l.readKey == r.readKey && l.type == r.type && l.vid == r.vid;
    }
    inline bool operator!=(const CircleSharerInfoRequest&l, const CircleSharerInfoRequest&r)
    {
        return !(l == r);
    }

    struct CircleSharerInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleSharerInfoResponse";
        }
        static string MD5()
        {
            return "8ae543c77c64ea717a2a4e36766df3b8";
        }
        CircleSharerInfoResponse()
        :errCode(0),shareCount(0),strWording("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            shareCount = 0;
            strWording = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(shareCount, 1);
            _os.write(strWording, 2);
            _os.write(userList, 3);
            _os.write(lastSharedFeed, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(shareCount, 1, true);
            _is.read(strWording, 2, false);
            _is.read(userList, 3, false);
            _is.read(lastSharedFeed, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(shareCount,"shareCount");
            _ds.display(strWording,"strWording");
            _ds.display(userList,"userList");
            _ds.display(lastSharedFeed,"lastSharedFeed");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(shareCount, true);
            _ds.displaySimple(strWording, true);
            _ds.displaySimple(userList, true);
            _ds.displaySimple(lastSharedFeed, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 shareCount;
        std::string strWording;
        vector<jce::ActorInfo> userList;
        jce::CirclePrimaryFeed lastSharedFeed;
    };
    inline bool operator==(const CircleSharerInfoResponse&l, const CircleSharerInfoResponse&r)
    {
        return l.errCode == r.errCode && l.shareCount == r.shareCount && l.strWording == r.strWording && l.userList == r.userList && l.lastSharedFeed == r.lastSharedFeed;
    }
    inline bool operator!=(const CircleSharerInfoResponse&l, const CircleSharerInfoResponse&r)
    {
        return !(l == r);
    }

    struct CircleMsgFollowRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleMsgFollowRequest";
        }
        static string MD5()
        {
            return "9eba77ebd42595859993a29c0a2d29b6";
        }
        CircleMsgFollowRequest()
        :cVersion(0),ddwUserid(0),ddwMsgid(0),dwTime(0)
        {
        }
        void resetDefautlt()
        {
            cVersion = 0;
            ddwUserid = 0;
            ddwMsgid = 0;
            dwTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cVersion, 0);
            _os.write(ddwUserid, 1);
            _os.write(ddwMsgid, 2);
            _os.write(dwTime, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cVersion, 0, true);
            _is.read(ddwUserid, 1, true);
            _is.read(ddwMsgid, 2, true);
            _is.read(dwTime, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cVersion,"cVersion");
            _ds.display(ddwUserid,"ddwUserid");
            _ds.display(ddwMsgid,"ddwMsgid");
            _ds.display(dwTime,"dwTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cVersion, true);
            _ds.displaySimple(ddwUserid, true);
            _ds.displaySimple(ddwMsgid, true);
            _ds.displaySimple(dwTime, false);
            return _os;
        }
    public:
        taf::UInt8 cVersion;
        taf::Int64 ddwUserid;
        taf::Int64 ddwMsgid;
        taf::UInt32 dwTime;
    };
    inline bool operator==(const CircleMsgFollowRequest&l, const CircleMsgFollowRequest&r)
    {
        return l.cVersion == r.cVersion && l.ddwUserid == r.ddwUserid && l.ddwMsgid == r.ddwMsgid && l.dwTime == r.dwTime;
    }
    inline bool operator!=(const CircleMsgFollowRequest&l, const CircleMsgFollowRequest&r)
    {
        return !(l == r);
    }

    struct CircleMsgFollowResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleMsgFollowResponse";
        }
        static string MD5()
        {
            return "4be63de683cd8d1e69fa16645e87ca38";
        }
        CircleMsgFollowResponse()
        :cResult(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            cResult = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cResult, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cResult, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cResult,"cResult");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cResult, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::UInt8 cResult;
        std::string strErrMsg;
    };
    inline bool operator==(const CircleMsgFollowResponse&l, const CircleMsgFollowResponse&r)
    {
        return l.cResult == r.cResult && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const CircleMsgFollowResponse&l, const CircleMsgFollowResponse&r)
    {
        return !(l == r);
    }

    struct CircleGetRelationListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetRelationListRequest";
        }
        static string MD5()
        {
            return "19cfb41a66359c894f1dcce10dba2a65";
        }
        CircleGetRelationListRequest()
        :pageContext(""),type(0),userId("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
            type = 0;
            userId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
            _os.write(type, 1);
            _os.write(userId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
            _is.read(type, 1, false);
            _is.read(userId, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            _ds.display(type,"type");
            _ds.display(userId,"userId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(userId, false);
            return _os;
        }
    public:
        std::string pageContext;
        taf::Int32 type;
        std::string userId;
    };
    inline bool operator==(const CircleGetRelationListRequest&l, const CircleGetRelationListRequest&r)
    {
        return l.pageContext == r.pageContext && l.type == r.type && l.userId == r.userId;
    }
    inline bool operator!=(const CircleGetRelationListRequest&l, const CircleGetRelationListRequest&r)
    {
        return !(l == r);
    }

    struct CircleGetRelationListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetRelationListResponse";
        }
        static string MD5()
        {
            return "99011f95bcf848c6379fe0c92d8db4dc";
        }
        CircleGetRelationListResponse()
        :errCode(0),hasNextPage(true),pageContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasNextPage = true;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(vecUserList, 1);
            _os.write(hasNextPage, 2);
            _os.write(pageContext, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(vecUserList, 1, true);
            _is.read(hasNextPage, 2, false);
            _is.read(pageContext, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(vecUserList,"vecUserList");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(vecUserList, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::RelationUserInfo> vecUserList;
        taf::Bool hasNextPage;
        std::string pageContext;
    };
    inline bool operator==(const CircleGetRelationListResponse&l, const CircleGetRelationListResponse&r)
    {
        return l.errCode == r.errCode && l.vecUserList == r.vecUserList && l.hasNextPage == r.hasNextPage && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const CircleGetRelationListResponse&l, const CircleGetRelationListResponse&r)
    {
        return !(l == r);
    }

    struct CircleGetDefBlackListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetDefBlackListRequest";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        CircleGetDefBlackListRequest()
        :flag(0),pageContext("")
        {
        }
        void resetDefautlt()
        {
            flag = 0;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(flag, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(flag, 0, false);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(flag,"flag");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(flag, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 flag;
        std::string pageContext;
    };
    inline bool operator==(const CircleGetDefBlackListRequest&l, const CircleGetDefBlackListRequest&r)
    {
        return l.flag == r.flag && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const CircleGetDefBlackListRequest&l, const CircleGetDefBlackListRequest&r)
    {
        return !(l == r);
    }

    struct CircleGetDefBlackListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleGetDefBlackListResponse";
        }
        static string MD5()
        {
            return "99011f95bcf848c6379fe0c92d8db4dc";
        }
        CircleGetDefBlackListResponse()
        :errCode(0),hasNextPage(true),pageContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasNextPage = true;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(vecUserList, 1);
            _os.write(hasNextPage, 2);
            _os.write(pageContext, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(vecUserList, 1, true);
            _is.read(hasNextPage, 2, false);
            _is.read(pageContext, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(vecUserList,"vecUserList");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(vecUserList, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::RelationUserInfo> vecUserList;
        taf::Bool hasNextPage;
        std::string pageContext;
    };
    inline bool operator==(const CircleGetDefBlackListResponse&l, const CircleGetDefBlackListResponse&r)
    {
        return l.errCode == r.errCode && l.vecUserList == r.vecUserList && l.hasNextPage == r.hasNextPage && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const CircleGetDefBlackListResponse&l, const CircleGetDefBlackListResponse&r)
    {
        return !(l == r);
    }

    struct AddOneBlacklistRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AddOneBlacklistRequest";
        }
        static string MD5()
        {
            return "4100c3b4be8f07b53408f7b27a5215ea";
        }
        AddOneBlacklistRequest()
        :iVerson(0),ddwUin(0)
        {
        }
        void resetDefautlt()
        {
            iVerson = 0;
            ddwUin = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iVerson, 0);
            _os.write(ddwUin, 1);
            _os.write(mapBlacklistUin, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iVerson, 0, true);
            _is.read(ddwUin, 1, true);
            _is.read(mapBlacklistUin, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iVerson,"iVerson");
            _ds.display(ddwUin,"ddwUin");
            _ds.display(mapBlacklistUin,"mapBlacklistUin");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iVerson, true);
            _ds.displaySimple(ddwUin, true);
            _ds.displaySimple(mapBlacklistUin, false);
            return _os;
        }
    public:
        taf::Int32 iVerson;
        taf::Int64 ddwUin;
        map<taf::Int64, taf::Int32> mapBlacklistUin;
    };
    inline bool operator==(const AddOneBlacklistRequest&l, const AddOneBlacklistRequest&r)
    {
        return l.iVerson == r.iVerson && l.ddwUin == r.ddwUin && l.mapBlacklistUin == r.mapBlacklistUin;
    }
    inline bool operator!=(const AddOneBlacklistRequest&l, const AddOneBlacklistRequest&r)
    {
        return !(l == r);
    }

    struct AddOneBlacklistResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AddOneBlacklistResponse";
        }
        static string MD5()
        {
            return "5916821b82c7b2328a84edbd206421d0";
        }
        AddOneBlacklistResponse()
        :iVerson(0),ddwUin(0),iRetCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iVerson = 0;
            ddwUin = 0;
            iRetCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iVerson, 0);
            _os.write(ddwUin, 1);
            _os.write(iRetCode, 2);
            _os.write(strErrMsg, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iVerson, 0, true);
            _is.read(ddwUin, 1, true);
            _is.read(iRetCode, 2, true);
            _is.read(strErrMsg, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iVerson,"iVerson");
            _ds.display(ddwUin,"ddwUin");
            _ds.display(iRetCode,"iRetCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iVerson, true);
            _ds.displaySimple(ddwUin, true);
            _ds.displaySimple(iRetCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 iVerson;
        taf::Int32 ddwUin;
        taf::Int32 iRetCode;
        std::string strErrMsg;
    };
    inline bool operator==(const AddOneBlacklistResponse&l, const AddOneBlacklistResponse&r)
    {
        return l.iVerson == r.iVerson && l.ddwUin == r.ddwUin && l.iRetCode == r.iRetCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const AddOneBlacklistResponse&l, const AddOneBlacklistResponse&r)
    {
        return !(l == r);
    }

    struct CircleDetectNewRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleDetectNewRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        CircleDetectNewRequest()
        :flag("")
        {
        }
        void resetDefautlt()
        {
            flag = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(flag, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(flag, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(flag,"flag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(flag, false);
            return _os;
        }
    public:
        std::string flag;
    };
    inline bool operator==(const CircleDetectNewRequest&l, const CircleDetectNewRequest&r)
    {
        return l.flag == r.flag;
    }
    inline bool operator!=(const CircleDetectNewRequest&l, const CircleDetectNewRequest&r)
    {
        return !(l == r);
    }

    struct CircleDetectNewResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CircleDetectNewResponse";
        }
        static string MD5()
        {
            return "813f7cf8041cfa050eef80e3a572e674";
        }
        CircleDetectNewResponse()
        :errCode(0),feedId(""),feedTime(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            feedId = "";
            feedTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(feedId, 1);
            _os.write(feedTime, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(feedId, 1, true);
            _is.read(feedTime, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(feedId,"feedId");
            _ds.display(feedTime,"feedTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(feedTime, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string feedId;
        taf::Int64 feedTime;
    };
    inline bool operator==(const CircleDetectNewResponse&l, const CircleDetectNewResponse&r)
    {
        return l.errCode == r.errCode && l.feedId == r.feedId && l.feedTime == r.feedTime;
    }
    inline bool operator!=(const CircleDetectNewResponse&l, const CircleDetectNewResponse&r)
    {
        return !(l == r);
    }

    struct CirclePlayerShareTipsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CirclePlayerShareTipsRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        CirclePlayerShareTipsRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const CirclePlayerShareTipsRequest&l, const CirclePlayerShareTipsRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const CirclePlayerShareTipsRequest&l, const CirclePlayerShareTipsRequest&r)
    {
        return !(l == r);
    }

    struct CirclePlayerShareTipsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CirclePlayerShareTipsResponse";
        }
        static string MD5()
        {
            return "fcbebef4f26b85424d14d8a87ad46ffa";
        }
        CirclePlayerShareTipsResponse()
        :errCode(0),timeIntervalToEnd(0),showTips("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            timeIntervalToEnd = 0;
            showTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(timeIntervalToEnd, 1);
            _os.write(showTips, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(timeIntervalToEnd, 1, true);
            _is.read(showTips, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(timeIntervalToEnd,"timeIntervalToEnd");
            _ds.display(showTips,"showTips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(timeIntervalToEnd, true);
            _ds.displaySimple(showTips, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int64 timeIntervalToEnd;
        std::string showTips;
    };
    inline bool operator==(const CirclePlayerShareTipsResponse&l, const CirclePlayerShareTipsResponse&r)
    {
        return l.errCode == r.errCode && l.timeIntervalToEnd == r.timeIntervalToEnd && l.showTips == r.showTips;
    }
    inline bool operator!=(const CirclePlayerShareTipsResponse&l, const CirclePlayerShareTipsResponse&r)
    {
        return !(l == r);
    }

    struct MiniVideoListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MiniVideoListRequest";
        }
        static string MD5()
        {
            return "8aef3711ca93f682d5e01ca071c1d888";
        }
        MiniVideoListRequest()
        :lid(""),cid(""),vid(""),pageContext(""),fantuanId(""),dataKey(""),reportContext("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
            pageContext = "";
            fantuanId = "";
            dataKey = "";
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
            _os.write(pageContext, 3);
            _os.write(fantuanId, 4);
            _os.write(dataKey, 5);
            _os.write(reportContext, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, true);
            _is.read(cid, 1, true);
            _is.read(vid, 2, true);
            _is.read(pageContext, 3, false);
            _is.read(fantuanId, 4, false);
            _is.read(dataKey, 5, false);
            _is.read(reportContext, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(pageContext,"pageContext");
            _ds.display(fantuanId,"fantuanId");
            _ds.display(dataKey,"dataKey");
            _ds.display(reportContext,"reportContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(fantuanId, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(reportContext, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
        std::string pageContext;
        std::string fantuanId;
        std::string dataKey;
        std::string reportContext;
    };
    inline bool operator==(const MiniVideoListRequest&l, const MiniVideoListRequest&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.pageContext == r.pageContext && l.fantuanId == r.fantuanId && l.dataKey == r.dataKey && l.reportContext == r.reportContext;
    }
    inline bool operator!=(const MiniVideoListRequest&l, const MiniVideoListRequest&r)
    {
        return !(l == r);
    }

    struct MiniVideoListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MiniVideoListResponse";
        }
        static string MD5()
        {
            return "33105215cc244c960ac1a35675dd3c8a";
        }
        MiniVideoListResponse()
        :errCode(0),pageContext(""),hasNextPage(true),reportContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(feedList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(reportContext, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(feedList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(reportContext, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(feedList,"feedList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(reportContext,"reportContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(feedList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(reportContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::CirclePrimaryFeed> feedList;
        std::string pageContext;
        taf::Bool hasNextPage;
        std::string reportContext;
    };
    inline bool operator==(const MiniVideoListResponse&l, const MiniVideoListResponse&r)
    {
        return l.errCode == r.errCode && l.feedList == r.feedList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.reportContext == r.reportContext;
    }
    inline bool operator!=(const MiniVideoListResponse&l, const MiniVideoListResponse&r)
    {
        return !(l == r);
    }

    struct UserHomeSelfVideoONAViewsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserHomeSelfVideoONAViewsRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        UserHomeSelfVideoONAViewsRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const UserHomeSelfVideoONAViewsRequest&l, const UserHomeSelfVideoONAViewsRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const UserHomeSelfVideoONAViewsRequest&l, const UserHomeSelfVideoONAViewsRequest&r)
    {
        return !(l == r);
    }

    struct UserHomeSelfVideoONAViewsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserHomeSelfVideoONAViewsResponse";
        }
        static string MD5()
        {
            return "ad84605aa73491ad1d4df9f463d573b5";
        }
        UserHomeSelfVideoONAViewsResponse()
        :errCode(0),pageContext(""),hasNextPage(true),title("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(title, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(title, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
        std::string title;
    };
    inline bool operator==(const UserHomeSelfVideoONAViewsResponse&l, const UserHomeSelfVideoONAViewsResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.title == r.title;
    }
    inline bool operator!=(const UserHomeSelfVideoONAViewsResponse&l, const UserHomeSelfVideoONAViewsResponse&r)
    {
        return !(l == r);
    }

    struct PicPreViewRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PicPreViewRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        PicPreViewRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const PicPreViewRequest&l, const PicPreViewRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const PicPreViewRequest&l, const PicPreViewRequest&r)
    {
        return !(l == r);
    }

    struct PicPreViewResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PicPreViewResponse";
        }
        static string MD5()
        {
            return "f46c4cbac2d7fab6eb64cb8cb91f86d5";
        }
        PicPreViewResponse()
        :errCode(0),feedId(""),content(""),commentCount(0),likeCount(0),picLikeDataKey(""),isLike(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            feedId = "";
            content = "";
            commentCount = 0;
            likeCount = 0;
            picLikeDataKey = "";
            isLike = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(feedId, 1);
            _os.write(actorInfo, 2);
            _os.write(shareItem, 3);
            _os.write(content, 4);
            _os.write(commentCount, 5);
            _os.write(likeCount, 6);
            _os.write(feedAction, 7);
            _os.write(picLikeDataKey, 8);
            _os.write(isLike, 9);
            _os.write(actionBars, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(feedId, 1, true);
            _is.read(actorInfo, 2, false);
            _is.read(shareItem, 3, false);
            _is.read(content, 4, false);
            _is.read(commentCount, 5, false);
            _is.read(likeCount, 6, false);
            _is.read(feedAction, 7, false);
            _is.read(picLikeDataKey, 8, false);
            _is.read(isLike, 9, false);
            _is.read(actionBars, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(feedId,"feedId");
            _ds.display(actorInfo,"actorInfo");
            _ds.display(shareItem,"shareItem");
            _ds.display(content,"content");
            _ds.display(commentCount,"commentCount");
            _ds.display(likeCount,"likeCount");
            _ds.display(feedAction,"feedAction");
            _ds.display(picLikeDataKey,"picLikeDataKey");
            _ds.display(isLike,"isLike");
            _ds.display(actionBars,"actionBars");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(actorInfo, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(commentCount, true);
            _ds.displaySimple(likeCount, true);
            _ds.displaySimple(feedAction, true);
            _ds.displaySimple(picLikeDataKey, true);
            _ds.displaySimple(isLike, true);
            _ds.displaySimple(actionBars, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string feedId;
        jce::ActorInfo actorInfo;
        jce::ShareItem shareItem;
        std::string content;
        taf::Int32 commentCount;
        taf::Int32 likeCount;
        jce::Action feedAction;
        std::string picLikeDataKey;
        taf::Bool isLike;
        vector<jce::ActionBarInfo> actionBars;
    };
    inline bool operator==(const PicPreViewResponse&l, const PicPreViewResponse&r)
    {
        return l.errCode == r.errCode && l.feedId == r.feedId && l.actorInfo == r.actorInfo && l.shareItem == r.shareItem && l.content == r.content && l.commentCount == r.commentCount && l.likeCount == r.likeCount && l.feedAction == r.feedAction && l.picLikeDataKey == r.picLikeDataKey && l.isLike == r.isLike && l.actionBars == r.actionBars;
    }
    inline bool operator!=(const PicPreViewResponse&l, const PicPreViewResponse&r)
    {
        return !(l == r);
    }

    struct PicLikeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PicLikeRequest";
        }
        static string MD5()
        {
            return "192736e054959780b94f2eea6e6ca75c";
        }
        PicLikeRequest()
        :feedId(""),dataKey(""),isLike(false),seq("")
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            dataKey = "";
            isLike = false;
            seq = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(dataKey, 1);
            _os.write(isLike, 2);
            _os.write(seq, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(dataKey, 1, true);
            _is.read(isLike, 2, true);
            _is.read(seq, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(dataKey,"dataKey");
            _ds.display(isLike,"isLike");
            _ds.display(seq,"seq");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(isLike, true);
            _ds.displaySimple(seq, false);
            return _os;
        }
    public:
        std::string feedId;
        std::string dataKey;
        taf::Bool isLike;
        std::string seq;
    };
    inline bool operator==(const PicLikeRequest&l, const PicLikeRequest&r)
    {
        return l.feedId == r.feedId && l.dataKey == r.dataKey && l.isLike == r.isLike && l.seq == r.seq;
    }
    inline bool operator!=(const PicLikeRequest&l, const PicLikeRequest&r)
    {
        return !(l == r);
    }

    struct PicLikeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PicLikeResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        PicLikeResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const PicLikeResponse&l, const PicLikeResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const PicLikeResponse&l, const PicLikeResponse&r)
    {
        return !(l == r);
    }


}

#define jce_CircleNotifyMessage_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.seqid,b.seqid);jce_copy_struct(a.rootFeedId,b.rootFeedId);jce_copy_struct(a.commentFeed,b.commentFeed);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.type,b.type);jce_copy_struct(a.rootContent,b.rootContent);jce_copy_struct(a.action,b.action);

#define jce_PrimaryFeedList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedTitle,b.feedTitle);jce_copy_struct(a.feedList,b.feedList);

#define jce_RelationUserInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.user,b.user);jce_copy_struct(a.newFlag,b.newFlag);jce_copy_struct(a.actorNameAddition,b.actorNameAddition);jce_copy_struct(a.status,b.status);

#define jce_CircleLongVideo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.duration,b.duration);jce_copy_struct(a.title,b.title);jce_copy_struct(a.pic,b.pic);jce_copy_struct(a.playUrl,b.playUrl);jce_copy_struct(a.playright,b.playright);jce_copy_struct(a.secondtitle,b.secondtitle);jce_copy_struct(a.isFromFlag,b.isFromFlag);

#define jce_FtExtInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ftMsgid,b.ftMsgid);jce_copy_struct(a.ftFloor,b.ftFloor);jce_copy_struct(a.ftId,b.ftId);jce_copy_struct(a.ftTitle,b.ftTitle);jce_copy_struct(a.ftCreateTime,b.ftCreateTime);jce_copy_struct(a.ftFlags,b.ftFlags);jce_copy_struct(a.ftVideoInfo,b.ftVideoInfo);

#define jce_FollowActionBarsInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dokiBar,b.dokiBar);jce_copy_struct(a.followBar,b.followBar);jce_copy_struct(a.fansBar,b.fansBar);jce_copy_struct(a.favoratesBar,b.favoratesBar);

#define jce_CirclePubMsgRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.content,b.content);jce_copy_struct(a.imageList,b.imageList);jce_copy_struct(a.blackList,b.blackList);jce_copy_struct(a.title,b.title);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.videoList,b.videoList);jce_copy_struct(a.commentId,b.commentId);jce_copy_struct(a.videoInfo,b.videoInfo);jce_copy_struct(a.targetId,b.targetId);jce_copy_struct(a.checktype,b.checktype);jce_copy_struct(a.shareMask,b.shareMask);jce_copy_struct(a.shareInfo,b.shareInfo);jce_copy_struct(a.shareToken,b.shareToken);jce_copy_struct(a.cfrom,b.cfrom);jce_copy_struct(a.longVideoList,b.longVideoList);jce_copy_struct(a.ftExtInfo,b.ftExtInfo);jce_copy_struct(a.voiceList,b.voiceList);jce_copy_struct(a.dmContentKey,b.dmContentKey);jce_copy_struct(a.userStarInfo,b.userStarInfo);jce_copy_struct(a.dwTimePoint,b.dwTimePoint);jce_copy_struct(a.wxScore,b.wxScore);jce_copy_struct(a.voteInfo,b.voteInfo);jce_copy_struct(a.fanRelateList,b.fanRelateList);jce_copy_struct(a.omInfo,b.omInfo);

#define jce_CirclePubMsgResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.feed,b.feed);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.shareErrCode,b.shareErrCode);jce_copy_struct(a.shareCircleUrl,b.shareCircleUrl);

#define jce_CirclePostCommentRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.content,b.content);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.commentId,b.commentId);jce_copy_struct(a.targetId,b.targetId);jce_copy_struct(a.checktype,b.checktype);jce_copy_struct(a.cfrom,b.cfrom);jce_copy_struct(a.imageList,b.imageList);jce_copy_struct(a.ftExtInfo,b.ftExtInfo);jce_copy_struct(a.userStarInfo,b.userStarInfo);

#define jce_CirclePostCommentResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.comment,b.comment);jce_copy_struct(a.seq,b.seq);

#define jce_CircleMsgLikeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.likeFlag,b.likeFlag);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.cfrom,b.cfrom);jce_copy_struct(a.ftExtInfo,b.ftExtInfo);jce_copy_struct(a.userStarInfo,b.userStarInfo);

#define jce_CircleMsgLikeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.seq,b.seq);

#define jce_CircleMsgReportRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.reportType,b.reportType);jce_copy_struct(a.description,b.description);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.cfrom,b.cfrom);jce_copy_struct(a.ftExtInfo,b.ftExtInfo);

#define jce_CircleMsgReportResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.seq,b.seq);

#define jce_CircleMsgDeleteRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.modifyType,b.modifyType);jce_copy_struct(a.cfrom,b.cfrom);jce_copy_struct(a.ftExtInfo,b.ftExtInfo);

#define jce_CircleMsgDeleteResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.seq,b.seq);

#define jce_CircleGetVideoSelectListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.flag,b.flag);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_CircleGetVideoSelectListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.coverDataMap,b.coverDataMap);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_CircleGetScreenShotsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.type,b.type);

#define jce_CircleGetScreenShotsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.imageList,b.imageList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.videoList,b.videoList);

#define jce_CircleGetHomeTimeLineRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.reportContext,b.reportContext);

#define jce_CircleGetHomeTimeLineResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.feedList,b.feedList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.labelList,b.labelList);jce_copy_struct(a.degreeAction,b.degreeAction);jce_copy_struct(a.reportContext,b.reportContext);

#define jce_CircleGetHotTimeLineRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.refreshContext,b.refreshContext);jce_copy_struct(a.reportContext,b.reportContext);

#define jce_CircleGetHotTimeLineResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.feedList,b.feedList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.refreshContext,b.refreshContext);jce_copy_struct(a.reportContext,b.reportContext);

#define jce_CircleGetCoralTimeLineRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.reportContext,b.reportContext);

#define jce_CircleGetCoralTimeLineResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.feedList,b.feedList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.coralSummaryInfo,b.coralSummaryInfo);jce_copy_struct(a.reportContext,b.reportContext);

#define jce_CircleGetStarTimeLineRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.scene,b.scene);jce_copy_struct(a.reportContext,b.reportContext);

#define jce_CircleGetStarTimeLineResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.feedList,b.feedList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.reportContext,b.reportContext);

#define jce_CircleGetUserTimeLineRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.userId,b.userId);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.type,b.type);

#define jce_CircleGetUserTimeLineResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.feedList,b.feedList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.isFriend,b.isFriend);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.labelList,b.labelList);jce_copy_struct(a.degreeAction,b.degreeAction);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.followActionBars,b.followActionBars);jce_copy_struct(a.followStatus,b.followStatus);jce_copy_struct(a.followedNum,b.followedNum);jce_copy_struct(a.maxFollowNum,b.maxFollowNum);jce_copy_struct(a.actionList,b.actionList);jce_copy_struct(a.medalMap,b.medalMap);

#define jce_CircleGetUserTimeLineV3Request_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.userId,b.userId);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.type,b.type);

#define jce_CircleGetUserTimeLineV3Response_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_CircleGetVideoTimeLineRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.vid,b.vid);

#define jce_CircleGetVideoTimeLineResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.resultList,b.resultList);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_CircleGetPrimaryFeedDetailRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.commentId,b.commentId);jce_copy_struct(a.commentTime,b.commentTime);jce_copy_struct(a.type,b.type);jce_copy_struct(a.rankIndex,b.rankIndex);

#define jce_CircleGetPrimaryFeedDetailResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.primaryFeed,b.primaryFeed);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.hasPreviousPage,b.hasPreviousPage);

#define jce_CircleGetNotifyMessageListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.isReadOption,b.isReadOption);jce_copy_struct(a.lastSeqId,b.lastSeqId);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_CircleGetNotifyMessageListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.total,b.total);jce_copy_struct(a.msgList,b.msgList);

#define jce_CircleGetUnReadMsgCountRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lastSeqId,b.lastSeqId);

#define jce_CircleGetUnReadMsgCountResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.num,b.num);jce_copy_struct(a.headUrl,b.headUrl);jce_copy_struct(a.showType,b.showType);

#define jce_CircleSharerInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.readKey,b.readKey);jce_copy_struct(a.type,b.type);jce_copy_struct(a.vid,b.vid);

#define jce_CircleSharerInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.shareCount,b.shareCount);jce_copy_struct(a.strWording,b.strWording);jce_copy_struct(a.userList,b.userList);jce_copy_struct(a.lastSharedFeed,b.lastSharedFeed);

#define jce_CircleMsgFollowRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cVersion,b.cVersion);jce_copy_struct(a.ddwUserid,b.ddwUserid);jce_copy_struct(a.ddwMsgid,b.ddwMsgid);jce_copy_struct(a.dwTime,b.dwTime);

#define jce_CircleMsgFollowResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cResult,b.cResult);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define jce_CircleGetRelationListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.type,b.type);jce_copy_struct(a.userId,b.userId);

#define jce_CircleGetRelationListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.vecUserList,b.vecUserList);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_CircleGetDefBlackListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.flag,b.flag);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_CircleGetDefBlackListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.vecUserList,b.vecUserList);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_AddOneBlacklistRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iVerson,b.iVerson);jce_copy_struct(a.ddwUin,b.ddwUin);jce_copy_struct(a.mapBlacklistUin,b.mapBlacklistUin);

#define jce_AddOneBlacklistResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iVerson,b.iVerson);jce_copy_struct(a.ddwUin,b.ddwUin);jce_copy_struct(a.iRetCode,b.iRetCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define jce_CircleDetectNewRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.flag,b.flag);

#define jce_CircleDetectNewResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.feedTime,b.feedTime);

#define jce_CirclePlayerShareTipsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_CirclePlayerShareTipsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.timeIntervalToEnd,b.timeIntervalToEnd);jce_copy_struct(a.showTips,b.showTips);

#define jce_MiniVideoListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.fantuanId,b.fantuanId);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.reportContext,b.reportContext);

#define jce_MiniVideoListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.feedList,b.feedList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.reportContext,b.reportContext);

#define jce_UserHomeSelfVideoONAViewsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_UserHomeSelfVideoONAViewsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.title,b.title);

#define jce_PicPreViewRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_PicPreViewResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.actorInfo,b.actorInfo);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.content,b.content);jce_copy_struct(a.commentCount,b.commentCount);jce_copy_struct(a.likeCount,b.likeCount);jce_copy_struct(a.feedAction,b.feedAction);jce_copy_struct(a.picLikeDataKey,b.picLikeDataKey);jce_copy_struct(a.isLike,b.isLike);jce_copy_struct(a.actionBars,b.actionBars);

#define jce_PicLikeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.isLike,b.isLike);jce_copy_struct(a.seq,b.seq);

#define jce_PicLikeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);



#endif
