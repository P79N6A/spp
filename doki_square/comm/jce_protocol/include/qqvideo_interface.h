// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_interface.jce'
// **********************************************************************

#ifndef __QQVIDEO_INTERFACE_H_
#define __QQVIDEO_INTERFACE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_cmd.h"
#include "qqvideo_ona.h"
#include "qqvideo_common.h"
#include "qqvideo_game.h"
#include "qqvideo_user_info.h"
#include "qqvideo_ad.h"


namespace jce
{
    struct ChannelListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelListRequest";
        }
        static string MD5()
        {
            return "97597c1f6dbc929e45f9e05488008b67";
        }
        ChannelListRequest()
        :version(0),type(0),personalFlag(0),personalListCreateTime(0),dataKey(""),userSortType(0)
        {
        }
        void resetDefautlt()
        {
            version = 0;
            type = 0;
            personalFlag = 0;
            personalListCreateTime = 0;
            dataKey = "";
            userSortType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(version, 0);
            _os.write(type, 1);
            _os.write(personalFlag, 2);
            _os.write(personalListCreateTime, 3);
            _os.write(dataKey, 4);
            _os.write(userSortType, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(version, 0, true);
            _is.read(type, 1, false);
            _is.read(personalFlag, 2, false);
            _is.read(personalListCreateTime, 3, false);
            _is.read(dataKey, 4, false);
            _is.read(userSortType, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(version,"version");
            _ds.display(type,"type");
            _ds.display(personalFlag,"personalFlag");
            _ds.display(personalListCreateTime,"personalListCreateTime");
            _ds.display(dataKey,"dataKey");
            _ds.display(userSortType,"userSortType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(version, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(personalFlag, true);
            _ds.displaySimple(personalListCreateTime, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(userSortType, false);
            return _os;
        }
    public:
        taf::Int32 version;
        taf::Int32 type;
        taf::Int32 personalFlag;
        taf::Int64 personalListCreateTime;
        std::string dataKey;
        taf::Int32 userSortType;
    };
    inline bool operator==(const ChannelListRequest&l, const ChannelListRequest&r)
    {
        return l.version == r.version && l.type == r.type && l.personalFlag == r.personalFlag && l.personalListCreateTime == r.personalListCreateTime && l.dataKey == r.dataKey && l.userSortType == r.userSortType;
    }
    inline bool operator!=(const ChannelListRequest&l, const ChannelListRequest&r)
    {
        return !(l == r);
    }

    struct ChannelListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelListResponse";
        }
        static string MD5()
        {
            return "495cb449f9b90d4b08482ba9fca32940";
        }
        ChannelListResponse()
        :errCode(0),version(0),serverSortType(0),areaType(0),defaultChannelId(""),navBucketId("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            version = 0;
            serverSortType = 0;
            areaType = 0;
            defaultChannelId = "";
            navBucketId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(version, 1);
            _os.write(list, 2);
            _os.write(personalizeData, 3);
            _os.write(serverSortType, 4);
            _os.write(categoryList, 5);
            _os.write(areaType, 6);
            _os.write(defaultChannelId, 7);
            _os.write(navBucketId, 8);
            _os.write(action, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(version, 1, true);
            _is.read(list, 2, false);
            _is.read(personalizeData, 3, false);
            _is.read(serverSortType, 4, false);
            _is.read(categoryList, 5, false);
            _is.read(areaType, 6, false);
            _is.read(defaultChannelId, 7, false);
            _is.read(navBucketId, 8, false);
            _is.read(action, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(version,"version");
            _ds.display(list,"list");
            _ds.display(personalizeData,"personalizeData");
            _ds.display(serverSortType,"serverSortType");
            _ds.display(categoryList,"categoryList");
            _ds.display(areaType,"areaType");
            _ds.display(defaultChannelId,"defaultChannelId");
            _ds.display(navBucketId,"navBucketId");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(version, true);
            _ds.displaySimple(list, true);
            _ds.displaySimple(personalizeData, true);
            _ds.displaySimple(serverSortType, true);
            _ds.displaySimple(categoryList, true);
            _ds.displaySimple(areaType, true);
            _ds.displaySimple(defaultChannelId, true);
            _ds.displaySimple(navBucketId, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 version;
        vector<jce::ChannelListItem> list;
        jce::ChannelListPersonalizeData personalizeData;
        taf::Int32 serverSortType;
        vector<jce::ChannelCategory> categoryList;
        taf::Int32 areaType;
        std::string defaultChannelId;
        std::string navBucketId;
        jce::Action action;
    };
    inline bool operator==(const ChannelListResponse&l, const ChannelListResponse&r)
    {
        return l.errCode == r.errCode && l.version == r.version && l.list == r.list && l.personalizeData == r.personalizeData && l.serverSortType == r.serverSortType && l.categoryList == r.categoryList && l.areaType == r.areaType && l.defaultChannelId == r.defaultChannelId && l.navBucketId == r.navBucketId && l.action == r.action;
    }
    inline bool operator!=(const ChannelListResponse&l, const ChannelListResponse&r)
    {
        return !(l == r);
    }

    struct ChannelDataRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelDataRequest";
        }
        static string MD5()
        {
            return "0b6404c75123ec4b2a9aa230b6c47ef6";
        }
        ChannelDataRequest()
        :channelItemId(""),pageContext(""),refreshContext(""),filtertype(0),hasCache(0),lastGroupId(""),hotWordTimeStamp(""),reportContext(""),dataKey(""),refreshType(0),channelSubKey(""),insertPosterKey(""),loadTypeForRec(0),userSortType(0),channelMode(0),searchDataKey(""),displayScene(0),subDataKey(""),isPageVisible(0)
        {
        }
        void resetDefautlt()
        {
            channelItemId = "";
            pageContext = "";
            refreshContext = "";
            filtertype = 0;
            hasCache = 0;
            lastGroupId = "";
            hotWordTimeStamp = "";
            reportContext = "";
            dataKey = "";
            refreshType = 0;
            channelSubKey = "";
            insertPosterKey = "";
            loadTypeForRec = 0;
            userSortType = 0;
            channelMode = 0;
            searchDataKey = "";
            displayScene = 0;
            subDataKey = "";
            isPageVisible = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(channelItemId, 0);
            _os.write(pageContext, 1);
            _os.write(refreshContext, 2);
            _os.write(filtertype, 3);
            _os.write(hasCache, 4);
            _os.write(lastGroupId, 5);
            _os.write(hotWordTimeStamp, 6);
            _os.write(reportContext, 7);
            _os.write(dataKey, 8);
            _os.write(refreshType, 9);
            _os.write(channelSubKey, 10);
            _os.write(insertPosterKey, 11);
            _os.write(dataKeyList, 12);
            _os.write(loadTypeForRec, 13);
            _os.write(userSortType, 14);
            _os.write(adContextList, 15);
            _os.write(channelMode, 16);
            _os.write(searchDataKey, 17);
            _os.write(displayScene, 18);
            _os.write(adRequestInfo, 19);
            _os.write(sdkRequestInfo, 20);
            _os.write(subDataKey, 21);
            _os.write(isPageVisible, 22);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(channelItemId, 0, true);
            _is.read(pageContext, 1, true);
            _is.read(refreshContext, 2, false);
            _is.read(filtertype, 3, false);
            _is.read(hasCache, 4, false);
            _is.read(lastGroupId, 5, false);
            _is.read(hotWordTimeStamp, 6, false);
            _is.read(reportContext, 7, false);
            _is.read(dataKey, 8, false);
            _is.read(refreshType, 9, false);
            _is.read(channelSubKey, 10, false);
            _is.read(insertPosterKey, 11, false);
            _is.read(dataKeyList, 12, false);
            _is.read(loadTypeForRec, 13, false);
            _is.read(userSortType, 14, false);
            _is.read(adContextList, 15, false);
            _is.read(channelMode, 16, false);
            _is.read(searchDataKey, 17, false);
            _is.read(displayScene, 18, false);
            _is.read(adRequestInfo, 19, false);
            _is.read(sdkRequestInfo, 20, false);
            _is.read(subDataKey, 21, false);
            _is.read(isPageVisible, 22, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(channelItemId,"channelItemId");
            _ds.display(pageContext,"pageContext");
            _ds.display(refreshContext,"refreshContext");
            _ds.display(filtertype,"filtertype");
            _ds.display(hasCache,"hasCache");
            _ds.display(lastGroupId,"lastGroupId");
            _ds.display(hotWordTimeStamp,"hotWordTimeStamp");
            _ds.display(reportContext,"reportContext");
            _ds.display(dataKey,"dataKey");
            _ds.display(refreshType,"refreshType");
            _ds.display(channelSubKey,"channelSubKey");
            _ds.display(insertPosterKey,"insertPosterKey");
            _ds.display(dataKeyList,"dataKeyList");
            _ds.display(loadTypeForRec,"loadTypeForRec");
            _ds.display(userSortType,"userSortType");
            _ds.display(adContextList,"adContextList");
            _ds.display(channelMode,"channelMode");
            _ds.display(searchDataKey,"searchDataKey");
            _ds.display(displayScene,"displayScene");
            _ds.display(adRequestInfo,"adRequestInfo");
            _ds.display(sdkRequestInfo,"sdkRequestInfo");
            _ds.display(subDataKey,"subDataKey");
            _ds.display(isPageVisible,"isPageVisible");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(channelItemId, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(refreshContext, true);
            _ds.displaySimple(filtertype, true);
            _ds.displaySimple(hasCache, true);
            _ds.displaySimple(lastGroupId, true);
            _ds.displaySimple(hotWordTimeStamp, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(refreshType, true);
            _ds.displaySimple(channelSubKey, true);
            _ds.displaySimple(insertPosterKey, true);
            _ds.displaySimple(dataKeyList, true);
            _ds.displaySimple(loadTypeForRec, true);
            _ds.displaySimple(userSortType, true);
            _ds.displaySimple(adContextList, true);
            _ds.displaySimple(channelMode, true);
            _ds.displaySimple(searchDataKey, true);
            _ds.displaySimple(displayScene, true);
            _ds.displaySimple(adRequestInfo, true);
            _ds.displaySimple(sdkRequestInfo, true);
            _ds.displaySimple(subDataKey, true);
            _ds.displaySimple(isPageVisible, false);
            return _os;
        }
    public:
        std::string channelItemId;
        std::string pageContext;
        std::string refreshContext;
        taf::Int32 filtertype;
        taf::Int32 hasCache;
        std::string lastGroupId;
        std::string hotWordTimeStamp;
        std::string reportContext;
        std::string dataKey;
        taf::Int32 refreshType;
        std::string channelSubKey;
        std::string insertPosterKey;
        vector<std::string> dataKeyList;
        taf::Int32 loadTypeForRec;
        taf::Int32 userSortType;
        vector<std::string> adContextList;
        taf::Int32 channelMode;
        std::string searchDataKey;
        taf::Int32 displayScene;
        jce::AdRequestInfo adRequestInfo;
        jce::AdSdkRequestInfo sdkRequestInfo;
        std::string subDataKey;
        taf::Int32 isPageVisible;
    };
    inline bool operator==(const ChannelDataRequest&l, const ChannelDataRequest&r)
    {
        return l.channelItemId == r.channelItemId && l.pageContext == r.pageContext && l.refreshContext == r.refreshContext && l.filtertype == r.filtertype && l.hasCache == r.hasCache && l.lastGroupId == r.lastGroupId && l.hotWordTimeStamp == r.hotWordTimeStamp && l.reportContext == r.reportContext && l.dataKey == r.dataKey && l.refreshType == r.refreshType && l.channelSubKey == r.channelSubKey && l.insertPosterKey == r.insertPosterKey && l.dataKeyList == r.dataKeyList && l.loadTypeForRec == r.loadTypeForRec && l.userSortType == r.userSortType && l.adContextList == r.adContextList && l.channelMode == r.channelMode && l.searchDataKey == r.searchDataKey && l.displayScene == r.displayScene && l.adRequestInfo == r.adRequestInfo && l.sdkRequestInfo == r.sdkRequestInfo && l.subDataKey == r.subDataKey && l.isPageVisible == r.isPageVisible;
    }
    inline bool operator!=(const ChannelDataRequest&l, const ChannelDataRequest&r)
    {
        return !(l == r);
    }

    struct ChannelDataResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelDataResponse";
        }
        static string MD5()
        {
            return "43faed71bce631ccd1ae07968f30e7fd";
        }
        ChannelDataResponse()
        :errCode(0),hasNextPage(true),pageContext(""),refreshContext(""),refreshWording(""),optType(0),refreshType(0),dataType(0),showLastReadPositionFlag(0),reportContext(""),timeOut(0),autoPlayIndex(-1),flowLayoutType(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasNextPage = true;
            pageContext = "";
            refreshContext = "";
            refreshWording = "";
            optType = 0;
            refreshType = 0;
            dataType = 0;
            showLastReadPositionFlag = 0;
            reportContext = "";
            timeOut = 0;
            autoPlayIndex = -1;
            flowLayoutType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(hasNextPage, 1);
            _os.write(pageContext, 2);
            _os.write(data, 3);
            _os.write(refreshContext, 4);
            _os.write(refreshWording, 5);
            _os.write(optType, 6);
            _os.write(refreshType, 7);
            _os.write(hotWordInfo, 8);
            _os.write(dataType, 9);
            _os.write(showLastReadPositionFlag, 10);
            _os.write(reportContext, 11);
            _os.write(timeOut, 12);
            _os.write(autoPlayIndex, 13);
            _os.write(eventItem, 14);
            _os.write(adContext, 15);
            _os.write(promotionInfo, 16);
            _os.write(channnelExtraInfo, 17);
            _os.write(channelInsertItem, 18);
            _os.write(flowLayoutType, 19);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(hasNextPage, 1, true);
            _is.read(pageContext, 2, true);
            _is.read(data, 3, false);
            _is.read(refreshContext, 4, false);
            _is.read(refreshWording, 5, false);
            _is.read(optType, 6, false);
            _is.read(refreshType, 7, false);
            _is.read(hotWordInfo, 8, false);
            _is.read(dataType, 9, false);
            _is.read(showLastReadPositionFlag, 10, false);
            _is.read(reportContext, 11, false);
            _is.read(timeOut, 12, false);
            _is.read(autoPlayIndex, 13, false);
            _is.read(eventItem, 14, false);
            _is.read(adContext, 15, false);
            _is.read(promotionInfo, 16, false);
            _is.read(channnelExtraInfo, 17, false);
            _is.read(channelInsertItem, 18, false);
            _is.read(flowLayoutType, 19, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(pageContext,"pageContext");
            _ds.display(data,"data");
            _ds.display(refreshContext,"refreshContext");
            _ds.display(refreshWording,"refreshWording");
            _ds.display(optType,"optType");
            _ds.display(refreshType,"refreshType");
            _ds.display(hotWordInfo,"hotWordInfo");
            _ds.display(dataType,"dataType");
            _ds.display(showLastReadPositionFlag,"showLastReadPositionFlag");
            _ds.display(reportContext,"reportContext");
            _ds.display(timeOut,"timeOut");
            _ds.display(autoPlayIndex,"autoPlayIndex");
            _ds.display(eventItem,"eventItem");
            _ds.display(adContext,"adContext");
            _ds.display(promotionInfo,"promotionInfo");
            _ds.display(channnelExtraInfo,"channnelExtraInfo");
            _ds.display(channelInsertItem,"channelInsertItem");
            _ds.display(flowLayoutType,"flowLayoutType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(data, true);
            _ds.displaySimple(refreshContext, true);
            _ds.displaySimple(refreshWording, true);
            _ds.displaySimple(optType, true);
            _ds.displaySimple(refreshType, true);
            _ds.displaySimple(hotWordInfo, true);
            _ds.displaySimple(dataType, true);
            _ds.displaySimple(showLastReadPositionFlag, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(timeOut, true);
            _ds.displaySimple(autoPlayIndex, true);
            _ds.displaySimple(eventItem, true);
            _ds.displaySimple(adContext, true);
            _ds.displaySimple(promotionInfo, true);
            _ds.displaySimple(channnelExtraInfo, true);
            _ds.displaySimple(channelInsertItem, true);
            _ds.displaySimple(flowLayoutType, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Bool hasNextPage;
        std::string pageContext;
        vector<jce::TempletLine> data;
        std::string refreshContext;
        std::string refreshWording;
        taf::Char optType;
        taf::Int32 refreshType;
        jce::SearchHotWordInfo hotWordInfo;
        taf::Int32 dataType;
        taf::Int32 showLastReadPositionFlag;
        std::string reportContext;
        taf::Int32 timeOut;
        taf::Int32 autoPlayIndex;
        jce::ChannelEventInfo eventItem;
        vector<std::string> adContext;
        jce::PromotionEventInfo promotionInfo;
        jce::ChannnelExtraInfo channnelExtraInfo;
        jce::ChannelInsertItem channelInsertItem;
        taf::Char flowLayoutType;
    };
    inline bool operator==(const ChannelDataResponse&l, const ChannelDataResponse&r)
    {
        return l.errCode == r.errCode && l.hasNextPage == r.hasNextPage && l.pageContext == r.pageContext && l.data == r.data && l.refreshContext == r.refreshContext && l.refreshWording == r.refreshWording && l.optType == r.optType && l.refreshType == r.refreshType && l.hotWordInfo == r.hotWordInfo && l.dataType == r.dataType && l.showLastReadPositionFlag == r.showLastReadPositionFlag && l.reportContext == r.reportContext && l.timeOut == r.timeOut && l.autoPlayIndex == r.autoPlayIndex && l.eventItem == r.eventItem && l.adContext == r.adContext && l.promotionInfo == r.promotionInfo && l.channnelExtraInfo == r.channnelExtraInfo && l.channelInsertItem == r.channelInsertItem && l.flowLayoutType == r.flowLayoutType;
    }
    inline bool operator!=(const ChannelDataResponse&l, const ChannelDataResponse&r)
    {
        return !(l == r);
    }

    struct DetailFeedFlowRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DetailFeedFlowRequest";
        }
        static string MD5()
        {
            return "32f893a00c564ec1489b06503a16e9f8";
        }
        DetailFeedFlowRequest()
        :dataKey(""),pageContext(""),refreshContext(""),filtertype(0),reportContext(""),vid("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
            refreshContext = "";
            filtertype = 0;
            reportContext = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
            _os.write(refreshContext, 2);
            _os.write(filtertype, 3);
            _os.write(reportContext, 4);
            _os.write(vid, 5);
            _os.write(adContextList, 6);
            _os.write(adRequestInfo, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, true);
            _is.read(refreshContext, 2, false);
            _is.read(filtertype, 3, false);
            _is.read(reportContext, 4, false);
            _is.read(vid, 5, false);
            _is.read(adContextList, 6, false);
            _is.read(adRequestInfo, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(refreshContext,"refreshContext");
            _ds.display(filtertype,"filtertype");
            _ds.display(reportContext,"reportContext");
            _ds.display(vid,"vid");
            _ds.display(adContextList,"adContextList");
            _ds.display(adRequestInfo,"adRequestInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(refreshContext, true);
            _ds.displaySimple(filtertype, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(adContextList, true);
            _ds.displaySimple(adRequestInfo, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
        std::string refreshContext;
        taf::Int32 filtertype;
        std::string reportContext;
        std::string vid;
        vector<std::string> adContextList;
        jce::AdRequestInfo adRequestInfo;
    };
    inline bool operator==(const DetailFeedFlowRequest&l, const DetailFeedFlowRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.refreshContext == r.refreshContext && l.filtertype == r.filtertype && l.reportContext == r.reportContext && l.vid == r.vid && l.adContextList == r.adContextList && l.adRequestInfo == r.adRequestInfo;
    }
    inline bool operator!=(const DetailFeedFlowRequest&l, const DetailFeedFlowRequest&r)
    {
        return !(l == r);
    }

    struct DetailFeedFlowResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DetailFeedFlowResponse";
        }
        static string MD5()
        {
            return "2fbe2ab02003560df3411a2267c13faa";
        }
        DetailFeedFlowResponse()
        :errCode(0),hasNextPage(true),pageContext(""),refreshContext(""),reportContext(""),adChannelId("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasNextPage = true;
            pageContext = "";
            refreshContext = "";
            reportContext = "";
            adChannelId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(hasNextPage, 1);
            _os.write(pageContext, 2);
            _os.write(data, 3);
            _os.write(refreshContext, 4);
            _os.write(reportContext, 5);
            _os.write(adContext, 6);
            _os.write(adChannelId, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(hasNextPage, 1, true);
            _is.read(pageContext, 2, true);
            _is.read(data, 3, false);
            _is.read(refreshContext, 4, false);
            _is.read(reportContext, 5, false);
            _is.read(adContext, 6, false);
            _is.read(adChannelId, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(pageContext,"pageContext");
            _ds.display(data,"data");
            _ds.display(refreshContext,"refreshContext");
            _ds.display(reportContext,"reportContext");
            _ds.display(adContext,"adContext");
            _ds.display(adChannelId,"adChannelId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(data, true);
            _ds.displaySimple(refreshContext, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(adContext, true);
            _ds.displaySimple(adChannelId, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Bool hasNextPage;
        std::string pageContext;
        vector<jce::TempletLine> data;
        std::string refreshContext;
        std::string reportContext;
        vector<std::string> adContext;
        std::string adChannelId;
    };
    inline bool operator==(const DetailFeedFlowResponse&l, const DetailFeedFlowResponse&r)
    {
        return l.errCode == r.errCode && l.hasNextPage == r.hasNextPage && l.pageContext == r.pageContext && l.data == r.data && l.refreshContext == r.refreshContext && l.reportContext == r.reportContext && l.adContext == r.adContext && l.adChannelId == r.adChannelId;
    }
    inline bool operator!=(const DetailFeedFlowResponse&l, const DetailFeedFlowResponse&r)
    {
        return !(l == r);
    }

    struct VideoDetailsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoDetailsRequest";
        }
        static string MD5()
        {
            return "e8017bac670de899912e7419af317781";
        }
        VideoDetailsRequest()
        :lid(""),cid(""),vid(""),historyVid(""),expansion(""),outWebId(""),sessionId("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
            historyVid = "";
            expansion = "";
            outWebId = "";
            sessionId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
            _os.write(historyVid, 3);
            _os.write(expansion, 4);
            _os.write(outWebId, 5);
            _os.write(sessionId, 6);
            _os.write(adContextList, 7);
            _os.write(adRequestInfo, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, false);
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
            _is.read(historyVid, 3, false);
            _is.read(expansion, 4, false);
            _is.read(outWebId, 5, false);
            _is.read(sessionId, 6, false);
            _is.read(adContextList, 7, false);
            _is.read(adRequestInfo, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(historyVid,"historyVid");
            _ds.display(expansion,"expansion");
            _ds.display(outWebId,"outWebId");
            _ds.display(sessionId,"sessionId");
            _ds.display(adContextList,"adContextList");
            _ds.display(adRequestInfo,"adRequestInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(historyVid, true);
            _ds.displaySimple(expansion, true);
            _ds.displaySimple(outWebId, true);
            _ds.displaySimple(sessionId, true);
            _ds.displaySimple(adContextList, true);
            _ds.displaySimple(adRequestInfo, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
        std::string historyVid;
        std::string expansion;
        std::string outWebId;
        std::string sessionId;
        vector<std::string> adContextList;
        jce::AdRequestInfo adRequestInfo;
    };
    inline bool operator==(const VideoDetailsRequest&l, const VideoDetailsRequest&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.historyVid == r.historyVid && l.expansion == r.expansion && l.outWebId == r.outWebId && l.sessionId == r.sessionId && l.adContextList == r.adContextList && l.adRequestInfo == r.adRequestInfo;
    }
    inline bool operator!=(const VideoDetailsRequest&l, const VideoDetailsRequest&r)
    {
        return !(l == r);
    }

    struct VideoDetailsExtraInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoDetailsExtraInfo";
        }
        static string MD5()
        {
            return "959e5f645613d6d7c2f3708766a01b87";
        }
        VideoDetailsExtraInfo()
        :shouldShowEyeProtectedBanner(true)
        {
        }
        void resetDefautlt()
        {
            shouldShowEyeProtectedBanner = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(shouldShowEyeProtectedBanner, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(shouldShowEyeProtectedBanner, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(shouldShowEyeProtectedBanner,"shouldShowEyeProtectedBanner");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(shouldShowEyeProtectedBanner, false);
            return _os;
        }
    public:
        taf::Bool shouldShowEyeProtectedBanner;
    };
    inline bool operator==(const VideoDetailsExtraInfo&l, const VideoDetailsExtraInfo&r)
    {
        return l.shouldShowEyeProtectedBanner == r.shouldShowEyeProtectedBanner;
    }
    inline bool operator!=(const VideoDetailsExtraInfo&l, const VideoDetailsExtraInfo&r)
    {
        return !(l == r);
    }

    struct VideoDetailsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoDetailsResponse";
        }
        static string MD5()
        {
            return "a1afa9d1f631c1e35a7089aa0a9ca554";
        }
        VideoDetailsResponse()
        :errCode(0),vid(""),lid(""),cid(""),defaultVideoDataKey(""),defaultCoverDataKey(""),expansion(""),forceVideoDataKey(""),feedFlowDataKey(""),pageType(0),detailsFlowDataKey("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            vid = "";
            lid = "";
            cid = "";
            defaultVideoDataKey = "";
            defaultCoverDataKey = "";
            expansion = "";
            forceVideoDataKey = "";
            feedFlowDataKey = "";
            pageType = 0;
            detailsFlowDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(vid, 2);
            _os.write(lid, 3);
            _os.write(cid, 4);
            _os.write(videoDataMap, 5);
            _os.write(coverDataMap, 6);
            _os.write(introductionMap, 7);
            _os.write(defaultVideoDataKey, 8);
            _os.write(defaultCoverDataKey, 9);
            _os.write(outWebList, 10);
            _os.write(actorDataMap, 11);
            _os.write(outWebToastList, 12);
            _os.write(videoCoverMap, 13);
            _os.write(detailMoreInfo, 14);
            _os.write(expansion, 15);
            _os.write(forceVideoDataKey, 16);
            _os.write(sequentPlayKeys, 17);
            _os.write(feedFlowDataKey, 18);
            _os.write(markScoreDesc, 19);
            _os.write(pageType, 20);
            _os.write(multiLanguageInfo, 21);
            _os.write(navigationMap, 22);
            _os.write(detailsFlowDataKey, 23);
            _os.write(extraInfo, 24);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(vid, 2, false);
            _is.read(lid, 3, false);
            _is.read(cid, 4, false);
            _is.read(videoDataMap, 5, false);
            _is.read(coverDataMap, 6, false);
            _is.read(introductionMap, 7, false);
            _is.read(defaultVideoDataKey, 8, false);
            _is.read(defaultCoverDataKey, 9, false);
            _is.read(outWebList, 10, false);
            _is.read(actorDataMap, 11, false);
            _is.read(outWebToastList, 12, false);
            _is.read(videoCoverMap, 13, false);
            _is.read(detailMoreInfo, 14, false);
            _is.read(expansion, 15, false);
            _is.read(forceVideoDataKey, 16, false);
            _is.read(sequentPlayKeys, 17, false);
            _is.read(feedFlowDataKey, 18, false);
            _is.read(markScoreDesc, 19, false);
            _is.read(pageType, 20, false);
            _is.read(multiLanguageInfo, 21, false);
            _is.read(navigationMap, 22, false);
            _is.read(detailsFlowDataKey, 23, false);
            _is.read(extraInfo, 24, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(vid,"vid");
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(videoDataMap,"videoDataMap");
            _ds.display(coverDataMap,"coverDataMap");
            _ds.display(introductionMap,"introductionMap");
            _ds.display(defaultVideoDataKey,"defaultVideoDataKey");
            _ds.display(defaultCoverDataKey,"defaultCoverDataKey");
            _ds.display(outWebList,"outWebList");
            _ds.display(actorDataMap,"actorDataMap");
            _ds.display(outWebToastList,"outWebToastList");
            _ds.display(videoCoverMap,"videoCoverMap");
            _ds.display(detailMoreInfo,"detailMoreInfo");
            _ds.display(expansion,"expansion");
            _ds.display(forceVideoDataKey,"forceVideoDataKey");
            _ds.display(sequentPlayKeys,"sequentPlayKeys");
            _ds.display(feedFlowDataKey,"feedFlowDataKey");
            _ds.display(markScoreDesc,"markScoreDesc");
            _ds.display(pageType,"pageType");
            _ds.display(multiLanguageInfo,"multiLanguageInfo");
            _ds.display(navigationMap,"navigationMap");
            _ds.display(detailsFlowDataKey,"detailsFlowDataKey");
            _ds.display(extraInfo,"extraInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(videoDataMap, true);
            _ds.displaySimple(coverDataMap, true);
            _ds.displaySimple(introductionMap, true);
            _ds.displaySimple(defaultVideoDataKey, true);
            _ds.displaySimple(defaultCoverDataKey, true);
            _ds.displaySimple(outWebList, true);
            _ds.displaySimple(actorDataMap, true);
            _ds.displaySimple(outWebToastList, true);
            _ds.displaySimple(videoCoverMap, true);
            _ds.displaySimple(detailMoreInfo, true);
            _ds.displaySimple(expansion, true);
            _ds.displaySimple(forceVideoDataKey, true);
            _ds.displaySimple(sequentPlayKeys, true);
            _ds.displaySimple(feedFlowDataKey, true);
            _ds.displaySimple(markScoreDesc, true);
            _ds.displaySimple(pageType, true);
            _ds.displaySimple(multiLanguageInfo, true);
            _ds.displaySimple(navigationMap, true);
            _ds.displaySimple(detailsFlowDataKey, true);
            _ds.displaySimple(extraInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string vid;
        std::string lid;
        std::string cid;
        map<std::string, jce::VideoDataList> videoDataMap;
        map<std::string, jce::CoverDataList> coverDataMap;
        map<std::string, jce::VideoIntroduction> introductionMap;
        std::string defaultVideoDataKey;
        std::string defaultCoverDataKey;
        vector<jce::KVItem> outWebList;
        map<std::string, jce::ActorList> actorDataMap;
        vector<jce::KVItem> outWebToastList;
        map<std::string, map<taf::Int32, jce::CoverDataList> > videoCoverMap;
        jce::VideoMoreDetails detailMoreInfo;
        std::string expansion;
        std::string forceVideoDataKey;
        vector<std::string> sequentPlayKeys;
        std::string feedFlowDataKey;
        vector<jce::MarkScore> markScoreDesc;
        taf::Char pageType;
        jce::MultiLanguageInfo multiLanguageInfo;
        map<std::string, jce::Navigation> navigationMap;
        std::string detailsFlowDataKey;
        jce::VideoDetailsExtraInfo extraInfo;
    };
    inline bool operator==(const VideoDetailsResponse&l, const VideoDetailsResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.vid == r.vid && l.lid == r.lid && l.cid == r.cid && l.videoDataMap == r.videoDataMap && l.coverDataMap == r.coverDataMap && l.introductionMap == r.introductionMap && l.defaultVideoDataKey == r.defaultVideoDataKey && l.defaultCoverDataKey == r.defaultCoverDataKey && l.outWebList == r.outWebList && l.actorDataMap == r.actorDataMap && l.outWebToastList == r.outWebToastList && l.videoCoverMap == r.videoCoverMap && l.detailMoreInfo == r.detailMoreInfo && l.expansion == r.expansion && l.forceVideoDataKey == r.forceVideoDataKey && l.sequentPlayKeys == r.sequentPlayKeys && l.feedFlowDataKey == r.feedFlowDataKey && l.markScoreDesc == r.markScoreDesc && l.pageType == r.pageType && l.multiLanguageInfo == r.multiLanguageInfo && l.navigationMap == r.navigationMap && l.detailsFlowDataKey == r.detailsFlowDataKey && l.extraInfo == r.extraInfo;
    }
    inline bool operator!=(const VideoDetailsResponse&l, const VideoDetailsResponse&r)
    {
        return !(l == r);
    }

    struct VideoListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoListRequest";
        }
        static string MD5()
        {
            return "2ce5d1d52f1213e730ff415e465d654d";
        }
        VideoListRequest()
        :channelId(""),filterValue(""),pageContext(""),filtertype(0),type(""),dataKey("")
        {
        }
        void resetDefautlt()
        {
            channelId = "";
            filterValue = "";
            pageContext = "";
            filtertype = 0;
            type = "";
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(channelId, 0);
            _os.write(filterValue, 1);
            _os.write(pageContext, 2);
            _os.write(filtertype, 3);
            _os.write(type, 4);
            _os.write(dataKey, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(channelId, 0, true);
            _is.read(filterValue, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(filtertype, 3, false);
            _is.read(type, 4, false);
            _is.read(dataKey, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(channelId,"channelId");
            _ds.display(filterValue,"filterValue");
            _ds.display(pageContext,"pageContext");
            _ds.display(filtertype,"filtertype");
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(channelId, true);
            _ds.displaySimple(filterValue, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(filtertype, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string channelId;
        std::string filterValue;
        std::string pageContext;
        taf::Int32 filtertype;
        std::string type;
        std::string dataKey;
    };
    inline bool operator==(const VideoListRequest&l, const VideoListRequest&r)
    {
        return l.channelId == r.channelId && l.filterValue == r.filterValue && l.pageContext == r.pageContext && l.filtertype == r.filtertype && l.type == r.type && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const VideoListRequest&l, const VideoListRequest&r)
    {
        return !(l == r);
    }

    struct VideoListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoListResponse";
        }
        static string MD5()
        {
            return "c316fd3f77a57973bab83b06cc83eacd";
        }
        VideoListResponse()
        :errCode(0),uiType(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            uiType = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiType, 1);
            _os.write(posterList, 2);
            _os.write(filter, 3);
            _os.write(pageContext, 4);
            _os.write(hasNextPage, 5);
            _os.write(filterList, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiType, 1, true);
            _is.read(posterList, 2, true);
            _is.read(filter, 3, false);
            _is.read(pageContext, 4, false);
            _is.read(hasNextPage, 5, false);
            _is.read(filterList, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiType,"uiType");
            _ds.display(posterList,"posterList");
            _ds.display(filter,"filter");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(filterList,"filterList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(posterList, true);
            _ds.displaySimple(filter, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(filterList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 uiType;
        vector<jce::Poster> posterList;
        jce::VideoFilter filter;
        std::string pageContext;
        taf::Bool hasNextPage;
        vector<jce::VideoFilter> filterList;
    };
    inline bool operator==(const VideoListResponse&l, const VideoListResponse&r)
    {
        return l.errCode == r.errCode && l.uiType == r.uiType && l.posterList == r.posterList && l.filter == r.filter && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.filterList == r.filterList;
    }
    inline bool operator!=(const VideoListResponse&l, const VideoListResponse&r)
    {
        return !(l == r);
    }

    struct GetCommentListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCommentListRequest";
        }
        static string MD5()
        {
            return "2f1dd416ef5b7c148f2734a0799ec47c";
        }
        GetCommentListRequest()
        :commentKey(""),pageContext(""),filterKey(""),vid(""),pageFlag(0),lastId(""),scene(0),mode(0)
        {
        }
        void resetDefautlt()
        {
            commentKey = "";
            pageContext = "";
            filterKey = "";
            vid = "";
            pageFlag = 0;
            lastId = "";
            scene = 0;
            mode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commentKey, 0);
            _os.write(pageContext, 1);
            _os.write(filterKey, 2);
            _os.write(vid, 3);
            _os.write(pageFlag, 4);
            _os.write(lastId, 5);
            _os.write(scene, 6);
            _os.write(mode, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commentKey, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(filterKey, 2, false);
            _is.read(vid, 3, false);
            _is.read(pageFlag, 4, false);
            _is.read(lastId, 5, false);
            _is.read(scene, 6, false);
            _is.read(mode, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commentKey,"commentKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(filterKey,"filterKey");
            _ds.display(vid,"vid");
            _ds.display(pageFlag,"pageFlag");
            _ds.display(lastId,"lastId");
            _ds.display(scene,"scene");
            _ds.display(mode,"mode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commentKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(filterKey, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(pageFlag, true);
            _ds.displaySimple(lastId, true);
            _ds.displaySimple(scene, true);
            _ds.displaySimple(mode, false);
            return _os;
        }
    public:
        std::string commentKey;
        std::string pageContext;
        std::string filterKey;
        std::string vid;
        taf::Int32 pageFlag;
        std::string lastId;
        taf::Int32 scene;
        taf::Int32 mode;
    };
    inline bool operator==(const GetCommentListRequest&l, const GetCommentListRequest&r)
    {
        return l.commentKey == r.commentKey && l.pageContext == r.pageContext && l.filterKey == r.filterKey && l.vid == r.vid && l.pageFlag == r.pageFlag && l.lastId == r.lastId && l.scene == r.scene && l.mode == r.mode;
    }
    inline bool operator!=(const GetCommentListRequest&l, const GetCommentListRequest&r)
    {
        return !(l == r);
    }

    struct GetCommentListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCommentListResponse";
        }
        static string MD5()
        {
            return "1a663eadbf0a3c1914cc8240d9932cf6";
        }
        GetCommentListResponse()
        :errCode(0),hasNextPage(true),pageContext(""),commentCount(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasNextPage = true;
            pageContext = "";
            commentCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(hasNextPage, 1);
            _os.write(pageContext, 2);
            _os.write(commentCount, 3);
            _os.write(commentList, 4);
            _os.write(hotCommentList, 5);
            _os.write(noticeList, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(hasNextPage, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(commentCount, 3, false);
            _is.read(commentList, 4, false);
            _is.read(hotCommentList, 5, false);
            _is.read(noticeList, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(pageContext,"pageContext");
            _ds.display(commentCount,"commentCount");
            _ds.display(commentList,"commentList");
            _ds.display(hotCommentList,"hotCommentList");
            _ds.display(noticeList,"noticeList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(commentCount, true);
            _ds.displaySimple(commentList, true);
            _ds.displaySimple(hotCommentList, true);
            _ds.displaySimple(noticeList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Bool hasNextPage;
        std::string pageContext;
        taf::Int32 commentCount;
        vector<jce::CommentItem> commentList;
        vector<jce::CommentItem> hotCommentList;
        vector<jce::CommentNoticeItem> noticeList;
    };
    inline bool operator==(const GetCommentListResponse&l, const GetCommentListResponse&r)
    {
        return l.errCode == r.errCode && l.hasNextPage == r.hasNextPage && l.pageContext == r.pageContext && l.commentCount == r.commentCount && l.commentList == r.commentList && l.hotCommentList == r.hotCommentList && l.noticeList == r.noticeList;
    }
    inline bool operator!=(const GetCommentListResponse&l, const GetCommentListResponse&r)
    {
        return !(l == r);
    }

    struct PostCommentRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PostCommentRequest";
        }
        static string MD5()
        {
            return "03272d11fada93f8db3d1376111dfe14";
        }
        PostCommentRequest()
        :commentKey(""),postType(0),reportType(0),content(""),commentId(""),voteId(""),voteSubjectId(""),voteOptionId(""),imageUrl(""),liveStatus(0),tabId("")
        {
        }
        void resetDefautlt()
        {
            commentKey = "";
            postType = 0;
            reportType = 0;
            content = "";
            commentId = "";
            voteId = "";
            voteSubjectId = "";
            voteOptionId = "";
            imageUrl = "";
            liveStatus = 0;
            tabId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commentKey, 0);
            _os.write(postType, 1);
            _os.write(reportType, 2);
            _os.write(content, 3);
            _os.write(commentId, 4);
            _os.write(voteId, 5);
            _os.write(voteSubjectId, 6);
            _os.write(voteOptionId, 7);
            _os.write(lbsInfo, 8);
            _os.write(imageUrl, 9);
            _os.write(starInfo, 10);
            _os.write(voiceData, 11);
            _os.write(liveStatus, 12);
            _os.write(tabId, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commentKey, 0, true);
            _is.read(postType, 1, true);
            _is.read(reportType, 2, true);
            _is.read(content, 3, false);
            _is.read(commentId, 4, false);
            _is.read(voteId, 5, false);
            _is.read(voteSubjectId, 6, false);
            _is.read(voteOptionId, 7, false);
            _is.read(lbsInfo, 8, false);
            _is.read(imageUrl, 9, false);
            _is.read(starInfo, 10, false);
            _is.read(voiceData, 11, false);
            _is.read(liveStatus, 12, false);
            _is.read(tabId, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commentKey,"commentKey");
            _ds.display(postType,"postType");
            _ds.display(reportType,"reportType");
            _ds.display(content,"content");
            _ds.display(commentId,"commentId");
            _ds.display(voteId,"voteId");
            _ds.display(voteSubjectId,"voteSubjectId");
            _ds.display(voteOptionId,"voteOptionId");
            _ds.display(lbsInfo,"lbsInfo");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(starInfo,"starInfo");
            _ds.display(voiceData,"voiceData");
            _ds.display(liveStatus,"liveStatus");
            _ds.display(tabId,"tabId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commentKey, true);
            _ds.displaySimple(postType, true);
            _ds.displaySimple(reportType, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(commentId, true);
            _ds.displaySimple(voteId, true);
            _ds.displaySimple(voteSubjectId, true);
            _ds.displaySimple(voteOptionId, true);
            _ds.displaySimple(lbsInfo, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(starInfo, true);
            _ds.displaySimple(voiceData, true);
            _ds.displaySimple(liveStatus, true);
            _ds.displaySimple(tabId, false);
            return _os;
        }
    public:
        std::string commentKey;
        taf::Int32 postType;
        taf::Int32 reportType;
        std::string content;
        std::string commentId;
        std::string voteId;
        std::string voteSubjectId;
        std::string voteOptionId;
        jce::LBSInfo lbsInfo;
        std::string imageUrl;
        jce::STStarInfo starInfo;
        jce::ApolloVoiceData voiceData;
        taf::Int32 liveStatus;
        std::string tabId;
    };
    inline bool operator==(const PostCommentRequest&l, const PostCommentRequest&r)
    {
        return l.commentKey == r.commentKey && l.postType == r.postType && l.reportType == r.reportType && l.content == r.content && l.commentId == r.commentId && l.voteId == r.voteId && l.voteSubjectId == r.voteSubjectId && l.voteOptionId == r.voteOptionId && l.lbsInfo == r.lbsInfo && l.imageUrl == r.imageUrl && l.starInfo == r.starInfo && l.voiceData == r.voiceData && l.liveStatus == r.liveStatus && l.tabId == r.tabId;
    }
    inline bool operator!=(const PostCommentRequest&l, const PostCommentRequest&r)
    {
        return !(l == r);
    }

    struct PostCommentResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PostCommentResponse";
        }
        static string MD5()
        {
            return "280cc80fce557e948d87baae3ffbef6f";
        }
        PostCommentResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(commentList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(commentList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(commentList,"commentList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(commentList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::CommentItem> commentList;
    };
    inline bool operator==(const PostCommentResponse&l, const PostCommentResponse&r)
    {
        return l.errCode == r.errCode && l.commentList == r.commentList;
    }
    inline bool operator!=(const PostCommentResponse&l, const PostCommentResponse&r)
    {
        return !(l == r);
    }

    struct GetVideoAttentListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetVideoAttentListRequest";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        GetVideoAttentListRequest()
        :dataVersion(0)
        {
        }
        void resetDefautlt()
        {
            dataVersion = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataVersion, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataVersion, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataVersion,"dataVersion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataVersion, false);
            return _os;
        }
    public:
        taf::Int64 dataVersion;
    };
    inline bool operator==(const GetVideoAttentListRequest&l, const GetVideoAttentListRequest&r)
    {
        return l.dataVersion == r.dataVersion;
    }
    inline bool operator!=(const GetVideoAttentListRequest&l, const GetVideoAttentListRequest&r)
    {
        return !(l == r);
    }

    struct GetVideoAttentListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetVideoAttentListResponse";
        }
        static string MD5()
        {
            return "81ad631e00fdd0ccb37e009fd52cf150";
        }
        GetVideoAttentListResponse()
        :errCode(0),dataVersion(0),updateFlag(0),total(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            dataVersion = 0;
            updateFlag = 0;
            total = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(dataVersion, 1);
            _os.write(updateFlag, 2);
            _os.write(total, 3);
            _os.write(VideoAttentInfoList, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(dataVersion, 1, false);
            _is.read(updateFlag, 2, false);
            _is.read(total, 3, false);
            _is.read(VideoAttentInfoList, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(dataVersion,"dataVersion");
            _ds.display(updateFlag,"updateFlag");
            _ds.display(total,"total");
            _ds.display(VideoAttentInfoList,"VideoAttentInfoList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(dataVersion, true);
            _ds.displaySimple(updateFlag, true);
            _ds.displaySimple(total, true);
            _ds.displaySimple(VideoAttentInfoList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int64 dataVersion;
        taf::Int32 updateFlag;
        taf::Int32 total;
        vector<jce::VideoAttentItem> VideoAttentInfoList;
    };
    inline bool operator==(const GetVideoAttentListResponse&l, const GetVideoAttentListResponse&r)
    {
        return l.errCode == r.errCode && l.dataVersion == r.dataVersion && l.updateFlag == r.updateFlag && l.total == r.total && l.VideoAttentInfoList == r.VideoAttentInfoList;
    }
    inline bool operator!=(const GetVideoAttentListResponse&l, const GetVideoAttentListResponse&r)
    {
        return !(l == r);
    }

    struct VideoAttentOptionRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoAttentOptionRequest";
        }
        static string MD5()
        {
            return "6d3baecd50d72cface5bebda75c88273";
        }
        VideoAttentOptionRequest()
        :option(0),iosTokenId("")
        {
        }
        void resetDefautlt()
        {
            option = 0;
            iosTokenId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(attentKeyList, 0);
            _os.write(option, 1);
            _os.write(iosTokenId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(attentKeyList, 0, true);
            _is.read(option, 1, true);
            _is.read(iosTokenId, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(attentKeyList,"attentKeyList");
            _ds.display(option,"option");
            _ds.display(iosTokenId,"iosTokenId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(attentKeyList, true);
            _ds.displaySimple(option, true);
            _ds.displaySimple(iosTokenId, false);
            return _os;
        }
    public:
        vector<jce::VideoAttentItem> attentKeyList;
        taf::Char option;
        std::string iosTokenId;
    };
    inline bool operator==(const VideoAttentOptionRequest&l, const VideoAttentOptionRequest&r)
    {
        return l.attentKeyList == r.attentKeyList && l.option == r.option && l.iosTokenId == r.iosTokenId;
    }
    inline bool operator!=(const VideoAttentOptionRequest&l, const VideoAttentOptionRequest&r)
    {
        return !(l == r);
    }

    struct VideoAttentOptionResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoAttentOptionResponse";
        }
        static string MD5()
        {
            return "f4993b971ab4a0c87018309fbb6b87f8";
        }
        VideoAttentOptionResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(attentItemList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(attentItemList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(attentItemList,"attentItemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(attentItemList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::VideoAttentItem> attentItemList;
    };
    inline bool operator==(const VideoAttentOptionResponse&l, const VideoAttentOptionResponse&r)
    {
        return l.errCode == r.errCode && l.attentItemList == r.attentItemList;
    }
    inline bool operator!=(const VideoAttentOptionResponse&l, const VideoAttentOptionResponse&r)
    {
        return !(l == r);
    }

    struct NewAttentOptionRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NewAttentOptionRequest";
        }
        static string MD5()
        {
            return "f3a6ea741d2786e97965a4d633dfcb59";
        }
        NewAttentOptionRequest()
        :option(0)
        {
        }
        void resetDefautlt()
        {
            option = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(option, 1);
            _os.write(attentKeyList, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(option, 1, true);
            _is.read(attentKeyList, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(option,"option");
            _ds.display(attentKeyList,"attentKeyList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(option, true);
            _ds.displaySimple(attentKeyList, false);
            return _os;
        }
    public:
        taf::Char option;
        vector<jce::NewAttentKey> attentKeyList;
    };
    inline bool operator==(const NewAttentOptionRequest&l, const NewAttentOptionRequest&r)
    {
        return l.option == r.option && l.attentKeyList == r.attentKeyList;
    }
    inline bool operator!=(const NewAttentOptionRequest&l, const NewAttentOptionRequest&r)
    {
        return !(l == r);
    }

    struct NewAttentOptionResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NewAttentOptionResponse";
        }
        static string MD5()
        {
            return "b1b4b1d10f77915fc005bb579b4dc53b";
        }
        NewAttentOptionResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 1);
            _os.write(attentItemList, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 1, true);
            _is.read(attentItemList, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(attentItemList,"attentItemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(attentItemList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::NewAttentItem> attentItemList;
    };
    inline bool operator==(const NewAttentOptionResponse&l, const NewAttentOptionResponse&r)
    {
        return l.errCode == r.errCode && l.attentItemList == r.attentItemList;
    }
    inline bool operator!=(const NewAttentOptionResponse&l, const NewAttentOptionResponse&r)
    {
        return !(l == r);
    }

    struct NewQueryAttentStateRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NewQueryAttentStateRequest";
        }
        static string MD5()
        {
            return "875eed5c06c7b3f384066624456deef7";
        }
        NewQueryAttentStateRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(attentKeyList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(attentKeyList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(attentKeyList,"attentKeyList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(attentKeyList, false);
            return _os;
        }
    public:
        vector<jce::NewAttentKey> attentKeyList;
    };
    inline bool operator==(const NewQueryAttentStateRequest&l, const NewQueryAttentStateRequest&r)
    {
        return l.attentKeyList == r.attentKeyList;
    }
    inline bool operator!=(const NewQueryAttentStateRequest&l, const NewQueryAttentStateRequest&r)
    {
        return !(l == r);
    }

    struct NewQueryAttentStateResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NewQueryAttentStateResponse";
        }
        static string MD5()
        {
            return "b1b4b1d10f77915fc005bb579b4dc53b";
        }
        NewQueryAttentStateResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 1);
            _os.write(attentItemList, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 1, true);
            _is.read(attentItemList, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(attentItemList,"attentItemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(attentItemList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::NewAttentItem> attentItemList;
    };
    inline bool operator==(const NewQueryAttentStateResponse&l, const NewQueryAttentStateResponse&r)
    {
        return l.errCode == r.errCode && l.attentItemList == r.attentItemList;
    }
    inline bool operator!=(const NewQueryAttentStateResponse&l, const NewQueryAttentStateResponse&r)
    {
        return !(l == r);
    }

    struct NewGetAttentListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NewGetAttentListRequest";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        NewGetAttentListRequest()
        :lastDataVersion(0)
        {
        }
        void resetDefautlt()
        {
            lastDataVersion = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lastDataVersion, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lastDataVersion, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lastDataVersion,"lastDataVersion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lastDataVersion, false);
            return _os;
        }
    public:
        taf::Int64 lastDataVersion;
    };
    inline bool operator==(const NewGetAttentListRequest&l, const NewGetAttentListRequest&r)
    {
        return l.lastDataVersion == r.lastDataVersion;
    }
    inline bool operator!=(const NewGetAttentListRequest&l, const NewGetAttentListRequest&r)
    {
        return !(l == r);
    }

    struct NewGetAttentListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NewGetAttentListResponse";
        }
        static string MD5()
        {
            return "f4b4844a5e16f7968963162689e46083";
        }
        NewGetAttentListResponse()
        :errCode(0),dataVersion(0),updateFlag(0),total(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            dataVersion = 0;
            updateFlag = 0;
            total = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 1);
            _os.write(dataVersion, 2);
            _os.write(updateFlag, 3);
            _os.write(attentItemList, 4);
            _os.write(total, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 1, true);
            _is.read(dataVersion, 2, false);
            _is.read(updateFlag, 3, false);
            _is.read(attentItemList, 4, false);
            _is.read(total, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(dataVersion,"dataVersion");
            _ds.display(updateFlag,"updateFlag");
            _ds.display(attentItemList,"attentItemList");
            _ds.display(total,"total");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(dataVersion, true);
            _ds.displaySimple(updateFlag, true);
            _ds.displaySimple(attentItemList, true);
            _ds.displaySimple(total, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int64 dataVersion;
        taf::Int32 updateFlag;
        vector<jce::NewAttentItem> attentItemList;
        taf::Int32 total;
    };
    inline bool operator==(const NewGetAttentListResponse&l, const NewGetAttentListResponse&r)
    {
        return l.errCode == r.errCode && l.dataVersion == r.dataVersion && l.updateFlag == r.updateFlag && l.attentItemList == r.attentItemList && l.total == r.total;
    }
    inline bool operator!=(const NewGetAttentListResponse&l, const NewGetAttentListResponse&r)
    {
        return !(l == r);
    }

    struct DetailVideoListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DetailVideoListRequest";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        DetailVideoListRequest()
        :dataKey(""),pageContext(""),dataType(""),vid("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
            dataType = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
            _os.write(dataType, 2);
            _os.write(vid, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(dataType, 2, false);
            _is.read(vid, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(dataType,"dataType");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(dataType, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
        std::string dataType;
        std::string vid;
    };
    inline bool operator==(const DetailVideoListRequest&l, const DetailVideoListRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.dataType == r.dataType && l.vid == r.vid;
    }
    inline bool operator!=(const DetailVideoListRequest&l, const DetailVideoListRequest&r)
    {
        return !(l == r);
    }

    struct DetailVideoListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DetailVideoListResponse";
        }
        static string MD5()
        {
            return "c61c6045d76af563d0932fd6f7934bfc";
        }
        DetailVideoListResponse()
        :errCode(0),pageContext(""),hasNextPage(true),uiType(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pageContext, 1);
            _os.write(videoList, 2);
            _os.write(hasNextPage, 3);
            _os.write(detailMoreInfo, 4);
            _os.write(title, 5);
            _os.write(introductionMap, 6);
            _os.write(moreAction, 7);
            _os.write(uiType, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(videoList, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(detailMoreInfo, 4, false);
            _is.read(title, 5, false);
            _is.read(introductionMap, 6, false);
            _is.read(moreAction, 7, false);
            _is.read(uiType, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pageContext,"pageContext");
            _ds.display(videoList,"videoList");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(detailMoreInfo,"detailMoreInfo");
            _ds.display(title,"title");
            _ds.display(introductionMap,"introductionMap");
            _ds.display(moreAction,"moreAction");
            _ds.display(uiType,"uiType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(videoList, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(detailMoreInfo, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(introductionMap, true);
            _ds.displaySimple(moreAction, true);
            _ds.displaySimple(uiType, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string pageContext;
        vector<jce::VideoItemData> videoList;
        taf::Bool hasNextPage;
        jce::VideoMoreDetails detailMoreInfo;
        jce::ONAPosterTitle title;
        map<std::string, jce::VideoIntroduction> introductionMap;
        jce::ONALoadMoreAction moreAction;
        taf::Int32 uiType;
    };
    inline bool operator==(const DetailVideoListResponse&l, const DetailVideoListResponse&r)
    {
        return l.errCode == r.errCode && l.pageContext == r.pageContext && l.videoList == r.videoList && l.hasNextPage == r.hasNextPage && l.detailMoreInfo == r.detailMoreInfo && l.title == r.title && l.introductionMap == r.introductionMap && l.moreAction == r.moreAction && l.uiType == r.uiType;
    }
    inline bool operator!=(const DetailVideoListResponse&l, const DetailVideoListResponse&r)
    {
        return !(l == r);
    }

    struct DetailCoverListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DetailCoverListRequest";
        }
        static string MD5()
        {
            return "6cf1348cdd69f924109dd734bc911528";
        }
        DetailCoverListRequest()
        :dataKey(""),pageContext(""),dataType(""),vid(""),cid(""),lid("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
            dataType = "";
            vid = "";
            cid = "";
            lid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
            _os.write(dataType, 2);
            _os.write(vid, 3);
            _os.write(cid, 4);
            _os.write(lid, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(dataType, 2, false);
            _is.read(vid, 3, false);
            _is.read(cid, 4, false);
            _is.read(lid, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(dataType,"dataType");
            _ds.display(vid,"vid");
            _ds.display(cid,"cid");
            _ds.display(lid,"lid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(dataType, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(lid, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
        std::string dataType;
        std::string vid;
        std::string cid;
        std::string lid;
    };
    inline bool operator==(const DetailCoverListRequest&l, const DetailCoverListRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.dataType == r.dataType && l.vid == r.vid && l.cid == r.cid && l.lid == r.lid;
    }
    inline bool operator!=(const DetailCoverListRequest&l, const DetailCoverListRequest&r)
    {
        return !(l == r);
    }

    struct DetailCoverListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DetailCoverListResponse";
        }
        static string MD5()
        {
            return "13bc86c6b5a31ecd29c73e703fdde984";
        }
        DetailCoverListResponse()
        :errCode(0),pageContext(""),hasNextPage(true),uiType(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            uiType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pageContext, 1);
            _os.write(coverList, 2);
            _os.write(hasNextPage, 3);
            _os.write(uiType, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(coverList, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(uiType, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pageContext,"pageContext");
            _ds.display(coverList,"coverList");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(uiType,"uiType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(coverList, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(uiType, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string pageContext;
        vector<jce::CoverItemData> coverList;
        taf::Bool hasNextPage;
        taf::Int32 uiType;
    };
    inline bool operator==(const DetailCoverListResponse&l, const DetailCoverListResponse&r)
    {
        return l.errCode == r.errCode && l.pageContext == r.pageContext && l.coverList == r.coverList && l.hasNextPage == r.hasNextPage && l.uiType == r.uiType;
    }
    inline bool operator!=(const DetailCoverListResponse&l, const DetailCoverListResponse&r)
    {
        return !(l == r);
    }

    struct WatchRecordListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordListRequest";
        }
        static string MD5()
        {
            return "cb4558a7d1cbd8cbf583df7337cc71f1";
        }
        WatchRecordListRequest()
        :pageContext(""),dataVersion(0)
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
            dataVersion = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
            _os.write(dataVersion, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
            _is.read(dataVersion, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            _ds.display(dataVersion,"dataVersion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(dataVersion, false);
            return _os;
        }
    public:
        std::string pageContext;
        taf::Int64 dataVersion;
    };
    inline bool operator==(const WatchRecordListRequest&l, const WatchRecordListRequest&r)
    {
        return l.pageContext == r.pageContext && l.dataVersion == r.dataVersion;
    }
    inline bool operator!=(const WatchRecordListRequest&l, const WatchRecordListRequest&r)
    {
        return !(l == r);
    }

    struct WatchRecordListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordListResponse";
        }
        static string MD5()
        {
            return "635e8a3b63d20797d59c5a1ca73e4eb8";
        }
        WatchRecordListResponse()
        :errCode(0),pageContext(""),hasNextPage(true),dataVersion(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            dataVersion = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pageContext, 1);
            _os.write(hasNextPage, 2);
            _os.write(recordList, 3);
            _os.write(dataVersion, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(hasNextPage, 2, false);
            _is.read(recordList, 3, false);
            _is.read(dataVersion, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(recordList,"recordList");
            _ds.display(dataVersion,"dataVersion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(recordList, true);
            _ds.displaySimple(dataVersion, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string pageContext;
        taf::Bool hasNextPage;
        vector<jce::WatchRecord> recordList;
        taf::Int64 dataVersion;
    };
    inline bool operator==(const WatchRecordListResponse&l, const WatchRecordListResponse&r)
    {
        return l.errCode == r.errCode && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.recordList == r.recordList && l.dataVersion == r.dataVersion;
    }
    inline bool operator!=(const WatchRecordListResponse&l, const WatchRecordListResponse&r)
    {
        return !(l == r);
    }

    struct WatchRecordUploadRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordUploadRequest";
        }
        static string MD5()
        {
            return "cd4800706407b432e04ae30455d4c69d";
        }
        WatchRecordUploadRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uploadList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uploadList, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uploadList,"uploadList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uploadList, false);
            return _os;
        }
    public:
        vector<jce::WatchRecord> uploadList;
    };
    inline bool operator==(const WatchRecordUploadRequest&l, const WatchRecordUploadRequest&r)
    {
        return l.uploadList == r.uploadList;
    }
    inline bool operator!=(const WatchRecordUploadRequest&l, const WatchRecordUploadRequest&r)
    {
        return !(l == r);
    }

    struct WatchRecordUploadResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordUploadResponse";
        }
        static string MD5()
        {
            return "ae0bfe6f76df8168e7f926ab3ef7295c";
        }
        WatchRecordUploadResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(recordList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(recordList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(recordList,"recordList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(recordList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::WatchRecord> recordList;
    };
    inline bool operator==(const WatchRecordUploadResponse&l, const WatchRecordUploadResponse&r)
    {
        return l.errCode == r.errCode && l.recordList == r.recordList;
    }
    inline bool operator!=(const WatchRecordUploadResponse&l, const WatchRecordUploadResponse&r)
    {
        return !(l == r);
    }

    struct WatchRecordDeleteRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordDeleteRequest";
        }
        static string MD5()
        {
            return "694c1d5e425422fc56c40d63d48cdf96";
        }
        WatchRecordDeleteRequest()
        :isDeleteAll(true)
        {
        }
        void resetDefautlt()
        {
            isDeleteAll = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(recordIdList, 0);
            _os.write(isDeleteAll, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(recordIdList, 0, false);
            _is.read(isDeleteAll, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(recordIdList,"recordIdList");
            _ds.display(isDeleteAll,"isDeleteAll");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(recordIdList, true);
            _ds.displaySimple(isDeleteAll, false);
            return _os;
        }
    public:
        vector<std::string> recordIdList;
        taf::Bool isDeleteAll;
    };
    inline bool operator==(const WatchRecordDeleteRequest&l, const WatchRecordDeleteRequest&r)
    {
        return l.recordIdList == r.recordIdList && l.isDeleteAll == r.isDeleteAll;
    }
    inline bool operator!=(const WatchRecordDeleteRequest&l, const WatchRecordDeleteRequest&r)
    {
        return !(l == r);
    }

    struct WatchRecordDeleteResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WatchRecordDeleteResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        WatchRecordDeleteResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const WatchRecordDeleteResponse&l, const WatchRecordDeleteResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const WatchRecordDeleteResponse&l, const WatchRecordDeleteResponse&r)
    {
        return !(l == r);
    }

    struct GetCacheListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCacheListRequest";
        }
        static string MD5()
        {
            return "de15c6640f84f35b617e8473791f5e51";
        }
        GetCacheListRequest()
        :lid(""),cid(""),vid(""),pageContext(""),definition(""),requestType(0),cacheDataKey(""),direction(0),maxGridCount(0)
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
            pageContext = "";
            definition = "";
            requestType = 0;
            cacheDataKey = "";
            direction = 0;
            maxGridCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
            _os.write(pageContext, 3);
            _os.write(definition, 4);
            _os.write(requestType, 5);
            _os.write(cacheDataKey, 6);
            _os.write(direction, 7);
            _os.write(maxGridCount, 8);
            _os.write(extraMap, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, false);
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(definition, 4, false);
            _is.read(requestType, 5, false);
            _is.read(cacheDataKey, 6, false);
            _is.read(direction, 7, false);
            _is.read(maxGridCount, 8, false);
            _is.read(extraMap, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(pageContext,"pageContext");
            _ds.display(definition,"definition");
            _ds.display(requestType,"requestType");
            _ds.display(cacheDataKey,"cacheDataKey");
            _ds.display(direction,"direction");
            _ds.display(maxGridCount,"maxGridCount");
            _ds.display(extraMap,"extraMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(definition, true);
            _ds.displaySimple(requestType, true);
            _ds.displaySimple(cacheDataKey, true);
            _ds.displaySimple(direction, true);
            _ds.displaySimple(maxGridCount, true);
            _ds.displaySimple(extraMap, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
        std::string pageContext;
        std::string definition;
        taf::Int32 requestType;
        std::string cacheDataKey;
        taf::Int32 direction;
        taf::Int32 maxGridCount;
        map<std::string, std::string> extraMap;
    };
    inline bool operator==(const GetCacheListRequest&l, const GetCacheListRequest&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.pageContext == r.pageContext && l.definition == r.definition && l.requestType == r.requestType && l.cacheDataKey == r.cacheDataKey && l.direction == r.direction && l.maxGridCount == r.maxGridCount && l.extraMap == r.extraMap;
    }
    inline bool operator!=(const GetCacheListRequest&l, const GetCacheListRequest&r)
    {
        return !(l == r);
    }

    struct GetCacheListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCacheListResponse";
        }
        static string MD5()
        {
            return "e0d60ee1e072651f2eb2591b54f1a06a";
        }
        GetCacheListResponse()
        :errCode(0),hasNextPage(true),pageContext(""),uiType(0),name(""),downloadRightName(""),definition(""),preText(""),previousPageContext(""),hasPreviousPage(true),needMultipleChoice(false),needPreCheckDownloadCopyRight(true),needLoginFirst(false)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasNextPage = true;
            pageContext = "";
            uiType = 0;
            name = "";
            downloadRightName = "";
            definition = "";
            preText = "";
            previousPageContext = "";
            hasPreviousPage = true;
            needMultipleChoice = false;
            needPreCheckDownloadCopyRight = true;
            needLoginFirst = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(hasNextPage, 1);
            _os.write(pageContext, 2);
            _os.write(uiType, 3);
            _os.write(cacheList, 4);
            _os.write(name, 5);
            _os.write(downloadRightName, 6);
            _os.write(definitionList, 7);
            _os.write(definition, 8);
            _os.write(preText, 9);
            _os.write(previousPageContext, 10);
            _os.write(hasPreviousPage, 11);
            _os.write(needMultipleChoice, 12);
            _os.write(needPreCheckDownloadCopyRight, 13);
            _os.write(vipDownloadRightConfig, 14);
            _os.write(needLoginFirst, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(hasNextPage, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(uiType, 3, false);
            _is.read(cacheList, 4, false);
            _is.read(name, 5, false);
            _is.read(downloadRightName, 6, false);
            _is.read(definitionList, 7, false);
            _is.read(definition, 8, false);
            _is.read(preText, 9, false);
            _is.read(previousPageContext, 10, false);
            _is.read(hasPreviousPage, 11, false);
            _is.read(needMultipleChoice, 12, false);
            _is.read(needPreCheckDownloadCopyRight, 13, false);
            _is.read(vipDownloadRightConfig, 14, false);
            _is.read(needLoginFirst, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(pageContext,"pageContext");
            _ds.display(uiType,"uiType");
            _ds.display(cacheList,"cacheList");
            _ds.display(name,"name");
            _ds.display(downloadRightName,"downloadRightName");
            _ds.display(definitionList,"definitionList");
            _ds.display(definition,"definition");
            _ds.display(preText,"preText");
            _ds.display(previousPageContext,"previousPageContext");
            _ds.display(hasPreviousPage,"hasPreviousPage");
            _ds.display(needMultipleChoice,"needMultipleChoice");
            _ds.display(needPreCheckDownloadCopyRight,"needPreCheckDownloadCopyRight");
            _ds.display(vipDownloadRightConfig,"vipDownloadRightConfig");
            _ds.display(needLoginFirst,"needLoginFirst");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(cacheList, true);
            _ds.displaySimple(name, true);
            _ds.displaySimple(downloadRightName, true);
            _ds.displaySimple(definitionList, true);
            _ds.displaySimple(definition, true);
            _ds.displaySimple(preText, true);
            _ds.displaySimple(previousPageContext, true);
            _ds.displaySimple(hasPreviousPage, true);
            _ds.displaySimple(needMultipleChoice, true);
            _ds.displaySimple(needPreCheckDownloadCopyRight, true);
            _ds.displaySimple(vipDownloadRightConfig, true);
            _ds.displaySimple(needLoginFirst, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Bool hasNextPage;
        std::string pageContext;
        taf::Int32 uiType;
        vector<jce::CacheItem> cacheList;
        std::string name;
        std::string downloadRightName;
        vector<jce::Definition> definitionList;
        std::string definition;
        std::string preText;
        std::string previousPageContext;
        taf::Bool hasPreviousPage;
        taf::Bool needMultipleChoice;
        taf::Bool needPreCheckDownloadCopyRight;
        jce::VipDownloadRightConfig vipDownloadRightConfig;
        taf::Bool needLoginFirst;
    };
    inline bool operator==(const GetCacheListResponse&l, const GetCacheListResponse&r)
    {
        return l.errCode == r.errCode && l.hasNextPage == r.hasNextPage && l.pageContext == r.pageContext && l.uiType == r.uiType && l.cacheList == r.cacheList && l.name == r.name && l.downloadRightName == r.downloadRightName && l.definitionList == r.definitionList && l.definition == r.definition && l.preText == r.preText && l.previousPageContext == r.previousPageContext && l.hasPreviousPage == r.hasPreviousPage && l.needMultipleChoice == r.needMultipleChoice && l.needPreCheckDownloadCopyRight == r.needPreCheckDownloadCopyRight && l.vipDownloadRightConfig == r.vipDownloadRightConfig && l.needLoginFirst == r.needLoginFirst;
    }
    inline bool operator!=(const GetCacheListResponse&l, const GetCacheListResponse&r)
    {
        return !(l == r);
    }

    struct GetPreCacheItemListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetPreCacheItemListRequest";
        }
        static string MD5()
        {
            return "f835d961be2fb17baa4cdd9dc80554fb";
        }
        GetPreCacheItemListRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(request, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(request, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(request,"request");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(request, false);
            return _os;
        }
    public:
        vector<jce::PreCacheRequest> request;
    };
    inline bool operator==(const GetPreCacheItemListRequest&l, const GetPreCacheItemListRequest&r)
    {
        return l.request == r.request;
    }
    inline bool operator!=(const GetPreCacheItemListRequest&l, const GetPreCacheItemListRequest&r)
    {
        return !(l == r);
    }

    struct GetPreCacheItemListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetPreCacheItemListResponse";
        }
        static string MD5()
        {
            return "95fa7b793b428dca49227accf28c86fc";
        }
        GetPreCacheItemListResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(cacheList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(cacheList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(cacheList,"cacheList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(cacheList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::CacheItem> cacheList;
    };
    inline bool operator==(const GetPreCacheItemListResponse&l, const GetPreCacheItemListResponse&r)
    {
        return l.errCode == r.errCode && l.cacheList == r.cacheList;
    }
    inline bool operator!=(const GetPreCacheItemListResponse&l, const GetPreCacheItemListResponse&r)
    {
        return !(l == r);
    }

    struct CheckHasPreCacheItemRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckHasPreCacheItemRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        CheckHasPreCacheItemRequest()
        :cid("")
        {
        }
        void resetDefautlt()
        {
            cid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cid, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cid, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cid,"cid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cid, false);
            return _os;
        }
    public:
        std::string cid;
    };
    inline bool operator==(const CheckHasPreCacheItemRequest&l, const CheckHasPreCacheItemRequest&r)
    {
        return l.cid == r.cid;
    }
    inline bool operator!=(const CheckHasPreCacheItemRequest&l, const CheckHasPreCacheItemRequest&r)
    {
        return !(l == r);
    }

    struct CheckHasPreCacheItemResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckHasPreCacheItemResponse";
        }
        static string MD5()
        {
            return "72dfddf03422779b81fb661a3938fb92";
        }
        CheckHasPreCacheItemResponse()
        :errCode(0),hasPreCacheItem(0),preTips("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasPreCacheItem = 0;
            preTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(hasPreCacheItem, 1);
            _os.write(preTips, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(hasPreCacheItem, 1, false);
            _is.read(preTips, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(hasPreCacheItem,"hasPreCacheItem");
            _ds.display(preTips,"preTips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(hasPreCacheItem, true);
            _ds.displaySimple(preTips, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 hasPreCacheItem;
        std::string preTips;
    };
    inline bool operator==(const CheckHasPreCacheItemResponse&l, const CheckHasPreCacheItemResponse&r)
    {
        return l.errCode == r.errCode && l.hasPreCacheItem == r.hasPreCacheItem && l.preTips == r.preTips;
    }
    inline bool operator!=(const CheckHasPreCacheItemResponse&l, const CheckHasPreCacheItemResponse&r)
    {
        return !(l == r);
    }

    struct SearchRankRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SearchRankRequest";
        }
        static string MD5()
        {
            return "403376a491cc8ae711470cbb11ebe964";
        }
        SearchRankRequest()
        :channdlId(""),searchDatakey(""),isPageContextEmpty(true),isRefreshContextEmpty(true)
        {
        }
        void resetDefautlt()
        {
            channdlId = "";
            searchDatakey = "";
            isPageContextEmpty = true;
            isRefreshContextEmpty = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(channdlId, 0);
            _os.write(searchDatakey, 1);
            _os.write(adRequestInfo, 2);
            _os.write(sdkRequestInfo, 3);
            _os.write(isPageContextEmpty, 4);
            _os.write(isRefreshContextEmpty, 5);
            _os.write(searchHistoryKeyWords, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(channdlId, 0, false);
            _is.read(searchDatakey, 1, false);
            _is.read(adRequestInfo, 2, false);
            _is.read(sdkRequestInfo, 3, false);
            _is.read(isPageContextEmpty, 4, false);
            _is.read(isRefreshContextEmpty, 5, false);
            _is.read(searchHistoryKeyWords, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(channdlId,"channdlId");
            _ds.display(searchDatakey,"searchDatakey");
            _ds.display(adRequestInfo,"adRequestInfo");
            _ds.display(sdkRequestInfo,"sdkRequestInfo");
            _ds.display(isPageContextEmpty,"isPageContextEmpty");
            _ds.display(isRefreshContextEmpty,"isRefreshContextEmpty");
            _ds.display(searchHistoryKeyWords,"searchHistoryKeyWords");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(channdlId, true);
            _ds.displaySimple(searchDatakey, true);
            _ds.displaySimple(adRequestInfo, true);
            _ds.displaySimple(sdkRequestInfo, true);
            _ds.displaySimple(isPageContextEmpty, true);
            _ds.displaySimple(isRefreshContextEmpty, true);
            _ds.displaySimple(searchHistoryKeyWords, false);
            return _os;
        }
    public:
        std::string channdlId;
        std::string searchDatakey;
        jce::AdRequestInfo adRequestInfo;
        jce::AdSdkRequestInfo sdkRequestInfo;
        taf::Bool isPageContextEmpty;
        taf::Bool isRefreshContextEmpty;
        vector<std::string> searchHistoryKeyWords;
    };
    inline bool operator==(const SearchRankRequest&l, const SearchRankRequest&r)
    {
        return l.channdlId == r.channdlId && l.searchDatakey == r.searchDatakey && l.adRequestInfo == r.adRequestInfo && l.sdkRequestInfo == r.sdkRequestInfo && l.isPageContextEmpty == r.isPageContextEmpty && l.isRefreshContextEmpty == r.isRefreshContextEmpty && l.searchHistoryKeyWords == r.searchHistoryKeyWords;
    }
    inline bool operator!=(const SearchRankRequest&l, const SearchRankRequest&r)
    {
        return !(l == r);
    }

    struct SearchRankResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SearchRankResponse";
        }
        static string MD5()
        {
            return "4f95bcc8147fa7b4dea3c6c9dbb5623e";
        }
        SearchRankResponse()
        :errCode(0),groupTitle(""),timeStamp(""),rankNavSelectColor("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            groupTitle = "";
            timeStamp = "";
            rankNavSelectColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(itemList, 1);
            _os.write(groupTitle, 2);
            _os.write(timeStamp, 3);
            _os.write(adPoster, 4);
            _os.write(rankNavList, 5);
            _os.write(adTitleInfo, 6);
            _os.write(data, 7);
            _os.write(hotWordInfo, 8);
            _os.write(rankNavSelectColor, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(itemList, 1, false);
            _is.read(groupTitle, 2, false);
            _is.read(timeStamp, 3, false);
            _is.read(adPoster, 4, false);
            _is.read(rankNavList, 5, false);
            _is.read(adTitleInfo, 6, false);
            _is.read(data, 7, false);
            _is.read(hotWordInfo, 8, false);
            _is.read(rankNavSelectColor, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(itemList,"itemList");
            _ds.display(groupTitle,"groupTitle");
            _ds.display(timeStamp,"timeStamp");
            _ds.display(adPoster,"adPoster");
            _ds.display(rankNavList,"rankNavList");
            _ds.display(adTitleInfo,"adTitleInfo");
            _ds.display(data,"data");
            _ds.display(hotWordInfo,"hotWordInfo");
            _ds.display(rankNavSelectColor,"rankNavSelectColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(groupTitle, true);
            _ds.displaySimple(timeStamp, true);
            _ds.displaySimple(adPoster, true);
            _ds.displaySimple(rankNavList, true);
            _ds.displaySimple(adTitleInfo, true);
            _ds.displaySimple(data, true);
            _ds.displaySimple(hotWordInfo, true);
            _ds.displaySimple(rankNavSelectColor, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::RankItem> itemList;
        std::string groupTitle;
        std::string timeStamp;
        jce::Poster adPoster;
        vector<jce::KVItem> rankNavList;
        jce::AdTitleInfo adTitleInfo;
        vector<jce::TempletLine> data;
        vector<jce::IconTagText> hotWordInfo;
        std::string rankNavSelectColor;
    };
    inline bool operator==(const SearchRankResponse&l, const SearchRankResponse&r)
    {
        return l.errCode == r.errCode && l.itemList == r.itemList && l.groupTitle == r.groupTitle && l.timeStamp == r.timeStamp && l.adPoster == r.adPoster && l.rankNavList == r.rankNavList && l.adTitleInfo == r.adTitleInfo && l.data == r.data && l.hotWordInfo == r.hotWordInfo && l.rankNavSelectColor == r.rankNavSelectColor;
    }
    inline bool operator!=(const SearchRankResponse&l, const SearchRankResponse&r)
    {
        return !(l == r);
    }

    struct SearchSmartRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SearchSmartRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        SearchSmartRequest()
        :keyWord(""),channelId(""),searchDatakey("")
        {
        }
        void resetDefautlt()
        {
            keyWord = "";
            channelId = "";
            searchDatakey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(keyWord, 0);
            _os.write(channelId, 1);
            _os.write(searchDatakey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(keyWord, 0, true);
            _is.read(channelId, 1, false);
            _is.read(searchDatakey, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(keyWord,"keyWord");
            _ds.display(channelId,"channelId");
            _ds.display(searchDatakey,"searchDatakey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(keyWord, true);
            _ds.displaySimple(channelId, true);
            _ds.displaySimple(searchDatakey, false);
            return _os;
        }
    public:
        std::string keyWord;
        std::string channelId;
        std::string searchDatakey;
    };
    inline bool operator==(const SearchSmartRequest&l, const SearchSmartRequest&r)
    {
        return l.keyWord == r.keyWord && l.channelId == r.channelId && l.searchDatakey == r.searchDatakey;
    }
    inline bool operator!=(const SearchSmartRequest&l, const SearchSmartRequest&r)
    {
        return !(l == r);
    }

    struct SearchSmartResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SearchSmartResponse";
        }
        static string MD5()
        {
            return "7e55adb554cefd9cc175ac0c217c0db4";
        }
        SearchSmartResponse()
        :errCode(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(itemList, 1);
            _os.write(smartItemList, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(itemList, 1, false);
            _is.read(smartItemList, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(itemList,"itemList");
            _ds.display(smartItemList,"smartItemList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(smartItemList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<std::string> itemList;
        vector<jce::SearchSmartItem> smartItemList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const SearchSmartResponse&l, const SearchSmartResponse&r)
    {
        return l.errCode == r.errCode && l.itemList == r.itemList && l.smartItemList == r.smartItemList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const SearchSmartResponse&l, const SearchSmartResponse&r)
    {
        return !(l == r);
    }

    struct SearchRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SearchRequest";
        }
        static string MD5()
        {
            return "f83809a54e07683222c0c41bb8a7e65b";
        }
        SearchRequest()
        :keyWord(""),channelId(""),filterValue(""),pageContext(""),searchSession(""),expansion(""),isNeedCorrect(true),searchDatakey("")
        {
        }
        void resetDefautlt()
        {
            keyWord = "";
            channelId = "";
            filterValue = "";
            pageContext = "";
            searchSession = "";
            expansion = "";
            isNeedCorrect = true;
            searchDatakey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(keyWord, 0);
            _os.write(channelId, 1);
            _os.write(filterValue, 2);
            _os.write(pageContext, 3);
            _os.write(searchSession, 4);
            _os.write(expansion, 5);
            _os.write(isNeedCorrect, 6);
            _os.write(searchDatakey, 7);
            _os.write(adRequestInfo, 8);
            _os.write(sdkRequestInfo, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(keyWord, 0, true);
            _is.read(channelId, 1, false);
            _is.read(filterValue, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(searchSession, 4, false);
            _is.read(expansion, 5, false);
            _is.read(isNeedCorrect, 6, false);
            _is.read(searchDatakey, 7, false);
            _is.read(adRequestInfo, 8, false);
            _is.read(sdkRequestInfo, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(keyWord,"keyWord");
            _ds.display(channelId,"channelId");
            _ds.display(filterValue,"filterValue");
            _ds.display(pageContext,"pageContext");
            _ds.display(searchSession,"searchSession");
            _ds.display(expansion,"expansion");
            _ds.display(isNeedCorrect,"isNeedCorrect");
            _ds.display(searchDatakey,"searchDatakey");
            _ds.display(adRequestInfo,"adRequestInfo");
            _ds.display(sdkRequestInfo,"sdkRequestInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(keyWord, true);
            _ds.displaySimple(channelId, true);
            _ds.displaySimple(filterValue, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(searchSession, true);
            _ds.displaySimple(expansion, true);
            _ds.displaySimple(isNeedCorrect, true);
            _ds.displaySimple(searchDatakey, true);
            _ds.displaySimple(adRequestInfo, true);
            _ds.displaySimple(sdkRequestInfo, false);
            return _os;
        }
    public:
        std::string keyWord;
        std::string channelId;
        std::string filterValue;
        std::string pageContext;
        std::string searchSession;
        std::string expansion;
        taf::Bool isNeedCorrect;
        std::string searchDatakey;
        jce::AdRequestInfo adRequestInfo;
        jce::AdSdkRequestInfo sdkRequestInfo;
    };
    inline bool operator==(const SearchRequest&l, const SearchRequest&r)
    {
        return l.keyWord == r.keyWord && l.channelId == r.channelId && l.filterValue == r.filterValue && l.pageContext == r.pageContext && l.searchSession == r.searchSession && l.expansion == r.expansion && l.isNeedCorrect == r.isNeedCorrect && l.searchDatakey == r.searchDatakey && l.adRequestInfo == r.adRequestInfo && l.sdkRequestInfo == r.sdkRequestInfo;
    }
    inline bool operator!=(const SearchRequest&l, const SearchRequest&r)
    {
        return !(l == r);
    }

    struct SearchResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SearchResponse";
        }
        static string MD5()
        {
            return "c967ad229794d213474999a0275e86f5";
        }
        SearchResponse()
        :errCode(0),pageContext(""),searchSession(""),isHaveNextPage(true),reportParams(""),matchResult("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            searchSession = "";
            isHaveNextPage = true;
            reportParams = "";
            matchResult = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(filter, 2);
            _os.write(pageContext, 3);
            _os.write(searchSession, 4);
            _os.write(isHaveNextPage, 5);
            _os.write(reportParams, 6);
            _os.write(matchResult, 7);
            _os.write(subUIData, 8);
            _os.write(promotionEventInfo, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(filter, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(searchSession, 4, false);
            _is.read(isHaveNextPage, 5, false);
            _is.read(reportParams, 6, false);
            _is.read(matchResult, 7, false);
            _is.read(subUIData, 8, false);
            _is.read(promotionEventInfo, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(filter,"filter");
            _ds.display(pageContext,"pageContext");
            _ds.display(searchSession,"searchSession");
            _ds.display(isHaveNextPage,"isHaveNextPage");
            _ds.display(reportParams,"reportParams");
            _ds.display(matchResult,"matchResult");
            _ds.display(subUIData,"subUIData");
            _ds.display(promotionEventInfo,"promotionEventInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(filter, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(searchSession, true);
            _ds.displaySimple(isHaveNextPage, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(matchResult, true);
            _ds.displaySimple(subUIData, true);
            _ds.displaySimple(promotionEventInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        jce::VideoFilter filter;
        std::string pageContext;
        std::string searchSession;
        taf::Bool isHaveNextPage;
        std::string reportParams;
        std::string matchResult;
        vector<jce::TempletLine> subUIData;
        jce::PromotionEventInfo promotionEventInfo;
    };
    inline bool operator==(const SearchResponse&l, const SearchResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.filter == r.filter && l.pageContext == r.pageContext && l.searchSession == r.searchSession && l.isHaveNextPage == r.isHaveNextPage && l.reportParams == r.reportParams && l.matchResult == r.matchResult && l.subUIData == r.subUIData && l.promotionEventInfo == r.promotionEventInfo;
    }
    inline bool operator!=(const SearchResponse&l, const SearchResponse&r)
    {
        return !(l == r);
    }

    struct OperationPageRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.OperationPageRequest";
        }
        static string MD5()
        {
            return "a5c9019ea89f626dc426a978258ff1f1";
        }
        OperationPageRequest()
        :type(""),dataKey(""),pageContext(""),payAID(""),derection(0)
        {
        }
        void resetDefautlt()
        {
            type = "";
            dataKey = "";
            pageContext = "";
            payAID = "";
            derection = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(dataKey, 1);
            _os.write(pageContext, 2);
            _os.write(payAID, 3);
            _os.write(derection, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(dataKey, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(payAID, 3, false);
            _is.read(derection, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(payAID,"payAID");
            _ds.display(derection,"derection");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(payAID, true);
            _ds.displaySimple(derection, false);
            return _os;
        }
    public:
        std::string type;
        std::string dataKey;
        std::string pageContext;
        std::string payAID;
        taf::Int32 derection;
    };
    inline bool operator==(const OperationPageRequest&l, const OperationPageRequest&r)
    {
        return l.type == r.type && l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.payAID == r.payAID && l.derection == r.derection;
    }
    inline bool operator!=(const OperationPageRequest&l, const OperationPageRequest&r)
    {
        return !(l == r);
    }

    struct OperationPageResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.OperationPageResponse";
        }
        static string MD5()
        {
            return "32d37d8be391247a68ab28699c925ad1";
        }
        OperationPageResponse()
        :errCode(0),pageContext(""),isHaveNextPage(true),title(""),actionType(0),subTitle(""),pageUiType(0),titleBarImage(""),targetPos(0),reportParams(""),timeOut(0),pullDownType(0),prePageContext(""),isHavePrePage(false)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            isHaveNextPage = true;
            title = "";
            actionType = 0;
            subTitle = "";
            pageUiType = 0;
            titleBarImage = "";
            targetPos = 0;
            reportParams = "";
            timeOut = 0;
            pullDownType = 0;
            prePageContext = "";
            isHavePrePage = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(isHaveNextPage, 3);
            _os.write(title, 4);
            _os.write(attentItem, 5);
            _os.write(shareItem, 6);
            _os.write(actionType, 7);
            _os.write(subTitle, 8);
            _os.write(apkInfo, 9);
            _os.write(pageUiType, 10);
            _os.write(titleBarImage, 11);
            _os.write(targetPos, 12);
            _os.write(reportParams, 13);
            _os.write(timeOut, 14);
            _os.write(pullDownType, 15);
            _os.write(prePageContext, 16);
            _os.write(isHavePrePage, 17);
            _os.write(moreAction, 18);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(isHaveNextPage, 3, false);
            _is.read(title, 4, false);
            _is.read(attentItem, 5, false);
            _is.read(shareItem, 6, false);
            _is.read(actionType, 7, false);
            _is.read(subTitle, 8, false);
            _is.read(apkInfo, 9, false);
            _is.read(pageUiType, 10, false);
            _is.read(titleBarImage, 11, false);
            _is.read(targetPos, 12, false);
            _is.read(reportParams, 13, false);
            _is.read(timeOut, 14, false);
            _is.read(pullDownType, 15, false);
            _is.read(prePageContext, 16, false);
            _is.read(isHavePrePage, 17, false);
            _is.read(moreAction, 18, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(isHaveNextPage,"isHaveNextPage");
            _ds.display(title,"title");
            _ds.display(attentItem,"attentItem");
            _ds.display(shareItem,"shareItem");
            _ds.display(actionType,"actionType");
            _ds.display(subTitle,"subTitle");
            _ds.display(apkInfo,"apkInfo");
            _ds.display(pageUiType,"pageUiType");
            _ds.display(titleBarImage,"titleBarImage");
            _ds.display(targetPos,"targetPos");
            _ds.display(reportParams,"reportParams");
            _ds.display(timeOut,"timeOut");
            _ds.display(pullDownType,"pullDownType");
            _ds.display(prePageContext,"prePageContext");
            _ds.display(isHavePrePage,"isHavePrePage");
            _ds.display(moreAction,"moreAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isHaveNextPage, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(actionType, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(apkInfo, true);
            _ds.displaySimple(pageUiType, true);
            _ds.displaySimple(titleBarImage, true);
            _ds.displaySimple(targetPos, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(timeOut, true);
            _ds.displaySimple(pullDownType, true);
            _ds.displaySimple(prePageContext, true);
            _ds.displaySimple(isHavePrePage, true);
            _ds.displaySimple(moreAction, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool isHaveNextPage;
        std::string title;
        jce::VideoAttentItem attentItem;
        jce::ShareItem shareItem;
        taf::Int32 actionType;
        std::string subTitle;
        jce::GameDownloadItemData apkInfo;
        taf::Int32 pageUiType;
        std::string titleBarImage;
        taf::Int32 targetPos;
        std::string reportParams;
        taf::Int32 timeOut;
        taf::Int32 pullDownType;
        std::string prePageContext;
        taf::Bool isHavePrePage;
        jce::ActionBarInfo moreAction;
    };
    inline bool operator==(const OperationPageResponse&l, const OperationPageResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.isHaveNextPage == r.isHaveNextPage && l.title == r.title && l.attentItem == r.attentItem && l.shareItem == r.shareItem && l.actionType == r.actionType && l.subTitle == r.subTitle && l.apkInfo == r.apkInfo && l.pageUiType == r.pageUiType && l.titleBarImage == r.titleBarImage && l.targetPos == r.targetPos && l.reportParams == r.reportParams && l.timeOut == r.timeOut && l.pullDownType == r.pullDownType && l.prePageContext == r.prePageContext && l.isHavePrePage == r.isHavePrePage && l.moreAction == r.moreAction;
    }
    inline bool operator!=(const OperationPageResponse&l, const OperationPageResponse&r)
    {
        return !(l == r);
    }

    struct NavOperatePageRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NavOperatePageRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        NavOperatePageRequest()
        :type(""),dataKey("")
        {
        }
        void resetDefautlt()
        {
            type = "";
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(dataKey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(dataKey, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string type;
        std::string dataKey;
    };
    inline bool operator==(const NavOperatePageRequest&l, const NavOperatePageRequest&r)
    {
        return l.type == r.type && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const NavOperatePageRequest&l, const NavOperatePageRequest&r)
    {
        return !(l == r);
    }

    struct NavOperatePageResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NavOperatePageResponse";
        }
        static string MD5()
        {
            return "34f59a1980e8bdc74adeb3928a571b1a";
        }
        NavOperatePageResponse()
        :errCode(0),title(""),actionType(0),subTitle(""),showEditModelList(false),titleOnEdit(""),labelMyChannelOnEdit(""),labelOtherChannelOnEdit(""),labelNoMoreTips("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            title = "";
            actionType = 0;
            subTitle = "";
            showEditModelList = false;
            titleOnEdit = "";
            labelMyChannelOnEdit = "";
            labelOtherChannelOnEdit = "";
            labelNoMoreTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(moduleList, 1);
            _os.write(title, 2);
            _os.write(attentItem, 3);
            _os.write(shareItem, 4);
            _os.write(actionType, 5);
            _os.write(subTitle, 6);
            _os.write(apkInfo, 7);
            _os.write(moreAction, 8);
            _os.write(showEditModelList, 9);
            _os.write(titleOnEdit, 10);
            _os.write(labelMyChannelOnEdit, 11);
            _os.write(labelOtherChannelOnEdit, 12);
            _os.write(labelNoMoreTips, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(moduleList, 1, true);
            _is.read(title, 2, false);
            _is.read(attentItem, 3, false);
            _is.read(shareItem, 4, false);
            _is.read(actionType, 5, false);
            _is.read(subTitle, 6, false);
            _is.read(apkInfo, 7, false);
            _is.read(moreAction, 8, false);
            _is.read(showEditModelList, 9, false);
            _is.read(titleOnEdit, 10, false);
            _is.read(labelMyChannelOnEdit, 11, false);
            _is.read(labelOtherChannelOnEdit, 12, false);
            _is.read(labelNoMoreTips, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(moduleList,"moduleList");
            _ds.display(title,"title");
            _ds.display(attentItem,"attentItem");
            _ds.display(shareItem,"shareItem");
            _ds.display(actionType,"actionType");
            _ds.display(subTitle,"subTitle");
            _ds.display(apkInfo,"apkInfo");
            _ds.display(moreAction,"moreAction");
            _ds.display(showEditModelList,"showEditModelList");
            _ds.display(titleOnEdit,"titleOnEdit");
            _ds.display(labelMyChannelOnEdit,"labelMyChannelOnEdit");
            _ds.display(labelOtherChannelOnEdit,"labelOtherChannelOnEdit");
            _ds.display(labelNoMoreTips,"labelNoMoreTips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(moduleList, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(actionType, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(apkInfo, true);
            _ds.displaySimple(moreAction, true);
            _ds.displaySimple(showEditModelList, true);
            _ds.displaySimple(titleOnEdit, true);
            _ds.displaySimple(labelMyChannelOnEdit, true);
            _ds.displaySimple(labelOtherChannelOnEdit, true);
            _ds.displaySimple(labelNoMoreTips, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::LiveTabModuleInfo> moduleList;
        std::string title;
        jce::VideoAttentItem attentItem;
        jce::ShareItem shareItem;
        taf::Int32 actionType;
        std::string subTitle;
        jce::GameDownloadItemData apkInfo;
        jce::ActionBarInfo moreAction;
        taf::Bool showEditModelList;
        std::string titleOnEdit;
        std::string labelMyChannelOnEdit;
        std::string labelOtherChannelOnEdit;
        std::string labelNoMoreTips;
    };
    inline bool operator==(const NavOperatePageResponse&l, const NavOperatePageResponse&r)
    {
        return l.errCode == r.errCode && l.moduleList == r.moduleList && l.title == r.title && l.attentItem == r.attentItem && l.shareItem == r.shareItem && l.actionType == r.actionType && l.subTitle == r.subTitle && l.apkInfo == r.apkInfo && l.moreAction == r.moreAction && l.showEditModelList == r.showEditModelList && l.titleOnEdit == r.titleOnEdit && l.labelMyChannelOnEdit == r.labelMyChannelOnEdit && l.labelOtherChannelOnEdit == r.labelOtherChannelOnEdit && l.labelNoMoreTips == r.labelNoMoreTips;
    }
    inline bool operator!=(const NavOperatePageResponse&l, const NavOperatePageResponse&r)
    {
        return !(l == r);
    }

    struct MyCommentListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MyCommentListRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        MyCommentListRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const MyCommentListRequest&l, const MyCommentListRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const MyCommentListRequest&l, const MyCommentListRequest&r)
    {
        return !(l == r);
    }

    struct MyCommentListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MyCommentListResponse";
        }
        static string MD5()
        {
            return "b02eee5e973c106c3deeb5935902ea91";
        }
        MyCommentListResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(itemList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(itemList, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(itemList,"itemList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::MyCommentItem> itemList;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const MyCommentListResponse&l, const MyCommentListResponse&r)
    {
        return l.errCode == r.errCode && l.itemList == r.itemList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const MyCommentListResponse&l, const MyCommentListResponse&r)
    {
        return !(l == r);
    }

    struct StarNewsListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarNewsListRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        StarNewsListRequest()
        :starNewsDataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            starNewsDataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starNewsDataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starNewsDataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starNewsDataKey,"starNewsDataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starNewsDataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string starNewsDataKey;
        std::string pageContext;
    };
    inline bool operator==(const StarNewsListRequest&l, const StarNewsListRequest&r)
    {
        return l.starNewsDataKey == r.starNewsDataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const StarNewsListRequest&l, const StarNewsListRequest&r)
    {
        return !(l == r);
    }

    struct StarNewsListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarNewsListResponse";
        }
        static string MD5()
        {
            return "c4d9aa1fc94c5c90f6f87469768db03f";
        }
        StarNewsListResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pageContext, 1);
            _os.write(uiData, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(uiData, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pageContext,"pageContext");
            _ds.display(uiData,"uiData");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string pageContext;
        vector<jce::TempletLine> uiData;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const StarNewsListResponse&l, const StarNewsListResponse&r)
    {
        return l.errCode == r.errCode && l.pageContext == r.pageContext && l.uiData == r.uiData && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const StarNewsListResponse&l, const StarNewsListResponse&r)
    {
        return !(l == r);
    }

    struct FanNewsListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanNewsListRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        FanNewsListRequest()
        :starFansDataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            starFansDataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starFansDataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starFansDataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starFansDataKey,"starFansDataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starFansDataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string starFansDataKey;
        std::string pageContext;
    };
    inline bool operator==(const FanNewsListRequest&l, const FanNewsListRequest&r)
    {
        return l.starFansDataKey == r.starFansDataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const FanNewsListRequest&l, const FanNewsListRequest&r)
    {
        return !(l == r);
    }

    struct FanNewsListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FanNewsListResponse";
        }
        static string MD5()
        {
            return "c4d9aa1fc94c5c90f6f87469768db03f";
        }
        FanNewsListResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pageContext, 1);
            _os.write(uiData, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(uiData, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pageContext,"pageContext");
            _ds.display(uiData,"uiData");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string pageContext;
        vector<jce::TempletLine> uiData;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const FanNewsListResponse&l, const FanNewsListResponse&r)
    {
        return l.errCode == r.errCode && l.pageContext == r.pageContext && l.uiData == r.uiData && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const FanNewsListResponse&l, const FanNewsListResponse&r)
    {
        return !(l == r);
    }

    struct StarHomeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarHomeRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        StarHomeRequest()
        :actorId("")
        {
        }
        void resetDefautlt()
        {
            actorId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actorId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actorId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actorId,"actorId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actorId, false);
            return _os;
        }
    public:
        std::string actorId;
    };
    inline bool operator==(const StarHomeRequest&l, const StarHomeRequest&r)
    {
        return l.actorId == r.actorId;
    }
    inline bool operator!=(const StarHomeRequest&l, const StarHomeRequest&r)
    {
        return !(l == r);
    }

    struct StarHomeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StarHomeResponse";
        }
        static string MD5()
        {
            return "58c195ecad87af1855fca501fa0103b9";
        }
        StarHomeResponse()
        :errCode(0),starNewsDataKey(""),starFansDataKey("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            starNewsDataKey = "";
            starFansDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(actorInfo, 1);
            _os.write(uiData, 2);
            _os.write(starNewsDataKey, 3);
            _os.write(coverDataMap, 4);
            _os.write(actorDataMap, 5);
            _os.write(starFansDataKey, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(actorInfo, 1, false);
            _is.read(uiData, 2, false);
            _is.read(starNewsDataKey, 3, false);
            _is.read(coverDataMap, 4, false);
            _is.read(actorDataMap, 5, false);
            _is.read(starFansDataKey, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(actorInfo,"actorInfo");
            _ds.display(uiData,"uiData");
            _ds.display(starNewsDataKey,"starNewsDataKey");
            _ds.display(coverDataMap,"coverDataMap");
            _ds.display(actorDataMap,"actorDataMap");
            _ds.display(starFansDataKey,"starFansDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(actorInfo, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(starNewsDataKey, true);
            _ds.displaySimple(coverDataMap, true);
            _ds.displaySimple(actorDataMap, true);
            _ds.displaySimple(starFansDataKey, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::ActorInfo actorInfo;
        vector<jce::TempletLine> uiData;
        std::string starNewsDataKey;
        map<std::string, jce::CoverDataList> coverDataMap;
        map<std::string, jce::ActorList> actorDataMap;
        std::string starFansDataKey;
    };
    inline bool operator==(const StarHomeResponse&l, const StarHomeResponse&r)
    {
        return l.errCode == r.errCode && l.actorInfo == r.actorInfo && l.uiData == r.uiData && l.starNewsDataKey == r.starNewsDataKey && l.coverDataMap == r.coverDataMap && l.actorDataMap == r.actorDataMap && l.starFansDataKey == r.starFansDataKey;
    }
    inline bool operator!=(const StarHomeResponse&l, const StarHomeResponse&r)
    {
        return !(l == r);
    }

    struct PersonalizeVideoListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PersonalizeVideoListRequest";
        }
        static string MD5()
        {
            return "b62bac7c92f4a90f1a6565e1bc24aca7";
        }
        PersonalizeVideoListRequest()
        :pageSize(0),msgtype(0)
        {
        }
        void resetDefautlt()
        {
            pageSize = 0;
            msgtype = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageSize, 0);
            _os.write(msgtype, 1);
            _os.write(itemList, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageSize, 0, true);
            _is.read(msgtype, 1, true);
            _is.read(itemList, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageSize,"pageSize");
            _ds.display(msgtype,"msgtype");
            _ds.display(itemList,"itemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageSize, true);
            _ds.displaySimple(msgtype, true);
            _ds.displaySimple(itemList, false);
            return _os;
        }
    public:
        taf::Int32 pageSize;
        taf::Int32 msgtype;
        vector<jce::PersonalizeVideoItem> itemList;
    };
    inline bool operator==(const PersonalizeVideoListRequest&l, const PersonalizeVideoListRequest&r)
    {
        return l.pageSize == r.pageSize && l.msgtype == r.msgtype && l.itemList == r.itemList;
    }
    inline bool operator!=(const PersonalizeVideoListRequest&l, const PersonalizeVideoListRequest&r)
    {
        return !(l == r);
    }

    struct PersonalizeVideoListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PersonalizeVideoListResponse";
        }
        static string MD5()
        {
            return "2e2dd76f7ed82dd46de896dd22e4aa06";
        }
        PersonalizeVideoListResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(itemList, 1);
            _os.write(updateTimePointList, 2);
            _os.write(wordingMap, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(itemList, 1, false);
            _is.read(updateTimePointList, 2, false);
            _is.read(wordingMap, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(itemList,"itemList");
            _ds.display(updateTimePointList,"updateTimePointList");
            _ds.display(wordingMap,"wordingMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(updateTimePointList, true);
            _ds.displaySimple(wordingMap, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::PersonalizeVideoItem> itemList;
        vector<taf::Int64> updateTimePointList;
        map<std::string, std::string> wordingMap;
    };
    inline bool operator==(const PersonalizeVideoListResponse&l, const PersonalizeVideoListResponse&r)
    {
        return l.errCode == r.errCode && l.itemList == r.itemList && l.updateTimePointList == r.updateTimePointList && l.wordingMap == r.wordingMap;
    }
    inline bool operator!=(const PersonalizeVideoListResponse&l, const PersonalizeVideoListResponse&r)
    {
        return !(l == r);
    }

    struct PersonalizeVideoReportRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PersonalizeVideoReportRequest";
        }
        static string MD5()
        {
            return "3902a9008ef0d1036dabf9e3f6c2ba7d";
        }
        PersonalizeVideoReportRequest()
        :type(0),id(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            id = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(id, 1);
            _os.write(reportKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(id, 1, true);
            _is.read(reportKey, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(id,"id");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(id, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        taf::Char type;
        std::string id;
        std::string reportKey;
    };
    inline bool operator==(const PersonalizeVideoReportRequest&l, const PersonalizeVideoReportRequest&r)
    {
        return l.type == r.type && l.id == r.id && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const PersonalizeVideoReportRequest&l, const PersonalizeVideoReportRequest&r)
    {
        return !(l == r);
    }

    struct PersonalizeVideoReportResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PersonalizeVideoReportResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        PersonalizeVideoReportResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const PersonalizeVideoReportResponse&l, const PersonalizeVideoReportResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const PersonalizeVideoReportResponse&l, const PersonalizeVideoReportResponse&r)
    {
        return !(l == r);
    }

    struct DiscoveryTabRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DiscoveryTabRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        DiscoveryTabRequest()
        :flag(0)
        {
        }
        void resetDefautlt()
        {
            flag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(flag, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(flag, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(flag,"flag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(flag, false);
            return _os;
        }
    public:
        taf::Int32 flag;
    };
    inline bool operator==(const DiscoveryTabRequest&l, const DiscoveryTabRequest&r)
    {
        return l.flag == r.flag;
    }
    inline bool operator!=(const DiscoveryTabRequest&l, const DiscoveryTabRequest&r)
    {
        return !(l == r);
    }

    struct DiscoveryTabResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DiscoveryTabResponse";
        }
        static string MD5()
        {
            return "51e7a6d88bd2d00900ce371b1c9b97e8";
        }
        DiscoveryTabResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(itemList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(itemList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(itemList,"itemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(itemList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::DiscoveryTabItem> itemList;
    };
    inline bool operator==(const DiscoveryTabResponse&l, const DiscoveryTabResponse&r)
    {
        return l.errCode == r.errCode && l.itemList == r.itemList;
    }
    inline bool operator!=(const DiscoveryTabResponse&l, const DiscoveryTabResponse&r)
    {
        return !(l == r);
    }

    struct PostVoteRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PostVoteRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        PostVoteRequest()
        :voteKey("")
        {
        }
        void resetDefautlt()
        {
            voteKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(voteKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(voteKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(voteKey,"voteKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(voteKey, false);
            return _os;
        }
    public:
        std::string voteKey;
    };
    inline bool operator==(const PostVoteRequest&l, const PostVoteRequest&r)
    {
        return l.voteKey == r.voteKey;
    }
    inline bool operator!=(const PostVoteRequest&l, const PostVoteRequest&r)
    {
        return !(l == r);
    }

    struct PostVoteResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PostVoteResponse";
        }
        static string MD5()
        {
            return "99089463f8d59126e6f57405f13052dd";
        }
        PostVoteResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(voteData, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(voteData, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(voteData,"voteData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(voteData, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::VoteData voteData;
    };
    inline bool operator==(const PostVoteResponse&l, const PostVoteResponse&r)
    {
        return l.errCode == r.errCode && l.voteData == r.voteData;
    }
    inline bool operator!=(const PostVoteResponse&l, const PostVoteResponse&r)
    {
        return !(l == r);
    }

    struct GetVoteRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetVoteRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetVoteRequest()
        :voteKey("")
        {
        }
        void resetDefautlt()
        {
            voteKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(voteKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(voteKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(voteKey,"voteKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(voteKey, false);
            return _os;
        }
    public:
        std::string voteKey;
    };
    inline bool operator==(const GetVoteRequest&l, const GetVoteRequest&r)
    {
        return l.voteKey == r.voteKey;
    }
    inline bool operator!=(const GetVoteRequest&l, const GetVoteRequest&r)
    {
        return !(l == r);
    }

    struct GetVoteResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetVoteResponse";
        }
        static string MD5()
        {
            return "99089463f8d59126e6f57405f13052dd";
        }
        GetVoteResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(voteData, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(voteData, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(voteData,"voteData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(voteData, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::VoteData voteData;
    };
    inline bool operator==(const GetVoteResponse&l, const GetVoteResponse&r)
    {
        return l.errCode == r.errCode && l.voteData == r.voteData;
    }
    inline bool operator!=(const GetVoteResponse&l, const GetVoteResponse&r)
    {
        return !(l == r);
    }

    struct VideoTagRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoTagRequest";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        VideoTagRequest()
        :vid(""),pr(0)
        {
        }
        void resetDefautlt()
        {
            vid = "";
            pr = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(pr, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, true);
            _is.read(pr, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(pr,"pr");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(pr, false);
            return _os;
        }
    public:
        std::string vid;
        taf::Int32 pr;
    };
    inline bool operator==(const VideoTagRequest&l, const VideoTagRequest&r)
    {
        return l.vid == r.vid && l.pr == r.pr;
    }
    inline bool operator!=(const VideoTagRequest&l, const VideoTagRequest&r)
    {
        return !(l == r);
    }

    struct VideoTagResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoTagResponse";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        VideoTagResponse()
        :errCode(0),tagJson("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            tagJson = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(tagJson, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(tagJson, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(tagJson,"tagJson");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(tagJson, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string tagJson;
    };
    inline bool operator==(const VideoTagResponse&l, const VideoTagResponse&r)
    {
        return l.errCode == r.errCode && l.tagJson == r.tagJson;
    }
    inline bool operator!=(const VideoTagResponse&l, const VideoTagResponse&r)
    {
        return !(l == r);
    }

    struct DynamicDataRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DynamicDataRequest";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        DynamicDataRequest()
        :type(""),dataKey(""),pageContext(""),vid(""),referKey("")
        {
        }
        void resetDefautlt()
        {
            type = "";
            dataKey = "";
            pageContext = "";
            vid = "";
            referKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(dataKey, 1);
            _os.write(pageContext, 2);
            _os.write(vid, 3);
            _os.write(referKey, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(dataKey, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(vid, 3, false);
            _is.read(referKey, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(vid,"vid");
            _ds.display(referKey,"referKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(referKey, false);
            return _os;
        }
    public:
        std::string type;
        std::string dataKey;
        std::string pageContext;
        std::string vid;
        std::string referKey;
    };
    inline bool operator==(const DynamicDataRequest&l, const DynamicDataRequest&r)
    {
        return l.type == r.type && l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.vid == r.vid && l.referKey == r.referKey;
    }
    inline bool operator!=(const DynamicDataRequest&l, const DynamicDataRequest&r)
    {
        return !(l == r);
    }

    struct DynamicDataResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DynamicDataResponse";
        }
        static string MD5()
        {
            return "8e20d544570fc1e65bbb5ca7673ea635";
        }
        DynamicDataResponse()
        :errCode(0),pageContext(""),isHaveNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            isHaveNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(isHaveNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(isHaveNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(isHaveNextPage,"isHaveNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isHaveNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool isHaveNextPage;
    };
    inline bool operator==(const DynamicDataResponse&l, const DynamicDataResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.isHaveNextPage == r.isHaveNextPage;
    }
    inline bool operator!=(const DynamicDataResponse&l, const DynamicDataResponse&r)
    {
        return !(l == r);
    }

    struct BusinessVoteListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.BusinessVoteListRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        BusinessVoteListRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const BusinessVoteListRequest&l, const BusinessVoteListRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const BusinessVoteListRequest&l, const BusinessVoteListRequest&r)
    {
        return !(l == r);
    }

    struct BusinessVoteListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.BusinessVoteListResponse";
        }
        static string MD5()
        {
            return "d01fcab7a473ced9f581ab340346254a";
        }
        BusinessVoteListResponse()
        :errCode(0),voteIcon(""),voteLimit(0),votedCount(0),bottleCount(0),pageContext(""),isHaveNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            voteIcon = "";
            voteLimit = 0;
            votedCount = 0;
            bottleCount = 0;
            pageContext = "";
            isHaveNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(voteList, 1);
            _os.write(voteIcon, 2);
            _os.write(voteLimit, 3);
            _os.write(votedCount, 4);
            _os.write(bottleCount, 5);
            _os.write(lines, 6);
            _os.write(apkInfo, 7);
            _os.write(dialogs, 8);
            _os.write(shareItem, 9);
            _os.write(pageContext, 10);
            _os.write(isHaveNextPage, 11);
            _os.write(sharePageAction, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(voteList, 1, true);
            _is.read(voteIcon, 2, false);
            _is.read(voteLimit, 3, true);
            _is.read(votedCount, 4, true);
            _is.read(bottleCount, 5, true);
            _is.read(lines, 6, false);
            _is.read(apkInfo, 7, false);
            _is.read(dialogs, 8, false);
            _is.read(shareItem, 9, false);
            _is.read(pageContext, 10, false);
            _is.read(isHaveNextPage, 11, false);
            _is.read(sharePageAction, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(voteList,"voteList");
            _ds.display(voteIcon,"voteIcon");
            _ds.display(voteLimit,"voteLimit");
            _ds.display(votedCount,"votedCount");
            _ds.display(bottleCount,"bottleCount");
            _ds.display(lines,"lines");
            _ds.display(apkInfo,"apkInfo");
            _ds.display(dialogs,"dialogs");
            _ds.display(shareItem,"shareItem");
            _ds.display(pageContext,"pageContext");
            _ds.display(isHaveNextPage,"isHaveNextPage");
            _ds.display(sharePageAction,"sharePageAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(voteList, true);
            _ds.displaySimple(voteIcon, true);
            _ds.displaySimple(voteLimit, true);
            _ds.displaySimple(votedCount, true);
            _ds.displaySimple(bottleCount, true);
            _ds.displaySimple(lines, true);
            _ds.displaySimple(apkInfo, true);
            _ds.displaySimple(dialogs, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isHaveNextPage, true);
            _ds.displaySimple(sharePageAction, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::ActorInfo> voteList;
        std::string voteIcon;
        taf::Int32 voteLimit;
        taf::Int32 votedCount;
        taf::Int32 bottleCount;
        vector<std::string> lines;
        jce::GameDownloadItemData apkInfo;
        map<std::string, jce::CommonDialogInfo> dialogs;
        jce::ShareItem shareItem;
        std::string pageContext;
        taf::Bool isHaveNextPage;
        jce::Action sharePageAction;
    };
    inline bool operator==(const BusinessVoteListResponse&l, const BusinessVoteListResponse&r)
    {
        return l.errCode == r.errCode && l.voteList == r.voteList && l.voteIcon == r.voteIcon && l.voteLimit == r.voteLimit && l.votedCount == r.votedCount && l.bottleCount == r.bottleCount && l.lines == r.lines && l.apkInfo == r.apkInfo && l.dialogs == r.dialogs && l.shareItem == r.shareItem && l.pageContext == r.pageContext && l.isHaveNextPage == r.isHaveNextPage && l.sharePageAction == r.sharePageAction;
    }
    inline bool operator!=(const BusinessVoteListResponse&l, const BusinessVoteListResponse&r)
    {
        return !(l == r);
    }

    struct FollowTVRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FollowTVRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        FollowTVRequest()
        :dataKey(""),filterValue(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            filterValue = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(filterValue, 1);
            _os.write(pageContext, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(filterValue, 1, false);
            _is.read(pageContext, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(filterValue,"filterValue");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(filterValue, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string filterValue;
        std::string pageContext;
    };
    inline bool operator==(const FollowTVRequest&l, const FollowTVRequest&r)
    {
        return l.dataKey == r.dataKey && l.filterValue == r.filterValue && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const FollowTVRequest&l, const FollowTVRequest&r)
    {
        return !(l == r);
    }

    struct FollowTVResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FollowTVResponse";
        }
        static string MD5()
        {
            return "5e000b29cbe1531c7b361a0684184814";
        }
        FollowTVResponse()
        :errCode(0),pageContext(""),hasNextPage(true),pageTitle("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            pageTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(filter, 2);
            _os.write(pageContext, 3);
            _os.write(hasNextPage, 4);
            _os.write(shareItem, 5);
            _os.write(pageTitle, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(filter, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(hasNextPage, 4, false);
            _is.read(shareItem, 5, false);
            _is.read(pageTitle, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(filter,"filter");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(shareItem,"shareItem");
            _ds.display(pageTitle,"pageTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(filter, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(pageTitle, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::FollowTVPoster> uiData;
        jce::VideoFilter filter;
        std::string pageContext;
        taf::Bool hasNextPage;
        jce::ShareItem shareItem;
        std::string pageTitle;
    };
    inline bool operator==(const FollowTVResponse&l, const FollowTVResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.filter == r.filter && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.shareItem == r.shareItem && l.pageTitle == r.pageTitle;
    }
    inline bool operator!=(const FollowTVResponse&l, const FollowTVResponse&r)
    {
        return !(l == r);
    }

    struct NACRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NACRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        NACRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const NACRequest&l, const NACRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const NACRequest&l, const NACRequest&r)
    {
        return !(l == r);
    }

    struct NACResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NACResponse";
        }
        static string MD5()
        {
            return "89e89732bf913b423b67271fed71385f";
        }
        NACResponse()
        :errCode(0),cliIPv6("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            cliIPv6 = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(serverList, 1);
            _os.write(serverListv6, 2);
            _os.write(cliIPv6, 3);
            _os.write(netSpeedList, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(serverList, 1, false);
            _is.read(serverListv6, 2, false);
            _is.read(cliIPv6, 3, false);
            _is.read(netSpeedList, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(serverList,"serverList");
            _ds.display(serverListv6,"serverListv6");
            _ds.display(cliIPv6,"cliIPv6");
            _ds.display(netSpeedList,"netSpeedList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(serverList, true);
            _ds.displaySimple(serverListv6, true);
            _ds.displaySimple(cliIPv6, true);
            _ds.displaySimple(netSpeedList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::ServerInfo> serverList;
        vector<jce::ServerInfo> serverListv6;
        std::string cliIPv6;
        vector<jce::ServerInfo> netSpeedList;
    };
    inline bool operator==(const NACResponse&l, const NACResponse&r)
    {
        return l.errCode == r.errCode && l.serverList == r.serverList && l.serverListv6 == r.serverListv6 && l.cliIPv6 == r.cliIPv6 && l.netSpeedList == r.netSpeedList;
    }
    inline bool operator!=(const NACResponse&l, const NACResponse&r)
    {
        return !(l == r);
    }

    struct NetSpeedDetectRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NetSpeedDetectRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        NetSpeedDetectRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const NetSpeedDetectRequest&l, const NetSpeedDetectRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const NetSpeedDetectRequest&l, const NetSpeedDetectRequest&r)
    {
        return !(l == r);
    }

    struct NetDetectInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NetDetectInfo";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        NetDetectInfo()
        :speedData("")
        {
        }
        void resetDefautlt()
        {
            speedData = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(speedData, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(speedData, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(speedData,"speedData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(speedData, false);
            return _os;
        }
    public:
        std::string speedData;
    };
    inline bool operator==(const NetDetectInfo&l, const NetDetectInfo&r)
    {
        return l.speedData == r.speedData;
    }
    inline bool operator!=(const NetDetectInfo&l, const NetDetectInfo&r)
    {
        return !(l == r);
    }

    struct NetSpeedDetectResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.NetSpeedDetectResponse";
        }
        static string MD5()
        {
            return "268535e028a8b83bc8ea2097b36dd37f";
        }
        NetSpeedDetectResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(detectInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(detectInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(detectInfo,"detectInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(detectInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::NetDetectInfo detectInfo;
    };
    inline bool operator==(const NetSpeedDetectResponse&l, const NetSpeedDetectResponse&r)
    {
        return l.errCode == r.errCode && l.detectInfo == r.detectInfo;
    }
    inline bool operator!=(const NetSpeedDetectResponse&l, const NetSpeedDetectResponse&r)
    {
        return !(l == r);
    }

    struct FullScreenVideoDetailRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FullScreenVideoDetailRequest";
        }
        static string MD5()
        {
            return "3cc85996543c37ebfe022f10dc00d85b";
        }
        FullScreenVideoDetailRequest()
        :vid(""),cid(""),lid(""),pid("")
        {
        }
        void resetDefautlt()
        {
            vid = "";
            cid = "";
            lid = "";
            pid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(dataSelector, 1);
            _os.write(cid, 2);
            _os.write(lid, 3);
            _os.write(pid, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, true);
            _is.read(dataSelector, 1, true);
            _is.read(cid, 2, false);
            _is.read(lid, 3, false);
            _is.read(pid, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(dataSelector,"dataSelector");
            _ds.display(cid,"cid");
            _ds.display(lid,"lid");
            _ds.display(pid,"pid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(dataSelector, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(pid, false);
            return _os;
        }
    public:
        std::string vid;
        vector<taf::Int32> dataSelector;
        std::string cid;
        std::string lid;
        std::string pid;
    };
    inline bool operator==(const FullScreenVideoDetailRequest&l, const FullScreenVideoDetailRequest&r)
    {
        return l.vid == r.vid && l.dataSelector == r.dataSelector && l.cid == r.cid && l.lid == r.lid && l.pid == r.pid;
    }
    inline bool operator!=(const FullScreenVideoDetailRequest&l, const FullScreenVideoDetailRequest&r)
    {
        return !(l == r);
    }

    struct FullScreenVideoDetailResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FullScreenVideoDetailResponse";
        }
        static string MD5()
        {
            return "6e8285c6ae4dd5f549de8b063b5f42df";
        }
        FullScreenVideoDetailResponse()
        :errCode(0),videoItemType(0),cacheDataKey("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            videoItemType = 0;
            cacheDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(videoItemType, 1);
            _os.write(videoData, 2);
            _os.write(attentData, 3);
            _os.write(pastCoverData, 4);
            _os.write(recomCoverData, 5);
            _os.write(recomVideodata, 6);
            _os.write(cacheDataKey, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(videoItemType, 1, false);
            _is.read(videoData, 2, false);
            _is.read(attentData, 3, false);
            _is.read(pastCoverData, 4, false);
            _is.read(recomCoverData, 5, false);
            _is.read(recomVideodata, 6, false);
            _is.read(cacheDataKey, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(videoItemType,"videoItemType");
            _ds.display(videoData,"videoData");
            _ds.display(attentData,"attentData");
            _ds.display(pastCoverData,"pastCoverData");
            _ds.display(recomCoverData,"recomCoverData");
            _ds.display(recomVideodata,"recomVideodata");
            _ds.display(cacheDataKey,"cacheDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(videoItemType, true);
            _ds.displaySimple(videoData, true);
            _ds.displaySimple(attentData, true);
            _ds.displaySimple(pastCoverData, true);
            _ds.displaySimple(recomCoverData, true);
            _ds.displaySimple(recomVideodata, true);
            _ds.displaySimple(cacheDataKey, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 videoItemType;
        vector<jce::VideoItemData> videoData;
        vector<jce::VideoAttentItem> attentData;
        vector<jce::CoverItemData> pastCoverData;
        vector<jce::CoverItemData> recomCoverData;
        vector<jce::VideoItemData> recomVideodata;
        std::string cacheDataKey;
    };
    inline bool operator==(const FullScreenVideoDetailResponse&l, const FullScreenVideoDetailResponse&r)
    {
        return l.errCode == r.errCode && l.videoItemType == r.videoItemType && l.videoData == r.videoData && l.attentData == r.attentData && l.pastCoverData == r.pastCoverData && l.recomCoverData == r.recomCoverData && l.recomVideodata == r.recomVideodata && l.cacheDataKey == r.cacheDataKey;
    }
    inline bool operator!=(const FullScreenVideoDetailResponse&l, const FullScreenVideoDetailResponse&r)
    {
        return !(l == r);
    }

    struct QQLiveActionRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QQLiveActionRequest";
        }
        static string MD5()
        {
            return "8d61b639cda77ea57102c6b9cbb5aca2";
        }
        QQLiveActionRequest()
        :openOriUrl(""),actionUrl(""),source(0)
        {
        }
        void resetDefautlt()
        {
            openOriUrl = "";
            actionUrl = "";
            source = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(openOriUrl, 0);
            _os.write(actionUrl, 1);
            _os.write(source, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(openOriUrl, 0, false);
            _is.read(actionUrl, 1, false);
            _is.read(source, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(openOriUrl,"openOriUrl");
            _ds.display(actionUrl,"actionUrl");
            _ds.display(source,"source");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(openOriUrl, true);
            _ds.displaySimple(actionUrl, true);
            _ds.displaySimple(source, false);
            return _os;
        }
    public:
        std::string openOriUrl;
        std::string actionUrl;
        taf::Int32 source;
    };
    inline bool operator==(const QQLiveActionRequest&l, const QQLiveActionRequest&r)
    {
        return l.openOriUrl == r.openOriUrl && l.actionUrl == r.actionUrl && l.source == r.source;
    }
    inline bool operator!=(const QQLiveActionRequest&l, const QQLiveActionRequest&r)
    {
        return !(l == r);
    }

    struct QQLiveActionResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QQLiveActionResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        QQLiveActionResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const QQLiveActionResponse&l, const QQLiveActionResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const QQLiveActionResponse&l, const QQLiveActionResponse&r)
    {
        return !(l == r);
    }

    struct DynamicItemRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DynamicItemRequest";
        }
        static string MD5()
        {
            return "9bcfaf911c12a5a140566442a651b4bf";
        }
        DynamicItemRequest()
        :dataVersion(0),imei(""),carrier(-1),context("")
        {
        }
        void resetDefautlt()
        {
            dataVersion = 0;
            imei = "";
            carrier = -1;
            context = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataVersion, 0);
            _os.write(imei, 1);
            _os.write(carrier, 2);
            _os.write(context, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataVersion, 0, true);
            _is.read(imei, 1, false);
            _is.read(carrier, 2, false);
            _is.read(context, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataVersion,"dataVersion");
            _ds.display(imei,"imei");
            _ds.display(carrier,"carrier");
            _ds.display(context,"context");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataVersion, true);
            _ds.displaySimple(imei, true);
            _ds.displaySimple(carrier, true);
            _ds.displaySimple(context, false);
            return _os;
        }
    public:
        taf::Int32 dataVersion;
        std::string imei;
        taf::Int32 carrier;
        std::string context;
    };
    inline bool operator==(const DynamicItemRequest&l, const DynamicItemRequest&r)
    {
        return l.dataVersion == r.dataVersion && l.imei == r.imei && l.carrier == r.carrier && l.context == r.context;
    }
    inline bool operator!=(const DynamicItemRequest&l, const DynamicItemRequest&r)
    {
        return !(l == r);
    }

    struct DynamicItemResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DynamicItemResponse";
        }
        static string MD5()
        {
            return "f1554a1120e7f3365a6647f91f9f09f6";
        }
        DynamicItemResponse()
        :errCode(0),context("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            context = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(itemList, 1);
            _os.write(replaceItemList, 2);
            _os.write(context, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(itemList, 1, false);
            _is.read(replaceItemList, 2, false);
            _is.read(context, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(itemList,"itemList");
            _ds.display(replaceItemList,"replaceItemList");
            _ds.display(context,"context");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(replaceItemList, true);
            _ds.displaySimple(context, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::DynamicItemInfo> itemList;
        map<std::string, jce::DynamicItemInfo> replaceItemList;
        std::string context;
    };
    inline bool operator==(const DynamicItemResponse&l, const DynamicItemResponse&r)
    {
        return l.errCode == r.errCode && l.itemList == r.itemList && l.replaceItemList == r.replaceItemList && l.context == r.context;
    }
    inline bool operator!=(const DynamicItemResponse&l, const DynamicItemResponse&r)
    {
        return !(l == r);
    }

    struct CommonVideoListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommonVideoListRequest";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        CommonVideoListRequest()
        :type(0),dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(dataKey, 1);
            _os.write(pageContext, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(dataKey, 1, true);
            _is.read(pageContext, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const CommonVideoListRequest&l, const CommonVideoListRequest&r)
    {
        return l.type == r.type && l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const CommonVideoListRequest&l, const CommonVideoListRequest&r)
    {
        return !(l == r);
    }

    struct CommonVideoListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommonVideoListResponse";
        }
        static string MD5()
        {
            return "b4651d9723ba4639e65de308611ef257";
        }
        CommonVideoListResponse()
        :errCode(0),pageContext(""),hasNextPage(true),hasPreviousPage(true),previousPageContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            hasPreviousPage = true;
            previousPageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pageContext, 1);
            _os.write(videoList, 2);
            _os.write(hasNextPage, 3);
            _os.write(hasPreviousPage, 4);
            _os.write(previousPageContext, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(videoList, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(hasPreviousPage, 4, false);
            _is.read(previousPageContext, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pageContext,"pageContext");
            _ds.display(videoList,"videoList");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(hasPreviousPage,"hasPreviousPage");
            _ds.display(previousPageContext,"previousPageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(videoList, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(hasPreviousPage, true);
            _ds.displaySimple(previousPageContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string pageContext;
        vector<jce::VideoItemData> videoList;
        taf::Bool hasNextPage;
        taf::Bool hasPreviousPage;
        std::string previousPageContext;
    };
    inline bool operator==(const CommonVideoListResponse&l, const CommonVideoListResponse&r)
    {
        return l.errCode == r.errCode && l.pageContext == r.pageContext && l.videoList == r.videoList && l.hasNextPage == r.hasNextPage && l.hasPreviousPage == r.hasPreviousPage && l.previousPageContext == r.previousPageContext;
    }
    inline bool operator!=(const CommonVideoListResponse&l, const CommonVideoListResponse&r)
    {
        return !(l == r);
    }

    struct CommonCoverListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommonCoverListRequest";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        CommonCoverListRequest()
        :type(0),dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(dataKey, 1);
            _os.write(pageContext, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(dataKey, 1, true);
            _is.read(pageContext, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const CommonCoverListRequest&l, const CommonCoverListRequest&r)
    {
        return l.type == r.type && l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const CommonCoverListRequest&l, const CommonCoverListRequest&r)
    {
        return !(l == r);
    }

    struct CommonCoverListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommonCoverListResponse";
        }
        static string MD5()
        {
            return "5bc2d105f504a123e6b44d6e40caf366";
        }
        CommonCoverListResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pageContext, 1);
            _os.write(coverList, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(coverList, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pageContext,"pageContext");
            _ds.display(coverList,"coverList");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(coverList, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string pageContext;
        vector<jce::CoverItemData> coverList;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const CommonCoverListResponse&l, const CommonCoverListResponse&r)
    {
        return l.errCode == r.errCode && l.pageContext == r.pageContext && l.coverList == r.coverList && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const CommonCoverListResponse&l, const CommonCoverListResponse&r)
    {
        return !(l == r);
    }

    struct DislikeVideoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DislikeVideoRequest";
        }
        static string MD5()
        {
            return "89945aac2d55c98d9c975caff4249a94";
        }
        DislikeVideoRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(optionIds, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(optionIds, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(optionIds,"optionIds");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(optionIds, false);
            return _os;
        }
    public:
        std::string dataKey;
        vector<std::string> optionIds;
    };
    inline bool operator==(const DislikeVideoRequest&l, const DislikeVideoRequest&r)
    {
        return l.dataKey == r.dataKey && l.optionIds == r.optionIds;
    }
    inline bool operator!=(const DislikeVideoRequest&l, const DislikeVideoRequest&r)
    {
        return !(l == r);
    }

    struct DislikeVideoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DislikeVideoResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        DislikeVideoResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const DislikeVideoResponse&l, const DislikeVideoResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const DislikeVideoResponse&l, const DislikeVideoResponse&r)
    {
        return !(l == r);
    }

    struct ChannelModPluginDataRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelModPluginDataRequest";
        }
        static string MD5()
        {
            return "6cde13965e4de70b02baf024aff78fec";
        }
        ChannelModPluginDataRequest()
        :scence(0),modId(0),channelItemId(""),lid(""),cid(""),vid(""),historyVid(""),expansion(""),outWebId(""),pid(""),position(""),rawdata(""),dataKey("")
        {
        }
        void resetDefautlt()
        {
            scence = 0;
            modId = 0;
            channelItemId = "";
            lid = "";
            cid = "";
            vid = "";
            historyVid = "";
            expansion = "";
            outWebId = "";
            pid = "";
            position = "";
            rawdata = "";
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(scence, 0);
            _os.write(modId, 1);
            _os.write(channelItemId, 2);
            _os.write(lid, 3);
            _os.write(cid, 4);
            _os.write(vid, 5);
            _os.write(historyVid, 6);
            _os.write(expansion, 7);
            _os.write(outWebId, 8);
            _os.write(pid, 9);
            _os.write(cids, 10);
            _os.write(position, 11);
            _os.write(rawdata, 12);
            _os.write(adContextList, 13);
            _os.write(adRequestInfo, 14);
            _os.write(dataKey, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(scence, 0, true);
            _is.read(modId, 1, true);
            _is.read(channelItemId, 2, false);
            _is.read(lid, 3, false);
            _is.read(cid, 4, false);
            _is.read(vid, 5, false);
            _is.read(historyVid, 6, false);
            _is.read(expansion, 7, false);
            _is.read(outWebId, 8, false);
            _is.read(pid, 9, false);
            _is.read(cids, 10, false);
            _is.read(position, 11, false);
            _is.read(rawdata, 12, false);
            _is.read(adContextList, 13, false);
            _is.read(adRequestInfo, 14, false);
            _is.read(dataKey, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(scence,"scence");
            _ds.display(modId,"modId");
            _ds.display(channelItemId,"channelItemId");
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(historyVid,"historyVid");
            _ds.display(expansion,"expansion");
            _ds.display(outWebId,"outWebId");
            _ds.display(pid,"pid");
            _ds.display(cids,"cids");
            _ds.display(position,"position");
            _ds.display(rawdata,"rawdata");
            _ds.display(adContextList,"adContextList");
            _ds.display(adRequestInfo,"adRequestInfo");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(scence, true);
            _ds.displaySimple(modId, true);
            _ds.displaySimple(channelItemId, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(historyVid, true);
            _ds.displaySimple(expansion, true);
            _ds.displaySimple(outWebId, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(cids, true);
            _ds.displaySimple(position, true);
            _ds.displaySimple(rawdata, true);
            _ds.displaySimple(adContextList, true);
            _ds.displaySimple(adRequestInfo, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        taf::Int32 scence;
        taf::Int32 modId;
        std::string channelItemId;
        std::string lid;
        std::string cid;
        std::string vid;
        std::string historyVid;
        std::string expansion;
        std::string outWebId;
        std::string pid;
        vector<std::string> cids;
        std::string position;
        std::string rawdata;
        vector<std::string> adContextList;
        jce::AdRequestInfo adRequestInfo;
        std::string dataKey;
    };
    inline bool operator==(const ChannelModPluginDataRequest&l, const ChannelModPluginDataRequest&r)
    {
        return l.scence == r.scence && l.modId == r.modId && l.channelItemId == r.channelItemId && l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.historyVid == r.historyVid && l.expansion == r.expansion && l.outWebId == r.outWebId && l.pid == r.pid && l.cids == r.cids && l.position == r.position && l.rawdata == r.rawdata && l.adContextList == r.adContextList && l.adRequestInfo == r.adRequestInfo && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const ChannelModPluginDataRequest&l, const ChannelModPluginDataRequest&r)
    {
        return !(l == r);
    }

    struct ChannelModPluginDataResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelModPluginDataResponse";
        }
        static string MD5()
        {
            return "5f84a0faa3d3897f09f7aa9a023ed112";
        }
        ChannelModPluginDataResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(data, 1);
            _os.write(videoDataMap, 2);
            _os.write(coverDataMap, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(data, 1, false);
            _is.read(videoDataMap, 2, false);
            _is.read(coverDataMap, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(data,"data");
            _ds.display(videoDataMap,"videoDataMap");
            _ds.display(coverDataMap,"coverDataMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(data, true);
            _ds.displaySimple(videoDataMap, true);
            _ds.displaySimple(coverDataMap, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> data;
        map<std::string, jce::VideoDataList> videoDataMap;
        map<std::string, jce::CoverDataList> coverDataMap;
    };
    inline bool operator==(const ChannelModPluginDataResponse&l, const ChannelModPluginDataResponse&r)
    {
        return l.errCode == r.errCode && l.data == r.data && l.videoDataMap == r.videoDataMap && l.coverDataMap == r.coverDataMap;
    }
    inline bool operator!=(const ChannelModPluginDataResponse&l, const ChannelModPluginDataResponse&r)
    {
        return !(l == r);
    }

    struct VideoListVideoInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoListVideoInfoRequest";
        }
        static string MD5()
        {
            return "2e47ab01492b9d04d98010e3579f7440";
        }
        VideoListVideoInfoRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(keyItems, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(keyItems, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(keyItems,"keyItems");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(keyItems, false);
            return _os;
        }
    public:
        vector<jce::VideoKeyItem> keyItems;
    };
    inline bool operator==(const VideoListVideoInfoRequest&l, const VideoListVideoInfoRequest&r)
    {
        return l.keyItems == r.keyItems;
    }
    inline bool operator!=(const VideoListVideoInfoRequest&l, const VideoListVideoInfoRequest&r)
    {
        return !(l == r);
    }

    struct VideoListVideoInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoListVideoInfoResponse";
        }
        static string MD5()
        {
            return "6a02fcbc5839f56f64b972f15f44aefb";
        }
        VideoListVideoInfoResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(itemDatas, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(itemDatas, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(itemDatas,"itemDatas");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(itemDatas, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::VideoInfoPosterItem> itemDatas;
    };
    inline bool operator==(const VideoListVideoInfoResponse&l, const VideoListVideoInfoResponse&r)
    {
        return l.errCode == r.errCode && l.itemDatas == r.itemDatas;
    }
    inline bool operator!=(const VideoListVideoInfoResponse&l, const VideoListVideoInfoResponse&r)
    {
        return !(l == r);
    }

    struct LiveSubscribeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveSubscribeRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        LiveSubscribeRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const LiveSubscribeRequest&l, const LiveSubscribeRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const LiveSubscribeRequest&l, const LiveSubscribeRequest&r)
    {
        return !(l == r);
    }

    struct LiveSubscribeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveSubscribeResponse";
        }
        static string MD5()
        {
            return "9f3f8bb3502c37f154d466e57d4286ad";
        }
        LiveSubscribeResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(subscribes, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(subscribes, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(subscribes,"subscribes");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(subscribes, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::LiveSubscribeInfo> subscribes;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const LiveSubscribeResponse&l, const LiveSubscribeResponse&r)
    {
        return l.errCode == r.errCode && l.subscribes == r.subscribes && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const LiveSubscribeResponse&l, const LiveSubscribeResponse&r)
    {
        return !(l == r);
    }

    struct LiveRecommendRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveRecommendRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        LiveRecommendRequest()
        :pid(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            pid = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pid, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pid, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pid,"pid");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pid;
        std::string pageContext;
    };
    inline bool operator==(const LiveRecommendRequest&l, const LiveRecommendRequest&r)
    {
        return l.pid == r.pid && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const LiveRecommendRequest&l, const LiveRecommendRequest&r)
    {
        return !(l == r);
    }

    struct LiveRecommendResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveRecommendResponse";
        }
        static string MD5()
        {
            return "1cee63e124e4d8fb3b4ba09bc5530e07";
        }
        LiveRecommendResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(recommendInfos, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(recommendInfos, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(recommendInfos,"recommendInfos");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(recommendInfos, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::LiveRlativeRecommendVideoItem> recommendInfos;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const LiveRecommendResponse&l, const LiveRecommendResponse&r)
    {
        return l.errCode == r.errCode && l.recommendInfos == r.recommendInfos && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const LiveRecommendResponse&l, const LiveRecommendResponse&r)
    {
        return !(l == r);
    }

    struct FilmTicketRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FilmTicketRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        FilmTicketRequest()
        :cid("")
        {
        }
        void resetDefautlt()
        {
            cid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cid, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cid, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cid,"cid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cid, false);
            return _os;
        }
    public:
        std::string cid;
    };
    inline bool operator==(const FilmTicketRequest&l, const FilmTicketRequest&r)
    {
        return l.cid == r.cid;
    }
    inline bool operator!=(const FilmTicketRequest&l, const FilmTicketRequest&r)
    {
        return !(l == r);
    }

    struct FilmTicketResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FilmTicketResponse";
        }
        static string MD5()
        {
            return "42c5eb5b8f62e67622afb47f5acb38ad";
        }
        FilmTicketResponse()
        :isHaveTicket(true)
        {
        }
        void resetDefautlt()
        {
            isHaveTicket = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(isHaveTicket, 0);
            _os.write(buyTicketItem, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(isHaveTicket, 0, true);
            _is.read(buyTicketItem, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(isHaveTicket,"isHaveTicket");
            _ds.display(buyTicketItem,"buyTicketItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(isHaveTicket, true);
            _ds.displaySimple(buyTicketItem, false);
            return _os;
        }
    public:
        taf::Bool isHaveTicket;
        jce::ActionBarInfo buyTicketItem;
    };
    inline bool operator==(const FilmTicketResponse&l, const FilmTicketResponse&r)
    {
        return l.isHaveTicket == r.isHaveTicket && l.buyTicketItem == r.buyTicketItem;
    }
    inline bool operator!=(const FilmTicketResponse&l, const FilmTicketResponse&r)
    {
        return !(l == r);
    }

    struct LiveInteractRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveInteractRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        LiveInteractRequest()
        :pid("")
        {
        }
        void resetDefautlt()
        {
            pid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pid, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pid, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pid,"pid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pid, false);
            return _os;
        }
    public:
        std::string pid;
    };
    inline bool operator==(const LiveInteractRequest&l, const LiveInteractRequest&r)
    {
        return l.pid == r.pid;
    }
    inline bool operator!=(const LiveInteractRequest&l, const LiveInteractRequest&r)
    {
        return !(l == r);
    }

    struct LiveInteractResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveInteractResponse";
        }
        static string MD5()
        {
            return "e8a2de8c8fe9deadb38fbdcc1be0854e";
        }
        LiveInteractResponse()
        :errCode(0),isLiveVideo(true),startTime(0),endTime(0),likeNums(0),livePollKey(""),starImageUrl(""),title(""),liveStatus(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            isLiveVideo = true;
            startTime = 0;
            endTime = 0;
            likeNums = 0;
            livePollKey = "";
            starImageUrl = "";
            title = "";
            liveStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(poster, 1);
            _os.write(vodVideoData, 2);
            _os.write(liveVideoData, 3);
            _os.write(isLiveVideo, 4);
            _os.write(startTime, 5);
            _os.write(endTime, 6);
            _os.write(actors, 7);
            _os.write(likeNums, 8);
            _os.write(livePollKey, 9);
            _os.write(starImageUrl, 10);
            _os.write(title, 11);
            _os.write(liveStatus, 12);
            _os.write(attentItem, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(poster, 1, true);
            _is.read(vodVideoData, 2, false);
            _is.read(liveVideoData, 3, false);
            _is.read(isLiveVideo, 4, false);
            _is.read(startTime, 5, false);
            _is.read(endTime, 6, false);
            _is.read(actors, 7, false);
            _is.read(likeNums, 8, false);
            _is.read(livePollKey, 9, false);
            _is.read(starImageUrl, 10, false);
            _is.read(title, 11, false);
            _is.read(liveStatus, 12, false);
            _is.read(attentItem, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(poster,"poster");
            _ds.display(vodVideoData,"vodVideoData");
            _ds.display(liveVideoData,"liveVideoData");
            _ds.display(isLiveVideo,"isLiveVideo");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(actors,"actors");
            _ds.display(likeNums,"likeNums");
            _ds.display(livePollKey,"livePollKey");
            _ds.display(starImageUrl,"starImageUrl");
            _ds.display(title,"title");
            _ds.display(liveStatus,"liveStatus");
            _ds.display(attentItem,"attentItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(poster, true);
            _ds.displaySimple(vodVideoData, true);
            _ds.displaySimple(liveVideoData, true);
            _ds.displaySimple(isLiveVideo, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(actors, true);
            _ds.displaySimple(likeNums, true);
            _ds.displaySimple(livePollKey, true);
            _ds.displaySimple(starImageUrl, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(liveStatus, true);
            _ds.displaySimple(attentItem, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::Poster poster;
        jce::VideoItemData vodVideoData;
        jce::LiveVideoItemData liveVideoData;
        taf::Bool isLiveVideo;
        taf::Int64 startTime;
        taf::Int64 endTime;
        vector<jce::ActorInfo> actors;
        taf::Int64 likeNums;
        std::string livePollKey;
        std::string starImageUrl;
        std::string title;
        taf::Int32 liveStatus;
        jce::VideoAttentItem attentItem;
    };
    inline bool operator==(const LiveInteractResponse&l, const LiveInteractResponse&r)
    {
        return l.errCode == r.errCode && l.poster == r.poster && l.vodVideoData == r.vodVideoData && l.liveVideoData == r.liveVideoData && l.isLiveVideo == r.isLiveVideo && l.startTime == r.startTime && l.endTime == r.endTime && l.actors == r.actors && l.likeNums == r.likeNums && l.livePollKey == r.livePollKey && l.starImageUrl == r.starImageUrl && l.title == r.title && l.liveStatus == r.liveStatus && l.attentItem == r.attentItem;
    }
    inline bool operator!=(const LiveInteractResponse&l, const LiveInteractResponse&r)
    {
        return !(l == r);
    }

    struct DetailVideoEndRecommendRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DetailVideoEndRecommendRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        DetailVideoEndRecommendRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const DetailVideoEndRecommendRequest&l, const DetailVideoEndRecommendRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const DetailVideoEndRecommendRequest&l, const DetailVideoEndRecommendRequest&r)
    {
        return !(l == r);
    }

    struct DetailVideoEndRecommendResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DetailVideoEndRecommendResponse";
        }
        static string MD5()
        {
            return "39054ccbf269d99008a07b9e3eb92847";
        }
        DetailVideoEndRecommendResponse()
        :errCode(0),pageContext(""),hasNextPage(true),uiType(0),videoType(0),hasPresent(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            uiType = 0;
            videoType = 0;
            hasPresent = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pageContext, 1);
            _os.write(coverList, 2);
            _os.write(hasNextPage, 3);
            _os.write(uiType, 4);
            _os.write(videoType, 5);
            _os.write(hasPresent, 6);
            _os.write(promotionAppDetail, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(coverList, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(uiType, 4, false);
            _is.read(videoType, 5, false);
            _is.read(hasPresent, 6, false);
            _is.read(promotionAppDetail, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pageContext,"pageContext");
            _ds.display(coverList,"coverList");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(uiType,"uiType");
            _ds.display(videoType,"videoType");
            _ds.display(hasPresent,"hasPresent");
            _ds.display(promotionAppDetail,"promotionAppDetail");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(coverList, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(videoType, true);
            _ds.displaySimple(hasPresent, true);
            _ds.displaySimple(promotionAppDetail, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string pageContext;
        vector<jce::CoverItemData> coverList;
        taf::Bool hasNextPage;
        taf::Int32 uiType;
        taf::Int32 videoType;
        taf::Int32 hasPresent;
        jce::PromotionAppDetail promotionAppDetail;
    };
    inline bool operator==(const DetailVideoEndRecommendResponse&l, const DetailVideoEndRecommendResponse&r)
    {
        return l.errCode == r.errCode && l.pageContext == r.pageContext && l.coverList == r.coverList && l.hasNextPage == r.hasNextPage && l.uiType == r.uiType && l.videoType == r.videoType && l.hasPresent == r.hasPresent && l.promotionAppDetail == r.promotionAppDetail;
    }
    inline bool operator!=(const DetailVideoEndRecommendResponse&l, const DetailVideoEndRecommendResponse&r)
    {
        return !(l == r);
    }

    struct InteractPraisePostRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.InteractPraisePostRequest";
        }
        static string MD5()
        {
            return "9bda4ac16227127f47ea815aed6f8d9e";
        }
        InteractPraisePostRequest()
        :sId(""),iType(0),iPraiseAdd(0)
        {
        }
        void resetDefautlt()
        {
            sId = "";
            iType = 0;
            iPraiseAdd = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sId, 0);
            _os.write(iType, 1);
            _os.write(iPraiseAdd, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sId, 0, true);
            _is.read(iType, 1, true);
            _is.read(iPraiseAdd, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sId,"sId");
            _ds.display(iType,"iType");
            _ds.display(iPraiseAdd,"iPraiseAdd");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sId, true);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(iPraiseAdd, false);
            return _os;
        }
    public:
        std::string sId;
        taf::Int32 iType;
        taf::Int32 iPraiseAdd;
    };
    inline bool operator==(const InteractPraisePostRequest&l, const InteractPraisePostRequest&r)
    {
        return l.sId == r.sId && l.iType == r.iType && l.iPraiseAdd == r.iPraiseAdd;
    }
    inline bool operator!=(const InteractPraisePostRequest&l, const InteractPraisePostRequest&r)
    {
        return !(l == r);
    }

    struct InteractPraisePostResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.InteractPraisePostResponse";
        }
        static string MD5()
        {
            return "b40c2d77b113c2ae7d3242a08ac7f9d2";
        }
        InteractPraisePostResponse()
        :eCode(0),eMsg(""),sId(""),iType(0),lPraiseNum(0)
        {
        }
        void resetDefautlt()
        {
            eCode = 0;
            eMsg = "";
            sId = "";
            iType = 0;
            lPraiseNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(eCode, 0);
            _os.write(eMsg, 1);
            _os.write(sId, 2);
            _os.write(iType, 3);
            _os.write(lPraiseNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(eCode, 0, true);
            _is.read(eMsg, 1, true);
            _is.read(sId, 2, true);
            _is.read(iType, 3, true);
            _is.read(lPraiseNum, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(eCode,"eCode");
            _ds.display(eMsg,"eMsg");
            _ds.display(sId,"sId");
            _ds.display(iType,"iType");
            _ds.display(lPraiseNum,"lPraiseNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(eCode, true);
            _ds.displaySimple(eMsg, true);
            _ds.displaySimple(sId, true);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(lPraiseNum, false);
            return _os;
        }
    public:
        taf::Int64 eCode;
        std::string eMsg;
        std::string sId;
        taf::Int32 iType;
        taf::Int64 lPraiseNum;
    };
    inline bool operator==(const InteractPraisePostResponse&l, const InteractPraisePostResponse&r)
    {
        return l.eCode == r.eCode && l.eMsg == r.eMsg && l.sId == r.sId && l.iType == r.iType && l.lPraiseNum == r.lPraiseNum;
    }
    inline bool operator!=(const InteractPraisePostResponse&l, const InteractPraisePostResponse&r)
    {
        return !(l == r);
    }

    struct InteractPraiseGetRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.InteractPraiseGetRequest";
        }
        static string MD5()
        {
            return "f167bca231a7ff599beef92b1ba4ef68";
        }
        InteractPraiseGetRequest()
        :bGetRelation(true)
        {
        }
        void resetDefautlt()
        {
            bGetRelation = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vIds, 0);
            _os.write(bGetRelation, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vIds, 0, true);
            _is.read(bGetRelation, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vIds,"vIds");
            _ds.display(bGetRelation,"bGetRelation");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vIds, true);
            _ds.displaySimple(bGetRelation, false);
            return _os;
        }
    public:
        vector<jce::IdData> vIds;
        taf::Bool bGetRelation;
    };
    inline bool operator==(const InteractPraiseGetRequest&l, const InteractPraiseGetRequest&r)
    {
        return l.vIds == r.vIds && l.bGetRelation == r.bGetRelation;
    }
    inline bool operator!=(const InteractPraiseGetRequest&l, const InteractPraiseGetRequest&r)
    {
        return !(l == r);
    }

    struct InteractPraiseGetResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.InteractPraiseGetResponse";
        }
        static string MD5()
        {
            return "299bb04f17873a668cb8cae60631bdfd";
        }
        InteractPraiseGetResponse()
        :eCode(0),eMsg("")
        {
        }
        void resetDefautlt()
        {
            eCode = 0;
            eMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(eCode, 0);
            _os.write(eMsg, 1);
            _os.write(vIdps, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(eCode, 0, true);
            _is.read(eMsg, 1, true);
            _is.read(vIdps, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(eCode,"eCode");
            _ds.display(eMsg,"eMsg");
            _ds.display(vIdps,"vIdps");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(eCode, true);
            _ds.displaySimple(eMsg, true);
            _ds.displaySimple(vIdps, false);
            return _os;
        }
    public:
        taf::Int64 eCode;
        std::string eMsg;
        vector<jce::IdPraise> vIdps;
    };
    inline bool operator==(const InteractPraiseGetResponse&l, const InteractPraiseGetResponse&r)
    {
        return l.eCode == r.eCode && l.eMsg == r.eMsg && l.vIdps == r.vIdps;
    }
    inline bool operator!=(const InteractPraiseGetResponse&l, const InteractPraiseGetResponse&r)
    {
        return !(l == r);
    }

    struct InteractUserPraiseGetRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.InteractUserPraiseGetRequest";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        InteractUserPraiseGetRequest()
        :sUser(""),iType(0)
        {
        }
        void resetDefautlt()
        {
            sUser = "";
            iType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sUser, 0);
            _os.write(iType, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sUser, 0, true);
            _is.read(iType, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sUser,"sUser");
            _ds.display(iType,"iType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sUser, true);
            _ds.displaySimple(iType, false);
            return _os;
        }
    public:
        std::string sUser;
        taf::Int32 iType;
    };
    inline bool operator==(const InteractUserPraiseGetRequest&l, const InteractUserPraiseGetRequest&r)
    {
        return l.sUser == r.sUser && l.iType == r.iType;
    }
    inline bool operator!=(const InteractUserPraiseGetRequest&l, const InteractUserPraiseGetRequest&r)
    {
        return !(l == r);
    }

    struct InteractUserPraiseGetResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.InteractUserPraiseGetResponse";
        }
        static string MD5()
        {
            return "b40c2d77b113c2ae7d3242a08ac7f9d2";
        }
        InteractUserPraiseGetResponse()
        :eCode(0),eMsg(""),sUser(""),iType(0),lPraiseNum(0)
        {
        }
        void resetDefautlt()
        {
            eCode = 0;
            eMsg = "";
            sUser = "";
            iType = 0;
            lPraiseNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(eCode, 0);
            _os.write(eMsg, 1);
            _os.write(sUser, 2);
            _os.write(iType, 3);
            _os.write(lPraiseNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(eCode, 0, true);
            _is.read(eMsg, 1, true);
            _is.read(sUser, 2, true);
            _is.read(iType, 3, true);
            _is.read(lPraiseNum, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(eCode,"eCode");
            _ds.display(eMsg,"eMsg");
            _ds.display(sUser,"sUser");
            _ds.display(iType,"iType");
            _ds.display(lPraiseNum,"lPraiseNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(eCode, true);
            _ds.displaySimple(eMsg, true);
            _ds.displaySimple(sUser, true);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(lPraiseNum, false);
            return _os;
        }
    public:
        taf::Int64 eCode;
        std::string eMsg;
        std::string sUser;
        taf::Int32 iType;
        taf::Int64 lPraiseNum;
    };
    inline bool operator==(const InteractUserPraiseGetResponse&l, const InteractUserPraiseGetResponse&r)
    {
        return l.eCode == r.eCode && l.eMsg == r.eMsg && l.sUser == r.sUser && l.iType == r.iType && l.lPraiseNum == r.lPraiseNum;
    }
    inline bool operator!=(const InteractUserPraiseGetResponse&l, const InteractUserPraiseGetResponse&r)
    {
        return !(l == r);
    }

    struct ServerFilterData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ServerFilterData";
        }
        static string MD5()
        {
            return "433bc8ca9bafd26b8d1caac5fce66f22";
        }
        ServerFilterData()
        :filterStategy(0)
        {
        }
        void resetDefautlt()
        {
            filterStategy = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(filter, 0);
            _os.write(filterStategy, 1);
            _os.write(mulFilter, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(filter, 0, false);
            _is.read(filterStategy, 1, false);
            _is.read(mulFilter, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(filter,"filter");
            _ds.display(filterStategy,"filterStategy");
            _ds.display(mulFilter,"mulFilter");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(filter, true);
            _ds.displaySimple(filterStategy, true);
            _ds.displaySimple(mulFilter, false);
            return _os;
        }
    public:
        map<std::string, std::string> filter;
        taf::Int32 filterStategy;
        vector<map<std::string, std::string> > mulFilter;
    };
    inline bool operator==(const ServerFilterData&l, const ServerFilterData&r)
    {
        return l.filter == r.filter && l.filterStategy == r.filterStategy && l.mulFilter == r.mulFilter;
    }
    inline bool operator!=(const ServerFilterData&l, const ServerFilterData&r)
    {
        return !(l == r);
    }

    struct ServerTempletItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ServerTempletItem";
        }
        static string MD5()
        {
            return "5719c9583f9ce3e1972e4bd72d1a5039";
        }
        ServerTempletItem()
        :route(""),hideView(0),whiteListRuleId("")
        {
        }
        void resetDefautlt()
        {
            route = "";
            hideView = 0;
            whiteListRuleId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(defaultData, 0);
            _os.write(route, 1);
            _os.write(hideView, 2);
            _os.write(pluginRequest, 3);
            _os.write(filterData, 4);
            _os.write(uiData2, 5);
            _os.write(whiteListRuleId, 6);
            _os.write(mulData, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(defaultData, 0, false);
            _is.read(route, 1, false);
            _is.read(hideView, 2, false);
            _is.read(pluginRequest, 3, false);
            _is.read(filterData, 4, false);
            _is.read(uiData2, 5, false);
            _is.read(whiteListRuleId, 6, false);
            _is.read(mulData, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(defaultData,"defaultData");
            _ds.display(route,"route");
            _ds.display(hideView,"hideView");
            _ds.display(pluginRequest,"pluginRequest");
            _ds.display(filterData,"filterData");
            _ds.display(uiData2,"uiData2");
            _ds.display(whiteListRuleId,"whiteListRuleId");
            _ds.display(mulData,"mulData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(defaultData, true);
            _ds.displaySimple(route, true);
            _ds.displaySimple(hideView, true);
            _ds.displaySimple(pluginRequest, true);
            _ds.displaySimple(filterData, true);
            _ds.displaySimple(uiData2, true);
            _ds.displaySimple(whiteListRuleId, true);
            _ds.displaySimple(mulData, false);
            return _os;
        }
    public:
        vector<jce::TempletLine> defaultData;
        std::string route;
        taf::Int32 hideView;
        jce::ChannelModPluginDataRequest pluginRequest;
        jce::ServerFilterData filterData;
        vector<jce::TempletLine> uiData2;
        std::string whiteListRuleId;
        vector<vector<jce::TempletLine> > mulData;
    };
    inline bool operator==(const ServerTempletItem&l, const ServerTempletItem&r)
    {
        return l.defaultData == r.defaultData && l.route == r.route && l.hideView == r.hideView && l.pluginRequest == r.pluginRequest && l.filterData == r.filterData && l.uiData2 == r.uiData2 && l.whiteListRuleId == r.whiteListRuleId && l.mulData == r.mulData;
    }
    inline bool operator!=(const ServerTempletItem&l, const ServerTempletItem&r)
    {
        return !(l == r);
    }

    struct AppUpdateRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AppUpdateRequest";
        }
        static string MD5()
        {
            return "025cc3097f58a81888772efb1f2e2076";
        }
        AppUpdateRequest()
        :iType(0),iOs(0),strOsVersion(""),iPlatform(0),strCpu(""),iAppPlatform(0),strAppVersionName(""),iAppVersionCode(0),iUpdaterVersion(0),strMemorySize(""),strDeviceId(""),strQq(""),strDeviceType(""),iCgiVersion(0),strMarketId(""),strGuid(""),iAppVerionBuild(0),lUnixTime(0),strAppId(""),strIp(""),iH5Version(0),iIsJailBreakDevice(0),iDebug(0),iInnerReq(0),strOriIp("")
        {
        }
        void resetDefautlt()
        {
            iType = 0;
            iOs = 0;
            strOsVersion = "";
            iPlatform = 0;
            strCpu = "";
            iAppPlatform = 0;
            strAppVersionName = "";
            iAppVersionCode = 0;
            iUpdaterVersion = 0;
            strMemorySize = "";
            strDeviceId = "";
            strQq = "";
            strDeviceType = "";
            iCgiVersion = 0;
            strMarketId = "";
            strGuid = "";
            iAppVerionBuild = 0;
            lUnixTime = 0;
            strAppId = "";
            strIp = "";
            iH5Version = 0;
            iIsJailBreakDevice = 0;
            iDebug = 0;
            iInnerReq = 0;
            strOriIp = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iType, 0);
            _os.write(iOs, 1);
            _os.write(strOsVersion, 2);
            _os.write(iPlatform, 3);
            _os.write(strCpu, 4);
            _os.write(iAppPlatform, 5);
            _os.write(strAppVersionName, 6);
            _os.write(iAppVersionCode, 7);
            _os.write(iUpdaterVersion, 8);
            _os.write(strMemorySize, 9);
            _os.write(strDeviceId, 10);
            _os.write(strQq, 11);
            _os.write(strDeviceType, 12);
            _os.write(iCgiVersion, 13);
            _os.write(strMarketId, 14);
            _os.write(strGuid, 15);
            _os.write(iAppVerionBuild, 16);
            _os.write(lUnixTime, 17);
            _os.write(strAppId, 18);
            _os.write(strIp, 19);
            _os.write(iH5Version, 20);
            _os.write(iIsJailBreakDevice, 21);
            _os.write(iDebug, 22);
            _os.write(iInnerReq, 23);
            _os.write(strOriIp, 24);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iType, 0, false);
            _is.read(iOs, 1, false);
            _is.read(strOsVersion, 2, false);
            _is.read(iPlatform, 3, false);
            _is.read(strCpu, 4, false);
            _is.read(iAppPlatform, 5, false);
            _is.read(strAppVersionName, 6, false);
            _is.read(iAppVersionCode, 7, false);
            _is.read(iUpdaterVersion, 8, false);
            _is.read(strMemorySize, 9, false);
            _is.read(strDeviceId, 10, false);
            _is.read(strQq, 11, false);
            _is.read(strDeviceType, 12, false);
            _is.read(iCgiVersion, 13, false);
            _is.read(strMarketId, 14, false);
            _is.read(strGuid, 15, false);
            _is.read(iAppVerionBuild, 16, false);
            _is.read(lUnixTime, 17, false);
            _is.read(strAppId, 18, false);
            _is.read(strIp, 19, false);
            _is.read(iH5Version, 20, false);
            _is.read(iIsJailBreakDevice, 21, false);
            _is.read(iDebug, 22, false);
            _is.read(iInnerReq, 23, false);
            _is.read(strOriIp, 24, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iType,"iType");
            _ds.display(iOs,"iOs");
            _ds.display(strOsVersion,"strOsVersion");
            _ds.display(iPlatform,"iPlatform");
            _ds.display(strCpu,"strCpu");
            _ds.display(iAppPlatform,"iAppPlatform");
            _ds.display(strAppVersionName,"strAppVersionName");
            _ds.display(iAppVersionCode,"iAppVersionCode");
            _ds.display(iUpdaterVersion,"iUpdaterVersion");
            _ds.display(strMemorySize,"strMemorySize");
            _ds.display(strDeviceId,"strDeviceId");
            _ds.display(strQq,"strQq");
            _ds.display(strDeviceType,"strDeviceType");
            _ds.display(iCgiVersion,"iCgiVersion");
            _ds.display(strMarketId,"strMarketId");
            _ds.display(strGuid,"strGuid");
            _ds.display(iAppVerionBuild,"iAppVerionBuild");
            _ds.display(lUnixTime,"lUnixTime");
            _ds.display(strAppId,"strAppId");
            _ds.display(strIp,"strIp");
            _ds.display(iH5Version,"iH5Version");
            _ds.display(iIsJailBreakDevice,"iIsJailBreakDevice");
            _ds.display(iDebug,"iDebug");
            _ds.display(iInnerReq,"iInnerReq");
            _ds.display(strOriIp,"strOriIp");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(iOs, true);
            _ds.displaySimple(strOsVersion, true);
            _ds.displaySimple(iPlatform, true);
            _ds.displaySimple(strCpu, true);
            _ds.displaySimple(iAppPlatform, true);
            _ds.displaySimple(strAppVersionName, true);
            _ds.displaySimple(iAppVersionCode, true);
            _ds.displaySimple(iUpdaterVersion, true);
            _ds.displaySimple(strMemorySize, true);
            _ds.displaySimple(strDeviceId, true);
            _ds.displaySimple(strQq, true);
            _ds.displaySimple(strDeviceType, true);
            _ds.displaySimple(iCgiVersion, true);
            _ds.displaySimple(strMarketId, true);
            _ds.displaySimple(strGuid, true);
            _ds.displaySimple(iAppVerionBuild, true);
            _ds.displaySimple(lUnixTime, true);
            _ds.displaySimple(strAppId, true);
            _ds.displaySimple(strIp, true);
            _ds.displaySimple(iH5Version, true);
            _ds.displaySimple(iIsJailBreakDevice, true);
            _ds.displaySimple(iDebug, true);
            _ds.displaySimple(iInnerReq, true);
            _ds.displaySimple(strOriIp, false);
            return _os;
        }
    public:
        taf::Int32 iType;
        taf::Int32 iOs;
        std::string strOsVersion;
        taf::Int32 iPlatform;
        std::string strCpu;
        taf::Int32 iAppPlatform;
        std::string strAppVersionName;
        taf::Int32 iAppVersionCode;
        taf::Int32 iUpdaterVersion;
        std::string strMemorySize;
        std::string strDeviceId;
        std::string strQq;
        std::string strDeviceType;
        taf::Int32 iCgiVersion;
        std::string strMarketId;
        std::string strGuid;
        taf::Int32 iAppVerionBuild;
        taf::Int64 lUnixTime;
        std::string strAppId;
        std::string strIp;
        taf::Int32 iH5Version;
        taf::Int32 iIsJailBreakDevice;
        taf::Int32 iDebug;
        taf::Int32 iInnerReq;
        std::string strOriIp;
    };
    inline bool operator==(const AppUpdateRequest&l, const AppUpdateRequest&r)
    {
        return l.iType == r.iType && l.iOs == r.iOs && l.strOsVersion == r.strOsVersion && l.iPlatform == r.iPlatform && l.strCpu == r.strCpu && l.iAppPlatform == r.iAppPlatform && l.strAppVersionName == r.strAppVersionName && l.iAppVersionCode == r.iAppVersionCode && l.iUpdaterVersion == r.iUpdaterVersion && l.strMemorySize == r.strMemorySize && l.strDeviceId == r.strDeviceId && l.strQq == r.strQq && l.strDeviceType == r.strDeviceType && l.iCgiVersion == r.iCgiVersion && l.strMarketId == r.strMarketId && l.strGuid == r.strGuid && l.iAppVerionBuild == r.iAppVerionBuild && l.lUnixTime == r.lUnixTime && l.strAppId == r.strAppId && l.strIp == r.strIp && l.iH5Version == r.iH5Version && l.iIsJailBreakDevice == r.iIsJailBreakDevice && l.iDebug == r.iDebug && l.iInnerReq == r.iInnerReq && l.strOriIp == r.strOriIp;
    }
    inline bool operator!=(const AppUpdateRequest&l, const AppUpdateRequest&r)
    {
        return !(l == r);
    }

    struct AppUpdateResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AppUpdateResponse";
        }
        static string MD5()
        {
            return "3534707076a025fe30149110fc287307";
        }
        AppUpdateResponse()
        :errCode(0),iRetCode(0),strErrMsg(""),iUpdateType(0),iDownloadPolicy(0),strPackageUri(""),strAppVersionName(""),iVersionCode(0),strPackageHash(""),iNotificationInterval(0),strAppVersionDesc(""),iDownloadSpeedLimit(0),iInExperience(0),llUnixTime(0),iIsShow(0),iIsUseYingYongBao(0),iIsDownloadYingYongBao(0),iIsActivateYingYongBao(0),iIsShowRedDot(0),iHasNewVersion(0),iUpdateCount(0),strGrayUpdateUrl(""),strJailbreakUpdateUrl("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            iRetCode = 0;
            strErrMsg = "";
            iUpdateType = 0;
            iDownloadPolicy = 0;
            strPackageUri = "";
            strAppVersionName = "";
            iVersionCode = 0;
            strPackageHash = "";
            iNotificationInterval = 0;
            strAppVersionDesc = "";
            iDownloadSpeedLimit = 0;
            iInExperience = 0;
            llUnixTime = 0;
            iIsShow = 0;
            iIsUseYingYongBao = 0;
            iIsDownloadYingYongBao = 0;
            iIsActivateYingYongBao = 0;
            iIsShowRedDot = 0;
            iHasNewVersion = 0;
            iUpdateCount = 0;
            strGrayUpdateUrl = "";
            strJailbreakUpdateUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(iRetCode, 1);
            _os.write(strErrMsg, 2);
            _os.write(iUpdateType, 3);
            _os.write(iDownloadPolicy, 4);
            _os.write(strPackageUri, 5);
            _os.write(strAppVersionName, 6);
            _os.write(iVersionCode, 7);
            _os.write(strPackageHash, 8);
            _os.write(iNotificationInterval, 9);
            _os.write(strAppVersionDesc, 10);
            _os.write(iDownloadSpeedLimit, 11);
            _os.write(iInExperience, 12);
            _os.write(llUnixTime, 13);
            _os.write(iIsShow, 14);
            _os.write(iIsUseYingYongBao, 15);
            _os.write(iIsDownloadYingYongBao, 16);
            _os.write(iIsActivateYingYongBao, 17);
            _os.write(iIsShowRedDot, 18);
            _os.write(iHasNewVersion, 19);
            _os.write(iUpdateCount, 20);
            _os.write(strGrayUpdateUrl, 21);
            _os.write(strJailbreakUpdateUrl, 22);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(iRetCode, 1, true);
            _is.read(strErrMsg, 2, true);
            _is.read(iUpdateType, 3, false);
            _is.read(iDownloadPolicy, 4, false);
            _is.read(strPackageUri, 5, false);
            _is.read(strAppVersionName, 6, false);
            _is.read(iVersionCode, 7, false);
            _is.read(strPackageHash, 8, false);
            _is.read(iNotificationInterval, 9, false);
            _is.read(strAppVersionDesc, 10, false);
            _is.read(iDownloadSpeedLimit, 11, false);
            _is.read(iInExperience, 12, false);
            _is.read(llUnixTime, 13, false);
            _is.read(iIsShow, 14, false);
            _is.read(iIsUseYingYongBao, 15, false);
            _is.read(iIsDownloadYingYongBao, 16, false);
            _is.read(iIsActivateYingYongBao, 17, false);
            _is.read(iIsShowRedDot, 18, false);
            _is.read(iHasNewVersion, 19, false);
            _is.read(iUpdateCount, 20, false);
            _is.read(strGrayUpdateUrl, 21, false);
            _is.read(strJailbreakUpdateUrl, 22, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(iRetCode,"iRetCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(iUpdateType,"iUpdateType");
            _ds.display(iDownloadPolicy,"iDownloadPolicy");
            _ds.display(strPackageUri,"strPackageUri");
            _ds.display(strAppVersionName,"strAppVersionName");
            _ds.display(iVersionCode,"iVersionCode");
            _ds.display(strPackageHash,"strPackageHash");
            _ds.display(iNotificationInterval,"iNotificationInterval");
            _ds.display(strAppVersionDesc,"strAppVersionDesc");
            _ds.display(iDownloadSpeedLimit,"iDownloadSpeedLimit");
            _ds.display(iInExperience,"iInExperience");
            _ds.display(llUnixTime,"llUnixTime");
            _ds.display(iIsShow,"iIsShow");
            _ds.display(iIsUseYingYongBao,"iIsUseYingYongBao");
            _ds.display(iIsDownloadYingYongBao,"iIsDownloadYingYongBao");
            _ds.display(iIsActivateYingYongBao,"iIsActivateYingYongBao");
            _ds.display(iIsShowRedDot,"iIsShowRedDot");
            _ds.display(iHasNewVersion,"iHasNewVersion");
            _ds.display(iUpdateCount,"iUpdateCount");
            _ds.display(strGrayUpdateUrl,"strGrayUpdateUrl");
            _ds.display(strJailbreakUpdateUrl,"strJailbreakUpdateUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(iRetCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(iUpdateType, true);
            _ds.displaySimple(iDownloadPolicy, true);
            _ds.displaySimple(strPackageUri, true);
            _ds.displaySimple(strAppVersionName, true);
            _ds.displaySimple(iVersionCode, true);
            _ds.displaySimple(strPackageHash, true);
            _ds.displaySimple(iNotificationInterval, true);
            _ds.displaySimple(strAppVersionDesc, true);
            _ds.displaySimple(iDownloadSpeedLimit, true);
            _ds.displaySimple(iInExperience, true);
            _ds.displaySimple(llUnixTime, true);
            _ds.displaySimple(iIsShow, true);
            _ds.displaySimple(iIsUseYingYongBao, true);
            _ds.displaySimple(iIsDownloadYingYongBao, true);
            _ds.displaySimple(iIsActivateYingYongBao, true);
            _ds.displaySimple(iIsShowRedDot, true);
            _ds.displaySimple(iHasNewVersion, true);
            _ds.displaySimple(iUpdateCount, true);
            _ds.displaySimple(strGrayUpdateUrl, true);
            _ds.displaySimple(strJailbreakUpdateUrl, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 iRetCode;
        std::string strErrMsg;
        taf::Int32 iUpdateType;
        taf::Int32 iDownloadPolicy;
        std::string strPackageUri;
        std::string strAppVersionName;
        taf::Int32 iVersionCode;
        std::string strPackageHash;
        taf::Int32 iNotificationInterval;
        std::string strAppVersionDesc;
        taf::Int32 iDownloadSpeedLimit;
        taf::Int32 iInExperience;
        taf::Int64 llUnixTime;
        taf::Int32 iIsShow;
        taf::Int32 iIsUseYingYongBao;
        taf::Int32 iIsDownloadYingYongBao;
        taf::Int32 iIsActivateYingYongBao;
        taf::Int32 iIsShowRedDot;
        taf::Int32 iHasNewVersion;
        taf::Int32 iUpdateCount;
        std::string strGrayUpdateUrl;
        std::string strJailbreakUpdateUrl;
    };
    inline bool operator==(const AppUpdateResponse&l, const AppUpdateResponse&r)
    {
        return l.errCode == r.errCode && l.iRetCode == r.iRetCode && l.strErrMsg == r.strErrMsg && l.iUpdateType == r.iUpdateType && l.iDownloadPolicy == r.iDownloadPolicy && l.strPackageUri == r.strPackageUri && l.strAppVersionName == r.strAppVersionName && l.iVersionCode == r.iVersionCode && l.strPackageHash == r.strPackageHash && l.iNotificationInterval == r.iNotificationInterval && l.strAppVersionDesc == r.strAppVersionDesc && l.iDownloadSpeedLimit == r.iDownloadSpeedLimit && l.iInExperience == r.iInExperience && l.llUnixTime == r.llUnixTime && l.iIsShow == r.iIsShow && l.iIsUseYingYongBao == r.iIsUseYingYongBao && l.iIsDownloadYingYongBao == r.iIsDownloadYingYongBao && l.iIsActivateYingYongBao == r.iIsActivateYingYongBao && l.iIsShowRedDot == r.iIsShowRedDot && l.iHasNewVersion == r.iHasNewVersion && l.iUpdateCount == r.iUpdateCount && l.strGrayUpdateUrl == r.strGrayUpdateUrl && l.strJailbreakUpdateUrl == r.strJailbreakUpdateUrl;
    }
    inline bool operator!=(const AppUpdateResponse&l, const AppUpdateResponse&r)
    {
        return !(l == r);
    }

    struct VideoDefinitionActionRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoDefinitionActionRequest";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        VideoDefinitionActionRequest()
        :pid(""),lid(""),cid(""),vid("")
        {
        }
        void resetDefautlt()
        {
            pid = "";
            lid = "";
            cid = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pid, 0);
            _os.write(lid, 1);
            _os.write(cid, 2);
            _os.write(vid, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pid, 0, false);
            _is.read(lid, 1, false);
            _is.read(cid, 2, false);
            _is.read(vid, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pid,"pid");
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string pid;
        std::string lid;
        std::string cid;
        std::string vid;
    };
    inline bool operator==(const VideoDefinitionActionRequest&l, const VideoDefinitionActionRequest&r)
    {
        return l.pid == r.pid && l.lid == r.lid && l.cid == r.cid && l.vid == r.vid;
    }
    inline bool operator!=(const VideoDefinitionActionRequest&l, const VideoDefinitionActionRequest&r)
    {
        return !(l == r);
    }

    struct VideoDefinitionActionResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoDefinitionActionResponse";
        }
        static string MD5()
        {
            return "f5ca88d832f42317e88b79203c3f6c75";
        }
        VideoDefinitionActionResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(definitionMap, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(definitionMap, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(definitionMap,"definitionMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(definitionMap, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        map<std::string, jce::DefinitionAction> definitionMap;
    };
    inline bool operator==(const VideoDefinitionActionResponse&l, const VideoDefinitionActionResponse&r)
    {
        return l.errCode == r.errCode && l.definitionMap == r.definitionMap;
    }
    inline bool operator!=(const VideoDefinitionActionResponse&l, const VideoDefinitionActionResponse&r)
    {
        return !(l == r);
    }

    struct ShareItemDetailRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ShareItemDetailRequest";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        ShareItemDetailRequest()
        :scene(0),dataKey("")
        {
        }
        void resetDefautlt()
        {
            scene = 0;
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(scene, 0);
            _os.write(dataKey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(scene, 0, true);
            _is.read(dataKey, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(scene,"scene");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(scene, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        taf::Int32 scene;
        std::string dataKey;
    };
    inline bool operator==(const ShareItemDetailRequest&l, const ShareItemDetailRequest&r)
    {
        return l.scene == r.scene && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const ShareItemDetailRequest&l, const ShareItemDetailRequest&r)
    {
        return !(l == r);
    }

    struct ShareItemDetailResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ShareItemDetailResponse";
        }
        static string MD5()
        {
            return "92e0255d3652b5f6aa675775aeb1f263";
        }
        ShareItemDetailResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(shareItem, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(shareItem, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(shareItem,"shareItem");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(shareItem, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::ShareItem shareItem;
    };
    inline bool operator==(const ShareItemDetailResponse&l, const ShareItemDetailResponse&r)
    {
        return l.errCode == r.errCode && l.shareItem == r.shareItem;
    }
    inline bool operator!=(const ShareItemDetailResponse&l, const ShareItemDetailResponse&r)
    {
        return !(l == r);
    }

    struct UploadCustomizeChannelListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UploadCustomizeChannelListRequest";
        }
        static string MD5()
        {
            return "1707aaf5da47f9d65fe4f6d1cf40e871";
        }
        UploadCustomizeChannelListRequest()
        :type(""),dataKey("")
        {
        }
        void resetDefautlt()
        {
            type = "";
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(dataKey, 1);
            _os.write(channelList, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(dataKey, 1, false);
            _is.read(channelList, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            _ds.display(channelList,"channelList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(channelList, false);
            return _os;
        }
    public:
        std::string type;
        std::string dataKey;
        vector<jce::SPChannelItem> channelList;
    };
    inline bool operator==(const UploadCustomizeChannelListRequest&l, const UploadCustomizeChannelListRequest&r)
    {
        return l.type == r.type && l.dataKey == r.dataKey && l.channelList == r.channelList;
    }
    inline bool operator!=(const UploadCustomizeChannelListRequest&l, const UploadCustomizeChannelListRequest&r)
    {
        return !(l == r);
    }

    struct UploadCustomizeChannelListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UploadCustomizeChannelListResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        UploadCustomizeChannelListResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const UploadCustomizeChannelListResponse&l, const UploadCustomizeChannelListResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const UploadCustomizeChannelListResponse&l, const UploadCustomizeChannelListResponse&r)
    {
        return !(l == r);
    }

    struct UploadUnicomPseudoCodeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UploadUnicomPseudoCodeRequest";
        }
        static string MD5()
        {
            return "36c2d153bfaace410e59539c658500ea";
        }
        UploadUnicomPseudoCodeRequest()
        :deviceInfo(""),pseudoCode(""),carrier(0),delUserMob(0)
        {
        }
        void resetDefautlt()
        {
            deviceInfo = "";
            pseudoCode = "";
            carrier = 0;
            delUserMob = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(deviceInfo, 0);
            _os.write(pseudoCode, 1);
            _os.write(carrier, 2);
            _os.write(delUserMob, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(deviceInfo, 0, true);
            _is.read(pseudoCode, 1, true);
            _is.read(carrier, 2, false);
            _is.read(delUserMob, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(deviceInfo,"deviceInfo");
            _ds.display(pseudoCode,"pseudoCode");
            _ds.display(carrier,"carrier");
            _ds.display(delUserMob,"delUserMob");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(deviceInfo, true);
            _ds.displaySimple(pseudoCode, true);
            _ds.displaySimple(carrier, true);
            _ds.displaySimple(delUserMob, false);
            return _os;
        }
    public:
        std::string deviceInfo;
        std::string pseudoCode;
        taf::Int32 carrier;
        taf::Int32 delUserMob;
    };
    inline bool operator==(const UploadUnicomPseudoCodeRequest&l, const UploadUnicomPseudoCodeRequest&r)
    {
        return l.deviceInfo == r.deviceInfo && l.pseudoCode == r.pseudoCode && l.carrier == r.carrier && l.delUserMob == r.delUserMob;
    }
    inline bool operator!=(const UploadUnicomPseudoCodeRequest&l, const UploadUnicomPseudoCodeRequest&r)
    {
        return !(l == r);
    }

    struct UploadUnicomPseudoCodeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UploadUnicomPseudoCodeResponse";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        UploadUnicomPseudoCodeResponse()
        :errCode(0),carrier(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            carrier = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(carrier, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(carrier, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(carrier,"carrier");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(carrier, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 carrier;
    };
    inline bool operator==(const UploadUnicomPseudoCodeResponse&l, const UploadUnicomPseudoCodeResponse&r)
    {
        return l.errCode == r.errCode && l.carrier == r.carrier;
    }
    inline bool operator!=(const UploadUnicomPseudoCodeResponse&l, const UploadUnicomPseudoCodeResponse&r)
    {
        return !(l == r);
    }

    struct GetUnicomPseudoCodeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetUnicomPseudoCodeRequest";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        GetUnicomPseudoCodeRequest()
        :deviceInfo(""),carrier(0)
        {
        }
        void resetDefautlt()
        {
            deviceInfo = "";
            carrier = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(deviceInfo, 0);
            _os.write(carrier, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(deviceInfo, 0, true);
            _is.read(carrier, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(deviceInfo,"deviceInfo");
            _ds.display(carrier,"carrier");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(deviceInfo, true);
            _ds.displaySimple(carrier, false);
            return _os;
        }
    public:
        std::string deviceInfo;
        taf::Int32 carrier;
    };
    inline bool operator==(const GetUnicomPseudoCodeRequest&l, const GetUnicomPseudoCodeRequest&r)
    {
        return l.deviceInfo == r.deviceInfo && l.carrier == r.carrier;
    }
    inline bool operator!=(const GetUnicomPseudoCodeRequest&l, const GetUnicomPseudoCodeRequest&r)
    {
        return !(l == r);
    }

    struct GetUnicomPseudoCodeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetUnicomPseudoCodeResponse";
        }
        static string MD5()
        {
            return "5776fd7103fcea055637c7e8b9708bb0";
        }
        GetUnicomPseudoCodeResponse()
        :errCode(0),pseudoCode(""),carrier(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pseudoCode = "";
            carrier = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pseudoCode, 1);
            _os.write(carrier, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pseudoCode, 1, false);
            _is.read(carrier, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pseudoCode,"pseudoCode");
            _ds.display(carrier,"carrier");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pseudoCode, true);
            _ds.displaySimple(carrier, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string pseudoCode;
        taf::Int32 carrier;
    };
    inline bool operator==(const GetUnicomPseudoCodeResponse&l, const GetUnicomPseudoCodeResponse&r)
    {
        return l.errCode == r.errCode && l.pseudoCode == r.pseudoCode && l.carrier == r.carrier;
    }
    inline bool operator!=(const GetUnicomPseudoCodeResponse&l, const GetUnicomPseudoCodeResponse&r)
    {
        return !(l == r);
    }

    struct GetCarrierUserOrderRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCarrierUserOrderRequest";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        GetCarrierUserOrderRequest()
        :carrier(0),userPseudoCode(""),imsi("")
        {
        }
        void resetDefautlt()
        {
            carrier = 0;
            userPseudoCode = "";
            imsi = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(carrier, 0);
            _os.write(userPseudoCode, 1);
            _os.write(imsi, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(carrier, 0, true);
            _is.read(userPseudoCode, 1, false);
            _is.read(imsi, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(carrier,"carrier");
            _ds.display(userPseudoCode,"userPseudoCode");
            _ds.display(imsi,"imsi");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(carrier, true);
            _ds.displaySimple(userPseudoCode, true);
            _ds.displaySimple(imsi, false);
            return _os;
        }
    public:
        taf::Int32 carrier;
        std::string userPseudoCode;
        std::string imsi;
    };
    inline bool operator==(const GetCarrierUserOrderRequest&l, const GetCarrierUserOrderRequest&r)
    {
        return l.carrier == r.carrier && l.userPseudoCode == r.userPseudoCode && l.imsi == r.imsi;
    }
    inline bool operator!=(const GetCarrierUserOrderRequest&l, const GetCarrierUserOrderRequest&r)
    {
        return !(l == r);
    }

    struct GetCarrierUserOrderResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCarrierUserOrderResponse";
        }
        static string MD5()
        {
            return "71cc0550ffea11d5bc52fd9a24942d6d";
        }
        GetCarrierUserOrderResponse()
        :errCode(0),state(3),serviceTime(0),orderTime(0),cancelTime(0),endTime(0),subType(-1),flowTime(0),flowByte(0),carrier(0),hollywoodStatus(0),userPhone(""),flowRunOut(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            state = 3;
            serviceTime = 0;
            orderTime = 0;
            cancelTime = 0;
            endTime = 0;
            subType = -1;
            flowTime = 0;
            flowByte = 0;
            carrier = 0;
            hollywoodStatus = 0;
            userPhone = "";
            flowRunOut = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(state, 1);
            _os.write(serviceTime, 2);
            _os.write(orderTime, 3);
            _os.write(cancelTime, 4);
            _os.write(endTime, 5);
            _os.write(subType, 6);
            _os.write(flowTime, 7);
            _os.write(flowByte, 8);
            _os.write(carrier, 9);
            _os.write(hollywoodStatus, 10);
            _os.write(userPhone, 11);
            _os.write(flowRunOut, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(state, 1, true);
            _is.read(serviceTime, 2, false);
            _is.read(orderTime, 3, false);
            _is.read(cancelTime, 4, false);
            _is.read(endTime, 5, false);
            _is.read(subType, 6, false);
            _is.read(flowTime, 7, false);
            _is.read(flowByte, 8, false);
            _is.read(carrier, 9, false);
            _is.read(hollywoodStatus, 10, false);
            _is.read(userPhone, 11, false);
            _is.read(flowRunOut, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(state,"state");
            _ds.display(serviceTime,"serviceTime");
            _ds.display(orderTime,"orderTime");
            _ds.display(cancelTime,"cancelTime");
            _ds.display(endTime,"endTime");
            _ds.display(subType,"subType");
            _ds.display(flowTime,"flowTime");
            _ds.display(flowByte,"flowByte");
            _ds.display(carrier,"carrier");
            _ds.display(hollywoodStatus,"hollywoodStatus");
            _ds.display(userPhone,"userPhone");
            _ds.display(flowRunOut,"flowRunOut");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(state, true);
            _ds.displaySimple(serviceTime, true);
            _ds.displaySimple(orderTime, true);
            _ds.displaySimple(cancelTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(subType, true);
            _ds.displaySimple(flowTime, true);
            _ds.displaySimple(flowByte, true);
            _ds.displaySimple(carrier, true);
            _ds.displaySimple(hollywoodStatus, true);
            _ds.displaySimple(userPhone, true);
            _ds.displaySimple(flowRunOut, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 state;
        taf::Int64 serviceTime;
        taf::Int64 orderTime;
        taf::Int64 cancelTime;
        taf::Int64 endTime;
        taf::Int32 subType;
        taf::Int64 flowTime;
        taf::Int64 flowByte;
        taf::Int32 carrier;
        taf::Int32 hollywoodStatus;
        std::string userPhone;
        taf::Int32 flowRunOut;
    };
    inline bool operator==(const GetCarrierUserOrderResponse&l, const GetCarrierUserOrderResponse&r)
    {
        return l.errCode == r.errCode && l.state == r.state && l.serviceTime == r.serviceTime && l.orderTime == r.orderTime && l.cancelTime == r.cancelTime && l.endTime == r.endTime && l.subType == r.subType && l.flowTime == r.flowTime && l.flowByte == r.flowByte && l.carrier == r.carrier && l.hollywoodStatus == r.hollywoodStatus && l.userPhone == r.userPhone && l.flowRunOut == r.flowRunOut;
    }
    inline bool operator!=(const GetCarrierUserOrderResponse&l, const GetCarrierUserOrderResponse&r)
    {
        return !(l == r);
    }

    struct GetCarrierIPRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCarrierIPRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        GetCarrierIPRequest()
        :unused(0)
        {
        }
        void resetDefautlt()
        {
            unused = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(unused, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(unused, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(unused,"unused");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(unused, false);
            return _os;
        }
    public:
        taf::Int32 unused;
    };
    inline bool operator==(const GetCarrierIPRequest&l, const GetCarrierIPRequest&r)
    {
        return l.unused == r.unused;
    }
    inline bool operator!=(const GetCarrierIPRequest&l, const GetCarrierIPRequest&r)
    {
        return !(l == r);
    }

    struct GetCarrierIPResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCarrierIPResponse";
        }
        static string MD5()
        {
            return "72dfddf03422779b81fb661a3938fb92";
        }
        GetCarrierIPResponse()
        :errCode(0),carrier(-1),ip("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            carrier = -1;
            ip = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(carrier, 1);
            _os.write(ip, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(carrier, 1, false);
            _is.read(ip, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(carrier,"carrier");
            _ds.display(ip,"ip");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(carrier, true);
            _ds.displaySimple(ip, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 carrier;
        std::string ip;
    };
    inline bool operator==(const GetCarrierIPResponse&l, const GetCarrierIPResponse&r)
    {
        return l.errCode == r.errCode && l.carrier == r.carrier && l.ip == r.ip;
    }
    inline bool operator!=(const GetCarrierIPResponse&l, const GetCarrierIPResponse&r)
    {
        return !(l == r);
    }

    struct GetCarrierSignRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCarrierSignRequest";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        GetCarrierSignRequest()
        :carrier(-1),originStr("")
        {
        }
        void resetDefautlt()
        {
            carrier = -1;
            originStr = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(carrier, 0);
            _os.write(originStr, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(carrier, 0, false);
            _is.read(originStr, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(carrier,"carrier");
            _ds.display(originStr,"originStr");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(carrier, true);
            _ds.displaySimple(originStr, false);
            return _os;
        }
    public:
        taf::Int32 carrier;
        std::string originStr;
    };
    inline bool operator==(const GetCarrierSignRequest&l, const GetCarrierSignRequest&r)
    {
        return l.carrier == r.carrier && l.originStr == r.originStr;
    }
    inline bool operator!=(const GetCarrierSignRequest&l, const GetCarrierSignRequest&r)
    {
        return !(l == r);
    }

    struct GetCarrierSignResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCarrierSignResponse";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        GetCarrierSignResponse()
        :errCode(0),sign("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            sign = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(sign, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(sign, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(sign,"sign");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(sign, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string sign;
    };
    inline bool operator==(const GetCarrierSignResponse&l, const GetCarrierSignResponse&r)
    {
        return l.errCode == r.errCode && l.sign == r.sign;
    }
    inline bool operator!=(const GetCarrierSignResponse&l, const GetCarrierSignResponse&r)
    {
        return !(l == r);
    }

    struct GetNewLineRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetNewLineRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetNewLineRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const GetNewLineRequest&l, const GetNewLineRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const GetNewLineRequest&l, const GetNewLineRequest&r)
    {
        return !(l == r);
    }

    struct GetNewLineResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetNewLineResponse";
        }
        static string MD5()
        {
            return "30db60856c3f115ddfc036315f639a05";
        }
        GetNewLineResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(data, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(data, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(data,"data");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(data, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> data;
    };
    inline bool operator==(const GetNewLineResponse&l, const GetNewLineResponse&r)
    {
        return l.errCode == r.errCode && l.data == r.data;
    }
    inline bool operator!=(const GetNewLineResponse&l, const GetNewLineResponse&r)
    {
        return !(l == r);
    }

    struct StagePhotoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StagePhotoRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        StagePhotoRequest()
        :cid("")
        {
        }
        void resetDefautlt()
        {
            cid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cid, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cid, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cid,"cid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cid, false);
            return _os;
        }
    public:
        std::string cid;
    };
    inline bool operator==(const StagePhotoRequest&l, const StagePhotoRequest&r)
    {
        return l.cid == r.cid;
    }
    inline bool operator!=(const StagePhotoRequest&l, const StagePhotoRequest&r)
    {
        return !(l == r);
    }

    struct StagePhotoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.StagePhotoResponse";
        }
        static string MD5()
        {
            return "d608d5c086a7462788eb8e9d35f9580c";
        }
        StagePhotoResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(stagePhotos, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(stagePhotos, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(stagePhotos,"stagePhotos");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(stagePhotos, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::VideoImage> stagePhotos;
    };
    inline bool operator==(const StagePhotoResponse&l, const StagePhotoResponse&r)
    {
        return l.errCode == r.errCode && l.stagePhotos == r.stagePhotos;
    }
    inline bool operator!=(const StagePhotoResponse&l, const StagePhotoResponse&r)
    {
        return !(l == r);
    }

    struct LiveReportReasonRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveReportReasonRequest";
        }
        static string MD5()
        {
            return "b7118ca9574652a16caa7011dc6cf12d";
        }
        LiveReportReasonRequest()
        :strPid(""),strVideoId(""),ddwAnchorUin(0),strNickName(""),strTitle(""),ddwTipOffTime(0),streamId(""),dwAnchorType(0)
        {
        }
        void resetDefautlt()
        {
            strPid = "";
            strVideoId = "";
            ddwAnchorUin = 0;
            strNickName = "";
            strTitle = "";
            ddwTipOffTime = 0;
            streamId = "";
            dwAnchorType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strPid, 0);
            _os.write(strVideoId, 1);
            _os.write(ddwAnchorUin, 2);
            _os.write(strNickName, 3);
            _os.write(strTitle, 4);
            _os.write(ddwTipOffTime, 5);
            _os.write(vecTipOffReason, 6);
            _os.write(streamId, 7);
            _os.write(dwAnchorType, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strPid, 0, true);
            _is.read(strVideoId, 1, false);
            _is.read(ddwAnchorUin, 2, false);
            _is.read(strNickName, 3, false);
            _is.read(strTitle, 4, false);
            _is.read(ddwTipOffTime, 5, false);
            _is.read(vecTipOffReason, 6, false);
            _is.read(streamId, 7, false);
            _is.read(dwAnchorType, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strPid,"strPid");
            _ds.display(strVideoId,"strVideoId");
            _ds.display(ddwAnchorUin,"ddwAnchorUin");
            _ds.display(strNickName,"strNickName");
            _ds.display(strTitle,"strTitle");
            _ds.display(ddwTipOffTime,"ddwTipOffTime");
            _ds.display(vecTipOffReason,"vecTipOffReason");
            _ds.display(streamId,"streamId");
            _ds.display(dwAnchorType,"dwAnchorType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strPid, true);
            _ds.displaySimple(strVideoId, true);
            _ds.displaySimple(ddwAnchorUin, true);
            _ds.displaySimple(strNickName, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(ddwTipOffTime, true);
            _ds.displaySimple(vecTipOffReason, true);
            _ds.displaySimple(streamId, true);
            _ds.displaySimple(dwAnchorType, false);
            return _os;
        }
    public:
        std::string strPid;
        std::string strVideoId;
        taf::Int64 ddwAnchorUin;
        std::string strNickName;
        std::string strTitle;
        taf::Int64 ddwTipOffTime;
        vector<std::string> vecTipOffReason;
        std::string streamId;
        taf::Int32 dwAnchorType;
    };
    inline bool operator==(const LiveReportReasonRequest&l, const LiveReportReasonRequest&r)
    {
        return l.strPid == r.strPid && l.strVideoId == r.strVideoId && l.ddwAnchorUin == r.ddwAnchorUin && l.strNickName == r.strNickName && l.strTitle == r.strTitle && l.ddwTipOffTime == r.ddwTipOffTime && l.vecTipOffReason == r.vecTipOffReason && l.streamId == r.streamId && l.dwAnchorType == r.dwAnchorType;
    }
    inline bool operator!=(const LiveReportReasonRequest&l, const LiveReportReasonRequest&r)
    {
        return !(l == r);
    }

    struct LiveReportReasonResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LiveReportReasonResponse";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        LiveReportReasonResponse()
        :errCode(0),strPid("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strPid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strPid, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strPid, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strPid,"strPid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strPid, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strPid;
    };
    inline bool operator==(const LiveReportReasonResponse&l, const LiveReportReasonResponse&r)
    {
        return l.errCode == r.errCode && l.strPid == r.strPid;
    }
    inline bool operator!=(const LiveReportReasonResponse&l, const LiveReportReasonResponse&r)
    {
        return !(l == r);
    }

    struct SelectedSchoolRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SelectedSchoolRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        SelectedSchoolRequest()
        :selectedSchoolId("")
        {
        }
        void resetDefautlt()
        {
            selectedSchoolId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(selectedSchoolId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(selectedSchoolId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(selectedSchoolId,"selectedSchoolId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(selectedSchoolId, false);
            return _os;
        }
    public:
        std::string selectedSchoolId;
    };
    inline bool operator==(const SelectedSchoolRequest&l, const SelectedSchoolRequest&r)
    {
        return l.selectedSchoolId == r.selectedSchoolId;
    }
    inline bool operator!=(const SelectedSchoolRequest&l, const SelectedSchoolRequest&r)
    {
        return !(l == r);
    }

    struct SelectedSchoolResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SelectedSchoolResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        SelectedSchoolResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const SelectedSchoolResponse&l, const SelectedSchoolResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const SelectedSchoolResponse&l, const SelectedSchoolResponse&r)
    {
        return !(l == r);
    }

    struct HomeTabListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.HomeTabListRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        HomeTabListRequest()
        :version(0)
        {
        }
        void resetDefautlt()
        {
            version = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(version, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(version, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(version,"version");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(version, false);
            return _os;
        }
    public:
        taf::Int32 version;
    };
    inline bool operator==(const HomeTabListRequest&l, const HomeTabListRequest&r)
    {
        return l.version == r.version;
    }
    inline bool operator!=(const HomeTabListRequest&l, const HomeTabListRequest&r)
    {
        return !(l == r);
    }

    struct HomeTabListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.HomeTabListResponse";
        }
        static string MD5()
        {
            return "92b6479ab074aaa3a49d282c29a02bc5";
        }
        HomeTabListResponse()
        :errCode(0),version(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            version = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(homeTabList, 1);
            _os.write(version, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(homeTabList, 1, false);
            _is.read(version, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(homeTabList,"homeTabList");
            _ds.display(version,"version");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(homeTabList, true);
            _ds.displaySimple(version, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::HomeTabData> homeTabList;
        taf::Int32 version;
    };
    inline bool operator==(const HomeTabListResponse&l, const HomeTabListResponse&r)
    {
        return l.errCode == r.errCode && l.homeTabList == r.homeTabList && l.version == r.version;
    }
    inline bool operator!=(const HomeTabListResponse&l, const HomeTabListResponse&r)
    {
        return !(l == r);
    }

    struct VideoIntroDetailRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoIntroDetailRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        VideoIntroDetailRequest()
        :lid(""),cid(""),vid("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, false);
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
    };
    inline bool operator==(const VideoIntroDetailRequest&l, const VideoIntroDetailRequest&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid;
    }
    inline bool operator!=(const VideoIntroDetailRequest&l, const VideoIntroDetailRequest&r)
    {
        return !(l == r);
    }

    struct VideoIntroDetailResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoIntroDetailResponse";
        }
        static string MD5()
        {
            return "30db60856c3f115ddfc036315f639a05";
        }
        VideoIntroDetailResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
    };
    inline bool operator==(const VideoIntroDetailResponse&l, const VideoIntroDetailResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData;
    }
    inline bool operator!=(const VideoIntroDetailResponse&l, const VideoIntroDetailResponse&r)
    {
        return !(l == r);
    }

    struct FeedDetailVideoListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedDetailVideoListRequest";
        }
        static string MD5()
        {
            return "8b8804dc5516dacb99be82bdce60d811";
        }
        FeedDetailVideoListRequest()
        :cid(""),recommendVid(""),historyVid(""),lid(""),pageContext(""),isLoadAllData(false)
        {
        }
        void resetDefautlt()
        {
            cid = "";
            recommendVid = "";
            historyVid = "";
            lid = "";
            pageContext = "";
            isLoadAllData = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cid, 0);
            _os.write(recommendVid, 1);
            _os.write(historyVid, 2);
            _os.write(lid, 3);
            _os.write(pageContext, 4);
            _os.write(isLoadAllData, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cid, 0, true);
            _is.read(recommendVid, 1, false);
            _is.read(historyVid, 2, false);
            _is.read(lid, 3, false);
            _is.read(pageContext, 4, false);
            _is.read(isLoadAllData, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cid,"cid");
            _ds.display(recommendVid,"recommendVid");
            _ds.display(historyVid,"historyVid");
            _ds.display(lid,"lid");
            _ds.display(pageContext,"pageContext");
            _ds.display(isLoadAllData,"isLoadAllData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(recommendVid, true);
            _ds.displaySimple(historyVid, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isLoadAllData, false);
            return _os;
        }
    public:
        std::string cid;
        std::string recommendVid;
        std::string historyVid;
        std::string lid;
        std::string pageContext;
        taf::Bool isLoadAllData;
    };
    inline bool operator==(const FeedDetailVideoListRequest&l, const FeedDetailVideoListRequest&r)
    {
        return l.cid == r.cid && l.recommendVid == r.recommendVid && l.historyVid == r.historyVid && l.lid == r.lid && l.pageContext == r.pageContext && l.isLoadAllData == r.isLoadAllData;
    }
    inline bool operator!=(const FeedDetailVideoListRequest&l, const FeedDetailVideoListRequest&r)
    {
        return !(l == r);
    }

    struct FeedDetailVideoListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FeedDetailVideoListResponse";
        }
        static string MD5()
        {
            return "24e4ab978f47addd7c1c72d450896442";
        }
        FeedDetailVideoListResponse()
        :errCode(0),pageContext(""),hasNextPage(true),extraInfoFlag(0),uiType(0),moduleTitle("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            extraInfoFlag = 0;
            uiType = 0;
            moduleTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pageContext, 1);
            _os.write(videoList, 2);
            _os.write(hasNextPage, 3);
            _os.write(extraInfoFlag, 4);
            _os.write(uiType, 5);
            _os.write(moduleTitle, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(videoList, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(extraInfoFlag, 4, false);
            _is.read(uiType, 5, false);
            _is.read(moduleTitle, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pageContext,"pageContext");
            _ds.display(videoList,"videoList");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(extraInfoFlag,"extraInfoFlag");
            _ds.display(uiType,"uiType");
            _ds.display(moduleTitle,"moduleTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(videoList, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(extraInfoFlag, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(moduleTitle, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string pageContext;
        vector<jce::VideoItemData> videoList;
        taf::Bool hasNextPage;
        taf::Int32 extraInfoFlag;
        taf::Int32 uiType;
        std::string moduleTitle;
    };
    inline bool operator==(const FeedDetailVideoListResponse&l, const FeedDetailVideoListResponse&r)
    {
        return l.errCode == r.errCode && l.pageContext == r.pageContext && l.videoList == r.videoList && l.hasNextPage == r.hasNextPage && l.extraInfoFlag == r.extraInfoFlag && l.uiType == r.uiType && l.moduleTitle == r.moduleTitle;
    }
    inline bool operator!=(const FeedDetailVideoListResponse&l, const FeedDetailVideoListResponse&r)
    {
        return !(l == r);
    }

    struct GetCaptionRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCaptionRequest";
        }
        static string MD5()
        {
            return "8ff074d03b6d9a2edab61d673f2480ab";
        }
        GetCaptionRequest()
        :captionKey(""),time(0),totalTime(0),cid(""),vid("")
        {
        }
        void resetDefautlt()
        {
            captionKey = "";
            time = 0;
            totalTime = 0;
            cid = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(captionKey, 0);
            _os.write(time, 1);
            _os.write(totalTime, 2);
            _os.write(cid, 3);
            _os.write(vid, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(captionKey, 0, true);
            _is.read(time, 1, true);
            _is.read(totalTime, 2, true);
            _is.read(cid, 3, true);
            _is.read(vid, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(captionKey,"captionKey");
            _ds.display(time,"time");
            _ds.display(totalTime,"totalTime");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(captionKey, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(totalTime, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string captionKey;
        taf::Int64 time;
        taf::Int64 totalTime;
        std::string cid;
        std::string vid;
    };
    inline bool operator==(const GetCaptionRequest&l, const GetCaptionRequest&r)
    {
        return l.captionKey == r.captionKey && l.time == r.time && l.totalTime == r.totalTime && l.cid == r.cid && l.vid == r.vid;
    }
    inline bool operator!=(const GetCaptionRequest&l, const GetCaptionRequest&r)
    {
        return !(l == r);
    }

    struct GetCaptionResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCaptionResponse";
        }
        static string MD5()
        {
            return "490f146959a12f1838be43ed93cbbfb3";
        }
        GetCaptionResponse()
        :errCode(0),title(""),captionTopHeightPercent(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            title = "";
            captionTopHeightPercent = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(captionList, 1);
            _os.write(title, 2);
            _os.write(captionTopHeightPercent, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(captionList, 1, false);
            _is.read(title, 2, false);
            _is.read(captionTopHeightPercent, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(captionList,"captionList");
            _ds.display(title,"title");
            _ds.display(captionTopHeightPercent,"captionTopHeightPercent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(captionList, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(captionTopHeightPercent, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::CaptionInfo> captionList;
        std::string title;
        taf::Int32 captionTopHeightPercent;
    };
    inline bool operator==(const GetCaptionResponse&l, const GetCaptionResponse&r)
    {
        return l.errCode == r.errCode && l.captionList == r.captionList && l.title == r.title && l.captionTopHeightPercent == r.captionTopHeightPercent;
    }
    inline bool operator!=(const GetCaptionResponse&l, const GetCaptionResponse&r)
    {
        return !(l == r);
    }

    struct CaptionCorrectRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CaptionCorrectRequest";
        }
        static string MD5()
        {
            return "9b881094a60f5a7837ce54afee11f2c2";
        }
        CaptionCorrectRequest()
        :captionKey("")
        {
        }
        void resetDefautlt()
        {
            captionKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(captionKey, 0);
            _os.write(captionList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(captionKey, 0, true);
            _is.read(captionList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(captionKey,"captionKey");
            _ds.display(captionList,"captionList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(captionKey, true);
            _ds.displaySimple(captionList, false);
            return _os;
        }
    public:
        std::string captionKey;
        vector<jce::CaptionInfo> captionList;
    };
    inline bool operator==(const CaptionCorrectRequest&l, const CaptionCorrectRequest&r)
    {
        return l.captionKey == r.captionKey && l.captionList == r.captionList;
    }
    inline bool operator!=(const CaptionCorrectRequest&l, const CaptionCorrectRequest&r)
    {
        return !(l == r);
    }

    struct CaptionCorrectResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CaptionCorrectResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        CaptionCorrectResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const CaptionCorrectResponse&l, const CaptionCorrectResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const CaptionCorrectResponse&l, const CaptionCorrectResponse&r)
    {
        return !(l == r);
    }

    struct ChannelGetNewLineRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelGetNewLineRequest";
        }
        static string MD5()
        {
            return "14e6636632c63fdfafc03fddb6c460ba";
        }
        ChannelGetNewLineRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKeyList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKeyList, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKeyList,"dataKeyList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKeyList, false);
            return _os;
        }
    public:
        vector<std::string> dataKeyList;
    };
    inline bool operator==(const ChannelGetNewLineRequest&l, const ChannelGetNewLineRequest&r)
    {
        return l.dataKeyList == r.dataKeyList;
    }
    inline bool operator!=(const ChannelGetNewLineRequest&l, const ChannelGetNewLineRequest&r)
    {
        return !(l == r);
    }

    struct ChannelGetNewLineResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelGetNewLineResponse";
        }
        static string MD5()
        {
            return "30db60856c3f115ddfc036315f639a05";
        }
        ChannelGetNewLineResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(data, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(data, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(data,"data");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(data, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> data;
    };
    inline bool operator==(const ChannelGetNewLineResponse&l, const ChannelGetNewLineResponse&r)
    {
        return l.errCode == r.errCode && l.data == r.data;
    }
    inline bool operator!=(const ChannelGetNewLineResponse&l, const ChannelGetNewLineResponse&r)
    {
        return !(l == r);
    }

    struct GameSubscibeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameSubscibeRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GameSubscibeRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const GameSubscibeRequest&l, const GameSubscibeRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GameSubscibeRequest&l, const GameSubscibeRequest&r)
    {
        return !(l == r);
    }

    struct GameSubscibeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GameSubscibeResponse";
        }
        static string MD5()
        {
            return "bbfa9fa5d953f075b87c3a80c6196bb7";
        }
        GameSubscibeResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(data, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(data, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(data,"data");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(data, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::GameDownloadItemData> data;
    };
    inline bool operator==(const GameSubscibeResponse&l, const GameSubscibeResponse&r)
    {
        return l.errCode == r.errCode && l.data == r.data;
    }
    inline bool operator!=(const GameSubscibeResponse&l, const GameSubscibeResponse&r)
    {
        return !(l == r);
    }

    struct SyncTaskRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SyncTaskRequest";
        }
        static string MD5()
        {
            return "4e2a678fc881ce161d0f21377a2b62f7";
        }
        SyncTaskRequest()
        :iTaskId(0),strExt(""),iExt(0),taskType(0)
        {
        }
        void resetDefautlt()
        {
            iTaskId = 0;
            strExt = "";
            iExt = 0;
            taskType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iTaskId, 0);
            _os.write(strExt, 1);
            _os.write(iExt, 2);
            _os.write(taskType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iTaskId, 0, true);
            _is.read(strExt, 1, false);
            _is.read(iExt, 2, false);
            _is.read(taskType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iTaskId,"iTaskId");
            _ds.display(strExt,"strExt");
            _ds.display(iExt,"iExt");
            _ds.display(taskType,"taskType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iTaskId, true);
            _ds.displaySimple(strExt, true);
            _ds.displaySimple(iExt, true);
            _ds.displaySimple(taskType, false);
            return _os;
        }
    public:
        taf::Int32 iTaskId;
        std::string strExt;
        taf::Int32 iExt;
        taf::Int32 taskType;
    };
    inline bool operator==(const SyncTaskRequest&l, const SyncTaskRequest&r)
    {
        return l.iTaskId == r.iTaskId && l.strExt == r.strExt && l.iExt == r.iExt && l.taskType == r.taskType;
    }
    inline bool operator!=(const SyncTaskRequest&l, const SyncTaskRequest&r)
    {
        return !(l == r);
    }

    struct SyncTaskResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SyncTaskResponse";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        SyncTaskResponse()
        :iRetCode(0),strMsg(""),strExt("")
        {
        }
        void resetDefautlt()
        {
            iRetCode = 0;
            strMsg = "";
            strExt = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iRetCode, 0);
            _os.write(strMsg, 1);
            _os.write(strExt, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iRetCode, 0, true);
            _is.read(strMsg, 1, false);
            _is.read(strExt, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iRetCode,"iRetCode");
            _ds.display(strMsg,"strMsg");
            _ds.display(strExt,"strExt");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iRetCode, true);
            _ds.displaySimple(strMsg, true);
            _ds.displaySimple(strExt, false);
            return _os;
        }
    public:
        taf::Int32 iRetCode;
        std::string strMsg;
        std::string strExt;
    };
    inline bool operator==(const SyncTaskResponse&l, const SyncTaskResponse&r)
    {
        return l.iRetCode == r.iRetCode && l.strMsg == r.strMsg && l.strExt == r.strExt;
    }
    inline bool operator!=(const SyncTaskResponse&l, const SyncTaskResponse&r)
    {
        return !(l == r);
    }

    struct jceHttpRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.jceHttpRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        jceHttpRequest()
        :strRequestID(""),strRequest(""),strHttpHead("")
        {
        }
        void resetDefautlt()
        {
            strRequestID = "";
            strRequest = "";
            strHttpHead = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strRequestID, 0);
            _os.write(strRequest, 1);
            _os.write(strHttpHead, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strRequestID, 0, true);
            _is.read(strRequest, 1, true);
            _is.read(strHttpHead, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strRequestID,"strRequestID");
            _ds.display(strRequest,"strRequest");
            _ds.display(strHttpHead,"strHttpHead");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strRequestID, true);
            _ds.displaySimple(strRequest, true);
            _ds.displaySimple(strHttpHead, false);
            return _os;
        }
    public:
        std::string strRequestID;
        std::string strRequest;
        std::string strHttpHead;
    };
    inline bool operator==(const jceHttpRequest&l, const jceHttpRequest&r)
    {
        return l.strRequestID == r.strRequestID && l.strRequest == r.strRequest && l.strHttpHead == r.strHttpHead;
    }
    inline bool operator!=(const jceHttpRequest&l, const jceHttpRequest&r)
    {
        return !(l == r);
    }

    struct jceHttpResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.jceHttpResponse";
        }
        static string MD5()
        {
            return "02c8b7c8dd015754a72e807a03033d5e";
        }
        jceHttpResponse()
        :strRequestID(""),strResponse(""),strHttpHead(""),iErrCode(0)
        {
        }
        void resetDefautlt()
        {
            strRequestID = "";
            strResponse = "";
            strHttpHead = "";
            iErrCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strRequestID, 0);
            _os.write(strResponse, 1);
            _os.write(strHttpHead, 2);
            _os.write(iErrCode, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strRequestID, 0, true);
            _is.read(strResponse, 1, true);
            _is.read(strHttpHead, 2, false);
            _is.read(iErrCode, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strRequestID,"strRequestID");
            _ds.display(strResponse,"strResponse");
            _ds.display(strHttpHead,"strHttpHead");
            _ds.display(iErrCode,"iErrCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strRequestID, true);
            _ds.displaySimple(strResponse, true);
            _ds.displaySimple(strHttpHead, true);
            _ds.displaySimple(iErrCode, false);
            return _os;
        }
    public:
        std::string strRequestID;
        std::string strResponse;
        std::string strHttpHead;
        taf::Int32 iErrCode;
    };
    inline bool operator==(const jceHttpResponse&l, const jceHttpResponse&r)
    {
        return l.strRequestID == r.strRequestID && l.strResponse == r.strResponse && l.strHttpHead == r.strHttpHead && l.iErrCode == r.iErrCode;
    }
    inline bool operator!=(const jceHttpResponse&l, const jceHttpResponse&r)
    {
        return !(l == r);
    }

    struct HasReadMsgRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.HasReadMsgRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        HasReadMsgRequest()
        :dataKey(""),tabId("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            tabId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(tabId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(tabId, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(tabId,"tabId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(tabId, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string tabId;
    };
    inline bool operator==(const HasReadMsgRequest&l, const HasReadMsgRequest&r)
    {
        return l.dataKey == r.dataKey && l.tabId == r.tabId;
    }
    inline bool operator!=(const HasReadMsgRequest&l, const HasReadMsgRequest&r)
    {
        return !(l == r);
    }

    struct HasReadMsgResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.HasReadMsgResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        HasReadMsgResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const HasReadMsgResponse&l, const HasReadMsgResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const HasReadMsgResponse&l, const HasReadMsgResponse&r)
    {
        return !(l == r);
    }

    struct GetRelatedQueryRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetRelatedQueryRequest";
        }
        static string MD5()
        {
            return "0944695c252419bdc14c15dffe968196";
        }
        GetRelatedQueryRequest()
        :query(""),num(0),mdsumVideo(""),id(""),dataType(0),appid(""),appkey("")
        {
        }
        void resetDefautlt()
        {
            query = "";
            num = 0;
            mdsumVideo = "";
            id = "";
            dataType = 0;
            appid = "";
            appkey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(query, 0);
            _os.write(num, 1);
            _os.write(mdsumVideo, 2);
            _os.write(id, 3);
            _os.write(dataType, 4);
            _os.write(appid, 5);
            _os.write(appkey, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(query, 0, true);
            _is.read(num, 1, true);
            _is.read(mdsumVideo, 2, true);
            _is.read(id, 3, false);
            _is.read(dataType, 4, false);
            _is.read(appid, 5, false);
            _is.read(appkey, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(query,"query");
            _ds.display(num,"num");
            _ds.display(mdsumVideo,"mdsumVideo");
            _ds.display(id,"id");
            _ds.display(dataType,"dataType");
            _ds.display(appid,"appid");
            _ds.display(appkey,"appkey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(query, true);
            _ds.displaySimple(num, true);
            _ds.displaySimple(mdsumVideo, true);
            _ds.displaySimple(id, true);
            _ds.displaySimple(dataType, true);
            _ds.displaySimple(appid, true);
            _ds.displaySimple(appkey, false);
            return _os;
        }
    public:
        std::string query;
        taf::Int32 num;
        std::string mdsumVideo;
        std::string id;
        taf::Int32 dataType;
        std::string appid;
        std::string appkey;
    };
    inline bool operator==(const GetRelatedQueryRequest&l, const GetRelatedQueryRequest&r)
    {
        return l.query == r.query && l.num == r.num && l.mdsumVideo == r.mdsumVideo && l.id == r.id && l.dataType == r.dataType && l.appid == r.appid && l.appkey == r.appkey;
    }
    inline bool operator!=(const GetRelatedQueryRequest&l, const GetRelatedQueryRequest&r)
    {
        return !(l == r);
    }

    struct GetRelatedQueryResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetRelatedQueryResponse";
        }
        static string MD5()
        {
            return "2790d1b3d144e86f55e025b3c18f2ea5";
        }
        GetRelatedQueryResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(data, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(data, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(data,"data");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(data, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        vector<jce::TempletLine> data;
    };
    inline bool operator==(const GetRelatedQueryResponse&l, const GetRelatedQueryResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.data == r.data;
    }
    inline bool operator!=(const GetRelatedQueryResponse&l, const GetRelatedQueryResponse&r)
    {
        return !(l == r);
    }

    struct TVShowWeeklyListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TVShowWeeklyListRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        TVShowWeeklyListRequest()
        :datakey("")
        {
        }
        void resetDefautlt()
        {
            datakey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(datakey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(datakey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(datakey,"datakey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(datakey, false);
            return _os;
        }
    public:
        std::string datakey;
    };
    inline bool operator==(const TVShowWeeklyListRequest&l, const TVShowWeeklyListRequest&r)
    {
        return l.datakey == r.datakey;
    }
    inline bool operator!=(const TVShowWeeklyListRequest&l, const TVShowWeeklyListRequest&r)
    {
        return !(l == r);
    }

    struct TVShowWeeklyListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TVShowWeeklyListResponse";
        }
        static string MD5()
        {
            return "8b3724a0441545157489cda7c65ce80f";
        }
        TVShowWeeklyListResponse()
        :dataKey(""),errCode(0),reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            errCode = 0;
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(errCode, 1);
            _os.write(posterList, 2);
            _os.write(reportParams, 3);
            _os.write(reportKey, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(errCode, 1, false);
            _is.read(posterList, 2, false);
            _is.read(reportParams, 3, false);
            _is.read(reportKey, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(errCode,"errCode");
            _ds.display(posterList,"posterList");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(posterList, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, false);
            return _os;
        }
    public:
        std::string dataKey;
        taf::Int32 errCode;
        vector<jce::AttentPoster> posterList;
        std::string reportParams;
        std::string reportKey;
    };
    inline bool operator==(const TVShowWeeklyListResponse&l, const TVShowWeeklyListResponse&r)
    {
        return l.dataKey == r.dataKey && l.errCode == r.errCode && l.posterList == r.posterList && l.reportParams == r.reportParams && l.reportKey == r.reportKey;
    }
    inline bool operator!=(const TVShowWeeklyListResponse&l, const TVShowWeeklyListResponse&r)
    {
        return !(l == r);
    }

    struct CommonSearchRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommonSearchRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        CommonSearchRequest()
        :searchKey(""),type(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            searchKey = "";
            type = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(searchKey, 0);
            _os.write(type, 1);
            _os.write(pageContext, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(searchKey, 0, true);
            _is.read(type, 1, false);
            _is.read(pageContext, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(searchKey,"searchKey");
            _ds.display(type,"type");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(searchKey, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string searchKey;
        std::string type;
        std::string pageContext;
    };
    inline bool operator==(const CommonSearchRequest&l, const CommonSearchRequest&r)
    {
        return l.searchKey == r.searchKey && l.type == r.type && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const CommonSearchRequest&l, const CommonSearchRequest&r)
    {
        return !(l == r);
    }

    struct CommonSearchResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommonSearchResponse";
        }
        static string MD5()
        {
            return "ad84605aa73491ad1d4df9f463d573b5";
        }
        CommonSearchResponse()
        :errCode(0),pageContext(""),hasNextPage(true),reportParams("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
        std::string reportParams;
    };
    inline bool operator==(const CommonSearchResponse&l, const CommonSearchResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const CommonSearchResponse&l, const CommonSearchResponse&r)
    {
        return !(l == r);
    }

    struct CommonSearchSmartBoxRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommonSearchSmartBoxRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        CommonSearchSmartBoxRequest()
        :keyWord(""),type("")
        {
        }
        void resetDefautlt()
        {
            keyWord = "";
            type = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(keyWord, 0);
            _os.write(type, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(keyWord, 0, true);
            _is.read(type, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(keyWord,"keyWord");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(keyWord, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        std::string keyWord;
        std::string type;
    };
    inline bool operator==(const CommonSearchSmartBoxRequest&l, const CommonSearchSmartBoxRequest&r)
    {
        return l.keyWord == r.keyWord && l.type == r.type;
    }
    inline bool operator!=(const CommonSearchSmartBoxRequest&l, const CommonSearchSmartBoxRequest&r)
    {
        return !(l == r);
    }

    struct CommonSearchSmartBoxResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CommonSearchSmartBoxResponse";
        }
        static string MD5()
        {
            return "44fa553ec60b5d8cfc5070040f1f2eb2";
        }
        CommonSearchSmartBoxResponse()
        :errCode(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(itemList, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(itemList, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(itemList,"itemList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<std::string> itemList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const CommonSearchSmartBoxResponse&l, const CommonSearchSmartBoxResponse&r)
    {
        return l.errCode == r.errCode && l.itemList == r.itemList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const CommonSearchSmartBoxResponse&l, const CommonSearchSmartBoxResponse&r)
    {
        return !(l == r);
    }

    struct DokiCombineListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiCombineListRequest";
        }
        static string MD5()
        {
            return "19cfb41a66359c894f1dcce10dba2a65";
        }
        DokiCombineListRequest()
        :pageContext(""),type(0),dataKey("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
            type = 0;
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
            _os.write(type, 1);
            _os.write(dataKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
            _is.read(type, 1, false);
            _is.read(dataKey, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string pageContext;
        taf::Int32 type;
        std::string dataKey;
    };
    inline bool operator==(const DokiCombineListRequest&l, const DokiCombineListRequest&r)
    {
        return l.pageContext == r.pageContext && l.type == r.type && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const DokiCombineListRequest&l, const DokiCombineListRequest&r)
    {
        return !(l == r);
    }

    struct DokiCombineListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DokiCombineListResponse";
        }
        static string MD5()
        {
            return "8e20d544570fc1e65bbb5ca7673ea635";
        }
        DokiCombineListResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const DokiCombineListResponse&l, const DokiCombineListResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const DokiCombineListResponse&l, const DokiCombineListResponse&r)
    {
        return !(l == r);
    }

    struct DetailsFlowDataRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DetailsFlowDataRequest";
        }
        static string MD5()
        {
            return "4f7ad77d72d6c8289b052387c2852a0d";
        }
        DetailsFlowDataRequest()
        :dataKey(""),pageContext(""),reportContext(""),vid("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
            reportContext = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
            _os.write(reportContext, 2);
            _os.write(recmdInfo, 3);
            _os.write(vid, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(reportContext, 2, false);
            _is.read(recmdInfo, 3, false);
            _is.read(vid, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            _ds.display(reportContext,"reportContext");
            _ds.display(recmdInfo,"recmdInfo");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(recmdInfo, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
        std::string reportContext;
        jce::RecommendReqExtInfo recmdInfo;
        std::string vid;
    };
    inline bool operator==(const DetailsFlowDataRequest&l, const DetailsFlowDataRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext && l.reportContext == r.reportContext && l.recmdInfo == r.recmdInfo && l.vid == r.vid;
    }
    inline bool operator!=(const DetailsFlowDataRequest&l, const DetailsFlowDataRequest&r)
    {
        return !(l == r);
    }

    struct DetailsFlowDataResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DetailsFlowDataResponse";
        }
        static string MD5()
        {
            return "ddf799799487690fb3f494cce8535c42";
        }
        DetailsFlowDataResponse()
        :errCode(0),pageContext(""),hasNextPage(true),reportContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            reportContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(reportContext, 4);
            _os.write(recmdInfo, 5);
            _os.write(coralSummaryInfo, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(reportContext, 4, false);
            _is.read(recmdInfo, 5, false);
            _is.read(coralSummaryInfo, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(reportContext,"reportContext");
            _ds.display(recmdInfo,"recmdInfo");
            _ds.display(coralSummaryInfo,"coralSummaryInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(reportContext, true);
            _ds.displaySimple(recmdInfo, true);
            _ds.displaySimple(coralSummaryInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
        std::string reportContext;
        jce::RecommendRespExtInfo recmdInfo;
        jce::CoralSummaryInfo coralSummaryInfo;
    };
    inline bool operator==(const DetailsFlowDataResponse&l, const DetailsFlowDataResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.reportContext == r.reportContext && l.recmdInfo == r.recmdInfo && l.coralSummaryInfo == r.coralSummaryInfo;
    }
    inline bool operator!=(const DetailsFlowDataResponse&l, const DetailsFlowDataResponse&r)
    {
        return !(l == r);
    }

    struct GetQueryAppListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetQueryAppListRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetQueryAppListRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const GetQueryAppListRequest&l, const GetQueryAppListRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const GetQueryAppListRequest&l, const GetQueryAppListRequest&r)
    {
        return !(l == r);
    }

    struct GetQueryAppListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetQueryAppListResponse";
        }
        static string MD5()
        {
            return "c0c55295846a835fde8fabbaa8f6adc8";
        }
        GetQueryAppListResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(data, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(data, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(data,"data");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(data, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<std::string> data;
    };
    inline bool operator==(const GetQueryAppListResponse&l, const GetQueryAppListResponse&r)
    {
        return l.errCode == r.errCode && l.data == r.data;
    }
    inline bool operator!=(const GetQueryAppListResponse&l, const GetQueryAppListResponse&r)
    {
        return !(l == r);
    }

    struct ChannelInsertFeedbackRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelInsertFeedbackRequest";
        }
        static string MD5()
        {
            return "40b92303d26d7929e2e9498cc9ce7ceb";
        }
        ChannelInsertFeedbackRequest()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(info, 0);
            _os.write(type, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(info, 0, true);
            _is.read(type, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(info,"info");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(info, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        jce::ChannelInsertInfo info;
        taf::Int32 type;
    };
    inline bool operator==(const ChannelInsertFeedbackRequest&l, const ChannelInsertFeedbackRequest&r)
    {
        return l.info == r.info && l.type == r.type;
    }
    inline bool operator!=(const ChannelInsertFeedbackRequest&l, const ChannelInsertFeedbackRequest&r)
    {
        return !(l == r);
    }

    struct ChannelInsertFeedbackResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelInsertFeedbackResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        ChannelInsertFeedbackResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const ChannelInsertFeedbackResponse&l, const ChannelInsertFeedbackResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const ChannelInsertFeedbackResponse&l, const ChannelInsertFeedbackResponse&r)
    {
        return !(l == r);
    }

    struct GetApkInstallConfigRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetApkInstallConfigRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        GetApkInstallConfigRequest()
        :mobileBrand(""),sysRomVer(""),installApkVer("")
        {
        }
        void resetDefautlt()
        {
            mobileBrand = "";
            sysRomVer = "";
            installApkVer = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(mobileBrand, 0);
            _os.write(sysRomVer, 1);
            _os.write(installApkVer, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(mobileBrand, 0, false);
            _is.read(sysRomVer, 1, false);
            _is.read(installApkVer, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(mobileBrand,"mobileBrand");
            _ds.display(sysRomVer,"sysRomVer");
            _ds.display(installApkVer,"installApkVer");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(mobileBrand, true);
            _ds.displaySimple(sysRomVer, true);
            _ds.displaySimple(installApkVer, false);
            return _os;
        }
    public:
        std::string mobileBrand;
        std::string sysRomVer;
        std::string installApkVer;
    };
    inline bool operator==(const GetApkInstallConfigRequest&l, const GetApkInstallConfigRequest&r)
    {
        return l.mobileBrand == r.mobileBrand && l.sysRomVer == r.sysRomVer && l.installApkVer == r.installApkVer;
    }
    inline bool operator!=(const GetApkInstallConfigRequest&l, const GetApkInstallConfigRequest&r)
    {
        return !(l == r);
    }

    struct GetApkInstallConfigResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetApkInstallConfigResponse";
        }
        static string MD5()
        {
            return "72dfddf03422779b81fb661a3938fb92";
        }
        GetApkInstallConfigResponse()
        :errCode(0),strategyCtlBit(0),fakePackageName("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strategyCtlBit = 0;
            fakePackageName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strategyCtlBit, 1);
            _os.write(fakePackageName, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strategyCtlBit, 1, false);
            _is.read(fakePackageName, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strategyCtlBit,"strategyCtlBit");
            _ds.display(fakePackageName,"fakePackageName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strategyCtlBit, true);
            _ds.displaySimple(fakePackageName, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 strategyCtlBit;
        std::string fakePackageName;
    };
    inline bool operator==(const GetApkInstallConfigResponse&l, const GetApkInstallConfigResponse&r)
    {
        return l.errCode == r.errCode && l.strategyCtlBit == r.strategyCtlBit && l.fakePackageName == r.fakePackageName;
    }
    inline bool operator!=(const GetApkInstallConfigResponse&l, const GetApkInstallConfigResponse&r)
    {
        return !(l == r);
    }

    struct SubFloatingONAPageRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SubFloatingONAPageRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        SubFloatingONAPageRequest()
        :datakey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            datakey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(datakey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(datakey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(datakey,"datakey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(datakey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string datakey;
        std::string pageContext;
    };
    inline bool operator==(const SubFloatingONAPageRequest&l, const SubFloatingONAPageRequest&r)
    {
        return l.datakey == r.datakey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const SubFloatingONAPageRequest&l, const SubFloatingONAPageRequest&r)
    {
        return !(l == r);
    }

    struct SubFloatingONAPageResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SubFloatingONAPageResponse";
        }
        static string MD5()
        {
            return "8e20d544570fc1e65bbb5ca7673ea635";
        }
        SubFloatingONAPageResponse()
        :errCode(0),pageContext(""),isHaveNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            isHaveNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(isHaveNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(isHaveNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(isHaveNextPage,"isHaveNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(isHaveNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool isHaveNextPage;
    };
    inline bool operator==(const SubFloatingONAPageResponse&l, const SubFloatingONAPageResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.isHaveNextPage == r.isHaveNextPage;
    }
    inline bool operator!=(const SubFloatingONAPageResponse&l, const SubFloatingONAPageResponse&r)
    {
        return !(l == r);
    }

    struct ImmersiveListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ImmersiveListRequest";
        }
        static string MD5()
        {
            return "33c02739894d26da0bcbd569677e2c7b";
        }
        ImmersiveListRequest()
        :vid(""),pageContext(""),dataKey(""),adContext(""),reportData("")
        {
        }
        void resetDefautlt()
        {
            vid = "";
            pageContext = "";
            dataKey = "";
            adContext = "";
            reportData = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(pageContext, 1);
            _os.write(dataKey, 2);
            _os.write(adContext, 3);
            _os.write(adContextList, 4);
            _os.write(reportData, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(dataKey, 2, false);
            _is.read(adContext, 3, false);
            _is.read(adContextList, 4, false);
            _is.read(reportData, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(pageContext,"pageContext");
            _ds.display(dataKey,"dataKey");
            _ds.display(adContext,"adContext");
            _ds.display(adContextList,"adContextList");
            _ds.display(reportData,"reportData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(adContext, true);
            _ds.displaySimple(adContextList, true);
            _ds.displaySimple(reportData, false);
            return _os;
        }
    public:
        std::string vid;
        std::string pageContext;
        std::string dataKey;
        std::string adContext;
        vector<std::string> adContextList;
        std::string reportData;
    };
    inline bool operator==(const ImmersiveListRequest&l, const ImmersiveListRequest&r)
    {
        return l.vid == r.vid && l.pageContext == r.pageContext && l.dataKey == r.dataKey && l.adContext == r.adContext && l.adContextList == r.adContextList && l.reportData == r.reportData;
    }
    inline bool operator!=(const ImmersiveListRequest&l, const ImmersiveListRequest&r)
    {
        return !(l == r);
    }

    struct ImmersiveListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ImmersiveListResponse";
        }
        static string MD5()
        {
            return "b7940adfd9b6062394cadf8813dbcc22";
        }
        ImmersiveListResponse()
        :errCode(0),pageContext(""),hasNextPage(true),adContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            adContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(adContext, 4);
            _os.write(adContextList, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, true);
            _is.read(pageContext, 2, true);
            _is.read(hasNextPage, 3, true);
            _is.read(adContext, 4, false);
            _is.read(adContextList, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(adContext,"adContext");
            _ds.display(adContextList,"adContextList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(adContext, true);
            _ds.displaySimple(adContextList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
        std::string adContext;
        vector<std::string> adContextList;
    };
    inline bool operator==(const ImmersiveListResponse&l, const ImmersiveListResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.adContext == r.adContext && l.adContextList == r.adContextList;
    }
    inline bool operator!=(const ImmersiveListResponse&l, const ImmersiveListResponse&r)
    {
        return !(l == r);
    }

    struct UserRelationshipItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserRelationshipItem";
        }
        static string MD5()
        {
            return "8cd96a4f8852f602df503bcaa5cbf62d";
        }
        UserRelationshipItem()
        :extraInfo("")
        {
        }
        void resetDefautlt()
        {
            extraInfo = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(actorList, 0);
            _os.write(extraInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(actorList, 0, false);
            _is.read(extraInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(actorList,"actorList");
            _ds.display(extraInfo,"extraInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(actorList, true);
            _ds.displaySimple(extraInfo, false);
            return _os;
        }
    public:
        vector<jce::ActorInfo> actorList;
        std::string extraInfo;
    };
    inline bool operator==(const UserRelationshipItem&l, const UserRelationshipItem&r)
    {
        return l.actorList == r.actorList && l.extraInfo == r.extraInfo;
    }
    inline bool operator!=(const UserRelationshipItem&l, const UserRelationshipItem&r)
    {
        return !(l == r);
    }

    struct UserRelationshipRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserRelationshipRequest";
        }
        static string MD5()
        {
            return "14e6636632c63fdfafc03fddb6c460ba";
        }
        UserRelationshipRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKeyList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKeyList, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKeyList,"dataKeyList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKeyList, false);
            return _os;
        }
    public:
        vector<std::string> dataKeyList;
    };
    inline bool operator==(const UserRelationshipRequest&l, const UserRelationshipRequest&r)
    {
        return l.dataKeyList == r.dataKeyList;
    }
    inline bool operator!=(const UserRelationshipRequest&l, const UserRelationshipRequest&r)
    {
        return !(l == r);
    }

    struct UserRelationshipResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserRelationshipResponse";
        }
        static string MD5()
        {
            return "325d92cf92914004a43b22b68336886d";
        }
        UserRelationshipResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(relationDict, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(relationDict, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(relationDict,"relationDict");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(relationDict, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        map<std::string, jce::UserRelationshipItem> relationDict;
    };
    inline bool operator==(const UserRelationshipResponse&l, const UserRelationshipResponse&r)
    {
        return l.errCode == r.errCode && l.relationDict == r.relationDict;
    }
    inline bool operator!=(const UserRelationshipResponse&l, const UserRelationshipResponse&r)
    {
        return !(l == r);
    }

    struct RssVerticalVideoONAViewsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RssVerticalVideoONAViewsRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        RssVerticalVideoONAViewsRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const RssVerticalVideoONAViewsRequest&l, const RssVerticalVideoONAViewsRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const RssVerticalVideoONAViewsRequest&l, const RssVerticalVideoONAViewsRequest&r)
    {
        return !(l == r);
    }

    struct RssVerticalVideoONAViewsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RssVerticalVideoONAViewsResponse";
        }
        static string MD5()
        {
            return "8e20d544570fc1e65bbb5ca7673ea635";
        }
        RssVerticalVideoONAViewsResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const RssVerticalVideoONAViewsResponse&l, const RssVerticalVideoONAViewsResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const RssVerticalVideoONAViewsResponse&l, const RssVerticalVideoONAViewsResponse&r)
    {
        return !(l == r);
    }

    struct GetCloudBucketConfigRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCloudBucketConfigRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        GetCloudBucketConfigRequest()
        :bucketID(""),version("")
        {
        }
        void resetDefautlt()
        {
            bucketID = "";
            version = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bucketID, 0);
            _os.write(version, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bucketID, 0, true);
            _is.read(version, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bucketID,"bucketID");
            _ds.display(version,"version");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bucketID, true);
            _ds.displaySimple(version, false);
            return _os;
        }
    public:
        std::string bucketID;
        std::string version;
    };
    inline bool operator==(const GetCloudBucketConfigRequest&l, const GetCloudBucketConfigRequest&r)
    {
        return l.bucketID == r.bucketID && l.version == r.version;
    }
    inline bool operator!=(const GetCloudBucketConfigRequest&l, const GetCloudBucketConfigRequest&r)
    {
        return !(l == r);
    }

    struct GetCloudBucketConfigResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCloudBucketConfigResponse";
        }
        static string MD5()
        {
            return "a2824622cf9d7380e472cea29138860e";
        }
        GetCloudBucketConfigResponse()
        :errCode(0),errMsg(""),version("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
            version = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(version, 2);
            _os.write(configSetting, 3);
            _os.write(configData, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, false);
            _is.read(version, 2, false);
            _is.read(configSetting, 3, false);
            _is.read(configData, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(version,"version");
            _ds.display(configSetting,"configSetting");
            _ds.display(configData,"configData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(version, true);
            _ds.displaySimple(configSetting, true);
            _ds.displaySimple(configData, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        std::string version;
        map<std::string, taf::Int32> configSetting;
        map<std::string, std::string> configData;
    };
    inline bool operator==(const GetCloudBucketConfigResponse&l, const GetCloudBucketConfigResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.version == r.version && l.configSetting == r.configSetting && l.configData == r.configData;
    }
    inline bool operator!=(const GetCloudBucketConfigResponse&l, const GetCloudBucketConfigResponse&r)
    {
        return !(l == r);
    }

    struct GetYooFollowListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetYooFollowListRequest";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        GetYooFollowListRequest()
        :dataVersion(0)
        {
        }
        void resetDefautlt()
        {
            dataVersion = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataVersion, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataVersion, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataVersion,"dataVersion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataVersion, false);
            return _os;
        }
    public:
        taf::Int64 dataVersion;
    };
    inline bool operator==(const GetYooFollowListRequest&l, const GetYooFollowListRequest&r)
    {
        return l.dataVersion == r.dataVersion;
    }
    inline bool operator!=(const GetYooFollowListRequest&l, const GetYooFollowListRequest&r)
    {
        return !(l == r);
    }

    struct GetYooFollowListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetYooFollowListResponse";
        }
        static string MD5()
        {
            return "180ecef87d1a457c651f4c2d709eb74d";
        }
        GetYooFollowListResponse()
        :errCode(0),dataVersion(0),total(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            dataVersion = 0;
            total = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(dataVersion, 1);
            _os.write(total, 2);
            _os.write(yooFollowList, 3);
            _os.write(reportKey, 4);
            _os.write(reportParams, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(dataVersion, 1, false);
            _is.read(total, 2, false);
            _is.read(yooFollowList, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(reportParams, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(dataVersion,"dataVersion");
            _ds.display(total,"total");
            _ds.display(yooFollowList,"yooFollowList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(dataVersion, true);
            _ds.displaySimple(total, true);
            _ds.displaySimple(yooFollowList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int64 dataVersion;
        taf::Int32 total;
        vector<jce::YooFollowCard> yooFollowList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const GetYooFollowListResponse&l, const GetYooFollowListResponse&r)
    {
        return l.errCode == r.errCode && l.dataVersion == r.dataVersion && l.total == r.total && l.yooFollowList == r.yooFollowList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const GetYooFollowListResponse&l, const GetYooFollowListResponse&r)
    {
        return !(l == r);
    }

    struct JsonBusinessRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.JsonBusinessRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        JsonBusinessRequest()
        :requestJson("")
        {
        }
        void resetDefautlt()
        {
            requestJson = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(requestJson, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(requestJson, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(requestJson,"requestJson");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(requestJson, false);
            return _os;
        }
    public:
        std::string requestJson;
    };
    inline bool operator==(const JsonBusinessRequest&l, const JsonBusinessRequest&r)
    {
        return l.requestJson == r.requestJson;
    }
    inline bool operator!=(const JsonBusinessRequest&l, const JsonBusinessRequest&r)
    {
        return !(l == r);
    }

    struct JsonBusinessResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.JsonBusinessResponse";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        JsonBusinessResponse()
        :errCode(0),responseJson("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            responseJson = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(responseJson, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(responseJson, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(responseJson,"responseJson");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(responseJson, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string responseJson;
    };
    inline bool operator==(const JsonBusinessResponse&l, const JsonBusinessResponse&r)
    {
        return l.errCode == r.errCode && l.responseJson == r.responseJson;
    }
    inline bool operator!=(const JsonBusinessResponse&l, const JsonBusinessResponse&r)
    {
        return !(l == r);
    }

    struct DetailRecommendBannerRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DetailRecommendBannerRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        DetailRecommendBannerRequest()
        :lid(""),cid(""),vid("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, false);
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
    };
    inline bool operator==(const DetailRecommendBannerRequest&l, const DetailRecommendBannerRequest&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid;
    }
    inline bool operator!=(const DetailRecommendBannerRequest&l, const DetailRecommendBannerRequest&r)
    {
        return !(l == r);
    }

    struct DetailRecommendBannerResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DetailRecommendBannerResponse";
        }
        static string MD5()
        {
            return "8ec164e1dc5c49c159bd1c2e8853fc02";
        }
        DetailRecommendBannerResponse()
        :errCode(0),lid(""),cid(""),vid("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            lid = "";
            cid = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(lid, 1);
            _os.write(cid, 2);
            _os.write(vid, 3);
            _os.write(bammerView, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, false);
            _is.read(lid, 1, false);
            _is.read(cid, 2, false);
            _is.read(vid, 3, false);
            _is.read(bammerView, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(bammerView,"bammerView");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(bammerView, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string lid;
        std::string cid;
        std::string vid;
        jce::ONARecommendBanner bammerView;
    };
    inline bool operator==(const DetailRecommendBannerResponse&l, const DetailRecommendBannerResponse&r)
    {
        return l.errCode == r.errCode && l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.bammerView == r.bammerView;
    }
    inline bool operator!=(const DetailRecommendBannerResponse&l, const DetailRecommendBannerResponse&r)
    {
        return !(l == r);
    }

    struct PreDownloadApkListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PreDownloadApkListRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        PreDownloadApkListRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const PreDownloadApkListRequest&l, const PreDownloadApkListRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const PreDownloadApkListRequest&l, const PreDownloadApkListRequest&r)
    {
        return !(l == r);
    }

    struct PreDownloadApkListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PreDownloadApkListResponse";
        }
        static string MD5()
        {
            return "e4882b6f8496eb1060e0716f9dead38d";
        }
        PreDownloadApkListResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(list, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(list, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(list,"list");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(list, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::AppInfo> list;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const PreDownloadApkListResponse&l, const PreDownloadApkListResponse&r)
    {
        return l.errCode == r.errCode && l.list == r.list && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const PreDownloadApkListResponse&l, const PreDownloadApkListResponse&r)
    {
        return !(l == r);
    }

    struct GetVoiceSearchRecommendWordsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetVoiceSearchRecommendWordsRequest";
        }
        static string MD5()
        {
            return "3c7096e8daca847c5177c199d3960392";
        }
        GetVoiceSearchRecommendWordsRequest()
        :channelId(""),searchDataKey(""),debugMod(false)
        {
        }
        void resetDefautlt()
        {
            channelId = "";
            searchDataKey = "";
            debugMod = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(channelId, 0);
            _os.write(searchDataKey, 1);
            _os.write(debugMod, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(channelId, 0, true);
            _is.read(searchDataKey, 1, false);
            _is.read(debugMod, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(channelId,"channelId");
            _ds.display(searchDataKey,"searchDataKey");
            _ds.display(debugMod,"debugMod");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(channelId, true);
            _ds.displaySimple(searchDataKey, true);
            _ds.displaySimple(debugMod, false);
            return _os;
        }
    public:
        std::string channelId;
        std::string searchDataKey;
        taf::Bool debugMod;
    };
    inline bool operator==(const GetVoiceSearchRecommendWordsRequest&l, const GetVoiceSearchRecommendWordsRequest&r)
    {
        return l.channelId == r.channelId && l.searchDataKey == r.searchDataKey && l.debugMod == r.debugMod;
    }
    inline bool operator!=(const GetVoiceSearchRecommendWordsRequest&l, const GetVoiceSearchRecommendWordsRequest&r)
    {
        return !(l == r);
    }

    struct GetVoiceSearchRecommendWordsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetVoiceSearchRecommendWordsResponse";
        }
        static string MD5()
        {
            return "bb269299259061e11fd06f5da3bdd2da";
        }
        GetVoiceSearchRecommendWordsResponse()
        :errCode(0),errMsg(""),reportKey(""),reportParams(""),debugLog("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
            reportKey = "";
            reportParams = "";
            debugLog = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(recommendWords, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
            _os.write(debugLog, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, false);
            _is.read(recommendWords, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
            _is.read(debugLog, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(recommendWords,"recommendWords");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            _ds.display(debugLog,"debugLog");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(recommendWords, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(debugLog, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        vector<std::string> recommendWords;
        std::string reportKey;
        std::string reportParams;
        std::string debugLog;
    };
    inline bool operator==(const GetVoiceSearchRecommendWordsResponse&l, const GetVoiceSearchRecommendWordsResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.recommendWords == r.recommendWords && l.reportKey == r.reportKey && l.reportParams == r.reportParams && l.debugLog == r.debugLog;
    }
    inline bool operator!=(const GetVoiceSearchRecommendWordsResponse&l, const GetVoiceSearchRecommendWordsResponse&r)
    {
        return !(l == r);
    }

    struct LoadThirdApkListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LoadThirdApkListRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        LoadThirdApkListRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const LoadThirdApkListRequest&l, const LoadThirdApkListRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const LoadThirdApkListRequest&l, const LoadThirdApkListRequest&r)
    {
        return !(l == r);
    }

    struct LoadThirdApkListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LoadThirdApkListResponse";
        }
        static string MD5()
        {
            return "e4882b6f8496eb1060e0716f9dead38d";
        }
        LoadThirdApkListResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(list, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(list, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(list,"list");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(list, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::AppInfo> list;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const LoadThirdApkListResponse&l, const LoadThirdApkListResponse&r)
    {
        return l.errCode == r.errCode && l.list == r.list && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const LoadThirdApkListResponse&l, const LoadThirdApkListResponse&r)
    {
        return !(l == r);
    }

    struct GetPickInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetPickInfoRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetPickInfoRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const GetPickInfoRequest&l, const GetPickInfoRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const GetPickInfoRequest&l, const GetPickInfoRequest&r)
    {
        return !(l == r);
    }

    struct GetPickInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetPickInfoResponse";
        }
        static string MD5()
        {
            return "6564a4120a498402d9ca415c79e50698";
        }
        GetPickInfoResponse()
        :errCode(0),leftPickCount(0),pickIconUrl("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            leftPickCount = 0;
            pickIconUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(leftPickCount, 1);
            _os.write(pickIconUrl, 2);
            _os.write(action, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(leftPickCount, 1, false);
            _is.read(pickIconUrl, 2, false);
            _is.read(action, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(leftPickCount,"leftPickCount");
            _ds.display(pickIconUrl,"pickIconUrl");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(leftPickCount, true);
            _ds.displaySimple(pickIconUrl, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 leftPickCount;
        std::string pickIconUrl;
        jce::Action action;
    };
    inline bool operator==(const GetPickInfoResponse&l, const GetPickInfoResponse&r)
    {
        return l.errCode == r.errCode && l.leftPickCount == r.leftPickCount && l.pickIconUrl == r.pickIconUrl && l.action == r.action;
    }
    inline bool operator!=(const GetPickInfoResponse&l, const GetPickInfoResponse&r)
    {
        return !(l == r);
    }

    struct GetPickTaskInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetPickTaskInfoRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        GetPickTaskInfoRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const GetPickTaskInfoRequest&l, const GetPickTaskInfoRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const GetPickTaskInfoRequest&l, const GetPickTaskInfoRequest&r)
    {
        return !(l == r);
    }

    struct GetPickTaskInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetPickTaskInfoResponse";
        }
        static string MD5()
        {
            return "7f2a8e5fcbf7c735f6f3c3d4c9b5b7a5";
        }
        GetPickTaskInfoResponse()
        :errCode(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(taskList, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(taskList, 1, false);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(taskList,"taskList");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(taskList, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::PickTaskItem> taskList;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const GetPickTaskInfoResponse&l, const GetPickTaskInfoResponse&r)
    {
        return l.errCode == r.errCode && l.taskList == r.taskList && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const GetPickTaskInfoResponse&l, const GetPickTaskInfoResponse&r)
    {
        return !(l == r);
    }

    struct DoPickTaskRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DoPickTaskRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        DoPickTaskRequest()
        :dataKey(""),vid("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(vid, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(vid, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string vid;
    };
    inline bool operator==(const DoPickTaskRequest&l, const DoPickTaskRequest&r)
    {
        return l.dataKey == r.dataKey && l.vid == r.vid;
    }
    inline bool operator!=(const DoPickTaskRequest&l, const DoPickTaskRequest&r)
    {
        return !(l == r);
    }

    struct DoPickTaskResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DoPickTaskResponse";
        }
        static string MD5()
        {
            return "5776fd7103fcea055637c7e8b9708bb0";
        }
        DoPickTaskResponse()
        :errCode(0),tip(""),addCount(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            tip = "";
            addCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(tip, 1);
            _os.write(addCount, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(tip, 1, true);
            _is.read(addCount, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(tip,"tip");
            _ds.display(addCount,"addCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(tip, true);
            _ds.displaySimple(addCount, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string tip;
        taf::Int32 addCount;
    };
    inline bool operator==(const DoPickTaskResponse&l, const DoPickTaskResponse&r)
    {
        return l.errCode == r.errCode && l.tip == r.tip && l.addCount == r.addCount;
    }
    inline bool operator!=(const DoPickTaskResponse&l, const DoPickTaskResponse&r)
    {
        return !(l == r);
    }

    struct SubmitPickRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SubmitPickRequest";
        }
        static string MD5()
        {
            return "76d54bea80731d58aa96cf1bc08352d0";
        }
        SubmitPickRequest()
        :dataKey(""),vid(""),pickedNum(0),accessToken(""),uid(""),captchaContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            vid = "";
            pickedNum = 0;
            accessToken = "";
            uid = "";
            captchaContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(vid, 1);
            _os.write(pickedNum, 2);
            _os.write(accessToken, 3);
            _os.write(uid, 4);
            _os.write(captchaContext, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(vid, 1, true);
            _is.read(pickedNum, 2, true);
            _is.read(accessToken, 3, false);
            _is.read(uid, 4, false);
            _is.read(captchaContext, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(vid,"vid");
            _ds.display(pickedNum,"pickedNum");
            _ds.display(accessToken,"accessToken");
            _ds.display(uid,"uid");
            _ds.display(captchaContext,"captchaContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(pickedNum, true);
            _ds.displaySimple(accessToken, true);
            _ds.displaySimple(uid, true);
            _ds.displaySimple(captchaContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string vid;
        taf::Int32 pickedNum;
        std::string accessToken;
        std::string uid;
        std::string captchaContext;
    };
    inline bool operator==(const SubmitPickRequest&l, const SubmitPickRequest&r)
    {
        return l.dataKey == r.dataKey && l.vid == r.vid && l.pickedNum == r.pickedNum && l.accessToken == r.accessToken && l.uid == r.uid && l.captchaContext == r.captchaContext;
    }
    inline bool operator!=(const SubmitPickRequest&l, const SubmitPickRequest&r)
    {
        return !(l == r);
    }

    struct SubmitPickResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SubmitPickResponse";
        }
        static string MD5()
        {
            return "3dd21e5f3546a1d075dd924e57a85a17";
        }
        SubmitPickResponse()
        :errCode(0),leftPickCount(0),errMsg(""),captchaContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            leftPickCount = 0;
            errMsg = "";
            captchaContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(leftPickCount, 1);
            _os.write(errMsg, 2);
            _os.write(captchaContext, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(leftPickCount, 1, true);
            _is.read(errMsg, 2, false);
            _is.read(captchaContext, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(leftPickCount,"leftPickCount");
            _ds.display(errMsg,"errMsg");
            _ds.display(captchaContext,"captchaContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(leftPickCount, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(captchaContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 leftPickCount;
        std::string errMsg;
        std::string captchaContext;
    };
    inline bool operator==(const SubmitPickResponse&l, const SubmitPickResponse&r)
    {
        return l.errCode == r.errCode && l.leftPickCount == r.leftPickCount && l.errMsg == r.errMsg && l.captchaContext == r.captchaContext;
    }
    inline bool operator!=(const SubmitPickResponse&l, const SubmitPickResponse&r)
    {
        return !(l == r);
    }

    struct GetPromotionAppDetailRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetPromotionAppDetailRequest";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        GetPromotionAppDetailRequest()
        :promotionAppKey(""),vid(""),cid(""),lid("")
        {
        }
        void resetDefautlt()
        {
            promotionAppKey = "";
            vid = "";
            cid = "";
            lid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(promotionAppKey, 0);
            _os.write(vid, 1);
            _os.write(cid, 2);
            _os.write(lid, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(promotionAppKey, 0, true);
            _is.read(vid, 1, false);
            _is.read(cid, 2, false);
            _is.read(lid, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(promotionAppKey,"promotionAppKey");
            _ds.display(vid,"vid");
            _ds.display(cid,"cid");
            _ds.display(lid,"lid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(promotionAppKey, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(lid, false);
            return _os;
        }
    public:
        std::string promotionAppKey;
        std::string vid;
        std::string cid;
        std::string lid;
    };
    inline bool operator==(const GetPromotionAppDetailRequest&l, const GetPromotionAppDetailRequest&r)
    {
        return l.promotionAppKey == r.promotionAppKey && l.vid == r.vid && l.cid == r.cid && l.lid == r.lid;
    }
    inline bool operator!=(const GetPromotionAppDetailRequest&l, const GetPromotionAppDetailRequest&r)
    {
        return !(l == r);
    }

    struct GetPromotionAppDetailResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetPromotionAppDetailResponse";
        }
        static string MD5()
        {
            return "a23aec849c42dc0db485ad36d7768095";
        }
        GetPromotionAppDetailResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(appDetail, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(appDetail, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(appDetail,"appDetail");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(appDetail, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::PromotionAppDetail appDetail;
    };
    inline bool operator==(const GetPromotionAppDetailResponse&l, const GetPromotionAppDetailResponse&r)
    {
        return l.errCode == r.errCode && l.appDetail == r.appDetail;
    }
    inline bool operator!=(const GetPromotionAppDetailResponse&l, const GetPromotionAppDetailResponse&r)
    {
        return !(l == r);
    }

    struct DetailVideoEndRecommendV2Request : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DetailVideoEndRecommendV2Request";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        DetailVideoEndRecommendV2Request()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const DetailVideoEndRecommendV2Request&l, const DetailVideoEndRecommendV2Request&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const DetailVideoEndRecommendV2Request&l, const DetailVideoEndRecommendV2Request&r)
    {
        return !(l == r);
    }

    struct DetailVideoEndRecommendV2Response : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DetailVideoEndRecommendV2Response";
        }
        static string MD5()
        {
            return "39054ccbf269d99008a07b9e3eb92847";
        }
        DetailVideoEndRecommendV2Response()
        :errCode(0),pageContext(""),hasNextPage(true),uiType(0),videoType(0),hasPresent(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            uiType = 0;
            videoType = 0;
            hasPresent = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pageContext, 1);
            _os.write(coverList, 2);
            _os.write(hasNextPage, 3);
            _os.write(uiType, 4);
            _os.write(videoType, 5);
            _os.write(hasPresent, 6);
            _os.write(promotionAppDetail, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pageContext, 1, false);
            _is.read(coverList, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(uiType, 4, false);
            _is.read(videoType, 5, false);
            _is.read(hasPresent, 6, false);
            _is.read(promotionAppDetail, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pageContext,"pageContext");
            _ds.display(coverList,"coverList");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(uiType,"uiType");
            _ds.display(videoType,"videoType");
            _ds.display(hasPresent,"hasPresent");
            _ds.display(promotionAppDetail,"promotionAppDetail");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(coverList, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(videoType, true);
            _ds.displaySimple(hasPresent, true);
            _ds.displaySimple(promotionAppDetail, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string pageContext;
        vector<jce::CoverItemData> coverList;
        taf::Bool hasNextPage;
        taf::Int32 uiType;
        taf::Int32 videoType;
        taf::Int32 hasPresent;
        jce::PromotionAppDetail promotionAppDetail;
    };
    inline bool operator==(const DetailVideoEndRecommendV2Response&l, const DetailVideoEndRecommendV2Response&r)
    {
        return l.errCode == r.errCode && l.pageContext == r.pageContext && l.coverList == r.coverList && l.hasNextPage == r.hasNextPage && l.uiType == r.uiType && l.videoType == r.videoType && l.hasPresent == r.hasPresent && l.promotionAppDetail == r.promotionAppDetail;
    }
    inline bool operator!=(const DetailVideoEndRecommendV2Response&l, const DetailVideoEndRecommendV2Response&r)
    {
        return !(l == r);
    }

    struct GetPosterShareConfigRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetPosterShareConfigRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        GetPosterShareConfigRequest()
        :cid(""),vid("")
        {
        }
        void resetDefautlt()
        {
            cid = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cid, 0);
            _os.write(vid, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cid, 0, false);
            _is.read(vid, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string cid;
        std::string vid;
    };
    inline bool operator==(const GetPosterShareConfigRequest&l, const GetPosterShareConfigRequest&r)
    {
        return l.cid == r.cid && l.vid == r.vid;
    }
    inline bool operator!=(const GetPosterShareConfigRequest&l, const GetPosterShareConfigRequest&r)
    {
        return !(l == r);
    }

    struct GetPosterShareConfigResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetPosterShareConfigResponse";
        }
        static string MD5()
        {
            return "a81b50828f753afd7b1deeff4e6d40f3";
        }
        GetPosterShareConfigResponse()
        :errCode(0),hasConfig(false),posterImgUrl(""),shareUrl("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasConfig = false;
            posterImgUrl = "";
            shareUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(hasConfig, 1);
            _os.write(posterImgUrl, 2);
            _os.write(captionList, 3);
            _os.write(shareUrl, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(hasConfig, 1, false);
            _is.read(posterImgUrl, 2, false);
            _is.read(captionList, 3, false);
            _is.read(shareUrl, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(hasConfig,"hasConfig");
            _ds.display(posterImgUrl,"posterImgUrl");
            _ds.display(captionList,"captionList");
            _ds.display(shareUrl,"shareUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(hasConfig, true);
            _ds.displaySimple(posterImgUrl, true);
            _ds.displaySimple(captionList, true);
            _ds.displaySimple(shareUrl, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Bool hasConfig;
        std::string posterImgUrl;
        vector<std::string> captionList;
        std::string shareUrl;
    };
    inline bool operator==(const GetPosterShareConfigResponse&l, const GetPosterShareConfigResponse&r)
    {
        return l.errCode == r.errCode && l.hasConfig == r.hasConfig && l.posterImgUrl == r.posterImgUrl && l.captionList == r.captionList && l.shareUrl == r.shareUrl;
    }
    inline bool operator!=(const GetPosterShareConfigResponse&l, const GetPosterShareConfigResponse&r)
    {
        return !(l == r);
    }

    struct UserProfileUploadRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserProfileUploadRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        UserProfileUploadRequest()
        :avatarUrl(""),nickName(""),introduction("")
        {
        }
        void resetDefautlt()
        {
            avatarUrl = "";
            nickName = "";
            introduction = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(avatarUrl, 0);
            _os.write(nickName, 1);
            _os.write(introduction, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(avatarUrl, 0, false);
            _is.read(nickName, 1, false);
            _is.read(introduction, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(avatarUrl,"avatarUrl");
            _ds.display(nickName,"nickName");
            _ds.display(introduction,"introduction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(avatarUrl, true);
            _ds.displaySimple(nickName, true);
            _ds.displaySimple(introduction, false);
            return _os;
        }
    public:
        std::string avatarUrl;
        std::string nickName;
        std::string introduction;
    };
    inline bool operator==(const UserProfileUploadRequest&l, const UserProfileUploadRequest&r)
    {
        return l.avatarUrl == r.avatarUrl && l.nickName == r.nickName && l.introduction == r.introduction;
    }
    inline bool operator!=(const UserProfileUploadRequest&l, const UserProfileUploadRequest&r)
    {
        return !(l == r);
    }

    struct UserProfileUploadResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserProfileUploadResponse";
        }
        static string MD5()
        {
            return "9bcfaf911c12a5a140566442a651b4bf";
        }
        UserProfileUploadResponse()
        :errCode(0),errTips(""),status(0),statusTips("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errTips = "";
            status = 0;
            statusTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errTips, 1);
            _os.write(status, 2);
            _os.write(statusTips, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errTips, 1, false);
            _is.read(status, 2, false);
            _is.read(statusTips, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errTips,"errTips");
            _ds.display(status,"status");
            _ds.display(statusTips,"statusTips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errTips, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(statusTips, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errTips;
        taf::Int32 status;
        std::string statusTips;
    };
    inline bool operator==(const UserProfileUploadResponse&l, const UserProfileUploadResponse&r)
    {
        return l.errCode == r.errCode && l.errTips == r.errTips && l.status == r.status && l.statusTips == r.statusTips;
    }
    inline bool operator!=(const UserProfileUploadResponse&l, const UserProfileUploadResponse&r)
    {
        return !(l == r);
    }

    struct UserProfilePageRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserProfilePageRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        UserProfilePageRequest()
        :dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string dataKey;
    };
    inline bool operator==(const UserProfilePageRequest&l, const UserProfilePageRequest&r)
    {
        return l.dataKey == r.dataKey;
    }
    inline bool operator!=(const UserProfilePageRequest&l, const UserProfilePageRequest&r)
    {
        return !(l == r);
    }

    struct UserProfilePageResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserProfilePageResponse";
        }
        static string MD5()
        {
            return "ed6cf077317aff8098933a10621c5592";
        }
        UserProfilePageResponse()
        :errCode(0),status(0),topTips(""),avatarUrl(""),nikeName(""),introduction("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            status = 0;
            topTips = "";
            avatarUrl = "";
            nikeName = "";
            introduction = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(status, 1);
            _os.write(topTips, 2);
            _os.write(avatarUrl, 3);
            _os.write(nikeName, 4);
            _os.write(introduction, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(status, 1, false);
            _is.read(topTips, 2, false);
            _is.read(avatarUrl, 3, false);
            _is.read(nikeName, 4, false);
            _is.read(introduction, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(status,"status");
            _ds.display(topTips,"topTips");
            _ds.display(avatarUrl,"avatarUrl");
            _ds.display(nikeName,"nikeName");
            _ds.display(introduction,"introduction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(topTips, true);
            _ds.displaySimple(avatarUrl, true);
            _ds.displaySimple(nikeName, true);
            _ds.displaySimple(introduction, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 status;
        std::string topTips;
        std::string avatarUrl;
        std::string nikeName;
        std::string introduction;
    };
    inline bool operator==(const UserProfilePageResponse&l, const UserProfilePageResponse&r)
    {
        return l.errCode == r.errCode && l.status == r.status && l.topTips == r.topTips && l.avatarUrl == r.avatarUrl && l.nikeName == r.nikeName && l.introduction == r.introduction;
    }
    inline bool operator!=(const UserProfilePageResponse&l, const UserProfilePageResponse&r)
    {
        return !(l == r);
    }

    struct RelatedRecommendImgPageRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RelatedRecommendImgPageRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        RelatedRecommendImgPageRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const RelatedRecommendImgPageRequest&l, const RelatedRecommendImgPageRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const RelatedRecommendImgPageRequest&l, const RelatedRecommendImgPageRequest&r)
    {
        return !(l == r);
    }

    struct RelatedRecommendImgPageResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RelatedRecommendImgPageResponse";
        }
        static string MD5()
        {
            return "ad84605aa73491ad1d4df9f463d573b5";
        }
        RelatedRecommendImgPageResponse()
        :errCode(0),pageContext(""),hasNextPage(true),title("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiData, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(title, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiData, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(title, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiData,"uiData");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiData, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::TempletLine> uiData;
        std::string pageContext;
        taf::Bool hasNextPage;
        std::string title;
    };
    inline bool operator==(const RelatedRecommendImgPageResponse&l, const RelatedRecommendImgPageResponse&r)
    {
        return l.errCode == r.errCode && l.uiData == r.uiData && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.title == r.title;
    }
    inline bool operator!=(const RelatedRecommendImgPageResponse&l, const RelatedRecommendImgPageResponse&r)
    {
        return !(l == r);
    }


}

#define jce_ChannelListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.version,b.version);jce_copy_struct(a.type,b.type);jce_copy_struct(a.personalFlag,b.personalFlag);jce_copy_struct(a.personalListCreateTime,b.personalListCreateTime);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.userSortType,b.userSortType);

#define jce_ChannelListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.version,b.version);jce_copy_struct(a.list,b.list);jce_copy_struct(a.personalizeData,b.personalizeData);jce_copy_struct(a.serverSortType,b.serverSortType);jce_copy_struct(a.categoryList,b.categoryList);jce_copy_struct(a.areaType,b.areaType);jce_copy_struct(a.defaultChannelId,b.defaultChannelId);jce_copy_struct(a.navBucketId,b.navBucketId);jce_copy_struct(a.action,b.action);

#define jce_ChannelDataRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.channelItemId,b.channelItemId);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.refreshContext,b.refreshContext);jce_copy_struct(a.filtertype,b.filtertype);jce_copy_struct(a.hasCache,b.hasCache);jce_copy_struct(a.lastGroupId,b.lastGroupId);jce_copy_struct(a.hotWordTimeStamp,b.hotWordTimeStamp);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.refreshType,b.refreshType);jce_copy_struct(a.channelSubKey,b.channelSubKey);jce_copy_struct(a.insertPosterKey,b.insertPosterKey);jce_copy_struct(a.dataKeyList,b.dataKeyList);jce_copy_struct(a.loadTypeForRec,b.loadTypeForRec);jce_copy_struct(a.userSortType,b.userSortType);jce_copy_struct(a.adContextList,b.adContextList);jce_copy_struct(a.channelMode,b.channelMode);jce_copy_struct(a.searchDataKey,b.searchDataKey);jce_copy_struct(a.displayScene,b.displayScene);jce_copy_struct(a.adRequestInfo,b.adRequestInfo);jce_copy_struct(a.sdkRequestInfo,b.sdkRequestInfo);jce_copy_struct(a.subDataKey,b.subDataKey);jce_copy_struct(a.isPageVisible,b.isPageVisible);

#define jce_ChannelDataResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.data,b.data);jce_copy_struct(a.refreshContext,b.refreshContext);jce_copy_struct(a.refreshWording,b.refreshWording);jce_copy_struct(a.optType,b.optType);jce_copy_struct(a.refreshType,b.refreshType);jce_copy_struct(a.hotWordInfo,b.hotWordInfo);jce_copy_struct(a.dataType,b.dataType);jce_copy_struct(a.showLastReadPositionFlag,b.showLastReadPositionFlag);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.timeOut,b.timeOut);jce_copy_struct(a.autoPlayIndex,b.autoPlayIndex);jce_copy_struct(a.eventItem,b.eventItem);jce_copy_struct(a.adContext,b.adContext);jce_copy_struct(a.promotionInfo,b.promotionInfo);jce_copy_struct(a.channnelExtraInfo,b.channnelExtraInfo);jce_copy_struct(a.channelInsertItem,b.channelInsertItem);jce_copy_struct(a.flowLayoutType,b.flowLayoutType);

#define jce_DetailFeedFlowRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.refreshContext,b.refreshContext);jce_copy_struct(a.filtertype,b.filtertype);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.adContextList,b.adContextList);jce_copy_struct(a.adRequestInfo,b.adRequestInfo);

#define jce_DetailFeedFlowResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.data,b.data);jce_copy_struct(a.refreshContext,b.refreshContext);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.adContext,b.adContext);jce_copy_struct(a.adChannelId,b.adChannelId);

#define jce_VideoDetailsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.historyVid,b.historyVid);jce_copy_struct(a.expansion,b.expansion);jce_copy_struct(a.outWebId,b.outWebId);jce_copy_struct(a.sessionId,b.sessionId);jce_copy_struct(a.adContextList,b.adContextList);jce_copy_struct(a.adRequestInfo,b.adRequestInfo);

#define jce_VideoDetailsExtraInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.shouldShowEyeProtectedBanner,b.shouldShowEyeProtectedBanner);

#define jce_VideoDetailsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.videoDataMap,b.videoDataMap);jce_copy_struct(a.coverDataMap,b.coverDataMap);jce_copy_struct(a.introductionMap,b.introductionMap);jce_copy_struct(a.defaultVideoDataKey,b.defaultVideoDataKey);jce_copy_struct(a.defaultCoverDataKey,b.defaultCoverDataKey);jce_copy_struct(a.outWebList,b.outWebList);jce_copy_struct(a.actorDataMap,b.actorDataMap);jce_copy_struct(a.outWebToastList,b.outWebToastList);jce_copy_struct(a.videoCoverMap,b.videoCoverMap);jce_copy_struct(a.detailMoreInfo,b.detailMoreInfo);jce_copy_struct(a.expansion,b.expansion);jce_copy_struct(a.forceVideoDataKey,b.forceVideoDataKey);jce_copy_struct(a.sequentPlayKeys,b.sequentPlayKeys);jce_copy_struct(a.feedFlowDataKey,b.feedFlowDataKey);jce_copy_struct(a.markScoreDesc,b.markScoreDesc);jce_copy_struct(a.pageType,b.pageType);jce_copy_struct(a.multiLanguageInfo,b.multiLanguageInfo);jce_copy_struct(a.navigationMap,b.navigationMap);jce_copy_struct(a.detailsFlowDataKey,b.detailsFlowDataKey);jce_copy_struct(a.extraInfo,b.extraInfo);

#define jce_VideoListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.channelId,b.channelId);jce_copy_struct(a.filterValue,b.filterValue);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.filtertype,b.filtertype);jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_VideoListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.posterList,b.posterList);jce_copy_struct(a.filter,b.filter);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.filterList,b.filterList);

#define jce_GetCommentListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commentKey,b.commentKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.filterKey,b.filterKey);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.pageFlag,b.pageFlag);jce_copy_struct(a.lastId,b.lastId);jce_copy_struct(a.scene,b.scene);jce_copy_struct(a.mode,b.mode);

#define jce_GetCommentListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.commentCount,b.commentCount);jce_copy_struct(a.commentList,b.commentList);jce_copy_struct(a.hotCommentList,b.hotCommentList);jce_copy_struct(a.noticeList,b.noticeList);

#define jce_PostCommentRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commentKey,b.commentKey);jce_copy_struct(a.postType,b.postType);jce_copy_struct(a.reportType,b.reportType);jce_copy_struct(a.content,b.content);jce_copy_struct(a.commentId,b.commentId);jce_copy_struct(a.voteId,b.voteId);jce_copy_struct(a.voteSubjectId,b.voteSubjectId);jce_copy_struct(a.voteOptionId,b.voteOptionId);jce_copy_struct(a.lbsInfo,b.lbsInfo);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.starInfo,b.starInfo);jce_copy_struct(a.voiceData,b.voiceData);jce_copy_struct(a.liveStatus,b.liveStatus);jce_copy_struct(a.tabId,b.tabId);

#define jce_PostCommentResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.commentList,b.commentList);

#define jce_GetVideoAttentListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataVersion,b.dataVersion);

#define jce_GetVideoAttentListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.dataVersion,b.dataVersion);jce_copy_struct(a.updateFlag,b.updateFlag);jce_copy_struct(a.total,b.total);jce_copy_struct(a.VideoAttentInfoList,b.VideoAttentInfoList);

#define jce_VideoAttentOptionRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.attentKeyList,b.attentKeyList);jce_copy_struct(a.option,b.option);jce_copy_struct(a.iosTokenId,b.iosTokenId);

#define jce_VideoAttentOptionResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.attentItemList,b.attentItemList);

#define jce_NewAttentOptionRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.option,b.option);jce_copy_struct(a.attentKeyList,b.attentKeyList);

#define jce_NewAttentOptionResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.attentItemList,b.attentItemList);

#define jce_NewQueryAttentStateRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.attentKeyList,b.attentKeyList);

#define jce_NewQueryAttentStateResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.attentItemList,b.attentItemList);

#define jce_NewGetAttentListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lastDataVersion,b.lastDataVersion);

#define jce_NewGetAttentListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.dataVersion,b.dataVersion);jce_copy_struct(a.updateFlag,b.updateFlag);jce_copy_struct(a.attentItemList,b.attentItemList);jce_copy_struct(a.total,b.total);

#define jce_DetailVideoListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.dataType,b.dataType);jce_copy_struct(a.vid,b.vid);

#define jce_DetailVideoListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.videoList,b.videoList);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.detailMoreInfo,b.detailMoreInfo);jce_copy_struct(a.title,b.title);jce_copy_struct(a.introductionMap,b.introductionMap);jce_copy_struct(a.moreAction,b.moreAction);jce_copy_struct(a.uiType,b.uiType);

#define jce_DetailCoverListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.dataType,b.dataType);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.lid,b.lid);

#define jce_DetailCoverListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.coverList,b.coverList);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.uiType,b.uiType);

#define jce_WatchRecordListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.dataVersion,b.dataVersion);

#define jce_WatchRecordListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.recordList,b.recordList);jce_copy_struct(a.dataVersion,b.dataVersion);

#define jce_WatchRecordUploadRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uploadList,b.uploadList);

#define jce_WatchRecordUploadResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.recordList,b.recordList);

#define jce_WatchRecordDeleteRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.recordIdList,b.recordIdList);jce_copy_struct(a.isDeleteAll,b.isDeleteAll);

#define jce_WatchRecordDeleteResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_GetCacheListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.definition,b.definition);jce_copy_struct(a.requestType,b.requestType);jce_copy_struct(a.cacheDataKey,b.cacheDataKey);jce_copy_struct(a.direction,b.direction);jce_copy_struct(a.maxGridCount,b.maxGridCount);jce_copy_struct(a.extraMap,b.extraMap);

#define jce_GetCacheListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.cacheList,b.cacheList);jce_copy_struct(a.name,b.name);jce_copy_struct(a.downloadRightName,b.downloadRightName);jce_copy_struct(a.definitionList,b.definitionList);jce_copy_struct(a.definition,b.definition);jce_copy_struct(a.preText,b.preText);jce_copy_struct(a.previousPageContext,b.previousPageContext);jce_copy_struct(a.hasPreviousPage,b.hasPreviousPage);jce_copy_struct(a.needMultipleChoice,b.needMultipleChoice);jce_copy_struct(a.needPreCheckDownloadCopyRight,b.needPreCheckDownloadCopyRight);jce_copy_struct(a.vipDownloadRightConfig,b.vipDownloadRightConfig);jce_copy_struct(a.needLoginFirst,b.needLoginFirst);

#define jce_GetPreCacheItemListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.request,b.request);

#define jce_GetPreCacheItemListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.cacheList,b.cacheList);

#define jce_CheckHasPreCacheItemRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cid,b.cid);

#define jce_CheckHasPreCacheItemResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.hasPreCacheItem,b.hasPreCacheItem);jce_copy_struct(a.preTips,b.preTips);

#define jce_SearchRankRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.channdlId,b.channdlId);jce_copy_struct(a.searchDatakey,b.searchDatakey);jce_copy_struct(a.adRequestInfo,b.adRequestInfo);jce_copy_struct(a.sdkRequestInfo,b.sdkRequestInfo);jce_copy_struct(a.isPageContextEmpty,b.isPageContextEmpty);jce_copy_struct(a.isRefreshContextEmpty,b.isRefreshContextEmpty);jce_copy_struct(a.searchHistoryKeyWords,b.searchHistoryKeyWords);

#define jce_SearchRankResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.groupTitle,b.groupTitle);jce_copy_struct(a.timeStamp,b.timeStamp);jce_copy_struct(a.adPoster,b.adPoster);jce_copy_struct(a.rankNavList,b.rankNavList);jce_copy_struct(a.adTitleInfo,b.adTitleInfo);jce_copy_struct(a.data,b.data);jce_copy_struct(a.hotWordInfo,b.hotWordInfo);jce_copy_struct(a.rankNavSelectColor,b.rankNavSelectColor);

#define jce_SearchSmartRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.keyWord,b.keyWord);jce_copy_struct(a.channelId,b.channelId);jce_copy_struct(a.searchDatakey,b.searchDatakey);

#define jce_SearchSmartResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.smartItemList,b.smartItemList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_SearchRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.keyWord,b.keyWord);jce_copy_struct(a.channelId,b.channelId);jce_copy_struct(a.filterValue,b.filterValue);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.searchSession,b.searchSession);jce_copy_struct(a.expansion,b.expansion);jce_copy_struct(a.isNeedCorrect,b.isNeedCorrect);jce_copy_struct(a.searchDatakey,b.searchDatakey);jce_copy_struct(a.adRequestInfo,b.adRequestInfo);jce_copy_struct(a.sdkRequestInfo,b.sdkRequestInfo);

#define jce_SearchResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.filter,b.filter);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.searchSession,b.searchSession);jce_copy_struct(a.isHaveNextPage,b.isHaveNextPage);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.matchResult,b.matchResult);jce_copy_struct(a.subUIData,b.subUIData);jce_copy_struct(a.promotionEventInfo,b.promotionEventInfo);

#define jce_OperationPageRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.payAID,b.payAID);jce_copy_struct(a.derection,b.derection);

#define jce_OperationPageResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isHaveNextPage,b.isHaveNextPage);jce_copy_struct(a.title,b.title);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.actionType,b.actionType);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.apkInfo,b.apkInfo);jce_copy_struct(a.pageUiType,b.pageUiType);jce_copy_struct(a.titleBarImage,b.titleBarImage);jce_copy_struct(a.targetPos,b.targetPos);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.timeOut,b.timeOut);jce_copy_struct(a.pullDownType,b.pullDownType);jce_copy_struct(a.prePageContext,b.prePageContext);jce_copy_struct(a.isHavePrePage,b.isHavePrePage);jce_copy_struct(a.moreAction,b.moreAction);

#define jce_NavOperatePageRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_NavOperatePageResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.moduleList,b.moduleList);jce_copy_struct(a.title,b.title);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.actionType,b.actionType);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.apkInfo,b.apkInfo);jce_copy_struct(a.moreAction,b.moreAction);jce_copy_struct(a.showEditModelList,b.showEditModelList);jce_copy_struct(a.titleOnEdit,b.titleOnEdit);jce_copy_struct(a.labelMyChannelOnEdit,b.labelMyChannelOnEdit);jce_copy_struct(a.labelOtherChannelOnEdit,b.labelOtherChannelOnEdit);jce_copy_struct(a.labelNoMoreTips,b.labelNoMoreTips);

#define jce_MyCommentListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_MyCommentListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_StarNewsListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starNewsDataKey,b.starNewsDataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_StarNewsListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_FanNewsListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starFansDataKey,b.starFansDataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_FanNewsListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_StarHomeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actorId,b.actorId);

#define jce_StarHomeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.actorInfo,b.actorInfo);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.starNewsDataKey,b.starNewsDataKey);jce_copy_struct(a.coverDataMap,b.coverDataMap);jce_copy_struct(a.actorDataMap,b.actorDataMap);jce_copy_struct(a.starFansDataKey,b.starFansDataKey);

#define jce_PersonalizeVideoListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageSize,b.pageSize);jce_copy_struct(a.msgtype,b.msgtype);jce_copy_struct(a.itemList,b.itemList);

#define jce_PersonalizeVideoListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.updateTimePointList,b.updateTimePointList);jce_copy_struct(a.wordingMap,b.wordingMap);

#define jce_PersonalizeVideoReportRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.id,b.id);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_PersonalizeVideoReportResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_DiscoveryTabRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.flag,b.flag);

#define jce_DiscoveryTabResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.itemList,b.itemList);

#define jce_PostVoteRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.voteKey,b.voteKey);

#define jce_PostVoteResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.voteData,b.voteData);

#define jce_GetVoteRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.voteKey,b.voteKey);

#define jce_GetVoteResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.voteData,b.voteData);

#define jce_VideoTagRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.pr,b.pr);

#define jce_VideoTagResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.tagJson,b.tagJson);

#define jce_DynamicDataRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.referKey,b.referKey);

#define jce_DynamicDataResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isHaveNextPage,b.isHaveNextPage);

#define jce_BusinessVoteListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_BusinessVoteListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.voteList,b.voteList);jce_copy_struct(a.voteIcon,b.voteIcon);jce_copy_struct(a.voteLimit,b.voteLimit);jce_copy_struct(a.votedCount,b.votedCount);jce_copy_struct(a.bottleCount,b.bottleCount);jce_copy_struct(a.lines,b.lines);jce_copy_struct(a.apkInfo,b.apkInfo);jce_copy_struct(a.dialogs,b.dialogs);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isHaveNextPage,b.isHaveNextPage);jce_copy_struct(a.sharePageAction,b.sharePageAction);

#define jce_FollowTVRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.filterValue,b.filterValue);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_FollowTVResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.filter,b.filter);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.pageTitle,b.pageTitle);

#define jce_NACRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_NACResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.serverList,b.serverList);jce_copy_struct(a.serverListv6,b.serverListv6);jce_copy_struct(a.cliIPv6,b.cliIPv6);jce_copy_struct(a.netSpeedList,b.netSpeedList);

#define jce_NetSpeedDetectRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_NetDetectInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.speedData,b.speedData);

#define jce_NetSpeedDetectResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.detectInfo,b.detectInfo);

#define jce_FullScreenVideoDetailRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.dataSelector,b.dataSelector);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.pid,b.pid);

#define jce_FullScreenVideoDetailResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.videoItemType,b.videoItemType);jce_copy_struct(a.videoData,b.videoData);jce_copy_struct(a.attentData,b.attentData);jce_copy_struct(a.pastCoverData,b.pastCoverData);jce_copy_struct(a.recomCoverData,b.recomCoverData);jce_copy_struct(a.recomVideodata,b.recomVideodata);jce_copy_struct(a.cacheDataKey,b.cacheDataKey);

#define jce_QQLiveActionRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.openOriUrl,b.openOriUrl);jce_copy_struct(a.actionUrl,b.actionUrl);jce_copy_struct(a.source,b.source);

#define jce_QQLiveActionResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_DynamicItemRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataVersion,b.dataVersion);jce_copy_struct(a.imei,b.imei);jce_copy_struct(a.carrier,b.carrier);jce_copy_struct(a.context,b.context);

#define jce_DynamicItemResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.replaceItemList,b.replaceItemList);jce_copy_struct(a.context,b.context);

#define jce_CommonVideoListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_CommonVideoListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.videoList,b.videoList);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.hasPreviousPage,b.hasPreviousPage);jce_copy_struct(a.previousPageContext,b.previousPageContext);

#define jce_CommonCoverListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_CommonCoverListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.coverList,b.coverList);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_DislikeVideoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.optionIds,b.optionIds);

#define jce_DislikeVideoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_ChannelModPluginDataRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.scence,b.scence);jce_copy_struct(a.modId,b.modId);jce_copy_struct(a.channelItemId,b.channelItemId);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.historyVid,b.historyVid);jce_copy_struct(a.expansion,b.expansion);jce_copy_struct(a.outWebId,b.outWebId);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.cids,b.cids);jce_copy_struct(a.position,b.position);jce_copy_struct(a.rawdata,b.rawdata);jce_copy_struct(a.adContextList,b.adContextList);jce_copy_struct(a.adRequestInfo,b.adRequestInfo);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_ChannelModPluginDataResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.data,b.data);jce_copy_struct(a.videoDataMap,b.videoDataMap);jce_copy_struct(a.coverDataMap,b.coverDataMap);

#define jce_VideoListVideoInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.keyItems,b.keyItems);

#define jce_VideoListVideoInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.itemDatas,b.itemDatas);

#define jce_LiveSubscribeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_LiveSubscribeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.subscribes,b.subscribes);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_LiveRecommendRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_LiveRecommendResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.recommendInfos,b.recommendInfos);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_FilmTicketRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cid,b.cid);

#define jce_FilmTicketResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.isHaveTicket,b.isHaveTicket);jce_copy_struct(a.buyTicketItem,b.buyTicketItem);

#define jce_LiveInteractRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pid,b.pid);

#define jce_LiveInteractResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.poster,b.poster);jce_copy_struct(a.vodVideoData,b.vodVideoData);jce_copy_struct(a.liveVideoData,b.liveVideoData);jce_copy_struct(a.isLiveVideo,b.isLiveVideo);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.actors,b.actors);jce_copy_struct(a.likeNums,b.likeNums);jce_copy_struct(a.livePollKey,b.livePollKey);jce_copy_struct(a.starImageUrl,b.starImageUrl);jce_copy_struct(a.title,b.title);jce_copy_struct(a.liveStatus,b.liveStatus);jce_copy_struct(a.attentItem,b.attentItem);

#define jce_DetailVideoEndRecommendRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_DetailVideoEndRecommendResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.coverList,b.coverList);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.videoType,b.videoType);jce_copy_struct(a.hasPresent,b.hasPresent);jce_copy_struct(a.promotionAppDetail,b.promotionAppDetail);

#define jce_InteractPraisePostRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sId,b.sId);jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.iPraiseAdd,b.iPraiseAdd);

#define jce_InteractPraisePostResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.eCode,b.eCode);jce_copy_struct(a.eMsg,b.eMsg);jce_copy_struct(a.sId,b.sId);jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.lPraiseNum,b.lPraiseNum);

#define jce_InteractPraiseGetRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vIds,b.vIds);jce_copy_struct(a.bGetRelation,b.bGetRelation);

#define jce_InteractPraiseGetResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.eCode,b.eCode);jce_copy_struct(a.eMsg,b.eMsg);jce_copy_struct(a.vIdps,b.vIdps);

#define jce_InteractUserPraiseGetRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sUser,b.sUser);jce_copy_struct(a.iType,b.iType);

#define jce_InteractUserPraiseGetResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.eCode,b.eCode);jce_copy_struct(a.eMsg,b.eMsg);jce_copy_struct(a.sUser,b.sUser);jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.lPraiseNum,b.lPraiseNum);

#define jce_ServerFilterData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.filter,b.filter);jce_copy_struct(a.filterStategy,b.filterStategy);jce_copy_struct(a.mulFilter,b.mulFilter);

#define jce_ServerTempletItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.defaultData,b.defaultData);jce_copy_struct(a.route,b.route);jce_copy_struct(a.hideView,b.hideView);jce_copy_struct(a.pluginRequest,b.pluginRequest);jce_copy_struct(a.filterData,b.filterData);jce_copy_struct(a.uiData2,b.uiData2);jce_copy_struct(a.whiteListRuleId,b.whiteListRuleId);jce_copy_struct(a.mulData,b.mulData);

#define jce_AppUpdateRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.iOs,b.iOs);jce_copy_struct(a.strOsVersion,b.strOsVersion);jce_copy_struct(a.iPlatform,b.iPlatform);jce_copy_struct(a.strCpu,b.strCpu);jce_copy_struct(a.iAppPlatform,b.iAppPlatform);jce_copy_struct(a.strAppVersionName,b.strAppVersionName);jce_copy_struct(a.iAppVersionCode,b.iAppVersionCode);jce_copy_struct(a.iUpdaterVersion,b.iUpdaterVersion);jce_copy_struct(a.strMemorySize,b.strMemorySize);jce_copy_struct(a.strDeviceId,b.strDeviceId);jce_copy_struct(a.strQq,b.strQq);jce_copy_struct(a.strDeviceType,b.strDeviceType);jce_copy_struct(a.iCgiVersion,b.iCgiVersion);jce_copy_struct(a.strMarketId,b.strMarketId);jce_copy_struct(a.strGuid,b.strGuid);jce_copy_struct(a.iAppVerionBuild,b.iAppVerionBuild);jce_copy_struct(a.lUnixTime,b.lUnixTime);jce_copy_struct(a.strAppId,b.strAppId);jce_copy_struct(a.strIp,b.strIp);jce_copy_struct(a.iH5Version,b.iH5Version);jce_copy_struct(a.iIsJailBreakDevice,b.iIsJailBreakDevice);jce_copy_struct(a.iDebug,b.iDebug);jce_copy_struct(a.iInnerReq,b.iInnerReq);jce_copy_struct(a.strOriIp,b.strOriIp);

#define jce_AppUpdateResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.iRetCode,b.iRetCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.iUpdateType,b.iUpdateType);jce_copy_struct(a.iDownloadPolicy,b.iDownloadPolicy);jce_copy_struct(a.strPackageUri,b.strPackageUri);jce_copy_struct(a.strAppVersionName,b.strAppVersionName);jce_copy_struct(a.iVersionCode,b.iVersionCode);jce_copy_struct(a.strPackageHash,b.strPackageHash);jce_copy_struct(a.iNotificationInterval,b.iNotificationInterval);jce_copy_struct(a.strAppVersionDesc,b.strAppVersionDesc);jce_copy_struct(a.iDownloadSpeedLimit,b.iDownloadSpeedLimit);jce_copy_struct(a.iInExperience,b.iInExperience);jce_copy_struct(a.llUnixTime,b.llUnixTime);jce_copy_struct(a.iIsShow,b.iIsShow);jce_copy_struct(a.iIsUseYingYongBao,b.iIsUseYingYongBao);jce_copy_struct(a.iIsDownloadYingYongBao,b.iIsDownloadYingYongBao);jce_copy_struct(a.iIsActivateYingYongBao,b.iIsActivateYingYongBao);jce_copy_struct(a.iIsShowRedDot,b.iIsShowRedDot);jce_copy_struct(a.iHasNewVersion,b.iHasNewVersion);jce_copy_struct(a.iUpdateCount,b.iUpdateCount);jce_copy_struct(a.strGrayUpdateUrl,b.strGrayUpdateUrl);jce_copy_struct(a.strJailbreakUpdateUrl,b.strJailbreakUpdateUrl);

#define jce_VideoDefinitionActionRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);

#define jce_VideoDefinitionActionResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.definitionMap,b.definitionMap);

#define jce_ShareItemDetailRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.scene,b.scene);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_ShareItemDetailResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.shareItem,b.shareItem);

#define jce_UploadCustomizeChannelListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.channelList,b.channelList);

#define jce_UploadCustomizeChannelListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_UploadUnicomPseudoCodeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.deviceInfo,b.deviceInfo);jce_copy_struct(a.pseudoCode,b.pseudoCode);jce_copy_struct(a.carrier,b.carrier);jce_copy_struct(a.delUserMob,b.delUserMob);

#define jce_UploadUnicomPseudoCodeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.carrier,b.carrier);

#define jce_GetUnicomPseudoCodeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.deviceInfo,b.deviceInfo);jce_copy_struct(a.carrier,b.carrier);

#define jce_GetUnicomPseudoCodeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pseudoCode,b.pseudoCode);jce_copy_struct(a.carrier,b.carrier);

#define jce_GetCarrierUserOrderRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.carrier,b.carrier);jce_copy_struct(a.userPseudoCode,b.userPseudoCode);jce_copy_struct(a.imsi,b.imsi);

#define jce_GetCarrierUserOrderResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.state,b.state);jce_copy_struct(a.serviceTime,b.serviceTime);jce_copy_struct(a.orderTime,b.orderTime);jce_copy_struct(a.cancelTime,b.cancelTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.subType,b.subType);jce_copy_struct(a.flowTime,b.flowTime);jce_copy_struct(a.flowByte,b.flowByte);jce_copy_struct(a.carrier,b.carrier);jce_copy_struct(a.hollywoodStatus,b.hollywoodStatus);jce_copy_struct(a.userPhone,b.userPhone);jce_copy_struct(a.flowRunOut,b.flowRunOut);

#define jce_GetCarrierIPRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.unused,b.unused);

#define jce_GetCarrierIPResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.carrier,b.carrier);jce_copy_struct(a.ip,b.ip);

#define jce_GetCarrierSignRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.carrier,b.carrier);jce_copy_struct(a.originStr,b.originStr);

#define jce_GetCarrierSignResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.sign,b.sign);

#define jce_GetNewLineRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_GetNewLineResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.data,b.data);

#define jce_StagePhotoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cid,b.cid);

#define jce_StagePhotoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.stagePhotos,b.stagePhotos);

#define jce_LiveReportReasonRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strPid,b.strPid);jce_copy_struct(a.strVideoId,b.strVideoId);jce_copy_struct(a.ddwAnchorUin,b.ddwAnchorUin);jce_copy_struct(a.strNickName,b.strNickName);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.ddwTipOffTime,b.ddwTipOffTime);jce_copy_struct(a.vecTipOffReason,b.vecTipOffReason);jce_copy_struct(a.streamId,b.streamId);jce_copy_struct(a.dwAnchorType,b.dwAnchorType);

#define jce_LiveReportReasonResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strPid,b.strPid);

#define jce_SelectedSchoolRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.selectedSchoolId,b.selectedSchoolId);

#define jce_SelectedSchoolResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_HomeTabListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.version,b.version);

#define jce_HomeTabListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.homeTabList,b.homeTabList);jce_copy_struct(a.version,b.version);

#define jce_VideoIntroDetailRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);

#define jce_VideoIntroDetailResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);

#define jce_FeedDetailVideoListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.recommendVid,b.recommendVid);jce_copy_struct(a.historyVid,b.historyVid);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isLoadAllData,b.isLoadAllData);

#define jce_FeedDetailVideoListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.videoList,b.videoList);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.extraInfoFlag,b.extraInfoFlag);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.moduleTitle,b.moduleTitle);

#define jce_GetCaptionRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.captionKey,b.captionKey);jce_copy_struct(a.time,b.time);jce_copy_struct(a.totalTime,b.totalTime);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);

#define jce_GetCaptionResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.captionList,b.captionList);jce_copy_struct(a.title,b.title);jce_copy_struct(a.captionTopHeightPercent,b.captionTopHeightPercent);

#define jce_CaptionCorrectRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.captionKey,b.captionKey);jce_copy_struct(a.captionList,b.captionList);

#define jce_CaptionCorrectResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_ChannelGetNewLineRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKeyList,b.dataKeyList);

#define jce_ChannelGetNewLineResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.data,b.data);

#define jce_GameSubscibeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_GameSubscibeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.data,b.data);

#define jce_SyncTaskRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iTaskId,b.iTaskId);jce_copy_struct(a.strExt,b.strExt);jce_copy_struct(a.iExt,b.iExt);jce_copy_struct(a.taskType,b.taskType);

#define jce_SyncTaskResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iRetCode,b.iRetCode);jce_copy_struct(a.strMsg,b.strMsg);jce_copy_struct(a.strExt,b.strExt);

#define jce_jceHttpRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strRequestID,b.strRequestID);jce_copy_struct(a.strRequest,b.strRequest);jce_copy_struct(a.strHttpHead,b.strHttpHead);

#define jce_jceHttpResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strRequestID,b.strRequestID);jce_copy_struct(a.strResponse,b.strResponse);jce_copy_struct(a.strHttpHead,b.strHttpHead);jce_copy_struct(a.iErrCode,b.iErrCode);

#define jce_HasReadMsgRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.tabId,b.tabId);

#define jce_HasReadMsgResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_GetRelatedQueryRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.query,b.query);jce_copy_struct(a.num,b.num);jce_copy_struct(a.mdsumVideo,b.mdsumVideo);jce_copy_struct(a.id,b.id);jce_copy_struct(a.dataType,b.dataType);jce_copy_struct(a.appid,b.appid);jce_copy_struct(a.appkey,b.appkey);

#define jce_GetRelatedQueryResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.data,b.data);

#define jce_TVShowWeeklyListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.datakey,b.datakey);

#define jce_TVShowWeeklyListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.posterList,b.posterList);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);

#define jce_CommonSearchRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.searchKey,b.searchKey);jce_copy_struct(a.type,b.type);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_CommonSearchResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_CommonSearchSmartBoxRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.keyWord,b.keyWord);jce_copy_struct(a.type,b.type);

#define jce_CommonSearchSmartBoxResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_DokiCombineListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_DokiCombineListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_DetailsFlowDataRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.recmdInfo,b.recmdInfo);jce_copy_struct(a.vid,b.vid);

#define jce_DetailsFlowDataResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.reportContext,b.reportContext);jce_copy_struct(a.recmdInfo,b.recmdInfo);jce_copy_struct(a.coralSummaryInfo,b.coralSummaryInfo);

#define jce_GetQueryAppListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_GetQueryAppListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.data,b.data);

#define jce_ChannelInsertFeedbackRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.info,b.info);jce_copy_struct(a.type,b.type);

#define jce_ChannelInsertFeedbackResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_GetApkInstallConfigRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.mobileBrand,b.mobileBrand);jce_copy_struct(a.sysRomVer,b.sysRomVer);jce_copy_struct(a.installApkVer,b.installApkVer);

#define jce_GetApkInstallConfigResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strategyCtlBit,b.strategyCtlBit);jce_copy_struct(a.fakePackageName,b.fakePackageName);

#define jce_SubFloatingONAPageRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.datakey,b.datakey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_SubFloatingONAPageResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.isHaveNextPage,b.isHaveNextPage);

#define jce_ImmersiveListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.adContext,b.adContext);jce_copy_struct(a.adContextList,b.adContextList);jce_copy_struct(a.reportData,b.reportData);

#define jce_ImmersiveListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.adContext,b.adContext);jce_copy_struct(a.adContextList,b.adContextList);

#define jce_UserRelationshipItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.actorList,b.actorList);jce_copy_struct(a.extraInfo,b.extraInfo);

#define jce_UserRelationshipRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKeyList,b.dataKeyList);

#define jce_UserRelationshipResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.relationDict,b.relationDict);

#define jce_RssVerticalVideoONAViewsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_RssVerticalVideoONAViewsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_GetCloudBucketConfigRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bucketID,b.bucketID);jce_copy_struct(a.version,b.version);

#define jce_GetCloudBucketConfigResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.version,b.version);jce_copy_struct(a.configSetting,b.configSetting);jce_copy_struct(a.configData,b.configData);

#define jce_GetYooFollowListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataVersion,b.dataVersion);

#define jce_GetYooFollowListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.dataVersion,b.dataVersion);jce_copy_struct(a.total,b.total);jce_copy_struct(a.yooFollowList,b.yooFollowList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_JsonBusinessRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.requestJson,b.requestJson);

#define jce_JsonBusinessResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.responseJson,b.responseJson);

#define jce_DetailRecommendBannerRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);

#define jce_DetailRecommendBannerResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.bammerView,b.bammerView);

#define jce_PreDownloadApkListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_PreDownloadApkListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.list,b.list);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_GetVoiceSearchRecommendWordsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.channelId,b.channelId);jce_copy_struct(a.searchDataKey,b.searchDataKey);jce_copy_struct(a.debugMod,b.debugMod);

#define jce_GetVoiceSearchRecommendWordsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.recommendWords,b.recommendWords);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.debugLog,b.debugLog);

#define jce_LoadThirdApkListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_LoadThirdApkListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.list,b.list);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_GetPickInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_GetPickInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.leftPickCount,b.leftPickCount);jce_copy_struct(a.pickIconUrl,b.pickIconUrl);jce_copy_struct(a.action,b.action);

#define jce_GetPickTaskInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_GetPickTaskInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.taskList,b.taskList);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_DoPickTaskRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.vid,b.vid);

#define jce_DoPickTaskResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.tip,b.tip);jce_copy_struct(a.addCount,b.addCount);

#define jce_SubmitPickRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.pickedNum,b.pickedNum);jce_copy_struct(a.accessToken,b.accessToken);jce_copy_struct(a.uid,b.uid);jce_copy_struct(a.captchaContext,b.captchaContext);

#define jce_SubmitPickResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.leftPickCount,b.leftPickCount);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.captchaContext,b.captchaContext);

#define jce_GetPromotionAppDetailRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.promotionAppKey,b.promotionAppKey);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.lid,b.lid);

#define jce_GetPromotionAppDetailResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.appDetail,b.appDetail);

#define jce_DetailVideoEndRecommendV2Request_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_DetailVideoEndRecommendV2Response_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.coverList,b.coverList);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.videoType,b.videoType);jce_copy_struct(a.hasPresent,b.hasPresent);jce_copy_struct(a.promotionAppDetail,b.promotionAppDetail);

#define jce_GetPosterShareConfigRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);

#define jce_GetPosterShareConfigResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.hasConfig,b.hasConfig);jce_copy_struct(a.posterImgUrl,b.posterImgUrl);jce_copy_struct(a.captionList,b.captionList);jce_copy_struct(a.shareUrl,b.shareUrl);

#define jce_UserProfileUploadRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.avatarUrl,b.avatarUrl);jce_copy_struct(a.nickName,b.nickName);jce_copy_struct(a.introduction,b.introduction);

#define jce_UserProfileUploadResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errTips,b.errTips);jce_copy_struct(a.status,b.status);jce_copy_struct(a.statusTips,b.statusTips);

#define jce_UserProfilePageRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);

#define jce_UserProfilePageResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.status,b.status);jce_copy_struct(a.topTips,b.topTips);jce_copy_struct(a.avatarUrl,b.avatarUrl);jce_copy_struct(a.nikeName,b.nikeName);jce_copy_struct(a.introduction,b.introduction);

#define jce_RelatedRecommendImgPageRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_RelatedRecommendImgPageResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiData,b.uiData);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.title,b.title);



#endif
