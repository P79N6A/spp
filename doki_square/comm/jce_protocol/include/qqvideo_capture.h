// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_capture.jce'
// **********************************************************************

#ifndef __QQVIDEO_CAPTURE_H_
#define __QQVIDEO_CAPTURE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"


namespace jce
{
    struct CaptureContextConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CaptureContextConfig";
        }
        static string MD5()
        {
            return "fe3b74a9bc8fe9b14c77c67ae5e1918a";
        }
        CaptureContextConfig()
        :minRecordTime(0),maxRecordTime(0),maxLocalVideoSize(0)
        {
        }
        void resetDefautlt()
        {
            minRecordTime = 0;
            maxRecordTime = 0;
            maxLocalVideoSize = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(minRecordTime, 0);
            _os.write(maxRecordTime, 1);
            _os.write(maxLocalVideoSize, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(minRecordTime, 0, true);
            _is.read(maxRecordTime, 1, true);
            _is.read(maxLocalVideoSize, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(minRecordTime,"minRecordTime");
            _ds.display(maxRecordTime,"maxRecordTime");
            _ds.display(maxLocalVideoSize,"maxLocalVideoSize");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(minRecordTime, true);
            _ds.displaySimple(maxRecordTime, true);
            _ds.displaySimple(maxLocalVideoSize, false);
            return _os;
        }
    public:
        taf::Int32 minRecordTime;
        taf::Int32 maxRecordTime;
        taf::Int32 maxLocalVideoSize;
    };
    inline bool operator==(const CaptureContextConfig&l, const CaptureContextConfig&r)
    {
        return l.minRecordTime == r.minRecordTime && l.maxRecordTime == r.maxRecordTime && l.maxLocalVideoSize == r.maxLocalVideoSize;
    }
    inline bool operator!=(const CaptureContextConfig&l, const CaptureContextConfig&r)
    {
        return !(l == r);
    }

    struct CaptureStrategy : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CaptureStrategy";
        }
        static string MD5()
        {
            return "120f3655a79fe57de264be3a6bfd2d1d";
        }
        CaptureStrategy()
        :strategyId(0)
        {
        }
        void resetDefautlt()
        {
            strategyId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strategyId, 0);
            _os.write(featureFactorMap, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strategyId, 0, true);
            _is.read(featureFactorMap, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strategyId,"strategyId");
            _ds.display(featureFactorMap,"featureFactorMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strategyId, true);
            _ds.displaySimple(featureFactorMap, false);
            return _os;
        }
    public:
        taf::Int32 strategyId;
        map<std::string, std::string> featureFactorMap;
    };
    inline bool operator==(const CaptureStrategy&l, const CaptureStrategy&r)
    {
        return l.strategyId == r.strategyId && l.featureFactorMap == r.featureFactorMap;
    }
    inline bool operator!=(const CaptureStrategy&l, const CaptureStrategy&r)
    {
        return !(l == r);
    }

    struct CaptureProgram : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CaptureProgram";
        }
        static string MD5()
        {
            return "6c01718fb6317cfb99bd143a97be875c";
        }
        CaptureProgram()
        :programId("")
        {
        }
        void resetDefautlt()
        {
            programId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(programId, 0);
            _os.write(strategyList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(programId, 0, true);
            _is.read(strategyList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(programId,"programId");
            _ds.display(strategyList,"strategyList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(programId, true);
            _ds.displaySimple(strategyList, false);
            return _os;
        }
    public:
        std::string programId;
        vector<jce::CaptureStrategy> strategyList;
    };
    inline bool operator==(const CaptureProgram&l, const CaptureProgram&r)
    {
        return l.programId == r.programId && l.strategyList == r.strategyList;
    }
    inline bool operator!=(const CaptureProgram&l, const CaptureProgram&r)
    {
        return !(l == r);
    }

    struct CaptureBeautifyConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CaptureBeautifyConfig";
        }
        static string MD5()
        {
            return "9a7ff1b6f61fdc0b7de0647088e31a96";
        }
        CaptureBeautifyConfig()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(programList, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(programList, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(programList,"programList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(programList, false);
            return _os;
        }
    public:
        vector<jce::CaptureProgram> programList;
    };
    inline bool operator==(const CaptureBeautifyConfig&l, const CaptureBeautifyConfig&r)
    {
        return l.programList == r.programList;
    }
    inline bool operator!=(const CaptureBeautifyConfig&l, const CaptureBeautifyConfig&r)
    {
        return !(l == r);
    }

    struct CaptureConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CaptureConfig";
        }
        static string MD5()
        {
            return "b39698366804ef1f0c196b2fd763d6ff";
        }
        CaptureConfig()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(contextConfig, 0);
            _os.write(beautifyConfig, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(contextConfig, 0, true);
            _is.read(beautifyConfig, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(contextConfig,"contextConfig");
            _ds.display(beautifyConfig,"beautifyConfig");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(contextConfig, true);
            _ds.displaySimple(beautifyConfig, false);
            return _os;
        }
    public:
        jce::CaptureContextConfig contextConfig;
        jce::CaptureBeautifyConfig beautifyConfig;
    };
    inline bool operator==(const CaptureConfig&l, const CaptureConfig&r)
    {
        return l.contextConfig == r.contextConfig && l.beautifyConfig == r.beautifyConfig;
    }
    inline bool operator!=(const CaptureConfig&l, const CaptureConfig&r)
    {
        return !(l == r);
    }

    struct GetCaptureConfigRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCaptureConfigRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        GetCaptureConfigRequest()
        :flag(0)
        {
        }
        void resetDefautlt()
        {
            flag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(flag, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(flag, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(flag,"flag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(flag, false);
            return _os;
        }
    public:
        taf::Int32 flag;
    };
    inline bool operator==(const GetCaptureConfigRequest&l, const GetCaptureConfigRequest&r)
    {
        return l.flag == r.flag;
    }
    inline bool operator!=(const GetCaptureConfigRequest&l, const GetCaptureConfigRequest&r)
    {
        return !(l == r);
    }

    struct GetCaptureConfigResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetCaptureConfigResponse";
        }
        static string MD5()
        {
            return "1fa7ca623f3dc970b1ce06d24e4aeb04";
        }
        GetCaptureConfigResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(captureConfig, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(captureConfig, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(captureConfig,"captureConfig");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(captureConfig, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::CaptureConfig captureConfig;
    };
    inline bool operator==(const GetCaptureConfigResponse&l, const GetCaptureConfigResponse&r)
    {
        return l.errCode == r.errCode && l.captureConfig == r.captureConfig;
    }
    inline bool operator!=(const GetCaptureConfigResponse&l, const GetCaptureConfigResponse&r)
    {
        return !(l == r);
    }

    struct MediaTabInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MediaTabInfo";
        }
        static string MD5()
        {
            return "93a3c1e1924bcf87b1cce4da92d3035a";
        }
        MediaTabInfo()
        :title(""),dataKey(""),isSelected(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            dataKey = "";
            isSelected = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(dataKey, 1);
            _os.write(isSelected, 2);
            _os.write(reportKey, 3);
            _os.write(reportParams, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(dataKey, 1, true);
            _is.read(isSelected, 2, false);
            _is.read(reportKey, 3, false);
            _is.read(reportParams, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(dataKey,"dataKey");
            _ds.display(isSelected,"isSelected");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(isSelected, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string title;
        std::string dataKey;
        taf::Char isSelected;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const MediaTabInfo&l, const MediaTabInfo&r)
    {
        return l.title == r.title && l.dataKey == r.dataKey && l.isSelected == r.isSelected && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const MediaTabInfo&l, const MediaTabInfo&r)
    {
        return !(l == r);
    }

    struct MediaTabInfoListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MediaTabInfoListRequest";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        MediaTabInfoListRequest()
        :dateKey(""),type(0)
        {
        }
        void resetDefautlt()
        {
            dateKey = "";
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dateKey, 0);
            _os.write(type, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dateKey, 0, true);
            _is.read(type, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dateKey,"dateKey");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dateKey, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        std::string dateKey;
        taf::Int32 type;
    };
    inline bool operator==(const MediaTabInfoListRequest&l, const MediaTabInfoListRequest&r)
    {
        return l.dateKey == r.dateKey && l.type == r.type;
    }
    inline bool operator!=(const MediaTabInfoListRequest&l, const MediaTabInfoListRequest&r)
    {
        return !(l == r);
    }

    struct MediaTabInfoListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MediaTabInfoListResponse";
        }
        static string MD5()
        {
            return "eb95a53ba616b318c1a9d735062b7ac6";
        }
        MediaTabInfoListResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(tabList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(tabList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(tabList,"tabList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(tabList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::MediaTabInfo> tabList;
    };
    inline bool operator==(const MediaTabInfoListResponse&l, const MediaTabInfoListResponse&r)
    {
        return l.errCode == r.errCode && l.tabList == r.tabList;
    }
    inline bool operator!=(const MediaTabInfoListResponse&l, const MediaTabInfoListResponse&r)
    {
        return !(l == r);
    }

    struct MediaListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MediaListRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        MediaListRequest()
        :dataKey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string pageContext;
    };
    inline bool operator==(const MediaListRequest&l, const MediaListRequest&r)
    {
        return l.dataKey == r.dataKey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const MediaListRequest&l, const MediaListRequest&r)
    {
        return !(l == r);
    }

    struct MediaListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MediaListResponse";
        }
        static string MD5()
        {
            return "81b56dd243433154fa9b24c4ce15205e";
        }
        MediaListResponse()
        :errCode(0),uiType(0),pageContext(""),hasNextPage(true),dataVersion(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            uiType = 0;
            pageContext = "";
            hasNextPage = true;
            dataVersion = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(uiType, 1);
            _os.write(itemList, 2);
            _os.write(pageContext, 3);
            _os.write(hasNextPage, 4);
            _os.write(dataVersion, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(uiType, 1, true);
            _is.read(itemList, 2, true);
            _is.read(pageContext, 3, false);
            _is.read(hasNextPage, 4, false);
            _is.read(dataVersion, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(uiType,"uiType");
            _ds.display(itemList,"itemList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(dataVersion,"dataVersion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(uiType, true);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(dataVersion, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 uiType;
        vector<jce::MediaItem> itemList;
        std::string pageContext;
        taf::Bool hasNextPage;
        taf::Int64 dataVersion;
    };
    inline bool operator==(const MediaListResponse&l, const MediaListResponse&r)
    {
        return l.errCode == r.errCode && l.uiType == r.uiType && l.itemList == r.itemList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.dataVersion == r.dataVersion;
    }
    inline bool operator!=(const MediaListResponse&l, const MediaListResponse&r)
    {
        return !(l == r);
    }

    struct PendantTableInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PendantTableInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        PendantTableInfo()
        :title(""),datakey("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            datakey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(datakey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(datakey, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(datakey,"datakey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(datakey, false);
            return _os;
        }
    public:
        std::string title;
        std::string datakey;
    };
    inline bool operator==(const PendantTableInfo&l, const PendantTableInfo&r)
    {
        return l.title == r.title && l.datakey == r.datakey;
    }
    inline bool operator!=(const PendantTableInfo&l, const PendantTableInfo&r)
    {
        return !(l == r);
    }

    struct PendantTableRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PendantTableRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        PendantTableRequest()
        :flag(0)
        {
        }
        void resetDefautlt()
        {
            flag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(flag, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(flag, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(flag,"flag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(flag, false);
            return _os;
        }
    public:
        taf::Int32 flag;
    };
    inline bool operator==(const PendantTableRequest&l, const PendantTableRequest&r)
    {
        return l.flag == r.flag;
    }
    inline bool operator!=(const PendantTableRequest&l, const PendantTableRequest&r)
    {
        return !(l == r);
    }

    struct PendantTableResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PendantTableResponse";
        }
        static string MD5()
        {
            return "4efc2d6fe6301c7832f4b1446106c038";
        }
        PendantTableResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(tabList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(tabList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(tabList,"tabList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(tabList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::PendantTableInfo> tabList;
    };
    inline bool operator==(const PendantTableResponse&l, const PendantTableResponse&r)
    {
        return l.errCode == r.errCode && l.tabList == r.tabList;
    }
    inline bool operator!=(const PendantTableResponse&l, const PendantTableResponse&r)
    {
        return !(l == r);
    }

    struct PendantDetail : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PendantDetail";
        }
        static string MD5()
        {
            return "31b91ed4435b9cf981597d520bd10313";
        }
        PendantDetail()
        :pendantId(""),name(""),downloadurl(""),imageurl(""),filterId(""),desc(""),hasMusic(true),md5("")
        {
        }
        void resetDefautlt()
        {
            pendantId = "";
            name = "";
            downloadurl = "";
            imageurl = "";
            filterId = "";
            desc = "";
            hasMusic = true;
            md5 = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pendantId, 0);
            _os.write(name, 1);
            _os.write(downloadurl, 2);
            _os.write(imageurl, 3);
            _os.write(filterId, 4);
            _os.write(desc, 5);
            _os.write(hasMusic, 6);
            _os.write(md5, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pendantId, 0, true);
            _is.read(name, 1, true);
            _is.read(downloadurl, 2, true);
            _is.read(imageurl, 3, false);
            _is.read(filterId, 4, false);
            _is.read(desc, 5, false);
            _is.read(hasMusic, 6, false);
            _is.read(md5, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pendantId,"pendantId");
            _ds.display(name,"name");
            _ds.display(downloadurl,"downloadurl");
            _ds.display(imageurl,"imageurl");
            _ds.display(filterId,"filterId");
            _ds.display(desc,"desc");
            _ds.display(hasMusic,"hasMusic");
            _ds.display(md5,"md5");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pendantId, true);
            _ds.displaySimple(name, true);
            _ds.displaySimple(downloadurl, true);
            _ds.displaySimple(imageurl, true);
            _ds.displaySimple(filterId, true);
            _ds.displaySimple(desc, true);
            _ds.displaySimple(hasMusic, true);
            _ds.displaySimple(md5, false);
            return _os;
        }
    public:
        std::string pendantId;
        std::string name;
        std::string downloadurl;
        std::string imageurl;
        std::string filterId;
        std::string desc;
        taf::Bool hasMusic;
        std::string md5;
    };
    inline bool operator==(const PendantDetail&l, const PendantDetail&r)
    {
        return l.pendantId == r.pendantId && l.name == r.name && l.downloadurl == r.downloadurl && l.imageurl == r.imageurl && l.filterId == r.filterId && l.desc == r.desc && l.hasMusic == r.hasMusic && l.md5 == r.md5;
    }
    inline bool operator!=(const PendantDetail&l, const PendantDetail&r)
    {
        return !(l == r);
    }

    struct PendantListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PendantListRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        PendantListRequest()
        :datakey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            datakey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(datakey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(datakey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(datakey,"datakey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(datakey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string datakey;
        std::string pageContext;
    };
    inline bool operator==(const PendantListRequest&l, const PendantListRequest&r)
    {
        return l.datakey == r.datakey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const PendantListRequest&l, const PendantListRequest&r)
    {
        return !(l == r);
    }

    struct PendantListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PendantListResponse";
        }
        static string MD5()
        {
            return "ba2e5d25a6ad41f00c9cdf9dc2938de6";
        }
        PendantListResponse()
        :errCode(0),pageContext(""),hasNextPage(true),dataVersion(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            dataVersion = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(itemList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(dataVersion, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(itemList, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(dataVersion, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(itemList,"itemList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(dataVersion,"dataVersion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(dataVersion, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::PendantDetail> itemList;
        std::string pageContext;
        taf::Bool hasNextPage;
        taf::Int64 dataVersion;
    };
    inline bool operator==(const PendantListResponse&l, const PendantListResponse&r)
    {
        return l.errCode == r.errCode && l.itemList == r.itemList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.dataVersion == r.dataVersion;
    }
    inline bool operator!=(const PendantListResponse&l, const PendantListResponse&r)
    {
        return !(l == r);
    }

    struct FilterTabItemInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FilterTabItemInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        FilterTabItemInfo()
        :title(""),datakey("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            datakey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(datakey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(datakey, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(datakey,"datakey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(datakey, false);
            return _os;
        }
    public:
        std::string title;
        std::string datakey;
    };
    inline bool operator==(const FilterTabItemInfo&l, const FilterTabItemInfo&r)
    {
        return l.title == r.title && l.datakey == r.datakey;
    }
    inline bool operator!=(const FilterTabItemInfo&l, const FilterTabItemInfo&r)
    {
        return !(l == r);
    }

    struct FilterTabListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FilterTabListRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        FilterTabListRequest()
        :flag(0)
        {
        }
        void resetDefautlt()
        {
            flag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(flag, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(flag, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(flag,"flag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(flag, false);
            return _os;
        }
    public:
        taf::Int32 flag;
    };
    inline bool operator==(const FilterTabListRequest&l, const FilterTabListRequest&r)
    {
        return l.flag == r.flag;
    }
    inline bool operator!=(const FilterTabListRequest&l, const FilterTabListRequest&r)
    {
        return !(l == r);
    }

    struct FilterTabListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FilterTabListResponse";
        }
        static string MD5()
        {
            return "d345b730bf1ae269a3b655b7c5eb47c2";
        }
        FilterTabListResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(tabList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(tabList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(tabList,"tabList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(tabList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::FilterTabItemInfo> tabList;
    };
    inline bool operator==(const FilterTabListResponse&l, const FilterTabListResponse&r)
    {
        return l.errCode == r.errCode && l.tabList == r.tabList;
    }
    inline bool operator!=(const FilterTabListResponse&l, const FilterTabListResponse&r)
    {
        return !(l == r);
    }

    struct FilterItemDetail : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FilterItemDetail";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        FilterItemDetail()
        :filterId(""),name(""),downloadurl(""),imageurl(""),md5("")
        {
        }
        void resetDefautlt()
        {
            filterId = "";
            name = "";
            downloadurl = "";
            imageurl = "";
            md5 = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(filterId, 0);
            _os.write(name, 1);
            _os.write(downloadurl, 2);
            _os.write(imageurl, 3);
            _os.write(md5, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(filterId, 0, true);
            _is.read(name, 1, true);
            _is.read(downloadurl, 2, true);
            _is.read(imageurl, 3, false);
            _is.read(md5, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(filterId,"filterId");
            _ds.display(name,"name");
            _ds.display(downloadurl,"downloadurl");
            _ds.display(imageurl,"imageurl");
            _ds.display(md5,"md5");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(filterId, true);
            _ds.displaySimple(name, true);
            _ds.displaySimple(downloadurl, true);
            _ds.displaySimple(imageurl, true);
            _ds.displaySimple(md5, false);
            return _os;
        }
    public:
        std::string filterId;
        std::string name;
        std::string downloadurl;
        std::string imageurl;
        std::string md5;
    };
    inline bool operator==(const FilterItemDetail&l, const FilterItemDetail&r)
    {
        return l.filterId == r.filterId && l.name == r.name && l.downloadurl == r.downloadurl && l.imageurl == r.imageurl && l.md5 == r.md5;
    }
    inline bool operator!=(const FilterItemDetail&l, const FilterItemDetail&r)
    {
        return !(l == r);
    }

    struct FilterItemListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FilterItemListRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        FilterItemListRequest()
        :datakey(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            datakey = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(datakey, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(datakey, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(datakey,"datakey");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(datakey, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string datakey;
        std::string pageContext;
    };
    inline bool operator==(const FilterItemListRequest&l, const FilterItemListRequest&r)
    {
        return l.datakey == r.datakey && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const FilterItemListRequest&l, const FilterItemListRequest&r)
    {
        return !(l == r);
    }

    struct FilterItemListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.FilterItemListResponse";
        }
        static string MD5()
        {
            return "3371b23760569e273aee6e794440abe8";
        }
        FilterItemListResponse()
        :errCode(0),pageContext(""),hasNextPage(true),dataVersion(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
            dataVersion = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(itemList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
            _os.write(dataVersion, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(itemList, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
            _is.read(dataVersion, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(itemList,"itemList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(dataVersion,"dataVersion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(itemList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(dataVersion, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::FilterItemDetail> itemList;
        std::string pageContext;
        taf::Bool hasNextPage;
        taf::Int64 dataVersion;
    };
    inline bool operator==(const FilterItemListResponse&l, const FilterItemListResponse&r)
    {
        return l.errCode == r.errCode && l.itemList == r.itemList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.dataVersion == r.dataVersion;
    }
    inline bool operator!=(const FilterItemListResponse&l, const FilterItemListResponse&r)
    {
        return !(l == r);
    }

    struct CaptureReddotRequestItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CaptureReddotRequestItem";
        }
        static string MD5()
        {
            return "cb4558a7d1cbd8cbf583df7337cc71f1";
        }
        CaptureReddotRequestItem()
        :businessName(""),dataversion(0)
        {
        }
        void resetDefautlt()
        {
            businessName = "";
            dataversion = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(businessName, 0);
            _os.write(dataversion, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(businessName, 0, true);
            _is.read(dataversion, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(businessName,"businessName");
            _ds.display(dataversion,"dataversion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(businessName, true);
            _ds.displaySimple(dataversion, false);
            return _os;
        }
    public:
        std::string businessName;
        taf::Int64 dataversion;
    };
    inline bool operator==(const CaptureReddotRequestItem&l, const CaptureReddotRequestItem&r)
    {
        return l.businessName == r.businessName && l.dataversion == r.dataversion;
    }
    inline bool operator!=(const CaptureReddotRequestItem&l, const CaptureReddotRequestItem&r)
    {
        return !(l == r);
    }

    struct CaptureReddotResponseItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CaptureReddotResponseItem";
        }
        static string MD5()
        {
            return "0596794c42e11886af3890b43ba2b7c6";
        }
        CaptureReddotResponseItem()
        :businessName(""),isUpdate(true),updateImage("")
        {
        }
        void resetDefautlt()
        {
            businessName = "";
            isUpdate = true;
            updateImage = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(businessName, 0);
            _os.write(isUpdate, 1);
            _os.write(updateImage, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(businessName, 0, true);
            _is.read(isUpdate, 1, true);
            _is.read(updateImage, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(businessName,"businessName");
            _ds.display(isUpdate,"isUpdate");
            _ds.display(updateImage,"updateImage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(businessName, true);
            _ds.displaySimple(isUpdate, true);
            _ds.displaySimple(updateImage, false);
            return _os;
        }
    public:
        std::string businessName;
        taf::Bool isUpdate;
        std::string updateImage;
    };
    inline bool operator==(const CaptureReddotResponseItem&l, const CaptureReddotResponseItem&r)
    {
        return l.businessName == r.businessName && l.isUpdate == r.isUpdate && l.updateImage == r.updateImage;
    }
    inline bool operator!=(const CaptureReddotResponseItem&l, const CaptureReddotResponseItem&r)
    {
        return !(l == r);
    }

    struct CaptureReddotRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CaptureReddotRequest";
        }
        static string MD5()
        {
            return "16e82275a9b4877e5f88ae60d70dfe90";
        }
        CaptureReddotRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(requestItems, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(requestItems, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(requestItems,"requestItems");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(requestItems, false);
            return _os;
        }
    public:
        vector<jce::CaptureReddotRequestItem> requestItems;
    };
    inline bool operator==(const CaptureReddotRequest&l, const CaptureReddotRequest&r)
    {
        return l.requestItems == r.requestItems;
    }
    inline bool operator!=(const CaptureReddotRequest&l, const CaptureReddotRequest&r)
    {
        return !(l == r);
    }

    struct CaptureReddotResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CaptureReddotResponse";
        }
        static string MD5()
        {
            return "253d7753b4059b3a0ff82946641d019b";
        }
        CaptureReddotResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(responseItems, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(responseItems, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(responseItems,"responseItems");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(responseItems, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::CaptureReddotResponseItem> responseItems;
    };
    inline bool operator==(const CaptureReddotResponse&l, const CaptureReddotResponse&r)
    {
        return l.errCode == r.errCode && l.responseItems == r.responseItems;
    }
    inline bool operator!=(const CaptureReddotResponse&l, const CaptureReddotResponse&r)
    {
        return !(l == r);
    }

    struct GetGpsAddressRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetGpsAddressRequest";
        }
        static string MD5()
        {
            return "acc55f4e07e19b93b168ad31a73cedc7";
        }
        GetGpsAddressRequest()
        :longitude(0),latitude(0),keyword(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            longitude = 0;
            latitude = 0;
            keyword = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(longitude, 0);
            _os.write(latitude, 1);
            _os.write(keyword, 2);
            _os.write(pageContext, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(longitude, 0, true);
            _is.read(latitude, 1, true);
            _is.read(keyword, 2, false);
            _is.read(pageContext, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(longitude,"longitude");
            _ds.display(latitude,"latitude");
            _ds.display(keyword,"keyword");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(longitude, true);
            _ds.displaySimple(latitude, true);
            _ds.displaySimple(keyword, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Double longitude;
        taf::Double latitude;
        std::string keyword;
        std::string pageContext;
    };
    inline bool operator==(const GetGpsAddressRequest&l, const GetGpsAddressRequest&r)
    {
        return l.longitude == r.longitude && l.latitude == r.latitude && l.keyword == r.keyword && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetGpsAddressRequest&l, const GetGpsAddressRequest&r)
    {
        return !(l == r);
    }

    struct GetGpsAddressResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetGpsAddressResponse";
        }
        static string MD5()
        {
            return "e2bbe5a2741d99f215a5cb61ccf2cfeb";
        }
        GetGpsAddressResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(addressInfoList, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(addressInfoList, 1, true);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(addressInfoList,"addressInfoList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(addressInfoList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::GpsAddressInfo> addressInfoList;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const GetGpsAddressResponse&l, const GetGpsAddressResponse&r)
    {
        return l.errCode == r.errCode && l.addressInfoList == r.addressInfoList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const GetGpsAddressResponse&l, const GetGpsAddressResponse&r)
    {
        return !(l == r);
    }


}

#define jce_CaptureContextConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.minRecordTime,b.minRecordTime);jce_copy_struct(a.maxRecordTime,b.maxRecordTime);jce_copy_struct(a.maxLocalVideoSize,b.maxLocalVideoSize);

#define jce_CaptureStrategy_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strategyId,b.strategyId);jce_copy_struct(a.featureFactorMap,b.featureFactorMap);

#define jce_CaptureProgram_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.programId,b.programId);jce_copy_struct(a.strategyList,b.strategyList);

#define jce_CaptureBeautifyConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.programList,b.programList);

#define jce_CaptureConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.contextConfig,b.contextConfig);jce_copy_struct(a.beautifyConfig,b.beautifyConfig);

#define jce_GetCaptureConfigRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.flag,b.flag);

#define jce_GetCaptureConfigResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.captureConfig,b.captureConfig);

#define jce_MediaTabInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.isSelected,b.isSelected);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_MediaTabInfoListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dateKey,b.dateKey);jce_copy_struct(a.type,b.type);

#define jce_MediaTabInfoListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.tabList,b.tabList);

#define jce_MediaListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_MediaListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.uiType,b.uiType);jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.dataVersion,b.dataVersion);

#define jce_PendantTableInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.datakey,b.datakey);

#define jce_PendantTableRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.flag,b.flag);

#define jce_PendantTableResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.tabList,b.tabList);

#define jce_PendantDetail_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pendantId,b.pendantId);jce_copy_struct(a.name,b.name);jce_copy_struct(a.downloadurl,b.downloadurl);jce_copy_struct(a.imageurl,b.imageurl);jce_copy_struct(a.filterId,b.filterId);jce_copy_struct(a.desc,b.desc);jce_copy_struct(a.hasMusic,b.hasMusic);jce_copy_struct(a.md5,b.md5);

#define jce_PendantListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.datakey,b.datakey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_PendantListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.dataVersion,b.dataVersion);

#define jce_FilterTabItemInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.datakey,b.datakey);

#define jce_FilterTabListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.flag,b.flag);

#define jce_FilterTabListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.tabList,b.tabList);

#define jce_FilterItemDetail_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.filterId,b.filterId);jce_copy_struct(a.name,b.name);jce_copy_struct(a.downloadurl,b.downloadurl);jce_copy_struct(a.imageurl,b.imageurl);jce_copy_struct(a.md5,b.md5);

#define jce_FilterItemListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.datakey,b.datakey);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_FilterItemListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.itemList,b.itemList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.dataVersion,b.dataVersion);

#define jce_CaptureReddotRequestItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.businessName,b.businessName);jce_copy_struct(a.dataversion,b.dataversion);

#define jce_CaptureReddotResponseItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.businessName,b.businessName);jce_copy_struct(a.isUpdate,b.isUpdate);jce_copy_struct(a.updateImage,b.updateImage);

#define jce_CaptureReddotRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.requestItems,b.requestItems);

#define jce_CaptureReddotResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.responseItems,b.responseItems);

#define jce_GetGpsAddressRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.longitude,b.longitude);jce_copy_struct(a.latitude,b.latitude);jce_copy_struct(a.keyword,b.keyword);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_GetGpsAddressResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.addressInfoList,b.addressInfoList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);



#endif
