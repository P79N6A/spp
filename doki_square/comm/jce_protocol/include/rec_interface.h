// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `rec_interface.jce'
// **********************************************************************

#ifndef __REC_INTERFACE_H_
#define __REC_INTERFACE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace RecCommonStruct
{
    enum RecItemType
    {
        ITEM_NONE = 0,
        ITEM_VIDEO = 1,
        ITEM_COVER = 2,
        ITEM_COLUMN = 3,
        ITEM_LIVE = 4,
        ITEM_ARTICLE = 5,
        ITEM_PLAYLIST = 6,
        ITEM_CMS = 9,
        ITEM_DB_VIDEO = 10,
        ITEM_DB_COVER = 11,
        ITEM_CMS_VID = 12,
        ITEM_CMS_CID = 13,
        ITEM_THUNDERMONKEY = 14,
    };
    inline string etos(const RecItemType & e)
    {
        switch(e)
        {
            case ITEM_NONE: return "ITEM_NONE";
            case ITEM_VIDEO: return "ITEM_VIDEO";
            case ITEM_COVER: return "ITEM_COVER";
            case ITEM_COLUMN: return "ITEM_COLUMN";
            case ITEM_LIVE: return "ITEM_LIVE";
            case ITEM_ARTICLE: return "ITEM_ARTICLE";
            case ITEM_PLAYLIST: return "ITEM_PLAYLIST";
            case ITEM_CMS: return "ITEM_CMS";
            case ITEM_DB_VIDEO: return "ITEM_DB_VIDEO";
            case ITEM_DB_COVER: return "ITEM_DB_COVER";
            case ITEM_CMS_VID: return "ITEM_CMS_VID";
            case ITEM_CMS_CID: return "ITEM_CMS_CID";
            case ITEM_THUNDERMONKEY: return "ITEM_THUNDERMONKEY";
            default: return "";
        }
    }
    inline int stoe(const string & s, RecItemType & e)
    {
        if(s == "ITEM_NONE")  { e=ITEM_NONE; return 0;}
        if(s == "ITEM_VIDEO")  { e=ITEM_VIDEO; return 0;}
        if(s == "ITEM_COVER")  { e=ITEM_COVER; return 0;}
        if(s == "ITEM_COLUMN")  { e=ITEM_COLUMN; return 0;}
        if(s == "ITEM_LIVE")  { e=ITEM_LIVE; return 0;}
        if(s == "ITEM_ARTICLE")  { e=ITEM_ARTICLE; return 0;}
        if(s == "ITEM_PLAYLIST")  { e=ITEM_PLAYLIST; return 0;}
        if(s == "ITEM_CMS")  { e=ITEM_CMS; return 0;}
        if(s == "ITEM_DB_VIDEO")  { e=ITEM_DB_VIDEO; return 0;}
        if(s == "ITEM_DB_COVER")  { e=ITEM_DB_COVER; return 0;}
        if(s == "ITEM_CMS_VID")  { e=ITEM_CMS_VID; return 0;}
        if(s == "ITEM_CMS_CID")  { e=ITEM_CMS_CID; return 0;}
        if(s == "ITEM_THUNDERMONKEY")  { e=ITEM_THUNDERMONKEY; return 0;}

        return -1;
    }

    enum RecSceneType
    {
        SCENE_NONE = 0,
        SCENE_CHANNEL = 1,
        SCENE_SECOND = 2,
        SCENE_THIRD = 3,
        SCENE_GET_VID_BY_VID = 4,
        SCENE_GET_VID_BY_TAG = 5,
        SCENE_FANS = 6,
        SCENE_SEARCH = 7,
        SCENE_COMMON_CHANNEL = 8,
        SCENE_CHANNEL_INSERT = 9,
        SCENE_VIDEO_RENEW = 10,
        SCENE_CHANNEL_TAG_SECOND = 11,
        SCENE_FANS_PIAZZA = 12,
        SCENE_RELATED_DETAIL = 13,
        SCENE_INTEREST_TAG_EXPLORE = 14,
        SCENE_CHANGE = 15,
        SCENE_DETAIL_PLUGIN = 100,
        SCENE_DETAIL_MOREDATA = 101,
        SCENE_DETAIL_SECOND = 102,
    };
    inline string etos(const RecSceneType & e)
    {
        switch(e)
        {
            case SCENE_NONE: return "SCENE_NONE";
            case SCENE_CHANNEL: return "SCENE_CHANNEL";
            case SCENE_SECOND: return "SCENE_SECOND";
            case SCENE_THIRD: return "SCENE_THIRD";
            case SCENE_GET_VID_BY_VID: return "SCENE_GET_VID_BY_VID";
            case SCENE_GET_VID_BY_TAG: return "SCENE_GET_VID_BY_TAG";
            case SCENE_FANS: return "SCENE_FANS";
            case SCENE_SEARCH: return "SCENE_SEARCH";
            case SCENE_COMMON_CHANNEL: return "SCENE_COMMON_CHANNEL";
            case SCENE_CHANNEL_INSERT: return "SCENE_CHANNEL_INSERT";
            case SCENE_VIDEO_RENEW: return "SCENE_VIDEO_RENEW";
            case SCENE_CHANNEL_TAG_SECOND: return "SCENE_CHANNEL_TAG_SECOND";
            case SCENE_FANS_PIAZZA: return "SCENE_FANS_PIAZZA";
            case SCENE_RELATED_DETAIL: return "SCENE_RELATED_DETAIL";
            case SCENE_INTEREST_TAG_EXPLORE: return "SCENE_INTEREST_TAG_EXPLORE";
            case SCENE_CHANGE: return "SCENE_CHANGE";
            case SCENE_DETAIL_PLUGIN: return "SCENE_DETAIL_PLUGIN";
            case SCENE_DETAIL_MOREDATA: return "SCENE_DETAIL_MOREDATA";
            case SCENE_DETAIL_SECOND: return "SCENE_DETAIL_SECOND";
            default: return "";
        }
    }
    inline int stoe(const string & s, RecSceneType & e)
    {
        if(s == "SCENE_NONE")  { e=SCENE_NONE; return 0;}
        if(s == "SCENE_CHANNEL")  { e=SCENE_CHANNEL; return 0;}
        if(s == "SCENE_SECOND")  { e=SCENE_SECOND; return 0;}
        if(s == "SCENE_THIRD")  { e=SCENE_THIRD; return 0;}
        if(s == "SCENE_GET_VID_BY_VID")  { e=SCENE_GET_VID_BY_VID; return 0;}
        if(s == "SCENE_GET_VID_BY_TAG")  { e=SCENE_GET_VID_BY_TAG; return 0;}
        if(s == "SCENE_FANS")  { e=SCENE_FANS; return 0;}
        if(s == "SCENE_SEARCH")  { e=SCENE_SEARCH; return 0;}
        if(s == "SCENE_COMMON_CHANNEL")  { e=SCENE_COMMON_CHANNEL; return 0;}
        if(s == "SCENE_CHANNEL_INSERT")  { e=SCENE_CHANNEL_INSERT; return 0;}
        if(s == "SCENE_VIDEO_RENEW")  { e=SCENE_VIDEO_RENEW; return 0;}
        if(s == "SCENE_CHANNEL_TAG_SECOND")  { e=SCENE_CHANNEL_TAG_SECOND; return 0;}
        if(s == "SCENE_FANS_PIAZZA")  { e=SCENE_FANS_PIAZZA; return 0;}
        if(s == "SCENE_RELATED_DETAIL")  { e=SCENE_RELATED_DETAIL; return 0;}
        if(s == "SCENE_INTEREST_TAG_EXPLORE")  { e=SCENE_INTEREST_TAG_EXPLORE; return 0;}
        if(s == "SCENE_CHANGE")  { e=SCENE_CHANGE; return 0;}
        if(s == "SCENE_DETAIL_PLUGIN")  { e=SCENE_DETAIL_PLUGIN; return 0;}
        if(s == "SCENE_DETAIL_MOREDATA")  { e=SCENE_DETAIL_MOREDATA; return 0;}
        if(s == "SCENE_DETAIL_SECOND")  { e=SCENE_DETAIL_SECOND; return 0;}

        return -1;
    }

    enum TagType
    {
        TAG_NONE = 0,
        TAG_INTEREST_COMMON = 1,
        TAG_INTEREST_MOVIE = 2,
        TAG_INTEREST_STAR = 3,
        TAG_INTEREST_GEN = 4,
        TAG_INTEREST_LONGCAT = 5,
        TAG_INTEREST_SHORTCAT = 6,
        TAG_GROUP_HOT = 100,
        TAG_SCORE = 101,
        TAG_CF = 102,
        TAG_UPTIME = 103,
        TAG_UPDATE = 104,
        TAG_FASTRISE = 105,
        TAG_RELATION_CHAIN = 106,
        TAG_REGION = 107,
        TAG_HOT = 108,
        TAG_REC = 109,
        TAG_FIRSTCAT = 110,
        TAG_HOTTOPIC = 111,
        TAG_FANS = 112,
        TAG_REALTIME = 113,
        TAG_EDITOR_REC = 118,
        TAG_FANS_PIAZZA = 119,
        TAG_MAIN_GENRE = 120,
        TAG_PERSONAL_DETAIL = 201,
        TAG_CHANNEL_NEWS = 301,
        TAG_CHANNEL_FUNNY = 302,
        TAG_VPLUS_TAB = 303,
        TAG_CHANNEL_GAME = 304,
        TAG_CHANNEL_ENTERTAIN = 305,
        TAG_CHANNEL_CAR = 306,
        TAG_CHANNEL_MUSIC = 307,
        TAG_CHANNEL_LIFE = 308,
        TAG_CHANNEL_TECHNOLOGY = 309,
        TAG_CHANNEL_MOTHER = 310,
        TAG_CHANNEL_FASION = 311,
        TAG_CHANNEL_TRAVEL = 312,
        TAG_CHANNEL_EDUCATION = 313,
        TAG_CHANNEL_FINANCE = 314,
        TAG_WXVPLUS_TAB = 315,
        TAG_CHANNEL_APP_FEED = 316,
        TAG_CHANNEL_TVWATCH = 317,
        TAG_DL = 401,
        TAG_AREA = 402,
        TAG_YJ = 403,
        TAG_SHORTRPCAT = 404,
        TAG_LONGRPCAT = 405,
        TAG_DM = 406,
        TAG_TAGREC = 407,
        TAG_CMSREC = 408,
        TAG_HOTCIDREC = 409,
        TAG_CMSREC_S = 410,
        TAG_INTEREST_FOLLOW = 411,
        TAG_CONTENTLEVEL_CS = 412,
        TAG_TOPIC = 413,
        TAG_YJCMSREC = 414,
        TAG_OUTSIDEREC = 415,
        TAG_JMSTREC = 416,
        TAG_USER_CF = 417,
        TAG_PRODUCER = 418,
        TAG_USER_APPEAL = 419,
        TAG_REASON = 420,
        TAG_PRIZE = 421,
        TAG_CID_RELATEDREC = 422,
        TAG_COMPOSITE_CF = 423,
        TAG_COMPOSITE_SIMPLE = 424,
        TAG_COMPOSITE_HERO = 425,
        TAG_WZ = 426,
        TAG_CONTINUE_WATCH = 1001,
        TAG_OPER_ALBUM = 1002,
        TAG_SAME_SERIES = 1003,
        TAG_STAR_MV = 1004,
        TAG_VPLUS_UGC = 1005,
        TAG_HOT_LONGCAT = 2001,
        TAG_HOT_SHORTCAT = 2002,
        TAG_VIDEO_CLIPS = 2003,
    };
    inline string etos(const TagType & e)
    {
        switch(e)
        {
            case TAG_NONE: return "TAG_NONE";
            case TAG_INTEREST_COMMON: return "TAG_INTEREST_COMMON";
            case TAG_INTEREST_MOVIE: return "TAG_INTEREST_MOVIE";
            case TAG_INTEREST_STAR: return "TAG_INTEREST_STAR";
            case TAG_INTEREST_GEN: return "TAG_INTEREST_GEN";
            case TAG_INTEREST_LONGCAT: return "TAG_INTEREST_LONGCAT";
            case TAG_INTEREST_SHORTCAT: return "TAG_INTEREST_SHORTCAT";
            case TAG_GROUP_HOT: return "TAG_GROUP_HOT";
            case TAG_SCORE: return "TAG_SCORE";
            case TAG_CF: return "TAG_CF";
            case TAG_UPTIME: return "TAG_UPTIME";
            case TAG_UPDATE: return "TAG_UPDATE";
            case TAG_FASTRISE: return "TAG_FASTRISE";
            case TAG_RELATION_CHAIN: return "TAG_RELATION_CHAIN";
            case TAG_REGION: return "TAG_REGION";
            case TAG_HOT: return "TAG_HOT";
            case TAG_REC: return "TAG_REC";
            case TAG_FIRSTCAT: return "TAG_FIRSTCAT";
            case TAG_HOTTOPIC: return "TAG_HOTTOPIC";
            case TAG_FANS: return "TAG_FANS";
            case TAG_REALTIME: return "TAG_REALTIME";
            case TAG_EDITOR_REC: return "TAG_EDITOR_REC";
            case TAG_FANS_PIAZZA: return "TAG_FANS_PIAZZA";
            case TAG_MAIN_GENRE: return "TAG_MAIN_GENRE";
            case TAG_PERSONAL_DETAIL: return "TAG_PERSONAL_DETAIL";
            case TAG_CHANNEL_NEWS: return "TAG_CHANNEL_NEWS";
            case TAG_CHANNEL_FUNNY: return "TAG_CHANNEL_FUNNY";
            case TAG_VPLUS_TAB: return "TAG_VPLUS_TAB";
            case TAG_CHANNEL_GAME: return "TAG_CHANNEL_GAME";
            case TAG_CHANNEL_ENTERTAIN: return "TAG_CHANNEL_ENTERTAIN";
            case TAG_CHANNEL_CAR: return "TAG_CHANNEL_CAR";
            case TAG_CHANNEL_MUSIC: return "TAG_CHANNEL_MUSIC";
            case TAG_CHANNEL_LIFE: return "TAG_CHANNEL_LIFE";
            case TAG_CHANNEL_TECHNOLOGY: return "TAG_CHANNEL_TECHNOLOGY";
            case TAG_CHANNEL_MOTHER: return "TAG_CHANNEL_MOTHER";
            case TAG_CHANNEL_FASION: return "TAG_CHANNEL_FASION";
            case TAG_CHANNEL_TRAVEL: return "TAG_CHANNEL_TRAVEL";
            case TAG_CHANNEL_EDUCATION: return "TAG_CHANNEL_EDUCATION";
            case TAG_CHANNEL_FINANCE: return "TAG_CHANNEL_FINANCE";
            case TAG_WXVPLUS_TAB: return "TAG_WXVPLUS_TAB";
            case TAG_CHANNEL_APP_FEED: return "TAG_CHANNEL_APP_FEED";
            case TAG_CHANNEL_TVWATCH: return "TAG_CHANNEL_TVWATCH";
            case TAG_DL: return "TAG_DL";
            case TAG_AREA: return "TAG_AREA";
            case TAG_YJ: return "TAG_YJ";
            case TAG_SHORTRPCAT: return "TAG_SHORTRPCAT";
            case TAG_LONGRPCAT: return "TAG_LONGRPCAT";
            case TAG_DM: return "TAG_DM";
            case TAG_TAGREC: return "TAG_TAGREC";
            case TAG_CMSREC: return "TAG_CMSREC";
            case TAG_HOTCIDREC: return "TAG_HOTCIDREC";
            case TAG_CMSREC_S: return "TAG_CMSREC_S";
            case TAG_INTEREST_FOLLOW: return "TAG_INTEREST_FOLLOW";
            case TAG_CONTENTLEVEL_CS: return "TAG_CONTENTLEVEL_CS";
            case TAG_TOPIC: return "TAG_TOPIC";
            case TAG_YJCMSREC: return "TAG_YJCMSREC";
            case TAG_OUTSIDEREC: return "TAG_OUTSIDEREC";
            case TAG_JMSTREC: return "TAG_JMSTREC";
            case TAG_USER_CF: return "TAG_USER_CF";
            case TAG_PRODUCER: return "TAG_PRODUCER";
            case TAG_USER_APPEAL: return "TAG_USER_APPEAL";
            case TAG_REASON: return "TAG_REASON";
            case TAG_PRIZE: return "TAG_PRIZE";
            case TAG_CID_RELATEDREC: return "TAG_CID_RELATEDREC";
            case TAG_COMPOSITE_CF: return "TAG_COMPOSITE_CF";
            case TAG_COMPOSITE_SIMPLE: return "TAG_COMPOSITE_SIMPLE";
            case TAG_COMPOSITE_HERO: return "TAG_COMPOSITE_HERO";
            case TAG_WZ: return "TAG_WZ";
            case TAG_CONTINUE_WATCH: return "TAG_CONTINUE_WATCH";
            case TAG_OPER_ALBUM: return "TAG_OPER_ALBUM";
            case TAG_SAME_SERIES: return "TAG_SAME_SERIES";
            case TAG_STAR_MV: return "TAG_STAR_MV";
            case TAG_VPLUS_UGC: return "TAG_VPLUS_UGC";
            case TAG_HOT_LONGCAT: return "TAG_HOT_LONGCAT";
            case TAG_HOT_SHORTCAT: return "TAG_HOT_SHORTCAT";
            case TAG_VIDEO_CLIPS: return "TAG_VIDEO_CLIPS";
            default: return "";
        }
    }
    inline int stoe(const string & s, TagType & e)
    {
        if(s == "TAG_NONE")  { e=TAG_NONE; return 0;}
        if(s == "TAG_INTEREST_COMMON")  { e=TAG_INTEREST_COMMON; return 0;}
        if(s == "TAG_INTEREST_MOVIE")  { e=TAG_INTEREST_MOVIE; return 0;}
        if(s == "TAG_INTEREST_STAR")  { e=TAG_INTEREST_STAR; return 0;}
        if(s == "TAG_INTEREST_GEN")  { e=TAG_INTEREST_GEN; return 0;}
        if(s == "TAG_INTEREST_LONGCAT")  { e=TAG_INTEREST_LONGCAT; return 0;}
        if(s == "TAG_INTEREST_SHORTCAT")  { e=TAG_INTEREST_SHORTCAT; return 0;}
        if(s == "TAG_GROUP_HOT")  { e=TAG_GROUP_HOT; return 0;}
        if(s == "TAG_SCORE")  { e=TAG_SCORE; return 0;}
        if(s == "TAG_CF")  { e=TAG_CF; return 0;}
        if(s == "TAG_UPTIME")  { e=TAG_UPTIME; return 0;}
        if(s == "TAG_UPDATE")  { e=TAG_UPDATE; return 0;}
        if(s == "TAG_FASTRISE")  { e=TAG_FASTRISE; return 0;}
        if(s == "TAG_RELATION_CHAIN")  { e=TAG_RELATION_CHAIN; return 0;}
        if(s == "TAG_REGION")  { e=TAG_REGION; return 0;}
        if(s == "TAG_HOT")  { e=TAG_HOT; return 0;}
        if(s == "TAG_REC")  { e=TAG_REC; return 0;}
        if(s == "TAG_FIRSTCAT")  { e=TAG_FIRSTCAT; return 0;}
        if(s == "TAG_HOTTOPIC")  { e=TAG_HOTTOPIC; return 0;}
        if(s == "TAG_FANS")  { e=TAG_FANS; return 0;}
        if(s == "TAG_REALTIME")  { e=TAG_REALTIME; return 0;}
        if(s == "TAG_EDITOR_REC")  { e=TAG_EDITOR_REC; return 0;}
        if(s == "TAG_FANS_PIAZZA")  { e=TAG_FANS_PIAZZA; return 0;}
        if(s == "TAG_MAIN_GENRE")  { e=TAG_MAIN_GENRE; return 0;}
        if(s == "TAG_PERSONAL_DETAIL")  { e=TAG_PERSONAL_DETAIL; return 0;}
        if(s == "TAG_CHANNEL_NEWS")  { e=TAG_CHANNEL_NEWS; return 0;}
        if(s == "TAG_CHANNEL_FUNNY")  { e=TAG_CHANNEL_FUNNY; return 0;}
        if(s == "TAG_VPLUS_TAB")  { e=TAG_VPLUS_TAB; return 0;}
        if(s == "TAG_CHANNEL_GAME")  { e=TAG_CHANNEL_GAME; return 0;}
        if(s == "TAG_CHANNEL_ENTERTAIN")  { e=TAG_CHANNEL_ENTERTAIN; return 0;}
        if(s == "TAG_CHANNEL_CAR")  { e=TAG_CHANNEL_CAR; return 0;}
        if(s == "TAG_CHANNEL_MUSIC")  { e=TAG_CHANNEL_MUSIC; return 0;}
        if(s == "TAG_CHANNEL_LIFE")  { e=TAG_CHANNEL_LIFE; return 0;}
        if(s == "TAG_CHANNEL_TECHNOLOGY")  { e=TAG_CHANNEL_TECHNOLOGY; return 0;}
        if(s == "TAG_CHANNEL_MOTHER")  { e=TAG_CHANNEL_MOTHER; return 0;}
        if(s == "TAG_CHANNEL_FASION")  { e=TAG_CHANNEL_FASION; return 0;}
        if(s == "TAG_CHANNEL_TRAVEL")  { e=TAG_CHANNEL_TRAVEL; return 0;}
        if(s == "TAG_CHANNEL_EDUCATION")  { e=TAG_CHANNEL_EDUCATION; return 0;}
        if(s == "TAG_CHANNEL_FINANCE")  { e=TAG_CHANNEL_FINANCE; return 0;}
        if(s == "TAG_WXVPLUS_TAB")  { e=TAG_WXVPLUS_TAB; return 0;}
        if(s == "TAG_CHANNEL_APP_FEED")  { e=TAG_CHANNEL_APP_FEED; return 0;}
        if(s == "TAG_CHANNEL_TVWATCH")  { e=TAG_CHANNEL_TVWATCH; return 0;}
        if(s == "TAG_DL")  { e=TAG_DL; return 0;}
        if(s == "TAG_AREA")  { e=TAG_AREA; return 0;}
        if(s == "TAG_YJ")  { e=TAG_YJ; return 0;}
        if(s == "TAG_SHORTRPCAT")  { e=TAG_SHORTRPCAT; return 0;}
        if(s == "TAG_LONGRPCAT")  { e=TAG_LONGRPCAT; return 0;}
        if(s == "TAG_DM")  { e=TAG_DM; return 0;}
        if(s == "TAG_TAGREC")  { e=TAG_TAGREC; return 0;}
        if(s == "TAG_CMSREC")  { e=TAG_CMSREC; return 0;}
        if(s == "TAG_HOTCIDREC")  { e=TAG_HOTCIDREC; return 0;}
        if(s == "TAG_CMSREC_S")  { e=TAG_CMSREC_S; return 0;}
        if(s == "TAG_INTEREST_FOLLOW")  { e=TAG_INTEREST_FOLLOW; return 0;}
        if(s == "TAG_CONTENTLEVEL_CS")  { e=TAG_CONTENTLEVEL_CS; return 0;}
        if(s == "TAG_TOPIC")  { e=TAG_TOPIC; return 0;}
        if(s == "TAG_YJCMSREC")  { e=TAG_YJCMSREC; return 0;}
        if(s == "TAG_OUTSIDEREC")  { e=TAG_OUTSIDEREC; return 0;}
        if(s == "TAG_JMSTREC")  { e=TAG_JMSTREC; return 0;}
        if(s == "TAG_USER_CF")  { e=TAG_USER_CF; return 0;}
        if(s == "TAG_PRODUCER")  { e=TAG_PRODUCER; return 0;}
        if(s == "TAG_USER_APPEAL")  { e=TAG_USER_APPEAL; return 0;}
        if(s == "TAG_REASON")  { e=TAG_REASON; return 0;}
        if(s == "TAG_PRIZE")  { e=TAG_PRIZE; return 0;}
        if(s == "TAG_CID_RELATEDREC")  { e=TAG_CID_RELATEDREC; return 0;}
        if(s == "TAG_COMPOSITE_CF")  { e=TAG_COMPOSITE_CF; return 0;}
        if(s == "TAG_COMPOSITE_SIMPLE")  { e=TAG_COMPOSITE_SIMPLE; return 0;}
        if(s == "TAG_COMPOSITE_HERO")  { e=TAG_COMPOSITE_HERO; return 0;}
        if(s == "TAG_WZ")  { e=TAG_WZ; return 0;}
        if(s == "TAG_CONTINUE_WATCH")  { e=TAG_CONTINUE_WATCH; return 0;}
        if(s == "TAG_OPER_ALBUM")  { e=TAG_OPER_ALBUM; return 0;}
        if(s == "TAG_SAME_SERIES")  { e=TAG_SAME_SERIES; return 0;}
        if(s == "TAG_STAR_MV")  { e=TAG_STAR_MV; return 0;}
        if(s == "TAG_VPLUS_UGC")  { e=TAG_VPLUS_UGC; return 0;}
        if(s == "TAG_HOT_LONGCAT")  { e=TAG_HOT_LONGCAT; return 0;}
        if(s == "TAG_HOT_SHORTCAT")  { e=TAG_HOT_SHORTCAT; return 0;}
        if(s == "TAG_VIDEO_CLIPS")  { e=TAG_VIDEO_CLIPS; return 0;}

        return -1;
    }

    enum ReasonType
    {
        REASON_NONE = 0,
        REASON_FIRST_CATE = 101,
        REASON_SECOND_CATE = 102,
        REASON_TAG = 103,
        REASON_LBS = 104,
        REASON_TITLE = 105,
        REASON_USER_GROUP = 106,
    };
    inline string etos(const ReasonType & e)
    {
        switch(e)
        {
            case REASON_NONE: return "REASON_NONE";
            case REASON_FIRST_CATE: return "REASON_FIRST_CATE";
            case REASON_SECOND_CATE: return "REASON_SECOND_CATE";
            case REASON_TAG: return "REASON_TAG";
            case REASON_LBS: return "REASON_LBS";
            case REASON_TITLE: return "REASON_TITLE";
            case REASON_USER_GROUP: return "REASON_USER_GROUP";
            default: return "";
        }
    }
    inline int stoe(const string & s, ReasonType & e)
    {
        if(s == "REASON_NONE")  { e=REASON_NONE; return 0;}
        if(s == "REASON_FIRST_CATE")  { e=REASON_FIRST_CATE; return 0;}
        if(s == "REASON_SECOND_CATE")  { e=REASON_SECOND_CATE; return 0;}
        if(s == "REASON_TAG")  { e=REASON_TAG; return 0;}
        if(s == "REASON_LBS")  { e=REASON_LBS; return 0;}
        if(s == "REASON_TITLE")  { e=REASON_TITLE; return 0;}
        if(s == "REASON_USER_GROUP")  { e=REASON_USER_GROUP; return 0;}

        return -1;
    }

    enum RecLoadType
    {
        LOAD_TYPE_MANUAL = 0,
        LOAD_TYPE_TIMEOUT = 1,
        LOAD_TYPE_PRELOAD = 2,
        LOAD_TYPE_NEXTPAGE = 3,
    };
    inline string etos(const RecLoadType & e)
    {
        switch(e)
        {
            case LOAD_TYPE_MANUAL: return "LOAD_TYPE_MANUAL";
            case LOAD_TYPE_TIMEOUT: return "LOAD_TYPE_TIMEOUT";
            case LOAD_TYPE_PRELOAD: return "LOAD_TYPE_PRELOAD";
            case LOAD_TYPE_NEXTPAGE: return "LOAD_TYPE_NEXTPAGE";
            default: return "";
        }
    }
    inline int stoe(const string & s, RecLoadType & e)
    {
        if(s == "LOAD_TYPE_MANUAL")  { e=LOAD_TYPE_MANUAL; return 0;}
        if(s == "LOAD_TYPE_TIMEOUT")  { e=LOAD_TYPE_TIMEOUT; return 0;}
        if(s == "LOAD_TYPE_PRELOAD")  { e=LOAD_TYPE_PRELOAD; return 0;}
        if(s == "LOAD_TYPE_NEXTPAGE")  { e=LOAD_TYPE_NEXTPAGE; return 0;}

        return -1;
    }

    enum RecIdType
    {
        RECID_NONE = 0,
        RECID_STAR = 1,
        RECID_ITEM_ID = 2,
        RECID_TAG_ID = 3,
        RECID_KANDAN_ID = 4,
    };
    inline string etos(const RecIdType & e)
    {
        switch(e)
        {
            case RECID_NONE: return "RECID_NONE";
            case RECID_STAR: return "RECID_STAR";
            case RECID_ITEM_ID: return "RECID_ITEM_ID";
            case RECID_TAG_ID: return "RECID_TAG_ID";
            case RECID_KANDAN_ID: return "RECID_KANDAN_ID";
            default: return "";
        }
    }
    inline int stoe(const string & s, RecIdType & e)
    {
        if(s == "RECID_NONE")  { e=RECID_NONE; return 0;}
        if(s == "RECID_STAR")  { e=RECID_STAR; return 0;}
        if(s == "RECID_ITEM_ID")  { e=RECID_ITEM_ID; return 0;}
        if(s == "RECID_TAG_ID")  { e=RECID_TAG_ID; return 0;}
        if(s == "RECID_KANDAN_ID")  { e=RECID_KANDAN_ID; return 0;}

        return -1;
    }

    enum ExpLayerType
    {
        EXP_LAYER_NONE = 0,
        EXP_LAYER_PROFILE = 1,
        EXP_LAYER_SYSTEM = 2,
        EXP_LAYER_INDEX_SCORING = 3,
        EXP_LAYER_PCTR = 4,
        EXP_LAYER_RERANKING = 5,
    };
    inline string etos(const ExpLayerType & e)
    {
        switch(e)
        {
            case EXP_LAYER_NONE: return "EXP_LAYER_NONE";
            case EXP_LAYER_PROFILE: return "EXP_LAYER_PROFILE";
            case EXP_LAYER_SYSTEM: return "EXP_LAYER_SYSTEM";
            case EXP_LAYER_INDEX_SCORING: return "EXP_LAYER_INDEX_SCORING";
            case EXP_LAYER_PCTR: return "EXP_LAYER_PCTR";
            case EXP_LAYER_RERANKING: return "EXP_LAYER_RERANKING";
            default: return "";
        }
    }
    inline int stoe(const string & s, ExpLayerType & e)
    {
        if(s == "EXP_LAYER_NONE")  { e=EXP_LAYER_NONE; return 0;}
        if(s == "EXP_LAYER_PROFILE")  { e=EXP_LAYER_PROFILE; return 0;}
        if(s == "EXP_LAYER_SYSTEM")  { e=EXP_LAYER_SYSTEM; return 0;}
        if(s == "EXP_LAYER_INDEX_SCORING")  { e=EXP_LAYER_INDEX_SCORING; return 0;}
        if(s == "EXP_LAYER_PCTR")  { e=EXP_LAYER_PCTR; return 0;}
        if(s == "EXP_LAYER_RERANKING")  { e=EXP_LAYER_RERANKING; return 0;}

        return -1;
    }

    struct OneRecReasonDetail : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.OneRecReasonDetail";
        }
        static string MD5()
        {
            return "8be40b3eade0546141514306d30cc50b";
        }
        OneRecReasonDetail()
        :type(RecCommonStruct::RECID_NONE),id(""),name("")
        {
        }
        void resetDefautlt()
        {
            id = "";
            name = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)type, 0);
            _os.write(id, 1);
            _os.write(name, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = RecCommonStruct::RECID_NONE;
            _is.read(eTemp0, 0, false);
            type = (RecCommonStruct::RecIdType)eTemp0;
            _is.read(id, 1, false);
            _is.read(name, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)type,"type");
            _ds.display(id,"id");
            _ds.display(name,"name");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)type, true);
            _ds.displaySimple(id, true);
            _ds.displaySimple(name, false);
            return _os;
        }
    public:
        RecCommonStruct::RecIdType type;
        std::string id;
        std::string name;
    };
    inline bool operator==(const OneRecReasonDetail&l, const OneRecReasonDetail&r)
    {
        return l.type == r.type && l.id == r.id && l.name == r.name;
    }
    inline bool operator!=(const OneRecReasonDetail&l, const OneRecReasonDetail&r)
    {
        return !(l == r);
    }

    struct TagInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.TagInfo";
        }
        static string MD5()
        {
            return "5bb5836bcf89c58da65b049e3d303e65";
        }
        TagInfo()
        :type(0),id(""),data(""),extinfo("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            id = "";
            data = "";
            extinfo = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(id, 1);
            _os.write(data, 2);
            _os.write(extinfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(id, 1, false);
            _is.read(data, 2, false);
            _is.read(extinfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(id,"id");
            _ds.display(data,"data");
            _ds.display(extinfo,"extinfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(id, true);
            _ds.displaySimple(data, true);
            _ds.displaySimple(extinfo, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string id;
        std::string data;
        std::string extinfo;
    };
    inline bool operator==(const TagInfo&l, const TagInfo&r)
    {
        return l.type == r.type && l.id == r.id && l.data == r.data && l.extinfo == r.extinfo;
    }
    inline bool operator!=(const TagInfo&l, const TagInfo&r)
    {
        return !(l == r);
    }

    struct SpecTagReqInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.SpecTagReqInfo";
        }
        static string MD5()
        {
            return "f5e9d5c27d73b2c62503813eb6d549a3";
        }
        SpecTagReqInfo()
        :tagId(""),tagType(RecCommonStruct::TAG_NONE),reqNum(0)
        {
        }
        void resetDefautlt()
        {
            tagId = "";
            reqNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tagId, 0);
            _os.write((taf::Int32)tagType, 1);
            _os.write(reqNum, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tagId, 0, true);
            taf::Int32 eTemp1 = RecCommonStruct::TAG_NONE;
            _is.read(eTemp1, 1, false);
            tagType = (RecCommonStruct::TagType)eTemp1;
            _is.read(reqNum, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tagId,"tagId");
            _ds.display((taf::Int32)tagType,"tagType");
            _ds.display(reqNum,"reqNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tagId, true);
            _ds.displaySimple((taf::Int32)tagType, true);
            _ds.displaySimple(reqNum, false);
            return _os;
        }
    public:
        std::string tagId;
        RecCommonStruct::TagType tagType;
        taf::Int32 reqNum;
    };
    inline bool operator==(const SpecTagReqInfo&l, const SpecTagReqInfo&r)
    {
        return l.tagId == r.tagId && l.tagType == r.tagType && l.reqNum == r.reqNum;
    }
    inline bool operator!=(const SpecTagReqInfo&l, const SpecTagReqInfo&r)
    {
        return !(l == r);
    }

    struct ItemInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.ItemInfo";
        }
        static string MD5()
        {
            return "a101759b2bfa0eb9cc0115055f2bd1eb";
        }
        ItemInfo()
        :ctype(""),id(""),data("")
        {
        }
        void resetDefautlt()
        {
            ctype = "";
            id = "";
            data = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ctype, 0);
            _os.write(id, 1);
            _os.write(data, 2);
            _os.write(cms_data, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ctype, 0, false);
            _is.read(id, 1, false);
            _is.read(data, 2, false);
            _is.read(cms_data, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ctype,"ctype");
            _ds.display(id,"id");
            _ds.display(data,"data");
            _ds.display(cms_data,"cms_data");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ctype, true);
            _ds.displaySimple(id, true);
            _ds.displaySimple(data, true);
            _ds.displaySimple(cms_data, false);
            return _os;
        }
    public:
        std::string ctype;
        std::string id;
        std::string data;
        map<std::string, std::string> cms_data;
    };
    inline bool operator==(const ItemInfo&l, const ItemInfo&r)
    {
        return l.ctype == r.ctype && l.id == r.id && l.data == r.data && l.cms_data == r.cms_data;
    }
    inline bool operator!=(const ItemInfo&l, const ItemInfo&r)
    {
        return !(l == r);
    }

    struct DebugInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.DebugInfo";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        DebugInfo()
        :info("")
        {
        }
        void resetDefautlt()
        {
            info = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(info, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(info, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(info,"info");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(info, false);
            return _os;
        }
    public:
        std::string info;
    };
    inline bool operator==(const DebugInfo&l, const DebugInfo&r)
    {
        return l.info == r.info;
    }
    inline bool operator!=(const DebugInfo&l, const DebugInfo&r)
    {
        return !(l == r);
    }

    struct ReportInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.ReportInfo";
        }
        static string MD5()
        {
            return "48e4066056019679742bd0a42afd4cb0";
        }
        ReportInfo()
        :bucketId(""),algId(""),reasonType(RecCommonStruct::REASON_NONE),reason("")
        {
        }
        void resetDefautlt()
        {
            bucketId = "";
            algId = "";
            reason = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bucketId, 0);
            _os.write(algId, 1);
            _os.write((taf::Int32)reasonType, 2);
            _os.write(reason, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bucketId, 0, true);
            _is.read(algId, 1, true);
            taf::Int32 eTemp2 = RecCommonStruct::REASON_NONE;
            _is.read(eTemp2, 2, false);
            reasonType = (RecCommonStruct::ReasonType)eTemp2;
            _is.read(reason, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bucketId,"bucketId");
            _ds.display(algId,"algId");
            _ds.display((taf::Int32)reasonType,"reasonType");
            _ds.display(reason,"reason");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bucketId, true);
            _ds.displaySimple(algId, true);
            _ds.displaySimple((taf::Int32)reasonType, true);
            _ds.displaySimple(reason, false);
            return _os;
        }
    public:
        std::string bucketId;
        std::string algId;
        RecCommonStruct::ReasonType reasonType;
        std::string reason;
    };
    inline bool operator==(const ReportInfo&l, const ReportInfo&r)
    {
        return l.bucketId == r.bucketId && l.algId == r.algId && l.reasonType == r.reasonType && l.reason == r.reason;
    }
    inline bool operator!=(const ReportInfo&l, const ReportInfo&r)
    {
        return !(l == r);
    }

    struct RecReasonInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.RecReasonInfo";
        }
        static string MD5()
        {
            return "e1d97c9d02499e0f0dab761d0ac30af8";
        }
        RecReasonInfo()
        :reason("")
        {
        }
        void resetDefautlt()
        {
            reason = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(reason, 0);
            _os.write(detail, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(reason, 0, false);
            _is.read(detail, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(reason,"reason");
            _ds.display(detail,"detail");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(reason, true);
            _ds.displaySimple(detail, false);
            return _os;
        }
    public:
        std::string reason;
        vector<RecCommonStruct::OneRecReasonDetail> detail;
    };
    inline bool operator==(const RecReasonInfo&l, const RecReasonInfo&r)
    {
        return l.reason == r.reason && l.detail == r.detail;
    }
    inline bool operator!=(const RecReasonInfo&l, const RecReasonInfo&r)
    {
        return !(l == r);
    }

    struct RecTag : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.RecTag";
        }
        static string MD5()
        {
            return "8d6c232febfb461d974296d6ada2f438";
        }
        RecTag()
        :tagId(""),tagType(RecCommonStruct::TAG_NONE),recTitle(""),recSubTitle(""),hasMore(true),insertAt(0),hasSecondPage(true)
        {
        }
        void resetDefautlt()
        {
            tagId = "";
            recTitle = "";
            recSubTitle = "";
            hasMore = true;
            insertAt = 0;
            hasSecondPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tagId, 0);
            _os.write((taf::Int32)tagType, 1);
            _os.write(recTitle, 2);
            _os.write(info, 3);
            _os.write(recDebugInfo, 5);
            _os.write(recReportInfo, 6);
            _os.write(recSubTitle, 7);
            _os.write(hasMore, 8);
            _os.write(insertAt, 10);
            _os.write(hasSecondPage, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tagId, 0, true);
            taf::Int32 eTemp1 = RecCommonStruct::TAG_NONE;
            _is.read(eTemp1, 1, false);
            tagType = (RecCommonStruct::TagType)eTemp1;
            _is.read(recTitle, 2, false);
            _is.read(info, 3, false);
            _is.read(recDebugInfo, 5, false);
            _is.read(recReportInfo, 6, false);
            _is.read(recSubTitle, 7, false);
            _is.read(hasMore, 8, false);
            _is.read(insertAt, 10, false);
            _is.read(hasSecondPage, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tagId,"tagId");
            _ds.display((taf::Int32)tagType,"tagType");
            _ds.display(recTitle,"recTitle");
            _ds.display(info,"info");
            _ds.display(recDebugInfo,"recDebugInfo");
            _ds.display(recReportInfo,"recReportInfo");
            _ds.display(recSubTitle,"recSubTitle");
            _ds.display(hasMore,"hasMore");
            _ds.display(insertAt,"insertAt");
            _ds.display(hasSecondPage,"hasSecondPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tagId, true);
            _ds.displaySimple((taf::Int32)tagType, true);
            _ds.displaySimple(recTitle, true);
            _ds.displaySimple(info, true);
            _ds.displaySimple(recDebugInfo, true);
            _ds.displaySimple(recReportInfo, true);
            _ds.displaySimple(recSubTitle, true);
            _ds.displaySimple(hasMore, true);
            _ds.displaySimple(insertAt, true);
            _ds.displaySimple(hasSecondPage, false);
            return _os;
        }
    public:
        std::string tagId;
        RecCommonStruct::TagType tagType;
        std::string recTitle;
        RecCommonStruct::TagInfo info;
        RecCommonStruct::DebugInfo recDebugInfo;
        RecCommonStruct::ReportInfo recReportInfo;
        std::string recSubTitle;
        taf::Bool hasMore;
        taf::Int32 insertAt;
        taf::Bool hasSecondPage;
    };
    inline bool operator==(const RecTag&l, const RecTag&r)
    {
        return l.tagId == r.tagId && l.tagType == r.tagType && l.recTitle == r.recTitle && l.info == r.info && l.recDebugInfo == r.recDebugInfo && l.recReportInfo == r.recReportInfo && l.recSubTitle == r.recSubTitle && l.hasMore == r.hasMore && l.insertAt == r.insertAt && l.hasSecondPage == r.hasSecondPage;
    }
    inline bool operator!=(const RecTag&l, const RecTag&r)
    {
        return !(l == r);
    }

    struct RecItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.RecItem";
        }
        static string MD5()
        {
            return "aac893517c487497330cec2b58e9b6be";
        }
        RecItem()
        :itemId(""),itemType(RecCommonStruct::ITEM_NONE),tagId(""),recPriority(0),recSubTitle(""),recTitle(""),imageUrl(""),tagType(RecCommonStruct::TAG_NONE)
        {
        }
        void resetDefautlt()
        {
            itemId = "";
            tagId = "";
            recPriority = 0;
            recSubTitle = "";
            recTitle = "";
            imageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemId, 0);
            _os.write((taf::Int32)itemType, 1);
            _os.write(tagId, 2);
            _os.write(recPriority, 3);
            _os.write(recDebugInfo, 4);
            _os.write(recReportInfo, 5);
            _os.write(recSubTitle, 6);
            _os.write(recTagList, 7);
            _os.write(recTitle, 8);
            _os.write(imageUrl, 9);
            _os.write(recReason, 10);
            _os.write((taf::Int32)tagType, 11);
            _os.write(info, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(itemId, 0, true);
            taf::Int32 eTemp1 = RecCommonStruct::ITEM_NONE;
            _is.read(eTemp1, 1, true);
            itemType = (RecCommonStruct::RecItemType)eTemp1;
            _is.read(tagId, 2, false);
            _is.read(recPriority, 3, false);
            _is.read(recDebugInfo, 4, false);
            _is.read(recReportInfo, 5, false);
            _is.read(recSubTitle, 6, false);
            _is.read(recTagList, 7, false);
            _is.read(recTitle, 8, false);
            _is.read(imageUrl, 9, false);
            _is.read(recReason, 10, false);
            taf::Int32 eTemp11 = RecCommonStruct::TAG_NONE;
            _is.read(eTemp11, 11, false);
            tagType = (RecCommonStruct::TagType)eTemp11;
            _is.read(info, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemId,"itemId");
            _ds.display((taf::Int32)itemType,"itemType");
            _ds.display(tagId,"tagId");
            _ds.display(recPriority,"recPriority");
            _ds.display(recDebugInfo,"recDebugInfo");
            _ds.display(recReportInfo,"recReportInfo");
            _ds.display(recSubTitle,"recSubTitle");
            _ds.display(recTagList,"recTagList");
            _ds.display(recTitle,"recTitle");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(recReason,"recReason");
            _ds.display((taf::Int32)tagType,"tagType");
            _ds.display(info,"info");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemId, true);
            _ds.displaySimple((taf::Int32)itemType, true);
            _ds.displaySimple(tagId, true);
            _ds.displaySimple(recPriority, true);
            _ds.displaySimple(recDebugInfo, true);
            _ds.displaySimple(recReportInfo, true);
            _ds.displaySimple(recSubTitle, true);
            _ds.displaySimple(recTagList, true);
            _ds.displaySimple(recTitle, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(recReason, true);
            _ds.displaySimple((taf::Int32)tagType, true);
            _ds.displaySimple(info, false);
            return _os;
        }
    public:
        std::string itemId;
        RecCommonStruct::RecItemType itemType;
        std::string tagId;
        taf::Double recPriority;
        RecCommonStruct::DebugInfo recDebugInfo;
        RecCommonStruct::ReportInfo recReportInfo;
        std::string recSubTitle;
        vector<RecCommonStruct::RecTag> recTagList;
        std::string recTitle;
        std::string imageUrl;
        RecCommonStruct::RecReasonInfo recReason;
        RecCommonStruct::TagType tagType;
        RecCommonStruct::ItemInfo info;
    };
    inline bool operator==(const RecItem&l, const RecItem&r)
    {
        return l.itemId == r.itemId && l.itemType == r.itemType && l.tagId == r.tagId && l.recPriority == r.recPriority && l.recDebugInfo == r.recDebugInfo && l.recReportInfo == r.recReportInfo && l.recSubTitle == r.recSubTitle && l.recTagList == r.recTagList && l.recTitle == r.recTitle && l.imageUrl == r.imageUrl && l.recReason == r.recReason && l.tagType == r.tagType && l.info == r.info;
    }
    inline bool operator!=(const RecItem&l, const RecItem&r)
    {
        return !(l == r);
    }

    struct RecContext : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.RecContext";
        }
        static string MD5()
        {
            return "f0a38e134e1cea2cf07a269433118ae5";
        }
        RecContext()
        :recScene(RecCommonStruct::SCENE_NONE),bucketId(""),lastedTagId(""),lastedTagType(RecCommonStruct::TAG_NONE),extendInfo(""),loadType(RecCommonStruct::LOAD_TYPE_MANUAL)
        {
        }
        void resetDefautlt()
        {
            bucketId = "";
            lastedTagId = "";
            extendInfo = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)recScene, 0);
            _os.write(recItemList, 1);
            _os.write(bucketId, 9);
            _os.write(vecFilterIds, 10);
            _os.write(lastedTagId, 11);
            _os.write((taf::Int32)lastedTagType, 12);
            _os.write(vecSpecTagReqInfo, 13);
            _os.write(vecRealTimeInterestInfo, 14);
            _os.write(extendInfo, 15);
            _os.write((taf::Int32)loadType, 16);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = RecCommonStruct::SCENE_NONE;
            _is.read(eTemp0, 0, false);
            recScene = (RecCommonStruct::RecSceneType)eTemp0;
            _is.read(recItemList, 1, false);
            _is.read(bucketId, 9, false);
            _is.read(vecFilterIds, 10, false);
            _is.read(lastedTagId, 11, false);
            taf::Int32 eTemp12 = RecCommonStruct::TAG_NONE;
            _is.read(eTemp12, 12, false);
            lastedTagType = (RecCommonStruct::TagType)eTemp12;
            _is.read(vecSpecTagReqInfo, 13, false);
            _is.read(vecRealTimeInterestInfo, 14, false);
            _is.read(extendInfo, 15, false);
            taf::Int32 eTemp16 = RecCommonStruct::LOAD_TYPE_MANUAL;
            _is.read(eTemp16, 16, false);
            loadType = (RecCommonStruct::RecLoadType)eTemp16;
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)recScene,"recScene");
            _ds.display(recItemList,"recItemList");
            _ds.display(bucketId,"bucketId");
            _ds.display(vecFilterIds,"vecFilterIds");
            _ds.display(lastedTagId,"lastedTagId");
            _ds.display((taf::Int32)lastedTagType,"lastedTagType");
            _ds.display(vecSpecTagReqInfo,"vecSpecTagReqInfo");
            _ds.display(vecRealTimeInterestInfo,"vecRealTimeInterestInfo");
            _ds.display(extendInfo,"extendInfo");
            _ds.display((taf::Int32)loadType,"loadType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)recScene, true);
            _ds.displaySimple(recItemList, true);
            _ds.displaySimple(bucketId, true);
            _ds.displaySimple(vecFilterIds, true);
            _ds.displaySimple(lastedTagId, true);
            _ds.displaySimple((taf::Int32)lastedTagType, true);
            _ds.displaySimple(vecSpecTagReqInfo, true);
            _ds.displaySimple(vecRealTimeInterestInfo, true);
            _ds.displaySimple(extendInfo, true);
            _ds.displaySimple((taf::Int32)loadType, false);
            return _os;
        }
    public:
        RecCommonStruct::RecSceneType recScene;
        vector<RecCommonStruct::RecItem> recItemList;
        std::string bucketId;
        vector<std::string> vecFilterIds;
        std::string lastedTagId;
        RecCommonStruct::TagType lastedTagType;
        vector<RecCommonStruct::SpecTagReqInfo> vecSpecTagReqInfo;
        vector<RecCommonStruct::RecTag> vecRealTimeInterestInfo;
        std::string extendInfo;
        RecCommonStruct::RecLoadType loadType;
    };
    inline bool operator==(const RecContext&l, const RecContext&r)
    {
        return l.recScene == r.recScene && l.recItemList == r.recItemList && l.bucketId == r.bucketId && l.vecFilterIds == r.vecFilterIds && l.lastedTagId == r.lastedTagId && l.lastedTagType == r.lastedTagType && l.vecSpecTagReqInfo == r.vecSpecTagReqInfo && l.vecRealTimeInterestInfo == r.vecRealTimeInterestInfo && l.extendInfo == r.extendInfo && l.loadType == r.loadType;
    }
    inline bool operator!=(const RecContext&l, const RecContext&r)
    {
        return !(l == r);
    }

    struct RecDetailContext : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.RecDetailContext";
        }
        static string MD5()
        {
            return "638ade3ee0c4947a2fbe850cb0d6e6e6";
        }
        RecDetailContext()
        :recScene(RecCommonStruct::SCENE_NONE),itemId(""),itemType(RecCommonStruct::ITEM_NONE),bucketId(""),vid_type(0),title(""),sync_cover(""),vplus_uin(0),vid_secondClass(0),vid_thirdClass(0),cid_type(0),column_id(""),cid_title(""),cid_secondClass(0),cid_thirdClass(0),playlist_id(""),series_id("")
        {
        }
        void resetDefautlt()
        {
            itemId = "";
            bucketId = "";
            vid_type = 0;
            title = "";
            sync_cover = "";
            vplus_uin = 0;
            vid_secondClass = 0;
            vid_thirdClass = 0;
            cid_type = 0;
            column_id = "";
            cid_title = "";
            cid_secondClass = 0;
            cid_thirdClass = 0;
            playlist_id = "";
            series_id = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)recScene, 0);
            _os.write(itemId, 2);
            _os.write((taf::Int32)itemType, 3);
            _os.write(bucketId, 9);
            _os.write(vid_type, 11);
            _os.write(title, 12);
            _os.write(sync_cover, 13);
            _os.write(vecCoverList, 14);
            _os.write(vplus_uin, 15);
            _os.write(vecPioneerTag, 16);
            _os.write(vecVidTag, 17);
            _os.write(vid_secondClass, 18);
            _os.write(vid_thirdClass, 19);
            _os.write(cid_type, 31);
            _os.write(column_id, 32);
            _os.write(cid_title, 33);
            _os.write(vecCidTag, 34);
            _os.write(vecMainGenre, 35);
            _os.write(vecSubGenre, 36);
            _os.write(vecLeadingActor, 37);
            _os.write(vecDirector, 38);
            _os.write(vecCartoonGenre, 39);
            _os.write(vecCartoonAspect, 40);
            _os.write(vecProducer, 41);
            _os.write(vecAreaName, 42);
            _os.write(vecOriginalAuthor, 43);
            _os.write(vecVideoIds, 44);
            _os.write(cid_secondClass, 45);
            _os.write(cid_thirdClass, 46);
            _os.write(playlist_id, 61);
            _os.write(series_id, 62);
            _os.write(vecSingerId, 63);
            _os.write(vecBlackList, 101);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = RecCommonStruct::SCENE_NONE;
            _is.read(eTemp0, 0, false);
            recScene = (RecCommonStruct::RecSceneType)eTemp0;
            _is.read(itemId, 2, false);
            taf::Int32 eTemp3 = RecCommonStruct::ITEM_NONE;
            _is.read(eTemp3, 3, false);
            itemType = (RecCommonStruct::RecItemType)eTemp3;
            _is.read(bucketId, 9, false);
            _is.read(vid_type, 11, false);
            _is.read(title, 12, false);
            _is.read(sync_cover, 13, false);
            _is.read(vecCoverList, 14, false);
            _is.read(vplus_uin, 15, false);
            _is.read(vecPioneerTag, 16, false);
            _is.read(vecVidTag, 17, false);
            _is.read(vid_secondClass, 18, false);
            _is.read(vid_thirdClass, 19, false);
            _is.read(cid_type, 31, false);
            _is.read(column_id, 32, false);
            _is.read(cid_title, 33, false);
            _is.read(vecCidTag, 34, false);
            _is.read(vecMainGenre, 35, false);
            _is.read(vecSubGenre, 36, false);
            _is.read(vecLeadingActor, 37, false);
            _is.read(vecDirector, 38, false);
            _is.read(vecCartoonGenre, 39, false);
            _is.read(vecCartoonAspect, 40, false);
            _is.read(vecProducer, 41, false);
            _is.read(vecAreaName, 42, false);
            _is.read(vecOriginalAuthor, 43, false);
            _is.read(vecVideoIds, 44, false);
            _is.read(cid_secondClass, 45, false);
            _is.read(cid_thirdClass, 46, false);
            _is.read(playlist_id, 61, false);
            _is.read(series_id, 62, false);
            _is.read(vecSingerId, 63, false);
            _is.read(vecBlackList, 101, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)recScene,"recScene");
            _ds.display(itemId,"itemId");
            _ds.display((taf::Int32)itemType,"itemType");
            _ds.display(bucketId,"bucketId");
            _ds.display(vid_type,"vid_type");
            _ds.display(title,"title");
            _ds.display(sync_cover,"sync_cover");
            _ds.display(vecCoverList,"vecCoverList");
            _ds.display(vplus_uin,"vplus_uin");
            _ds.display(vecPioneerTag,"vecPioneerTag");
            _ds.display(vecVidTag,"vecVidTag");
            _ds.display(vid_secondClass,"vid_secondClass");
            _ds.display(vid_thirdClass,"vid_thirdClass");
            _ds.display(cid_type,"cid_type");
            _ds.display(column_id,"column_id");
            _ds.display(cid_title,"cid_title");
            _ds.display(vecCidTag,"vecCidTag");
            _ds.display(vecMainGenre,"vecMainGenre");
            _ds.display(vecSubGenre,"vecSubGenre");
            _ds.display(vecLeadingActor,"vecLeadingActor");
            _ds.display(vecDirector,"vecDirector");
            _ds.display(vecCartoonGenre,"vecCartoonGenre");
            _ds.display(vecCartoonAspect,"vecCartoonAspect");
            _ds.display(vecProducer,"vecProducer");
            _ds.display(vecAreaName,"vecAreaName");
            _ds.display(vecOriginalAuthor,"vecOriginalAuthor");
            _ds.display(vecVideoIds,"vecVideoIds");
            _ds.display(cid_secondClass,"cid_secondClass");
            _ds.display(cid_thirdClass,"cid_thirdClass");
            _ds.display(playlist_id,"playlist_id");
            _ds.display(series_id,"series_id");
            _ds.display(vecSingerId,"vecSingerId");
            _ds.display(vecBlackList,"vecBlackList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)recScene, true);
            _ds.displaySimple(itemId, true);
            _ds.displaySimple((taf::Int32)itemType, true);
            _ds.displaySimple(bucketId, true);
            _ds.displaySimple(vid_type, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(sync_cover, true);
            _ds.displaySimple(vecCoverList, true);
            _ds.displaySimple(vplus_uin, true);
            _ds.displaySimple(vecPioneerTag, true);
            _ds.displaySimple(vecVidTag, true);
            _ds.displaySimple(vid_secondClass, true);
            _ds.displaySimple(vid_thirdClass, true);
            _ds.displaySimple(cid_type, true);
            _ds.displaySimple(column_id, true);
            _ds.displaySimple(cid_title, true);
            _ds.displaySimple(vecCidTag, true);
            _ds.displaySimple(vecMainGenre, true);
            _ds.displaySimple(vecSubGenre, true);
            _ds.displaySimple(vecLeadingActor, true);
            _ds.displaySimple(vecDirector, true);
            _ds.displaySimple(vecCartoonGenre, true);
            _ds.displaySimple(vecCartoonAspect, true);
            _ds.displaySimple(vecProducer, true);
            _ds.displaySimple(vecAreaName, true);
            _ds.displaySimple(vecOriginalAuthor, true);
            _ds.displaySimple(vecVideoIds, true);
            _ds.displaySimple(cid_secondClass, true);
            _ds.displaySimple(cid_thirdClass, true);
            _ds.displaySimple(playlist_id, true);
            _ds.displaySimple(series_id, true);
            _ds.displaySimple(vecSingerId, true);
            _ds.displaySimple(vecBlackList, false);
            return _os;
        }
    public:
        RecCommonStruct::RecSceneType recScene;
        std::string itemId;
        RecCommonStruct::RecItemType itemType;
        std::string bucketId;
        taf::Int32 vid_type;
        std::string title;
        std::string sync_cover;
        vector<std::string> vecCoverList;
        taf::Int64 vplus_uin;
        vector<std::string> vecPioneerTag;
        vector<std::string> vecVidTag;
        taf::Int32 vid_secondClass;
        taf::Int32 vid_thirdClass;
        taf::Int32 cid_type;
        std::string column_id;
        std::string cid_title;
        vector<std::string> vecCidTag;
        vector<std::string> vecMainGenre;
        vector<std::string> vecSubGenre;
        vector<std::string> vecLeadingActor;
        vector<std::string> vecDirector;
        vector<std::string> vecCartoonGenre;
        vector<std::string> vecCartoonAspect;
        vector<std::string> vecProducer;
        vector<std::string> vecAreaName;
        vector<std::string> vecOriginalAuthor;
        vector<std::string> vecVideoIds;
        taf::Int32 cid_secondClass;
        taf::Int32 cid_thirdClass;
        std::string playlist_id;
        std::string series_id;
        vector<std::string> vecSingerId;
        vector<std::string> vecBlackList;
    };
    inline bool operator==(const RecDetailContext&l, const RecDetailContext&r)
    {
        return l.recScene == r.recScene && l.itemId == r.itemId && l.itemType == r.itemType && l.bucketId == r.bucketId && l.vid_type == r.vid_type && l.title == r.title && l.sync_cover == r.sync_cover && l.vecCoverList == r.vecCoverList && l.vplus_uin == r.vplus_uin && l.vecPioneerTag == r.vecPioneerTag && l.vecVidTag == r.vecVidTag && l.vid_secondClass == r.vid_secondClass && l.vid_thirdClass == r.vid_thirdClass && l.cid_type == r.cid_type && l.column_id == r.column_id && l.cid_title == r.cid_title && l.vecCidTag == r.vecCidTag && l.vecMainGenre == r.vecMainGenre && l.vecSubGenre == r.vecSubGenre && l.vecLeadingActor == r.vecLeadingActor && l.vecDirector == r.vecDirector && l.vecCartoonGenre == r.vecCartoonGenre && l.vecCartoonAspect == r.vecCartoonAspect && l.vecProducer == r.vecProducer && l.vecAreaName == r.vecAreaName && l.vecOriginalAuthor == r.vecOriginalAuthor && l.vecVideoIds == r.vecVideoIds && l.cid_secondClass == r.cid_secondClass && l.cid_thirdClass == r.cid_thirdClass && l.playlist_id == r.playlist_id && l.series_id == r.series_id && l.vecSingerId == r.vecSingerId && l.vecBlackList == r.vecBlackList;
    }
    inline bool operator!=(const RecDetailContext&l, const RecDetailContext&r)
    {
        return !(l == r);
    }

    struct RecChannelContext : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.RecChannelContext";
        }
        static string MD5()
        {
            return "ebe20fb7a4b0728587ac699c8b95a1ce";
        }
        RecChannelContext()
        :recScene(RecCommonStruct::SCENE_NONE),bucketId(""),loadType(RecCommonStruct::LOAD_TYPE_MANUAL)
        {
        }
        void resetDefautlt()
        {
            bucketId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)recScene, 0);
            _os.write(recItemList, 1);
            _os.write(bucketId, 9);
            _os.write((taf::Int32)loadType, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = RecCommonStruct::SCENE_NONE;
            _is.read(eTemp0, 0, false);
            recScene = (RecCommonStruct::RecSceneType)eTemp0;
            _is.read(recItemList, 1, false);
            _is.read(bucketId, 9, false);
            taf::Int32 eTemp10 = RecCommonStruct::LOAD_TYPE_MANUAL;
            _is.read(eTemp10, 10, false);
            loadType = (RecCommonStruct::RecLoadType)eTemp10;
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)recScene,"recScene");
            _ds.display(recItemList,"recItemList");
            _ds.display(bucketId,"bucketId");
            _ds.display((taf::Int32)loadType,"loadType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)recScene, true);
            _ds.displaySimple(recItemList, true);
            _ds.displaySimple(bucketId, true);
            _ds.displaySimple((taf::Int32)loadType, false);
            return _os;
        }
    public:
        RecCommonStruct::RecSceneType recScene;
        vector<RecCommonStruct::RecItem> recItemList;
        std::string bucketId;
        RecCommonStruct::RecLoadType loadType;
    };
    inline bool operator==(const RecChannelContext&l, const RecChannelContext&r)
    {
        return l.recScene == r.recScene && l.recItemList == r.recItemList && l.bucketId == r.bucketId && l.loadType == r.loadType;
    }
    inline bool operator!=(const RecChannelContext&l, const RecChannelContext&r)
    {
        return !(l == r);
    }

    struct DetailPlayVideoInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.DetailPlayVideoInfo";
        }
        static string MD5()
        {
            return "0035bf57cf0f41e8bac615afccee016f";
        }
        DetailPlayVideoInfo()
        :vid(""),cid(""),historyVid(""),needReverse(true)
        {
        }
        void resetDefautlt()
        {
            vid = "";
            cid = "";
            historyVid = "";
            needReverse = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(cid, 1);
            _os.write(historyVid, 4);
            _os.write(needReverse, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, false);
            _is.read(cid, 1, false);
            _is.read(historyVid, 4, false);
            _is.read(needReverse, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(cid,"cid");
            _ds.display(historyVid,"historyVid");
            _ds.display(needReverse,"needReverse");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(historyVid, true);
            _ds.displaySimple(needReverse, false);
            return _os;
        }
    public:
        std::string vid;
        std::string cid;
        std::string historyVid;
        taf::Bool needReverse;
    };
    inline bool operator==(const DetailPlayVideoInfo&l, const DetailPlayVideoInfo&r)
    {
        return l.vid == r.vid && l.cid == r.cid && l.historyVid == r.historyVid && l.needReverse == r.needReverse;
    }
    inline bool operator!=(const DetailPlayVideoInfo&l, const DetailPlayVideoInfo&r)
    {
        return !(l == r);
    }

    struct AlgorithmExpConf : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.AlgorithmExpConf";
        }
        static string MD5()
        {
            return "de50d7cd52dae5ef0d013ba49ccdf1a6";
        }
        AlgorithmExpConf()
        :algId("")
        {
        }
        void resetDefautlt()
        {
            algId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(algId, 0);
            _os.write(paraMap, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(algId, 0, false);
            _is.read(paraMap, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(algId,"algId");
            _ds.display(paraMap,"paraMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(algId, true);
            _ds.displaySimple(paraMap, false);
            return _os;
        }
    public:
        std::string algId;
        map<std::string, std::string> paraMap;
    };
    inline bool operator==(const AlgorithmExpConf&l, const AlgorithmExpConf&r)
    {
        return l.algId == r.algId && l.paraMap == r.paraMap;
    }
    inline bool operator!=(const AlgorithmExpConf&l, const AlgorithmExpConf&r)
    {
        return !(l == r);
    }

    struct ExpLayerConf : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.ExpLayerConf";
        }
        static string MD5()
        {
            return "817e5677723dcc203116ae9fc591e44a";
        }
        ExpLayerConf()
        :layerId(""),expId(""),layerConf(""),layerType(RecCommonStruct::EXP_LAYER_NONE)
        {
        }
        void resetDefautlt()
        {
            layerId = "";
            expId = "";
            layerConf = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(layerId, 0);
            _os.write(expId, 1);
            _os.write(layerConf, 2);
            _os.write((taf::Int32)layerType, 3);
            _os.write(algVec, 4);
            _os.write(paraMap, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(layerId, 0, false);
            _is.read(expId, 1, false);
            _is.read(layerConf, 2, false);
            taf::Int32 eTemp3 = RecCommonStruct::EXP_LAYER_NONE;
            _is.read(eTemp3, 3, false);
            layerType = (RecCommonStruct::ExpLayerType)eTemp3;
            _is.read(algVec, 4, false);
            _is.read(paraMap, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(layerId,"layerId");
            _ds.display(expId,"expId");
            _ds.display(layerConf,"layerConf");
            _ds.display((taf::Int32)layerType,"layerType");
            _ds.display(algVec,"algVec");
            _ds.display(paraMap,"paraMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(layerId, true);
            _ds.displaySimple(expId, true);
            _ds.displaySimple(layerConf, true);
            _ds.displaySimple((taf::Int32)layerType, true);
            _ds.displaySimple(algVec, true);
            _ds.displaySimple(paraMap, false);
            return _os;
        }
    public:
        std::string layerId;
        std::string expId;
        std::string layerConf;
        RecCommonStruct::ExpLayerType layerType;
        vector<RecCommonStruct::AlgorithmExpConf> algVec;
        map<std::string, std::string> paraMap;
    };
    inline bool operator==(const ExpLayerConf&l, const ExpLayerConf&r)
    {
        return l.layerId == r.layerId && l.expId == r.expId && l.layerConf == r.layerConf && l.layerType == r.layerType && l.algVec == r.algVec && l.paraMap == r.paraMap;
    }
    inline bool operator!=(const ExpLayerConf&l, const ExpLayerConf&r)
    {
        return !(l == r);
    }

    struct ExpFlowInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonStruct.ExpFlowInfo";
        }
        static string MD5()
        {
            return "f4decba91f1009d218ad0dfb01956854";
        }
        ExpFlowInfo()
        :expId(""),expMode(0),expType(0),userType(0),flowId(0)
        {
        }
        void resetDefautlt()
        {
            expId = "";
            expMode = 0;
            expType = 0;
            userType = 0;
            flowId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(expId, 0);
            _os.write(expMode, 1);
            _os.write(expType, 2);
            _os.write(expLayerConfList, 3);
            _os.write(userType, 4);
            _os.write(flowId, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(expId, 0, false);
            _is.read(expMode, 1, false);
            _is.read(expType, 2, false);
            _is.read(expLayerConfList, 3, false);
            _is.read(userType, 4, false);
            _is.read(flowId, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(expId,"expId");
            _ds.display(expMode,"expMode");
            _ds.display(expType,"expType");
            _ds.display(expLayerConfList,"expLayerConfList");
            _ds.display(userType,"userType");
            _ds.display(flowId,"flowId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(expId, true);
            _ds.displaySimple(expMode, true);
            _ds.displaySimple(expType, true);
            _ds.displaySimple(expLayerConfList, true);
            _ds.displaySimple(userType, true);
            _ds.displaySimple(flowId, false);
            return _os;
        }
    public:
        std::string expId;
        taf::Int32 expMode;
        taf::Int32 expType;
        vector<RecCommonStruct::ExpLayerConf> expLayerConfList;
        taf::Int32 userType;
        taf::Int32 flowId;
    };
    inline bool operator==(const ExpFlowInfo&l, const ExpFlowInfo&r)
    {
        return l.expId == r.expId && l.expMode == r.expMode && l.expType == r.expType && l.expLayerConfList == r.expLayerConfList && l.userType == r.userType && l.flowId == r.flowId;
    }
    inline bool operator!=(const ExpFlowInfo&l, const ExpFlowInfo&r)
    {
        return !(l == r);
    }


}

#define RecCommonStruct_OneRecReasonDetail_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.id,b.id);jce_copy_struct(a.name,b.name);

#define RecCommonStruct_TagInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.id,b.id);jce_copy_struct(a.data,b.data);jce_copy_struct(a.extinfo,b.extinfo);

#define RecCommonStruct_SpecTagReqInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tagId,b.tagId);jce_copy_struct(a.tagType,b.tagType);jce_copy_struct(a.reqNum,b.reqNum);

#define RecCommonStruct_ItemInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ctype,b.ctype);jce_copy_struct(a.id,b.id);jce_copy_struct(a.data,b.data);jce_copy_struct(a.cms_data,b.cms_data);

#define RecCommonStruct_DebugInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.info,b.info);

#define RecCommonStruct_ReportInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bucketId,b.bucketId);jce_copy_struct(a.algId,b.algId);jce_copy_struct(a.reasonType,b.reasonType);jce_copy_struct(a.reason,b.reason);

#define RecCommonStruct_RecReasonInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.reason,b.reason);jce_copy_struct(a.detail,b.detail);

#define RecCommonStruct_RecTag_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tagId,b.tagId);jce_copy_struct(a.tagType,b.tagType);jce_copy_struct(a.recTitle,b.recTitle);jce_copy_struct(a.info,b.info);jce_copy_struct(a.recDebugInfo,b.recDebugInfo);jce_copy_struct(a.recReportInfo,b.recReportInfo);jce_copy_struct(a.recSubTitle,b.recSubTitle);jce_copy_struct(a.hasMore,b.hasMore);jce_copy_struct(a.insertAt,b.insertAt);jce_copy_struct(a.hasSecondPage,b.hasSecondPage);

#define RecCommonStruct_RecItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemId,b.itemId);jce_copy_struct(a.itemType,b.itemType);jce_copy_struct(a.tagId,b.tagId);jce_copy_struct(a.recPriority,b.recPriority);jce_copy_struct(a.recDebugInfo,b.recDebugInfo);jce_copy_struct(a.recReportInfo,b.recReportInfo);jce_copy_struct(a.recSubTitle,b.recSubTitle);jce_copy_struct(a.recTagList,b.recTagList);jce_copy_struct(a.recTitle,b.recTitle);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.recReason,b.recReason);jce_copy_struct(a.tagType,b.tagType);jce_copy_struct(a.info,b.info);

#define RecCommonStruct_RecContext_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.recScene,b.recScene);jce_copy_struct(a.recItemList,b.recItemList);jce_copy_struct(a.bucketId,b.bucketId);jce_copy_struct(a.vecFilterIds,b.vecFilterIds);jce_copy_struct(a.lastedTagId,b.lastedTagId);jce_copy_struct(a.lastedTagType,b.lastedTagType);jce_copy_struct(a.vecSpecTagReqInfo,b.vecSpecTagReqInfo);jce_copy_struct(a.vecRealTimeInterestInfo,b.vecRealTimeInterestInfo);jce_copy_struct(a.extendInfo,b.extendInfo);jce_copy_struct(a.loadType,b.loadType);

#define RecCommonStruct_RecDetailContext_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.recScene,b.recScene);jce_copy_struct(a.itemId,b.itemId);jce_copy_struct(a.itemType,b.itemType);jce_copy_struct(a.bucketId,b.bucketId);jce_copy_struct(a.vid_type,b.vid_type);jce_copy_struct(a.title,b.title);jce_copy_struct(a.sync_cover,b.sync_cover);jce_copy_struct(a.vecCoverList,b.vecCoverList);jce_copy_struct(a.vplus_uin,b.vplus_uin);jce_copy_struct(a.vecPioneerTag,b.vecPioneerTag);jce_copy_struct(a.vecVidTag,b.vecVidTag);jce_copy_struct(a.vid_secondClass,b.vid_secondClass);jce_copy_struct(a.vid_thirdClass,b.vid_thirdClass);jce_copy_struct(a.cid_type,b.cid_type);jce_copy_struct(a.column_id,b.column_id);jce_copy_struct(a.cid_title,b.cid_title);jce_copy_struct(a.vecCidTag,b.vecCidTag);jce_copy_struct(a.vecMainGenre,b.vecMainGenre);jce_copy_struct(a.vecSubGenre,b.vecSubGenre);jce_copy_struct(a.vecLeadingActor,b.vecLeadingActor);jce_copy_struct(a.vecDirector,b.vecDirector);jce_copy_struct(a.vecCartoonGenre,b.vecCartoonGenre);jce_copy_struct(a.vecCartoonAspect,b.vecCartoonAspect);jce_copy_struct(a.vecProducer,b.vecProducer);jce_copy_struct(a.vecAreaName,b.vecAreaName);jce_copy_struct(a.vecOriginalAuthor,b.vecOriginalAuthor);jce_copy_struct(a.vecVideoIds,b.vecVideoIds);jce_copy_struct(a.cid_secondClass,b.cid_secondClass);jce_copy_struct(a.cid_thirdClass,b.cid_thirdClass);jce_copy_struct(a.playlist_id,b.playlist_id);jce_copy_struct(a.series_id,b.series_id);jce_copy_struct(a.vecSingerId,b.vecSingerId);jce_copy_struct(a.vecBlackList,b.vecBlackList);

#define RecCommonStruct_RecChannelContext_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.recScene,b.recScene);jce_copy_struct(a.recItemList,b.recItemList);jce_copy_struct(a.bucketId,b.bucketId);jce_copy_struct(a.loadType,b.loadType);

#define RecCommonStruct_DetailPlayVideoInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.historyVid,b.historyVid);jce_copy_struct(a.needReverse,b.needReverse);

#define RecCommonStruct_AlgorithmExpConf_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.algId,b.algId);jce_copy_struct(a.paraMap,b.paraMap);

#define RecCommonStruct_ExpLayerConf_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.layerId,b.layerId);jce_copy_struct(a.expId,b.expId);jce_copy_struct(a.layerConf,b.layerConf);jce_copy_struct(a.layerType,b.layerType);jce_copy_struct(a.algVec,b.algVec);jce_copy_struct(a.paraMap,b.paraMap);

#define RecCommonStruct_ExpFlowInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.expId,b.expId);jce_copy_struct(a.expMode,b.expMode);jce_copy_struct(a.expType,b.expType);jce_copy_struct(a.expLayerConfList,b.expLayerConfList);jce_copy_struct(a.userType,b.userType);jce_copy_struct(a.flowId,b.flowId);



namespace RecCommonInterface
{
    struct GetRecItemRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonInterface.GetRecItemRequest";
        }
        static string MD5()
        {
            return "b17e0605d96c4fe046f36332299af480";
        }
        GetRecItemRequest()
        :seqNum(""),tagNum(0),recNum(0),pageContext(""),sourceKey(""),skipDedupe(0)
        {
        }
        void resetDefautlt()
        {
            seqNum = "";
            tagNum = 0;
            recNum = 0;
            pageContext = "";
            sourceKey = "";
            skipDedupe = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(seqNum, 0);
            _os.write(tagNum, 1);
            _os.write(recNum, 2);
            _os.write(recContext, 3);
            _os.write(pageContext, 4);
            _os.write(sourceKey, 5);
            _os.write(skipDedupe, 6);
            _os.write(expFlowInfo, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(seqNum, 0, true);
            _is.read(tagNum, 1, true);
            _is.read(recNum, 2, true);
            _is.read(recContext, 3, true);
            _is.read(pageContext, 4, false);
            _is.read(sourceKey, 5, false);
            _is.read(skipDedupe, 6, false);
            _is.read(expFlowInfo, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(seqNum,"seqNum");
            _ds.display(tagNum,"tagNum");
            _ds.display(recNum,"recNum");
            _ds.display(recContext,"recContext");
            _ds.display(pageContext,"pageContext");
            _ds.display(sourceKey,"sourceKey");
            _ds.display(skipDedupe,"skipDedupe");
            _ds.display(expFlowInfo,"expFlowInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(tagNum, true);
            _ds.displaySimple(recNum, true);
            _ds.displaySimple(recContext, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(sourceKey, true);
            _ds.displaySimple(skipDedupe, true);
            _ds.displaySimple(expFlowInfo, false);
            return _os;
        }
    public:
        std::string seqNum;
        taf::Int32 tagNum;
        taf::Int32 recNum;
        RecCommonStruct::RecContext recContext;
        std::string pageContext;
        std::string sourceKey;
        taf::Int32 skipDedupe;
        RecCommonStruct::ExpFlowInfo expFlowInfo;
    };
    inline bool operator==(const GetRecItemRequest&l, const GetRecItemRequest&r)
    {
        return l.seqNum == r.seqNum && l.tagNum == r.tagNum && l.recNum == r.recNum && l.recContext == r.recContext && l.pageContext == r.pageContext && l.sourceKey == r.sourceKey && l.skipDedupe == r.skipDedupe && l.expFlowInfo == r.expFlowInfo;
    }
    inline bool operator!=(const GetRecItemRequest&l, const GetRecItemRequest&r)
    {
        return !(l == r);
    }

    struct GetRecItemResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonInterface.GetRecItemResponse";
        }
        static string MD5()
        {
            return "506b15dadcd237862c643140e2f24a00";
        }
        GetRecItemResponse()
        :status(0),seqNum(""),statusMsg(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            status = 0;
            seqNum = "";
            statusMsg = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
            _os.write(seqNum, 1);
            _os.write(statusMsg, 2);
            _os.write(recItemList, 3);
            _os.write(recTagList, 4);
            _os.write(pageContext, 5);
            _os.write(recSpecialTagList, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
            _is.read(seqNum, 1, false);
            _is.read(statusMsg, 2, false);
            _is.read(recItemList, 3, false);
            _is.read(recTagList, 4, false);
            _is.read(pageContext, 5, false);
            _is.read(recSpecialTagList, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            _ds.display(seqNum,"seqNum");
            _ds.display(statusMsg,"statusMsg");
            _ds.display(recItemList,"recItemList");
            _ds.display(recTagList,"recTagList");
            _ds.display(pageContext,"pageContext");
            _ds.display(recSpecialTagList,"recSpecialTagList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, true);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(statusMsg, true);
            _ds.displaySimple(recItemList, true);
            _ds.displaySimple(recTagList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(recSpecialTagList, false);
            return _os;
        }
    public:
        taf::Int32 status;
        std::string seqNum;
        std::string statusMsg;
        vector<RecCommonStruct::RecItem> recItemList;
        vector<RecCommonStruct::RecTag> recTagList;
        std::string pageContext;
        vector<RecCommonStruct::RecTag> recSpecialTagList;
    };
    inline bool operator==(const GetRecItemResponse&l, const GetRecItemResponse&r)
    {
        return l.status == r.status && l.seqNum == r.seqNum && l.statusMsg == r.statusMsg && l.recItemList == r.recItemList && l.recTagList == r.recTagList && l.pageContext == r.pageContext && l.recSpecialTagList == r.recSpecialTagList;
    }
    inline bool operator!=(const GetRecItemResponse&l, const GetRecItemResponse&r)
    {
        return !(l == r);
    }

    struct GetRecItemByTagRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonInterface.GetRecItemByTagRequest";
        }
        static string MD5()
        {
            return "cf01030452071464a70990de08636745";
        }
        GetRecItemByTagRequest()
        :seqNum(""),tagId(""),tagType(RecCommonStruct::TAG_NONE),recNum(0),pageContext(""),sourceKey(""),skipCache(0)
        {
        }
        void resetDefautlt()
        {
            seqNum = "";
            tagId = "";
            recNum = 0;
            pageContext = "";
            sourceKey = "";
            skipCache = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(seqNum, 0);
            _os.write(tagId, 1);
            _os.write((taf::Int32)tagType, 2);
            _os.write(recNum, 3);
            _os.write(recContext, 4);
            _os.write(pageContext, 5);
            _os.write(sourceKey, 6);
            _os.write(tagInfo, 7);
            _os.write(skipCache, 9);
            _os.write(expFlowInfo, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(seqNum, 0, true);
            _is.read(tagId, 1, true);
            taf::Int32 eTemp2 = RecCommonStruct::TAG_NONE;
            _is.read(eTemp2, 2, false);
            tagType = (RecCommonStruct::TagType)eTemp2;
            _is.read(recNum, 3, true);
            _is.read(recContext, 4, true);
            _is.read(pageContext, 5, false);
            _is.read(sourceKey, 6, false);
            _is.read(tagInfo, 7, false);
            _is.read(skipCache, 9, false);
            _is.read(expFlowInfo, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(seqNum,"seqNum");
            _ds.display(tagId,"tagId");
            _ds.display((taf::Int32)tagType,"tagType");
            _ds.display(recNum,"recNum");
            _ds.display(recContext,"recContext");
            _ds.display(pageContext,"pageContext");
            _ds.display(sourceKey,"sourceKey");
            _ds.display(tagInfo,"tagInfo");
            _ds.display(skipCache,"skipCache");
            _ds.display(expFlowInfo,"expFlowInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(tagId, true);
            _ds.displaySimple((taf::Int32)tagType, true);
            _ds.displaySimple(recNum, true);
            _ds.displaySimple(recContext, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(sourceKey, true);
            _ds.displaySimple(tagInfo, true);
            _ds.displaySimple(skipCache, true);
            _ds.displaySimple(expFlowInfo, false);
            return _os;
        }
    public:
        std::string seqNum;
        std::string tagId;
        RecCommonStruct::TagType tagType;
        taf::Int32 recNum;
        RecCommonStruct::RecContext recContext;
        std::string pageContext;
        std::string sourceKey;
        RecCommonStruct::TagInfo tagInfo;
        taf::Int32 skipCache;
        RecCommonStruct::ExpFlowInfo expFlowInfo;
    };
    inline bool operator==(const GetRecItemByTagRequest&l, const GetRecItemByTagRequest&r)
    {
        return l.seqNum == r.seqNum && l.tagId == r.tagId && l.tagType == r.tagType && l.recNum == r.recNum && l.recContext == r.recContext && l.pageContext == r.pageContext && l.sourceKey == r.sourceKey && l.tagInfo == r.tagInfo && l.skipCache == r.skipCache && l.expFlowInfo == r.expFlowInfo;
    }
    inline bool operator!=(const GetRecItemByTagRequest&l, const GetRecItemByTagRequest&r)
    {
        return !(l == r);
    }

    struct GetRecItemByTagResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonInterface.GetRecItemByTagResponse";
        }
        static string MD5()
        {
            return "e1d390adbb42ed35d709ee5a5485d09c";
        }
        GetRecItemByTagResponse()
        :status(0),seqNum(""),statusMsg(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            status = 0;
            seqNum = "";
            statusMsg = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
            _os.write(seqNum, 1);
            _os.write(statusMsg, 2);
            _os.write(recItemList, 3);
            _os.write(pageContext, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
            _is.read(seqNum, 1, false);
            _is.read(statusMsg, 2, false);
            _is.read(recItemList, 3, false);
            _is.read(pageContext, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            _ds.display(seqNum,"seqNum");
            _ds.display(statusMsg,"statusMsg");
            _ds.display(recItemList,"recItemList");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, true);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(statusMsg, true);
            _ds.displaySimple(recItemList, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 status;
        std::string seqNum;
        std::string statusMsg;
        vector<RecCommonStruct::RecItem> recItemList;
        std::string pageContext;
    };
    inline bool operator==(const GetRecItemByTagResponse&l, const GetRecItemByTagResponse&r)
    {
        return l.status == r.status && l.seqNum == r.seqNum && l.statusMsg == r.statusMsg && l.recItemList == r.recItemList && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetRecItemByTagResponse&l, const GetRecItemByTagResponse&r)
    {
        return !(l == r);
    }

    struct GetDetailRecItemByTagRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonInterface.GetDetailRecItemByTagRequest";
        }
        static string MD5()
        {
            return "0b928aae1d626e491b1e1a40baa3a547";
        }
        GetDetailRecItemByTagRequest()
        :seqNum(""),tagId(""),tagType(RecCommonStruct::TAG_NONE),recNum(0),pageContext(""),sourceKey("")
        {
        }
        void resetDefautlt()
        {
            seqNum = "";
            tagId = "";
            recNum = 0;
            pageContext = "";
            sourceKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(seqNum, 0);
            _os.write(tagId, 1);
            _os.write((taf::Int32)tagType, 2);
            _os.write(recNum, 3);
            _os.write(recContext, 4);
            _os.write(pageContext, 5);
            _os.write(playInfo, 6);
            _os.write(sourceKey, 7);
            _os.write(expFlowInfo, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(seqNum, 0, true);
            _is.read(tagId, 1, true);
            taf::Int32 eTemp2 = RecCommonStruct::TAG_NONE;
            _is.read(eTemp2, 2, false);
            tagType = (RecCommonStruct::TagType)eTemp2;
            _is.read(recNum, 3, true);
            _is.read(recContext, 4, true);
            _is.read(pageContext, 5, false);
            _is.read(playInfo, 6, false);
            _is.read(sourceKey, 7, false);
            _is.read(expFlowInfo, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(seqNum,"seqNum");
            _ds.display(tagId,"tagId");
            _ds.display((taf::Int32)tagType,"tagType");
            _ds.display(recNum,"recNum");
            _ds.display(recContext,"recContext");
            _ds.display(pageContext,"pageContext");
            _ds.display(playInfo,"playInfo");
            _ds.display(sourceKey,"sourceKey");
            _ds.display(expFlowInfo,"expFlowInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(tagId, true);
            _ds.displaySimple((taf::Int32)tagType, true);
            _ds.displaySimple(recNum, true);
            _ds.displaySimple(recContext, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(playInfo, true);
            _ds.displaySimple(sourceKey, true);
            _ds.displaySimple(expFlowInfo, false);
            return _os;
        }
    public:
        std::string seqNum;
        std::string tagId;
        RecCommonStruct::TagType tagType;
        taf::Int32 recNum;
        RecCommonStruct::RecDetailContext recContext;
        std::string pageContext;
        RecCommonStruct::DetailPlayVideoInfo playInfo;
        std::string sourceKey;
        RecCommonStruct::ExpFlowInfo expFlowInfo;
    };
    inline bool operator==(const GetDetailRecItemByTagRequest&l, const GetDetailRecItemByTagRequest&r)
    {
        return l.seqNum == r.seqNum && l.tagId == r.tagId && l.tagType == r.tagType && l.recNum == r.recNum && l.recContext == r.recContext && l.pageContext == r.pageContext && l.playInfo == r.playInfo && l.sourceKey == r.sourceKey && l.expFlowInfo == r.expFlowInfo;
    }
    inline bool operator!=(const GetDetailRecItemByTagRequest&l, const GetDetailRecItemByTagRequest&r)
    {
        return !(l == r);
    }

    struct GetDetailRecItemByTagResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonInterface.GetDetailRecItemByTagResponse";
        }
        static string MD5()
        {
            return "440e58a83b073a54d1ef60ef2bddbbf0";
        }
        GetDetailRecItemByTagResponse()
        :status(0),seqNum(""),statusMsg(""),pageContext(""),recTitle(""),totalNum(0)
        {
        }
        void resetDefautlt()
        {
            status = 0;
            seqNum = "";
            statusMsg = "";
            pageContext = "";
            recTitle = "";
            totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
            _os.write(seqNum, 1);
            _os.write(statusMsg, 2);
            _os.write(recItemList, 3);
            _os.write(pageContext, 4);
            _os.write(recTitle, 5);
            _os.write(totalNum, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
            _is.read(seqNum, 1, false);
            _is.read(statusMsg, 2, false);
            _is.read(recItemList, 3, false);
            _is.read(pageContext, 4, false);
            _is.read(recTitle, 5, false);
            _is.read(totalNum, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            _ds.display(seqNum,"seqNum");
            _ds.display(statusMsg,"statusMsg");
            _ds.display(recItemList,"recItemList");
            _ds.display(pageContext,"pageContext");
            _ds.display(recTitle,"recTitle");
            _ds.display(totalNum,"totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, true);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(statusMsg, true);
            _ds.displaySimple(recItemList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(recTitle, true);
            _ds.displaySimple(totalNum, false);
            return _os;
        }
    public:
        taf::Int32 status;
        std::string seqNum;
        std::string statusMsg;
        vector<RecCommonStruct::RecItem> recItemList;
        std::string pageContext;
        std::string recTitle;
        taf::Int32 totalNum;
    };
    inline bool operator==(const GetDetailRecItemByTagResponse&l, const GetDetailRecItemByTagResponse&r)
    {
        return l.status == r.status && l.seqNum == r.seqNum && l.statusMsg == r.statusMsg && l.recItemList == r.recItemList && l.pageContext == r.pageContext && l.recTitle == r.recTitle && l.totalNum == r.totalNum;
    }
    inline bool operator!=(const GetDetailRecItemByTagResponse&l, const GetDetailRecItemByTagResponse&r)
    {
        return !(l == r);
    }

    struct GetChannelRecItemByTagRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonInterface.GetChannelRecItemByTagRequest";
        }
        static string MD5()
        {
            return "9aa45cd904267d009ebba79db4fd7743";
        }
        GetChannelRecItemByTagRequest()
        :seqNum(""),tagId(""),tagType(RecCommonStruct::TAG_NONE),recNum(0),pageContext(""),sourceKey("")
        {
        }
        void resetDefautlt()
        {
            seqNum = "";
            tagId = "";
            recNum = 0;
            pageContext = "";
            sourceKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(seqNum, 0);
            _os.write(tagId, 1);
            _os.write((taf::Int32)tagType, 2);
            _os.write(recNum, 3);
            _os.write(recContext, 4);
            _os.write(pageContext, 5);
            _os.write(sourceKey, 6);
            _os.write(expFlowInfo, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(seqNum, 0, true);
            _is.read(tagId, 1, true);
            taf::Int32 eTemp2 = RecCommonStruct::TAG_NONE;
            _is.read(eTemp2, 2, false);
            tagType = (RecCommonStruct::TagType)eTemp2;
            _is.read(recNum, 3, true);
            _is.read(recContext, 4, true);
            _is.read(pageContext, 5, false);
            _is.read(sourceKey, 6, false);
            _is.read(expFlowInfo, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(seqNum,"seqNum");
            _ds.display(tagId,"tagId");
            _ds.display((taf::Int32)tagType,"tagType");
            _ds.display(recNum,"recNum");
            _ds.display(recContext,"recContext");
            _ds.display(pageContext,"pageContext");
            _ds.display(sourceKey,"sourceKey");
            _ds.display(expFlowInfo,"expFlowInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(tagId, true);
            _ds.displaySimple((taf::Int32)tagType, true);
            _ds.displaySimple(recNum, true);
            _ds.displaySimple(recContext, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(sourceKey, true);
            _ds.displaySimple(expFlowInfo, false);
            return _os;
        }
    public:
        std::string seqNum;
        std::string tagId;
        RecCommonStruct::TagType tagType;
        taf::Int32 recNum;
        RecCommonStruct::RecChannelContext recContext;
        std::string pageContext;
        std::string sourceKey;
        RecCommonStruct::ExpFlowInfo expFlowInfo;
    };
    inline bool operator==(const GetChannelRecItemByTagRequest&l, const GetChannelRecItemByTagRequest&r)
    {
        return l.seqNum == r.seqNum && l.tagId == r.tagId && l.tagType == r.tagType && l.recNum == r.recNum && l.recContext == r.recContext && l.pageContext == r.pageContext && l.sourceKey == r.sourceKey && l.expFlowInfo == r.expFlowInfo;
    }
    inline bool operator!=(const GetChannelRecItemByTagRequest&l, const GetChannelRecItemByTagRequest&r)
    {
        return !(l == r);
    }

    struct GetChannelRecItemByTagResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonInterface.GetChannelRecItemByTagResponse";
        }
        static string MD5()
        {
            return "e1d390adbb42ed35d709ee5a5485d09c";
        }
        GetChannelRecItemByTagResponse()
        :status(0),seqNum(""),statusMsg(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            status = 0;
            seqNum = "";
            statusMsg = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
            _os.write(seqNum, 1);
            _os.write(statusMsg, 2);
            _os.write(recItemList, 3);
            _os.write(pageContext, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
            _is.read(seqNum, 1, false);
            _is.read(statusMsg, 2, false);
            _is.read(recItemList, 3, false);
            _is.read(pageContext, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            _ds.display(seqNum,"seqNum");
            _ds.display(statusMsg,"statusMsg");
            _ds.display(recItemList,"recItemList");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, true);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(statusMsg, true);
            _ds.displaySimple(recItemList, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 status;
        std::string seqNum;
        std::string statusMsg;
        vector<RecCommonStruct::RecItem> recItemList;
        std::string pageContext;
    };
    inline bool operator==(const GetChannelRecItemByTagResponse&l, const GetChannelRecItemByTagResponse&r)
    {
        return l.status == r.status && l.seqNum == r.seqNum && l.statusMsg == r.statusMsg && l.recItemList == r.recItemList && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetChannelRecItemByTagResponse&l, const GetChannelRecItemByTagResponse&r)
    {
        return !(l == r);
    }

    struct GetChannelTagRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonInterface.GetChannelTagRequest";
        }
        static string MD5()
        {
            return "4a452e6639f99129fafa8d9de785cc4a";
        }
        GetChannelTagRequest()
        :seqNum(""),channelId("")
        {
        }
        void resetDefautlt()
        {
            seqNum = "";
            channelId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(seqNum, 0);
            _os.write(channelId, 1);
            _os.write(recContext, 2);
            _os.write(expFlowInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(seqNum, 0, true);
            _is.read(channelId, 1, true);
            _is.read(recContext, 2, false);
            _is.read(expFlowInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(seqNum,"seqNum");
            _ds.display(channelId,"channelId");
            _ds.display(recContext,"recContext");
            _ds.display(expFlowInfo,"expFlowInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(channelId, true);
            _ds.displaySimple(recContext, true);
            _ds.displaySimple(expFlowInfo, false);
            return _os;
        }
    public:
        std::string seqNum;
        std::string channelId;
        RecCommonStruct::RecContext recContext;
        RecCommonStruct::ExpFlowInfo expFlowInfo;
    };
    inline bool operator==(const GetChannelTagRequest&l, const GetChannelTagRequest&r)
    {
        return l.seqNum == r.seqNum && l.channelId == r.channelId && l.recContext == r.recContext && l.expFlowInfo == r.expFlowInfo;
    }
    inline bool operator!=(const GetChannelTagRequest&l, const GetChannelTagRequest&r)
    {
        return !(l == r);
    }

    struct GetChannelTagResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonInterface.GetChannelTagResponse";
        }
        static string MD5()
        {
            return "7b8ccd6252269c53b41331bc4fb4ef13";
        }
        GetChannelTagResponse()
        :status(0),seqNum(""),statusMsg("")
        {
        }
        void resetDefautlt()
        {
            status = 0;
            seqNum = "";
            statusMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
            _os.write(seqNum, 1);
            _os.write(statusMsg, 2);
            _os.write(tagList, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
            _is.read(seqNum, 1, false);
            _is.read(statusMsg, 2, false);
            _is.read(tagList, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            _ds.display(seqNum,"seqNum");
            _ds.display(statusMsg,"statusMsg");
            _ds.display(tagList,"tagList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, true);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(statusMsg, true);
            _ds.displaySimple(tagList, false);
            return _os;
        }
    public:
        taf::Int32 status;
        std::string seqNum;
        std::string statusMsg;
        vector<RecCommonStruct::RecTag> tagList;
    };
    inline bool operator==(const GetChannelTagResponse&l, const GetChannelTagResponse&r)
    {
        return l.status == r.status && l.seqNum == r.seqNum && l.statusMsg == r.statusMsg && l.tagList == r.tagList;
    }
    inline bool operator!=(const GetChannelTagResponse&l, const GetChannelTagResponse&r)
    {
        return !(l == r);
    }

    struct GetRecItemByMultiTagRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonInterface.GetRecItemByMultiTagRequest";
        }
        static string MD5()
        {
            return "c87063b02f295a930c116564d926ba6a";
        }
        GetRecItemByMultiTagRequest()
        :seqNum(""),recNum(0),pageContext(""),sourceKey("")
        {
        }
        void resetDefautlt()
        {
            seqNum = "";
            recNum = 0;
            pageContext = "";
            sourceKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(seqNum, 0);
            _os.write(tagInfoList, 1);
            _os.write(recNum, 2);
            _os.write(recContext, 3);
            _os.write(pageContext, 4);
            _os.write(sourceKey, 5);
            _os.write(expFlowInfo, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(seqNum, 0, true);
            _is.read(tagInfoList, 1, true);
            _is.read(recNum, 2, true);
            _is.read(recContext, 3, true);
            _is.read(pageContext, 4, false);
            _is.read(sourceKey, 5, false);
            _is.read(expFlowInfo, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(seqNum,"seqNum");
            _ds.display(tagInfoList,"tagInfoList");
            _ds.display(recNum,"recNum");
            _ds.display(recContext,"recContext");
            _ds.display(pageContext,"pageContext");
            _ds.display(sourceKey,"sourceKey");
            _ds.display(expFlowInfo,"expFlowInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(tagInfoList, true);
            _ds.displaySimple(recNum, true);
            _ds.displaySimple(recContext, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(sourceKey, true);
            _ds.displaySimple(expFlowInfo, false);
            return _os;
        }
    public:
        std::string seqNum;
        vector<RecCommonStruct::RecTag> tagInfoList;
        taf::Int32 recNum;
        RecCommonStruct::RecContext recContext;
        std::string pageContext;
        std::string sourceKey;
        RecCommonStruct::ExpFlowInfo expFlowInfo;
    };
    inline bool operator==(const GetRecItemByMultiTagRequest&l, const GetRecItemByMultiTagRequest&r)
    {
        return l.seqNum == r.seqNum && l.tagInfoList == r.tagInfoList && l.recNum == r.recNum && l.recContext == r.recContext && l.pageContext == r.pageContext && l.sourceKey == r.sourceKey && l.expFlowInfo == r.expFlowInfo;
    }
    inline bool operator!=(const GetRecItemByMultiTagRequest&l, const GetRecItemByMultiTagRequest&r)
    {
        return !(l == r);
    }

    struct GetRecItemByMultiTagResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonInterface.GetRecItemByMultiTagResponse";
        }
        static string MD5()
        {
            return "e54e687500345b000f9453c47bae37c0";
        }
        GetRecItemByMultiTagResponse()
        :status(0),seqNum(""),statusMsg(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            status = 0;
            seqNum = "";
            statusMsg = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
            _os.write(seqNum, 1);
            _os.write(statusMsg, 2);
            _os.write(recItemList, 3);
            _os.write(tagList, 4);
            _os.write(pageContext, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
            _is.read(seqNum, 1, false);
            _is.read(statusMsg, 2, false);
            _is.read(recItemList, 3, false);
            _is.read(tagList, 4, false);
            _is.read(pageContext, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            _ds.display(seqNum,"seqNum");
            _ds.display(statusMsg,"statusMsg");
            _ds.display(recItemList,"recItemList");
            _ds.display(tagList,"tagList");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, true);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(statusMsg, true);
            _ds.displaySimple(recItemList, true);
            _ds.displaySimple(tagList, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 status;
        std::string seqNum;
        std::string statusMsg;
        vector<RecCommonStruct::RecItem> recItemList;
        vector<RecCommonStruct::RecTag> tagList;
        std::string pageContext;
    };
    inline bool operator==(const GetRecItemByMultiTagResponse&l, const GetRecItemByMultiTagResponse&r)
    {
        return l.status == r.status && l.seqNum == r.seqNum && l.statusMsg == r.statusMsg && l.recItemList == r.recItemList && l.tagList == r.tagList && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetRecItemByMultiTagResponse&l, const GetRecItemByMultiTagResponse&r)
    {
        return !(l == r);
    }

    struct GetExpFlowInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonInterface.GetExpFlowInfoRequest";
        }
        static string MD5()
        {
            return "a101759b2bfa0eb9cc0115055f2bd1eb";
        }
        GetExpFlowInfoRequest()
        :seqNum(""),sourceKey(""),userId("")
        {
        }
        void resetDefautlt()
        {
            seqNum = "";
            sourceKey = "";
            userId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(seqNum, 0);
            _os.write(sourceKey, 1);
            _os.write(userId, 2);
            _os.write(paraMap, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(seqNum, 0, true);
            _is.read(sourceKey, 1, true);
            _is.read(userId, 2, true);
            _is.read(paraMap, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(seqNum,"seqNum");
            _ds.display(sourceKey,"sourceKey");
            _ds.display(userId,"userId");
            _ds.display(paraMap,"paraMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(sourceKey, true);
            _ds.displaySimple(userId, true);
            _ds.displaySimple(paraMap, false);
            return _os;
        }
    public:
        std::string seqNum;
        std::string sourceKey;
        std::string userId;
        map<std::string, std::string> paraMap;
    };
    inline bool operator==(const GetExpFlowInfoRequest&l, const GetExpFlowInfoRequest&r)
    {
        return l.seqNum == r.seqNum && l.sourceKey == r.sourceKey && l.userId == r.userId && l.paraMap == r.paraMap;
    }
    inline bool operator!=(const GetExpFlowInfoRequest&l, const GetExpFlowInfoRequest&r)
    {
        return !(l == r);
    }

    struct GetExpFlowInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecCommonInterface.GetExpFlowInfoResponse";
        }
        static string MD5()
        {
            return "b1590d37a7113bc2e8a69da6b76c7880";
        }
        GetExpFlowInfoResponse()
        :status(0),seqNum("")
        {
        }
        void resetDefautlt()
        {
            status = 0;
            seqNum = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
            _os.write(seqNum, 1);
            _os.write(expFlowInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
            _is.read(seqNum, 1, false);
            _is.read(expFlowInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            _ds.display(seqNum,"seqNum");
            _ds.display(expFlowInfo,"expFlowInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, true);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(expFlowInfo, false);
            return _os;
        }
    public:
        taf::Int32 status;
        std::string seqNum;
        RecCommonStruct::ExpFlowInfo expFlowInfo;
    };
    inline bool operator==(const GetExpFlowInfoResponse&l, const GetExpFlowInfoResponse&r)
    {
        return l.status == r.status && l.seqNum == r.seqNum && l.expFlowInfo == r.expFlowInfo;
    }
    inline bool operator!=(const GetExpFlowInfoResponse&l, const GetExpFlowInfoResponse&r)
    {
        return !(l == r);
    }


}

#define RecCommonInterface_GetRecItemRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.tagNum,b.tagNum);jce_copy_struct(a.recNum,b.recNum);jce_copy_struct(a.recContext,b.recContext);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.sourceKey,b.sourceKey);jce_copy_struct(a.skipDedupe,b.skipDedupe);jce_copy_struct(a.expFlowInfo,b.expFlowInfo);

#define RecCommonInterface_GetRecItemResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.statusMsg,b.statusMsg);jce_copy_struct(a.recItemList,b.recItemList);jce_copy_struct(a.recTagList,b.recTagList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.recSpecialTagList,b.recSpecialTagList);

#define RecCommonInterface_GetRecItemByTagRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.tagId,b.tagId);jce_copy_struct(a.tagType,b.tagType);jce_copy_struct(a.recNum,b.recNum);jce_copy_struct(a.recContext,b.recContext);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.sourceKey,b.sourceKey);jce_copy_struct(a.tagInfo,b.tagInfo);jce_copy_struct(a.skipCache,b.skipCache);jce_copy_struct(a.expFlowInfo,b.expFlowInfo);

#define RecCommonInterface_GetRecItemByTagResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.statusMsg,b.statusMsg);jce_copy_struct(a.recItemList,b.recItemList);jce_copy_struct(a.pageContext,b.pageContext);

#define RecCommonInterface_GetDetailRecItemByTagRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.tagId,b.tagId);jce_copy_struct(a.tagType,b.tagType);jce_copy_struct(a.recNum,b.recNum);jce_copy_struct(a.recContext,b.recContext);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.playInfo,b.playInfo);jce_copy_struct(a.sourceKey,b.sourceKey);jce_copy_struct(a.expFlowInfo,b.expFlowInfo);

#define RecCommonInterface_GetDetailRecItemByTagResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.statusMsg,b.statusMsg);jce_copy_struct(a.recItemList,b.recItemList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.recTitle,b.recTitle);jce_copy_struct(a.totalNum,b.totalNum);

#define RecCommonInterface_GetChannelRecItemByTagRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.tagId,b.tagId);jce_copy_struct(a.tagType,b.tagType);jce_copy_struct(a.recNum,b.recNum);jce_copy_struct(a.recContext,b.recContext);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.sourceKey,b.sourceKey);jce_copy_struct(a.expFlowInfo,b.expFlowInfo);

#define RecCommonInterface_GetChannelRecItemByTagResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.statusMsg,b.statusMsg);jce_copy_struct(a.recItemList,b.recItemList);jce_copy_struct(a.pageContext,b.pageContext);

#define RecCommonInterface_GetChannelTagRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.channelId,b.channelId);jce_copy_struct(a.recContext,b.recContext);jce_copy_struct(a.expFlowInfo,b.expFlowInfo);

#define RecCommonInterface_GetChannelTagResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.statusMsg,b.statusMsg);jce_copy_struct(a.tagList,b.tagList);

#define RecCommonInterface_GetRecItemByMultiTagRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.tagInfoList,b.tagInfoList);jce_copy_struct(a.recNum,b.recNum);jce_copy_struct(a.recContext,b.recContext);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.sourceKey,b.sourceKey);jce_copy_struct(a.expFlowInfo,b.expFlowInfo);

#define RecCommonInterface_GetRecItemByMultiTagResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.statusMsg,b.statusMsg);jce_copy_struct(a.recItemList,b.recItemList);jce_copy_struct(a.tagList,b.tagList);jce_copy_struct(a.pageContext,b.pageContext);

#define RecCommonInterface_GetExpFlowInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.sourceKey,b.sourceKey);jce_copy_struct(a.userId,b.userId);jce_copy_struct(a.paraMap,b.paraMap);

#define RecCommonInterface_GetExpFlowInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.expFlowInfo,b.expFlowInfo);



namespace RecInternalInterface
{
    struct GetInterventionRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecInternalInterface.GetInterventionRequest";
        }
        static string MD5()
        {
            return "88d5a8bfdb429f257f51c9c1e36ee79c";
        }
        GetInterventionRequest()
        :seqNum(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            seqNum = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(seqNum, 0);
            _os.write(recContext, 1);
            _os.write(recItemList, 2);
            _os.write(pageContext, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(seqNum, 0, true);
            _is.read(recContext, 1, true);
            _is.read(recItemList, 2, false);
            _is.read(pageContext, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(seqNum,"seqNum");
            _ds.display(recContext,"recContext");
            _ds.display(recItemList,"recItemList");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(recContext, true);
            _ds.displaySimple(recItemList, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string seqNum;
        RecCommonStruct::RecDetailContext recContext;
        vector<RecCommonStruct::RecItem> recItemList;
        std::string pageContext;
    };
    inline bool operator==(const GetInterventionRequest&l, const GetInterventionRequest&r)
    {
        return l.seqNum == r.seqNum && l.recContext == r.recContext && l.recItemList == r.recItemList && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetInterventionRequest&l, const GetInterventionRequest&r)
    {
        return !(l == r);
    }

    struct GetInterventionResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "RecInternalInterface.GetInterventionResponse";
        }
        static string MD5()
        {
            return "13a4f16957fcff2e09fb8da506fe46ec";
        }
        GetInterventionResponse()
        :status(0),seqNum(""),statusMsg("")
        {
        }
        void resetDefautlt()
        {
            status = 0;
            seqNum = "";
            statusMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
            _os.write(seqNum, 1);
            _os.write(statusMsg, 2);
            _os.write(recItemList, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
            _is.read(seqNum, 1, false);
            _is.read(statusMsg, 2, false);
            _is.read(recItemList, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            _ds.display(seqNum,"seqNum");
            _ds.display(statusMsg,"statusMsg");
            _ds.display(recItemList,"recItemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, true);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(statusMsg, true);
            _ds.displaySimple(recItemList, false);
            return _os;
        }
    public:
        taf::Int32 status;
        std::string seqNum;
        std::string statusMsg;
        vector<RecCommonStruct::RecItem> recItemList;
    };
    inline bool operator==(const GetInterventionResponse&l, const GetInterventionResponse&r)
    {
        return l.status == r.status && l.seqNum == r.seqNum && l.statusMsg == r.statusMsg && l.recItemList == r.recItemList;
    }
    inline bool operator!=(const GetInterventionResponse&l, const GetInterventionResponse&r)
    {
        return !(l == r);
    }


}

#define RecInternalInterface_GetInterventionRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.recContext,b.recContext);jce_copy_struct(a.recItemList,b.recItemList);jce_copy_struct(a.pageContext,b.pageContext);

#define RecInternalInterface_GetInterventionResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.statusMsg,b.statusMsg);jce_copy_struct(a.recItemList,b.recItemList);



namespace GetFeedCmsInterface
{
    enum CmsInterventionType
    {
        TOP_SCENE = 0,
        REFRESH_SCENE = 1,
    };
    inline string etos(const CmsInterventionType & e)
    {
        switch(e)
        {
            case TOP_SCENE: return "TOP_SCENE";
            case REFRESH_SCENE: return "REFRESH_SCENE";
            default: return "";
        }
    }
    inline int stoe(const string & s, CmsInterventionType & e)
    {
        if(s == "TOP_SCENE")  { e=TOP_SCENE; return 0;}
        if(s == "REFRESH_SCENE")  { e=REFRESH_SCENE; return 0;}

        return -1;
    }

    struct FeedCmsItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "GetFeedCmsInterface.FeedCmsItem";
        }
        static string MD5()
        {
            return "6a65d523e2f9429995a2013c89ab7196";
        }
        FeedCmsItem()
        :expireTime(""),refresh_seq(0)
        {
        }
        void resetDefautlt()
        {
            expireTime = "";
            refresh_seq = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(item, 0);
            _os.write(expireTime, 1);
            _os.write(refresh_seq, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(item, 0, true);
            _is.read(expireTime, 1, false);
            _is.read(refresh_seq, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(item,"item");
            _ds.display(expireTime,"expireTime");
            _ds.display(refresh_seq,"refresh_seq");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(item, true);
            _ds.displaySimple(expireTime, true);
            _ds.displaySimple(refresh_seq, false);
            return _os;
        }
    public:
        RecCommonStruct::RecItem item;
        std::string expireTime;
        taf::Int32 refresh_seq;
    };
    inline bool operator==(const FeedCmsItem&l, const FeedCmsItem&r)
    {
        return l.item == r.item && l.expireTime == r.expireTime && l.refresh_seq == r.refresh_seq;
    }
    inline bool operator!=(const FeedCmsItem&l, const FeedCmsItem&r)
    {
        return !(l == r);
    }

    struct GetFeedsCmsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "GetFeedCmsInterface.GetFeedsCmsRequest";
        }
        static string MD5()
        {
            return "1cb1682f0b1c8f4c93396aec77bfb626";
        }
        GetFeedsCmsRequest()
        :seqNum(""),scene(GetFeedCmsInterface::TOP_SCENE),pageContext(""),sourceKey("")
        {
        }
        void resetDefautlt()
        {
            seqNum = "";
            pageContext = "";
            sourceKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(seqNum, 0);
            _os.write((taf::Int32)scene, 1);
            _os.write(pageContext, 2);
            _os.write(sourceKey, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(seqNum, 0, true);
            taf::Int32 eTemp1 = GetFeedCmsInterface::TOP_SCENE;
            _is.read(eTemp1, 1, true);
            scene = (GetFeedCmsInterface::CmsInterventionType)eTemp1;
            _is.read(pageContext, 2, false);
            _is.read(sourceKey, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(seqNum,"seqNum");
            _ds.display((taf::Int32)scene,"scene");
            _ds.display(pageContext,"pageContext");
            _ds.display(sourceKey,"sourceKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple((taf::Int32)scene, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(sourceKey, false);
            return _os;
        }
    public:
        std::string seqNum;
        GetFeedCmsInterface::CmsInterventionType scene;
        std::string pageContext;
        std::string sourceKey;
    };
    inline bool operator==(const GetFeedsCmsRequest&l, const GetFeedsCmsRequest&r)
    {
        return l.seqNum == r.seqNum && l.scene == r.scene && l.pageContext == r.pageContext && l.sourceKey == r.sourceKey;
    }
    inline bool operator!=(const GetFeedsCmsRequest&l, const GetFeedsCmsRequest&r)
    {
        return !(l == r);
    }

    struct GetFeedsCmsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "GetFeedCmsInterface.GetFeedsCmsResponse";
        }
        static string MD5()
        {
            return "7155f513be058246535717a64253ba0d";
        }
        GetFeedsCmsResponse()
        :status(0),seqNum(""),statusMsg("")
        {
        }
        void resetDefautlt()
        {
            status = 0;
            seqNum = "";
            statusMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(status, 0);
            _os.write(seqNum, 1);
            _os.write(statusMsg, 2);
            _os.write(cmsItemList, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(status, 0, true);
            _is.read(seqNum, 1, false);
            _is.read(statusMsg, 2, false);
            _is.read(cmsItemList, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(status,"status");
            _ds.display(seqNum,"seqNum");
            _ds.display(statusMsg,"statusMsg");
            _ds.display(cmsItemList,"cmsItemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(status, true);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(statusMsg, true);
            _ds.displaySimple(cmsItemList, false);
            return _os;
        }
    public:
        taf::Int32 status;
        std::string seqNum;
        std::string statusMsg;
        vector<GetFeedCmsInterface::FeedCmsItem> cmsItemList;
    };
    inline bool operator==(const GetFeedsCmsResponse&l, const GetFeedsCmsResponse&r)
    {
        return l.status == r.status && l.seqNum == r.seqNum && l.statusMsg == r.statusMsg && l.cmsItemList == r.cmsItemList;
    }
    inline bool operator!=(const GetFeedsCmsResponse&l, const GetFeedsCmsResponse&r)
    {
        return !(l == r);
    }


}

#define GetFeedCmsInterface_FeedCmsItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.item,b.item);jce_copy_struct(a.expireTime,b.expireTime);jce_copy_struct(a.refresh_seq,b.refresh_seq);

#define GetFeedCmsInterface_GetFeedsCmsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.scene,b.scene);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.sourceKey,b.sourceKey);

#define GetFeedCmsInterface_GetFeedsCmsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.status,b.status);jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.statusMsg,b.statusMsg);jce_copy_struct(a.cmsItemList,b.cmsItemList);



#endif
