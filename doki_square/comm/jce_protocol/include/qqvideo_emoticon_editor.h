// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_emoticon_editor.jce'
// **********************************************************************

#ifndef __QQVIDEO_EMOTICON_EDITOR_H_
#define __QQVIDEO_EMOTICON_EDITOR_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace jce
{
    struct EmoticonCommonParams : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EmoticonCommonParams";
        }
        static string MD5()
        {
            return "0add9efb079771e6996123c131246f3e";
        }
        EmoticonCommonParams()
        :ulAppId(0),secret(""),from(0)
        {
        }
        void resetDefautlt()
        {
            ulAppId = 0;
            secret = "";
            from = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ulAppId, 0);
            _os.write(secret, 1);
            _os.write(from, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ulAppId, 0, true);
            _is.read(secret, 1, false);
            _is.read(from, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ulAppId,"ulAppId");
            _ds.display(secret,"secret");
            _ds.display(from,"from");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ulAppId, true);
            _ds.displaySimple(secret, true);
            _ds.displaySimple(from, false);
            return _os;
        }
    public:
        taf::UInt32 ulAppId;
        std::string secret;
        taf::Int32 from;
    };
    inline bool operator==(const EmoticonCommonParams&l, const EmoticonCommonParams&r)
    {
        return l.ulAppId == r.ulAppId && l.secret == r.secret && l.from == r.from;
    }
    inline bool operator!=(const EmoticonCommonParams&l, const EmoticonCommonParams&r)
    {
        return !(l == r);
    }

    struct EmoticonTagInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EmoticonTagInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        EmoticonTagInfo()
        :tagId(""),tagContent("")
        {
        }
        void resetDefautlt()
        {
            tagId = "";
            tagContent = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tagId, 0);
            _os.write(tagContent, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tagId, 0, true);
            _is.read(tagContent, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tagId,"tagId");
            _ds.display(tagContent,"tagContent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tagId, true);
            _ds.displaySimple(tagContent, false);
            return _os;
        }
    public:
        std::string tagId;
        std::string tagContent;
    };
    inline bool operator==(const EmoticonTagInfo&l, const EmoticonTagInfo&r)
    {
        return l.tagId == r.tagId && l.tagContent == r.tagContent;
    }
    inline bool operator!=(const EmoticonTagInfo&l, const EmoticonTagInfo&r)
    {
        return !(l == r);
    }

    struct EmoticonMaterialInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EmoticonMaterialInfo";
        }
        static string MD5()
        {
            return "2b3f1e531810f0cc8c050e4a05048658";
        }
        EmoticonMaterialInfo()
        :materialId(""),picUrl(""),description(""),stickerData(""),status(0),ulVuid(0),ulAppId(0),source(0),createTime(0),rtxName(""),imageType(-1)
        {
        }
        void resetDefautlt()
        {
            materialId = "";
            picUrl = "";
            description = "";
            stickerData = "";
            status = 0;
            ulVuid = 0;
            ulAppId = 0;
            source = 0;
            createTime = 0;
            rtxName = "";
            imageType = -1;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(materialId, 0);
            _os.write(picUrl, 1);
            _os.write(description, 2);
            _os.write(stickerData, 3);
            _os.write(vecTag, 4);
            _os.write(vecTagM, 5);
            _os.write(status, 6);
            _os.write(ulVuid, 7);
            _os.write(ulAppId, 8);
            _os.write(source, 9);
            _os.write(createTime, 10);
            _os.write(rtxName, 11);
            _os.write(imageType, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(materialId, 0, true);
            _is.read(picUrl, 1, true);
            _is.read(description, 2, false);
            _is.read(stickerData, 3, false);
            _is.read(vecTag, 4, false);
            _is.read(vecTagM, 5, false);
            _is.read(status, 6, false);
            _is.read(ulVuid, 7, false);
            _is.read(ulAppId, 8, false);
            _is.read(source, 9, false);
            _is.read(createTime, 10, false);
            _is.read(rtxName, 11, false);
            _is.read(imageType, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(materialId,"materialId");
            _ds.display(picUrl,"picUrl");
            _ds.display(description,"description");
            _ds.display(stickerData,"stickerData");
            _ds.display(vecTag,"vecTag");
            _ds.display(vecTagM,"vecTagM");
            _ds.display(status,"status");
            _ds.display(ulVuid,"ulVuid");
            _ds.display(ulAppId,"ulAppId");
            _ds.display(source,"source");
            _ds.display(createTime,"createTime");
            _ds.display(rtxName,"rtxName");
            _ds.display(imageType,"imageType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(materialId, true);
            _ds.displaySimple(picUrl, true);
            _ds.displaySimple(description, true);
            _ds.displaySimple(stickerData, true);
            _ds.displaySimple(vecTag, true);
            _ds.displaySimple(vecTagM, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(ulVuid, true);
            _ds.displaySimple(ulAppId, true);
            _ds.displaySimple(source, true);
            _ds.displaySimple(createTime, true);
            _ds.displaySimple(rtxName, true);
            _ds.displaySimple(imageType, false);
            return _os;
        }
    public:
        std::string materialId;
        std::string picUrl;
        std::string description;
        std::string stickerData;
        vector<jce::EmoticonTagInfo> vecTag;
        vector<jce::EmoticonTagInfo> vecTagM;
        taf::Int32 status;
        taf::UInt32 ulVuid;
        taf::UInt32 ulAppId;
        taf::Int32 source;
        taf::UInt32 createTime;
        std::string rtxName;
        taf::Int32 imageType;
    };
    inline bool operator==(const EmoticonMaterialInfo&l, const EmoticonMaterialInfo&r)
    {
        return l.materialId == r.materialId && l.picUrl == r.picUrl && l.description == r.description && l.stickerData == r.stickerData && l.vecTag == r.vecTag && l.vecTagM == r.vecTagM && l.status == r.status && l.ulVuid == r.ulVuid && l.ulAppId == r.ulAppId && l.source == r.source && l.createTime == r.createTime && l.rtxName == r.rtxName && l.imageType == r.imageType;
    }
    inline bool operator!=(const EmoticonMaterialInfo&l, const EmoticonMaterialInfo&r)
    {
        return !(l == r);
    }

    struct EmoticonInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EmoticonInfo";
        }
        static string MD5()
        {
            return "33f2e9234f1ed578d676948aec6554fd";
        }
        EmoticonInfo()
        :emoticonId(""),thumbnailUrl(""),previewUrl(""),imageUrl(""),description(""),stickerData(""),status(0),ulVuid(0),ulAppId(0),source(0),createTime(0),rtxName(""),imageType(-1)
        {
        }
        void resetDefautlt()
        {
            emoticonId = "";
            thumbnailUrl = "";
            previewUrl = "";
            imageUrl = "";
            description = "";
            stickerData = "";
            status = 0;
            ulVuid = 0;
            ulAppId = 0;
            source = 0;
            createTime = 0;
            rtxName = "";
            imageType = -1;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(emoticonId, 0);
            _os.write(thumbnailUrl, 1);
            _os.write(previewUrl, 2);
            _os.write(imageUrl, 3);
            _os.write(description, 4);
            _os.write(stickerData, 5);
            _os.write(vecTag, 6);
            _os.write(vecTagM, 7);
            _os.write(status, 8);
            _os.write(ulVuid, 9);
            _os.write(ulAppId, 10);
            _os.write(source, 11);
            _os.write(createTime, 12);
            _os.write(rtxName, 13);
            _os.write(imageType, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(emoticonId, 0, true);
            _is.read(thumbnailUrl, 1, true);
            _is.read(previewUrl, 2, true);
            _is.read(imageUrl, 3, true);
            _is.read(description, 4, false);
            _is.read(stickerData, 5, false);
            _is.read(vecTag, 6, false);
            _is.read(vecTagM, 7, false);
            _is.read(status, 8, false);
            _is.read(ulVuid, 9, false);
            _is.read(ulAppId, 10, false);
            _is.read(source, 11, false);
            _is.read(createTime, 12, false);
            _is.read(rtxName, 13, false);
            _is.read(imageType, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(emoticonId,"emoticonId");
            _ds.display(thumbnailUrl,"thumbnailUrl");
            _ds.display(previewUrl,"previewUrl");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(description,"description");
            _ds.display(stickerData,"stickerData");
            _ds.display(vecTag,"vecTag");
            _ds.display(vecTagM,"vecTagM");
            _ds.display(status,"status");
            _ds.display(ulVuid,"ulVuid");
            _ds.display(ulAppId,"ulAppId");
            _ds.display(source,"source");
            _ds.display(createTime,"createTime");
            _ds.display(rtxName,"rtxName");
            _ds.display(imageType,"imageType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(emoticonId, true);
            _ds.displaySimple(thumbnailUrl, true);
            _ds.displaySimple(previewUrl, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(description, true);
            _ds.displaySimple(stickerData, true);
            _ds.displaySimple(vecTag, true);
            _ds.displaySimple(vecTagM, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(ulVuid, true);
            _ds.displaySimple(ulAppId, true);
            _ds.displaySimple(source, true);
            _ds.displaySimple(createTime, true);
            _ds.displaySimple(rtxName, true);
            _ds.displaySimple(imageType, false);
            return _os;
        }
    public:
        std::string emoticonId;
        std::string thumbnailUrl;
        std::string previewUrl;
        std::string imageUrl;
        std::string description;
        std::string stickerData;
        vector<jce::EmoticonTagInfo> vecTag;
        vector<jce::EmoticonTagInfo> vecTagM;
        taf::Int32 status;
        taf::UInt32 ulVuid;
        taf::UInt32 ulAppId;
        taf::Int32 source;
        taf::UInt32 createTime;
        std::string rtxName;
        taf::Int32 imageType;
    };
    inline bool operator==(const EmoticonInfo&l, const EmoticonInfo&r)
    {
        return l.emoticonId == r.emoticonId && l.thumbnailUrl == r.thumbnailUrl && l.previewUrl == r.previewUrl && l.imageUrl == r.imageUrl && l.description == r.description && l.stickerData == r.stickerData && l.vecTag == r.vecTag && l.vecTagM == r.vecTagM && l.status == r.status && l.ulVuid == r.ulVuid && l.ulAppId == r.ulAppId && l.source == r.source && l.createTime == r.createTime && l.rtxName == r.rtxName && l.imageType == r.imageType;
    }
    inline bool operator!=(const EmoticonInfo&l, const EmoticonInfo&r)
    {
        return !(l == r);
    }

    struct EmoticonTabItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EmoticonTabItem";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        EmoticonTabItem()
        :tabId(""),title(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            tabId = "";
            title = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tabId, 0);
            _os.write(title, 1);
            _os.write(reportKey, 2);
            _os.write(reportParams, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tabId, 0, true);
            _is.read(title, 1, true);
            _is.read(reportKey, 2, false);
            _is.read(reportParams, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tabId,"tabId");
            _ds.display(title,"title");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tabId, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string tabId;
        std::string title;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const EmoticonTabItem&l, const EmoticonTabItem&r)
    {
        return l.tabId == r.tabId && l.title == r.title && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const EmoticonTabItem&l, const EmoticonTabItem&r)
    {
        return !(l == r);
    }

    struct EmoticonTabListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EmoticonTabListRequest";
        }
        static string MD5()
        {
            return "4174107582f2ac62ba553b06e64af67c";
        }
        EmoticonTabListRequest()
        :type(0),dataKey("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commonParams, 0);
            _os.write(type, 1);
            _os.write(dataKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commonParams, 0, true);
            _is.read(type, 1, false);
            _is.read(dataKey, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commonParams,"commonParams");
            _ds.display(type,"type");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commonParams, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        jce::EmoticonCommonParams commonParams;
        taf::Int32 type;
        std::string dataKey;
    };
    inline bool operator==(const EmoticonTabListRequest&l, const EmoticonTabListRequest&r)
    {
        return l.commonParams == r.commonParams && l.type == r.type && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const EmoticonTabListRequest&l, const EmoticonTabListRequest&r)
    {
        return !(l == r);
    }

    struct EmoticonTabListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EmoticonTabListResponse";
        }
        static string MD5()
        {
            return "f5bcb48cd069866fcd90748ce7507852";
        }
        EmoticonTabListResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(tabList, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(tabList, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(tabList,"tabList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(tabList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        vector<jce::EmoticonTabItem> tabList;
    };
    inline bool operator==(const EmoticonTabListResponse&l, const EmoticonTabListResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.tabList == r.tabList;
    }
    inline bool operator!=(const EmoticonTabListResponse&l, const EmoticonTabListResponse&r)
    {
        return !(l == r);
    }

    struct EmoticonPageDataRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EmoticonPageDataRequest";
        }
        static string MD5()
        {
            return "85bbd91dee44608052850d3d355b0c29";
        }
        EmoticonPageDataRequest()
        :tabId(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            tabId = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commonParams, 0);
            _os.write(tabId, 1);
            _os.write(pageContext, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commonParams, 0, true);
            _is.read(tabId, 1, true);
            _is.read(pageContext, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commonParams,"commonParams");
            _ds.display(tabId,"tabId");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commonParams, true);
            _ds.displaySimple(tabId, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        jce::EmoticonCommonParams commonParams;
        std::string tabId;
        std::string pageContext;
    };
    inline bool operator==(const EmoticonPageDataRequest&l, const EmoticonPageDataRequest&r)
    {
        return l.commonParams == r.commonParams && l.tabId == r.tabId && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const EmoticonPageDataRequest&l, const EmoticonPageDataRequest&r)
    {
        return !(l == r);
    }

    struct EmoticonPageDataResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EmoticonPageDataResponse";
        }
        static string MD5()
        {
            return "054d27d38bb6cea255eb81433aba0ad5";
        }
        EmoticonPageDataResponse()
        :errCode(0),errMsg(""),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(list, 2);
            _os.write(pageContext, 3);
            _os.write(hasNextPage, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(list, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(hasNextPage, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(list,"list");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(list, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        vector<jce::EmoticonMaterialInfo> list;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const EmoticonPageDataResponse&l, const EmoticonPageDataResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.list == r.list && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const EmoticonPageDataResponse&l, const EmoticonPageDataResponse&r)
    {
        return !(l == r);
    }

    struct EmoticonCommitRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EmoticonCommitRequest";
        }
        static string MD5()
        {
            return "8aae1b827d6b9b08cbcb1e77c262948d";
        }
        EmoticonCommitRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commonParams, 0);
            _os.write(emoticonInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commonParams, 0, true);
            _is.read(emoticonInfo, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commonParams,"commonParams");
            _ds.display(emoticonInfo,"emoticonInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commonParams, true);
            _ds.displaySimple(emoticonInfo, false);
            return _os;
        }
    public:
        jce::EmoticonCommonParams commonParams;
        jce::EmoticonInfo emoticonInfo;
    };
    inline bool operator==(const EmoticonCommitRequest&l, const EmoticonCommitRequest&r)
    {
        return l.commonParams == r.commonParams && l.emoticonInfo == r.emoticonInfo;
    }
    inline bool operator!=(const EmoticonCommitRequest&l, const EmoticonCommitRequest&r)
    {
        return !(l == r);
    }

    struct EmoticonCommitResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EmoticonCommitResponse";
        }
        static string MD5()
        {
            return "cc3d916f8149e1d7fa3b9324940ea946";
        }
        EmoticonCommitResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(emoticonInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(emoticonInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(emoticonInfo,"emoticonInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(emoticonInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        jce::EmoticonInfo emoticonInfo;
    };
    inline bool operator==(const EmoticonCommitResponse&l, const EmoticonCommitResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.emoticonInfo == r.emoticonInfo;
    }
    inline bool operator!=(const EmoticonCommitResponse&l, const EmoticonCommitResponse&r)
    {
        return !(l == r);
    }

    struct EmoticonInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EmoticonInfoRequest";
        }
        static string MD5()
        {
            return "6a5619a87d13b3476894d1476545327e";
        }
        EmoticonInfoRequest()
        :emoticonId("")
        {
        }
        void resetDefautlt()
        {
            emoticonId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(commonParams, 0);
            _os.write(emoticonId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(commonParams, 0, true);
            _is.read(emoticonId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(commonParams,"commonParams");
            _ds.display(emoticonId,"emoticonId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(commonParams, true);
            _ds.displaySimple(emoticonId, false);
            return _os;
        }
    public:
        jce::EmoticonCommonParams commonParams;
        std::string emoticonId;
    };
    inline bool operator==(const EmoticonInfoRequest&l, const EmoticonInfoRequest&r)
    {
        return l.commonParams == r.commonParams && l.emoticonId == r.emoticonId;
    }
    inline bool operator!=(const EmoticonInfoRequest&l, const EmoticonInfoRequest&r)
    {
        return !(l == r);
    }

    struct EmoticonInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.EmoticonInfoResponse";
        }
        static string MD5()
        {
            return "cc3d916f8149e1d7fa3b9324940ea946";
        }
        EmoticonInfoResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(emoticonInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(emoticonInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(emoticonInfo,"emoticonInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(emoticonInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        jce::EmoticonInfo emoticonInfo;
    };
    inline bool operator==(const EmoticonInfoResponse&l, const EmoticonInfoResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.emoticonInfo == r.emoticonInfo;
    }
    inline bool operator!=(const EmoticonInfoResponse&l, const EmoticonInfoResponse&r)
    {
        return !(l == r);
    }


}

#define jce_EmoticonCommonParams_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ulAppId,b.ulAppId);jce_copy_struct(a.secret,b.secret);jce_copy_struct(a.from,b.from);

#define jce_EmoticonTagInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tagId,b.tagId);jce_copy_struct(a.tagContent,b.tagContent);

#define jce_EmoticonMaterialInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.materialId,b.materialId);jce_copy_struct(a.picUrl,b.picUrl);jce_copy_struct(a.description,b.description);jce_copy_struct(a.stickerData,b.stickerData);jce_copy_struct(a.vecTag,b.vecTag);jce_copy_struct(a.vecTagM,b.vecTagM);jce_copy_struct(a.status,b.status);jce_copy_struct(a.ulVuid,b.ulVuid);jce_copy_struct(a.ulAppId,b.ulAppId);jce_copy_struct(a.source,b.source);jce_copy_struct(a.createTime,b.createTime);jce_copy_struct(a.rtxName,b.rtxName);jce_copy_struct(a.imageType,b.imageType);

#define jce_EmoticonInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.emoticonId,b.emoticonId);jce_copy_struct(a.thumbnailUrl,b.thumbnailUrl);jce_copy_struct(a.previewUrl,b.previewUrl);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.description,b.description);jce_copy_struct(a.stickerData,b.stickerData);jce_copy_struct(a.vecTag,b.vecTag);jce_copy_struct(a.vecTagM,b.vecTagM);jce_copy_struct(a.status,b.status);jce_copy_struct(a.ulVuid,b.ulVuid);jce_copy_struct(a.ulAppId,b.ulAppId);jce_copy_struct(a.source,b.source);jce_copy_struct(a.createTime,b.createTime);jce_copy_struct(a.rtxName,b.rtxName);jce_copy_struct(a.imageType,b.imageType);

#define jce_EmoticonTabItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tabId,b.tabId);jce_copy_struct(a.title,b.title);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define jce_EmoticonTabListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commonParams,b.commonParams);jce_copy_struct(a.type,b.type);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_EmoticonTabListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.tabList,b.tabList);

#define jce_EmoticonPageDataRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commonParams,b.commonParams);jce_copy_struct(a.tabId,b.tabId);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_EmoticonPageDataResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.list,b.list);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_EmoticonCommitRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commonParams,b.commonParams);jce_copy_struct(a.emoticonInfo,b.emoticonInfo);

#define jce_EmoticonCommitResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.emoticonInfo,b.emoticonInfo);

#define jce_EmoticonInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.commonParams,b.commonParams);jce_copy_struct(a.emoticonId,b.emoticonId);

#define jce_EmoticonInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.emoticonInfo,b.emoticonInfo);



#endif
