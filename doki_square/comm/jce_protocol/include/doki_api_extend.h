// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `doki_api_extend.jce'
// **********************************************************************

#ifndef __DOKI_API_EXTEND_H_
#define __DOKI_API_EXTEND_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace DokiAPI
{
    enum CMD
    {
        CMD_JOIN_WELCOME = 63990,
        CMD_FANS_COUNT_BY_FEED = 63999,
        CMD_GET_USR_IN_DOKI_INFO = 64001,
        CMD_FLW_MSG = 60457,
        CMD_FLW_DOKI_LIST = 64329,
        CMD_APP_FLW_DOKI_LIST = 64384,
    };
    inline string etos(const CMD & e)
    {
        switch(e)
        {
            case CMD_JOIN_WELCOME: return "CMD_JOIN_WELCOME";
            case CMD_FANS_COUNT_BY_FEED: return "CMD_FANS_COUNT_BY_FEED";
            case CMD_GET_USR_IN_DOKI_INFO: return "CMD_GET_USR_IN_DOKI_INFO";
            case CMD_FLW_MSG: return "CMD_FLW_MSG";
            case CMD_FLW_DOKI_LIST: return "CMD_FLW_DOKI_LIST";
            case CMD_APP_FLW_DOKI_LIST: return "CMD_APP_FLW_DOKI_LIST";
            default: return "";
        }
    }
    inline int stoe(const string & s, CMD & e)
    {
        if(s == "CMD_JOIN_WELCOME")  { e=CMD_JOIN_WELCOME; return 0;}
        if(s == "CMD_FANS_COUNT_BY_FEED")  { e=CMD_FANS_COUNT_BY_FEED; return 0;}
        if(s == "CMD_GET_USR_IN_DOKI_INFO")  { e=CMD_GET_USR_IN_DOKI_INFO; return 0;}
        if(s == "CMD_FLW_MSG")  { e=CMD_FLW_MSG; return 0;}
        if(s == "CMD_FLW_DOKI_LIST")  { e=CMD_FLW_DOKI_LIST; return 0;}
        if(s == "CMD_APP_FLW_DOKI_LIST")  { e=CMD_APP_FLW_DOKI_LIST; return 0;}

        return -1;
    }

    enum EMixedInfoKey
    {
        ELETTER = 1,
        EVOICE = 2,
        EUSR_NICK = 3,
        EDOKI_NICK = 4,
        ERANK = 5,
        ELETTER_AUTHOR_NICK = 6,
        EBADGE = 7,
        EBADGE_LEVEL = 8,
        EDOKI_HEADER = 9,
        ELETTER_AUTHOR_HEADER = 10,
        EDOKI_CUTOUT = 11,
        EJOIN_TIME = 12,
    };
    inline string etos(const EMixedInfoKey & e)
    {
        switch(e)
        {
            case ELETTER: return "ELETTER";
            case EVOICE: return "EVOICE";
            case EUSR_NICK: return "EUSR_NICK";
            case EDOKI_NICK: return "EDOKI_NICK";
            case ERANK: return "ERANK";
            case ELETTER_AUTHOR_NICK: return "ELETTER_AUTHOR_NICK";
            case EBADGE: return "EBADGE";
            case EBADGE_LEVEL: return "EBADGE_LEVEL";
            case EDOKI_HEADER: return "EDOKI_HEADER";
            case ELETTER_AUTHOR_HEADER: return "ELETTER_AUTHOR_HEADER";
            case EDOKI_CUTOUT: return "EDOKI_CUTOUT";
            case EJOIN_TIME: return "EJOIN_TIME";
            default: return "";
        }
    }
    inline int stoe(const string & s, EMixedInfoKey & e)
    {
        if(s == "ELETTER")  { e=ELETTER; return 0;}
        if(s == "EVOICE")  { e=EVOICE; return 0;}
        if(s == "EUSR_NICK")  { e=EUSR_NICK; return 0;}
        if(s == "EDOKI_NICK")  { e=EDOKI_NICK; return 0;}
        if(s == "ERANK")  { e=ERANK; return 0;}
        if(s == "ELETTER_AUTHOR_NICK")  { e=ELETTER_AUTHOR_NICK; return 0;}
        if(s == "EBADGE")  { e=EBADGE; return 0;}
        if(s == "EBADGE_LEVEL")  { e=EBADGE_LEVEL; return 0;}
        if(s == "EDOKI_HEADER")  { e=EDOKI_HEADER; return 0;}
        if(s == "ELETTER_AUTHOR_HEADER")  { e=ELETTER_AUTHOR_HEADER; return 0;}
        if(s == "EDOKI_CUTOUT")  { e=EDOKI_CUTOUT; return 0;}
        if(s == "EJOIN_TIME")  { e=EJOIN_TIME; return 0;}

        return -1;
    }

    enum EDokiType
    {
        EDOKI_STAR = 0,
        EDOKI_VIDEO = 1,
        EDOKI_INTEREST = 2,
        EDOKI_INNER = 3,
        EDOKI_GAME = 4,
        EDOKI_PHOTO = 5,
        EDOKI_ACGN = 6,
        EDOKI_ANIME = 7,
        EDOKI_NOVEL = 8,
        EDOKI_ALLTYPE = 1000,
        EDOKI_GROUP_ACGN = 2000,
    };
    inline string etos(const EDokiType & e)
    {
        switch(e)
        {
            case EDOKI_STAR: return "EDOKI_STAR";
            case EDOKI_VIDEO: return "EDOKI_VIDEO";
            case EDOKI_INTEREST: return "EDOKI_INTEREST";
            case EDOKI_INNER: return "EDOKI_INNER";
            case EDOKI_GAME: return "EDOKI_GAME";
            case EDOKI_PHOTO: return "EDOKI_PHOTO";
            case EDOKI_ACGN: return "EDOKI_ACGN";
            case EDOKI_ANIME: return "EDOKI_ANIME";
            case EDOKI_NOVEL: return "EDOKI_NOVEL";
            case EDOKI_ALLTYPE: return "EDOKI_ALLTYPE";
            case EDOKI_GROUP_ACGN: return "EDOKI_GROUP_ACGN";
            default: return "";
        }
    }
    inline int stoe(const string & s, EDokiType & e)
    {
        if(s == "EDOKI_STAR")  { e=EDOKI_STAR; return 0;}
        if(s == "EDOKI_VIDEO")  { e=EDOKI_VIDEO; return 0;}
        if(s == "EDOKI_INTEREST")  { e=EDOKI_INTEREST; return 0;}
        if(s == "EDOKI_INNER")  { e=EDOKI_INNER; return 0;}
        if(s == "EDOKI_GAME")  { e=EDOKI_GAME; return 0;}
        if(s == "EDOKI_PHOTO")  { e=EDOKI_PHOTO; return 0;}
        if(s == "EDOKI_ACGN")  { e=EDOKI_ACGN; return 0;}
        if(s == "EDOKI_ANIME")  { e=EDOKI_ANIME; return 0;}
        if(s == "EDOKI_NOVEL")  { e=EDOKI_NOVEL; return 0;}
        if(s == "EDOKI_ALLTYPE")  { e=EDOKI_ALLTYPE; return 0;}
        if(s == "EDOKI_GROUP_ACGN")  { e=EDOKI_GROUP_ACGN; return 0;}

        return -1;
    }

    enum EDokiListScene
    {
        ELS_TEMPRARY = 0,
        ELS_ACGN = 1,
        ELS_ACGN_RECC = 2,
    };
    inline string etos(const EDokiListScene & e)
    {
        switch(e)
        {
            case ELS_TEMPRARY: return "ELS_TEMPRARY";
            case ELS_ACGN: return "ELS_ACGN";
            case ELS_ACGN_RECC: return "ELS_ACGN_RECC";
            default: return "";
        }
    }
    inline int stoe(const string & s, EDokiListScene & e)
    {
        if(s == "ELS_TEMPRARY")  { e=ELS_TEMPRARY; return 0;}
        if(s == "ELS_ACGN")  { e=ELS_ACGN; return 0;}
        if(s == "ELS_ACGN_RECC")  { e=ELS_ACGN_RECC; return 0;}

        return -1;
    }

    struct stFeedFansCountReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiAPI.stFeedFansCountReq";
        }
        static string MD5()
        {
            return "8d61b639cda77ea57102c6b9cbb5aca2";
        }
        stFeedFansCountReq()
        :strFeedId(""),strDokiid(""),iFrom(0)
        {
        }
        void resetDefautlt()
        {
            strFeedId = "";
            strDokiid = "";
            iFrom = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strFeedId, 0);
            _os.write(strDokiid, 1);
            _os.write(iFrom, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strFeedId, 0, true);
            _is.read(strDokiid, 1, true);
            _is.read(iFrom, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strFeedId,"strFeedId");
            _ds.display(strDokiid,"strDokiid");
            _ds.display(iFrom,"iFrom");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strFeedId, true);
            _ds.displaySimple(strDokiid, true);
            _ds.displaySimple(iFrom, false);
            return _os;
        }
    public:
        std::string strFeedId;
        std::string strDokiid;
        taf::Int32 iFrom;
    };
    inline bool operator==(const stFeedFansCountReq&l, const stFeedFansCountReq&r)
    {
        return l.strFeedId == r.strFeedId && l.strDokiid == r.strDokiid && l.iFrom == r.iFrom;
    }
    inline bool operator!=(const stFeedFansCountReq&l, const stFeedFansCountReq&r)
    {
        return !(l == r);
    }

    struct stFeedFansCountRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiAPI.stFeedFansCountRsp";
        }
        static string MD5()
        {
            return "5776fd7103fcea055637c7e8b9708bb0";
        }
        stFeedFansCountRsp()
        :errCode(0),strErrMsg(""),iFansCount(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            iFansCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(iFansCount, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, false);
            _is.read(strErrMsg, 1, false);
            _is.read(iFansCount, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(iFansCount,"iFansCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(iFansCount, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        taf::Int32 iFansCount;
    };
    inline bool operator==(const stFeedFansCountRsp&l, const stFeedFansCountRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.iFansCount == r.iFansCount;
    }
    inline bool operator!=(const stFeedFansCountRsp&l, const stFeedFansCountRsp&r)
    {
        return !(l == r);
    }

    struct stUsrInDoki : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiAPI.stUsrInDoki";
        }
        static string MD5()
        {
            return "014f7673a32df92dc50b63b329b6a89c";
        }
        stUsrInDoki()
        :iFlwStat(0),lAttentTime(0),lRank(0)
        {
        }
        void resetDefautlt()
        {
            iFlwStat = 0;
            lAttentTime = 0;
            lRank = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iFlwStat, 0);
            _os.write(lAttentTime, 1);
            _os.write(lRank, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iFlwStat, 0, false);
            _is.read(lAttentTime, 1, false);
            _is.read(lRank, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iFlwStat,"iFlwStat");
            _ds.display(lAttentTime,"lAttentTime");
            _ds.display(lRank,"lRank");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iFlwStat, true);
            _ds.displaySimple(lAttentTime, true);
            _ds.displaySimple(lRank, false);
            return _os;
        }
    public:
        taf::Int32 iFlwStat;
        taf::Int64 lAttentTime;
        taf::Int64 lRank;
    };
    inline bool operator==(const stUsrInDoki&l, const stUsrInDoki&r)
    {
        return l.iFlwStat == r.iFlwStat && l.lAttentTime == r.lAttentTime && l.lRank == r.lRank;
    }
    inline bool operator!=(const stUsrInDoki&l, const stUsrInDoki&r)
    {
        return !(l == r);
    }

    struct stGetUsrInDokiInfoReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiAPI.stGetUsrInDokiInfoReq";
        }
        static string MD5()
        {
            return "875129a7bc7fd722fb6e6a53bbfb3645";
        }
        stGetUsrInDokiInfoReq()
        :strVuid(""),iFrom(0)
        {
        }
        void resetDefautlt()
        {
            strVuid = "";
            iFrom = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vecDokiid, 0);
            _os.write(strVuid, 1);
            _os.write(iFrom, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vecDokiid, 0, true);
            _is.read(strVuid, 1, true);
            _is.read(iFrom, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vecDokiid,"vecDokiid");
            _ds.display(strVuid,"strVuid");
            _ds.display(iFrom,"iFrom");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vecDokiid, true);
            _ds.displaySimple(strVuid, true);
            _ds.displaySimple(iFrom, false);
            return _os;
        }
    public:
        vector<std::string> vecDokiid;
        std::string strVuid;
        taf::Int32 iFrom;
    };
    inline bool operator==(const stGetUsrInDokiInfoReq&l, const stGetUsrInDokiInfoReq&r)
    {
        return l.vecDokiid == r.vecDokiid && l.strVuid == r.strVuid && l.iFrom == r.iFrom;
    }
    inline bool operator!=(const stGetUsrInDokiInfoReq&l, const stGetUsrInDokiInfoReq&r)
    {
        return !(l == r);
    }

    struct stGetUsrInDokiInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiAPI.stGetUsrInDokiInfoRsp";
        }
        static string MD5()
        {
            return "75c7f2395c16ac274f5ca4c793234051";
        }
        stGetUsrInDokiInfoRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(mpDokiidToUsrInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(mpDokiidToUsrInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(mpDokiidToUsrInfo,"mpDokiidToUsrInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(mpDokiidToUsrInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        map<std::string, DokiAPI::stUsrInDoki> mpDokiidToUsrInfo;
    };
    inline bool operator==(const stGetUsrInDokiInfoRsp&l, const stGetUsrInDokiInfoRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.mpDokiidToUsrInfo == r.mpDokiidToUsrInfo;
    }
    inline bool operator!=(const stGetUsrInDokiInfoRsp&l, const stGetUsrInDokiInfoRsp&r)
    {
        return !(l == r);
    }

    struct stFlwDokiMsg : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiAPI.stFlwDokiMsg";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        stFlwDokiMsg()
        :strVuid(""),strDokiid(""),strDataKey("")
        {
        }
        void resetDefautlt()
        {
            strVuid = "";
            strDokiid = "";
            strDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strVuid, 0);
            _os.write(strDokiid, 1);
            _os.write(strDataKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strVuid, 0, true);
            _is.read(strDokiid, 1, true);
            _is.read(strDataKey, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strVuid,"strVuid");
            _ds.display(strDokiid,"strDokiid");
            _ds.display(strDataKey,"strDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strVuid, true);
            _ds.displaySimple(strDokiid, true);
            _ds.displaySimple(strDataKey, false);
            return _os;
        }
    public:
        std::string strVuid;
        std::string strDokiid;
        std::string strDataKey;
    };
    inline bool operator==(const stFlwDokiMsg&l, const stFlwDokiMsg&r)
    {
        return l.strVuid == r.strVuid && l.strDokiid == r.strDokiid && l.strDataKey == r.strDataKey;
    }
    inline bool operator!=(const stFlwDokiMsg&l, const stFlwDokiMsg&r)
    {
        return !(l == r);
    }

    struct stKeyFan : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiAPI.stKeyFan";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        stKeyFan()
        :strIcon(""),strReason(""),strNick(""),strVuid("")
        {
        }
        void resetDefautlt()
        {
            strIcon = "";
            strReason = "";
            strNick = "";
            strVuid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strIcon, 0);
            _os.write(strReason, 1);
            _os.write(strNick, 2);
            _os.write(strVuid, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strIcon, 0, false);
            _is.read(strReason, 1, false);
            _is.read(strNick, 2, false);
            _is.read(strVuid, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strIcon,"strIcon");
            _ds.display(strReason,"strReason");
            _ds.display(strNick,"strNick");
            _ds.display(strVuid,"strVuid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strIcon, true);
            _ds.displaySimple(strReason, true);
            _ds.displaySimple(strNick, true);
            _ds.displaySimple(strVuid, false);
            return _os;
        }
    public:
        std::string strIcon;
        std::string strReason;
        std::string strNick;
        std::string strVuid;
    };
    inline bool operator==(const stKeyFan&l, const stKeyFan&r)
    {
        return l.strIcon == r.strIcon && l.strReason == r.strReason && l.strNick == r.strNick && l.strVuid == r.strVuid;
    }
    inline bool operator!=(const stKeyFan&l, const stKeyFan&r)
    {
        return !(l == r);
    }

    struct stJoinDokiMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiAPI.stJoinDokiMsgReq";
        }
        static string MD5()
        {
            return "8d61b639cda77ea57102c6b9cbb5aca2";
        }
        stJoinDokiMsgReq()
        :strDokiid(""),strVuid(""),iScene(0)
        {
        }
        void resetDefautlt()
        {
            strDokiid = "";
            strVuid = "";
            iScene = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDokiid, 0);
            _os.write(strVuid, 1);
            _os.write(iScene, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDokiid, 0, true);
            _is.read(strVuid, 1, false);
            _is.read(iScene, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDokiid,"strDokiid");
            _ds.display(strVuid,"strVuid");
            _ds.display(iScene,"iScene");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDokiid, true);
            _ds.displaySimple(strVuid, true);
            _ds.displaySimple(iScene, false);
            return _os;
        }
    public:
        std::string strDokiid;
        std::string strVuid;
        taf::Int32 iScene;
    };
    inline bool operator==(const stJoinDokiMsgReq&l, const stJoinDokiMsgReq&r)
    {
        return l.strDokiid == r.strDokiid && l.strVuid == r.strVuid && l.iScene == r.iScene;
    }
    inline bool operator!=(const stJoinDokiMsgReq&l, const stJoinDokiMsgReq&r)
    {
        return !(l == r);
    }

    struct stJoinDokiMsgRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiAPI.stJoinDokiMsgRsp";
        }
        static string MD5()
        {
            return "96ce6c88564b0a5b24beb329a71ea2d9";
        }
        stJoinDokiMsgRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(mpMixedInfo, 2);
            _os.write(vecKeyFan, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(mpMixedInfo, 2, false);
            _is.read(vecKeyFan, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(mpMixedInfo,"mpMixedInfo");
            _ds.display(vecKeyFan,"vecKeyFan");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(mpMixedInfo, true);
            _ds.displaySimple(vecKeyFan, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        map<std::string, std::string> mpMixedInfo;
        vector<DokiAPI::stKeyFan> vecKeyFan;
    };
    inline bool operator==(const stJoinDokiMsgRsp&l, const stJoinDokiMsgRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.mpMixedInfo == r.mpMixedInfo && l.vecKeyFan == r.vecKeyFan;
    }
    inline bool operator!=(const stJoinDokiMsgRsp&l, const stJoinDokiMsgRsp&r)
    {
        return !(l == r);
    }

    struct stFeedFan : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiAPI.stFeedFan";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        stFeedFan()
        :strVuid(""),strNum("")
        {
        }
        void resetDefautlt()
        {
            strVuid = "";
            strNum = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strVuid, 0);
            _os.write(strNum, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strVuid, 0, false);
            _is.read(strNum, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strVuid,"strVuid");
            _ds.display(strNum,"strNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strVuid, true);
            _ds.displaySimple(strNum, false);
            return _os;
        }
    public:
        std::string strVuid;
        std::string strNum;
    };
    inline bool operator==(const stFeedFan&l, const stFeedFan&r)
    {
        return l.strVuid == r.strVuid && l.strNum == r.strNum;
    }
    inline bool operator!=(const stFeedFan&l, const stFeedFan&r)
    {
        return !(l == r);
    }

    struct stFeedFansReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiAPI.stFeedFansReq";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        stFeedFansReq()
        :strDokiid(""),iTopN(0)
        {
        }
        void resetDefautlt()
        {
            strDokiid = "";
            iTopN = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDokiid, 0);
            _os.write(iTopN, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDokiid, 0, true);
            _is.read(iTopN, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDokiid,"strDokiid");
            _ds.display(iTopN,"iTopN");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDokiid, true);
            _ds.displaySimple(iTopN, false);
            return _os;
        }
    public:
        std::string strDokiid;
        taf::Int32 iTopN;
    };
    inline bool operator==(const stFeedFansReq&l, const stFeedFansReq&r)
    {
        return l.strDokiid == r.strDokiid && l.iTopN == r.iTopN;
    }
    inline bool operator!=(const stFeedFansReq&l, const stFeedFansReq&r)
    {
        return !(l == r);
    }

    struct stFeedFansRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiAPI.stFeedFansRsp";
        }
        static string MD5()
        {
            return "f3059977694c4c2b48c8fc48d119692b";
        }
        stFeedFansRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecFeedFan, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(vecFeedFan, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFeedFan,"vecFeedFan");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFeedFan, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<DokiAPI::stFeedFan> vecFeedFan;
    };
    inline bool operator==(const stFeedFansRsp&l, const stFeedFansRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.vecFeedFan == r.vecFeedFan;
    }
    inline bool operator!=(const stFeedFansRsp&l, const stFeedFansRsp&r)
    {
        return !(l == r);
    }

    struct stFlwDokiListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiAPI.stFlwDokiListReq";
        }
        static string MD5()
        {
            return "31b837dee0e3f970aa2d14771bf49d74";
        }
        stFlwDokiListReq()
        :strVuid(""),iDokiType(0),iSortFlag(0),iScene(0)
        {
        }
        void resetDefautlt()
        {
            strVuid = "";
            iDokiType = 0;
            iSortFlag = 0;
            iScene = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strVuid, 0);
            _os.write(iDokiType, 1);
            _os.write(iSortFlag, 2);
            _os.write(iScene, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strVuid, 0, true);
            _is.read(iDokiType, 1, false);
            _is.read(iSortFlag, 2, false);
            _is.read(iScene, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strVuid,"strVuid");
            _ds.display(iDokiType,"iDokiType");
            _ds.display(iSortFlag,"iSortFlag");
            _ds.display(iScene,"iScene");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strVuid, true);
            _ds.displaySimple(iDokiType, true);
            _ds.displaySimple(iSortFlag, true);
            _ds.displaySimple(iScene, false);
            return _os;
        }
    public:
        std::string strVuid;
        taf::Int32 iDokiType;
        taf::Int32 iSortFlag;
        taf::Int32 iScene;
    };
    inline bool operator==(const stFlwDokiListReq&l, const stFlwDokiListReq&r)
    {
        return l.strVuid == r.strVuid && l.iDokiType == r.iDokiType && l.iSortFlag == r.iSortFlag && l.iScene == r.iScene;
    }
    inline bool operator!=(const stFlwDokiListReq&l, const stFlwDokiListReq&r)
    {
        return !(l == r);
    }

    struct stFlwDokiListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "DokiAPI.stFlwDokiListRsp";
        }
        static string MD5()
        {
            return "0e03d5ff7d302c16224cbeeaae16f018";
        }
        stFlwDokiListRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecDokiList, 2);
            _os.write(mpDokiid2NameId, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, false);
            _is.read(strErrMsg, 1, false);
            _is.read(vecDokiList, 2, false);
            _is.read(mpDokiid2NameId, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecDokiList,"vecDokiList");
            _ds.display(mpDokiid2NameId,"mpDokiid2NameId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecDokiList, true);
            _ds.displaySimple(mpDokiid2NameId, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<std::string> vecDokiList;
        map<std::string, std::string> mpDokiid2NameId;
    };
    inline bool operator==(const stFlwDokiListRsp&l, const stFlwDokiListRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.vecDokiList == r.vecDokiList && l.mpDokiid2NameId == r.mpDokiid2NameId;
    }
    inline bool operator!=(const stFlwDokiListRsp&l, const stFlwDokiListRsp&r)
    {
        return !(l == r);
    }


}

#define DokiAPI_stFeedFansCountReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strFeedId,b.strFeedId);jce_copy_struct(a.strDokiid,b.strDokiid);jce_copy_struct(a.iFrom,b.iFrom);

#define DokiAPI_stFeedFansCountRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.iFansCount,b.iFansCount);

#define DokiAPI_stUsrInDoki_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iFlwStat,b.iFlwStat);jce_copy_struct(a.lAttentTime,b.lAttentTime);jce_copy_struct(a.lRank,b.lRank);

#define DokiAPI_stGetUsrInDokiInfoReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vecDokiid,b.vecDokiid);jce_copy_struct(a.strVuid,b.strVuid);jce_copy_struct(a.iFrom,b.iFrom);

#define DokiAPI_stGetUsrInDokiInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.mpDokiidToUsrInfo,b.mpDokiidToUsrInfo);

#define DokiAPI_stFlwDokiMsg_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strVuid,b.strVuid);jce_copy_struct(a.strDokiid,b.strDokiid);jce_copy_struct(a.strDataKey,b.strDataKey);

#define DokiAPI_stKeyFan_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strIcon,b.strIcon);jce_copy_struct(a.strReason,b.strReason);jce_copy_struct(a.strNick,b.strNick);jce_copy_struct(a.strVuid,b.strVuid);

#define DokiAPI_stJoinDokiMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDokiid,b.strDokiid);jce_copy_struct(a.strVuid,b.strVuid);jce_copy_struct(a.iScene,b.iScene);

#define DokiAPI_stJoinDokiMsgRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.mpMixedInfo,b.mpMixedInfo);jce_copy_struct(a.vecKeyFan,b.vecKeyFan);

#define DokiAPI_stFeedFan_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strVuid,b.strVuid);jce_copy_struct(a.strNum,b.strNum);

#define DokiAPI_stFeedFansReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDokiid,b.strDokiid);jce_copy_struct(a.iTopN,b.iTopN);

#define DokiAPI_stFeedFansRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFeedFan,b.vecFeedFan);

#define DokiAPI_stFlwDokiListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strVuid,b.strVuid);jce_copy_struct(a.iDokiType,b.iDokiType);jce_copy_struct(a.iSortFlag,b.iSortFlag);jce_copy_struct(a.iScene,b.iScene);

#define DokiAPI_stFlwDokiListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecDokiList,b.vecDokiList);jce_copy_struct(a.mpDokiid2NameId,b.mpDokiid2NameId);



#endif
