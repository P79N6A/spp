// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_user_info.jce'
// **********************************************************************

#ifndef __QQVIDEO_USER_INFO_H_
#define __QQVIDEO_USER_INFO_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"


namespace jce
{
    enum VIDEO_CMD
    {
        GET_USER_PROFILE = 60674,
    };
    inline string etos(const VIDEO_CMD & e)
    {
        switch(e)
        {
            case GET_USER_PROFILE: return "GET_USER_PROFILE";
            default: return "";
        }
    }
    inline int stoe(const string & s, VIDEO_CMD & e)
    {
        if(s == "GET_USER_PROFILE")  { e=GET_USER_PROFILE; return 0;}

        return -1;
    }

    enum VIDEO_USER_TYPE
    {
        WX_TYPE = 1,
        QQ_TYPE = 2,
        VIDEO_INNER_TYPE = 3,
        MOBILE_TYPE = 4,
    };
    inline string etos(const VIDEO_USER_TYPE & e)
    {
        switch(e)
        {
            case WX_TYPE: return "WX_TYPE";
            case QQ_TYPE: return "QQ_TYPE";
            case VIDEO_INNER_TYPE: return "VIDEO_INNER_TYPE";
            case MOBILE_TYPE: return "MOBILE_TYPE";
            default: return "";
        }
    }
    inline int stoe(const string & s, VIDEO_USER_TYPE & e)
    {
        if(s == "WX_TYPE")  { e=WX_TYPE; return 0;}
        if(s == "QQ_TYPE")  { e=QQ_TYPE; return 0;}
        if(s == "VIDEO_INNER_TYPE")  { e=VIDEO_INNER_TYPE; return 0;}
        if(s == "MOBILE_TYPE")  { e=MOBILE_TYPE; return 0;}

        return -1;
    }

    struct CheckBindInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckBindInfo";
        }
        static string MD5()
        {
            return "a837d74886a4fbb2e680800944ca0521";
        }
        CheckBindInfo()
        :strAccountId(""),strAction(""),strBindType(""),iIsVip(0),strTips("")
        {
        }
        void resetDefautlt()
        {
            strAccountId = "";
            strAction = "";
            strBindType = "";
            iIsVip = 0;
            strTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strAccountId, 0);
            _os.write(strAction, 1);
            _os.write(strBindType, 2);
            _os.write(iIsVip, 3);
            _os.write(strTips, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strAccountId, 0, false);
            _is.read(strAction, 1, false);
            _is.read(strBindType, 2, false);
            _is.read(iIsVip, 3, false);
            _is.read(strTips, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strAccountId,"strAccountId");
            _ds.display(strAction,"strAction");
            _ds.display(strBindType,"strBindType");
            _ds.display(iIsVip,"iIsVip");
            _ds.display(strTips,"strTips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strAccountId, true);
            _ds.displaySimple(strAction, true);
            _ds.displaySimple(strBindType, true);
            _ds.displaySimple(iIsVip, true);
            _ds.displaySimple(strTips, false);
            return _os;
        }
    public:
        std::string strAccountId;
        std::string strAction;
        std::string strBindType;
        taf::Int32 iIsVip;
        std::string strTips;
    };
    inline bool operator==(const CheckBindInfo&l, const CheckBindInfo&r)
    {
        return l.strAccountId == r.strAccountId && l.strAction == r.strAction && l.strBindType == r.strBindType && l.iIsVip == r.iIsVip && l.strTips == r.strTips;
    }
    inline bool operator!=(const CheckBindInfo&l, const CheckBindInfo&r)
    {
        return !(l == r);
    }

    struct PropertyInfoItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PropertyInfoItem";
        }
        static string MD5()
        {
            return "c21e81f2197e8febacc89133f4b5ec10";
        }
        PropertyInfoItem()
        :iPropertyType(0),strPropertyName(""),ldPropertyCount(0),strPropertyActivity(""),strPropertyUrl("")
        {
        }
        void resetDefautlt()
        {
            iPropertyType = 0;
            strPropertyName = "";
            ldPropertyCount = 0;
            strPropertyActivity = "";
            strPropertyUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iPropertyType, 0);
            _os.write(strPropertyName, 1);
            _os.write(ldPropertyCount, 2);
            _os.write(strPropertyActivity, 3);
            _os.write(strPropertyUrl, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iPropertyType, 0, true);
            _is.read(strPropertyName, 1, true);
            _is.read(ldPropertyCount, 2, true);
            _is.read(strPropertyActivity, 3, false);
            _is.read(strPropertyUrl, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iPropertyType,"iPropertyType");
            _ds.display(strPropertyName,"strPropertyName");
            _ds.display(ldPropertyCount,"ldPropertyCount");
            _ds.display(strPropertyActivity,"strPropertyActivity");
            _ds.display(strPropertyUrl,"strPropertyUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iPropertyType, true);
            _ds.displaySimple(strPropertyName, true);
            _ds.displaySimple(ldPropertyCount, true);
            _ds.displaySimple(strPropertyActivity, true);
            _ds.displaySimple(strPropertyUrl, false);
            return _os;
        }
    public:
        taf::Int32 iPropertyType;
        std::string strPropertyName;
        taf::Int64 ldPropertyCount;
        std::string strPropertyActivity;
        std::string strPropertyUrl;
    };
    inline bool operator==(const PropertyInfoItem&l, const PropertyInfoItem&r)
    {
        return l.iPropertyType == r.iPropertyType && l.strPropertyName == r.strPropertyName && l.ldPropertyCount == r.ldPropertyCount && l.strPropertyActivity == r.strPropertyActivity && l.strPropertyUrl == r.strPropertyUrl;
    }
    inline bool operator!=(const PropertyInfoItem&l, const PropertyInfoItem&r)
    {
        return !(l == r);
    }

    struct PropertyInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PropertyInfo";
        }
        static string MD5()
        {
            return "42ae96dd6d66984a15a76313dbc32eeb";
        }
        PropertyInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vecProperty, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vecProperty, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vecProperty,"vecProperty");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vecProperty, false);
            return _os;
        }
    public:
        vector<jce::PropertyInfoItem> vecProperty;
    };
    inline bool operator==(const PropertyInfo&l, const PropertyInfo&r)
    {
        return l.vecProperty == r.vecProperty;
    }
    inline bool operator!=(const PropertyInfo&l, const PropertyInfo&r)
    {
        return !(l == r);
    }

    struct UserBasicInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserBasicInfo";
        }
        static string MD5()
        {
            return "f421bbcb886df1001269c8faa7330b00";
        }
        UserBasicInfo()
        :strUserId(""),strSex(""),strNick(""),strHeadUrl(""),strCity(""),strCountry(""),bHas100(true)
        {
        }
        void resetDefautlt()
        {
            strUserId = "";
            strSex = "";
            strNick = "";
            strHeadUrl = "";
            strCity = "";
            strCountry = "";
            bHas100 = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strUserId, 0);
            _os.write(strSex, 1);
            _os.write(strNick, 2);
            _os.write(strHeadUrl, 3);
            _os.write(strCity, 4);
            _os.write(strCountry, 5);
            _os.write(bHas100, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strUserId, 0, true);
            _is.read(strSex, 1, false);
            _is.read(strNick, 2, false);
            _is.read(strHeadUrl, 3, false);
            _is.read(strCity, 4, false);
            _is.read(strCountry, 5, false);
            _is.read(bHas100, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strUserId,"strUserId");
            _ds.display(strSex,"strSex");
            _ds.display(strNick,"strNick");
            _ds.display(strHeadUrl,"strHeadUrl");
            _ds.display(strCity,"strCity");
            _ds.display(strCountry,"strCountry");
            _ds.display(bHas100,"bHas100");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strUserId, true);
            _ds.displaySimple(strSex, true);
            _ds.displaySimple(strNick, true);
            _ds.displaySimple(strHeadUrl, true);
            _ds.displaySimple(strCity, true);
            _ds.displaySimple(strCountry, true);
            _ds.displaySimple(bHas100, false);
            return _os;
        }
    public:
        std::string strUserId;
        std::string strSex;
        std::string strNick;
        std::string strHeadUrl;
        std::string strCity;
        std::string strCountry;
        taf::Bool bHas100;
    };
    inline bool operator==(const UserBasicInfo&l, const UserBasicInfo&r)
    {
        return l.strUserId == r.strUserId && l.strSex == r.strSex && l.strNick == r.strNick && l.strHeadUrl == r.strHeadUrl && l.strCity == r.strCity && l.strCountry == r.strCountry && l.bHas100 == r.bHas100;
    }
    inline bool operator!=(const UserBasicInfo&l, const UserBasicInfo&r)
    {
        return !(l == r);
    }

    struct VipInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipInfo";
        }
        static string MD5()
        {
            return "9b1a8639f97c225b11aca5a4790ac38b";
        }
        VipInfo()
        :strUserId(""),ldBeginTime(0),ldEndTime(0),iStatus(0),iVipLevel(0),iVipScore(0),strServiceType(""),iOpenDay(0),iType(0),strAppid(""),ldVipid(0),iIsAnnual(0),ldAnualBeginTime(0),ldAnualEndTime(0),iServiceId(0),strLastgivedate("")
        {
        }
        void resetDefautlt()
        {
            strUserId = "";
            ldBeginTime = 0;
            ldEndTime = 0;
            iStatus = 0;
            iVipLevel = 0;
            iVipScore = 0;
            strServiceType = "";
            iOpenDay = 0;
            iType = 0;
            strAppid = "";
            ldVipid = 0;
            iIsAnnual = 0;
            ldAnualBeginTime = 0;
            ldAnualEndTime = 0;
            iServiceId = 0;
            strLastgivedate = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strUserId, 0);
            _os.write(ldBeginTime, 1);
            _os.write(ldEndTime, 2);
            _os.write(iStatus, 3);
            _os.write(iVipLevel, 4);
            _os.write(iVipScore, 5);
            _os.write(strServiceType, 6);
            _os.write(iOpenDay, 7);
            _os.write(iType, 8);
            _os.write(strAppid, 9);
            _os.write(ldVipid, 10);
            _os.write(iIsAnnual, 11);
            _os.write(ldAnualBeginTime, 12);
            _os.write(ldAnualEndTime, 13);
            _os.write(iServiceId, 14);
            _os.write(strLastgivedate, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strUserId, 0, true);
            _is.read(ldBeginTime, 1, false);
            _is.read(ldEndTime, 2, false);
            _is.read(iStatus, 3, false);
            _is.read(iVipLevel, 4, false);
            _is.read(iVipScore, 5, false);
            _is.read(strServiceType, 6, false);
            _is.read(iOpenDay, 7, false);
            _is.read(iType, 8, false);
            _is.read(strAppid, 9, false);
            _is.read(ldVipid, 10, false);
            _is.read(iIsAnnual, 11, false);
            _is.read(ldAnualBeginTime, 12, false);
            _is.read(ldAnualEndTime, 13, false);
            _is.read(iServiceId, 14, false);
            _is.read(strLastgivedate, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strUserId,"strUserId");
            _ds.display(ldBeginTime,"ldBeginTime");
            _ds.display(ldEndTime,"ldEndTime");
            _ds.display(iStatus,"iStatus");
            _ds.display(iVipLevel,"iVipLevel");
            _ds.display(iVipScore,"iVipScore");
            _ds.display(strServiceType,"strServiceType");
            _ds.display(iOpenDay,"iOpenDay");
            _ds.display(iType,"iType");
            _ds.display(strAppid,"strAppid");
            _ds.display(ldVipid,"ldVipid");
            _ds.display(iIsAnnual,"iIsAnnual");
            _ds.display(ldAnualBeginTime,"ldAnualBeginTime");
            _ds.display(ldAnualEndTime,"ldAnualEndTime");
            _ds.display(iServiceId,"iServiceId");
            _ds.display(strLastgivedate,"strLastgivedate");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strUserId, true);
            _ds.displaySimple(ldBeginTime, true);
            _ds.displaySimple(ldEndTime, true);
            _ds.displaySimple(iStatus, true);
            _ds.displaySimple(iVipLevel, true);
            _ds.displaySimple(iVipScore, true);
            _ds.displaySimple(strServiceType, true);
            _ds.displaySimple(iOpenDay, true);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(strAppid, true);
            _ds.displaySimple(ldVipid, true);
            _ds.displaySimple(iIsAnnual, true);
            _ds.displaySimple(ldAnualBeginTime, true);
            _ds.displaySimple(ldAnualEndTime, true);
            _ds.displaySimple(iServiceId, true);
            _ds.displaySimple(strLastgivedate, false);
            return _os;
        }
    public:
        std::string strUserId;
        taf::Int64 ldBeginTime;
        taf::Int64 ldEndTime;
        taf::Int32 iStatus;
        taf::Int32 iVipLevel;
        taf::Int32 iVipScore;
        std::string strServiceType;
        taf::Int32 iOpenDay;
        taf::Int32 iType;
        std::string strAppid;
        taf::Int64 ldVipid;
        taf::Int32 iIsAnnual;
        taf::Int64 ldAnualBeginTime;
        taf::Int64 ldAnualEndTime;
        taf::Int32 iServiceId;
        std::string strLastgivedate;
    };
    inline bool operator==(const VipInfo&l, const VipInfo&r)
    {
        return l.strUserId == r.strUserId && l.ldBeginTime == r.ldBeginTime && l.ldEndTime == r.ldEndTime && l.iStatus == r.iStatus && l.iVipLevel == r.iVipLevel && l.iVipScore == r.iVipScore && l.strServiceType == r.strServiceType && l.iOpenDay == r.iOpenDay && l.iType == r.iType && l.strAppid == r.strAppid && l.ldVipid == r.ldVipid && l.iIsAnnual == r.iIsAnnual && l.ldAnualBeginTime == r.ldAnualBeginTime && l.ldAnualEndTime == r.ldAnualEndTime && l.iServiceId == r.iServiceId && l.strLastgivedate == r.strLastgivedate;
    }
    inline bool operator!=(const VipInfo&l, const VipInfo&r)
    {
        return !(l == r);
    }

    struct STVideoUserKey : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.STVideoUserKey";
        }
        static string MD5()
        {
            return "762ed8a50a94689e1cc97fe61e96d4d5";
        }
        STVideoUserKey()
        :strUserId(""),iUserType(0),strUserToken(""),strAppid(""),iIsTokenValid(0)
        {
        }
        void resetDefautlt()
        {
            strUserId = "";
            iUserType = 0;
            strUserToken = "";
            strAppid = "";
            iIsTokenValid = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strUserId, 0);
            _os.write(iUserType, 1);
            _os.write(strUserToken, 2);
            _os.write(strAppid, 3);
            _os.write(iIsTokenValid, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strUserId, 0, true);
            _is.read(iUserType, 1, true);
            _is.read(strUserToken, 2, false);
            _is.read(strAppid, 3, false);
            _is.read(iIsTokenValid, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strUserId,"strUserId");
            _ds.display(iUserType,"iUserType");
            _ds.display(strUserToken,"strUserToken");
            _ds.display(strAppid,"strAppid");
            _ds.display(iIsTokenValid,"iIsTokenValid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strUserId, true);
            _ds.displaySimple(iUserType, true);
            _ds.displaySimple(strUserToken, true);
            _ds.displaySimple(strAppid, true);
            _ds.displaySimple(iIsTokenValid, false);
            return _os;
        }
    public:
        std::string strUserId;
        taf::Int32 iUserType;
        std::string strUserToken;
        std::string strAppid;
        taf::Int32 iIsTokenValid;
    };
    inline bool operator==(const STVideoUserKey&l, const STVideoUserKey&r)
    {
        return l.strUserId == r.strUserId && l.iUserType == r.iUserType && l.strUserToken == r.strUserToken && l.strAppid == r.strAppid && l.iIsTokenValid == r.iIsTokenValid;
    }
    inline bool operator!=(const STVideoUserKey&l, const STVideoUserKey&r)
    {
        return !(l == r);
    }

    struct STMedalItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.STMedalItem";
        }
        static string MD5()
        {
            return "f10bc7d2616de8cd2e6ede31d1fd9b6f";
        }
        STMedalItem()
        :bIsLight(true),strName(""),strPic("")
        {
        }
        void resetDefautlt()
        {
            bIsLight = true;
            strName = "";
            strPic = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bIsLight, 0);
            _os.write(strName, 1);
            _os.write(strPic, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bIsLight, 0, true);
            _is.read(strName, 1, true);
            _is.read(strPic, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bIsLight,"bIsLight");
            _ds.display(strName,"strName");
            _ds.display(strPic,"strPic");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bIsLight, true);
            _ds.displaySimple(strName, true);
            _ds.displaySimple(strPic, false);
            return _os;
        }
    public:
        taf::Bool bIsLight;
        std::string strName;
        std::string strPic;
    };
    inline bool operator==(const STMedalItem&l, const STMedalItem&r)
    {
        return l.bIsLight == r.bIsLight && l.strName == r.strName && l.strPic == r.strPic;
    }
    inline bool operator!=(const STMedalItem&l, const STMedalItem&r)
    {
        return !(l == r);
    }

    struct STStarInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.STStarInfo";
        }
        static string MD5()
        {
            return "ae6c8c6186407b5453550f701750e32d";
        }
        STStarInfo()
        :bIsStar(false),strNick(""),strHead(""),strStarId(""),strFtId(""),strTargetId(""),extDataKey("")
        {
        }
        void resetDefautlt()
        {
            bIsStar = false;
            strNick = "";
            strHead = "";
            strStarId = "";
            strFtId = "";
            strTargetId = "";
            extDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bIsStar, 0);
            _os.write(strNick, 1);
            _os.write(strHead, 2);
            _os.write(strStarId, 3);
            _os.write(strFtId, 4);
            _os.write(strTargetId, 5);
            _os.write(extDataKey, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bIsStar, 0, true);
            _is.read(strNick, 1, false);
            _is.read(strHead, 2, false);
            _is.read(strStarId, 3, false);
            _is.read(strFtId, 4, false);
            _is.read(strTargetId, 5, false);
            _is.read(extDataKey, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bIsStar,"bIsStar");
            _ds.display(strNick,"strNick");
            _ds.display(strHead,"strHead");
            _ds.display(strStarId,"strStarId");
            _ds.display(strFtId,"strFtId");
            _ds.display(strTargetId,"strTargetId");
            _ds.display(extDataKey,"extDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bIsStar, true);
            _ds.displaySimple(strNick, true);
            _ds.displaySimple(strHead, true);
            _ds.displaySimple(strStarId, true);
            _ds.displaySimple(strFtId, true);
            _ds.displaySimple(strTargetId, true);
            _ds.displaySimple(extDataKey, false);
            return _os;
        }
    public:
        taf::Bool bIsStar;
        std::string strNick;
        std::string strHead;
        std::string strStarId;
        std::string strFtId;
        std::string strTargetId;
        std::string extDataKey;
    };
    inline bool operator==(const STStarInfo&l, const STStarInfo&r)
    {
        return l.bIsStar == r.bIsStar && l.strNick == r.strNick && l.strHead == r.strHead && l.strStarId == r.strStarId && l.strFtId == r.strFtId && l.strTargetId == r.strTargetId && l.extDataKey == r.extDataKey;
    }
    inline bool operator!=(const STStarInfo&l, const STStarInfo&r)
    {
        return !(l == r);
    }

    struct STCertifyInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.STCertifyInfo";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        STCertifyInfo()
        :certifyFlag(0),certifyTips(""),hasCertifyTips("")
        {
        }
        void resetDefautlt()
        {
            certifyFlag = 0;
            certifyTips = "";
            hasCertifyTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(certifyFlag, 0);
            _os.write(certifyTips, 1);
            _os.write(hasCertifyTips, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(certifyFlag, 0, true);
            _is.read(certifyTips, 1, false);
            _is.read(hasCertifyTips, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(certifyFlag,"certifyFlag");
            _ds.display(certifyTips,"certifyTips");
            _ds.display(hasCertifyTips,"hasCertifyTips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(certifyFlag, true);
            _ds.displaySimple(certifyTips, true);
            _ds.displaySimple(hasCertifyTips, false);
            return _os;
        }
    public:
        taf::Int32 certifyFlag;
        std::string certifyTips;
        std::string hasCertifyTips;
    };
    inline bool operator==(const STCertifyInfo&l, const STCertifyInfo&r)
    {
        return l.certifyFlag == r.certifyFlag && l.certifyTips == r.certifyTips && l.hasCertifyTips == r.hasCertifyTips;
    }
    inline bool operator!=(const STCertifyInfo&l, const STCertifyInfo&r)
    {
        return !(l == r);
    }

    struct GetUserProfileRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetUserProfileRequest";
        }
        static string MD5()
        {
            return "f579325158696c842da2f6ec5e2adad0";
        }
        GetUserProfileRequest()
        :iVersion(0),strExt("")
        {
        }
        void resetDefautlt()
        {
            iVersion = 0;
            strExt = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iVersion, 0);
            _os.write(vecFields, 1);
            _os.write(strExt, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iVersion, 0, true);
            _is.read(vecFields, 1, false);
            _is.read(strExt, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iVersion,"iVersion");
            _ds.display(vecFields,"vecFields");
            _ds.display(strExt,"strExt");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iVersion, true);
            _ds.displaySimple(vecFields, true);
            _ds.displaySimple(strExt, false);
            return _os;
        }
    public:
        taf::Int32 iVersion;
        vector<std::string> vecFields;
        std::string strExt;
    };
    inline bool operator==(const GetUserProfileRequest&l, const GetUserProfileRequest&r)
    {
        return l.iVersion == r.iVersion && l.vecFields == r.vecFields && l.strExt == r.strExt;
    }
    inline bool operator!=(const GetUserProfileRequest&l, const GetUserProfileRequest&r)
    {
        return !(l == r);
    }

    struct GetUserProfileResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetUserProfileResponse";
        }
        static string MD5()
        {
            return "014791449b512ada120657e1e11ffe84";
        }
        GetUserProfileResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(stUserBasic, 2);
            _os.write(stVipInfo, 3);
            _os.write(stProperty, 4);
            _os.write(stCheckBindInfo, 5);
            _os.write(stUserKey, 6);
            _os.write(vecMedals, 7);
            _os.write(stStarInfo, 8);
            _os.write(stCertifyInfo, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
            _is.read(stUserBasic, 2, false);
            _is.read(stVipInfo, 3, false);
            _is.read(stProperty, 4, false);
            _is.read(stCheckBindInfo, 5, false);
            _is.read(stUserKey, 6, false);
            _is.read(vecMedals, 7, false);
            _is.read(stStarInfo, 8, false);
            _is.read(stCertifyInfo, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(stUserBasic,"stUserBasic");
            _ds.display(stVipInfo,"stVipInfo");
            _ds.display(stProperty,"stProperty");
            _ds.display(stCheckBindInfo,"stCheckBindInfo");
            _ds.display(stUserKey,"stUserKey");
            _ds.display(vecMedals,"vecMedals");
            _ds.display(stStarInfo,"stStarInfo");
            _ds.display(stCertifyInfo,"stCertifyInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(stUserBasic, true);
            _ds.displaySimple(stVipInfo, true);
            _ds.displaySimple(stProperty, true);
            _ds.displaySimple(stCheckBindInfo, true);
            _ds.displaySimple(stUserKey, true);
            _ds.displaySimple(vecMedals, true);
            _ds.displaySimple(stStarInfo, true);
            _ds.displaySimple(stCertifyInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        jce::UserBasicInfo stUserBasic;
        jce::VipInfo stVipInfo;
        jce::PropertyInfo stProperty;
        jce::CheckBindInfo stCheckBindInfo;
        jce::STVideoUserKey stUserKey;
        vector<jce::STMedalItem> vecMedals;
        jce::STStarInfo stStarInfo;
        jce::STCertifyInfo stCertifyInfo;
    };
    inline bool operator==(const GetUserProfileResponse&l, const GetUserProfileResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.stUserBasic == r.stUserBasic && l.stVipInfo == r.stVipInfo && l.stProperty == r.stProperty && l.stCheckBindInfo == r.stCheckBindInfo && l.stUserKey == r.stUserKey && l.vecMedals == r.vecMedals && l.stStarInfo == r.stStarInfo && l.stCertifyInfo == r.stCertifyInfo;
    }
    inline bool operator!=(const GetUserProfileResponse&l, const GetUserProfileResponse&r)
    {
        return !(l == r);
    }

    struct DegreeItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DegreeItem";
        }
        static string MD5()
        {
            return "dd24937f663ab142b877e7ad879b1c07";
        }
        DegreeItem()
        :degreeId(""),degreeText(""),degreeName(""),degreeMark(""),smallIconUrl(""),bigIconUrl(""),degreeLevel(0),degreeFlag(0)
        {
        }
        void resetDefautlt()
        {
            degreeId = "";
            degreeText = "";
            degreeName = "";
            degreeMark = "";
            smallIconUrl = "";
            bigIconUrl = "";
            degreeLevel = 0;
            degreeFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(degreeId, 0);
            _os.write(degreeText, 1);
            _os.write(degreeName, 2);
            _os.write(degreeMark, 3);
            _os.write(smallIconUrl, 4);
            _os.write(bigIconUrl, 5);
            _os.write(degreeAction, 6);
            _os.write(degreeLevel, 7);
            _os.write(degreeFlag, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(degreeId, 0, true);
            _is.read(degreeText, 1, false);
            _is.read(degreeName, 2, false);
            _is.read(degreeMark, 3, false);
            _is.read(smallIconUrl, 4, false);
            _is.read(bigIconUrl, 5, false);
            _is.read(degreeAction, 6, false);
            _is.read(degreeLevel, 7, false);
            _is.read(degreeFlag, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(degreeId,"degreeId");
            _ds.display(degreeText,"degreeText");
            _ds.display(degreeName,"degreeName");
            _ds.display(degreeMark,"degreeMark");
            _ds.display(smallIconUrl,"smallIconUrl");
            _ds.display(bigIconUrl,"bigIconUrl");
            _ds.display(degreeAction,"degreeAction");
            _ds.display(degreeLevel,"degreeLevel");
            _ds.display(degreeFlag,"degreeFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(degreeId, true);
            _ds.displaySimple(degreeText, true);
            _ds.displaySimple(degreeName, true);
            _ds.displaySimple(degreeMark, true);
            _ds.displaySimple(smallIconUrl, true);
            _ds.displaySimple(bigIconUrl, true);
            _ds.displaySimple(degreeAction, true);
            _ds.displaySimple(degreeLevel, true);
            _ds.displaySimple(degreeFlag, false);
            return _os;
        }
    public:
        std::string degreeId;
        std::string degreeText;
        std::string degreeName;
        std::string degreeMark;
        std::string smallIconUrl;
        std::string bigIconUrl;
        jce::Action degreeAction;
        taf::Int32 degreeLevel;
        taf::Int32 degreeFlag;
    };
    inline bool operator==(const DegreeItem&l, const DegreeItem&r)
    {
        return l.degreeId == r.degreeId && l.degreeText == r.degreeText && l.degreeName == r.degreeName && l.degreeMark == r.degreeMark && l.smallIconUrl == r.smallIconUrl && l.bigIconUrl == r.bigIconUrl && l.degreeAction == r.degreeAction && l.degreeLevel == r.degreeLevel && l.degreeFlag == r.degreeFlag;
    }
    inline bool operator!=(const DegreeItem&l, const DegreeItem&r)
    {
        return !(l == r);
    }

    struct DegreeItemList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DegreeItemList";
        }
        static string MD5()
        {
            return "0db40f6cb0d10b3e7c62c4d5d5eaf8db";
        }
        DegreeItemList()
        :categoryTitle("")
        {
        }
        void resetDefautlt()
        {
            categoryTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(categoryTitle, 0);
            _os.write(itemList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(categoryTitle, 0, false);
            _is.read(itemList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(categoryTitle,"categoryTitle");
            _ds.display(itemList,"itemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(categoryTitle, true);
            _ds.displaySimple(itemList, false);
            return _os;
        }
    public:
        std::string categoryTitle;
        vector<jce::DegreeItem> itemList;
    };
    inline bool operator==(const DegreeItemList&l, const DegreeItemList&r)
    {
        return l.categoryTitle == r.categoryTitle && l.itemList == r.itemList;
    }
    inline bool operator!=(const DegreeItemList&l, const DegreeItemList&r)
    {
        return !(l == r);
    }

    struct GetUserDegreeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetUserDegreeRequest";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        GetUserDegreeRequest()
        :userId(""),pageContext("")
        {
        }
        void resetDefautlt()
        {
            userId = "";
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(userId, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(userId, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(userId,"userId");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(userId, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string userId;
        std::string pageContext;
    };
    inline bool operator==(const GetUserDegreeRequest&l, const GetUserDegreeRequest&r)
    {
        return l.userId == r.userId && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetUserDegreeRequest&l, const GetUserDegreeRequest&r)
    {
        return !(l == r);
    }

    struct GetUserDegreeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetUserDegreeResponse";
        }
        static string MD5()
        {
            return "535822cde10927642241f93ea7457665";
        }
        GetUserDegreeResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(degreeGroup, 1);
            _os.write(pageContext, 2);
            _os.write(hasNextPage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(degreeGroup, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(hasNextPage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(degreeGroup,"degreeGroup");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(degreeGroup, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::DegreeItemList> degreeGroup;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const GetUserDegreeResponse&l, const GetUserDegreeResponse&r)
    {
        return l.errCode == r.errCode && l.degreeGroup == r.degreeGroup && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const GetUserDegreeResponse&l, const GetUserDegreeResponse&r)
    {
        return !(l == r);
    }


}

#define jce_CheckBindInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strAccountId,b.strAccountId);jce_copy_struct(a.strAction,b.strAction);jce_copy_struct(a.strBindType,b.strBindType);jce_copy_struct(a.iIsVip,b.iIsVip);jce_copy_struct(a.strTips,b.strTips);

#define jce_PropertyInfoItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iPropertyType,b.iPropertyType);jce_copy_struct(a.strPropertyName,b.strPropertyName);jce_copy_struct(a.ldPropertyCount,b.ldPropertyCount);jce_copy_struct(a.strPropertyActivity,b.strPropertyActivity);jce_copy_struct(a.strPropertyUrl,b.strPropertyUrl);

#define jce_PropertyInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vecProperty,b.vecProperty);

#define jce_UserBasicInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strUserId,b.strUserId);jce_copy_struct(a.strSex,b.strSex);jce_copy_struct(a.strNick,b.strNick);jce_copy_struct(a.strHeadUrl,b.strHeadUrl);jce_copy_struct(a.strCity,b.strCity);jce_copy_struct(a.strCountry,b.strCountry);jce_copy_struct(a.bHas100,b.bHas100);

#define jce_VipInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strUserId,b.strUserId);jce_copy_struct(a.ldBeginTime,b.ldBeginTime);jce_copy_struct(a.ldEndTime,b.ldEndTime);jce_copy_struct(a.iStatus,b.iStatus);jce_copy_struct(a.iVipLevel,b.iVipLevel);jce_copy_struct(a.iVipScore,b.iVipScore);jce_copy_struct(a.strServiceType,b.strServiceType);jce_copy_struct(a.iOpenDay,b.iOpenDay);jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.strAppid,b.strAppid);jce_copy_struct(a.ldVipid,b.ldVipid);jce_copy_struct(a.iIsAnnual,b.iIsAnnual);jce_copy_struct(a.ldAnualBeginTime,b.ldAnualBeginTime);jce_copy_struct(a.ldAnualEndTime,b.ldAnualEndTime);jce_copy_struct(a.iServiceId,b.iServiceId);jce_copy_struct(a.strLastgivedate,b.strLastgivedate);

#define jce_STVideoUserKey_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strUserId,b.strUserId);jce_copy_struct(a.iUserType,b.iUserType);jce_copy_struct(a.strUserToken,b.strUserToken);jce_copy_struct(a.strAppid,b.strAppid);jce_copy_struct(a.iIsTokenValid,b.iIsTokenValid);

#define jce_STMedalItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bIsLight,b.bIsLight);jce_copy_struct(a.strName,b.strName);jce_copy_struct(a.strPic,b.strPic);

#define jce_STStarInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bIsStar,b.bIsStar);jce_copy_struct(a.strNick,b.strNick);jce_copy_struct(a.strHead,b.strHead);jce_copy_struct(a.strStarId,b.strStarId);jce_copy_struct(a.strFtId,b.strFtId);jce_copy_struct(a.strTargetId,b.strTargetId);jce_copy_struct(a.extDataKey,b.extDataKey);

#define jce_STCertifyInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.certifyFlag,b.certifyFlag);jce_copy_struct(a.certifyTips,b.certifyTips);jce_copy_struct(a.hasCertifyTips,b.hasCertifyTips);

#define jce_GetUserProfileRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iVersion,b.iVersion);jce_copy_struct(a.vecFields,b.vecFields);jce_copy_struct(a.strExt,b.strExt);

#define jce_GetUserProfileResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.stUserBasic,b.stUserBasic);jce_copy_struct(a.stVipInfo,b.stVipInfo);jce_copy_struct(a.stProperty,b.stProperty);jce_copy_struct(a.stCheckBindInfo,b.stCheckBindInfo);jce_copy_struct(a.stUserKey,b.stUserKey);jce_copy_struct(a.vecMedals,b.vecMedals);jce_copy_struct(a.stStarInfo,b.stStarInfo);jce_copy_struct(a.stCertifyInfo,b.stCertifyInfo);

#define jce_DegreeItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.degreeId,b.degreeId);jce_copy_struct(a.degreeText,b.degreeText);jce_copy_struct(a.degreeName,b.degreeName);jce_copy_struct(a.degreeMark,b.degreeMark);jce_copy_struct(a.smallIconUrl,b.smallIconUrl);jce_copy_struct(a.bigIconUrl,b.bigIconUrl);jce_copy_struct(a.degreeAction,b.degreeAction);jce_copy_struct(a.degreeLevel,b.degreeLevel);jce_copy_struct(a.degreeFlag,b.degreeFlag);

#define jce_DegreeItemList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.categoryTitle,b.categoryTitle);jce_copy_struct(a.itemList,b.itemList);

#define jce_GetUserDegreeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.userId,b.userId);jce_copy_struct(a.pageContext,b.pageContext);

#define jce_GetUserDegreeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.degreeGroup,b.degreeGroup);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);



#endif
