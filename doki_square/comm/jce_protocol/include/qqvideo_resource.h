// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_resource.jce'
// **********************************************************************

#ifndef __QQVIDEO_RESOURCE_H_
#define __QQVIDEO_RESOURCE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace jce
{
    struct ResourceCurInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ResourceCurInfo";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        ResourceCurInfo()
        :pid(0),resName(""),curVersion("")
        {
        }
        void resetDefautlt()
        {
            pid = 0;
            resName = "";
            curVersion = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pid, 0);
            _os.write(resName, 1);
            _os.write(curVersion, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pid, 0, true);
            _is.read(resName, 1, true);
            _is.read(curVersion, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pid,"pid");
            _ds.display(resName,"resName");
            _ds.display(curVersion,"curVersion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(resName, true);
            _ds.displaySimple(curVersion, false);
            return _os;
        }
    public:
        taf::Int32 pid;
        std::string resName;
        std::string curVersion;
    };
    inline bool operator==(const ResourceCurInfo&l, const ResourceCurInfo&r)
    {
        return l.pid == r.pid && l.resName == r.resName && l.curVersion == r.curVersion;
    }
    inline bool operator!=(const ResourceCurInfo&l, const ResourceCurInfo&r)
    {
        return !(l == r);
    }

    struct ResouceUpgradeInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ResouceUpgradeInfo";
        }
        static string MD5()
        {
            return "ed6cf077317aff8098933a10621c5592";
        }
        ResouceUpgradeInfo()
        :retCode(0),pid(0),resName(""),destVersion(""),downloadUrl(""),md5("")
        {
        }
        void resetDefautlt()
        {
            retCode = 0;
            pid = 0;
            resName = "";
            destVersion = "";
            downloadUrl = "";
            md5 = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(retCode, 0);
            _os.write(pid, 1);
            _os.write(resName, 2);
            _os.write(destVersion, 3);
            _os.write(downloadUrl, 4);
            _os.write(md5, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(retCode, 0, true);
            _is.read(pid, 1, true);
            _is.read(resName, 2, true);
            _is.read(destVersion, 3, false);
            _is.read(downloadUrl, 4, false);
            _is.read(md5, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(retCode,"retCode");
            _ds.display(pid,"pid");
            _ds.display(resName,"resName");
            _ds.display(destVersion,"destVersion");
            _ds.display(downloadUrl,"downloadUrl");
            _ds.display(md5,"md5");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(retCode, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(resName, true);
            _ds.displaySimple(destVersion, true);
            _ds.displaySimple(downloadUrl, true);
            _ds.displaySimple(md5, false);
            return _os;
        }
    public:
        taf::Int32 retCode;
        taf::Int32 pid;
        std::string resName;
        std::string destVersion;
        std::string downloadUrl;
        std::string md5;
    };
    inline bool operator==(const ResouceUpgradeInfo&l, const ResouceUpgradeInfo&r)
    {
        return l.retCode == r.retCode && l.pid == r.pid && l.resName == r.resName && l.destVersion == r.destVersion && l.downloadUrl == r.downloadUrl && l.md5 == r.md5;
    }
    inline bool operator!=(const ResouceUpgradeInfo&l, const ResouceUpgradeInfo&r)
    {
        return !(l == r);
    }

    struct ResourceUpgradeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ResourceUpgradeRequest";
        }
        static string MD5()
        {
            return "815e1969f8f99e9862971bfe8cec8c96";
        }
        ResourceUpgradeRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(curInfos, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(curInfos, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(curInfos,"curInfos");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(curInfos, false);
            return _os;
        }
    public:
        vector<jce::ResourceCurInfo> curInfos;
    };
    inline bool operator==(const ResourceUpgradeRequest&l, const ResourceUpgradeRequest&r)
    {
        return l.curInfos == r.curInfos;
    }
    inline bool operator!=(const ResourceUpgradeRequest&l, const ResourceUpgradeRequest&r)
    {
        return !(l == r);
    }

    struct ResourceUpgradeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ResourceUpgradeResponse";
        }
        static string MD5()
        {
            return "877b1a07132cff7b2e41e6e6cc1c52ce";
        }
        ResourceUpgradeResponse()
        :retCode(0)
        {
        }
        void resetDefautlt()
        {
            retCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(retCode, 0);
            _os.write(upgradeInfos, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(retCode, 0, true);
            _is.read(upgradeInfos, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(retCode,"retCode");
            _ds.display(upgradeInfos,"upgradeInfos");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(retCode, true);
            _ds.displaySimple(upgradeInfos, false);
            return _os;
        }
    public:
        taf::Int32 retCode;
        vector<jce::ResouceUpgradeInfo> upgradeInfos;
    };
    inline bool operator==(const ResourceUpgradeResponse&l, const ResourceUpgradeResponse&r)
    {
        return l.retCode == r.retCode && l.upgradeInfos == r.upgradeInfos;
    }
    inline bool operator!=(const ResourceUpgradeResponse&l, const ResourceUpgradeResponse&r)
    {
        return !(l == r);
    }


}

#define jce_ResourceCurInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.resName,b.resName);jce_copy_struct(a.curVersion,b.curVersion);

#define jce_ResouceUpgradeInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.retCode,b.retCode);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.resName,b.resName);jce_copy_struct(a.destVersion,b.destVersion);jce_copy_struct(a.downloadUrl,b.downloadUrl);jce_copy_struct(a.md5,b.md5);

#define jce_ResourceUpgradeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.curInfos,b.curInfos);

#define jce_ResourceUpgradeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.retCode,b.retCode);jce_copy_struct(a.upgradeInfos,b.upgradeInfos);



#endif
