// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `star_admin.jce'
// **********************************************************************

#ifndef __STAR_ADMIN_H_
#define __STAR_ADMIN_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace CStarAdminPro
{
    enum ModuleCmd
    {
        CMD_UPLOAD_PICTURE = 61586,
        CMD_READ_IDENTITY = 61587,
        CMD_SEARCH = 61588,
        CMD_PUBLISH_NOTE = 61589,
        CMD_OPER_NOTE = 61590,
        CMD_MY_NOTE = 61591,
        CMD_PUBLISH_TOPIC = 61592,
        CMD_OPER_TOPIC = 61593,
        CMD_MY_TOPIC = 61594,
        CMD_STAR_DYNC = 61595,
        CMD_SET_IDENTITY = 61596,
        CMD_READ_ALL_FANS = 61634,
        CMD_IS_TITLE_EXIST = 61635,
        CMD_MY_STAR = 61636,
        CMD_MODIFY_NOTE = 61637,
        CMD_MODIFY_TOPIC = 61638,
        CMD_NOTE_DETAIL = 61639,
        CMD_SYNC_NOTE = 61684,
        CMD_READ_ALL_STAR = 61685,
        CMD_READ_ALL_NOTE = 61686,
        CMD_READ_ALL_TOPIC = 61688,
        CMD_OPER_TOPIC_RANK = 61692,
        CMD_NOTE_SEARCH = 61823,
        CMD_GET_FANS_MSG = 61824,
        CMD_OPER_FANS_MSG = 61825,
        CMD_READ_FEED_STATUS = 61879,
        CMD_OFF_FEDD_TRANS = 61915,
        CMD_READ_VUID_IDENTITY = 62056,
        CMD_APPLY_IDENTITY = 62083,
        CMD_APPLY_MSG_LIST = 62084,
        CMD_HANDLE_APPLY_MSG = 62085,
        CMD_IS_ALLOW_APPLY = 62098,
        CMD_CREATE_VIEDO_DOKI = 62176,
        CMD_MODIFY_VIEDO_DOKI = 62177,
        CMD_VIEDO_DOKI_LIST = 62178,
        CMD_DOKI_AUTO_PULL = 62179,
        CMD_UPDATE_EXPORT_STATUS = 62180,
        CMD_NEED_EXPORT_DOKI_LIST = 62234,
        CMD_OPER_VIDEO_DOKI = 62182,
        CMD_VIDEO_DOKI_DETAIL = 62214,
        CMD_SAVE_DRAFT = 62220,
        CMD_DRAFT_LIST = 62221,
        CMD_DELETE_DRAFT = 62222,
        CMD_OPER_FLOW_LIST = 62228,
        CMD_FEED_QUERY = 62365,
        CMD_SYNC_DEL_WEIBO = 62431,
        CMD_RELATION_QUERY = 62676,
        CMD_OPER_LIST = 62683,
        CMD_READ_VUID_STATUS = 62684,
        CMD_READ_TOP_RANK = 62917,
        CMD_OPER_IDENTITY = 62988,
        CMD_APPLY_OM_VUID = 63203,
        CMD_SNOWBALL_FEED_OPER = 63978,
        CMD_SQUARE_GOOD_FEEDS = 64023,
        CMD_SQUARE_GOOD_FEEDS_L2 = 64066,
        CMD_CONTENT_CONFIG_REQ = 64105,
    };
    inline string etos(const ModuleCmd & e)
    {
        switch(e)
        {
            case CMD_UPLOAD_PICTURE: return "CMD_UPLOAD_PICTURE";
            case CMD_READ_IDENTITY: return "CMD_READ_IDENTITY";
            case CMD_SEARCH: return "CMD_SEARCH";
            case CMD_PUBLISH_NOTE: return "CMD_PUBLISH_NOTE";
            case CMD_OPER_NOTE: return "CMD_OPER_NOTE";
            case CMD_MY_NOTE: return "CMD_MY_NOTE";
            case CMD_PUBLISH_TOPIC: return "CMD_PUBLISH_TOPIC";
            case CMD_OPER_TOPIC: return "CMD_OPER_TOPIC";
            case CMD_MY_TOPIC: return "CMD_MY_TOPIC";
            case CMD_STAR_DYNC: return "CMD_STAR_DYNC";
            case CMD_SET_IDENTITY: return "CMD_SET_IDENTITY";
            case CMD_READ_ALL_FANS: return "CMD_READ_ALL_FANS";
            case CMD_IS_TITLE_EXIST: return "CMD_IS_TITLE_EXIST";
            case CMD_MY_STAR: return "CMD_MY_STAR";
            case CMD_MODIFY_NOTE: return "CMD_MODIFY_NOTE";
            case CMD_MODIFY_TOPIC: return "CMD_MODIFY_TOPIC";
            case CMD_NOTE_DETAIL: return "CMD_NOTE_DETAIL";
            case CMD_SYNC_NOTE: return "CMD_SYNC_NOTE";
            case CMD_READ_ALL_STAR: return "CMD_READ_ALL_STAR";
            case CMD_READ_ALL_NOTE: return "CMD_READ_ALL_NOTE";
            case CMD_READ_ALL_TOPIC: return "CMD_READ_ALL_TOPIC";
            case CMD_OPER_TOPIC_RANK: return "CMD_OPER_TOPIC_RANK";
            case CMD_NOTE_SEARCH: return "CMD_NOTE_SEARCH";
            case CMD_GET_FANS_MSG: return "CMD_GET_FANS_MSG";
            case CMD_OPER_FANS_MSG: return "CMD_OPER_FANS_MSG";
            case CMD_READ_FEED_STATUS: return "CMD_READ_FEED_STATUS";
            case CMD_OFF_FEDD_TRANS: return "CMD_OFF_FEDD_TRANS";
            case CMD_READ_VUID_IDENTITY: return "CMD_READ_VUID_IDENTITY";
            case CMD_APPLY_IDENTITY: return "CMD_APPLY_IDENTITY";
            case CMD_APPLY_MSG_LIST: return "CMD_APPLY_MSG_LIST";
            case CMD_HANDLE_APPLY_MSG: return "CMD_HANDLE_APPLY_MSG";
            case CMD_IS_ALLOW_APPLY: return "CMD_IS_ALLOW_APPLY";
            case CMD_CREATE_VIEDO_DOKI: return "CMD_CREATE_VIEDO_DOKI";
            case CMD_MODIFY_VIEDO_DOKI: return "CMD_MODIFY_VIEDO_DOKI";
            case CMD_VIEDO_DOKI_LIST: return "CMD_VIEDO_DOKI_LIST";
            case CMD_DOKI_AUTO_PULL: return "CMD_DOKI_AUTO_PULL";
            case CMD_UPDATE_EXPORT_STATUS: return "CMD_UPDATE_EXPORT_STATUS";
            case CMD_NEED_EXPORT_DOKI_LIST: return "CMD_NEED_EXPORT_DOKI_LIST";
            case CMD_OPER_VIDEO_DOKI: return "CMD_OPER_VIDEO_DOKI";
            case CMD_VIDEO_DOKI_DETAIL: return "CMD_VIDEO_DOKI_DETAIL";
            case CMD_SAVE_DRAFT: return "CMD_SAVE_DRAFT";
            case CMD_DRAFT_LIST: return "CMD_DRAFT_LIST";
            case CMD_DELETE_DRAFT: return "CMD_DELETE_DRAFT";
            case CMD_OPER_FLOW_LIST: return "CMD_OPER_FLOW_LIST";
            case CMD_FEED_QUERY: return "CMD_FEED_QUERY";
            case CMD_SYNC_DEL_WEIBO: return "CMD_SYNC_DEL_WEIBO";
            case CMD_RELATION_QUERY: return "CMD_RELATION_QUERY";
            case CMD_OPER_LIST: return "CMD_OPER_LIST";
            case CMD_READ_VUID_STATUS: return "CMD_READ_VUID_STATUS";
            case CMD_READ_TOP_RANK: return "CMD_READ_TOP_RANK";
            case CMD_OPER_IDENTITY: return "CMD_OPER_IDENTITY";
            case CMD_APPLY_OM_VUID: return "CMD_APPLY_OM_VUID";
            case CMD_SNOWBALL_FEED_OPER: return "CMD_SNOWBALL_FEED_OPER";
            case CMD_SQUARE_GOOD_FEEDS: return "CMD_SQUARE_GOOD_FEEDS";
            case CMD_SQUARE_GOOD_FEEDS_L2: return "CMD_SQUARE_GOOD_FEEDS_L2";
            case CMD_CONTENT_CONFIG_REQ: return "CMD_CONTENT_CONFIG_REQ";
            default: return "";
        }
    }
    inline int stoe(const string & s, ModuleCmd & e)
    {
        if(s == "CMD_UPLOAD_PICTURE")  { e=CMD_UPLOAD_PICTURE; return 0;}
        if(s == "CMD_READ_IDENTITY")  { e=CMD_READ_IDENTITY; return 0;}
        if(s == "CMD_SEARCH")  { e=CMD_SEARCH; return 0;}
        if(s == "CMD_PUBLISH_NOTE")  { e=CMD_PUBLISH_NOTE; return 0;}
        if(s == "CMD_OPER_NOTE")  { e=CMD_OPER_NOTE; return 0;}
        if(s == "CMD_MY_NOTE")  { e=CMD_MY_NOTE; return 0;}
        if(s == "CMD_PUBLISH_TOPIC")  { e=CMD_PUBLISH_TOPIC; return 0;}
        if(s == "CMD_OPER_TOPIC")  { e=CMD_OPER_TOPIC; return 0;}
        if(s == "CMD_MY_TOPIC")  { e=CMD_MY_TOPIC; return 0;}
        if(s == "CMD_STAR_DYNC")  { e=CMD_STAR_DYNC; return 0;}
        if(s == "CMD_SET_IDENTITY")  { e=CMD_SET_IDENTITY; return 0;}
        if(s == "CMD_READ_ALL_FANS")  { e=CMD_READ_ALL_FANS; return 0;}
        if(s == "CMD_IS_TITLE_EXIST")  { e=CMD_IS_TITLE_EXIST; return 0;}
        if(s == "CMD_MY_STAR")  { e=CMD_MY_STAR; return 0;}
        if(s == "CMD_MODIFY_NOTE")  { e=CMD_MODIFY_NOTE; return 0;}
        if(s == "CMD_MODIFY_TOPIC")  { e=CMD_MODIFY_TOPIC; return 0;}
        if(s == "CMD_NOTE_DETAIL")  { e=CMD_NOTE_DETAIL; return 0;}
        if(s == "CMD_SYNC_NOTE")  { e=CMD_SYNC_NOTE; return 0;}
        if(s == "CMD_READ_ALL_STAR")  { e=CMD_READ_ALL_STAR; return 0;}
        if(s == "CMD_READ_ALL_NOTE")  { e=CMD_READ_ALL_NOTE; return 0;}
        if(s == "CMD_READ_ALL_TOPIC")  { e=CMD_READ_ALL_TOPIC; return 0;}
        if(s == "CMD_OPER_TOPIC_RANK")  { e=CMD_OPER_TOPIC_RANK; return 0;}
        if(s == "CMD_NOTE_SEARCH")  { e=CMD_NOTE_SEARCH; return 0;}
        if(s == "CMD_GET_FANS_MSG")  { e=CMD_GET_FANS_MSG; return 0;}
        if(s == "CMD_OPER_FANS_MSG")  { e=CMD_OPER_FANS_MSG; return 0;}
        if(s == "CMD_READ_FEED_STATUS")  { e=CMD_READ_FEED_STATUS; return 0;}
        if(s == "CMD_OFF_FEDD_TRANS")  { e=CMD_OFF_FEDD_TRANS; return 0;}
        if(s == "CMD_READ_VUID_IDENTITY")  { e=CMD_READ_VUID_IDENTITY; return 0;}
        if(s == "CMD_APPLY_IDENTITY")  { e=CMD_APPLY_IDENTITY; return 0;}
        if(s == "CMD_APPLY_MSG_LIST")  { e=CMD_APPLY_MSG_LIST; return 0;}
        if(s == "CMD_HANDLE_APPLY_MSG")  { e=CMD_HANDLE_APPLY_MSG; return 0;}
        if(s == "CMD_IS_ALLOW_APPLY")  { e=CMD_IS_ALLOW_APPLY; return 0;}
        if(s == "CMD_CREATE_VIEDO_DOKI")  { e=CMD_CREATE_VIEDO_DOKI; return 0;}
        if(s == "CMD_MODIFY_VIEDO_DOKI")  { e=CMD_MODIFY_VIEDO_DOKI; return 0;}
        if(s == "CMD_VIEDO_DOKI_LIST")  { e=CMD_VIEDO_DOKI_LIST; return 0;}
        if(s == "CMD_DOKI_AUTO_PULL")  { e=CMD_DOKI_AUTO_PULL; return 0;}
        if(s == "CMD_UPDATE_EXPORT_STATUS")  { e=CMD_UPDATE_EXPORT_STATUS; return 0;}
        if(s == "CMD_NEED_EXPORT_DOKI_LIST")  { e=CMD_NEED_EXPORT_DOKI_LIST; return 0;}
        if(s == "CMD_OPER_VIDEO_DOKI")  { e=CMD_OPER_VIDEO_DOKI; return 0;}
        if(s == "CMD_VIDEO_DOKI_DETAIL")  { e=CMD_VIDEO_DOKI_DETAIL; return 0;}
        if(s == "CMD_SAVE_DRAFT")  { e=CMD_SAVE_DRAFT; return 0;}
        if(s == "CMD_DRAFT_LIST")  { e=CMD_DRAFT_LIST; return 0;}
        if(s == "CMD_DELETE_DRAFT")  { e=CMD_DELETE_DRAFT; return 0;}
        if(s == "CMD_OPER_FLOW_LIST")  { e=CMD_OPER_FLOW_LIST; return 0;}
        if(s == "CMD_FEED_QUERY")  { e=CMD_FEED_QUERY; return 0;}
        if(s == "CMD_SYNC_DEL_WEIBO")  { e=CMD_SYNC_DEL_WEIBO; return 0;}
        if(s == "CMD_RELATION_QUERY")  { e=CMD_RELATION_QUERY; return 0;}
        if(s == "CMD_OPER_LIST")  { e=CMD_OPER_LIST; return 0;}
        if(s == "CMD_READ_VUID_STATUS")  { e=CMD_READ_VUID_STATUS; return 0;}
        if(s == "CMD_READ_TOP_RANK")  { e=CMD_READ_TOP_RANK; return 0;}
        if(s == "CMD_OPER_IDENTITY")  { e=CMD_OPER_IDENTITY; return 0;}
        if(s == "CMD_APPLY_OM_VUID")  { e=CMD_APPLY_OM_VUID; return 0;}
        if(s == "CMD_SNOWBALL_FEED_OPER")  { e=CMD_SNOWBALL_FEED_OPER; return 0;}
        if(s == "CMD_SQUARE_GOOD_FEEDS")  { e=CMD_SQUARE_GOOD_FEEDS; return 0;}
        if(s == "CMD_SQUARE_GOOD_FEEDS_L2")  { e=CMD_SQUARE_GOOD_FEEDS_L2; return 0;}
        if(s == "CMD_CONTENT_CONFIG_REQ")  { e=CMD_CONTENT_CONFIG_REQ; return 0;}

        return -1;
    }

    enum ModuleErrCode
    {
        E_SUC = 0,
        E_PACKET_ERROR = 1,
        E_NO_LOGIN = 2,
        E_LOGIN_EEROR = 3,
        E_NO_PERMISSION = 4,
        E_PARAM_ERROR = 5,
        E_PROXY_QUEUE_TIMEOUT = 6,
        E_TOO_MANY_TOP_NOTE = 12,
        E_CID_STAR_ALL_NONE = 13,
        E_ACCOUNT_NOT_EXIST = 14,
        E_ALREADY_CREATOR = 15,
        E_ALREADY_ADMINISTRATOR = 16,
        E_ALREADY_SUPER_ADMINISTRATOR = 17,
        E_RIGHT_NOT_EXIST = 18,
        E_ALREADY_STAR_LEADER = 19,
        E_TOO_MANY_ADMINISTRATOR = 20,
        E_TOO_MANY_STAR_LEADER = 21,
        E_TOO_MANY_CREATOR = 22,
        E_FANS_LEVEL_TOO_LOW = 23,
        E_NO_LEADER_ADMINISTRATOR = 24,
        E_ALREADY_APPLY = 25,
        E_APPLY_REJECTED = 26,
        E_ALREADY_BIND_DOKI = 27,
        E_EVENT_ALREADY_EXIST = 28,
        E_ALREADY_FORBIDDEN = 29,
        E_TOP_RANK_ALREADY_EXIST = 30,
        E_ACCOUNT_ERROR = 101,
        E_FANS_LEVEL_ERROR = 102,
        E_USER_INFO_ERROR = 103,
        E_DB_ERROR = 104,
        E_REDIS_ERROR = 105,
        E_NOTE_ERROR = 106,
        E_TOPIC_ERROR = 107,
        E_PIC_ERROR = 108,
        E_IDENTITY_ERROR = 109,
        E_MEDIA_ERROR = 110,
        E_BASE_DOKI_ERROR = 111,
        E_GET_CURL_ERROR = 112,
        E_EVENT_ERROR = 113,
        E_PROMOTION_ERROR = 114,
        E_ES_ERROR = 115,
        E_GENERATE_GIF_ERROR = 116,
        E_SET_UGC_GIF_ERROR = 117,
        E_AUDIT_VIDEO_ERROR = 118,
        E_SERVER_ERROR = 201,
    };
    inline string etos(const ModuleErrCode & e)
    {
        switch(e)
        {
            case E_SUC: return "E_SUC";
            case E_PACKET_ERROR: return "E_PACKET_ERROR";
            case E_NO_LOGIN: return "E_NO_LOGIN";
            case E_LOGIN_EEROR: return "E_LOGIN_EEROR";
            case E_NO_PERMISSION: return "E_NO_PERMISSION";
            case E_PARAM_ERROR: return "E_PARAM_ERROR";
            case E_PROXY_QUEUE_TIMEOUT: return "E_PROXY_QUEUE_TIMEOUT";
            case E_TOO_MANY_TOP_NOTE: return "E_TOO_MANY_TOP_NOTE";
            case E_CID_STAR_ALL_NONE: return "E_CID_STAR_ALL_NONE";
            case E_ACCOUNT_NOT_EXIST: return "E_ACCOUNT_NOT_EXIST";
            case E_ALREADY_CREATOR: return "E_ALREADY_CREATOR";
            case E_ALREADY_ADMINISTRATOR: return "E_ALREADY_ADMINISTRATOR";
            case E_ALREADY_SUPER_ADMINISTRATOR: return "E_ALREADY_SUPER_ADMINISTRATOR";
            case E_RIGHT_NOT_EXIST: return "E_RIGHT_NOT_EXIST";
            case E_ALREADY_STAR_LEADER: return "E_ALREADY_STAR_LEADER";
            case E_TOO_MANY_ADMINISTRATOR: return "E_TOO_MANY_ADMINISTRATOR";
            case E_TOO_MANY_STAR_LEADER: return "E_TOO_MANY_STAR_LEADER";
            case E_TOO_MANY_CREATOR: return "E_TOO_MANY_CREATOR";
            case E_FANS_LEVEL_TOO_LOW: return "E_FANS_LEVEL_TOO_LOW";
            case E_NO_LEADER_ADMINISTRATOR: return "E_NO_LEADER_ADMINISTRATOR";
            case E_ALREADY_APPLY: return "E_ALREADY_APPLY";
            case E_APPLY_REJECTED: return "E_APPLY_REJECTED";
            case E_ALREADY_BIND_DOKI: return "E_ALREADY_BIND_DOKI";
            case E_EVENT_ALREADY_EXIST: return "E_EVENT_ALREADY_EXIST";
            case E_ALREADY_FORBIDDEN: return "E_ALREADY_FORBIDDEN";
            case E_TOP_RANK_ALREADY_EXIST: return "E_TOP_RANK_ALREADY_EXIST";
            case E_ACCOUNT_ERROR: return "E_ACCOUNT_ERROR";
            case E_FANS_LEVEL_ERROR: return "E_FANS_LEVEL_ERROR";
            case E_USER_INFO_ERROR: return "E_USER_INFO_ERROR";
            case E_DB_ERROR: return "E_DB_ERROR";
            case E_REDIS_ERROR: return "E_REDIS_ERROR";
            case E_NOTE_ERROR: return "E_NOTE_ERROR";
            case E_TOPIC_ERROR: return "E_TOPIC_ERROR";
            case E_PIC_ERROR: return "E_PIC_ERROR";
            case E_IDENTITY_ERROR: return "E_IDENTITY_ERROR";
            case E_MEDIA_ERROR: return "E_MEDIA_ERROR";
            case E_BASE_DOKI_ERROR: return "E_BASE_DOKI_ERROR";
            case E_GET_CURL_ERROR: return "E_GET_CURL_ERROR";
            case E_EVENT_ERROR: return "E_EVENT_ERROR";
            case E_PROMOTION_ERROR: return "E_PROMOTION_ERROR";
            case E_ES_ERROR: return "E_ES_ERROR";
            case E_GENERATE_GIF_ERROR: return "E_GENERATE_GIF_ERROR";
            case E_SET_UGC_GIF_ERROR: return "E_SET_UGC_GIF_ERROR";
            case E_AUDIT_VIDEO_ERROR: return "E_AUDIT_VIDEO_ERROR";
            case E_SERVER_ERROR: return "E_SERVER_ERROR";
            default: return "";
        }
    }
    inline int stoe(const string & s, ModuleErrCode & e)
    {
        if(s == "E_SUC")  { e=E_SUC; return 0;}
        if(s == "E_PACKET_ERROR")  { e=E_PACKET_ERROR; return 0;}
        if(s == "E_NO_LOGIN")  { e=E_NO_LOGIN; return 0;}
        if(s == "E_LOGIN_EEROR")  { e=E_LOGIN_EEROR; return 0;}
        if(s == "E_NO_PERMISSION")  { e=E_NO_PERMISSION; return 0;}
        if(s == "E_PARAM_ERROR")  { e=E_PARAM_ERROR; return 0;}
        if(s == "E_PROXY_QUEUE_TIMEOUT")  { e=E_PROXY_QUEUE_TIMEOUT; return 0;}
        if(s == "E_TOO_MANY_TOP_NOTE")  { e=E_TOO_MANY_TOP_NOTE; return 0;}
        if(s == "E_CID_STAR_ALL_NONE")  { e=E_CID_STAR_ALL_NONE; return 0;}
        if(s == "E_ACCOUNT_NOT_EXIST")  { e=E_ACCOUNT_NOT_EXIST; return 0;}
        if(s == "E_ALREADY_CREATOR")  { e=E_ALREADY_CREATOR; return 0;}
        if(s == "E_ALREADY_ADMINISTRATOR")  { e=E_ALREADY_ADMINISTRATOR; return 0;}
        if(s == "E_ALREADY_SUPER_ADMINISTRATOR")  { e=E_ALREADY_SUPER_ADMINISTRATOR; return 0;}
        if(s == "E_RIGHT_NOT_EXIST")  { e=E_RIGHT_NOT_EXIST; return 0;}
        if(s == "E_ALREADY_STAR_LEADER")  { e=E_ALREADY_STAR_LEADER; return 0;}
        if(s == "E_TOO_MANY_ADMINISTRATOR")  { e=E_TOO_MANY_ADMINISTRATOR; return 0;}
        if(s == "E_TOO_MANY_STAR_LEADER")  { e=E_TOO_MANY_STAR_LEADER; return 0;}
        if(s == "E_TOO_MANY_CREATOR")  { e=E_TOO_MANY_CREATOR; return 0;}
        if(s == "E_FANS_LEVEL_TOO_LOW")  { e=E_FANS_LEVEL_TOO_LOW; return 0;}
        if(s == "E_NO_LEADER_ADMINISTRATOR")  { e=E_NO_LEADER_ADMINISTRATOR; return 0;}
        if(s == "E_ALREADY_APPLY")  { e=E_ALREADY_APPLY; return 0;}
        if(s == "E_APPLY_REJECTED")  { e=E_APPLY_REJECTED; return 0;}
        if(s == "E_ALREADY_BIND_DOKI")  { e=E_ALREADY_BIND_DOKI; return 0;}
        if(s == "E_EVENT_ALREADY_EXIST")  { e=E_EVENT_ALREADY_EXIST; return 0;}
        if(s == "E_ALREADY_FORBIDDEN")  { e=E_ALREADY_FORBIDDEN; return 0;}
        if(s == "E_TOP_RANK_ALREADY_EXIST")  { e=E_TOP_RANK_ALREADY_EXIST; return 0;}
        if(s == "E_ACCOUNT_ERROR")  { e=E_ACCOUNT_ERROR; return 0;}
        if(s == "E_FANS_LEVEL_ERROR")  { e=E_FANS_LEVEL_ERROR; return 0;}
        if(s == "E_USER_INFO_ERROR")  { e=E_USER_INFO_ERROR; return 0;}
        if(s == "E_DB_ERROR")  { e=E_DB_ERROR; return 0;}
        if(s == "E_REDIS_ERROR")  { e=E_REDIS_ERROR; return 0;}
        if(s == "E_NOTE_ERROR")  { e=E_NOTE_ERROR; return 0;}
        if(s == "E_TOPIC_ERROR")  { e=E_TOPIC_ERROR; return 0;}
        if(s == "E_PIC_ERROR")  { e=E_PIC_ERROR; return 0;}
        if(s == "E_IDENTITY_ERROR")  { e=E_IDENTITY_ERROR; return 0;}
        if(s == "E_MEDIA_ERROR")  { e=E_MEDIA_ERROR; return 0;}
        if(s == "E_BASE_DOKI_ERROR")  { e=E_BASE_DOKI_ERROR; return 0;}
        if(s == "E_GET_CURL_ERROR")  { e=E_GET_CURL_ERROR; return 0;}
        if(s == "E_EVENT_ERROR")  { e=E_EVENT_ERROR; return 0;}
        if(s == "E_PROMOTION_ERROR")  { e=E_PROMOTION_ERROR; return 0;}
        if(s == "E_ES_ERROR")  { e=E_ES_ERROR; return 0;}
        if(s == "E_GENERATE_GIF_ERROR")  { e=E_GENERATE_GIF_ERROR; return 0;}
        if(s == "E_SET_UGC_GIF_ERROR")  { e=E_SET_UGC_GIF_ERROR; return 0;}
        if(s == "E_AUDIT_VIDEO_ERROR")  { e=E_AUDIT_VIDEO_ERROR; return 0;}
        if(s == "E_SERVER_ERROR")  { e=E_SERVER_ERROR; return 0;}

        return -1;
    }

    enum IdentityType
    {
        IDENTITY_CREATOR = 1,
        IDENTITY_ADMINISTRATOR = 2,
        IDENTITY_SUPER_ADMINISTRATOR = 3,
        IDENTITY_STAR_LEADER = 4,
    };
    inline string etos(const IdentityType & e)
    {
        switch(e)
        {
            case IDENTITY_CREATOR: return "IDENTITY_CREATOR";
            case IDENTITY_ADMINISTRATOR: return "IDENTITY_ADMINISTRATOR";
            case IDENTITY_SUPER_ADMINISTRATOR: return "IDENTITY_SUPER_ADMINISTRATOR";
            case IDENTITY_STAR_LEADER: return "IDENTITY_STAR_LEADER";
            default: return "";
        }
    }
    inline int stoe(const string & s, IdentityType & e)
    {
        if(s == "IDENTITY_CREATOR")  { e=IDENTITY_CREATOR; return 0;}
        if(s == "IDENTITY_ADMINISTRATOR")  { e=IDENTITY_ADMINISTRATOR; return 0;}
        if(s == "IDENTITY_SUPER_ADMINISTRATOR")  { e=IDENTITY_SUPER_ADMINISTRATOR; return 0;}
        if(s == "IDENTITY_STAR_LEADER")  { e=IDENTITY_STAR_LEADER; return 0;}

        return -1;
    }

    enum NoteSource
    {
        UN_KNOWN = 0,
        CREATOR = 1,
        ADMINISTRATOR = 2,
        SUPER_ADMINISTRATOR = 3,
        STAR_LEADER = 4,
        WEIBO = 10,
        INSTAGRAM = 11,
        EPISODE = 12,
        MACHINE_AGGREGATION = 20,
        IEG_TGL = 21,
        OM_DATA = 22,
        DOBAN_DATA = 23,
        DIALOG = 24,
    };
    inline string etos(const NoteSource & e)
    {
        switch(e)
        {
            case UN_KNOWN: return "UN_KNOWN";
            case CREATOR: return "CREATOR";
            case ADMINISTRATOR: return "ADMINISTRATOR";
            case SUPER_ADMINISTRATOR: return "SUPER_ADMINISTRATOR";
            case STAR_LEADER: return "STAR_LEADER";
            case WEIBO: return "WEIBO";
            case INSTAGRAM: return "INSTAGRAM";
            case EPISODE: return "EPISODE";
            case MACHINE_AGGREGATION: return "MACHINE_AGGREGATION";
            case IEG_TGL: return "IEG_TGL";
            case OM_DATA: return "OM_DATA";
            case DOBAN_DATA: return "DOBAN_DATA";
            case DIALOG: return "DIALOG";
            default: return "";
        }
    }
    inline int stoe(const string & s, NoteSource & e)
    {
        if(s == "UN_KNOWN")  { e=UN_KNOWN; return 0;}
        if(s == "CREATOR")  { e=CREATOR; return 0;}
        if(s == "ADMINISTRATOR")  { e=ADMINISTRATOR; return 0;}
        if(s == "SUPER_ADMINISTRATOR")  { e=SUPER_ADMINISTRATOR; return 0;}
        if(s == "STAR_LEADER")  { e=STAR_LEADER; return 0;}
        if(s == "WEIBO")  { e=WEIBO; return 0;}
        if(s == "INSTAGRAM")  { e=INSTAGRAM; return 0;}
        if(s == "EPISODE")  { e=EPISODE; return 0;}
        if(s == "MACHINE_AGGREGATION")  { e=MACHINE_AGGREGATION; return 0;}
        if(s == "IEG_TGL")  { e=IEG_TGL; return 0;}
        if(s == "OM_DATA")  { e=OM_DATA; return 0;}
        if(s == "DOBAN_DATA")  { e=DOBAN_DATA; return 0;}
        if(s == "DIALOG")  { e=DIALOG; return 0;}

        return -1;
    }

    enum SearchType
    {
        SEARCH_STAR = 0,
        SEARCH_TOPIC = 1,
        SEARCH_CID = 2,
        SEARCH_LID = 3,
        SEARCH_VIDEO_DOKI = 4,
        SEARCH_ACTIVITY = 5,
        SEARCH_DOKI = 10,
    };
    inline string etos(const SearchType & e)
    {
        switch(e)
        {
            case SEARCH_STAR: return "SEARCH_STAR";
            case SEARCH_TOPIC: return "SEARCH_TOPIC";
            case SEARCH_CID: return "SEARCH_CID";
            case SEARCH_LID: return "SEARCH_LID";
            case SEARCH_VIDEO_DOKI: return "SEARCH_VIDEO_DOKI";
            case SEARCH_ACTIVITY: return "SEARCH_ACTIVITY";
            case SEARCH_DOKI: return "SEARCH_DOKI";
            default: return "";
        }
    }
    inline int stoe(const string & s, SearchType & e)
    {
        if(s == "SEARCH_STAR")  { e=SEARCH_STAR; return 0;}
        if(s == "SEARCH_TOPIC")  { e=SEARCH_TOPIC; return 0;}
        if(s == "SEARCH_CID")  { e=SEARCH_CID; return 0;}
        if(s == "SEARCH_LID")  { e=SEARCH_LID; return 0;}
        if(s == "SEARCH_VIDEO_DOKI")  { e=SEARCH_VIDEO_DOKI; return 0;}
        if(s == "SEARCH_ACTIVITY")  { e=SEARCH_ACTIVITY; return 0;}
        if(s == "SEARCH_DOKI")  { e=SEARCH_DOKI; return 0;}

        return -1;
    }

    enum OperType
    {
        OPER_DELETE = 1,
        OPER_TOP = 2,
        OPER_HOT = 3,
        OPER_UNDO_TOP = 4,
        OPER_UNDO_HOT = 5,
        OPER_OFF = 6,
        OPER_MOVE_IN = 7,
        OPER_JOIN = 8,
        OPER_NOT_JOIN = 9,
        OPER_EDIT = 10,
        OPER_MOVE_OUT = 11,
        OPER_UP = 12,
        OPER_DOWNLOAD = 13,
        OPER_RECOMMEND = 14,
        OPER_UNDO_RECOMMEND = 15,
        OPER_IN_SQUARE = 16,
        OPER_OUT_SQUARE = 17,
        OPER_FORBIDDEN_TALK = 20,
        OPER_CANCLE_FORBIDDEN_TALK = 21,
        OPER_GLOBAL_FORBIDDEN_TALK = 22,
        OPER_CANCLE_GLOBAL_FORBIDDEN_TALK = 23,
    };
    inline string etos(const OperType & e)
    {
        switch(e)
        {
            case OPER_DELETE: return "OPER_DELETE";
            case OPER_TOP: return "OPER_TOP";
            case OPER_HOT: return "OPER_HOT";
            case OPER_UNDO_TOP: return "OPER_UNDO_TOP";
            case OPER_UNDO_HOT: return "OPER_UNDO_HOT";
            case OPER_OFF: return "OPER_OFF";
            case OPER_MOVE_IN: return "OPER_MOVE_IN";
            case OPER_JOIN: return "OPER_JOIN";
            case OPER_NOT_JOIN: return "OPER_NOT_JOIN";
            case OPER_EDIT: return "OPER_EDIT";
            case OPER_MOVE_OUT: return "OPER_MOVE_OUT";
            case OPER_UP: return "OPER_UP";
            case OPER_DOWNLOAD: return "OPER_DOWNLOAD";
            case OPER_RECOMMEND: return "OPER_RECOMMEND";
            case OPER_UNDO_RECOMMEND: return "OPER_UNDO_RECOMMEND";
            case OPER_IN_SQUARE: return "OPER_IN_SQUARE";
            case OPER_OUT_SQUARE: return "OPER_OUT_SQUARE";
            case OPER_FORBIDDEN_TALK: return "OPER_FORBIDDEN_TALK";
            case OPER_CANCLE_FORBIDDEN_TALK: return "OPER_CANCLE_FORBIDDEN_TALK";
            case OPER_GLOBAL_FORBIDDEN_TALK: return "OPER_GLOBAL_FORBIDDEN_TALK";
            case OPER_CANCLE_GLOBAL_FORBIDDEN_TALK: return "OPER_CANCLE_GLOBAL_FORBIDDEN_TALK";
            default: return "";
        }
    }
    inline int stoe(const string & s, OperType & e)
    {
        if(s == "OPER_DELETE")  { e=OPER_DELETE; return 0;}
        if(s == "OPER_TOP")  { e=OPER_TOP; return 0;}
        if(s == "OPER_HOT")  { e=OPER_HOT; return 0;}
        if(s == "OPER_UNDO_TOP")  { e=OPER_UNDO_TOP; return 0;}
        if(s == "OPER_UNDO_HOT")  { e=OPER_UNDO_HOT; return 0;}
        if(s == "OPER_OFF")  { e=OPER_OFF; return 0;}
        if(s == "OPER_MOVE_IN")  { e=OPER_MOVE_IN; return 0;}
        if(s == "OPER_JOIN")  { e=OPER_JOIN; return 0;}
        if(s == "OPER_NOT_JOIN")  { e=OPER_NOT_JOIN; return 0;}
        if(s == "OPER_EDIT")  { e=OPER_EDIT; return 0;}
        if(s == "OPER_MOVE_OUT")  { e=OPER_MOVE_OUT; return 0;}
        if(s == "OPER_UP")  { e=OPER_UP; return 0;}
        if(s == "OPER_DOWNLOAD")  { e=OPER_DOWNLOAD; return 0;}
        if(s == "OPER_RECOMMEND")  { e=OPER_RECOMMEND; return 0;}
        if(s == "OPER_UNDO_RECOMMEND")  { e=OPER_UNDO_RECOMMEND; return 0;}
        if(s == "OPER_IN_SQUARE")  { e=OPER_IN_SQUARE; return 0;}
        if(s == "OPER_OUT_SQUARE")  { e=OPER_OUT_SQUARE; return 0;}
        if(s == "OPER_FORBIDDEN_TALK")  { e=OPER_FORBIDDEN_TALK; return 0;}
        if(s == "OPER_CANCLE_FORBIDDEN_TALK")  { e=OPER_CANCLE_FORBIDDEN_TALK; return 0;}
        if(s == "OPER_GLOBAL_FORBIDDEN_TALK")  { e=OPER_GLOBAL_FORBIDDEN_TALK; return 0;}
        if(s == "OPER_CANCLE_GLOBAL_FORBIDDEN_TALK")  { e=OPER_CANCLE_GLOBAL_FORBIDDEN_TALK; return 0;}

        return -1;
    }

    enum FeedStatus
    {
        FS_HOT = 1,
        FS_GOOD = 2,
        FS_TOP = 4,
        FS_RECOMMEND = 8,
        FS_SQUARE = 16,
    };
    inline string etos(const FeedStatus & e)
    {
        switch(e)
        {
            case FS_HOT: return "FS_HOT";
            case FS_GOOD: return "FS_GOOD";
            case FS_TOP: return "FS_TOP";
            case FS_RECOMMEND: return "FS_RECOMMEND";
            case FS_SQUARE: return "FS_SQUARE";
            default: return "";
        }
    }
    inline int stoe(const string & s, FeedStatus & e)
    {
        if(s == "FS_HOT")  { e=FS_HOT; return 0;}
        if(s == "FS_GOOD")  { e=FS_GOOD; return 0;}
        if(s == "FS_TOP")  { e=FS_TOP; return 0;}
        if(s == "FS_RECOMMEND")  { e=FS_RECOMMEND; return 0;}
        if(s == "FS_SQUARE")  { e=FS_SQUARE; return 0;}

        return -1;
    }

    enum StarType
    {
        STAR_CHINA = 1,
        STAR_FOREIGN = 2,
    };
    inline string etos(const StarType & e)
    {
        switch(e)
        {
            case STAR_CHINA: return "STAR_CHINA";
            case STAR_FOREIGN: return "STAR_FOREIGN";
            default: return "";
        }
    }
    inline int stoe(const string & s, StarType & e)
    {
        if(s == "STAR_CHINA")  { e=STAR_CHINA; return 0;}
        if(s == "STAR_FOREIGN")  { e=STAR_FOREIGN; return 0;}

        return -1;
    }

    enum NoteCategory
    {
        STAR_PRODUCT = 1,
        ENTERTAIN_NEWS = 7,
        HOT_RICE = 20,
    };
    inline string etos(const NoteCategory & e)
    {
        switch(e)
        {
            case STAR_PRODUCT: return "STAR_PRODUCT";
            case ENTERTAIN_NEWS: return "ENTERTAIN_NEWS";
            case HOT_RICE: return "HOT_RICE";
            default: return "";
        }
    }
    inline int stoe(const string & s, NoteCategory & e)
    {
        if(s == "STAR_PRODUCT")  { e=STAR_PRODUCT; return 0;}
        if(s == "ENTERTAIN_NEWS")  { e=ENTERTAIN_NEWS; return 0;}
        if(s == "HOT_RICE")  { e=HOT_RICE; return 0;}

        return -1;
    }

    enum VIDEO_MAIN_TYPE
    {
        EN_VIDEO_MAIN_TYPE_MOVIE = 1,
        EN_VIDEO_MAIN_TYPE_TV = 2,
        EN_VIDEO_MAIN_TYPE_COMIC = 3,
        EN_VIDEO_MAIN_TYPE_SPORT = 4,
        EN_VIDEO_MAIN_TYPE_ENTERTAINMENT = 5,
        EN_VIDEO_MAIN_TYPE_GAME = 6,
        EN_VIDEO_MAIN_TYPE_BOKE = 7,
        EN_VIDEO_MAIN_TYPE_HOT = 8,
        EN_VIDEO_MAIN_TYPE_DOCUMENTARY = 9,
        EN_VIDEO_MAIN_TYPE_VARIETY = 10,
        EN_HOBBY_DOKI_BEGIN = 1000,
        EN_HOBBY_DOKI_1001 = 1001,
        EN_HOBBY_DOKI_1002 = 1002,
        EN_HOBBY_DOKI_1003 = 1003,
        EN_HOBBY_DOKI_1004 = 1004,
        EN_HOBBY_DOKI_1005 = 1005,
        EN_HOBBY_DOKI_1006 = 1006,
        EN_HOBBY_DOKI_1007 = 1007,
        EN_HOBBY_DOKI_1008 = 1008,
        EN_HOBBY_DOKI_1101 = 1101,
        EN_HOBBY_DOKI_1102 = 1102,
        EN_HOBBY_DOKI_1103 = 1103,
        EN_HOBBY_DOKI_1104 = 1104,
        EN_HOBBY_DOKI_1201 = 1201,
        EN_HOBBY_DOKI_1202 = 1202,
        EN_HOBBY_DOKI_1203 = 1203,
        EN_HOBBY_DOKI_1204 = 1204,
        EN_HOBBY_DOKI_1205 = 1205,
        EN_HOBBY_DOKI_1301 = 1301,
        EN_HOBBY_DOKI_1302 = 1302,
        EN_HOBBY_DOKI_1303 = 1303,
        EN_HOBBY_DOKI_1304 = 1304,
        EN_GAME_DOKI_BEGIN = 100000,
        EN_WECHAT_DOKI_BEGIN = 200000,
        EN_ECY_IP_BEGIN = 300000,
        EN_ECY_COMPLEX_BEGIN = 400000,
        EN_ECY_CREATION_BEGIN = 500000,
    };
    inline string etos(const VIDEO_MAIN_TYPE & e)
    {
        switch(e)
        {
            case EN_VIDEO_MAIN_TYPE_MOVIE: return "EN_VIDEO_MAIN_TYPE_MOVIE";
            case EN_VIDEO_MAIN_TYPE_TV: return "EN_VIDEO_MAIN_TYPE_TV";
            case EN_VIDEO_MAIN_TYPE_COMIC: return "EN_VIDEO_MAIN_TYPE_COMIC";
            case EN_VIDEO_MAIN_TYPE_SPORT: return "EN_VIDEO_MAIN_TYPE_SPORT";
            case EN_VIDEO_MAIN_TYPE_ENTERTAINMENT: return "EN_VIDEO_MAIN_TYPE_ENTERTAINMENT";
            case EN_VIDEO_MAIN_TYPE_GAME: return "EN_VIDEO_MAIN_TYPE_GAME";
            case EN_VIDEO_MAIN_TYPE_BOKE: return "EN_VIDEO_MAIN_TYPE_BOKE";
            case EN_VIDEO_MAIN_TYPE_HOT: return "EN_VIDEO_MAIN_TYPE_HOT";
            case EN_VIDEO_MAIN_TYPE_DOCUMENTARY: return "EN_VIDEO_MAIN_TYPE_DOCUMENTARY";
            case EN_VIDEO_MAIN_TYPE_VARIETY: return "EN_VIDEO_MAIN_TYPE_VARIETY";
            case EN_HOBBY_DOKI_BEGIN: return "EN_HOBBY_DOKI_BEGIN";
            case EN_HOBBY_DOKI_1001: return "EN_HOBBY_DOKI_1001";
            case EN_HOBBY_DOKI_1002: return "EN_HOBBY_DOKI_1002";
            case EN_HOBBY_DOKI_1003: return "EN_HOBBY_DOKI_1003";
            case EN_HOBBY_DOKI_1004: return "EN_HOBBY_DOKI_1004";
            case EN_HOBBY_DOKI_1005: return "EN_HOBBY_DOKI_1005";
            case EN_HOBBY_DOKI_1006: return "EN_HOBBY_DOKI_1006";
            case EN_HOBBY_DOKI_1007: return "EN_HOBBY_DOKI_1007";
            case EN_HOBBY_DOKI_1008: return "EN_HOBBY_DOKI_1008";
            case EN_HOBBY_DOKI_1101: return "EN_HOBBY_DOKI_1101";
            case EN_HOBBY_DOKI_1102: return "EN_HOBBY_DOKI_1102";
            case EN_HOBBY_DOKI_1103: return "EN_HOBBY_DOKI_1103";
            case EN_HOBBY_DOKI_1104: return "EN_HOBBY_DOKI_1104";
            case EN_HOBBY_DOKI_1201: return "EN_HOBBY_DOKI_1201";
            case EN_HOBBY_DOKI_1202: return "EN_HOBBY_DOKI_1202";
            case EN_HOBBY_DOKI_1203: return "EN_HOBBY_DOKI_1203";
            case EN_HOBBY_DOKI_1204: return "EN_HOBBY_DOKI_1204";
            case EN_HOBBY_DOKI_1205: return "EN_HOBBY_DOKI_1205";
            case EN_HOBBY_DOKI_1301: return "EN_HOBBY_DOKI_1301";
            case EN_HOBBY_DOKI_1302: return "EN_HOBBY_DOKI_1302";
            case EN_HOBBY_DOKI_1303: return "EN_HOBBY_DOKI_1303";
            case EN_HOBBY_DOKI_1304: return "EN_HOBBY_DOKI_1304";
            case EN_GAME_DOKI_BEGIN: return "EN_GAME_DOKI_BEGIN";
            case EN_WECHAT_DOKI_BEGIN: return "EN_WECHAT_DOKI_BEGIN";
            case EN_ECY_IP_BEGIN: return "EN_ECY_IP_BEGIN";
            case EN_ECY_COMPLEX_BEGIN: return "EN_ECY_COMPLEX_BEGIN";
            case EN_ECY_CREATION_BEGIN: return "EN_ECY_CREATION_BEGIN";
            default: return "";
        }
    }
    inline int stoe(const string & s, VIDEO_MAIN_TYPE & e)
    {
        if(s == "EN_VIDEO_MAIN_TYPE_MOVIE")  { e=EN_VIDEO_MAIN_TYPE_MOVIE; return 0;}
        if(s == "EN_VIDEO_MAIN_TYPE_TV")  { e=EN_VIDEO_MAIN_TYPE_TV; return 0;}
        if(s == "EN_VIDEO_MAIN_TYPE_COMIC")  { e=EN_VIDEO_MAIN_TYPE_COMIC; return 0;}
        if(s == "EN_VIDEO_MAIN_TYPE_SPORT")  { e=EN_VIDEO_MAIN_TYPE_SPORT; return 0;}
        if(s == "EN_VIDEO_MAIN_TYPE_ENTERTAINMENT")  { e=EN_VIDEO_MAIN_TYPE_ENTERTAINMENT; return 0;}
        if(s == "EN_VIDEO_MAIN_TYPE_GAME")  { e=EN_VIDEO_MAIN_TYPE_GAME; return 0;}
        if(s == "EN_VIDEO_MAIN_TYPE_BOKE")  { e=EN_VIDEO_MAIN_TYPE_BOKE; return 0;}
        if(s == "EN_VIDEO_MAIN_TYPE_HOT")  { e=EN_VIDEO_MAIN_TYPE_HOT; return 0;}
        if(s == "EN_VIDEO_MAIN_TYPE_DOCUMENTARY")  { e=EN_VIDEO_MAIN_TYPE_DOCUMENTARY; return 0;}
        if(s == "EN_VIDEO_MAIN_TYPE_VARIETY")  { e=EN_VIDEO_MAIN_TYPE_VARIETY; return 0;}
        if(s == "EN_HOBBY_DOKI_BEGIN")  { e=EN_HOBBY_DOKI_BEGIN; return 0;}
        if(s == "EN_HOBBY_DOKI_1001")  { e=EN_HOBBY_DOKI_1001; return 0;}
        if(s == "EN_HOBBY_DOKI_1002")  { e=EN_HOBBY_DOKI_1002; return 0;}
        if(s == "EN_HOBBY_DOKI_1003")  { e=EN_HOBBY_DOKI_1003; return 0;}
        if(s == "EN_HOBBY_DOKI_1004")  { e=EN_HOBBY_DOKI_1004; return 0;}
        if(s == "EN_HOBBY_DOKI_1005")  { e=EN_HOBBY_DOKI_1005; return 0;}
        if(s == "EN_HOBBY_DOKI_1006")  { e=EN_HOBBY_DOKI_1006; return 0;}
        if(s == "EN_HOBBY_DOKI_1007")  { e=EN_HOBBY_DOKI_1007; return 0;}
        if(s == "EN_HOBBY_DOKI_1008")  { e=EN_HOBBY_DOKI_1008; return 0;}
        if(s == "EN_HOBBY_DOKI_1101")  { e=EN_HOBBY_DOKI_1101; return 0;}
        if(s == "EN_HOBBY_DOKI_1102")  { e=EN_HOBBY_DOKI_1102; return 0;}
        if(s == "EN_HOBBY_DOKI_1103")  { e=EN_HOBBY_DOKI_1103; return 0;}
        if(s == "EN_HOBBY_DOKI_1104")  { e=EN_HOBBY_DOKI_1104; return 0;}
        if(s == "EN_HOBBY_DOKI_1201")  { e=EN_HOBBY_DOKI_1201; return 0;}
        if(s == "EN_HOBBY_DOKI_1202")  { e=EN_HOBBY_DOKI_1202; return 0;}
        if(s == "EN_HOBBY_DOKI_1203")  { e=EN_HOBBY_DOKI_1203; return 0;}
        if(s == "EN_HOBBY_DOKI_1204")  { e=EN_HOBBY_DOKI_1204; return 0;}
        if(s == "EN_HOBBY_DOKI_1205")  { e=EN_HOBBY_DOKI_1205; return 0;}
        if(s == "EN_HOBBY_DOKI_1301")  { e=EN_HOBBY_DOKI_1301; return 0;}
        if(s == "EN_HOBBY_DOKI_1302")  { e=EN_HOBBY_DOKI_1302; return 0;}
        if(s == "EN_HOBBY_DOKI_1303")  { e=EN_HOBBY_DOKI_1303; return 0;}
        if(s == "EN_HOBBY_DOKI_1304")  { e=EN_HOBBY_DOKI_1304; return 0;}
        if(s == "EN_GAME_DOKI_BEGIN")  { e=EN_GAME_DOKI_BEGIN; return 0;}
        if(s == "EN_WECHAT_DOKI_BEGIN")  { e=EN_WECHAT_DOKI_BEGIN; return 0;}
        if(s == "EN_ECY_IP_BEGIN")  { e=EN_ECY_IP_BEGIN; return 0;}
        if(s == "EN_ECY_COMPLEX_BEGIN")  { e=EN_ECY_COMPLEX_BEGIN; return 0;}
        if(s == "EN_ECY_CREATION_BEGIN")  { e=EN_ECY_CREATION_BEGIN; return 0;}

        return -1;
    }

    enum E_TopType
    {
        TOP_NORMAL = 1,
        TOP_ACTIVITY = 2,
        TOP_NOTICE = 3,
    };
    inline string etos(const E_TopType & e)
    {
        switch(e)
        {
            case TOP_NORMAL: return "TOP_NORMAL";
            case TOP_ACTIVITY: return "TOP_ACTIVITY";
            case TOP_NOTICE: return "TOP_NOTICE";
            default: return "";
        }
    }
    inline int stoe(const string & s, E_TopType & e)
    {
        if(s == "TOP_NORMAL")  { e=TOP_NORMAL; return 0;}
        if(s == "TOP_ACTIVITY")  { e=TOP_ACTIVITY; return 0;}
        if(s == "TOP_NOTICE")  { e=TOP_NOTICE; return 0;}

        return -1;
    }

    enum ChannelType
    {
        STAR_DYNC = 1,
        STAR_TALK = 2,
        FANS_TEAM = 3,
        DOKI = 4,
    };
    inline string etos(const ChannelType & e)
    {
        switch(e)
        {
            case STAR_DYNC: return "STAR_DYNC";
            case STAR_TALK: return "STAR_TALK";
            case FANS_TEAM: return "FANS_TEAM";
            case DOKI: return "DOKI";
            default: return "";
        }
    }
    inline int stoe(const string & s, ChannelType & e)
    {
        if(s == "STAR_DYNC")  { e=STAR_DYNC; return 0;}
        if(s == "STAR_TALK")  { e=STAR_TALK; return 0;}
        if(s == "FANS_TEAM")  { e=FANS_TEAM; return 0;}
        if(s == "DOKI")  { e=DOKI; return 0;}

        return -1;
    }

    enum HANDLE_TYPE
    {
        TYPE_AGREE = 1,
        TYPE_REJECT = 2,
    };
    inline string etos(const HANDLE_TYPE & e)
    {
        switch(e)
        {
            case TYPE_AGREE: return "TYPE_AGREE";
            case TYPE_REJECT: return "TYPE_REJECT";
            default: return "";
        }
    }
    inline int stoe(const string & s, HANDLE_TYPE & e)
    {
        if(s == "TYPE_AGREE")  { e=TYPE_AGREE; return 0;}
        if(s == "TYPE_REJECT")  { e=TYPE_REJECT; return 0;}

        return -1;
    }

    enum PULL_TYPE
    {
        PULL_CID = 1,
        PULL_LID = 2,
        PULL_LABEL = 3,
    };
    inline string etos(const PULL_TYPE & e)
    {
        switch(e)
        {
            case PULL_CID: return "PULL_CID";
            case PULL_LID: return "PULL_LID";
            case PULL_LABEL: return "PULL_LABEL";
            default: return "";
        }
    }
    inline int stoe(const string & s, PULL_TYPE & e)
    {
        if(s == "PULL_CID")  { e=PULL_CID; return 0;}
        if(s == "PULL_LID")  { e=PULL_LID; return 0;}
        if(s == "PULL_LABEL")  { e=PULL_LABEL; return 0;}

        return -1;
    }

    enum DRAFT_TYPE
    {
        DRAFT_FEED = 1,
        DRAFT_TOPIC = 2,
        FEED_TIMER = 3,
    };
    inline string etos(const DRAFT_TYPE & e)
    {
        switch(e)
        {
            case DRAFT_FEED: return "DRAFT_FEED";
            case DRAFT_TOPIC: return "DRAFT_TOPIC";
            case FEED_TIMER: return "FEED_TIMER";
            default: return "";
        }
    }
    inline int stoe(const string & s, DRAFT_TYPE & e)
    {
        if(s == "DRAFT_FEED")  { e=DRAFT_FEED; return 0;}
        if(s == "DRAFT_TOPIC")  { e=DRAFT_TOPIC; return 0;}
        if(s == "FEED_TIMER")  { e=FEED_TIMER; return 0;}

        return -1;
    }

    enum OPER_FLOW_TYPE
    {
        FLOW_WRITE_RIGHT = 1,
        FLOW_UNDO_WRITE_RIGHT = 2,
        FLOW_AGREE_APPLY = 3,
        FLOW_REJECT_APPLY = 4,
        FLOW_CONFIG_FANSCLUB_TAB = 5,
        FLOW_CONFIG_DOKI_VOICE = 6,
        FLOW_CONFIG_H5_TAB_NAME = 7,
        FLOW_CONFIG_H5_TAB_URL = 8,
        FLOW_CONFIG_DOKI_TAB_ORDER = 9,
        FLOW_CONFIG_BIG_LEVEL_PIC_1 = 20,
        FLOW_CONFIG_BIG_LEVEL_PIC_2 = 21,
        FLOW_CONFIG_BIG_LEVEL_PIC_3 = 22,
        FLOW_CONFIG_BIG_LEVEL_PIC_4 = 23,
        FLOW_CONFIG_SMALL_LEVEL_PIC_1 = 30,
        FLOW_CONFIG_SMALL_LEVEL_PIC_2 = 31,
        FLOW_CONFIG_SMALL_LEVEL_PIC_3 = 32,
        FLOW_CONFIG_SMALL_LEVEL_PIC_4 = 33,
        FLOW_CONFIG_FANS_NAME_1 = 40,
        FLOW_CONFIG_FANS_NAME_2 = 41,
        FLOW_CONFIG_FANS_NAME_3 = 42,
        FLOW_CONFIG_FANS_NAME_4 = 43,
        FLOW_MODIFY_NOTE = 101,
        FLOW_DELETE_NOTE = 102,
        FLOW_TOP_NOTE = 103,
        FLOW_HOT_NOTE = 104,
        FLOW_UNDO_TOP_NOTE = 105,
        FLOW_UNDO_HOT_NOTE = 106,
        FLOW_OFF_NOTE = 107,
        FLOW_MOVE_IN_NOTE = 108,
        FLOW_JOIN_NOTE = 109,
        FLOW_NOT_JOIN_NOTE = 110,
        FLOW_MOVE_OUT_NOTE = 111,
        FLOW_FORBIDDEN_USER = 112,
        FLOW_UNDO_FORBIDDEN_USER = 113,
        FLOW_GLOBAL_FORBIDDEN_USER = 114,
        FLOW_UNDO_GLOBAL_FORBIDDEN_USER = 115,
        FLOW_MODIFY_TOPIC = 201,
        FLOW_DELETE_TOPIC = 202,
        FLOW_OFF_TOPIC = 203,
        FLOW_OPER_TOPIC_RANK = 204,
        FLOW_CREATE_VIDEO_DOKI = 301,
        FLOW_MODIFY_VIDEO_DOKI = 302,
        FLOW_DELETE_VIDEO_DOKI = 303,
        FLOW_OFF_VIDEO_DOKI = 304,
    };
    inline string etos(const OPER_FLOW_TYPE & e)
    {
        switch(e)
        {
            case FLOW_WRITE_RIGHT: return "FLOW_WRITE_RIGHT";
            case FLOW_UNDO_WRITE_RIGHT: return "FLOW_UNDO_WRITE_RIGHT";
            case FLOW_AGREE_APPLY: return "FLOW_AGREE_APPLY";
            case FLOW_REJECT_APPLY: return "FLOW_REJECT_APPLY";
            case FLOW_CONFIG_FANSCLUB_TAB: return "FLOW_CONFIG_FANSCLUB_TAB";
            case FLOW_CONFIG_DOKI_VOICE: return "FLOW_CONFIG_DOKI_VOICE";
            case FLOW_CONFIG_H5_TAB_NAME: return "FLOW_CONFIG_H5_TAB_NAME";
            case FLOW_CONFIG_H5_TAB_URL: return "FLOW_CONFIG_H5_TAB_URL";
            case FLOW_CONFIG_DOKI_TAB_ORDER: return "FLOW_CONFIG_DOKI_TAB_ORDER";
            case FLOW_CONFIG_BIG_LEVEL_PIC_1: return "FLOW_CONFIG_BIG_LEVEL_PIC_1";
            case FLOW_CONFIG_BIG_LEVEL_PIC_2: return "FLOW_CONFIG_BIG_LEVEL_PIC_2";
            case FLOW_CONFIG_BIG_LEVEL_PIC_3: return "FLOW_CONFIG_BIG_LEVEL_PIC_3";
            case FLOW_CONFIG_BIG_LEVEL_PIC_4: return "FLOW_CONFIG_BIG_LEVEL_PIC_4";
            case FLOW_CONFIG_SMALL_LEVEL_PIC_1: return "FLOW_CONFIG_SMALL_LEVEL_PIC_1";
            case FLOW_CONFIG_SMALL_LEVEL_PIC_2: return "FLOW_CONFIG_SMALL_LEVEL_PIC_2";
            case FLOW_CONFIG_SMALL_LEVEL_PIC_3: return "FLOW_CONFIG_SMALL_LEVEL_PIC_3";
            case FLOW_CONFIG_SMALL_LEVEL_PIC_4: return "FLOW_CONFIG_SMALL_LEVEL_PIC_4";
            case FLOW_CONFIG_FANS_NAME_1: return "FLOW_CONFIG_FANS_NAME_1";
            case FLOW_CONFIG_FANS_NAME_2: return "FLOW_CONFIG_FANS_NAME_2";
            case FLOW_CONFIG_FANS_NAME_3: return "FLOW_CONFIG_FANS_NAME_3";
            case FLOW_CONFIG_FANS_NAME_4: return "FLOW_CONFIG_FANS_NAME_4";
            case FLOW_MODIFY_NOTE: return "FLOW_MODIFY_NOTE";
            case FLOW_DELETE_NOTE: return "FLOW_DELETE_NOTE";
            case FLOW_TOP_NOTE: return "FLOW_TOP_NOTE";
            case FLOW_HOT_NOTE: return "FLOW_HOT_NOTE";
            case FLOW_UNDO_TOP_NOTE: return "FLOW_UNDO_TOP_NOTE";
            case FLOW_UNDO_HOT_NOTE: return "FLOW_UNDO_HOT_NOTE";
            case FLOW_OFF_NOTE: return "FLOW_OFF_NOTE";
            case FLOW_MOVE_IN_NOTE: return "FLOW_MOVE_IN_NOTE";
            case FLOW_JOIN_NOTE: return "FLOW_JOIN_NOTE";
            case FLOW_NOT_JOIN_NOTE: return "FLOW_NOT_JOIN_NOTE";
            case FLOW_MOVE_OUT_NOTE: return "FLOW_MOVE_OUT_NOTE";
            case FLOW_FORBIDDEN_USER: return "FLOW_FORBIDDEN_USER";
            case FLOW_UNDO_FORBIDDEN_USER: return "FLOW_UNDO_FORBIDDEN_USER";
            case FLOW_GLOBAL_FORBIDDEN_USER: return "FLOW_GLOBAL_FORBIDDEN_USER";
            case FLOW_UNDO_GLOBAL_FORBIDDEN_USER: return "FLOW_UNDO_GLOBAL_FORBIDDEN_USER";
            case FLOW_MODIFY_TOPIC: return "FLOW_MODIFY_TOPIC";
            case FLOW_DELETE_TOPIC: return "FLOW_DELETE_TOPIC";
            case FLOW_OFF_TOPIC: return "FLOW_OFF_TOPIC";
            case FLOW_OPER_TOPIC_RANK: return "FLOW_OPER_TOPIC_RANK";
            case FLOW_CREATE_VIDEO_DOKI: return "FLOW_CREATE_VIDEO_DOKI";
            case FLOW_MODIFY_VIDEO_DOKI: return "FLOW_MODIFY_VIDEO_DOKI";
            case FLOW_DELETE_VIDEO_DOKI: return "FLOW_DELETE_VIDEO_DOKI";
            case FLOW_OFF_VIDEO_DOKI: return "FLOW_OFF_VIDEO_DOKI";
            default: return "";
        }
    }
    inline int stoe(const string & s, OPER_FLOW_TYPE & e)
    {
        if(s == "FLOW_WRITE_RIGHT")  { e=FLOW_WRITE_RIGHT; return 0;}
        if(s == "FLOW_UNDO_WRITE_RIGHT")  { e=FLOW_UNDO_WRITE_RIGHT; return 0;}
        if(s == "FLOW_AGREE_APPLY")  { e=FLOW_AGREE_APPLY; return 0;}
        if(s == "FLOW_REJECT_APPLY")  { e=FLOW_REJECT_APPLY; return 0;}
        if(s == "FLOW_CONFIG_FANSCLUB_TAB")  { e=FLOW_CONFIG_FANSCLUB_TAB; return 0;}
        if(s == "FLOW_CONFIG_DOKI_VOICE")  { e=FLOW_CONFIG_DOKI_VOICE; return 0;}
        if(s == "FLOW_CONFIG_H5_TAB_NAME")  { e=FLOW_CONFIG_H5_TAB_NAME; return 0;}
        if(s == "FLOW_CONFIG_H5_TAB_URL")  { e=FLOW_CONFIG_H5_TAB_URL; return 0;}
        if(s == "FLOW_CONFIG_DOKI_TAB_ORDER")  { e=FLOW_CONFIG_DOKI_TAB_ORDER; return 0;}
        if(s == "FLOW_CONFIG_BIG_LEVEL_PIC_1")  { e=FLOW_CONFIG_BIG_LEVEL_PIC_1; return 0;}
        if(s == "FLOW_CONFIG_BIG_LEVEL_PIC_2")  { e=FLOW_CONFIG_BIG_LEVEL_PIC_2; return 0;}
        if(s == "FLOW_CONFIG_BIG_LEVEL_PIC_3")  { e=FLOW_CONFIG_BIG_LEVEL_PIC_3; return 0;}
        if(s == "FLOW_CONFIG_BIG_LEVEL_PIC_4")  { e=FLOW_CONFIG_BIG_LEVEL_PIC_4; return 0;}
        if(s == "FLOW_CONFIG_SMALL_LEVEL_PIC_1")  { e=FLOW_CONFIG_SMALL_LEVEL_PIC_1; return 0;}
        if(s == "FLOW_CONFIG_SMALL_LEVEL_PIC_2")  { e=FLOW_CONFIG_SMALL_LEVEL_PIC_2; return 0;}
        if(s == "FLOW_CONFIG_SMALL_LEVEL_PIC_3")  { e=FLOW_CONFIG_SMALL_LEVEL_PIC_3; return 0;}
        if(s == "FLOW_CONFIG_SMALL_LEVEL_PIC_4")  { e=FLOW_CONFIG_SMALL_LEVEL_PIC_4; return 0;}
        if(s == "FLOW_CONFIG_FANS_NAME_1")  { e=FLOW_CONFIG_FANS_NAME_1; return 0;}
        if(s == "FLOW_CONFIG_FANS_NAME_2")  { e=FLOW_CONFIG_FANS_NAME_2; return 0;}
        if(s == "FLOW_CONFIG_FANS_NAME_3")  { e=FLOW_CONFIG_FANS_NAME_3; return 0;}
        if(s == "FLOW_CONFIG_FANS_NAME_4")  { e=FLOW_CONFIG_FANS_NAME_4; return 0;}
        if(s == "FLOW_MODIFY_NOTE")  { e=FLOW_MODIFY_NOTE; return 0;}
        if(s == "FLOW_DELETE_NOTE")  { e=FLOW_DELETE_NOTE; return 0;}
        if(s == "FLOW_TOP_NOTE")  { e=FLOW_TOP_NOTE; return 0;}
        if(s == "FLOW_HOT_NOTE")  { e=FLOW_HOT_NOTE; return 0;}
        if(s == "FLOW_UNDO_TOP_NOTE")  { e=FLOW_UNDO_TOP_NOTE; return 0;}
        if(s == "FLOW_UNDO_HOT_NOTE")  { e=FLOW_UNDO_HOT_NOTE; return 0;}
        if(s == "FLOW_OFF_NOTE")  { e=FLOW_OFF_NOTE; return 0;}
        if(s == "FLOW_MOVE_IN_NOTE")  { e=FLOW_MOVE_IN_NOTE; return 0;}
        if(s == "FLOW_JOIN_NOTE")  { e=FLOW_JOIN_NOTE; return 0;}
        if(s == "FLOW_NOT_JOIN_NOTE")  { e=FLOW_NOT_JOIN_NOTE; return 0;}
        if(s == "FLOW_MOVE_OUT_NOTE")  { e=FLOW_MOVE_OUT_NOTE; return 0;}
        if(s == "FLOW_FORBIDDEN_USER")  { e=FLOW_FORBIDDEN_USER; return 0;}
        if(s == "FLOW_UNDO_FORBIDDEN_USER")  { e=FLOW_UNDO_FORBIDDEN_USER; return 0;}
        if(s == "FLOW_GLOBAL_FORBIDDEN_USER")  { e=FLOW_GLOBAL_FORBIDDEN_USER; return 0;}
        if(s == "FLOW_UNDO_GLOBAL_FORBIDDEN_USER")  { e=FLOW_UNDO_GLOBAL_FORBIDDEN_USER; return 0;}
        if(s == "FLOW_MODIFY_TOPIC")  { e=FLOW_MODIFY_TOPIC; return 0;}
        if(s == "FLOW_DELETE_TOPIC")  { e=FLOW_DELETE_TOPIC; return 0;}
        if(s == "FLOW_OFF_TOPIC")  { e=FLOW_OFF_TOPIC; return 0;}
        if(s == "FLOW_OPER_TOPIC_RANK")  { e=FLOW_OPER_TOPIC_RANK; return 0;}
        if(s == "FLOW_CREATE_VIDEO_DOKI")  { e=FLOW_CREATE_VIDEO_DOKI; return 0;}
        if(s == "FLOW_MODIFY_VIDEO_DOKI")  { e=FLOW_MODIFY_VIDEO_DOKI; return 0;}
        if(s == "FLOW_DELETE_VIDEO_DOKI")  { e=FLOW_DELETE_VIDEO_DOKI; return 0;}
        if(s == "FLOW_OFF_VIDEO_DOKI")  { e=FLOW_OFF_VIDEO_DOKI; return 0;}

        return -1;
    }

    enum DATA_TYPE
    {
        DATA_STAR_DOKI = 1,
        DATA_VIDEO_DOKI = 2,
        DATA_DOKI = 3,
        DATA_NOET = 4,
        DATA_TOPIC = 5,
        DATA_USER = 6,
    };
    inline string etos(const DATA_TYPE & e)
    {
        switch(e)
        {
            case DATA_STAR_DOKI: return "DATA_STAR_DOKI";
            case DATA_VIDEO_DOKI: return "DATA_VIDEO_DOKI";
            case DATA_DOKI: return "DATA_DOKI";
            case DATA_NOET: return "DATA_NOET";
            case DATA_TOPIC: return "DATA_TOPIC";
            case DATA_USER: return "DATA_USER";
            default: return "";
        }
    }
    inline int stoe(const string & s, DATA_TYPE & e)
    {
        if(s == "DATA_STAR_DOKI")  { e=DATA_STAR_DOKI; return 0;}
        if(s == "DATA_VIDEO_DOKI")  { e=DATA_VIDEO_DOKI; return 0;}
        if(s == "DATA_DOKI")  { e=DATA_DOKI; return 0;}
        if(s == "DATA_NOET")  { e=DATA_NOET; return 0;}
        if(s == "DATA_TOPIC")  { e=DATA_TOPIC; return 0;}
        if(s == "DATA_USER")  { e=DATA_USER; return 0;}

        return -1;
    }

    enum SCENE_TYPE
    {
        SCENE_STAR_DOKI = 1,
        SCENE_VIDEO_DOKI = 2,
        SCENE_DOKI = 3,
        SCENE_NOET = 4,
        SCENE_TOPIC = 5,
    };
    inline string etos(const SCENE_TYPE & e)
    {
        switch(e)
        {
            case SCENE_STAR_DOKI: return "SCENE_STAR_DOKI";
            case SCENE_VIDEO_DOKI: return "SCENE_VIDEO_DOKI";
            case SCENE_DOKI: return "SCENE_DOKI";
            case SCENE_NOET: return "SCENE_NOET";
            case SCENE_TOPIC: return "SCENE_TOPIC";
            default: return "";
        }
    }
    inline int stoe(const string & s, SCENE_TYPE & e)
    {
        if(s == "SCENE_STAR_DOKI")  { e=SCENE_STAR_DOKI; return 0;}
        if(s == "SCENE_VIDEO_DOKI")  { e=SCENE_VIDEO_DOKI; return 0;}
        if(s == "SCENE_DOKI")  { e=SCENE_DOKI; return 0;}
        if(s == "SCENE_NOET")  { e=SCENE_NOET; return 0;}
        if(s == "SCENE_TOPIC")  { e=SCENE_TOPIC; return 0;}

        return -1;
    }

    enum VIDEO_TYPE
    {
        VIDEO_TYPE_VID = 1,
        VIDEO_TYPE_CID = 2,
        VIDEO_TYPE_LID = 3,
    };
    inline string etos(const VIDEO_TYPE & e)
    {
        switch(e)
        {
            case VIDEO_TYPE_VID: return "VIDEO_TYPE_VID";
            case VIDEO_TYPE_CID: return "VIDEO_TYPE_CID";
            case VIDEO_TYPE_LID: return "VIDEO_TYPE_LID";
            default: return "";
        }
    }
    inline int stoe(const string & s, VIDEO_TYPE & e)
    {
        if(s == "VIDEO_TYPE_VID")  { e=VIDEO_TYPE_VID; return 0;}
        if(s == "VIDEO_TYPE_CID")  { e=VIDEO_TYPE_CID; return 0;}
        if(s == "VIDEO_TYPE_LID")  { e=VIDEO_TYPE_LID; return 0;}

        return -1;
    }

    enum FEED_TYPE
    {
        FEED_TYPE_PUBLISH = 1,
        FEED_TYPE_REPLY = 8,
    };
    inline string etos(const FEED_TYPE & e)
    {
        switch(e)
        {
            case FEED_TYPE_PUBLISH: return "FEED_TYPE_PUBLISH";
            case FEED_TYPE_REPLY: return "FEED_TYPE_REPLY";
            default: return "";
        }
    }
    inline int stoe(const string & s, FEED_TYPE & e)
    {
        if(s == "FEED_TYPE_PUBLISH")  { e=FEED_TYPE_PUBLISH; return 0;}
        if(s == "FEED_TYPE_REPLY")  { e=FEED_TYPE_REPLY; return 0;}

        return -1;
    }

    enum FEED_CONTENT_TYPE
    {
        FEED_CONTENT_TEXT = 1,
        FEED_CONTENT_PIC = 2,
        FEED_CONTENT_VIDEO = 3,
        FEED_CONTENT_VOICE = 4,
    };
    inline string etos(const FEED_CONTENT_TYPE & e)
    {
        switch(e)
        {
            case FEED_CONTENT_TEXT: return "FEED_CONTENT_TEXT";
            case FEED_CONTENT_PIC: return "FEED_CONTENT_PIC";
            case FEED_CONTENT_VIDEO: return "FEED_CONTENT_VIDEO";
            case FEED_CONTENT_VOICE: return "FEED_CONTENT_VOICE";
            default: return "";
        }
    }
    inline int stoe(const string & s, FEED_CONTENT_TYPE & e)
    {
        if(s == "FEED_CONTENT_TEXT")  { e=FEED_CONTENT_TEXT; return 0;}
        if(s == "FEED_CONTENT_PIC")  { e=FEED_CONTENT_PIC; return 0;}
        if(s == "FEED_CONTENT_VIDEO")  { e=FEED_CONTENT_VIDEO; return 0;}
        if(s == "FEED_CONTENT_VOICE")  { e=FEED_CONTENT_VOICE; return 0;}

        return -1;
    }

    enum FEED_STATUS
    {
        FEED_STATUS_NORMAL = 0,
        FEED_STATUS_DELETE_BY_ADMIN = 1,
        FEED_STATUS_VERIFYING = 2,
        FEED_STATUS_DELETE_BY_USER = 3,
    };
    inline string etos(const FEED_STATUS & e)
    {
        switch(e)
        {
            case FEED_STATUS_NORMAL: return "FEED_STATUS_NORMAL";
            case FEED_STATUS_DELETE_BY_ADMIN: return "FEED_STATUS_DELETE_BY_ADMIN";
            case FEED_STATUS_VERIFYING: return "FEED_STATUS_VERIFYING";
            case FEED_STATUS_DELETE_BY_USER: return "FEED_STATUS_DELETE_BY_USER";
            default: return "";
        }
    }
    inline int stoe(const string & s, FEED_STATUS & e)
    {
        if(s == "FEED_STATUS_NORMAL")  { e=FEED_STATUS_NORMAL; return 0;}
        if(s == "FEED_STATUS_DELETE_BY_ADMIN")  { e=FEED_STATUS_DELETE_BY_ADMIN; return 0;}
        if(s == "FEED_STATUS_VERIFYING")  { e=FEED_STATUS_VERIFYING; return 0;}
        if(s == "FEED_STATUS_DELETE_BY_USER")  { e=FEED_STATUS_DELETE_BY_USER; return 0;}

        return -1;
    }

    enum ACCOUNT_TYPE
    {
        ACCOUNT_TYPE_QQ = 1,
        ACCOUNT_TYPE_WX = 2,
    };
    inline string etos(const ACCOUNT_TYPE & e)
    {
        switch(e)
        {
            case ACCOUNT_TYPE_QQ: return "ACCOUNT_TYPE_QQ";
            case ACCOUNT_TYPE_WX: return "ACCOUNT_TYPE_WX";
            default: return "";
        }
    }
    inline int stoe(const string & s, ACCOUNT_TYPE & e)
    {
        if(s == "ACCOUNT_TYPE_QQ")  { e=ACCOUNT_TYPE_QQ; return 0;}
        if(s == "ACCOUNT_TYPE_WX")  { e=ACCOUNT_TYPE_WX; return 0;}

        return -1;
    }

    enum DOKI_TYPE
    {
        DOKI_STAR_DOKI = 1,
        DOKI_VIDEO_DOKI = 2,
    };
    inline string etos(const DOKI_TYPE & e)
    {
        switch(e)
        {
            case DOKI_STAR_DOKI: return "DOKI_STAR_DOKI";
            case DOKI_VIDEO_DOKI: return "DOKI_VIDEO_DOKI";
            default: return "";
        }
    }
    inline int stoe(const string & s, DOKI_TYPE & e)
    {
        if(s == "DOKI_STAR_DOKI")  { e=DOKI_STAR_DOKI; return 0;}
        if(s == "DOKI_VIDEO_DOKI")  { e=DOKI_VIDEO_DOKI; return 0;}

        return -1;
    }

    struct stIdentityInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stIdentityInfo";
        }
        static string MD5()
        {
            return "19cfb41a66359c894f1dcce10dba2a65";
        }
        stIdentityInfo()
        :starName(""),identityType(0),strFtid("")
        {
        }
        void resetDefautlt()
        {
            starName = "";
            identityType = 0;
            strFtid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starName, 0);
            _os.write(identityType, 1);
            _os.write(strFtid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starName, 0, false);
            _is.read(identityType, 1, true);
            _is.read(strFtid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starName,"starName");
            _ds.display(identityType,"identityType");
            _ds.display(strFtid,"strFtid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starName, true);
            _ds.displaySimple(identityType, true);
            _ds.displaySimple(strFtid, false);
            return _os;
        }
    public:
        std::string starName;
        taf::Int32 identityType;
        std::string strFtid;
    };
    inline bool operator==(const stIdentityInfo&l, const stIdentityInfo&r)
    {
        return l.starName == r.starName && l.identityType == r.identityType && l.strFtid == r.strFtid;
    }
    inline bool operator!=(const stIdentityInfo&l, const stIdentityInfo&r)
    {
        return !(l == r);
    }

    struct stStarInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stStarInfo";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        stStarInfo()
        :starId(""),starName(""),headUrl(""),strFtid("")
        {
        }
        void resetDefautlt()
        {
            starId = "";
            starName = "";
            headUrl = "";
            strFtid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starId, 0);
            _os.write(starName, 1);
            _os.write(headUrl, 2);
            _os.write(strFtid, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starId, 0, true);
            _is.read(starName, 1, false);
            _is.read(headUrl, 2, false);
            _is.read(strFtid, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starId,"starId");
            _ds.display(starName,"starName");
            _ds.display(headUrl,"headUrl");
            _ds.display(strFtid,"strFtid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(starName, true);
            _ds.displaySimple(headUrl, true);
            _ds.displaySimple(strFtid, false);
            return _os;
        }
    public:
        std::string starId;
        std::string starName;
        std::string headUrl;
        std::string strFtid;
    };
    inline bool operator==(const stStarInfo&l, const stStarInfo&r)
    {
        return l.starId == r.starId && l.starName == r.starName && l.headUrl == r.headUrl && l.strFtid == r.strFtid;
    }
    inline bool operator!=(const stStarInfo&l, const stStarInfo&r)
    {
        return !(l == r);
    }

    struct stLabelInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stLabelInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        stLabelInfo()
        :labelId(""),labelName("")
        {
        }
        void resetDefautlt()
        {
            labelId = "";
            labelName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(labelId, 0);
            _os.write(labelName, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(labelId, 0, true);
            _is.read(labelName, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(labelId,"labelId");
            _ds.display(labelName,"labelName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(labelId, true);
            _ds.displaySimple(labelName, false);
            return _os;
        }
    public:
        std::string labelId;
        std::string labelName;
    };
    inline bool operator==(const stLabelInfo&l, const stLabelInfo&r)
    {
        return l.labelId == r.labelId && l.labelName == r.labelName;
    }
    inline bool operator!=(const stLabelInfo&l, const stLabelInfo&r)
    {
        return !(l == r);
    }

    struct ExtraReportKV : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.ExtraReportKV";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        ExtraReportKV()
        :extraReportKey(""),extraReportParam("")
        {
        }
        void resetDefautlt()
        {
            extraReportKey = "";
            extraReportParam = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(extraReportKey, 0);
            _os.write(extraReportParam, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(extraReportKey, 0, true);
            _is.read(extraReportParam, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(extraReportKey,"extraReportKey");
            _ds.display(extraReportParam,"extraReportParam");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(extraReportKey, true);
            _ds.displaySimple(extraReportParam, false);
            return _os;
        }
    public:
        std::string extraReportKey;
        std::string extraReportParam;
    };
    inline bool operator==(const ExtraReportKV&l, const ExtraReportKV&r)
    {
        return l.extraReportKey == r.extraReportKey && l.extraReportParam == r.extraReportParam;
    }
    inline bool operator!=(const ExtraReportKV&l, const ExtraReportKV&r)
    {
        return !(l == r);
    }

    struct Action : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.Action";
        }
        static string MD5()
        {
            return "1530e02e40fb036722b83c936ac5a14a";
        }
        Action()
        :url(""),cacheType(0),preReadType(0),reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            url = "";
            cacheType = 0;
            preReadType = 0;
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(url, 0);
            _os.write(cacheType, 1);
            _os.write(preReadType, 2);
            _os.write(reportParams, 3);
            _os.write(reportKey, 4);
            _os.write(extraReportKVs, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(url, 0, true);
            _is.read(cacheType, 1, true);
            _is.read(preReadType, 2, true);
            _is.read(reportParams, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(extraReportKVs, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(url,"url");
            _ds.display(cacheType,"cacheType");
            _ds.display(preReadType,"preReadType");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(extraReportKVs,"extraReportKVs");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(url, true);
            _ds.displaySimple(cacheType, true);
            _ds.displaySimple(preReadType, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(extraReportKVs, false);
            return _os;
        }
    public:
        std::string url;
        taf::Char cacheType;
        taf::Char preReadType;
        std::string reportParams;
        std::string reportKey;
        vector<CStarAdminPro::ExtraReportKV> extraReportKVs;
    };
    inline bool operator==(const Action&l, const Action&r)
    {
        return l.url == r.url && l.cacheType == r.cacheType && l.preReadType == r.preReadType && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.extraReportKVs == r.extraReportKVs;
    }
    inline bool operator!=(const Action&l, const Action&r)
    {
        return !(l == r);
    }

    struct stUserInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stUserInfo";
        }
        static string MD5()
        {
            return "dd09ffd0e58b35648be57b10c1ffcd7c";
        }
        stUserInfo()
        :headPicUrl(""),nickName(""),uid_type(0),uid(""),grantor_vuid(0),official_certified(false),is_train(false),fans_level(0)
        {
        }
        void resetDefautlt()
        {
            headPicUrl = "";
            nickName = "";
            uid_type = 0;
            uid = "";
            grantor_vuid = 0;
            official_certified = false;
            is_train = false;
            fans_level = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(headPicUrl, 0);
            _os.write(nickName, 1);
            _os.write(uid_type, 2);
            _os.write(uid, 3);
            _os.write(grantor_vuid, 4);
            _os.write(action, 5);
            _os.write(official_certified, 6);
            _os.write(is_train, 7);
            _os.write(fans_level, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(headPicUrl, 0, true);
            _is.read(nickName, 1, false);
            _is.read(uid_type, 2, false);
            _is.read(uid, 3, false);
            _is.read(grantor_vuid, 4, false);
            _is.read(action, 5, false);
            _is.read(official_certified, 6, false);
            _is.read(is_train, 7, false);
            _is.read(fans_level, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(headPicUrl,"headPicUrl");
            _ds.display(nickName,"nickName");
            _ds.display(uid_type,"uid_type");
            _ds.display(uid,"uid");
            _ds.display(grantor_vuid,"grantor_vuid");
            _ds.display(action,"action");
            _ds.display(official_certified,"official_certified");
            _ds.display(is_train,"is_train");
            _ds.display(fans_level,"fans_level");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(headPicUrl, true);
            _ds.displaySimple(nickName, true);
            _ds.displaySimple(uid_type, true);
            _ds.displaySimple(uid, true);
            _ds.displaySimple(grantor_vuid, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(official_certified, true);
            _ds.displaySimple(is_train, true);
            _ds.displaySimple(fans_level, false);
            return _os;
        }
    public:
        std::string headPicUrl;
        std::string nickName;
        taf::Int32 uid_type;
        std::string uid;
        taf::Int64 grantor_vuid;
        CStarAdminPro::Action action;
        taf::Bool official_certified;
        taf::Bool is_train;
        taf::Int32 fans_level;
    };
    inline bool operator==(const stUserInfo&l, const stUserInfo&r)
    {
        return l.headPicUrl == r.headPicUrl && l.nickName == r.nickName && l.uid_type == r.uid_type && l.uid == r.uid && l.grantor_vuid == r.grantor_vuid && l.action == r.action && l.official_certified == r.official_certified && l.is_train == r.is_train && l.fans_level == r.fans_level;
    }
    inline bool operator!=(const stUserInfo&l, const stUserInfo&r)
    {
        return !(l == r);
    }

    struct stUserInfo2 : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stUserInfo2";
        }
        static string MD5()
        {
            return "bcdab25845af3d13d13a3ffa45b256bd";
        }
        stUserInfo2()
        :vuid(0),identityType(0)
        {
        }
        void resetDefautlt()
        {
            vuid = 0;
            identityType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vuid, 1);
            _os.write(identityType, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vuid, 1, false);
            _is.read(identityType, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vuid,"vuid");
            _ds.display(identityType,"identityType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vuid, true);
            _ds.displaySimple(identityType, false);
            return _os;
        }
    public:
        taf::Int64 vuid;
        taf::Int32 identityType;
    };
    inline bool operator==(const stUserInfo2&l, const stUserInfo2&r)
    {
        return l.vuid == r.vuid && l.identityType == r.identityType;
    }
    inline bool operator!=(const stUserInfo2&l, const stUserInfo2&r)
    {
        return !(l == r);
    }

    struct stVideoInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stVideoInfo";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        stVideoInfo()
        :url(""),vid(""),title(""),img(""),tag("")
        {
        }
        void resetDefautlt()
        {
            url = "";
            vid = "";
            title = "";
            img = "";
            tag = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(url, 0);
            _os.write(vid, 1);
            _os.write(title, 2);
            _os.write(img, 3);
            _os.write(tag, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(url, 0, true);
            _is.read(vid, 1, false);
            _is.read(title, 2, false);
            _is.read(img, 3, false);
            _is.read(tag, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(url,"url");
            _ds.display(vid,"vid");
            _ds.display(title,"title");
            _ds.display(img,"img");
            _ds.display(tag,"tag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(url, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(img, true);
            _ds.displaySimple(tag, false);
            return _os;
        }
    public:
        std::string url;
        std::string vid;
        std::string title;
        std::string img;
        std::string tag;
    };
    inline bool operator==(const stVideoInfo&l, const stVideoInfo&r)
    {
        return l.url == r.url && l.vid == r.vid && l.title == r.title && l.img == r.img && l.tag == r.tag;
    }
    inline bool operator!=(const stVideoInfo&l, const stVideoInfo&r)
    {
        return !(l == r);
    }

    struct stImgInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stImgInfo";
        }
        static string MD5()
        {
            return "8aef3711ca93f682d5e01ca071c1d888";
        }
        stImgInfo()
        :url(""),tag(""),clipUrl(""),width(""),height(""),size(""),thumbUrl("")
        {
        }
        void resetDefautlt()
        {
            url = "";
            tag = "";
            clipUrl = "";
            width = "";
            height = "";
            size = "";
            thumbUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(url, 0);
            _os.write(tag, 1);
            _os.write(clipUrl, 2);
            _os.write(width, 3);
            _os.write(height, 4);
            _os.write(size, 5);
            _os.write(thumbUrl, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(url, 0, true);
            _is.read(tag, 1, false);
            _is.read(clipUrl, 2, false);
            _is.read(width, 3, false);
            _is.read(height, 4, false);
            _is.read(size, 5, false);
            _is.read(thumbUrl, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(url,"url");
            _ds.display(tag,"tag");
            _ds.display(clipUrl,"clipUrl");
            _ds.display(width,"width");
            _ds.display(height,"height");
            _ds.display(size,"size");
            _ds.display(thumbUrl,"thumbUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(url, true);
            _ds.displaySimple(tag, true);
            _ds.displaySimple(clipUrl, true);
            _ds.displaySimple(width, true);
            _ds.displaySimple(height, true);
            _ds.displaySimple(size, true);
            _ds.displaySimple(thumbUrl, false);
            return _os;
        }
    public:
        std::string url;
        std::string tag;
        std::string clipUrl;
        std::string width;
        std::string height;
        std::string size;
        std::string thumbUrl;
    };
    inline bool operator==(const stImgInfo&l, const stImgInfo&r)
    {
        return l.url == r.url && l.tag == r.tag && l.clipUrl == r.clipUrl && l.width == r.width && l.height == r.height && l.size == r.size && l.thumbUrl == r.thumbUrl;
    }
    inline bool operator!=(const stImgInfo&l, const stImgInfo&r)
    {
        return !(l == r);
    }

    struct stCidInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stCidInfo";
        }
        static string MD5()
        {
            return "c9a7b07e8b044d0fcbe9339d81fbbd69";
        }
        stCidInfo()
        :cid(""),title(""),type(0),strTypeName("")
        {
        }
        void resetDefautlt()
        {
            cid = "";
            title = "";
            type = 0;
            strTypeName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cid, 0);
            _os.write(title, 1);
            _os.write(type, 2);
            _os.write(strTypeName, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cid, 0, true);
            _is.read(title, 1, false);
            _is.read(type, 2, false);
            _is.read(strTypeName, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cid,"cid");
            _ds.display(title,"title");
            _ds.display(type,"type");
            _ds.display(strTypeName,"strTypeName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(strTypeName, false);
            return _os;
        }
    public:
        std::string cid;
        std::string title;
        taf::Int32 type;
        std::string strTypeName;
    };
    inline bool operator==(const stCidInfo&l, const stCidInfo&r)
    {
        return l.cid == r.cid && l.title == r.title && l.type == r.type && l.strTypeName == r.strTypeName;
    }
    inline bool operator!=(const stCidInfo&l, const stCidInfo&r)
    {
        return !(l == r);
    }

    struct stLidInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stLidInfo";
        }
        static string MD5()
        {
            return "c9a7b07e8b044d0fcbe9339d81fbbd69";
        }
        stLidInfo()
        :lid(""),title(""),type(0),strTypeName("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            title = "";
            type = 0;
            strTypeName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(title, 1);
            _os.write(type, 2);
            _os.write(strTypeName, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, true);
            _is.read(title, 1, false);
            _is.read(type, 2, false);
            _is.read(strTypeName, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(title,"title");
            _ds.display(type,"type");
            _ds.display(strTypeName,"strTypeName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(strTypeName, false);
            return _os;
        }
    public:
        std::string lid;
        std::string title;
        taf::Int32 type;
        std::string strTypeName;
    };
    inline bool operator==(const stLidInfo&l, const stLidInfo&r)
    {
        return l.lid == r.lid && l.title == r.title && l.type == r.type && l.strTypeName == r.strTypeName;
    }
    inline bool operator!=(const stLidInfo&l, const stLidInfo&r)
    {
        return !(l == r);
    }

    struct stTopicInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stTopicInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        stTopicInfo()
        :topic_id(""),title("")
        {
        }
        void resetDefautlt()
        {
            topic_id = "";
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(topic_id, 0);
            _os.write(title, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(topic_id, 0, true);
            _is.read(title, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(topic_id,"topic_id");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(topic_id, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        std::string topic_id;
        std::string title;
    };
    inline bool operator==(const stTopicInfo&l, const stTopicInfo&r)
    {
        return l.topic_id == r.topic_id && l.title == r.title;
    }
    inline bool operator!=(const stTopicInfo&l, const stTopicInfo&r)
    {
        return !(l == r);
    }

    struct stActivityInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stActivityInfo";
        }
        static string MD5()
        {
            return "3c28d913d8b6de872104298ab7654818";
        }
        stActivityInfo()
        :id(0),title("")
        {
        }
        void resetDefautlt()
        {
            id = 0;
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(title, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, true);
            _is.read(title, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        taf::Int64 id;
        std::string title;
    };
    inline bool operator==(const stActivityInfo&l, const stActivityInfo&r)
    {
        return l.id == r.id && l.title == r.title;
    }
    inline bool operator!=(const stActivityInfo&l, const stActivityInfo&r)
    {
        return !(l == r);
    }

    struct stSearchResult : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stSearchResult";
        }
        static string MD5()
        {
            return "8c58f25c40b574717b17c6e9443b11e0";
        }
        stSearchResult()
        :strResultId(""),strResultShow(""),type(0),strTypeName(""),strStarType(""),strStarRemark(""),strStarHeadUrl(""),strFtid("")
        {
        }
        void resetDefautlt()
        {
            strResultId = "";
            strResultShow = "";
            type = 0;
            strTypeName = "";
            strStarType = "";
            strStarRemark = "";
            strStarHeadUrl = "";
            strFtid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strResultId, 0);
            _os.write(strResultShow, 1);
            _os.write(type, 2);
            _os.write(strTypeName, 3);
            _os.write(strStarType, 4);
            _os.write(strStarRemark, 5);
            _os.write(strStarHeadUrl, 6);
            _os.write(strFtid, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strResultId, 0, true);
            _is.read(strResultShow, 1, true);
            _is.read(type, 2, false);
            _is.read(strTypeName, 3, false);
            _is.read(strStarType, 4, false);
            _is.read(strStarRemark, 5, false);
            _is.read(strStarHeadUrl, 6, false);
            _is.read(strFtid, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strResultId,"strResultId");
            _ds.display(strResultShow,"strResultShow");
            _ds.display(type,"type");
            _ds.display(strTypeName,"strTypeName");
            _ds.display(strStarType,"strStarType");
            _ds.display(strStarRemark,"strStarRemark");
            _ds.display(strStarHeadUrl,"strStarHeadUrl");
            _ds.display(strFtid,"strFtid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strResultId, true);
            _ds.displaySimple(strResultShow, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(strTypeName, true);
            _ds.displaySimple(strStarType, true);
            _ds.displaySimple(strStarRemark, true);
            _ds.displaySimple(strStarHeadUrl, true);
            _ds.displaySimple(strFtid, false);
            return _os;
        }
    public:
        std::string strResultId;
        std::string strResultShow;
        taf::Int32 type;
        std::string strTypeName;
        std::string strStarType;
        std::string strStarRemark;
        std::string strStarHeadUrl;
        std::string strFtid;
    };
    inline bool operator==(const stSearchResult&l, const stSearchResult&r)
    {
        return l.strResultId == r.strResultId && l.strResultShow == r.strResultShow && l.type == r.type && l.strTypeName == r.strTypeName && l.strStarType == r.strStarType && l.strStarRemark == r.strStarRemark && l.strStarHeadUrl == r.strStarHeadUrl && l.strFtid == r.strFtid;
    }
    inline bool operator!=(const stSearchResult&l, const stSearchResult&r)
    {
        return !(l == r);
    }

    struct stNoteDetail : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stNoteDetail";
        }
        static string MD5()
        {
            return "c6dd8a40a784d4763a065b728df14fc0";
        }
        stNoteDetail()
        :fansAdminId(0),title(""),content(""),createTime(0),modifyTime(0),readNum(0),praiseNum(0),commentNum(0),shareNum(0),source(0),status(0),ftNoteId(""),delete_reason(""),category(""),abstract(""),top_type(1)
        {
        }
        void resetDefautlt()
        {
            fansAdminId = 0;
            title = "";
            content = "";
            createTime = 0;
            modifyTime = 0;
            readNum = 0;
            praiseNum = 0;
            commentNum = 0;
            shareNum = 0;
            source = 0;
            status = 0;
            ftNoteId = "";
            delete_reason = "";
            category = "";
            abstract = "";
            top_type = 1;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fansAdminId, 0);
            _os.write(title, 1);
            _os.write(content, 2);
            _os.write(createTime, 3);
            _os.write(modifyTime, 4);
            _os.write(readNum, 5);
            _os.write(praiseNum, 6);
            _os.write(commentNum, 7);
            _os.write(shareNum, 8);
            _os.write(source, 9);
            _os.write(starInfoVec, 10);
            _os.write(photoVec, 11);
            _os.write(videoVec, 12);
            _os.write(userInfo, 13);
            _os.write(status, 14);
            _os.write(ftNoteId, 15);
            _os.write(delete_reason, 16);
            _os.write(cidInfo, 17);
            _os.write(lidInfo, 18);
            _os.write(category, 19);
            _os.write(offUserInfo, 20);
            _os.write(topicInfo, 21);
            _os.write(abstract, 22);
            _os.write(top_type, 23);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fansAdminId, 0, true);
            _is.read(title, 1, true);
            _is.read(content, 2, false);
            _is.read(createTime, 3, false);
            _is.read(modifyTime, 4, false);
            _is.read(readNum, 5, false);
            _is.read(praiseNum, 6, false);
            _is.read(commentNum, 7, false);
            _is.read(shareNum, 8, false);
            _is.read(source, 9, false);
            _is.read(starInfoVec, 10, false);
            _is.read(photoVec, 11, false);
            _is.read(videoVec, 12, false);
            _is.read(userInfo, 13, false);
            _is.read(status, 14, false);
            _is.read(ftNoteId, 15, false);
            _is.read(delete_reason, 16, false);
            _is.read(cidInfo, 17, false);
            _is.read(lidInfo, 18, false);
            _is.read(category, 19, false);
            _is.read(offUserInfo, 20, false);
            _is.read(topicInfo, 21, false);
            _is.read(abstract, 22, false);
            _is.read(top_type, 23, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fansAdminId,"fansAdminId");
            _ds.display(title,"title");
            _ds.display(content,"content");
            _ds.display(createTime,"createTime");
            _ds.display(modifyTime,"modifyTime");
            _ds.display(readNum,"readNum");
            _ds.display(praiseNum,"praiseNum");
            _ds.display(commentNum,"commentNum");
            _ds.display(shareNum,"shareNum");
            _ds.display(source,"source");
            _ds.display(starInfoVec,"starInfoVec");
            _ds.display(photoVec,"photoVec");
            _ds.display(videoVec,"videoVec");
            _ds.display(userInfo,"userInfo");
            _ds.display(status,"status");
            _ds.display(ftNoteId,"ftNoteId");
            _ds.display(delete_reason,"delete_reason");
            _ds.display(cidInfo,"cidInfo");
            _ds.display(lidInfo,"lidInfo");
            _ds.display(category,"category");
            _ds.display(offUserInfo,"offUserInfo");
            _ds.display(topicInfo,"topicInfo");
            _ds.display(abstract,"abstract");
            _ds.display(top_type,"top_type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fansAdminId, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(createTime, true);
            _ds.displaySimple(modifyTime, true);
            _ds.displaySimple(readNum, true);
            _ds.displaySimple(praiseNum, true);
            _ds.displaySimple(commentNum, true);
            _ds.displaySimple(shareNum, true);
            _ds.displaySimple(source, true);
            _ds.displaySimple(starInfoVec, true);
            _ds.displaySimple(photoVec, true);
            _ds.displaySimple(videoVec, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(ftNoteId, true);
            _ds.displaySimple(delete_reason, true);
            _ds.displaySimple(cidInfo, true);
            _ds.displaySimple(lidInfo, true);
            _ds.displaySimple(category, true);
            _ds.displaySimple(offUserInfo, true);
            _ds.displaySimple(topicInfo, true);
            _ds.displaySimple(abstract, true);
            _ds.displaySimple(top_type, false);
            return _os;
        }
    public:
        taf::Int64 fansAdminId;
        std::string title;
        std::string content;
        taf::Int64 createTime;
        taf::Int64 modifyTime;
        taf::Int64 readNum;
        taf::Int64 praiseNum;
        taf::Int64 commentNum;
        taf::Int64 shareNum;
        taf::Int32 source;
        vector<CStarAdminPro::stStarInfo> starInfoVec;
        vector<CStarAdminPro::stImgInfo> photoVec;
        vector<CStarAdminPro::stVideoInfo> videoVec;
        CStarAdminPro::stUserInfo userInfo;
        taf::Int32 status;
        std::string ftNoteId;
        std::string delete_reason;
        CStarAdminPro::stCidInfo cidInfo;
        CStarAdminPro::stLidInfo lidInfo;
        std::string category;
        CStarAdminPro::stUserInfo offUserInfo;
        CStarAdminPro::stTopicInfo topicInfo;
        std::string abstract;
        taf::Int32 top_type;
    };
    inline bool operator==(const stNoteDetail&l, const stNoteDetail&r)
    {
        return l.fansAdminId == r.fansAdminId && l.title == r.title && l.content == r.content && l.createTime == r.createTime && l.modifyTime == r.modifyTime && l.readNum == r.readNum && l.praiseNum == r.praiseNum && l.commentNum == r.commentNum && l.shareNum == r.shareNum && l.source == r.source && l.starInfoVec == r.starInfoVec && l.photoVec == r.photoVec && l.videoVec == r.videoVec && l.userInfo == r.userInfo && l.status == r.status && l.ftNoteId == r.ftNoteId && l.delete_reason == r.delete_reason && l.cidInfo == r.cidInfo && l.lidInfo == r.lidInfo && l.category == r.category && l.offUserInfo == r.offUserInfo && l.topicInfo == r.topicInfo && l.abstract == r.abstract && l.top_type == r.top_type;
    }
    inline bool operator!=(const stNoteDetail&l, const stNoteDetail&r)
    {
        return !(l == r);
    }

    struct stTopicDetail : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stTopicDetail";
        }
        static string MD5()
        {
            return "e84722fdfc54e85db244d5a2f0d3cd6d";
        }
        stTopicDetail()
        :fansAdminId(0),title(""),brief(""),createTime(0),modifyTime(0),noteNum(0),status(0),ftTopicId(""),delete_reason(""),type(0),ext_json(""),music_vid(""),channel_type(0),vidAttachmentId(""),enterButtonText("")
        {
        }
        void resetDefautlt()
        {
            fansAdminId = 0;
            title = "";
            brief = "";
            createTime = 0;
            modifyTime = 0;
            noteNum = 0;
            status = 0;
            ftTopicId = "";
            delete_reason = "";
            type = 0;
            ext_json = "";
            music_vid = "";
            channel_type = 0;
            vidAttachmentId = "";
            enterButtonText = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fansAdminId, 0);
            _os.write(title, 1);
            _os.write(brief, 2);
            _os.write(createTime, 3);
            _os.write(modifyTime, 4);
            _os.write(noteNum, 5);
            _os.write(photoVec, 6);
            _os.write(status, 7);
            _os.write(ftTopicId, 8);
            _os.write(starInfoVec, 9);
            _os.write(userInfo, 10);
            _os.write(delete_reason, 11);
            _os.write(cidInfo, 12);
            _os.write(lidInfo, 13);
            _os.write(offUserInfo, 14);
            _os.write(type, 15);
            _os.write(ext_json, 16);
            _os.write(activityVec, 17);
            _os.write(music_vid, 18);
            _os.write(channel_type, 19);
            _os.write(vidAttachmentId, 20);
            _os.write(enterButtonText, 21);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fansAdminId, 0, true);
            _is.read(title, 1, false);
            _is.read(brief, 2, false);
            _is.read(createTime, 3, false);
            _is.read(modifyTime, 4, false);
            _is.read(noteNum, 5, false);
            _is.read(photoVec, 6, false);
            _is.read(status, 7, false);
            _is.read(ftTopicId, 8, false);
            _is.read(starInfoVec, 9, false);
            _is.read(userInfo, 10, false);
            _is.read(delete_reason, 11, false);
            _is.read(cidInfo, 12, false);
            _is.read(lidInfo, 13, false);
            _is.read(offUserInfo, 14, false);
            _is.read(type, 15, false);
            _is.read(ext_json, 16, false);
            _is.read(activityVec, 17, false);
            _is.read(music_vid, 18, false);
            _is.read(channel_type, 19, false);
            _is.read(vidAttachmentId, 20, false);
            _is.read(enterButtonText, 21, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fansAdminId,"fansAdminId");
            _ds.display(title,"title");
            _ds.display(brief,"brief");
            _ds.display(createTime,"createTime");
            _ds.display(modifyTime,"modifyTime");
            _ds.display(noteNum,"noteNum");
            _ds.display(photoVec,"photoVec");
            _ds.display(status,"status");
            _ds.display(ftTopicId,"ftTopicId");
            _ds.display(starInfoVec,"starInfoVec");
            _ds.display(userInfo,"userInfo");
            _ds.display(delete_reason,"delete_reason");
            _ds.display(cidInfo,"cidInfo");
            _ds.display(lidInfo,"lidInfo");
            _ds.display(offUserInfo,"offUserInfo");
            _ds.display(type,"type");
            _ds.display(ext_json,"ext_json");
            _ds.display(activityVec,"activityVec");
            _ds.display(music_vid,"music_vid");
            _ds.display(channel_type,"channel_type");
            _ds.display(vidAttachmentId,"vidAttachmentId");
            _ds.display(enterButtonText,"enterButtonText");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fansAdminId, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(brief, true);
            _ds.displaySimple(createTime, true);
            _ds.displaySimple(modifyTime, true);
            _ds.displaySimple(noteNum, true);
            _ds.displaySimple(photoVec, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(ftTopicId, true);
            _ds.displaySimple(starInfoVec, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(delete_reason, true);
            _ds.displaySimple(cidInfo, true);
            _ds.displaySimple(lidInfo, true);
            _ds.displaySimple(offUserInfo, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(ext_json, true);
            _ds.displaySimple(activityVec, true);
            _ds.displaySimple(music_vid, true);
            _ds.displaySimple(channel_type, true);
            _ds.displaySimple(vidAttachmentId, true);
            _ds.displaySimple(enterButtonText, false);
            return _os;
        }
    public:
        taf::Int64 fansAdminId;
        std::string title;
        std::string brief;
        taf::Int64 createTime;
        taf::Int64 modifyTime;
        taf::Int64 noteNum;
        vector<CStarAdminPro::stImgInfo> photoVec;
        taf::Int32 status;
        std::string ftTopicId;
        vector<CStarAdminPro::stStarInfo> starInfoVec;
        CStarAdminPro::stUserInfo userInfo;
        std::string delete_reason;
        CStarAdminPro::stCidInfo cidInfo;
        CStarAdminPro::stLidInfo lidInfo;
        CStarAdminPro::stUserInfo offUserInfo;
        taf::Int32 type;
        std::string ext_json;
        vector<CStarAdminPro::stActivityInfo> activityVec;
        std::string music_vid;
        taf::Int32 channel_type;
        std::string vidAttachmentId;
        std::string enterButtonText;
    };
    inline bool operator==(const stTopicDetail&l, const stTopicDetail&r)
    {
        return l.fansAdminId == r.fansAdminId && l.title == r.title && l.brief == r.brief && l.createTime == r.createTime && l.modifyTime == r.modifyTime && l.noteNum == r.noteNum && l.photoVec == r.photoVec && l.status == r.status && l.ftTopicId == r.ftTopicId && l.starInfoVec == r.starInfoVec && l.userInfo == r.userInfo && l.delete_reason == r.delete_reason && l.cidInfo == r.cidInfo && l.lidInfo == r.lidInfo && l.offUserInfo == r.offUserInfo && l.type == r.type && l.ext_json == r.ext_json && l.activityVec == r.activityVec && l.music_vid == r.music_vid && l.channel_type == r.channel_type && l.vidAttachmentId == r.vidAttachmentId && l.enterButtonText == r.enterButtonText;
    }
    inline bool operator!=(const stTopicDetail&l, const stTopicDetail&r)
    {
        return !(l == r);
    }

    struct stOperIdentityReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperIdentityReq";
        }
        static string MD5()
        {
            return "208b2f68bd1c1996454ff990a6984f80";
        }
        stOperIdentityReq()
        :type(0),vuid(0),dokiId(""),identityType(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
            vuid = 0;
            dokiId = "";
            identityType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(vuid, 1);
            _os.write(dokiId, 2);
            _os.write(identityType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(vuid, 1, false);
            _is.read(dokiId, 2, false);
            _is.read(identityType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(vuid,"vuid");
            _ds.display(dokiId,"dokiId");
            _ds.display(identityType,"identityType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(vuid, true);
            _ds.displaySimple(dokiId, true);
            _ds.displaySimple(identityType, false);
            return _os;
        }
    public:
        taf::Int32 type;
        taf::Int64 vuid;
        std::string dokiId;
        taf::Int32 identityType;
    };
    inline bool operator==(const stOperIdentityReq&l, const stOperIdentityReq&r)
    {
        return l.type == r.type && l.vuid == r.vuid && l.dokiId == r.dokiId && l.identityType == r.identityType;
    }
    inline bool operator!=(const stOperIdentityReq&l, const stOperIdentityReq&r)
    {
        return !(l == r);
    }

    struct stOperIdentityRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperIdentityRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stOperIdentityRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stOperIdentityRsp&l, const stOperIdentityRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stOperIdentityRsp&l, const stOperIdentityRsp&r)
    {
        return !(l == r);
    }

    struct stSetIdentityReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stSetIdentityReq";
        }
        static string MD5()
        {
            return "767535acdf43efa6d59b3143eece42a3";
        }
        stSetIdentityReq()
        :iAccountType(0),strAccount(""),starId(""),iOpType(0),identityType(0)
        {
        }
        void resetDefautlt()
        {
            iAccountType = 0;
            strAccount = "";
            starId = "";
            iOpType = 0;
            identityType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iAccountType, 0);
            _os.write(strAccount, 1);
            _os.write(starId, 2);
            _os.write(iOpType, 3);
            _os.write(identityType, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iAccountType, 0, true);
            _is.read(strAccount, 1, true);
            _is.read(starId, 2, true);
            _is.read(iOpType, 3, true);
            _is.read(identityType, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iAccountType,"iAccountType");
            _ds.display(strAccount,"strAccount");
            _ds.display(starId,"starId");
            _ds.display(iOpType,"iOpType");
            _ds.display(identityType,"identityType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iAccountType, true);
            _ds.displaySimple(strAccount, true);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(iOpType, true);
            _ds.displaySimple(identityType, false);
            return _os;
        }
    public:
        taf::Int32 iAccountType;
        std::string strAccount;
        std::string starId;
        taf::Int32 iOpType;
        taf::Int32 identityType;
    };
    inline bool operator==(const stSetIdentityReq&l, const stSetIdentityReq&r)
    {
        return l.iAccountType == r.iAccountType && l.strAccount == r.strAccount && l.starId == r.starId && l.iOpType == r.iOpType && l.identityType == r.identityType;
    }
    inline bool operator!=(const stSetIdentityReq&l, const stSetIdentityReq&r)
    {
        return !(l == r);
    }

    struct stSetIdentityRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stSetIdentityRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stSetIdentityRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stSetIdentityRsp&l, const stSetIdentityRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stSetIdentityRsp&l, const stSetIdentityRsp&r)
    {
        return !(l == r);
    }

    struct stReadIdentityReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadIdentityReq";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stReadIdentityReq()
        :type(0),starId("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            starId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(starId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(starId, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(starId,"starId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(starId, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string starId;
    };
    inline bool operator==(const stReadIdentityReq&l, const stReadIdentityReq&r)
    {
        return l.type == r.type && l.starId == r.starId;
    }
    inline bool operator!=(const stReadIdentityReq&l, const stReadIdentityReq&r)
    {
        return !(l == r);
    }

    struct stReadIdentityRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadIdentityRsp";
        }
        static string MD5()
        {
            return "0dc08cb51d0e83b1fb23e785dc32b288";
        }
        stReadIdentityRsp()
        :errCode(0),strErrMsg(""),iDentityType(0),userType(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            iDentityType = 0;
            userType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(iDentityType, 2);
            _os.write(key2IdentityMap, 3);
            _os.write(userType, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(iDentityType, 2, true);
            _is.read(key2IdentityMap, 3, false);
            _is.read(userType, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(iDentityType,"iDentityType");
            _ds.display(key2IdentityMap,"key2IdentityMap");
            _ds.display(userType,"userType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(iDentityType, true);
            _ds.displaySimple(key2IdentityMap, true);
            _ds.displaySimple(userType, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        taf::Int32 iDentityType;
        map<std::string, vector<CStarAdminPro::stIdentityInfo> > key2IdentityMap;
        taf::Int32 userType;
    };
    inline bool operator==(const stReadIdentityRsp&l, const stReadIdentityRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.iDentityType == r.iDentityType && l.key2IdentityMap == r.key2IdentityMap && l.userType == r.userType;
    }
    inline bool operator!=(const stReadIdentityRsp&l, const stReadIdentityRsp&r)
    {
        return !(l == r);
    }

    struct stReadAllFansReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadAllFansReq";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        stReadAllFansReq()
        :starId(""),type(0)
        {
        }
        void resetDefautlt()
        {
            starId = "";
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starId, 0);
            _os.write(type, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starId, 0, false);
            _is.read(type, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starId,"starId");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        std::string starId;
        taf::Int32 type;
    };
    inline bool operator==(const stReadAllFansReq&l, const stReadAllFansReq&r)
    {
        return l.starId == r.starId && l.type == r.type;
    }
    inline bool operator!=(const stReadAllFansReq&l, const stReadAllFansReq&r)
    {
        return !(l == r);
    }

    struct stReadAllFansRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadAllFansRsp";
        }
        static string MD5()
        {
            return "169b2f9416c4fdcd5be0b75a13d61d44";
        }
        stReadAllFansRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(key2IdentityMap, 2);
            _os.write(uid2UserInfoMap, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(key2IdentityMap, 2, false);
            _is.read(uid2UserInfoMap, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(key2IdentityMap,"key2IdentityMap");
            _ds.display(uid2UserInfoMap,"uid2UserInfoMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(key2IdentityMap, true);
            _ds.displaySimple(uid2UserInfoMap, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        map<std::string, vector<CStarAdminPro::stUserInfo> > key2IdentityMap;
        map<std::string, CStarAdminPro::stUserInfo> uid2UserInfoMap;
    };
    inline bool operator==(const stReadAllFansRsp&l, const stReadAllFansRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.key2IdentityMap == r.key2IdentityMap && l.uid2UserInfoMap == r.uid2UserInfoMap;
    }
    inline bool operator!=(const stReadAllFansRsp&l, const stReadAllFansRsp&r)
    {
        return !(l == r);
    }

    struct stReadAllStarReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadAllStarReq";
        }
        static string MD5()
        {
            return "4e2a678fc881ce161d0f21377a2b62f7";
        }
        stReadAllStarReq()
        :type(0),first_spell(""),page_num(0),page_size(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
            first_spell = "";
            page_num = 0;
            page_size = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(first_spell, 1);
            _os.write(page_num, 2);
            _os.write(page_size, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(first_spell, 1, false);
            _is.read(page_num, 2, false);
            _is.read(page_size, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(first_spell,"first_spell");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(first_spell, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string first_spell;
        taf::Int32 page_num;
        taf::Int32 page_size;
    };
    inline bool operator==(const stReadAllStarReq&l, const stReadAllStarReq&r)
    {
        return l.type == r.type && l.first_spell == r.first_spell && l.page_num == r.page_num && l.page_size == r.page_size;
    }
    inline bool operator!=(const stReadAllStarReq&l, const stReadAllStarReq&r)
    {
        return !(l == r);
    }

    struct stReadAllStarRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadAllStarRsp";
        }
        static string MD5()
        {
            return "8f2ce2ca758837be93531fac8afa034f";
        }
        stReadAllStarRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(starInfoMap, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(starInfoMap, 2, false);
            _is.read(page_num, 3, true);
            _is.read(page_totalNum, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(starInfoMap,"starInfoMap");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(starInfoMap, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        map<std::string, vector<CStarAdminPro::stStarInfo> > starInfoMap;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stReadAllStarRsp&l, const stReadAllStarRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.starInfoMap == r.starInfoMap && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stReadAllStarRsp&l, const stReadAllStarRsp&r)
    {
        return !(l == r);
    }

    struct stReadAllNoteReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadAllNoteReq";
        }
        static string MD5()
        {
            return "03af64cf96af25952385d7f235108a98";
        }
        stReadAllNoteReq()
        :flag(0),source(0),starIds(""),page_num(0),page_size(0)
        {
        }
        void resetDefautlt()
        {
            flag = 0;
            source = 0;
            starIds = "";
            page_num = 0;
            page_size = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(flag, 0);
            _os.write(source, 1);
            _os.write(starIds, 2);
            _os.write(page_num, 3);
            _os.write(page_size, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(flag, 0, false);
            _is.read(source, 1, false);
            _is.read(starIds, 2, false);
            _is.read(page_num, 3, false);
            _is.read(page_size, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(flag,"flag");
            _ds.display(source,"source");
            _ds.display(starIds,"starIds");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(flag, true);
            _ds.displaySimple(source, true);
            _ds.displaySimple(starIds, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, false);
            return _os;
        }
    public:
        taf::Int32 flag;
        taf::Int32 source;
        std::string starIds;
        taf::Int32 page_num;
        taf::Int32 page_size;
    };
    inline bool operator==(const stReadAllNoteReq&l, const stReadAllNoteReq&r)
    {
        return l.flag == r.flag && l.source == r.source && l.starIds == r.starIds && l.page_num == r.page_num && l.page_size == r.page_size;
    }
    inline bool operator!=(const stReadAllNoteReq&l, const stReadAllNoteReq&r)
    {
        return !(l == r);
    }

    struct stReadAllNoteRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadAllNoteRsp";
        }
        static string MD5()
        {
            return "f55b53e68bb6ebd7045dd57da2768c3d";
        }
        stReadAllNoteRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(noteDetailVec, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(noteDetailVec, 2, false);
            _is.read(page_num, 3, true);
            _is.read(page_totalNum, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(noteDetailVec,"noteDetailVec");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(noteDetailVec, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stNoteDetail> noteDetailVec;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stReadAllNoteRsp&l, const stReadAllNoteRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.noteDetailVec == r.noteDetailVec && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stReadAllNoteRsp&l, const stReadAllNoteRsp&r)
    {
        return !(l == r);
    }

    struct stReadAllTopicReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadAllTopicReq";
        }
        static string MD5()
        {
            return "03af64cf96af25952385d7f235108a98";
        }
        stReadAllTopicReq()
        :flag(0),source(0),starIds(""),page_num(0),page_size(0)
        {
        }
        void resetDefautlt()
        {
            flag = 0;
            source = 0;
            starIds = "";
            page_num = 0;
            page_size = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(flag, 0);
            _os.write(source, 1);
            _os.write(starIds, 2);
            _os.write(page_num, 3);
            _os.write(page_size, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(flag, 0, false);
            _is.read(source, 1, false);
            _is.read(starIds, 2, false);
            _is.read(page_num, 3, false);
            _is.read(page_size, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(flag,"flag");
            _ds.display(source,"source");
            _ds.display(starIds,"starIds");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(flag, true);
            _ds.displaySimple(source, true);
            _ds.displaySimple(starIds, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, false);
            return _os;
        }
    public:
        taf::Int32 flag;
        taf::Int32 source;
        std::string starIds;
        taf::Int32 page_num;
        taf::Int32 page_size;
    };
    inline bool operator==(const stReadAllTopicReq&l, const stReadAllTopicReq&r)
    {
        return l.flag == r.flag && l.source == r.source && l.starIds == r.starIds && l.page_num == r.page_num && l.page_size == r.page_size;
    }
    inline bool operator!=(const stReadAllTopicReq&l, const stReadAllTopicReq&r)
    {
        return !(l == r);
    }

    struct stReadAllTopicRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadAllTopicRsp";
        }
        static string MD5()
        {
            return "7c690708a9efbf894c3cbd3075818936";
        }
        stReadAllTopicRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(topicDetailVec, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(topicDetailVec, 2, false);
            _is.read(page_num, 3, true);
            _is.read(page_totalNum, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(topicDetailVec,"topicDetailVec");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(topicDetailVec, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stTopicDetail> topicDetailVec;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stReadAllTopicRsp&l, const stReadAllTopicRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.topicDetailVec == r.topicDetailVec && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stReadAllTopicRsp&l, const stReadAllTopicRsp&r)
    {
        return !(l == r);
    }

    struct stOperTopicRankReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperTopicRankReq";
        }
        static string MD5()
        {
            return "4005fedab9408b5d87379bafb5f19562";
        }
        stOperTopicRankReq()
        :id(0),topic_id(""),rank(0),begin_time(""),end_time("")
        {
        }
        void resetDefautlt()
        {
            id = 0;
            topic_id = "";
            rank = 0;
            begin_time = "";
            end_time = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(topic_id, 1);
            _os.write(rank, 2);
            _os.write(begin_time, 3);
            _os.write(end_time, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, false);
            _is.read(topic_id, 1, false);
            _is.read(rank, 2, false);
            _is.read(begin_time, 3, false);
            _is.read(end_time, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(topic_id,"topic_id");
            _ds.display(rank,"rank");
            _ds.display(begin_time,"begin_time");
            _ds.display(end_time,"end_time");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(topic_id, true);
            _ds.displaySimple(rank, true);
            _ds.displaySimple(begin_time, true);
            _ds.displaySimple(end_time, false);
            return _os;
        }
    public:
        taf::Int64 id;
        std::string topic_id;
        taf::Int32 rank;
        std::string begin_time;
        std::string end_time;
    };
    inline bool operator==(const stOperTopicRankReq&l, const stOperTopicRankReq&r)
    {
        return l.id == r.id && l.topic_id == r.topic_id && l.rank == r.rank && l.begin_time == r.begin_time && l.end_time == r.end_time;
    }
    inline bool operator!=(const stOperTopicRankReq&l, const stOperTopicRankReq&r)
    {
        return !(l == r);
    }

    struct stOperTopicRankRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperTopicRankRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stOperTopicRankRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stOperTopicRankRsp&l, const stOperTopicRankRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stOperTopicRankRsp&l, const stOperTopicRankRsp&r)
    {
        return !(l == r);
    }

    struct stSearchReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stSearchReq";
        }
        static string MD5()
        {
            return "5776fd7103fcea055637c7e8b9708bb0";
        }
        stSearchReq()
        :iSearchType(0),strSearchKey(""),star_type(0)
        {
        }
        void resetDefautlt()
        {
            iSearchType = 0;
            strSearchKey = "";
            star_type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iSearchType, 0);
            _os.write(strSearchKey, 1);
            _os.write(star_type, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iSearchType, 0, true);
            _is.read(strSearchKey, 1, true);
            _is.read(star_type, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iSearchType,"iSearchType");
            _ds.display(strSearchKey,"strSearchKey");
            _ds.display(star_type,"star_type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iSearchType, true);
            _ds.displaySimple(strSearchKey, true);
            _ds.displaySimple(star_type, false);
            return _os;
        }
    public:
        taf::Int32 iSearchType;
        std::string strSearchKey;
        taf::Int32 star_type;
    };
    inline bool operator==(const stSearchReq&l, const stSearchReq&r)
    {
        return l.iSearchType == r.iSearchType && l.strSearchKey == r.strSearchKey && l.star_type == r.star_type;
    }
    inline bool operator!=(const stSearchReq&l, const stSearchReq&r)
    {
        return !(l == r);
    }

    struct stSearchRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stSearchRsp";
        }
        static string MD5()
        {
            return "aafe4e492f4cd3544f0f625d21dd4032";
        }
        stSearchRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(resultVec, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(resultVec, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(resultVec,"resultVec");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(resultVec, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stSearchResult> resultVec;
    };
    inline bool operator==(const stSearchRsp&l, const stSearchRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.resultVec == r.resultVec;
    }
    inline bool operator!=(const stSearchRsp&l, const stSearchRsp&r)
    {
        return !(l == r);
    }

    struct stNoteSearchReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stNoteSearchReq";
        }
        static string MD5()
        {
            return "9bda4ac16227127f47ea815aed6f8d9e";
        }
        stNoteSearchReq()
        :strSearchKey(""),page_num(0),page_size(0)
        {
        }
        void resetDefautlt()
        {
            strSearchKey = "";
            page_num = 0;
            page_size = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strSearchKey, 0);
            _os.write(page_num, 1);
            _os.write(page_size, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strSearchKey, 0, false);
            _is.read(page_num, 1, false);
            _is.read(page_size, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strSearchKey,"strSearchKey");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strSearchKey, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, false);
            return _os;
        }
    public:
        std::string strSearchKey;
        taf::Int32 page_num;
        taf::Int32 page_size;
    };
    inline bool operator==(const stNoteSearchReq&l, const stNoteSearchReq&r)
    {
        return l.strSearchKey == r.strSearchKey && l.page_num == r.page_num && l.page_size == r.page_size;
    }
    inline bool operator!=(const stNoteSearchReq&l, const stNoteSearchReq&r)
    {
        return !(l == r);
    }

    struct stNoteSearchRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stNoteSearchRsp";
        }
        static string MD5()
        {
            return "f55b53e68bb6ebd7045dd57da2768c3d";
        }
        stNoteSearchRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(noteDetailVec, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(noteDetailVec, 2, false);
            _is.read(page_num, 3, false);
            _is.read(page_totalNum, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(noteDetailVec,"noteDetailVec");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(noteDetailVec, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stNoteDetail> noteDetailVec;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stNoteSearchRsp&l, const stNoteSearchRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.noteDetailVec == r.noteDetailVec && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stNoteSearchRsp&l, const stNoteSearchRsp&r)
    {
        return !(l == r);
    }

    struct stUgcVideoInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stUgcVideoInfo";
        }
        static string MD5()
        {
            return "8c58f25c40b574717b17c6e9443b11e0";
        }
        stUgcVideoInfo()
        :strVid(""),strPicUrl(""),iFlag(0),strTitle(""),strMusicVid(""),strMusicPicUrl(""),strMusicTitle(""),strShareId("")
        {
        }
        void resetDefautlt()
        {
            strVid = "";
            strPicUrl = "";
            iFlag = 0;
            strTitle = "";
            strMusicVid = "";
            strMusicPicUrl = "";
            strMusicTitle = "";
            strShareId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strVid, 0);
            _os.write(strPicUrl, 1);
            _os.write(iFlag, 2);
            _os.write(strTitle, 3);
            _os.write(strMusicVid, 4);
            _os.write(strMusicPicUrl, 5);
            _os.write(strMusicTitle, 6);
            _os.write(strShareId, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strVid, 0, true);
            _is.read(strPicUrl, 1, true);
            _is.read(iFlag, 2, true);
            _is.read(strTitle, 3, false);
            _is.read(strMusicVid, 4, false);
            _is.read(strMusicPicUrl, 5, false);
            _is.read(strMusicTitle, 6, false);
            _is.read(strShareId, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strVid,"strVid");
            _ds.display(strPicUrl,"strPicUrl");
            _ds.display(iFlag,"iFlag");
            _ds.display(strTitle,"strTitle");
            _ds.display(strMusicVid,"strMusicVid");
            _ds.display(strMusicPicUrl,"strMusicPicUrl");
            _ds.display(strMusicTitle,"strMusicTitle");
            _ds.display(strShareId,"strShareId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strVid, true);
            _ds.displaySimple(strPicUrl, true);
            _ds.displaySimple(iFlag, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(strMusicVid, true);
            _ds.displaySimple(strMusicPicUrl, true);
            _ds.displaySimple(strMusicTitle, true);
            _ds.displaySimple(strShareId, false);
            return _os;
        }
    public:
        std::string strVid;
        std::string strPicUrl;
        taf::Int32 iFlag;
        std::string strTitle;
        std::string strMusicVid;
        std::string strMusicPicUrl;
        std::string strMusicTitle;
        std::string strShareId;
    };
    inline bool operator==(const stUgcVideoInfo&l, const stUgcVideoInfo&r)
    {
        return l.strVid == r.strVid && l.strPicUrl == r.strPicUrl && l.iFlag == r.iFlag && l.strTitle == r.strTitle && l.strMusicVid == r.strMusicVid && l.strMusicPicUrl == r.strMusicPicUrl && l.strMusicTitle == r.strMusicTitle && l.strShareId == r.strShareId;
    }
    inline bool operator!=(const stUgcVideoInfo&l, const stUgcVideoInfo&r)
    {
        return !(l == r);
    }

    struct stPublishNoteReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stPublishNoteReq";
        }
        static string MD5()
        {
            return "2042e26cc1fe19b14ea1ca2ba589ac7f";
        }
        stPublishNoteReq()
        :title(""),content(""),seq(""),topicId(""),Lid(""),Cid(""),source(0),abstract(""),ctime(0),type(0),strLinkUrl("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            content = "";
            seq = "";
            topicId = "";
            Lid = "";
            Cid = "";
            source = 0;
            abstract = "";
            ctime = 0;
            type = 0;
            strLinkUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(content, 1);
            _os.write(seq, 2);
            _os.write(starIdVec, 3);
            _os.write(topicId, 4);
            _os.write(Lid, 5);
            _os.write(Cid, 6);
            _os.write(photoVec, 7);
            _os.write(videoVec, 8);
            _os.write(source, 9);
            _os.write(abstract, 10);
            _os.write(ctime, 11);
            _os.write(type, 12);
            _os.write(strLinkUrl, 13);
            _os.write(ugcVideoInfo, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(content, 1, false);
            _is.read(seq, 2, false);
            _is.read(starIdVec, 3, true);
            _is.read(topicId, 4, false);
            _is.read(Lid, 5, false);
            _is.read(Cid, 6, false);
            _is.read(photoVec, 7, false);
            _is.read(videoVec, 8, false);
            _is.read(source, 9, false);
            _is.read(abstract, 10, false);
            _is.read(ctime, 11, false);
            _is.read(type, 12, false);
            _is.read(strLinkUrl, 13, false);
            _is.read(ugcVideoInfo, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(content,"content");
            _ds.display(seq,"seq");
            _ds.display(starIdVec,"starIdVec");
            _ds.display(topicId,"topicId");
            _ds.display(Lid,"Lid");
            _ds.display(Cid,"Cid");
            _ds.display(photoVec,"photoVec");
            _ds.display(videoVec,"videoVec");
            _ds.display(source,"source");
            _ds.display(abstract,"abstract");
            _ds.display(ctime,"ctime");
            _ds.display(type,"type");
            _ds.display(strLinkUrl,"strLinkUrl");
            _ds.display(ugcVideoInfo,"ugcVideoInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(starIdVec, true);
            _ds.displaySimple(topicId, true);
            _ds.displaySimple(Lid, true);
            _ds.displaySimple(Cid, true);
            _ds.displaySimple(photoVec, true);
            _ds.displaySimple(videoVec, true);
            _ds.displaySimple(source, true);
            _ds.displaySimple(abstract, true);
            _ds.displaySimple(ctime, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(strLinkUrl, true);
            _ds.displaySimple(ugcVideoInfo, false);
            return _os;
        }
    public:
        std::string title;
        std::string content;
        std::string seq;
        vector<std::string> starIdVec;
        std::string topicId;
        std::string Lid;
        std::string Cid;
        vector<CStarAdminPro::stImgInfo> photoVec;
        vector<CStarAdminPro::stVideoInfo> videoVec;
        taf::Int32 source;
        std::string abstract;
        taf::Int64 ctime;
        taf::Int32 type;
        std::string strLinkUrl;
        CStarAdminPro::stUgcVideoInfo ugcVideoInfo;
    };
    inline bool operator==(const stPublishNoteReq&l, const stPublishNoteReq&r)
    {
        return l.title == r.title && l.content == r.content && l.seq == r.seq && l.starIdVec == r.starIdVec && l.topicId == r.topicId && l.Lid == r.Lid && l.Cid == r.Cid && l.photoVec == r.photoVec && l.videoVec == r.videoVec && l.source == r.source && l.abstract == r.abstract && l.ctime == r.ctime && l.type == r.type && l.strLinkUrl == r.strLinkUrl && l.ugcVideoInfo == r.ugcVideoInfo;
    }
    inline bool operator!=(const stPublishNoteReq&l, const stPublishNoteReq&r)
    {
        return !(l == r);
    }

    struct stPublishNoteRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stPublishNoteRsp";
        }
        static string MD5()
        {
            return "813f7cf8041cfa050eef80e3a572e674";
        }
        stPublishNoteRsp()
        :errCode(0),strErrMsg(""),fansAdminId(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            fansAdminId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(fansAdminId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(fansAdminId, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(fansAdminId,"fansAdminId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(fansAdminId, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        taf::Int64 fansAdminId;
    };
    inline bool operator==(const stPublishNoteRsp&l, const stPublishNoteRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.fansAdminId == r.fansAdminId;
    }
    inline bool operator!=(const stPublishNoteRsp&l, const stPublishNoteRsp&r)
    {
        return !(l == r);
    }

    struct stModifyNoteReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stModifyNoteReq";
        }
        static string MD5()
        {
            return "10a1ed825036d5502691ac1b864ae4d0";
        }
        stModifyNoteReq()
        :id(0),title(""),content(""),seq(""),topicId(""),Lid(""),Cid(""),source(0),abstract(""),note_id(""),type(0),strLinkUrl("")
        {
        }
        void resetDefautlt()
        {
            id = 0;
            title = "";
            content = "";
            seq = "";
            topicId = "";
            Lid = "";
            Cid = "";
            source = 0;
            abstract = "";
            note_id = "";
            type = 0;
            strLinkUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(title, 1);
            _os.write(content, 2);
            _os.write(seq, 3);
            _os.write(starIdVec, 4);
            _os.write(topicId, 5);
            _os.write(Lid, 6);
            _os.write(Cid, 7);
            _os.write(photoVec, 8);
            _os.write(videoVec, 9);
            _os.write(source, 10);
            _os.write(abstract, 11);
            _os.write(note_id, 12);
            _os.write(type, 13);
            _os.write(strLinkUrl, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, true);
            _is.read(title, 1, false);
            _is.read(content, 2, false);
            _is.read(seq, 3, false);
            _is.read(starIdVec, 4, false);
            _is.read(topicId, 5, false);
            _is.read(Lid, 6, false);
            _is.read(Cid, 7, false);
            _is.read(photoVec, 8, false);
            _is.read(videoVec, 9, false);
            _is.read(source, 10, false);
            _is.read(abstract, 11, false);
            _is.read(note_id, 12, false);
            _is.read(type, 13, false);
            _is.read(strLinkUrl, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(title,"title");
            _ds.display(content,"content");
            _ds.display(seq,"seq");
            _ds.display(starIdVec,"starIdVec");
            _ds.display(topicId,"topicId");
            _ds.display(Lid,"Lid");
            _ds.display(Cid,"Cid");
            _ds.display(photoVec,"photoVec");
            _ds.display(videoVec,"videoVec");
            _ds.display(source,"source");
            _ds.display(abstract,"abstract");
            _ds.display(note_id,"note_id");
            _ds.display(type,"type");
            _ds.display(strLinkUrl,"strLinkUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(starIdVec, true);
            _ds.displaySimple(topicId, true);
            _ds.displaySimple(Lid, true);
            _ds.displaySimple(Cid, true);
            _ds.displaySimple(photoVec, true);
            _ds.displaySimple(videoVec, true);
            _ds.displaySimple(source, true);
            _ds.displaySimple(abstract, true);
            _ds.displaySimple(note_id, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(strLinkUrl, false);
            return _os;
        }
    public:
        taf::Int64 id;
        std::string title;
        std::string content;
        std::string seq;
        vector<std::string> starIdVec;
        std::string topicId;
        std::string Lid;
        std::string Cid;
        vector<CStarAdminPro::stImgInfo> photoVec;
        vector<CStarAdminPro::stVideoInfo> videoVec;
        taf::Int32 source;
        std::string abstract;
        std::string note_id;
        taf::Int32 type;
        std::string strLinkUrl;
    };
    inline bool operator==(const stModifyNoteReq&l, const stModifyNoteReq&r)
    {
        return l.id == r.id && l.title == r.title && l.content == r.content && l.seq == r.seq && l.starIdVec == r.starIdVec && l.topicId == r.topicId && l.Lid == r.Lid && l.Cid == r.Cid && l.photoVec == r.photoVec && l.videoVec == r.videoVec && l.source == r.source && l.abstract == r.abstract && l.note_id == r.note_id && l.type == r.type && l.strLinkUrl == r.strLinkUrl;
    }
    inline bool operator!=(const stModifyNoteReq&l, const stModifyNoteReq&r)
    {
        return !(l == r);
    }

    struct stModifyNoteRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stModifyNoteRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stModifyNoteRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stModifyNoteRsp&l, const stModifyNoteRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stModifyNoteRsp&l, const stModifyNoteRsp&r)
    {
        return !(l == r);
    }

    struct stDelWeiboReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDelWeiboReq";
        }
        static string MD5()
        {
            return "c9297db2d658badddcde8e004c809945";
        }
        stDelWeiboReq()
        :content(""),seq("")
        {
        }
        void resetDefautlt()
        {
            content = "";
            seq = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(content, 0);
            _os.write(seq, 1);
            _os.write(starIdVec, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(content, 0, false);
            _is.read(seq, 1, false);
            _is.read(starIdVec, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(content,"content");
            _ds.display(seq,"seq");
            _ds.display(starIdVec,"starIdVec");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(content, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(starIdVec, false);
            return _os;
        }
    public:
        std::string content;
        std::string seq;
        vector<std::string> starIdVec;
    };
    inline bool operator==(const stDelWeiboReq&l, const stDelWeiboReq&r)
    {
        return l.content == r.content && l.seq == r.seq && l.starIdVec == r.starIdVec;
    }
    inline bool operator!=(const stDelWeiboReq&l, const stDelWeiboReq&r)
    {
        return !(l == r);
    }

    struct stDelWeiboRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDelWeiboRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stDelWeiboRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stDelWeiboRsp&l, const stDelWeiboRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stDelWeiboRsp&l, const stDelWeiboRsp&r)
    {
        return !(l == r);
    }

    struct stMyNoteReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stMyNoteReq";
        }
        static string MD5()
        {
            return "4e2a678fc881ce161d0f21377a2b62f7";
        }
        stMyNoteReq()
        :type(0),starId(""),page_num(0),page_size(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
            starId = "";
            page_num = 0;
            page_size = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(starId, 1);
            _os.write(page_num, 2);
            _os.write(page_size, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(starId, 1, false);
            _is.read(page_num, 2, false);
            _is.read(page_size, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(starId,"starId");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string starId;
        taf::Int32 page_num;
        taf::Int32 page_size;
    };
    inline bool operator==(const stMyNoteReq&l, const stMyNoteReq&r)
    {
        return l.type == r.type && l.starId == r.starId && l.page_num == r.page_num && l.page_size == r.page_size;
    }
    inline bool operator!=(const stMyNoteReq&l, const stMyNoteReq&r)
    {
        return !(l == r);
    }

    struct stMyNoteRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stMyNoteRsp";
        }
        static string MD5()
        {
            return "f55b53e68bb6ebd7045dd57da2768c3d";
        }
        stMyNoteRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(noteDetailVec, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(noteDetailVec, 2, false);
            _is.read(page_num, 3, true);
            _is.read(page_totalNum, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(noteDetailVec,"noteDetailVec");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(noteDetailVec, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stNoteDetail> noteDetailVec;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stMyNoteRsp&l, const stMyNoteRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.noteDetailVec == r.noteDetailVec && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stMyNoteRsp&l, const stMyNoteRsp&r)
    {
        return !(l == r);
    }

    struct stMyStarReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stMyStarReq";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        stMyStarReq()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        taf::Int32 type;
    };
    inline bool operator==(const stMyStarReq&l, const stMyStarReq&r)
    {
        return l.type == r.type;
    }
    inline bool operator!=(const stMyStarReq&l, const stMyStarReq&r)
    {
        return !(l == r);
    }

    struct stMyStarRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stMyStarRsp";
        }
        static string MD5()
        {
            return "55955083dccea2e4988324e926cca8b7";
        }
        stMyStarRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(starInfoVec, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(starInfoVec, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(starInfoVec,"starInfoVec");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(starInfoVec, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stStarInfo> starInfoVec;
    };
    inline bool operator==(const stMyStarRsp&l, const stMyStarRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.starInfoVec == r.starInfoVec;
    }
    inline bool operator!=(const stMyStarRsp&l, const stMyStarRsp&r)
    {
        return !(l == r);
    }

    struct stOperateNoteReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperateNoteReq";
        }
        static string MD5()
        {
            return "dda6c1bab4aeaf5359c0fd44aeb59d1b";
        }
        stOperateNoteReq()
        :type(0),fansAdminId(0),note_id(""),starId(""),reason(""),top_type(0),channelId(0),dataKey(""),topicId(""),top_rank(0),title(""),pic(""),picType(0),onlineTime(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
            fansAdminId = 0;
            note_id = "";
            starId = "";
            reason = "";
            top_type = 0;
            channelId = 0;
            dataKey = "";
            topicId = "";
            top_rank = 0;
            title = "";
            pic = "";
            picType = 0;
            onlineTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(fansAdminId, 1);
            _os.write(note_id, 2);
            _os.write(starId, 3);
            _os.write(reason, 4);
            _os.write(top_type, 5);
            _os.write(channelId, 6);
            _os.write(dataKey, 7);
            _os.write(topicId, 8);
            _os.write(ids, 9);
            _os.write(top_rank, 10);
            _os.write(title, 11);
            _os.write(pic, 12);
            _os.write(picType, 13);
            _os.write(onlineTime, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(fansAdminId, 1, false);
            _is.read(note_id, 2, false);
            _is.read(starId, 3, false);
            _is.read(reason, 4, false);
            _is.read(top_type, 5, false);
            _is.read(channelId, 6, false);
            _is.read(dataKey, 7, false);
            _is.read(topicId, 8, false);
            _is.read(ids, 9, false);
            _is.read(top_rank, 10, false);
            _is.read(title, 11, false);
            _is.read(pic, 12, false);
            _is.read(picType, 13, false);
            _is.read(onlineTime, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(fansAdminId,"fansAdminId");
            _ds.display(note_id,"note_id");
            _ds.display(starId,"starId");
            _ds.display(reason,"reason");
            _ds.display(top_type,"top_type");
            _ds.display(channelId,"channelId");
            _ds.display(dataKey,"dataKey");
            _ds.display(topicId,"topicId");
            _ds.display(ids,"ids");
            _ds.display(top_rank,"top_rank");
            _ds.display(title,"title");
            _ds.display(pic,"pic");
            _ds.display(picType,"picType");
            _ds.display(onlineTime,"onlineTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(fansAdminId, true);
            _ds.displaySimple(note_id, true);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(reason, true);
            _ds.displaySimple(top_type, true);
            _ds.displaySimple(channelId, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(topicId, true);
            _ds.displaySimple(ids, true);
            _ds.displaySimple(top_rank, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(pic, true);
            _ds.displaySimple(picType, true);
            _ds.displaySimple(onlineTime, false);
            return _os;
        }
    public:
        taf::Int32 type;
        taf::Int64 fansAdminId;
        std::string note_id;
        std::string starId;
        std::string reason;
        taf::Int32 top_type;
        taf::Int32 channelId;
        std::string dataKey;
        std::string topicId;
        vector<std::string> ids;
        taf::Int32 top_rank;
        std::string title;
        std::string pic;
        taf::Int32 picType;
        taf::Int64 onlineTime;
    };
    inline bool operator==(const stOperateNoteReq&l, const stOperateNoteReq&r)
    {
        return l.type == r.type && l.fansAdminId == r.fansAdminId && l.note_id == r.note_id && l.starId == r.starId && l.reason == r.reason && l.top_type == r.top_type && l.channelId == r.channelId && l.dataKey == r.dataKey && l.topicId == r.topicId && l.ids == r.ids && l.top_rank == r.top_rank && l.title == r.title && l.pic == r.pic && l.picType == r.picType && l.onlineTime == r.onlineTime;
    }
    inline bool operator!=(const stOperateNoteReq&l, const stOperateNoteReq&r)
    {
        return !(l == r);
    }

    struct stOperateNoteRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperateNoteRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stOperateNoteRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stOperateNoteRsp&l, const stOperateNoteRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stOperateNoteRsp&l, const stOperateNoteRsp&r)
    {
        return !(l == r);
    }

    struct stPublishTopicReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stPublishTopicReq";
        }
        static string MD5()
        {
            return "1f56ee8ff6d0066f4b51d02769e4fd75";
        }
        stPublishTopicReq()
        :title(""),brief(""),seq(""),Cid(""),Lid(""),source(0),type(0),ext_json(""),music_vid(""),channel_type(0),vidAttachmentId(""),enterButtonText("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            brief = "";
            seq = "";
            Cid = "";
            Lid = "";
            source = 0;
            type = 0;
            ext_json = "";
            music_vid = "";
            channel_type = 0;
            vidAttachmentId = "";
            enterButtonText = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(brief, 1);
            _os.write(seq, 2);
            _os.write(photoVec, 3);
            _os.write(starIdVec, 4);
            _os.write(Cid, 5);
            _os.write(Lid, 6);
            _os.write(source, 7);
            _os.write(type, 8);
            _os.write(ext_json, 9);
            _os.write(activityIdVec, 10);
            _os.write(music_vid, 11);
            _os.write(channel_type, 12);
            _os.write(vidAttachmentId, 13);
            _os.write(enterButtonText, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, true);
            _is.read(brief, 1, true);
            _is.read(seq, 2, false);
            _is.read(photoVec, 3, false);
            _is.read(starIdVec, 4, false);
            _is.read(Cid, 5, false);
            _is.read(Lid, 6, false);
            _is.read(source, 7, false);
            _is.read(type, 8, false);
            _is.read(ext_json, 9, false);
            _is.read(activityIdVec, 10, false);
            _is.read(music_vid, 11, false);
            _is.read(channel_type, 12, false);
            _is.read(vidAttachmentId, 13, false);
            _is.read(enterButtonText, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(brief,"brief");
            _ds.display(seq,"seq");
            _ds.display(photoVec,"photoVec");
            _ds.display(starIdVec,"starIdVec");
            _ds.display(Cid,"Cid");
            _ds.display(Lid,"Lid");
            _ds.display(source,"source");
            _ds.display(type,"type");
            _ds.display(ext_json,"ext_json");
            _ds.display(activityIdVec,"activityIdVec");
            _ds.display(music_vid,"music_vid");
            _ds.display(channel_type,"channel_type");
            _ds.display(vidAttachmentId,"vidAttachmentId");
            _ds.display(enterButtonText,"enterButtonText");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(brief, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(photoVec, true);
            _ds.displaySimple(starIdVec, true);
            _ds.displaySimple(Cid, true);
            _ds.displaySimple(Lid, true);
            _ds.displaySimple(source, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(ext_json, true);
            _ds.displaySimple(activityIdVec, true);
            _ds.displaySimple(music_vid, true);
            _ds.displaySimple(channel_type, true);
            _ds.displaySimple(vidAttachmentId, true);
            _ds.displaySimple(enterButtonText, false);
            return _os;
        }
    public:
        std::string title;
        std::string brief;
        std::string seq;
        vector<CStarAdminPro::stImgInfo> photoVec;
        vector<std::string> starIdVec;
        std::string Cid;
        std::string Lid;
        taf::Int32 source;
        taf::Int32 type;
        std::string ext_json;
        vector<taf::Int64> activityIdVec;
        std::string music_vid;
        taf::Int32 channel_type;
        std::string vidAttachmentId;
        std::string enterButtonText;
    };
    inline bool operator==(const stPublishTopicReq&l, const stPublishTopicReq&r)
    {
        return l.title == r.title && l.brief == r.brief && l.seq == r.seq && l.photoVec == r.photoVec && l.starIdVec == r.starIdVec && l.Cid == r.Cid && l.Lid == r.Lid && l.source == r.source && l.type == r.type && l.ext_json == r.ext_json && l.activityIdVec == r.activityIdVec && l.music_vid == r.music_vid && l.channel_type == r.channel_type && l.vidAttachmentId == r.vidAttachmentId && l.enterButtonText == r.enterButtonText;
    }
    inline bool operator!=(const stPublishTopicReq&l, const stPublishTopicReq&r)
    {
        return !(l == r);
    }

    struct stPublishTopicRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stPublishTopicRsp";
        }
        static string MD5()
        {
            return "813f7cf8041cfa050eef80e3a572e674";
        }
        stPublishTopicRsp()
        :errCode(0),strErrMsg(""),fansAdminId(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            fansAdminId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(fansAdminId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(fansAdminId, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(fansAdminId,"fansAdminId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(fansAdminId, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        taf::Int64 fansAdminId;
    };
    inline bool operator==(const stPublishTopicRsp&l, const stPublishTopicRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.fansAdminId == r.fansAdminId;
    }
    inline bool operator!=(const stPublishTopicRsp&l, const stPublishTopicRsp&r)
    {
        return !(l == r);
    }

    struct stModifyTopicReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stModifyTopicReq";
        }
        static string MD5()
        {
            return "2416b7eea6492ca9b38257d308f75bd7";
        }
        stModifyTopicReq()
        :id(0),title(""),brief(""),seq(""),Cid(""),Lid(""),source(0),type(0),ext_json(""),music_vid(""),channel_type(0),vidAttachmentId(""),enterButtonText("")
        {
        }
        void resetDefautlt()
        {
            id = 0;
            title = "";
            brief = "";
            seq = "";
            Cid = "";
            Lid = "";
            source = 0;
            type = 0;
            ext_json = "";
            music_vid = "";
            channel_type = 0;
            vidAttachmentId = "";
            enterButtonText = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(title, 1);
            _os.write(brief, 2);
            _os.write(seq, 3);
            _os.write(photoVec, 4);
            _os.write(starIdVec, 5);
            _os.write(Cid, 6);
            _os.write(Lid, 7);
            _os.write(source, 8);
            _os.write(type, 9);
            _os.write(ext_json, 10);
            _os.write(activityIdVec, 11);
            _os.write(music_vid, 12);
            _os.write(channel_type, 13);
            _os.write(vidAttachmentId, 14);
            _os.write(enterButtonText, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, true);
            _is.read(title, 1, true);
            _is.read(brief, 2, true);
            _is.read(seq, 3, false);
            _is.read(photoVec, 4, false);
            _is.read(starIdVec, 5, false);
            _is.read(Cid, 6, false);
            _is.read(Lid, 7, false);
            _is.read(source, 8, false);
            _is.read(type, 9, false);
            _is.read(ext_json, 10, false);
            _is.read(activityIdVec, 11, false);
            _is.read(music_vid, 12, false);
            _is.read(channel_type, 13, false);
            _is.read(vidAttachmentId, 14, false);
            _is.read(enterButtonText, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(title,"title");
            _ds.display(brief,"brief");
            _ds.display(seq,"seq");
            _ds.display(photoVec,"photoVec");
            _ds.display(starIdVec,"starIdVec");
            _ds.display(Cid,"Cid");
            _ds.display(Lid,"Lid");
            _ds.display(source,"source");
            _ds.display(type,"type");
            _ds.display(ext_json,"ext_json");
            _ds.display(activityIdVec,"activityIdVec");
            _ds.display(music_vid,"music_vid");
            _ds.display(channel_type,"channel_type");
            _ds.display(vidAttachmentId,"vidAttachmentId");
            _ds.display(enterButtonText,"enterButtonText");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(brief, true);
            _ds.displaySimple(seq, true);
            _ds.displaySimple(photoVec, true);
            _ds.displaySimple(starIdVec, true);
            _ds.displaySimple(Cid, true);
            _ds.displaySimple(Lid, true);
            _ds.displaySimple(source, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(ext_json, true);
            _ds.displaySimple(activityIdVec, true);
            _ds.displaySimple(music_vid, true);
            _ds.displaySimple(channel_type, true);
            _ds.displaySimple(vidAttachmentId, true);
            _ds.displaySimple(enterButtonText, false);
            return _os;
        }
    public:
        taf::Int64 id;
        std::string title;
        std::string brief;
        std::string seq;
        vector<CStarAdminPro::stImgInfo> photoVec;
        vector<std::string> starIdVec;
        std::string Cid;
        std::string Lid;
        taf::Int32 source;
        taf::Int32 type;
        std::string ext_json;
        vector<taf::Int64> activityIdVec;
        std::string music_vid;
        taf::Int32 channel_type;
        std::string vidAttachmentId;
        std::string enterButtonText;
    };
    inline bool operator==(const stModifyTopicReq&l, const stModifyTopicReq&r)
    {
        return l.id == r.id && l.title == r.title && l.brief == r.brief && l.seq == r.seq && l.photoVec == r.photoVec && l.starIdVec == r.starIdVec && l.Cid == r.Cid && l.Lid == r.Lid && l.source == r.source && l.type == r.type && l.ext_json == r.ext_json && l.activityIdVec == r.activityIdVec && l.music_vid == r.music_vid && l.channel_type == r.channel_type && l.vidAttachmentId == r.vidAttachmentId && l.enterButtonText == r.enterButtonText;
    }
    inline bool operator!=(const stModifyTopicReq&l, const stModifyTopicReq&r)
    {
        return !(l == r);
    }

    struct stModifyTopicRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stModifyTopicRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stModifyTopicRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stModifyTopicRsp&l, const stModifyTopicRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stModifyTopicRsp&l, const stModifyTopicRsp&r)
    {
        return !(l == r);
    }

    struct stIsTitleExistReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stIsTitleExistReq";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stIsTitleExistReq()
        :type(0),title("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            title = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(title, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(title, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(title,"title");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(title, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string title;
    };
    inline bool operator==(const stIsTitleExistReq&l, const stIsTitleExistReq&r)
    {
        return l.type == r.type && l.title == r.title;
    }
    inline bool operator!=(const stIsTitleExistReq&l, const stIsTitleExistReq&r)
    {
        return !(l == r);
    }

    struct stIsTitleExistRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stIsTitleExistRsp";
        }
        static string MD5()
        {
            return "5776fd7103fcea055637c7e8b9708bb0";
        }
        stIsTitleExistRsp()
        :errCode(0),strErrMsg(""),exist(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            exist = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(exist, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(exist, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(exist,"exist");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(exist, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        taf::Int32 exist;
    };
    inline bool operator==(const stIsTitleExistRsp&l, const stIsTitleExistRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.exist == r.exist;
    }
    inline bool operator!=(const stIsTitleExistRsp&l, const stIsTitleExistRsp&r)
    {
        return !(l == r);
    }

    struct stOperateTopicReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperateTopicReq";
        }
        static string MD5()
        {
            return "cd2cd7e22f1fa32b2d661d0758d7a4cc";
        }
        stOperateTopicReq()
        :type(0),fansAdminId(0),reason(""),topicId("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            fansAdminId = 0;
            reason = "";
            topicId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(fansAdminId, 1);
            _os.write(reason, 2);
            _os.write(topicId, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(fansAdminId, 1, true);
            _is.read(reason, 2, false);
            _is.read(topicId, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(fansAdminId,"fansAdminId");
            _ds.display(reason,"reason");
            _ds.display(topicId,"topicId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(fansAdminId, true);
            _ds.displaySimple(reason, true);
            _ds.displaySimple(topicId, false);
            return _os;
        }
    public:
        taf::Int32 type;
        taf::Int64 fansAdminId;
        std::string reason;
        std::string topicId;
    };
    inline bool operator==(const stOperateTopicReq&l, const stOperateTopicReq&r)
    {
        return l.type == r.type && l.fansAdminId == r.fansAdminId && l.reason == r.reason && l.topicId == r.topicId;
    }
    inline bool operator!=(const stOperateTopicReq&l, const stOperateTopicReq&r)
    {
        return !(l == r);
    }

    struct stOperateTopicRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperateTopicRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stOperateTopicRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stOperateTopicRsp&l, const stOperateTopicRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stOperateTopicRsp&l, const stOperateTopicRsp&r)
    {
        return !(l == r);
    }

    struct stMyTopicReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stMyTopicReq";
        }
        static string MD5()
        {
            return "4e2a678fc881ce161d0f21377a2b62f7";
        }
        stMyTopicReq()
        :type(0),starId(""),page_num(0),page_size(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
            starId = "";
            page_num = 0;
            page_size = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(starId, 1);
            _os.write(page_num, 3);
            _os.write(page_size, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(starId, 1, false);
            _is.read(page_num, 3, false);
            _is.read(page_size, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(starId,"starId");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string starId;
        taf::Int32 page_num;
        taf::Int32 page_size;
    };
    inline bool operator==(const stMyTopicReq&l, const stMyTopicReq&r)
    {
        return l.type == r.type && l.starId == r.starId && l.page_num == r.page_num && l.page_size == r.page_size;
    }
    inline bool operator!=(const stMyTopicReq&l, const stMyTopicReq&r)
    {
        return !(l == r);
    }

    struct stMyTopicRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stMyTopicRsp";
        }
        static string MD5()
        {
            return "7c690708a9efbf894c3cbd3075818936";
        }
        stMyTopicRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(topicDetailVec, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(topicDetailVec, 2, false);
            _is.read(page_num, 3, true);
            _is.read(page_totalNum, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(topicDetailVec,"topicDetailVec");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(topicDetailVec, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stTopicDetail> topicDetailVec;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stMyTopicRsp&l, const stMyTopicRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.topicDetailVec == r.topicDetailVec && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stMyTopicRsp&l, const stMyTopicRsp&r)
    {
        return !(l == r);
    }

    struct stStarDyncReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stStarDyncReq";
        }
        static string MD5()
        {
            return "31b837dee0e3f970aa2d14771bf49d74";
        }
        stStarDyncReq()
        :starId(""),page_num(0),page_size(0),type(0)
        {
        }
        void resetDefautlt()
        {
            starId = "";
            page_num = 0;
            page_size = 0;
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starId, 0);
            _os.write(page_num, 1);
            _os.write(page_size, 2);
            _os.write(type, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starId, 0, true);
            _is.read(page_num, 1, false);
            _is.read(page_size, 2, false);
            _is.read(type, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starId,"starId");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        std::string starId;
        taf::Int32 page_num;
        taf::Int32 page_size;
        taf::Int32 type;
    };
    inline bool operator==(const stStarDyncReq&l, const stStarDyncReq&r)
    {
        return l.starId == r.starId && l.page_num == r.page_num && l.page_size == r.page_size && l.type == r.type;
    }
    inline bool operator!=(const stStarDyncReq&l, const stStarDyncReq&r)
    {
        return !(l == r);
    }

    struct stStarDyncRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stStarDyncRsp";
        }
        static string MD5()
        {
            return "f55b53e68bb6ebd7045dd57da2768c3d";
        }
        stStarDyncRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(noteDetailVec, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(noteDetailVec, 2, false);
            _is.read(page_num, 3, true);
            _is.read(page_totalNum, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(noteDetailVec,"noteDetailVec");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(noteDetailVec, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stNoteDetail> noteDetailVec;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stStarDyncRsp&l, const stStarDyncRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.noteDetailVec == r.noteDetailVec && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stStarDyncRsp&l, const stStarDyncRsp&r)
    {
        return !(l == r);
    }

    struct stShortVideoInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stShortVideoInfo";
        }
        static string MD5()
        {
            return "6d3d580ee9eb4b8babb3cbbcb4d7e9b2";
        }
        stShortVideoInfo()
        :vid(""),h5Url(""),time(0),imageUrl(""),playUrl(""),description(""),isDemoVideo(false),reportParams(""),originVid(""),videoFileSize(0),reportKey(""),title(""),originCid("")
        {
        }
        void resetDefautlt()
        {
            vid = "";
            h5Url = "";
            time = 0;
            imageUrl = "";
            playUrl = "";
            description = "";
            isDemoVideo = false;
            reportParams = "";
            originVid = "";
            videoFileSize = 0;
            reportKey = "";
            title = "";
            originCid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vid, 0);
            _os.write(h5Url, 1);
            _os.write(time, 2);
            _os.write(imageUrl, 3);
            _os.write(playUrl, 4);
            _os.write(description, 5);
            _os.write(isDemoVideo, 6);
            _os.write(reportParams, 7);
            _os.write(originVid, 8);
            _os.write(videoFileSize, 9);
            _os.write(reportKey, 10);
            _os.write(title, 11);
            _os.write(originCid, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vid, 0, true);
            _is.read(h5Url, 1, true);
            _is.read(time, 2, true);
            _is.read(imageUrl, 3, true);
            _is.read(playUrl, 4, false);
            _is.read(description, 5, false);
            _is.read(isDemoVideo, 6, false);
            _is.read(reportParams, 7, false);
            _is.read(originVid, 8, false);
            _is.read(videoFileSize, 9, false);
            _is.read(reportKey, 10, false);
            _is.read(title, 11, false);
            _is.read(originCid, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vid,"vid");
            _ds.display(h5Url,"h5Url");
            _ds.display(time,"time");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(playUrl,"playUrl");
            _ds.display(description,"description");
            _ds.display(isDemoVideo,"isDemoVideo");
            _ds.display(reportParams,"reportParams");
            _ds.display(originVid,"originVid");
            _ds.display(videoFileSize,"videoFileSize");
            _ds.display(reportKey,"reportKey");
            _ds.display(title,"title");
            _ds.display(originCid,"originCid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(h5Url, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(playUrl, true);
            _ds.displaySimple(description, true);
            _ds.displaySimple(isDemoVideo, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(originVid, true);
            _ds.displaySimple(videoFileSize, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(originCid, false);
            return _os;
        }
    public:
        std::string vid;
        std::string h5Url;
        taf::Int64 time;
        std::string imageUrl;
        std::string playUrl;
        std::string description;
        taf::Bool isDemoVideo;
        std::string reportParams;
        std::string originVid;
        taf::Int64 videoFileSize;
        std::string reportKey;
        std::string title;
        std::string originCid;
    };
    inline bool operator==(const stShortVideoInfo&l, const stShortVideoInfo&r)
    {
        return l.vid == r.vid && l.h5Url == r.h5Url && l.time == r.time && l.imageUrl == r.imageUrl && l.playUrl == r.playUrl && l.description == r.description && l.isDemoVideo == r.isDemoVideo && l.reportParams == r.reportParams && l.originVid == r.originVid && l.videoFileSize == r.videoFileSize && l.reportKey == r.reportKey && l.title == r.title && l.originCid == r.originCid;
    }
    inline bool operator!=(const stShortVideoInfo&l, const stShortVideoInfo&r)
    {
        return !(l == r);
    }

    struct stShortVideoSource : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stShortVideoSource";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        stShortVideoSource()
        :title(""),imageUrl(""),jumpUrl("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            imageUrl = "";
            jumpUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(imageUrl, 1);
            _os.write(jumpUrl, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(imageUrl, 1, false);
            _is.read(jumpUrl, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(jumpUrl,"jumpUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(jumpUrl, false);
            return _os;
        }
    public:
        std::string title;
        std::string imageUrl;
        std::string jumpUrl;
    };
    inline bool operator==(const stShortVideoSource&l, const stShortVideoSource&r)
    {
        return l.title == r.title && l.imageUrl == r.imageUrl && l.jumpUrl == r.jumpUrl;
    }
    inline bool operator!=(const stShortVideoSource&l, const stShortVideoSource&r)
    {
        return !(l == r);
    }

    struct stFansMsgDetail : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stFansMsgDetail";
        }
        static string MD5()
        {
            return "500fae7a0fd659aa24844bbcf6eaea80";
        }
        stFansMsgDetail()
        :note_id(""),title(""),content(""),createTime(0),modifyTime(0),readNum(0),praiseNum(0),commentNum(0),shareNum(0),source(0),status(0)
        {
        }
        void resetDefautlt()
        {
            note_id = "";
            title = "";
            content = "";
            createTime = 0;
            modifyTime = 0;
            readNum = 0;
            praiseNum = 0;
            commentNum = 0;
            shareNum = 0;
            source = 0;
            status = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(note_id, 0);
            _os.write(title, 1);
            _os.write(content, 2);
            _os.write(createTime, 3);
            _os.write(modifyTime, 4);
            _os.write(readNum, 5);
            _os.write(praiseNum, 6);
            _os.write(commentNum, 7);
            _os.write(shareNum, 8);
            _os.write(source, 9);
            _os.write(photoVec, 10);
            _os.write(shortVideoVec, 11);
            _os.write(shortVideoSourceVec, 12);
            _os.write(userInfo, 13);
            _os.write(status, 14);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(note_id, 0, true);
            _is.read(title, 1, false);
            _is.read(content, 2, false);
            _is.read(createTime, 3, false);
            _is.read(modifyTime, 4, false);
            _is.read(readNum, 5, false);
            _is.read(praiseNum, 6, false);
            _is.read(commentNum, 7, false);
            _is.read(shareNum, 8, false);
            _is.read(source, 9, false);
            _is.read(photoVec, 10, false);
            _is.read(shortVideoVec, 11, false);
            _is.read(shortVideoSourceVec, 12, false);
            _is.read(userInfo, 13, false);
            _is.read(status, 14, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(note_id,"note_id");
            _ds.display(title,"title");
            _ds.display(content,"content");
            _ds.display(createTime,"createTime");
            _ds.display(modifyTime,"modifyTime");
            _ds.display(readNum,"readNum");
            _ds.display(praiseNum,"praiseNum");
            _ds.display(commentNum,"commentNum");
            _ds.display(shareNum,"shareNum");
            _ds.display(source,"source");
            _ds.display(photoVec,"photoVec");
            _ds.display(shortVideoVec,"shortVideoVec");
            _ds.display(shortVideoSourceVec,"shortVideoSourceVec");
            _ds.display(userInfo,"userInfo");
            _ds.display(status,"status");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(note_id, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(createTime, true);
            _ds.displaySimple(modifyTime, true);
            _ds.displaySimple(readNum, true);
            _ds.displaySimple(praiseNum, true);
            _ds.displaySimple(commentNum, true);
            _ds.displaySimple(shareNum, true);
            _ds.displaySimple(source, true);
            _ds.displaySimple(photoVec, true);
            _ds.displaySimple(shortVideoVec, true);
            _ds.displaySimple(shortVideoSourceVec, true);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(status, false);
            return _os;
        }
    public:
        std::string note_id;
        std::string title;
        std::string content;
        taf::Int64 createTime;
        taf::Int64 modifyTime;
        taf::Int64 readNum;
        taf::Int64 praiseNum;
        taf::Int64 commentNum;
        taf::Int64 shareNum;
        taf::Int32 source;
        vector<CStarAdminPro::stImgInfo> photoVec;
        vector<CStarAdminPro::stShortVideoInfo> shortVideoVec;
        vector<CStarAdminPro::stShortVideoSource> shortVideoSourceVec;
        CStarAdminPro::stUserInfo userInfo;
        taf::Int32 status;
    };
    inline bool operator==(const stFansMsgDetail&l, const stFansMsgDetail&r)
    {
        return l.note_id == r.note_id && l.title == r.title && l.content == r.content && l.createTime == r.createTime && l.modifyTime == r.modifyTime && l.readNum == r.readNum && l.praiseNum == r.praiseNum && l.commentNum == r.commentNum && l.shareNum == r.shareNum && l.source == r.source && l.photoVec == r.photoVec && l.shortVideoVec == r.shortVideoVec && l.shortVideoSourceVec == r.shortVideoSourceVec && l.userInfo == r.userInfo && l.status == r.status;
    }
    inline bool operator!=(const stFansMsgDetail&l, const stFansMsgDetail&r)
    {
        return !(l == r);
    }

    struct stStarFansMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stStarFansMsgReq";
        }
        static string MD5()
        {
            return "9bda4ac16227127f47ea815aed6f8d9e";
        }
        stStarFansMsgReq()
        :starId(""),page_num(0),page_size(0)
        {
        }
        void resetDefautlt()
        {
            starId = "";
            page_num = 0;
            page_size = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starId, 0);
            _os.write(page_num, 1);
            _os.write(page_size, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starId, 0, true);
            _is.read(page_num, 1, false);
            _is.read(page_size, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starId,"starId");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, false);
            return _os;
        }
    public:
        std::string starId;
        taf::Int32 page_num;
        taf::Int32 page_size;
    };
    inline bool operator==(const stStarFansMsgReq&l, const stStarFansMsgReq&r)
    {
        return l.starId == r.starId && l.page_num == r.page_num && l.page_size == r.page_size;
    }
    inline bool operator!=(const stStarFansMsgReq&l, const stStarFansMsgReq&r)
    {
        return !(l == r);
    }

    struct stStarFansMsgRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stStarFansMsgRsp";
        }
        static string MD5()
        {
            return "79847e7d55d14756c418ae10aa6aa999";
        }
        stStarFansMsgRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(FansMsgDetailVec, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(FansMsgDetailVec, 2, false);
            _is.read(page_num, 3, true);
            _is.read(page_totalNum, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(FansMsgDetailVec,"FansMsgDetailVec");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(FansMsgDetailVec, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stFansMsgDetail> FansMsgDetailVec;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stStarFansMsgRsp&l, const stStarFansMsgRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.FansMsgDetailVec == r.FansMsgDetailVec && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stStarFansMsgRsp&l, const stStarFansMsgRsp&r)
    {
        return !(l == r);
    }

    struct stOperateFansMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperateFansMsgReq";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        stOperateFansMsgReq()
        :type(0),note_id(""),starId("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            note_id = "";
            starId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(note_id, 1);
            _os.write(starId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(note_id, 1, true);
            _is.read(starId, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(note_id,"note_id");
            _ds.display(starId,"starId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(note_id, true);
            _ds.displaySimple(starId, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string note_id;
        std::string starId;
    };
    inline bool operator==(const stOperateFansMsgReq&l, const stOperateFansMsgReq&r)
    {
        return l.type == r.type && l.note_id == r.note_id && l.starId == r.starId;
    }
    inline bool operator!=(const stOperateFansMsgReq&l, const stOperateFansMsgReq&r)
    {
        return !(l == r);
    }

    struct stOperateFansMsgRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperateFansMsgRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stOperateFansMsgRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stOperateFansMsgRsp&l, const stOperateFansMsgRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stOperateFansMsgRsp&l, const stOperateFansMsgRsp&r)
    {
        return !(l == r);
    }

    struct stReadFeedStatusReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadFeedStatusReq";
        }
        static string MD5()
        {
            return "f8b98e181936a8fd0610a0e7aedd49f1";
        }
        stReadFeedStatusReq()
        :feedId(""),vuid(0),starId(""),bitmap(0),topicId("")
        {
        }
        void resetDefautlt()
        {
            feedId = "";
            vuid = 0;
            starId = "";
            bitmap = 0;
            topicId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(vuid, 1);
            _os.write(starId, 2);
            _os.write(bitmap, 3);
            _os.write(topicId, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(vuid, 1, false);
            _is.read(starId, 2, false);
            _is.read(bitmap, 3, false);
            _is.read(topicId, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(vuid,"vuid");
            _ds.display(starId,"starId");
            _ds.display(bitmap,"bitmap");
            _ds.display(topicId,"topicId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(vuid, true);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(bitmap, true);
            _ds.displaySimple(topicId, false);
            return _os;
        }
    public:
        std::string feedId;
        taf::Int64 vuid;
        std::string starId;
        taf::Int32 bitmap;
        std::string topicId;
    };
    inline bool operator==(const stReadFeedStatusReq&l, const stReadFeedStatusReq&r)
    {
        return l.feedId == r.feedId && l.vuid == r.vuid && l.starId == r.starId && l.bitmap == r.bitmap && l.topicId == r.topicId;
    }
    inline bool operator!=(const stReadFeedStatusReq&l, const stReadFeedStatusReq&r)
    {
        return !(l == r);
    }

    struct stReadFeedStatusRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadFeedStatusRsp";
        }
        static string MD5()
        {
            return "24ccb1578ad3dc356b4b2319c4bf9f39";
        }
        stReadFeedStatusRsp()
        :errCode(0),strErrMsg(""),feed_status(0),vuid_status(0),right(0),top_type(1)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            feed_status = 0;
            vuid_status = 0;
            right = 0;
            top_type = 1;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(feed_status, 2);
            _os.write(vuid_status, 3);
            _os.write(right, 4);
            _os.write(top_type, 5);
            _os.write(operer, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(feed_status, 2, false);
            _is.read(vuid_status, 3, false);
            _is.read(right, 4, false);
            _is.read(top_type, 5, false);
            _is.read(operer, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(feed_status,"feed_status");
            _ds.display(vuid_status,"vuid_status");
            _ds.display(right,"right");
            _ds.display(top_type,"top_type");
            _ds.display(operer,"operer");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(feed_status, true);
            _ds.displaySimple(vuid_status, true);
            _ds.displaySimple(right, true);
            _ds.displaySimple(top_type, true);
            _ds.displaySimple(operer, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        taf::Int32 feed_status;
        taf::Int32 vuid_status;
        taf::Int32 right;
        taf::Int32 top_type;
        CStarAdminPro::stUserInfo2 operer;
    };
    inline bool operator==(const stReadFeedStatusRsp&l, const stReadFeedStatusRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.feed_status == r.feed_status && l.vuid_status == r.vuid_status && l.right == r.right && l.top_type == r.top_type && l.operer == r.operer;
    }
    inline bool operator!=(const stReadFeedStatusRsp&l, const stReadFeedStatusRsp&r)
    {
        return !(l == r);
    }

    struct stReadVuidIdentityReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadVuidIdentityReq";
        }
        static string MD5()
        {
            return "67e2e0649dde7599877602d622a9b08e";
        }
        stReadVuidIdentityReq()
        :starId("")
        {
        }
        void resetDefautlt()
        {
            starId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starId, 0);
            _os.write(vuidList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starId, 0, false);
            _is.read(vuidList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starId,"starId");
            _ds.display(vuidList,"vuidList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(vuidList, false);
            return _os;
        }
    public:
        std::string starId;
        vector<taf::Int64> vuidList;
    };
    inline bool operator==(const stReadVuidIdentityReq&l, const stReadVuidIdentityReq&r)
    {
        return l.starId == r.starId && l.vuidList == r.vuidList;
    }
    inline bool operator!=(const stReadVuidIdentityReq&l, const stReadVuidIdentityReq&r)
    {
        return !(l == r);
    }

    struct stReadVuidIdentityRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadVuidIdentityRsp";
        }
        static string MD5()
        {
            return "228609d766db2075cbd49b53106f1afe";
        }
        stReadVuidIdentityRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vuid2identity, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(vuid2identity, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vuid2identity,"vuid2identity");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vuid2identity, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        map<taf::Int64, taf::Int32> vuid2identity;
    };
    inline bool operator==(const stReadVuidIdentityRsp&l, const stReadVuidIdentityRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.vuid2identity == r.vuid2identity;
    }
    inline bool operator!=(const stReadVuidIdentityRsp&l, const stReadVuidIdentityRsp&r)
    {
        return !(l == r);
    }

    struct stIsAllowApplyReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stIsAllowApplyReq";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        stIsAllowApplyReq()
        :starId(""),iDentityType(0)
        {
        }
        void resetDefautlt()
        {
            starId = "";
            iDentityType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starId, 0);
            _os.write(iDentityType, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starId, 0, false);
            _is.read(iDentityType, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starId,"starId");
            _ds.display(iDentityType,"iDentityType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(iDentityType, false);
            return _os;
        }
    public:
        std::string starId;
        taf::Int32 iDentityType;
    };
    inline bool operator==(const stIsAllowApplyReq&l, const stIsAllowApplyReq&r)
    {
        return l.starId == r.starId && l.iDentityType == r.iDentityType;
    }
    inline bool operator!=(const stIsAllowApplyReq&l, const stIsAllowApplyReq&r)
    {
        return !(l == r);
    }

    struct stIsAllowApplyRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stIsAllowApplyRsp";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        stIsAllowApplyRsp()
        :errCode(0),strErrMsg(""),tips("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            tips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(tips, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(tips, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(tips,"tips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(tips, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        std::string tips;
    };
    inline bool operator==(const stIsAllowApplyRsp&l, const stIsAllowApplyRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.tips == r.tips;
    }
    inline bool operator!=(const stIsAllowApplyRsp&l, const stIsAllowApplyRsp&r)
    {
        return !(l == r);
    }

    struct stApplyIdentityReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stApplyIdentityReq";
        }
        static string MD5()
        {
            return "19cfb41a66359c894f1dcce10dba2a65";
        }
        stApplyIdentityReq()
        :starId(""),iDentityType(0),reason("")
        {
        }
        void resetDefautlt()
        {
            starId = "";
            iDentityType = 0;
            reason = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(starId, 0);
            _os.write(iDentityType, 1);
            _os.write(reason, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(starId, 0, false);
            _is.read(iDentityType, 1, false);
            _is.read(reason, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(starId,"starId");
            _ds.display(iDentityType,"iDentityType");
            _ds.display(reason,"reason");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(iDentityType, true);
            _ds.displaySimple(reason, false);
            return _os;
        }
    public:
        std::string starId;
        taf::Int32 iDentityType;
        std::string reason;
    };
    inline bool operator==(const stApplyIdentityReq&l, const stApplyIdentityReq&r)
    {
        return l.starId == r.starId && l.iDentityType == r.iDentityType && l.reason == r.reason;
    }
    inline bool operator!=(const stApplyIdentityReq&l, const stApplyIdentityReq&r)
    {
        return !(l == r);
    }

    struct stApplyIdentityRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stApplyIdentityRsp";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        stApplyIdentityRsp()
        :errCode(0),strErrMsg(""),tips("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            tips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(tips, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(tips, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(tips,"tips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(tips, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        std::string tips;
    };
    inline bool operator==(const stApplyIdentityRsp&l, const stApplyIdentityRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.tips == r.tips;
    }
    inline bool operator!=(const stApplyIdentityRsp&l, const stApplyIdentityRsp&r)
    {
        return !(l == r);
    }

    struct stApplyMsgDetail : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stApplyMsgDetail";
        }
        static string MD5()
        {
            return "6eec895866460e00fa30672150997c53";
        }
        stApplyMsgDetail()
        :nickName(""),headUrl(""),ctime(0),content(""),reason(""),status(0),dataKey(""),dokiName(""),iDentityType(0),handle_reason("")
        {
        }
        void resetDefautlt()
        {
            nickName = "";
            headUrl = "";
            ctime = 0;
            content = "";
            reason = "";
            status = 0;
            dataKey = "";
            dokiName = "";
            iDentityType = 0;
            handle_reason = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(nickName, 0);
            _os.write(headUrl, 1);
            _os.write(action, 2);
            _os.write(ctime, 3);
            _os.write(content, 4);
            _os.write(reason, 5);
            _os.write(status, 6);
            _os.write(dataKey, 7);
            _os.write(dokiName, 8);
            _os.write(iDentityType, 9);
            _os.write(handle_reason, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(nickName, 0, false);
            _is.read(headUrl, 1, false);
            _is.read(action, 2, false);
            _is.read(ctime, 3, false);
            _is.read(content, 4, false);
            _is.read(reason, 5, false);
            _is.read(status, 6, false);
            _is.read(dataKey, 7, false);
            _is.read(dokiName, 8, false);
            _is.read(iDentityType, 9, false);
            _is.read(handle_reason, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(nickName,"nickName");
            _ds.display(headUrl,"headUrl");
            _ds.display(action,"action");
            _ds.display(ctime,"ctime");
            _ds.display(content,"content");
            _ds.display(reason,"reason");
            _ds.display(status,"status");
            _ds.display(dataKey,"dataKey");
            _ds.display(dokiName,"dokiName");
            _ds.display(iDentityType,"iDentityType");
            _ds.display(handle_reason,"handle_reason");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(nickName, true);
            _ds.displaySimple(headUrl, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(ctime, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(reason, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(dokiName, true);
            _ds.displaySimple(iDentityType, true);
            _ds.displaySimple(handle_reason, false);
            return _os;
        }
    public:
        std::string nickName;
        std::string headUrl;
        CStarAdminPro::Action action;
        taf::Int64 ctime;
        std::string content;
        std::string reason;
        taf::Int32 status;
        std::string dataKey;
        std::string dokiName;
        taf::Int32 iDentityType;
        std::string handle_reason;
    };
    inline bool operator==(const stApplyMsgDetail&l, const stApplyMsgDetail&r)
    {
        return l.nickName == r.nickName && l.headUrl == r.headUrl && l.action == r.action && l.ctime == r.ctime && l.content == r.content && l.reason == r.reason && l.status == r.status && l.dataKey == r.dataKey && l.dokiName == r.dokiName && l.iDentityType == r.iDentityType && l.handle_reason == r.handle_reason;
    }
    inline bool operator!=(const stApplyMsgDetail&l, const stApplyMsgDetail&r)
    {
        return !(l == r);
    }

    struct stApplyMsgListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stApplyMsgListReq";
        }
        static string MD5()
        {
            return "14bdc7dcdd0ea20af83013ef5c841a8d";
        }
        stApplyMsgListReq()
        :type(0),pageContext(""),json(""),page_num(0),page_size(0),page_type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
            pageContext = "";
            json = "";
            page_num = 0;
            page_size = 0;
            page_type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(pageContext, 1);
            _os.write(json, 2);
            _os.write(page_num, 3);
            _os.write(page_size, 4);
            _os.write(page_type, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(pageContext, 1, false);
            _is.read(json, 2, false);
            _is.read(page_num, 3, false);
            _is.read(page_size, 4, false);
            _is.read(page_type, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(pageContext,"pageContext");
            _ds.display(json,"json");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            _ds.display(page_type,"page_type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(json, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, true);
            _ds.displaySimple(page_type, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string pageContext;
        std::string json;
        taf::Int32 page_num;
        taf::Int32 page_size;
        taf::Int32 page_type;
    };
    inline bool operator==(const stApplyMsgListReq&l, const stApplyMsgListReq&r)
    {
        return l.type == r.type && l.pageContext == r.pageContext && l.json == r.json && l.page_num == r.page_num && l.page_size == r.page_size && l.page_type == r.page_type;
    }
    inline bool operator!=(const stApplyMsgListReq&l, const stApplyMsgListReq&r)
    {
        return !(l == r);
    }

    struct stApplyMsgListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stApplyMsgListRsp";
        }
        static string MD5()
        {
            return "139f23d610f8ea4b3deac5f0661f9884";
        }
        stApplyMsgListRsp()
        :errCode(0),strErrMsg(""),pageContext(""),hasNextPage(true),page_num(0),page_totalNum(0),total_cnt(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            pageContext = "";
            hasNextPage = true;
            page_num = 0;
            page_totalNum = 0;
            total_cnt = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(msgList, 2);
            _os.write(pageContext, 3);
            _os.write(hasNextPage, 4);
            _os.write(page_num, 5);
            _os.write(page_totalNum, 6);
            _os.write(total_cnt, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(msgList, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(hasNextPage, 4, false);
            _is.read(page_num, 5, false);
            _is.read(page_totalNum, 6, false);
            _is.read(total_cnt, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(msgList,"msgList");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            _ds.display(total_cnt,"total_cnt");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(msgList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, true);
            _ds.displaySimple(total_cnt, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stApplyMsgDetail> msgList;
        std::string pageContext;
        taf::Bool hasNextPage;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
        taf::Int64 total_cnt;
    };
    inline bool operator==(const stApplyMsgListRsp&l, const stApplyMsgListRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.msgList == r.msgList && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum && l.total_cnt == r.total_cnt;
    }
    inline bool operator!=(const stApplyMsgListRsp&l, const stApplyMsgListRsp&r)
    {
        return !(l == r);
    }

    struct stHandleApplyMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stHandleApplyMsgReq";
        }
        static string MD5()
        {
            return "19cfb41a66359c894f1dcce10dba2a65";
        }
        stHandleApplyMsgReq()
        :dataKey(""),type(0),reason("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            type = 0;
            reason = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(type, 1);
            _os.write(reason, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, false);
            _is.read(type, 1, false);
            _is.read(reason, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(type,"type");
            _ds.display(reason,"reason");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(reason, false);
            return _os;
        }
    public:
        std::string dataKey;
        taf::Int32 type;
        std::string reason;
    };
    inline bool operator==(const stHandleApplyMsgReq&l, const stHandleApplyMsgReq&r)
    {
        return l.dataKey == r.dataKey && l.type == r.type && l.reason == r.reason;
    }
    inline bool operator!=(const stHandleApplyMsgReq&l, const stHandleApplyMsgReq&r)
    {
        return !(l == r);
    }

    struct stHandleApplyMsgRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stHandleApplyMsgRsp";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        stHandleApplyMsgRsp()
        :errCode(0),strErrMsg(""),tips("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            tips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(tips, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(tips, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(tips,"tips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(tips, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        std::string tips;
    };
    inline bool operator==(const stHandleApplyMsgRsp&l, const stHandleApplyMsgRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.tips == r.tips;
    }
    inline bool operator!=(const stHandleApplyMsgRsp&l, const stHandleApplyMsgRsp&r)
    {
        return !(l == r);
    }

    struct stCreateVideoDokiReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stCreateVideoDokiReq";
        }
        static string MD5()
        {
            return "0e8ea03c08aa0899994ed33f8da37454";
        }
        stCreateVideoDokiReq()
        :type(0),title(""),brief(""),smallPic(""),backgroundPic("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            title = "";
            brief = "";
            smallPic = "";
            backgroundPic = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(title, 1);
            _os.write(brief, 2);
            _os.write(smallPic, 3);
            _os.write(backgroundPic, 4);
            _os.write(cidVec, 5);
            _os.write(lidVec, 6);
            _os.write(labelVec, 7);
            _os.write(starIdVec, 8);
            _os.write(keyWords, 9);
            _os.write(gameIdVec, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(title, 1, false);
            _is.read(brief, 2, false);
            _is.read(smallPic, 3, false);
            _is.read(backgroundPic, 4, false);
            _is.read(cidVec, 5, false);
            _is.read(lidVec, 6, false);
            _is.read(labelVec, 7, false);
            _is.read(starIdVec, 8, false);
            _is.read(keyWords, 9, false);
            _is.read(gameIdVec, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(title,"title");
            _ds.display(brief,"brief");
            _ds.display(smallPic,"smallPic");
            _ds.display(backgroundPic,"backgroundPic");
            _ds.display(cidVec,"cidVec");
            _ds.display(lidVec,"lidVec");
            _ds.display(labelVec,"labelVec");
            _ds.display(starIdVec,"starIdVec");
            _ds.display(keyWords,"keyWords");
            _ds.display(gameIdVec,"gameIdVec");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(brief, true);
            _ds.displaySimple(smallPic, true);
            _ds.displaySimple(backgroundPic, true);
            _ds.displaySimple(cidVec, true);
            _ds.displaySimple(lidVec, true);
            _ds.displaySimple(labelVec, true);
            _ds.displaySimple(starIdVec, true);
            _ds.displaySimple(keyWords, true);
            _ds.displaySimple(gameIdVec, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string title;
        std::string brief;
        std::string smallPic;
        std::string backgroundPic;
        vector<std::string> cidVec;
        vector<std::string> lidVec;
        vector<std::string> labelVec;
        vector<std::string> starIdVec;
        vector<std::string> keyWords;
        vector<std::string> gameIdVec;
    };
    inline bool operator==(const stCreateVideoDokiReq&l, const stCreateVideoDokiReq&r)
    {
        return l.type == r.type && l.title == r.title && l.brief == r.brief && l.smallPic == r.smallPic && l.backgroundPic == r.backgroundPic && l.cidVec == r.cidVec && l.lidVec == r.lidVec && l.labelVec == r.labelVec && l.starIdVec == r.starIdVec && l.keyWords == r.keyWords && l.gameIdVec == r.gameIdVec;
    }
    inline bool operator!=(const stCreateVideoDokiReq&l, const stCreateVideoDokiReq&r)
    {
        return !(l == r);
    }

    struct stCreateVideoDokiRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stCreateVideoDokiRsp";
        }
        static string MD5()
        {
            return "813f7cf8041cfa050eef80e3a572e674";
        }
        stCreateVideoDokiRsp()
        :errCode(0),strErrMsg(""),dokiId(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            dokiId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(dokiId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(dokiId, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(dokiId,"dokiId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(dokiId, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        taf::Int64 dokiId;
    };
    inline bool operator==(const stCreateVideoDokiRsp&l, const stCreateVideoDokiRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.dokiId == r.dokiId;
    }
    inline bool operator!=(const stCreateVideoDokiRsp&l, const stCreateVideoDokiRsp&r)
    {
        return !(l == r);
    }

    struct stModifyVideoDokiReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stModifyVideoDokiReq";
        }
        static string MD5()
        {
            return "a5873d68fa7c06d1f8f7ffca2501a016";
        }
        stModifyVideoDokiReq()
        :dokiId(0),type(0),title(""),brief(""),smallPic(""),backgroundPic("")
        {
        }
        void resetDefautlt()
        {
            dokiId = 0;
            type = 0;
            title = "";
            brief = "";
            smallPic = "";
            backgroundPic = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dokiId, 0);
            _os.write(type, 1);
            _os.write(title, 2);
            _os.write(brief, 3);
            _os.write(smallPic, 4);
            _os.write(backgroundPic, 5);
            _os.write(cidVec, 6);
            _os.write(lidVec, 7);
            _os.write(labelVec, 8);
            _os.write(starIdVec, 9);
            _os.write(keyWords, 10);
            _os.write(gameIdVec, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dokiId, 0, false);
            _is.read(type, 1, false);
            _is.read(title, 2, false);
            _is.read(brief, 3, false);
            _is.read(smallPic, 4, false);
            _is.read(backgroundPic, 5, false);
            _is.read(cidVec, 6, false);
            _is.read(lidVec, 7, false);
            _is.read(labelVec, 8, false);
            _is.read(starIdVec, 9, false);
            _is.read(keyWords, 10, false);
            _is.read(gameIdVec, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dokiId,"dokiId");
            _ds.display(type,"type");
            _ds.display(title,"title");
            _ds.display(brief,"brief");
            _ds.display(smallPic,"smallPic");
            _ds.display(backgroundPic,"backgroundPic");
            _ds.display(cidVec,"cidVec");
            _ds.display(lidVec,"lidVec");
            _ds.display(labelVec,"labelVec");
            _ds.display(starIdVec,"starIdVec");
            _ds.display(keyWords,"keyWords");
            _ds.display(gameIdVec,"gameIdVec");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dokiId, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(brief, true);
            _ds.displaySimple(smallPic, true);
            _ds.displaySimple(backgroundPic, true);
            _ds.displaySimple(cidVec, true);
            _ds.displaySimple(lidVec, true);
            _ds.displaySimple(labelVec, true);
            _ds.displaySimple(starIdVec, true);
            _ds.displaySimple(keyWords, true);
            _ds.displaySimple(gameIdVec, false);
            return _os;
        }
    public:
        taf::Int64 dokiId;
        taf::Int32 type;
        std::string title;
        std::string brief;
        std::string smallPic;
        std::string backgroundPic;
        vector<std::string> cidVec;
        vector<std::string> lidVec;
        vector<std::string> labelVec;
        vector<std::string> starIdVec;
        vector<std::string> keyWords;
        vector<std::string> gameIdVec;
    };
    inline bool operator==(const stModifyVideoDokiReq&l, const stModifyVideoDokiReq&r)
    {
        return l.dokiId == r.dokiId && l.type == r.type && l.title == r.title && l.brief == r.brief && l.smallPic == r.smallPic && l.backgroundPic == r.backgroundPic && l.cidVec == r.cidVec && l.lidVec == r.lidVec && l.labelVec == r.labelVec && l.starIdVec == r.starIdVec && l.keyWords == r.keyWords && l.gameIdVec == r.gameIdVec;
    }
    inline bool operator!=(const stModifyVideoDokiReq&l, const stModifyVideoDokiReq&r)
    {
        return !(l == r);
    }

    struct stModifyVideoDokiRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stModifyVideoDokiRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stModifyVideoDokiRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stModifyVideoDokiRsp&l, const stModifyVideoDokiRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stModifyVideoDokiRsp&l, const stModifyVideoDokiRsp&r)
    {
        return !(l == r);
    }

    struct stVideoDokiDetail : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stVideoDokiDetail";
        }
        static string MD5()
        {
            return "79a0433093bc392ebda742d2d1fd9c8f";
        }
        stVideoDokiDetail()
        :dokiId(0),type(0),title(""),brief(""),smallPic(""),backgroundPic(""),status(0)
        {
        }
        void resetDefautlt()
        {
            dokiId = 0;
            type = 0;
            title = "";
            brief = "";
            smallPic = "";
            backgroundPic = "";
            status = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dokiId, 0);
            _os.write(type, 1);
            _os.write(title, 2);
            _os.write(brief, 3);
            _os.write(smallPic, 4);
            _os.write(backgroundPic, 5);
            _os.write(cidInfoVec, 6);
            _os.write(lidInfoVec, 7);
            _os.write(starInfoVec, 8);
            _os.write(labelInfoVec, 9);
            _os.write(status, 10);
            _os.write(keyWords, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dokiId, 0, true);
            _is.read(type, 1, false);
            _is.read(title, 2, false);
            _is.read(brief, 3, false);
            _is.read(smallPic, 4, false);
            _is.read(backgroundPic, 5, false);
            _is.read(cidInfoVec, 6, false);
            _is.read(lidInfoVec, 7, false);
            _is.read(starInfoVec, 8, false);
            _is.read(labelInfoVec, 9, false);
            _is.read(status, 10, false);
            _is.read(keyWords, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dokiId,"dokiId");
            _ds.display(type,"type");
            _ds.display(title,"title");
            _ds.display(brief,"brief");
            _ds.display(smallPic,"smallPic");
            _ds.display(backgroundPic,"backgroundPic");
            _ds.display(cidInfoVec,"cidInfoVec");
            _ds.display(lidInfoVec,"lidInfoVec");
            _ds.display(starInfoVec,"starInfoVec");
            _ds.display(labelInfoVec,"labelInfoVec");
            _ds.display(status,"status");
            _ds.display(keyWords,"keyWords");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dokiId, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(brief, true);
            _ds.displaySimple(smallPic, true);
            _ds.displaySimple(backgroundPic, true);
            _ds.displaySimple(cidInfoVec, true);
            _ds.displaySimple(lidInfoVec, true);
            _ds.displaySimple(starInfoVec, true);
            _ds.displaySimple(labelInfoVec, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(keyWords, false);
            return _os;
        }
    public:
        taf::Int64 dokiId;
        taf::Int32 type;
        std::string title;
        std::string brief;
        std::string smallPic;
        std::string backgroundPic;
        vector<CStarAdminPro::stCidInfo> cidInfoVec;
        vector<CStarAdminPro::stLidInfo> lidInfoVec;
        vector<CStarAdminPro::stStarInfo> starInfoVec;
        vector<CStarAdminPro::stLabelInfo> labelInfoVec;
        taf::Int32 status;
        vector<std::string> keyWords;
    };
    inline bool operator==(const stVideoDokiDetail&l, const stVideoDokiDetail&r)
    {
        return l.dokiId == r.dokiId && l.type == r.type && l.title == r.title && l.brief == r.brief && l.smallPic == r.smallPic && l.backgroundPic == r.backgroundPic && l.cidInfoVec == r.cidInfoVec && l.lidInfoVec == r.lidInfoVec && l.starInfoVec == r.starInfoVec && l.labelInfoVec == r.labelInfoVec && l.status == r.status && l.keyWords == r.keyWords;
    }
    inline bool operator!=(const stVideoDokiDetail&l, const stVideoDokiDetail&r)
    {
        return !(l == r);
    }

    struct stVideoDokiListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stVideoDokiListReq";
        }
        static string MD5()
        {
            return "9bda4ac16227127f47ea815aed6f8d9e";
        }
        stVideoDokiListReq()
        :dataKey(""),page_num(0),page_size(0)
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            page_num = 0;
            page_size = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(page_num, 1);
            _os.write(page_size, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, false);
            _is.read(page_num, 1, false);
            _is.read(page_size, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, false);
            return _os;
        }
    public:
        std::string dataKey;
        taf::Int32 page_num;
        taf::Int32 page_size;
    };
    inline bool operator==(const stVideoDokiListReq&l, const stVideoDokiListReq&r)
    {
        return l.dataKey == r.dataKey && l.page_num == r.page_num && l.page_size == r.page_size;
    }
    inline bool operator!=(const stVideoDokiListReq&l, const stVideoDokiListReq&r)
    {
        return !(l == r);
    }

    struct stVideoDokiListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stVideoDokiListRsp";
        }
        static string MD5()
        {
            return "fd19d62cd98635638b337bcf54a4984b";
        }
        stVideoDokiListRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(detailVec, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(detailVec, 2, false);
            _is.read(page_num, 3, true);
            _is.read(page_totalNum, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(detailVec,"detailVec");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(detailVec, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stVideoDokiDetail> detailVec;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stVideoDokiListRsp&l, const stVideoDokiListRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.detailVec == r.detailVec && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stVideoDokiListRsp&l, const stVideoDokiListRsp&r)
    {
        return !(l == r);
    }

    struct stVideoDokiDetailReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stVideoDokiDetailReq";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        stVideoDokiDetailReq()
        :dokiId(0)
        {
        }
        void resetDefautlt()
        {
            dokiId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dokiId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dokiId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dokiId,"dokiId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dokiId, false);
            return _os;
        }
    public:
        taf::Int64 dokiId;
    };
    inline bool operator==(const stVideoDokiDetailReq&l, const stVideoDokiDetailReq&r)
    {
        return l.dokiId == r.dokiId;
    }
    inline bool operator!=(const stVideoDokiDetailReq&l, const stVideoDokiDetailReq&r)
    {
        return !(l == r);
    }

    struct stVideoDokiDetailRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stVideoDokiDetailRsp";
        }
        static string MD5()
        {
            return "feead380ed72ef089738972b77a3461b";
        }
        stVideoDokiDetailRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(detail, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(detail, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(detail,"detail");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(detail, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        CStarAdminPro::stVideoDokiDetail detail;
    };
    inline bool operator==(const stVideoDokiDetailRsp&l, const stVideoDokiDetailRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.detail == r.detail;
    }
    inline bool operator!=(const stVideoDokiDetailRsp&l, const stVideoDokiDetailRsp&r)
    {
        return !(l == r);
    }

    struct stDokiAutoPullReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDokiAutoPullReq";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stDokiAutoPullReq()
        :type(0),id("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            id = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(id, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(id, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(id,"id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(id, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string id;
    };
    inline bool operator==(const stDokiAutoPullReq&l, const stDokiAutoPullReq&r)
    {
        return l.type == r.type && l.id == r.id;
    }
    inline bool operator!=(const stDokiAutoPullReq&l, const stDokiAutoPullReq&r)
    {
        return !(l == r);
    }

    struct stDokiAutoPullRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDokiAutoPullRsp";
        }
        static string MD5()
        {
            return "d705b35f82f4276defdc38c9c76d84b9";
        }
        stDokiAutoPullRsp()
        :errCode(0),strErrMsg(""),title(""),smallPic(""),backgroundPic(""),type(0),tips("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            title = "";
            smallPic = "";
            backgroundPic = "";
            type = 0;
            tips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(title, 2);
            _os.write(smallPic, 3);
            _os.write(backgroundPic, 4);
            _os.write(starInfoVec, 5);
            _os.write(labelInfoVec, 6);
            _os.write(type, 7);
            _os.write(tips, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(title, 2, false);
            _is.read(smallPic, 3, false);
            _is.read(backgroundPic, 4, false);
            _is.read(starInfoVec, 5, false);
            _is.read(labelInfoVec, 6, false);
            _is.read(type, 7, false);
            _is.read(tips, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(title,"title");
            _ds.display(smallPic,"smallPic");
            _ds.display(backgroundPic,"backgroundPic");
            _ds.display(starInfoVec,"starInfoVec");
            _ds.display(labelInfoVec,"labelInfoVec");
            _ds.display(type,"type");
            _ds.display(tips,"tips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(smallPic, true);
            _ds.displaySimple(backgroundPic, true);
            _ds.displaySimple(starInfoVec, true);
            _ds.displaySimple(labelInfoVec, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(tips, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        std::string title;
        std::string smallPic;
        std::string backgroundPic;
        vector<CStarAdminPro::stStarInfo> starInfoVec;
        vector<CStarAdminPro::stLabelInfo> labelInfoVec;
        taf::Int32 type;
        std::string tips;
    };
    inline bool operator==(const stDokiAutoPullRsp&l, const stDokiAutoPullRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.title == r.title && l.smallPic == r.smallPic && l.backgroundPic == r.backgroundPic && l.starInfoVec == r.starInfoVec && l.labelInfoVec == r.labelInfoVec && l.type == r.type && l.tips == r.tips;
    }
    inline bool operator!=(const stDokiAutoPullRsp&l, const stDokiAutoPullRsp&r)
    {
        return !(l == r);
    }

    struct stOperateVideoDokiReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperateVideoDokiReq";
        }
        static string MD5()
        {
            return "309782aed2f570cb74841a7d410ade2f";
        }
        stOperateVideoDokiReq()
        :type(0),dokiId(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
            dokiId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(dokiId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(dokiId, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(dokiId,"dokiId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(dokiId, false);
            return _os;
        }
    public:
        taf::Int32 type;
        taf::Int64 dokiId;
    };
    inline bool operator==(const stOperateVideoDokiReq&l, const stOperateVideoDokiReq&r)
    {
        return l.type == r.type && l.dokiId == r.dokiId;
    }
    inline bool operator!=(const stOperateVideoDokiReq&l, const stOperateVideoDokiReq&r)
    {
        return !(l == r);
    }

    struct stOperateVideoDokiRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperateVideoDokiRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stOperateVideoDokiRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stOperateVideoDokiRsp&l, const stOperateVideoDokiRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stOperateVideoDokiRsp&l, const stOperateVideoDokiRsp&r)
    {
        return !(l == r);
    }

    struct stDraftDetail : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDraftDetail";
        }
        static string MD5()
        {
            return "3122b5fcbd9166c2d29069ab62b9ab64";
        }
        stDraftDetail()
        :id(0),type(0),content(""),pub_time(0),status(0)
        {
        }
        void resetDefautlt()
        {
            id = 0;
            type = 0;
            content = "";
            pub_time = 0;
            status = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(type, 1);
            _os.write(content, 2);
            _os.write(pub_time, 3);
            _os.write(status, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, false);
            _is.read(type, 1, false);
            _is.read(content, 2, false);
            _is.read(pub_time, 3, false);
            _is.read(status, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(type,"type");
            _ds.display(content,"content");
            _ds.display(pub_time,"pub_time");
            _ds.display(status,"status");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(pub_time, true);
            _ds.displaySimple(status, false);
            return _os;
        }
    public:
        taf::Int64 id;
        taf::Int32 type;
        std::string content;
        taf::Int64 pub_time;
        taf::Int32 status;
    };
    inline bool operator==(const stDraftDetail&l, const stDraftDetail&r)
    {
        return l.id == r.id && l.type == r.type && l.content == r.content && l.pub_time == r.pub_time && l.status == r.status;
    }
    inline bool operator!=(const stDraftDetail&l, const stDraftDetail&r)
    {
        return !(l == r);
    }

    struct stSaveDraftReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stSaveDraftReq";
        }
        static string MD5()
        {
            return "186fc688dfdd5451ebe6bf42a5a256d4";
        }
        stSaveDraftReq()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(draft, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(draft, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(draft,"draft");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(draft, false);
            return _os;
        }
    public:
        CStarAdminPro::stDraftDetail draft;
    };
    inline bool operator==(const stSaveDraftReq&l, const stSaveDraftReq&r)
    {
        return l.draft == r.draft;
    }
    inline bool operator!=(const stSaveDraftReq&l, const stSaveDraftReq&r)
    {
        return !(l == r);
    }

    struct stSaveDraftRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stSaveDraftRsp";
        }
        static string MD5()
        {
            return "813f7cf8041cfa050eef80e3a572e674";
        }
        stSaveDraftRsp()
        :errCode(0),strErrMsg(""),id(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            id = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(id, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(id, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(id,"id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(id, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        taf::Int64 id;
    };
    inline bool operator==(const stSaveDraftRsp&l, const stSaveDraftRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.id == r.id;
    }
    inline bool operator!=(const stSaveDraftRsp&l, const stSaveDraftRsp&r)
    {
        return !(l == r);
    }

    struct stDeleteDraftReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDeleteDraftReq";
        }
        static string MD5()
        {
            return "67803168b2c61e33943958e9080ca892";
        }
        stDeleteDraftReq()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ids, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ids, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ids,"ids");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ids, false);
            return _os;
        }
    public:
        vector<taf::Int64> ids;
    };
    inline bool operator==(const stDeleteDraftReq&l, const stDeleteDraftReq&r)
    {
        return l.ids == r.ids;
    }
    inline bool operator!=(const stDeleteDraftReq&l, const stDeleteDraftReq&r)
    {
        return !(l == r);
    }

    struct stDeleteDraftRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDeleteDraftRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stDeleteDraftRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stDeleteDraftRsp&l, const stDeleteDraftRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stDeleteDraftRsp&l, const stDeleteDraftRsp&r)
    {
        return !(l == r);
    }

    struct stDraftListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDraftListReq";
        }
        static string MD5()
        {
            return "fe3b74a9bc8fe9b14c77c67ae5e1918a";
        }
        stDraftListReq()
        :type(0),page_num(0),page_size(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
            page_num = 0;
            page_size = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(page_num, 1);
            _os.write(page_size, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(page_num, 1, false);
            _is.read(page_size, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, false);
            return _os;
        }
    public:
        taf::Int32 type;
        taf::Int32 page_num;
        taf::Int32 page_size;
    };
    inline bool operator==(const stDraftListReq&l, const stDraftListReq&r)
    {
        return l.type == r.type && l.page_num == r.page_num && l.page_size == r.page_size;
    }
    inline bool operator!=(const stDraftListReq&l, const stDraftListReq&r)
    {
        return !(l == r);
    }

    struct stDraftListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDraftListRsp";
        }
        static string MD5()
        {
            return "2a07b7db274982ee158cc0d3e43815df";
        }
        stDraftListRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(list, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(list, 2, false);
            _is.read(page_num, 3, false);
            _is.read(page_totalNum, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(list,"list");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(list, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stDraftDetail> list;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stDraftListRsp&l, const stDraftListRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.list == r.list && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stDraftListRsp&l, const stDraftListRsp&r)
    {
        return !(l == r);
    }

    struct stOperFlowListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperFlowListReq";
        }
        static string MD5()
        {
            return "9bda4ac16227127f47ea815aed6f8d9e";
        }
        stOperFlowListReq()
        :json(""),page_num(0),page_size(0)
        {
        }
        void resetDefautlt()
        {
            json = "";
            page_num = 0;
            page_size = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(json, 0);
            _os.write(page_num, 1);
            _os.write(page_size, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(json, 0, false);
            _is.read(page_num, 1, false);
            _is.read(page_size, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(json,"json");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(json, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, false);
            return _os;
        }
    public:
        std::string json;
        taf::Int32 page_num;
        taf::Int32 page_size;
    };
    inline bool operator==(const stOperFlowListReq&l, const stOperFlowListReq&r)
    {
        return l.json == r.json && l.page_num == r.page_num && l.page_size == r.page_size;
    }
    inline bool operator!=(const stOperFlowListReq&l, const stOperFlowListReq&r)
    {
        return !(l == r);
    }

    struct stOperFlowListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperFlowListRsp";
        }
        static string MD5()
        {
            return "53739f8e0be2708ad1a11b96e032442c";
        }
        stOperFlowListRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(list, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(list, 2, false);
            _is.read(page_num, 3, false);
            _is.read(page_totalNum, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(list,"list");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(list, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<std::string> list;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stOperFlowListRsp&l, const stOperFlowListRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.list == r.list && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stOperFlowListRsp&l, const stOperFlowListRsp&r)
    {
        return !(l == r);
    }

    struct stUpdateExportStatusReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stUpdateExportStatusReq";
        }
        static string MD5()
        {
            return "f579325158696c842da2f6ec5e2adad0";
        }
        stUpdateExportStatusReq()
        :bit_value(0),scene("")
        {
        }
        void resetDefautlt()
        {
            bit_value = 0;
            scene = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bit_value, 0);
            _os.write(ids, 1);
            _os.write(scene, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bit_value, 0, false);
            _is.read(ids, 1, false);
            _is.read(scene, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bit_value,"bit_value");
            _ds.display(ids,"ids");
            _ds.display(scene,"scene");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bit_value, true);
            _ds.displaySimple(ids, true);
            _ds.displaySimple(scene, false);
            return _os;
        }
    public:
        taf::Int32 bit_value;
        vector<std::string> ids;
        std::string scene;
    };
    inline bool operator==(const stUpdateExportStatusReq&l, const stUpdateExportStatusReq&r)
    {
        return l.bit_value == r.bit_value && l.ids == r.ids && l.scene == r.scene;
    }
    inline bool operator!=(const stUpdateExportStatusReq&l, const stUpdateExportStatusReq&r)
    {
        return !(l == r);
    }

    struct stUpdateExportStatusRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stUpdateExportStatusRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stUpdateExportStatusRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
    };
    inline bool operator==(const stUpdateExportStatusRsp&l, const stUpdateExportStatusRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const stUpdateExportStatusRsp&l, const stUpdateExportStatusRsp&r)
    {
        return !(l == r);
    }

    struct stDokiBrief : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stDokiBrief";
        }
        static string MD5()
        {
            return "78b6a44b34e9a2d20658ad126f7dab87";
        }
        stDokiBrief()
        :id(0),data_export(0)
        {
        }
        void resetDefautlt()
        {
            id = 0;
            data_export = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(cids, 1);
            _os.write(lids, 2);
            _os.write(data_export, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, false);
            _is.read(cids, 1, false);
            _is.read(lids, 2, false);
            _is.read(data_export, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(cids,"cids");
            _ds.display(lids,"lids");
            _ds.display(data_export,"data_export");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(cids, true);
            _ds.displaySimple(lids, true);
            _ds.displaySimple(data_export, false);
            return _os;
        }
    public:
        taf::Int64 id;
        vector<std::string> cids;
        vector<std::string> lids;
        taf::Int32 data_export;
    };
    inline bool operator==(const stDokiBrief&l, const stDokiBrief&r)
    {
        return l.id == r.id && l.cids == r.cids && l.lids == r.lids && l.data_export == r.data_export;
    }
    inline bool operator!=(const stDokiBrief&l, const stDokiBrief&r)
    {
        return !(l == r);
    }

    struct stNeedExportDokiListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stNeedExportDokiListReq";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        stNeedExportDokiListReq()
        :bit_value(0),bit_result(0)
        {
        }
        void resetDefautlt()
        {
            bit_value = 0;
            bit_result = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bit_value, 0);
            _os.write(bit_result, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bit_value, 0, false);
            _is.read(bit_result, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bit_value,"bit_value");
            _ds.display(bit_result,"bit_result");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bit_value, true);
            _ds.displaySimple(bit_result, false);
            return _os;
        }
    public:
        taf::Int32 bit_value;
        taf::Int32 bit_result;
    };
    inline bool operator==(const stNeedExportDokiListReq&l, const stNeedExportDokiListReq&r)
    {
        return l.bit_value == r.bit_value && l.bit_result == r.bit_result;
    }
    inline bool operator!=(const stNeedExportDokiListReq&l, const stNeedExportDokiListReq&r)
    {
        return !(l == r);
    }

    struct stNeedExportDokiListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stNeedExportDokiListRsp";
        }
        static string MD5()
        {
            return "4a3567894a7da4675be1cd8d1d90b232";
        }
        stNeedExportDokiListRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(list, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(list, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(list,"list");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(list, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::stDokiBrief> list;
    };
    inline bool operator==(const stNeedExportDokiListRsp&l, const stNeedExportDokiListRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.list == r.list;
    }
    inline bool operator!=(const stNeedExportDokiListRsp&l, const stNeedExportDokiListRsp&r)
    {
        return !(l == r);
    }

    struct stFeedQueryListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stFeedQueryListReq";
        }
        static string MD5()
        {
            return "31b837dee0e3f970aa2d14771bf49d74";
        }
        stFeedQueryListReq()
        :json(""),page_num(0),page_size(0),type(0)
        {
        }
        void resetDefautlt()
        {
            json = "";
            page_num = 0;
            page_size = 0;
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(json, 0);
            _os.write(page_num, 1);
            _os.write(page_size, 2);
            _os.write(type, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(json, 0, false);
            _is.read(page_num, 1, false);
            _is.read(page_size, 2, false);
            _is.read(type, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(json,"json");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(json, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        std::string json;
        taf::Int32 page_num;
        taf::Int32 page_size;
        taf::Int32 type;
    };
    inline bool operator==(const stFeedQueryListReq&l, const stFeedQueryListReq&r)
    {
        return l.json == r.json && l.page_num == r.page_num && l.page_size == r.page_size && l.type == r.type;
    }
    inline bool operator!=(const stFeedQueryListReq&l, const stFeedQueryListReq&r)
    {
        return !(l == r);
    }

    struct stFeedQueryListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stFeedQueryListRsp";
        }
        static string MD5()
        {
            return "0dfac56819e08092817aaa270f5138d1";
        }
        stFeedQueryListRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0),total_cnt(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
            total_cnt = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(list, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
            _os.write(total_cnt, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(list, 2, false);
            _is.read(page_num, 3, false);
            _is.read(page_totalNum, 4, false);
            _is.read(total_cnt, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(list,"list");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            _ds.display(total_cnt,"total_cnt");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(list, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, true);
            _ds.displaySimple(total_cnt, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<std::string> list;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
        taf::Int64 total_cnt;
    };
    inline bool operator==(const stFeedQueryListRsp&l, const stFeedQueryListRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.list == r.list && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum && l.total_cnt == r.total_cnt;
    }
    inline bool operator!=(const stFeedQueryListRsp&l, const stFeedQueryListRsp&r)
    {
        return !(l == r);
    }

    struct stOffNoteTransInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOffNoteTransInfo";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        stOffNoteTransInfo()
        :dateKey("")
        {
        }
        void resetDefautlt()
        {
            dateKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dateKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dateKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dateKey,"dateKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dateKey, false);
            return _os;
        }
    public:
        std::string dateKey;
    };
    inline bool operator==(const stOffNoteTransInfo&l, const stOffNoteTransInfo&r)
    {
        return l.dateKey == r.dateKey;
    }
    inline bool operator!=(const stOffNoteTransInfo&l, const stOffNoteTransInfo&r)
    {
        return !(l == r);
    }

    struct stRelationQueryReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stRelationQueryReq";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stRelationQueryReq()
        :type(0),id("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            id = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(id, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(id, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(id,"id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(id, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string id;
    };
    inline bool operator==(const stRelationQueryReq&l, const stRelationQueryReq&r)
    {
        return l.type == r.type && l.id == r.id;
    }
    inline bool operator!=(const stRelationQueryReq&l, const stRelationQueryReq&r)
    {
        return !(l == r);
    }

    struct stRelationQueryRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stRelationQueryRsp";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        stRelationQueryRsp()
        :errCode(0),strErrMsg(""),id("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            id = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(id, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(id, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(id,"id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(id, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        std::string id;
    };
    inline bool operator==(const stRelationQueryRsp&l, const stRelationQueryRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.id == r.id;
    }
    inline bool operator!=(const stRelationQueryRsp&l, const stRelationQueryRsp&r)
    {
        return !(l == r);
    }

    struct stOperListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperListReq";
        }
        static string MD5()
        {
            return "9bda4ac16227127f47ea815aed6f8d9e";
        }
        stOperListReq()
        :json(""),page_num(0),page_size(0)
        {
        }
        void resetDefautlt()
        {
            json = "";
            page_num = 0;
            page_size = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(json, 0);
            _os.write(page_num, 1);
            _os.write(page_size, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(json, 0, false);
            _is.read(page_num, 1, false);
            _is.read(page_size, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(json,"json");
            _ds.display(page_num,"page_num");
            _ds.display(page_size,"page_size");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(json, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_size, false);
            return _os;
        }
    public:
        std::string json;
        taf::Int32 page_num;
        taf::Int32 page_size;
    };
    inline bool operator==(const stOperListReq&l, const stOperListReq&r)
    {
        return l.json == r.json && l.page_num == r.page_num && l.page_size == r.page_size;
    }
    inline bool operator!=(const stOperListReq&l, const stOperListReq&r)
    {
        return !(l == r);
    }

    struct stOperListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stOperListRsp";
        }
        static string MD5()
        {
            return "53739f8e0be2708ad1a11b96e032442c";
        }
        stOperListRsp()
        :errCode(0),strErrMsg(""),page_num(0),page_totalNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            page_num = 0;
            page_totalNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(list, 2);
            _os.write(page_num, 3);
            _os.write(page_totalNum, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(list, 2, false);
            _is.read(page_num, 3, false);
            _is.read(page_totalNum, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(list,"list");
            _ds.display(page_num,"page_num");
            _ds.display(page_totalNum,"page_totalNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(list, true);
            _ds.displaySimple(page_num, true);
            _ds.displaySimple(page_totalNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<std::string> list;
        taf::Int32 page_num;
        taf::Int32 page_totalNum;
    };
    inline bool operator==(const stOperListRsp&l, const stOperListRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.list == r.list && l.page_num == r.page_num && l.page_totalNum == r.page_totalNum;
    }
    inline bool operator!=(const stOperListRsp&l, const stOperListRsp&r)
    {
        return !(l == r);
    }

    struct stReadVuidStatusReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadVuidStatusReq";
        }
        static string MD5()
        {
            return "75fdaf362faa7ce8d3ed30a3e9fb79d3";
        }
        stReadVuidStatusReq()
        :vuid(0)
        {
        }
        void resetDefautlt()
        {
            vuid = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vuid, 0);
            _os.write(ftIds, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vuid, 0, false);
            _is.read(ftIds, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vuid,"vuid");
            _ds.display(ftIds,"ftIds");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vuid, true);
            _ds.displaySimple(ftIds, false);
            return _os;
        }
    public:
        taf::Int64 vuid;
        vector<std::string> ftIds;
    };
    inline bool operator==(const stReadVuidStatusReq&l, const stReadVuidStatusReq&r)
    {
        return l.vuid == r.vuid && l.ftIds == r.ftIds;
    }
    inline bool operator!=(const stReadVuidStatusReq&l, const stReadVuidStatusReq&r)
    {
        return !(l == r);
    }

    struct stReadVuidStatusRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadVuidStatusRsp";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        stReadVuidStatusRsp()
        :errCode(0),strErrMsg(""),tips("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            tips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(tips, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(tips, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(tips,"tips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(tips, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        std::string tips;
    };
    inline bool operator==(const stReadVuidStatusRsp&l, const stReadVuidStatusRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.tips == r.tips;
    }
    inline bool operator!=(const stReadVuidStatusRsp&l, const stReadVuidStatusRsp&r)
    {
        return !(l == r);
    }

    struct stReadTopRankReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadTopRankReq";
        }
        static string MD5()
        {
            return "5776fd7103fcea055637c7e8b9708bb0";
        }
        stReadTopRankReq()
        :type(0),strKey(""),bitmap(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
            strKey = "";
            bitmap = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(strKey, 1);
            _os.write(bitmap, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(strKey, 1, false);
            _is.read(bitmap, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(strKey,"strKey");
            _ds.display(bitmap,"bitmap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(strKey, true);
            _ds.displaySimple(bitmap, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string strKey;
        taf::Int32 bitmap;
    };
    inline bool operator==(const stReadTopRankReq&l, const stReadTopRankReq&r)
    {
        return l.type == r.type && l.strKey == r.strKey && l.bitmap == r.bitmap;
    }
    inline bool operator!=(const stReadTopRankReq&l, const stReadTopRankReq&r)
    {
        return !(l == r);
    }

    struct stReadTopRankRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stReadTopRankRsp";
        }
        static string MD5()
        {
            return "0def593796943d5367eabf301fa3a7f9";
        }
        stReadTopRankRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(rank_map, 2);
            _os.write(feedIds, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(rank_map, 2, false);
            _is.read(feedIds, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(rank_map,"rank_map");
            _ds.display(feedIds,"feedIds");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(rank_map, true);
            _ds.displaySimple(feedIds, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        map<std::string, taf::Int32> rank_map;
        vector<std::string> feedIds;
    };
    inline bool operator==(const stReadTopRankRsp&l, const stReadTopRankRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.rank_map == r.rank_map && l.feedIds == r.feedIds;
    }
    inline bool operator!=(const stReadTopRankRsp&l, const stReadTopRankRsp&r)
    {
        return !(l == r);
    }

    struct stApplyOmVuidReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stApplyOmVuidReq";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        stApplyOmVuidReq()
        :source(0),strKey("")
        {
        }
        void resetDefautlt()
        {
            source = 0;
            strKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(source, 0);
            _os.write(strKey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(source, 0, false);
            _is.read(strKey, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(source,"source");
            _ds.display(strKey,"strKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(source, true);
            _ds.displaySimple(strKey, false);
            return _os;
        }
    public:
        taf::Int32 source;
        std::string strKey;
    };
    inline bool operator==(const stApplyOmVuidReq&l, const stApplyOmVuidReq&r)
    {
        return l.source == r.source && l.strKey == r.strKey;
    }
    inline bool operator!=(const stApplyOmVuidReq&l, const stApplyOmVuidReq&r)
    {
        return !(l == r);
    }

    struct stApplyOmVuidRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stApplyOmVuidRsp";
        }
        static string MD5()
        {
            return "813f7cf8041cfa050eef80e3a572e674";
        }
        stApplyOmVuidRsp()
        :errCode(0),strErrMsg(""),vuid(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            vuid = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vuid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(vuid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vuid,"vuid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vuid, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        taf::Int64 vuid;
    };
    inline bool operator==(const stApplyOmVuidRsp&l, const stApplyOmVuidRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.vuid == r.vuid;
    }
    inline bool operator!=(const stApplyOmVuidRsp&l, const stApplyOmVuidRsp&r)
    {
        return !(l == r);
    }

    struct stRelayFeedOper : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.stRelayFeedOper";
        }
        static string MD5()
        {
            return "6407d2a7c4a752c53ebccc920eaebdb6";
        }
        stRelayFeedOper()
        :feedid(""),dokiid(""),operatorVuid(0),authorVuid(0),oper(0),identityType(CStarAdminPro::IDENTITY_CREATOR),opertime(0),scene(0),picUrl("")
        {
        }
        void resetDefautlt()
        {
            feedid = "";
            dokiid = "";
            operatorVuid = 0;
            authorVuid = 0;
            oper = 0;
            opertime = 0;
            scene = 0;
            picUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedid, 0);
            _os.write(dokiid, 1);
            _os.write(operatorVuid, 2);
            _os.write(authorVuid, 3);
            _os.write(oper, 4);
            _os.write((taf::Int32)identityType, 5);
            _os.write(opertime, 6);
            _os.write(scene, 7);
            _os.write(picUrl, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedid, 0, false);
            _is.read(dokiid, 1, false);
            _is.read(operatorVuid, 2, false);
            _is.read(authorVuid, 3, false);
            _is.read(oper, 4, false);
            taf::Int32 eTemp5 = CStarAdminPro::IDENTITY_CREATOR;
            _is.read(eTemp5, 5, false);
            identityType = (CStarAdminPro::IdentityType)eTemp5;
            _is.read(opertime, 6, false);
            _is.read(scene, 7, false);
            _is.read(picUrl, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedid,"feedid");
            _ds.display(dokiid,"dokiid");
            _ds.display(operatorVuid,"operatorVuid");
            _ds.display(authorVuid,"authorVuid");
            _ds.display(oper,"oper");
            _ds.display((taf::Int32)identityType,"identityType");
            _ds.display(opertime,"opertime");
            _ds.display(scene,"scene");
            _ds.display(picUrl,"picUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedid, true);
            _ds.displaySimple(dokiid, true);
            _ds.displaySimple(operatorVuid, true);
            _ds.displaySimple(authorVuid, true);
            _ds.displaySimple(oper, true);
            _ds.displaySimple((taf::Int32)identityType, true);
            _ds.displaySimple(opertime, true);
            _ds.displaySimple(scene, true);
            _ds.displaySimple(picUrl, false);
            return _os;
        }
    public:
        std::string feedid;
        std::string dokiid;
        taf::Int64 operatorVuid;
        taf::Int64 authorVuid;
        taf::Int64 oper;
        CStarAdminPro::IdentityType identityType;
        taf::Int64 opertime;
        taf::Int32 scene;
        std::string picUrl;
    };
    inline bool operator==(const stRelayFeedOper&l, const stRelayFeedOper&r)
    {
        return l.feedid == r.feedid && l.dokiid == r.dokiid && l.operatorVuid == r.operatorVuid && l.authorVuid == r.authorVuid && l.oper == r.oper && l.identityType == r.identityType && l.opertime == r.opertime && l.scene == r.scene && l.picUrl == r.picUrl;
    }
    inline bool operator!=(const stRelayFeedOper&l, const stRelayFeedOper&r)
    {
        return !(l == r);
    }

    struct GoodFeedInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.GoodFeedInfo";
        }
        static string MD5()
        {
            return "36030cb54098a63e08043a644ced0996";
        }
        GoodFeedInfo()
        :feedid(""),authorVuid(0),operatorVuid(0),identityType(CStarAdminPro::IDENTITY_CREATOR),opertime(0),operDateTitle(""),pic(""),title(""),picType(0),selectTime(0)
        {
        }
        void resetDefautlt()
        {
            feedid = "";
            authorVuid = 0;
            operatorVuid = 0;
            opertime = 0;
            operDateTitle = "";
            pic = "";
            title = "";
            picType = 0;
            selectTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedid, 0);
            _os.write(authorVuid, 1);
            _os.write(operatorVuid, 2);
            _os.write((taf::Int32)identityType, 3);
            _os.write(opertime, 4);
            _os.write(operDateTitle, 5);
            _os.write(pic, 6);
            _os.write(title, 7);
            _os.write(picType, 9);
            _os.write(selectTime, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedid, 0, false);
            _is.read(authorVuid, 1, false);
            _is.read(operatorVuid, 2, false);
            taf::Int32 eTemp3 = CStarAdminPro::IDENTITY_CREATOR;
            _is.read(eTemp3, 3, false);
            identityType = (CStarAdminPro::IdentityType)eTemp3;
            _is.read(opertime, 4, false);
            _is.read(operDateTitle, 5, false);
            _is.read(pic, 6, false);
            _is.read(title, 7, false);
            _is.read(picType, 9, false);
            _is.read(selectTime, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedid,"feedid");
            _ds.display(authorVuid,"authorVuid");
            _ds.display(operatorVuid,"operatorVuid");
            _ds.display((taf::Int32)identityType,"identityType");
            _ds.display(opertime,"opertime");
            _ds.display(operDateTitle,"operDateTitle");
            _ds.display(pic,"pic");
            _ds.display(title,"title");
            _ds.display(picType,"picType");
            _ds.display(selectTime,"selectTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedid, true);
            _ds.displaySimple(authorVuid, true);
            _ds.displaySimple(operatorVuid, true);
            _ds.displaySimple((taf::Int32)identityType, true);
            _ds.displaySimple(opertime, true);
            _ds.displaySimple(operDateTitle, true);
            _ds.displaySimple(pic, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(picType, true);
            _ds.displaySimple(selectTime, false);
            return _os;
        }
    public:
        std::string feedid;
        taf::Int64 authorVuid;
        taf::Int64 operatorVuid;
        CStarAdminPro::IdentityType identityType;
        taf::Int64 opertime;
        std::string operDateTitle;
        std::string pic;
        std::string title;
        taf::Int32 picType;
        taf::Int64 selectTime;
    };
    inline bool operator==(const GoodFeedInfo&l, const GoodFeedInfo&r)
    {
        return l.feedid == r.feedid && l.authorVuid == r.authorVuid && l.operatorVuid == r.operatorVuid && l.identityType == r.identityType && l.opertime == r.opertime && l.operDateTitle == r.operDateTitle && l.pic == r.pic && l.title == r.title && l.picType == r.picType && l.selectTime == r.selectTime;
    }
    inline bool operator!=(const GoodFeedInfo&l, const GoodFeedInfo&r)
    {
        return !(l == r);
    }

    struct SquareGoodFeedsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.SquareGoodFeedsRequest";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        SquareGoodFeedsRequest()
        :iScene(0),pageContext("")
        {
        }
        void resetDefautlt()
        {
            iScene = 0;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iScene, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iScene, 0, false);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iScene,"iScene");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iScene, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int32 iScene;
        std::string pageContext;
    };
    inline bool operator==(const SquareGoodFeedsRequest&l, const SquareGoodFeedsRequest&r)
    {
        return l.iScene == r.iScene && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const SquareGoodFeedsRequest&l, const SquareGoodFeedsRequest&r)
    {
        return !(l == r);
    }

    struct SquareGoodFeedsResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.SquareGoodFeedsResp";
        }
        static string MD5()
        {
            return "c68fa36d354e5396f04957674908532b";
        }
        SquareGoodFeedsResp()
        :errCode(0),strErrMsg(""),nextPageContext("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            nextPageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(feeds, 2);
            _os.write(nextPageContext, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(feeds, 2, false);
            _is.read(nextPageContext, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(feeds,"feeds");
            _ds.display(nextPageContext,"nextPageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(feeds, true);
            _ds.displaySimple(nextPageContext, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<CStarAdminPro::GoodFeedInfo> feeds;
        std::string nextPageContext;
    };
    inline bool operator==(const SquareGoodFeedsResp&l, const SquareGoodFeedsResp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.feeds == r.feeds && l.nextPageContext == r.nextPageContext;
    }
    inline bool operator!=(const SquareGoodFeedsResp&l, const SquareGoodFeedsResp&r)
    {
        return !(l == r);
    }

    struct ContentConfigureReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.ContentConfigureReq";
        }
        static string MD5()
        {
            return "9bcfaf911c12a5a140566442a651b4bf";
        }
        ContentConfigureReq()
        :type(0),starId(""),recommendCount(0),vuid("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            starId = "";
            recommendCount = 0;
            vuid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(starId, 1);
            _os.write(recommendCount, 2);
            _os.write(vuid, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(starId, 1, false);
            _is.read(recommendCount, 2, false);
            _is.read(vuid, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(starId,"starId");
            _ds.display(recommendCount,"recommendCount");
            _ds.display(vuid,"vuid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(starId, true);
            _ds.displaySimple(recommendCount, true);
            _ds.displaySimple(vuid, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string starId;
        taf::Int32 recommendCount;
        std::string vuid;
    };
    inline bool operator==(const ContentConfigureReq&l, const ContentConfigureReq&r)
    {
        return l.type == r.type && l.starId == r.starId && l.recommendCount == r.recommendCount && l.vuid == r.vuid;
    }
    inline bool operator!=(const ContentConfigureReq&l, const ContentConfigureReq&r)
    {
        return !(l == r);
    }

    struct ContentConfigureResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "CStarAdminPro.ContentConfigureResp";
        }
        static string MD5()
        {
            return "4e2a678fc881ce161d0f21377a2b62f7";
        }
        ContentConfigureResp()
        :errCode(0),strErrMsg(""),recommendCount(0),usedCount(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            recommendCount = 0;
            usedCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(recommendCount, 2);
            _os.write(usedCount, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(recommendCount, 2, false);
            _is.read(usedCount, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(recommendCount,"recommendCount");
            _ds.display(usedCount,"usedCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(recommendCount, true);
            _ds.displaySimple(usedCount, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        taf::Int32 recommendCount;
        taf::Int32 usedCount;
    };
    inline bool operator==(const ContentConfigureResp&l, const ContentConfigureResp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.recommendCount == r.recommendCount && l.usedCount == r.usedCount;
    }
    inline bool operator!=(const ContentConfigureResp&l, const ContentConfigureResp&r)
    {
        return !(l == r);
    }


}

#define CStarAdminPro_stIdentityInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starName,b.starName);jce_copy_struct(a.identityType,b.identityType);jce_copy_struct(a.strFtid,b.strFtid);

#define CStarAdminPro_stStarInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.starName,b.starName);jce_copy_struct(a.headUrl,b.headUrl);jce_copy_struct(a.strFtid,b.strFtid);

#define CStarAdminPro_stLabelInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.labelId,b.labelId);jce_copy_struct(a.labelName,b.labelName);

#define CStarAdminPro_ExtraReportKV_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.extraReportKey,b.extraReportKey);jce_copy_struct(a.extraReportParam,b.extraReportParam);

#define CStarAdminPro_Action_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.url,b.url);jce_copy_struct(a.cacheType,b.cacheType);jce_copy_struct(a.preReadType,b.preReadType);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.extraReportKVs,b.extraReportKVs);

#define CStarAdminPro_stUserInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.headPicUrl,b.headPicUrl);jce_copy_struct(a.nickName,b.nickName);jce_copy_struct(a.uid_type,b.uid_type);jce_copy_struct(a.uid,b.uid);jce_copy_struct(a.grantor_vuid,b.grantor_vuid);jce_copy_struct(a.action,b.action);jce_copy_struct(a.official_certified,b.official_certified);jce_copy_struct(a.is_train,b.is_train);jce_copy_struct(a.fans_level,b.fans_level);

#define CStarAdminPro_stUserInfo2_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vuid,b.vuid);jce_copy_struct(a.identityType,b.identityType);

#define CStarAdminPro_stVideoInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.url,b.url);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.title,b.title);jce_copy_struct(a.img,b.img);jce_copy_struct(a.tag,b.tag);

#define CStarAdminPro_stImgInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.url,b.url);jce_copy_struct(a.tag,b.tag);jce_copy_struct(a.clipUrl,b.clipUrl);jce_copy_struct(a.width,b.width);jce_copy_struct(a.height,b.height);jce_copy_struct(a.size,b.size);jce_copy_struct(a.thumbUrl,b.thumbUrl);

#define CStarAdminPro_stCidInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.title,b.title);jce_copy_struct(a.type,b.type);jce_copy_struct(a.strTypeName,b.strTypeName);

#define CStarAdminPro_stLidInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.title,b.title);jce_copy_struct(a.type,b.type);jce_copy_struct(a.strTypeName,b.strTypeName);

#define CStarAdminPro_stTopicInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.topic_id,b.topic_id);jce_copy_struct(a.title,b.title);

#define CStarAdminPro_stActivityInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.title,b.title);

#define CStarAdminPro_stSearchResult_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strResultId,b.strResultId);jce_copy_struct(a.strResultShow,b.strResultShow);jce_copy_struct(a.type,b.type);jce_copy_struct(a.strTypeName,b.strTypeName);jce_copy_struct(a.strStarType,b.strStarType);jce_copy_struct(a.strStarRemark,b.strStarRemark);jce_copy_struct(a.strStarHeadUrl,b.strStarHeadUrl);jce_copy_struct(a.strFtid,b.strFtid);

#define CStarAdminPro_stNoteDetail_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fansAdminId,b.fansAdminId);jce_copy_struct(a.title,b.title);jce_copy_struct(a.content,b.content);jce_copy_struct(a.createTime,b.createTime);jce_copy_struct(a.modifyTime,b.modifyTime);jce_copy_struct(a.readNum,b.readNum);jce_copy_struct(a.praiseNum,b.praiseNum);jce_copy_struct(a.commentNum,b.commentNum);jce_copy_struct(a.shareNum,b.shareNum);jce_copy_struct(a.source,b.source);jce_copy_struct(a.starInfoVec,b.starInfoVec);jce_copy_struct(a.photoVec,b.photoVec);jce_copy_struct(a.videoVec,b.videoVec);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.status,b.status);jce_copy_struct(a.ftNoteId,b.ftNoteId);jce_copy_struct(a.delete_reason,b.delete_reason);jce_copy_struct(a.cidInfo,b.cidInfo);jce_copy_struct(a.lidInfo,b.lidInfo);jce_copy_struct(a.category,b.category);jce_copy_struct(a.offUserInfo,b.offUserInfo);jce_copy_struct(a.topicInfo,b.topicInfo);jce_copy_struct(a.abstract,b.abstract);jce_copy_struct(a.top_type,b.top_type);

#define CStarAdminPro_stTopicDetail_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fansAdminId,b.fansAdminId);jce_copy_struct(a.title,b.title);jce_copy_struct(a.brief,b.brief);jce_copy_struct(a.createTime,b.createTime);jce_copy_struct(a.modifyTime,b.modifyTime);jce_copy_struct(a.noteNum,b.noteNum);jce_copy_struct(a.photoVec,b.photoVec);jce_copy_struct(a.status,b.status);jce_copy_struct(a.ftTopicId,b.ftTopicId);jce_copy_struct(a.starInfoVec,b.starInfoVec);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.delete_reason,b.delete_reason);jce_copy_struct(a.cidInfo,b.cidInfo);jce_copy_struct(a.lidInfo,b.lidInfo);jce_copy_struct(a.offUserInfo,b.offUserInfo);jce_copy_struct(a.type,b.type);jce_copy_struct(a.ext_json,b.ext_json);jce_copy_struct(a.activityVec,b.activityVec);jce_copy_struct(a.music_vid,b.music_vid);jce_copy_struct(a.channel_type,b.channel_type);jce_copy_struct(a.vidAttachmentId,b.vidAttachmentId);jce_copy_struct(a.enterButtonText,b.enterButtonText);

#define CStarAdminPro_stOperIdentityReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.vuid,b.vuid);jce_copy_struct(a.dokiId,b.dokiId);jce_copy_struct(a.identityType,b.identityType);

#define CStarAdminPro_stOperIdentityRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stSetIdentityReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iAccountType,b.iAccountType);jce_copy_struct(a.strAccount,b.strAccount);jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.iOpType,b.iOpType);jce_copy_struct(a.identityType,b.identityType);

#define CStarAdminPro_stSetIdentityRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stReadIdentityReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.starId,b.starId);

#define CStarAdminPro_stReadIdentityRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.iDentityType,b.iDentityType);jce_copy_struct(a.key2IdentityMap,b.key2IdentityMap);jce_copy_struct(a.userType,b.userType);

#define CStarAdminPro_stReadAllFansReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.type,b.type);

#define CStarAdminPro_stReadAllFansRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.key2IdentityMap,b.key2IdentityMap);jce_copy_struct(a.uid2UserInfoMap,b.uid2UserInfoMap);

#define CStarAdminPro_stReadAllStarReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.first_spell,b.first_spell);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);

#define CStarAdminPro_stReadAllStarRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.starInfoMap,b.starInfoMap);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);

#define CStarAdminPro_stReadAllNoteReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.flag,b.flag);jce_copy_struct(a.source,b.source);jce_copy_struct(a.starIds,b.starIds);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);

#define CStarAdminPro_stReadAllNoteRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.noteDetailVec,b.noteDetailVec);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);

#define CStarAdminPro_stReadAllTopicReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.flag,b.flag);jce_copy_struct(a.source,b.source);jce_copy_struct(a.starIds,b.starIds);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);

#define CStarAdminPro_stReadAllTopicRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.topicDetailVec,b.topicDetailVec);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);

#define CStarAdminPro_stOperTopicRankReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.topic_id,b.topic_id);jce_copy_struct(a.rank,b.rank);jce_copy_struct(a.begin_time,b.begin_time);jce_copy_struct(a.end_time,b.end_time);

#define CStarAdminPro_stOperTopicRankRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stSearchReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iSearchType,b.iSearchType);jce_copy_struct(a.strSearchKey,b.strSearchKey);jce_copy_struct(a.star_type,b.star_type);

#define CStarAdminPro_stSearchRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.resultVec,b.resultVec);

#define CStarAdminPro_stNoteSearchReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strSearchKey,b.strSearchKey);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);

#define CStarAdminPro_stNoteSearchRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.noteDetailVec,b.noteDetailVec);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);

#define CStarAdminPro_stUgcVideoInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strVid,b.strVid);jce_copy_struct(a.strPicUrl,b.strPicUrl);jce_copy_struct(a.iFlag,b.iFlag);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.strMusicVid,b.strMusicVid);jce_copy_struct(a.strMusicPicUrl,b.strMusicPicUrl);jce_copy_struct(a.strMusicTitle,b.strMusicTitle);jce_copy_struct(a.strShareId,b.strShareId);

#define CStarAdminPro_stPublishNoteReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.content,b.content);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.starIdVec,b.starIdVec);jce_copy_struct(a.topicId,b.topicId);jce_copy_struct(a.Lid,b.Lid);jce_copy_struct(a.Cid,b.Cid);jce_copy_struct(a.photoVec,b.photoVec);jce_copy_struct(a.videoVec,b.videoVec);jce_copy_struct(a.source,b.source);jce_copy_struct(a.abstract,b.abstract);jce_copy_struct(a.ctime,b.ctime);jce_copy_struct(a.type,b.type);jce_copy_struct(a.strLinkUrl,b.strLinkUrl);jce_copy_struct(a.ugcVideoInfo,b.ugcVideoInfo);

#define CStarAdminPro_stPublishNoteRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.fansAdminId,b.fansAdminId);

#define CStarAdminPro_stModifyNoteReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.title,b.title);jce_copy_struct(a.content,b.content);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.starIdVec,b.starIdVec);jce_copy_struct(a.topicId,b.topicId);jce_copy_struct(a.Lid,b.Lid);jce_copy_struct(a.Cid,b.Cid);jce_copy_struct(a.photoVec,b.photoVec);jce_copy_struct(a.videoVec,b.videoVec);jce_copy_struct(a.source,b.source);jce_copy_struct(a.abstract,b.abstract);jce_copy_struct(a.note_id,b.note_id);jce_copy_struct(a.type,b.type);jce_copy_struct(a.strLinkUrl,b.strLinkUrl);

#define CStarAdminPro_stModifyNoteRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stDelWeiboReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.content,b.content);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.starIdVec,b.starIdVec);

#define CStarAdminPro_stDelWeiboRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stMyNoteReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);

#define CStarAdminPro_stMyNoteRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.noteDetailVec,b.noteDetailVec);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);

#define CStarAdminPro_stMyStarReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);

#define CStarAdminPro_stMyStarRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.starInfoVec,b.starInfoVec);

#define CStarAdminPro_stOperateNoteReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.fansAdminId,b.fansAdminId);jce_copy_struct(a.note_id,b.note_id);jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.reason,b.reason);jce_copy_struct(a.top_type,b.top_type);jce_copy_struct(a.channelId,b.channelId);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.topicId,b.topicId);jce_copy_struct(a.ids,b.ids);jce_copy_struct(a.top_rank,b.top_rank);jce_copy_struct(a.title,b.title);jce_copy_struct(a.pic,b.pic);jce_copy_struct(a.picType,b.picType);jce_copy_struct(a.onlineTime,b.onlineTime);

#define CStarAdminPro_stOperateNoteRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stPublishTopicReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.brief,b.brief);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.photoVec,b.photoVec);jce_copy_struct(a.starIdVec,b.starIdVec);jce_copy_struct(a.Cid,b.Cid);jce_copy_struct(a.Lid,b.Lid);jce_copy_struct(a.source,b.source);jce_copy_struct(a.type,b.type);jce_copy_struct(a.ext_json,b.ext_json);jce_copy_struct(a.activityIdVec,b.activityIdVec);jce_copy_struct(a.music_vid,b.music_vid);jce_copy_struct(a.channel_type,b.channel_type);jce_copy_struct(a.vidAttachmentId,b.vidAttachmentId);jce_copy_struct(a.enterButtonText,b.enterButtonText);

#define CStarAdminPro_stPublishTopicRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.fansAdminId,b.fansAdminId);

#define CStarAdminPro_stModifyTopicReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.title,b.title);jce_copy_struct(a.brief,b.brief);jce_copy_struct(a.seq,b.seq);jce_copy_struct(a.photoVec,b.photoVec);jce_copy_struct(a.starIdVec,b.starIdVec);jce_copy_struct(a.Cid,b.Cid);jce_copy_struct(a.Lid,b.Lid);jce_copy_struct(a.source,b.source);jce_copy_struct(a.type,b.type);jce_copy_struct(a.ext_json,b.ext_json);jce_copy_struct(a.activityIdVec,b.activityIdVec);jce_copy_struct(a.music_vid,b.music_vid);jce_copy_struct(a.channel_type,b.channel_type);jce_copy_struct(a.vidAttachmentId,b.vidAttachmentId);jce_copy_struct(a.enterButtonText,b.enterButtonText);

#define CStarAdminPro_stModifyTopicRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stIsTitleExistReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.title,b.title);

#define CStarAdminPro_stIsTitleExistRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.exist,b.exist);

#define CStarAdminPro_stOperateTopicReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.fansAdminId,b.fansAdminId);jce_copy_struct(a.reason,b.reason);jce_copy_struct(a.topicId,b.topicId);

#define CStarAdminPro_stOperateTopicRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stMyTopicReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);

#define CStarAdminPro_stMyTopicRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.topicDetailVec,b.topicDetailVec);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);

#define CStarAdminPro_stStarDyncReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);jce_copy_struct(a.type,b.type);

#define CStarAdminPro_stStarDyncRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.noteDetailVec,b.noteDetailVec);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);

#define CStarAdminPro_stShortVideoInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.h5Url,b.h5Url);jce_copy_struct(a.time,b.time);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.playUrl,b.playUrl);jce_copy_struct(a.description,b.description);jce_copy_struct(a.isDemoVideo,b.isDemoVideo);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.originVid,b.originVid);jce_copy_struct(a.videoFileSize,b.videoFileSize);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.title,b.title);jce_copy_struct(a.originCid,b.originCid);

#define CStarAdminPro_stShortVideoSource_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.jumpUrl,b.jumpUrl);

#define CStarAdminPro_stFansMsgDetail_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.note_id,b.note_id);jce_copy_struct(a.title,b.title);jce_copy_struct(a.content,b.content);jce_copy_struct(a.createTime,b.createTime);jce_copy_struct(a.modifyTime,b.modifyTime);jce_copy_struct(a.readNum,b.readNum);jce_copy_struct(a.praiseNum,b.praiseNum);jce_copy_struct(a.commentNum,b.commentNum);jce_copy_struct(a.shareNum,b.shareNum);jce_copy_struct(a.source,b.source);jce_copy_struct(a.photoVec,b.photoVec);jce_copy_struct(a.shortVideoVec,b.shortVideoVec);jce_copy_struct(a.shortVideoSourceVec,b.shortVideoSourceVec);jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.status,b.status);

#define CStarAdminPro_stStarFansMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);

#define CStarAdminPro_stStarFansMsgRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.FansMsgDetailVec,b.FansMsgDetailVec);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);

#define CStarAdminPro_stOperateFansMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.note_id,b.note_id);jce_copy_struct(a.starId,b.starId);

#define CStarAdminPro_stOperateFansMsgRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stReadFeedStatusReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.vuid,b.vuid);jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.bitmap,b.bitmap);jce_copy_struct(a.topicId,b.topicId);

#define CStarAdminPro_stReadFeedStatusRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.feed_status,b.feed_status);jce_copy_struct(a.vuid_status,b.vuid_status);jce_copy_struct(a.right,b.right);jce_copy_struct(a.top_type,b.top_type);jce_copy_struct(a.operer,b.operer);

#define CStarAdminPro_stReadVuidIdentityReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.vuidList,b.vuidList);

#define CStarAdminPro_stReadVuidIdentityRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vuid2identity,b.vuid2identity);

#define CStarAdminPro_stIsAllowApplyReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.iDentityType,b.iDentityType);

#define CStarAdminPro_stIsAllowApplyRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.tips,b.tips);

#define CStarAdminPro_stApplyIdentityReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.iDentityType,b.iDentityType);jce_copy_struct(a.reason,b.reason);

#define CStarAdminPro_stApplyIdentityRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.tips,b.tips);

#define CStarAdminPro_stApplyMsgDetail_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.nickName,b.nickName);jce_copy_struct(a.headUrl,b.headUrl);jce_copy_struct(a.action,b.action);jce_copy_struct(a.ctime,b.ctime);jce_copy_struct(a.content,b.content);jce_copy_struct(a.reason,b.reason);jce_copy_struct(a.status,b.status);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.dokiName,b.dokiName);jce_copy_struct(a.iDentityType,b.iDentityType);jce_copy_struct(a.handle_reason,b.handle_reason);

#define CStarAdminPro_stApplyMsgListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.json,b.json);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);jce_copy_struct(a.page_type,b.page_type);

#define CStarAdminPro_stApplyMsgListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.msgList,b.msgList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);jce_copy_struct(a.total_cnt,b.total_cnt);

#define CStarAdminPro_stHandleApplyMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.type,b.type);jce_copy_struct(a.reason,b.reason);

#define CStarAdminPro_stHandleApplyMsgRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.tips,b.tips);

#define CStarAdminPro_stCreateVideoDokiReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.title,b.title);jce_copy_struct(a.brief,b.brief);jce_copy_struct(a.smallPic,b.smallPic);jce_copy_struct(a.backgroundPic,b.backgroundPic);jce_copy_struct(a.cidVec,b.cidVec);jce_copy_struct(a.lidVec,b.lidVec);jce_copy_struct(a.labelVec,b.labelVec);jce_copy_struct(a.starIdVec,b.starIdVec);jce_copy_struct(a.keyWords,b.keyWords);jce_copy_struct(a.gameIdVec,b.gameIdVec);

#define CStarAdminPro_stCreateVideoDokiRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.dokiId,b.dokiId);

#define CStarAdminPro_stModifyVideoDokiReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dokiId,b.dokiId);jce_copy_struct(a.type,b.type);jce_copy_struct(a.title,b.title);jce_copy_struct(a.brief,b.brief);jce_copy_struct(a.smallPic,b.smallPic);jce_copy_struct(a.backgroundPic,b.backgroundPic);jce_copy_struct(a.cidVec,b.cidVec);jce_copy_struct(a.lidVec,b.lidVec);jce_copy_struct(a.labelVec,b.labelVec);jce_copy_struct(a.starIdVec,b.starIdVec);jce_copy_struct(a.keyWords,b.keyWords);jce_copy_struct(a.gameIdVec,b.gameIdVec);

#define CStarAdminPro_stModifyVideoDokiRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stVideoDokiDetail_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dokiId,b.dokiId);jce_copy_struct(a.type,b.type);jce_copy_struct(a.title,b.title);jce_copy_struct(a.brief,b.brief);jce_copy_struct(a.smallPic,b.smallPic);jce_copy_struct(a.backgroundPic,b.backgroundPic);jce_copy_struct(a.cidInfoVec,b.cidInfoVec);jce_copy_struct(a.lidInfoVec,b.lidInfoVec);jce_copy_struct(a.starInfoVec,b.starInfoVec);jce_copy_struct(a.labelInfoVec,b.labelInfoVec);jce_copy_struct(a.status,b.status);jce_copy_struct(a.keyWords,b.keyWords);

#define CStarAdminPro_stVideoDokiListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);

#define CStarAdminPro_stVideoDokiListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.detailVec,b.detailVec);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);

#define CStarAdminPro_stVideoDokiDetailReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dokiId,b.dokiId);

#define CStarAdminPro_stVideoDokiDetailRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.detail,b.detail);

#define CStarAdminPro_stDokiAutoPullReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.id,b.id);

#define CStarAdminPro_stDokiAutoPullRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.title,b.title);jce_copy_struct(a.smallPic,b.smallPic);jce_copy_struct(a.backgroundPic,b.backgroundPic);jce_copy_struct(a.starInfoVec,b.starInfoVec);jce_copy_struct(a.labelInfoVec,b.labelInfoVec);jce_copy_struct(a.type,b.type);jce_copy_struct(a.tips,b.tips);

#define CStarAdminPro_stOperateVideoDokiReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.dokiId,b.dokiId);

#define CStarAdminPro_stOperateVideoDokiRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stDraftDetail_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.type,b.type);jce_copy_struct(a.content,b.content);jce_copy_struct(a.pub_time,b.pub_time);jce_copy_struct(a.status,b.status);

#define CStarAdminPro_stSaveDraftReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.draft,b.draft);

#define CStarAdminPro_stSaveDraftRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.id,b.id);

#define CStarAdminPro_stDeleteDraftReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ids,b.ids);

#define CStarAdminPro_stDeleteDraftRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stDraftListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);

#define CStarAdminPro_stDraftListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.list,b.list);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);

#define CStarAdminPro_stOperFlowListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.json,b.json);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);

#define CStarAdminPro_stOperFlowListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.list,b.list);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);

#define CStarAdminPro_stUpdateExportStatusReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bit_value,b.bit_value);jce_copy_struct(a.ids,b.ids);jce_copy_struct(a.scene,b.scene);

#define CStarAdminPro_stUpdateExportStatusRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define CStarAdminPro_stDokiBrief_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.cids,b.cids);jce_copy_struct(a.lids,b.lids);jce_copy_struct(a.data_export,b.data_export);

#define CStarAdminPro_stNeedExportDokiListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bit_value,b.bit_value);jce_copy_struct(a.bit_result,b.bit_result);

#define CStarAdminPro_stNeedExportDokiListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.list,b.list);

#define CStarAdminPro_stFeedQueryListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.json,b.json);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);jce_copy_struct(a.type,b.type);

#define CStarAdminPro_stFeedQueryListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.list,b.list);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);jce_copy_struct(a.total_cnt,b.total_cnt);

#define CStarAdminPro_stOffNoteTransInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dateKey,b.dateKey);

#define CStarAdminPro_stRelationQueryReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.id,b.id);

#define CStarAdminPro_stRelationQueryRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.id,b.id);

#define CStarAdminPro_stOperListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.json,b.json);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_size,b.page_size);

#define CStarAdminPro_stOperListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.list,b.list);jce_copy_struct(a.page_num,b.page_num);jce_copy_struct(a.page_totalNum,b.page_totalNum);

#define CStarAdminPro_stReadVuidStatusReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vuid,b.vuid);jce_copy_struct(a.ftIds,b.ftIds);

#define CStarAdminPro_stReadVuidStatusRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.tips,b.tips);

#define CStarAdminPro_stReadTopRankReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.strKey,b.strKey);jce_copy_struct(a.bitmap,b.bitmap);

#define CStarAdminPro_stReadTopRankRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.rank_map,b.rank_map);jce_copy_struct(a.feedIds,b.feedIds);

#define CStarAdminPro_stApplyOmVuidReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.source,b.source);jce_copy_struct(a.strKey,b.strKey);

#define CStarAdminPro_stApplyOmVuidRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vuid,b.vuid);

#define CStarAdminPro_stRelayFeedOper_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedid,b.feedid);jce_copy_struct(a.dokiid,b.dokiid);jce_copy_struct(a.operatorVuid,b.operatorVuid);jce_copy_struct(a.authorVuid,b.authorVuid);jce_copy_struct(a.oper,b.oper);jce_copy_struct(a.identityType,b.identityType);jce_copy_struct(a.opertime,b.opertime);jce_copy_struct(a.scene,b.scene);jce_copy_struct(a.picUrl,b.picUrl);

#define CStarAdminPro_GoodFeedInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedid,b.feedid);jce_copy_struct(a.authorVuid,b.authorVuid);jce_copy_struct(a.operatorVuid,b.operatorVuid);jce_copy_struct(a.identityType,b.identityType);jce_copy_struct(a.opertime,b.opertime);jce_copy_struct(a.operDateTitle,b.operDateTitle);jce_copy_struct(a.pic,b.pic);jce_copy_struct(a.title,b.title);jce_copy_struct(a.picType,b.picType);jce_copy_struct(a.selectTime,b.selectTime);

#define CStarAdminPro_SquareGoodFeedsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iScene,b.iScene);jce_copy_struct(a.pageContext,b.pageContext);

#define CStarAdminPro_SquareGoodFeedsResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.feeds,b.feeds);jce_copy_struct(a.nextPageContext,b.nextPageContext);

#define CStarAdminPro_ContentConfigureReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.starId,b.starId);jce_copy_struct(a.recommendCount,b.recommendCount);jce_copy_struct(a.vuid,b.vuid);

#define CStarAdminPro_ContentConfigureResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.recommendCount,b.recommendCount);jce_copy_struct(a.usedCount,b.usedCount);



#endif
