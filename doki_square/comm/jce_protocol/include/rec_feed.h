// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `rec_feed.jce'
// **********************************************************************

#ifndef __REC_FEED_H_
#define __REC_FEED_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "rec_interface.h"


namespace MyRecFeed
{
    enum Cmd
    {
        CMD_GET_RECOMMEND = 61927,
        CMD_GET_FEEDS_CNT = 62250,
        CMD_RECALL_QUEUE = 62417,
        CMD_NEW_RECALL_QUEUE = 62541,
    };
    inline string etos(const Cmd & e)
    {
        switch(e)
        {
            case CMD_GET_RECOMMEND: return "CMD_GET_RECOMMEND";
            case CMD_GET_FEEDS_CNT: return "CMD_GET_FEEDS_CNT";
            case CMD_RECALL_QUEUE: return "CMD_RECALL_QUEUE";
            case CMD_NEW_RECALL_QUEUE: return "CMD_NEW_RECALL_QUEUE";
            default: return "";
        }
    }
    inline int stoe(const string & s, Cmd & e)
    {
        if(s == "CMD_GET_RECOMMEND")  { e=CMD_GET_RECOMMEND; return 0;}
        if(s == "CMD_GET_FEEDS_CNT")  { e=CMD_GET_FEEDS_CNT; return 0;}
        if(s == "CMD_RECALL_QUEUE")  { e=CMD_RECALL_QUEUE; return 0;}
        if(s == "CMD_NEW_RECALL_QUEUE")  { e=CMD_NEW_RECALL_QUEUE; return 0;}

        return -1;
    }

    enum RecSceneType
    {
        SCENE_NONE = 0,
        SCENE_FANS = 1,
        SCENE_TOPIC = 2,
        SCENE_DOKI = 3,
        SCENE_VIDEO = 4,
        SCENE_STAR_CARD = 5,
    };
    inline string etos(const RecSceneType & e)
    {
        switch(e)
        {
            case SCENE_NONE: return "SCENE_NONE";
            case SCENE_FANS: return "SCENE_FANS";
            case SCENE_TOPIC: return "SCENE_TOPIC";
            case SCENE_DOKI: return "SCENE_DOKI";
            case SCENE_VIDEO: return "SCENE_VIDEO";
            case SCENE_STAR_CARD: return "SCENE_STAR_CARD";
            default: return "";
        }
    }
    inline int stoe(const string & s, RecSceneType & e)
    {
        if(s == "SCENE_NONE")  { e=SCENE_NONE; return 0;}
        if(s == "SCENE_FANS")  { e=SCENE_FANS; return 0;}
        if(s == "SCENE_TOPIC")  { e=SCENE_TOPIC; return 0;}
        if(s == "SCENE_DOKI")  { e=SCENE_DOKI; return 0;}
        if(s == "SCENE_VIDEO")  { e=SCENE_VIDEO; return 0;}
        if(s == "SCENE_STAR_CARD")  { e=SCENE_STAR_CARD; return 0;}

        return -1;
    }

    enum ReasonType
    {
        REASON_NONE = 0,
        REASON_FIRST_CATE = 101,
        REASON_SECOND_CATE = 102,
        REASON_TAG = 103,
        REASON_LBS = 104,
        REASON_TITLE = 105,
        REASON_USER_GROUP = 106,
        REASON_RECALL = 107,
    };
    inline string etos(const ReasonType & e)
    {
        switch(e)
        {
            case REASON_NONE: return "REASON_NONE";
            case REASON_FIRST_CATE: return "REASON_FIRST_CATE";
            case REASON_SECOND_CATE: return "REASON_SECOND_CATE";
            case REASON_TAG: return "REASON_TAG";
            case REASON_LBS: return "REASON_LBS";
            case REASON_TITLE: return "REASON_TITLE";
            case REASON_USER_GROUP: return "REASON_USER_GROUP";
            case REASON_RECALL: return "REASON_RECALL";
            default: return "";
        }
    }
    inline int stoe(const string & s, ReasonType & e)
    {
        if(s == "REASON_NONE")  { e=REASON_NONE; return 0;}
        if(s == "REASON_FIRST_CATE")  { e=REASON_FIRST_CATE; return 0;}
        if(s == "REASON_SECOND_CATE")  { e=REASON_SECOND_CATE; return 0;}
        if(s == "REASON_TAG")  { e=REASON_TAG; return 0;}
        if(s == "REASON_LBS")  { e=REASON_LBS; return 0;}
        if(s == "REASON_TITLE")  { e=REASON_TITLE; return 0;}
        if(s == "REASON_USER_GROUP")  { e=REASON_USER_GROUP; return 0;}
        if(s == "REASON_RECALL")  { e=REASON_RECALL; return 0;}

        return -1;
    }

    enum TagType
    {
        TAG_NONE = 0,
        TAG_INTEREST_COMMON = 1,
        TAG_INTEREST_COVER = 2,
        TAG_INTEREST_STAR = 3,
    };
    inline string etos(const TagType & e)
    {
        switch(e)
        {
            case TAG_NONE: return "TAG_NONE";
            case TAG_INTEREST_COMMON: return "TAG_INTEREST_COMMON";
            case TAG_INTEREST_COVER: return "TAG_INTEREST_COVER";
            case TAG_INTEREST_STAR: return "TAG_INTEREST_STAR";
            default: return "";
        }
    }
    inline int stoe(const string & s, TagType & e)
    {
        if(s == "TAG_NONE")  { e=TAG_NONE; return 0;}
        if(s == "TAG_INTEREST_COMMON")  { e=TAG_INTEREST_COMMON; return 0;}
        if(s == "TAG_INTEREST_COVER")  { e=TAG_INTEREST_COVER; return 0;}
        if(s == "TAG_INTEREST_STAR")  { e=TAG_INTEREST_STAR; return 0;}

        return -1;
    }

    enum QueueType
    {
        QUEUE_HOT = 0,
        QUEUE_COLD = 1,
        QUEUE_REAL = 2,
        QUEUE_REPLY = 3,
    };
    inline string etos(const QueueType & e)
    {
        switch(e)
        {
            case QUEUE_HOT: return "QUEUE_HOT";
            case QUEUE_COLD: return "QUEUE_COLD";
            case QUEUE_REAL: return "QUEUE_REAL";
            case QUEUE_REPLY: return "QUEUE_REPLY";
            default: return "";
        }
    }
    inline int stoe(const string & s, QueueType & e)
    {
        if(s == "QUEUE_HOT")  { e=QUEUE_HOT; return 0;}
        if(s == "QUEUE_COLD")  { e=QUEUE_COLD; return 0;}
        if(s == "QUEUE_REAL")  { e=QUEUE_REAL; return 0;}
        if(s == "QUEUE_REPLY")  { e=QUEUE_REPLY; return 0;}

        return -1;
    }

    struct ReportInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.ReportInfo";
        }
        static string MD5()
        {
            return "4cd59081ad72a344a4189efca53c2c3b";
        }
        ReportInfo()
        :bucketId(""),algId(""),reasonType(MyRecFeed::REASON_NONE),reason("")
        {
        }
        void resetDefautlt()
        {
            bucketId = "";
            algId = "";
            reason = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bucketId, 0);
            _os.write(algId, 1);
            _os.write((taf::Int32)reasonType, 2);
            _os.write(reason, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bucketId, 0, true);
            _is.read(algId, 1, true);
            taf::Int32 eTemp2 = MyRecFeed::REASON_NONE;
            _is.read(eTemp2, 2, false);
            reasonType = (MyRecFeed::ReasonType)eTemp2;
            _is.read(reason, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bucketId,"bucketId");
            _ds.display(algId,"algId");
            _ds.display((taf::Int32)reasonType,"reasonType");
            _ds.display(reason,"reason");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bucketId, true);
            _ds.displaySimple(algId, true);
            _ds.displaySimple((taf::Int32)reasonType, true);
            _ds.displaySimple(reason, false);
            return _os;
        }
    public:
        std::string bucketId;
        std::string algId;
        MyRecFeed::ReasonType reasonType;
        std::string reason;
    };
    inline bool operator==(const ReportInfo&l, const ReportInfo&r)
    {
        return l.bucketId == r.bucketId && l.algId == r.algId && l.reasonType == r.reasonType && l.reason == r.reason;
    }
    inline bool operator!=(const ReportInfo&l, const ReportInfo&r)
    {
        return !(l == r);
    }

    struct RecTag : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.RecTag";
        }
        static string MD5()
        {
            return "9037380b74145fa756aaf345b4d5f383";
        }
        RecTag()
        :tagId(""),tagType(MyRecFeed::TAG_NONE),recTitle("")
        {
        }
        void resetDefautlt()
        {
            tagId = "";
            recTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tagId, 0);
            _os.write((taf::Int32)tagType, 1);
            _os.write(recTitle, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tagId, 0, true);
            taf::Int32 eTemp1 = MyRecFeed::TAG_NONE;
            _is.read(eTemp1, 1, false);
            tagType = (MyRecFeed::TagType)eTemp1;
            _is.read(recTitle, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tagId,"tagId");
            _ds.display((taf::Int32)tagType,"tagType");
            _ds.display(recTitle,"recTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tagId, true);
            _ds.displaySimple((taf::Int32)tagType, true);
            _ds.displaySimple(recTitle, false);
            return _os;
        }
    public:
        std::string tagId;
        MyRecFeed::TagType tagType;
        std::string recTitle;
    };
    inline bool operator==(const RecTag&l, const RecTag&r)
    {
        return l.tagId == r.tagId && l.tagType == r.tagType && l.recTitle == r.recTitle;
    }
    inline bool operator!=(const RecTag&l, const RecTag&r)
    {
        return !(l == r);
    }

    struct RecFeed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.RecFeed";
        }
        static string MD5()
        {
            return "25e3fd1353de085e1ded7bc05d3d4665";
        }
        RecFeed()
        :feedId(0),tagId(""),tagType(MyRecFeed::TAG_NONE),recPriority(0),debugInfo(""),replyTime(0)
        {
        }
        void resetDefautlt()
        {
            feedId = 0;
            tagId = "";
            recPriority = 0;
            debugInfo = "";
            replyTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(tagId, 1);
            _os.write((taf::Int32)tagType, 2);
            _os.write(recPriority, 3);
            _os.write(debugInfo, 4);
            _os.write(recReportInfo, 5);
            _os.write(replyTime, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, true);
            _is.read(tagId, 1, false);
            taf::Int32 eTemp2 = MyRecFeed::TAG_NONE;
            _is.read(eTemp2, 2, false);
            tagType = (MyRecFeed::TagType)eTemp2;
            _is.read(recPriority, 3, false);
            _is.read(debugInfo, 4, false);
            _is.read(recReportInfo, 5, false);
            _is.read(replyTime, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(tagId,"tagId");
            _ds.display((taf::Int32)tagType,"tagType");
            _ds.display(recPriority,"recPriority");
            _ds.display(debugInfo,"debugInfo");
            _ds.display(recReportInfo,"recReportInfo");
            _ds.display(replyTime,"replyTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(tagId, true);
            _ds.displaySimple((taf::Int32)tagType, true);
            _ds.displaySimple(recPriority, true);
            _ds.displaySimple(debugInfo, true);
            _ds.displaySimple(recReportInfo, true);
            _ds.displaySimple(replyTime, false);
            return _os;
        }
    public:
        taf::Int64 feedId;
        std::string tagId;
        MyRecFeed::TagType tagType;
        taf::Double recPriority;
        std::string debugInfo;
        MyRecFeed::ReportInfo recReportInfo;
        taf::Int64 replyTime;
    };
    inline bool operator==(const RecFeed&l, const RecFeed&r)
    {
        return l.feedId == r.feedId && l.tagId == r.tagId && l.tagType == r.tagType && l.recPriority == r.recPriority && l.debugInfo == r.debugInfo && l.recReportInfo == r.recReportInfo && l.replyTime == r.replyTime;
    }
    inline bool operator!=(const RecFeed&l, const RecFeed&r)
    {
        return !(l == r);
    }

    struct RecContext : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.RecContext";
        }
        static string MD5()
        {
            return "c942f04878816a269f1e9db47a36e45d";
        }
        RecContext()
        :lastedTagId(""),lastedTagType(MyRecFeed::TAG_NONE)
        {
        }
        void resetDefautlt()
        {
            lastedTagId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(recFeedList, 1);
            _os.write(vecFilterIds, 2);
            _os.write(lastedTagId, 3);
            _os.write((taf::Int32)lastedTagType, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(recFeedList, 1, false);
            _is.read(vecFilterIds, 2, false);
            _is.read(lastedTagId, 3, false);
            taf::Int32 eTemp4 = MyRecFeed::TAG_NONE;
            _is.read(eTemp4, 4, false);
            lastedTagType = (MyRecFeed::TagType)eTemp4;
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(recFeedList,"recFeedList");
            _ds.display(vecFilterIds,"vecFilterIds");
            _ds.display(lastedTagId,"lastedTagId");
            _ds.display((taf::Int32)lastedTagType,"lastedTagType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(recFeedList, true);
            _ds.displaySimple(vecFilterIds, true);
            _ds.displaySimple(lastedTagId, true);
            _ds.displaySimple((taf::Int32)lastedTagType, false);
            return _os;
        }
    public:
        vector<MyRecFeed::RecFeed> recFeedList;
        vector<std::string> vecFilterIds;
        std::string lastedTagId;
        MyRecFeed::TagType lastedTagType;
    };
    inline bool operator==(const RecContext&l, const RecContext&r)
    {
        return l.recFeedList == r.recFeedList && l.vecFilterIds == r.vecFilterIds && l.lastedTagId == r.lastedTagId && l.lastedTagType == r.lastedTagType;
    }
    inline bool operator!=(const RecContext&l, const RecContext&r)
    {
        return !(l == r);
    }

    struct GetRecFeedRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.GetRecFeedRequest";
        }
        static string MD5()
        {
            return "c27d7fa4d781af0ef5198a3fcc834fab";
        }
        GetRecFeedRequest()
        :seqNum(""),recScene(MyRecFeed::SCENE_NONE),dataKey(""),pageContext(""),bucketId(""),tagNum(0),recNum(0),pageNum(0),sourceKey("")
        {
        }
        void resetDefautlt()
        {
            seqNum = "";
            dataKey = "";
            pageContext = "";
            bucketId = "";
            tagNum = 0;
            recNum = 0;
            pageNum = 0;
            sourceKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(seqNum, 0);
            _os.write((taf::Int32)recScene, 1);
            _os.write(dataKey, 2);
            _os.write(recContext, 3);
            _os.write(pageContext, 4);
            _os.write(bucketId, 5);
            _os.write(tagNum, 6);
            _os.write(recNum, 7);
            _os.write(pageNum, 8);
            _os.write(sourceKey, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(seqNum, 0, true);
            taf::Int32 eTemp1 = MyRecFeed::SCENE_NONE;
            _is.read(eTemp1, 1, false);
            recScene = (MyRecFeed::RecSceneType)eTemp1;
            _is.read(dataKey, 2, false);
            _is.read(recContext, 3, true);
            _is.read(pageContext, 4, false);
            _is.read(bucketId, 5, false);
            _is.read(tagNum, 6, true);
            _is.read(recNum, 7, true);
            _is.read(pageNum, 8, false);
            _is.read(sourceKey, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(seqNum,"seqNum");
            _ds.display((taf::Int32)recScene,"recScene");
            _ds.display(dataKey,"dataKey");
            _ds.display(recContext,"recContext");
            _ds.display(pageContext,"pageContext");
            _ds.display(bucketId,"bucketId");
            _ds.display(tagNum,"tagNum");
            _ds.display(recNum,"recNum");
            _ds.display(pageNum,"pageNum");
            _ds.display(sourceKey,"sourceKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple((taf::Int32)recScene, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(recContext, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(bucketId, true);
            _ds.displaySimple(tagNum, true);
            _ds.displaySimple(recNum, true);
            _ds.displaySimple(pageNum, true);
            _ds.displaySimple(sourceKey, false);
            return _os;
        }
    public:
        std::string seqNum;
        MyRecFeed::RecSceneType recScene;
        std::string dataKey;
        MyRecFeed::RecContext recContext;
        std::string pageContext;
        std::string bucketId;
        taf::Int32 tagNum;
        taf::Int32 recNum;
        taf::Int32 pageNum;
        std::string sourceKey;
    };
    inline bool operator==(const GetRecFeedRequest&l, const GetRecFeedRequest&r)
    {
        return l.seqNum == r.seqNum && l.recScene == r.recScene && l.dataKey == r.dataKey && l.recContext == r.recContext && l.pageContext == r.pageContext && l.bucketId == r.bucketId && l.tagNum == r.tagNum && l.recNum == r.recNum && l.pageNum == r.pageNum && l.sourceKey == r.sourceKey;
    }
    inline bool operator!=(const GetRecFeedRequest&l, const GetRecFeedRequest&r)
    {
        return !(l == r);
    }

    struct GetRecFeedResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.GetRecFeedResponse";
        }
        static string MD5()
        {
            return "3a59d9fffb93c492a7756affe4851006";
        }
        GetRecFeedResponse()
        :errcode(0),seqNum(""),pageContext(""),hasNextPage(0)
        {
        }
        void resetDefautlt()
        {
            errcode = 0;
            seqNum = "";
            pageContext = "";
            hasNextPage = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errcode, 0);
            _os.write(seqNum, 1);
            _os.write(recFeedList, 2);
            _os.write(recTagList, 3);
            _os.write(pageContext, 4);
            _os.write(recContext, 5);
            _os.write(hasNextPage, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errcode, 0, true);
            _is.read(seqNum, 1, false);
            _is.read(recFeedList, 2, false);
            _is.read(recTagList, 3, false);
            _is.read(pageContext, 4, false);
            _is.read(recContext, 5, false);
            _is.read(hasNextPage, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errcode,"errcode");
            _ds.display(seqNum,"seqNum");
            _ds.display(recFeedList,"recFeedList");
            _ds.display(recTagList,"recTagList");
            _ds.display(pageContext,"pageContext");
            _ds.display(recContext,"recContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errcode, true);
            _ds.displaySimple(seqNum, true);
            _ds.displaySimple(recFeedList, true);
            _ds.displaySimple(recTagList, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(recContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errcode;
        std::string seqNum;
        vector<MyRecFeed::RecFeed> recFeedList;
        vector<MyRecFeed::RecTag> recTagList;
        std::string pageContext;
        MyRecFeed::RecContext recContext;
        taf::Int32 hasNextPage;
    };
    inline bool operator==(const GetRecFeedResponse&l, const GetRecFeedResponse&r)
    {
        return l.errcode == r.errcode && l.seqNum == r.seqNum && l.recFeedList == r.recFeedList && l.recTagList == r.recTagList && l.pageContext == r.pageContext && l.recContext == r.recContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const GetRecFeedResponse&l, const GetRecFeedResponse&r)
    {
        return !(l == r);
    }

    struct GetFeedCntRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.GetFeedCntRequest";
        }
        static string MD5()
        {
            return "324c9715269ff4f089031b077e9efbd2";
        }
        GetFeedCntRequest()
        :recScene(MyRecFeed::SCENE_NONE),dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)recScene, 0);
            _os.write(dataKey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = MyRecFeed::SCENE_NONE;
            _is.read(eTemp0, 0, false);
            recScene = (MyRecFeed::RecSceneType)eTemp0;
            _is.read(dataKey, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)recScene,"recScene");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)recScene, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        MyRecFeed::RecSceneType recScene;
        std::string dataKey;
    };
    inline bool operator==(const GetFeedCntRequest&l, const GetFeedCntRequest&r)
    {
        return l.recScene == r.recScene && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const GetFeedCntRequest&l, const GetFeedCntRequest&r)
    {
        return !(l == r);
    }

    struct GetFeedCntResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.GetFeedCntResponse";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        GetFeedCntResponse()
        :errcode(0),count(0)
        {
        }
        void resetDefautlt()
        {
            errcode = 0;
            count = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errcode, 0);
            _os.write(count, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errcode, 0, true);
            _is.read(count, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errcode,"errcode");
            _ds.display(count,"count");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errcode, true);
            _ds.displaySimple(count, false);
            return _os;
        }
    public:
        taf::Int32 errcode;
        taf::Int32 count;
    };
    inline bool operator==(const GetFeedCntResponse&l, const GetFeedCntResponse&r)
    {
        return l.errcode == r.errcode && l.count == r.count;
    }
    inline bool operator!=(const GetFeedCntResponse&l, const GetFeedCntResponse&r)
    {
        return !(l == r);
    }

    struct ReviewFeedsReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.ReviewFeedsReq";
        }
        static string MD5()
        {
            return "f434a0a6e5e62bdb84bc9d0c70b1820c";
        }
        ReviewFeedsReq()
        :scene(MyRecFeed::SCENE_NONE),tagId("")
        {
        }
        void resetDefautlt()
        {
            tagId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)scene, 0);
            _os.write(tagId, 1);
            _os.write(feedIds, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = MyRecFeed::SCENE_NONE;
            _is.read(eTemp0, 0, false);
            scene = (MyRecFeed::RecSceneType)eTemp0;
            _is.read(tagId, 1, false);
            _is.read(feedIds, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)scene,"scene");
            _ds.display(tagId,"tagId");
            _ds.display(feedIds,"feedIds");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)scene, true);
            _ds.displaySimple(tagId, true);
            _ds.displaySimple(feedIds, false);
            return _os;
        }
    public:
        MyRecFeed::RecSceneType scene;
        std::string tagId;
        vector<taf::Int64> feedIds;
    };
    inline bool operator==(const ReviewFeedsReq&l, const ReviewFeedsReq&r)
    {
        return l.scene == r.scene && l.tagId == r.tagId && l.feedIds == r.feedIds;
    }
    inline bool operator!=(const ReviewFeedsReq&l, const ReviewFeedsReq&r)
    {
        return !(l == r);
    }

    struct RecallFeed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.RecallFeed";
        }
        static string MD5()
        {
            return "d74b1b0f5c206e5a4fa86be60d297f43";
        }
        RecallFeed()
        :feedId(0),pubtime(0),pubuser(0),score(0)
        {
        }
        void resetDefautlt()
        {
            feedId = 0;
            pubtime = 0;
            pubuser = 0;
            score = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(feedId, 0);
            _os.write(pubtime, 1);
            _os.write(pubuser, 2);
            _os.write(score, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(feedId, 0, false);
            _is.read(pubtime, 1, false);
            _is.read(pubuser, 2, false);
            _is.read(score, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(feedId,"feedId");
            _ds.display(pubtime,"pubtime");
            _ds.display(pubuser,"pubuser");
            _ds.display(score,"score");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(pubtime, true);
            _ds.displaySimple(pubuser, true);
            _ds.displaySimple(score, false);
            return _os;
        }
    public:
        taf::Int64 feedId;
        taf::Int64 pubtime;
        taf::Int64 pubuser;
        taf::Int64 score;
    };
    inline bool operator==(const RecallFeed&l, const RecallFeed&r)
    {
        return l.feedId == r.feedId && l.pubtime == r.pubtime && l.pubuser == r.pubuser && l.score == r.score;
    }
    inline bool operator!=(const RecallFeed&l, const RecallFeed&r)
    {
        return !(l == r);
    }

    struct RecallQueue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.RecallQueue";
        }
        static string MD5()
        {
            return "3895d2722c950ce11642b3d51ec495ae";
        }
        RecallQueue()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(feedList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(feedList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(feedList,"feedList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(feedList, false);
            return _os;
        }
    public:
        taf::Int64 type;
        vector<MyRecFeed::RecallFeed> feedList;
    };
    inline bool operator==(const RecallQueue&l, const RecallQueue&r)
    {
        return l.type == r.type && l.feedList == r.feedList;
    }
    inline bool operator!=(const RecallQueue&l, const RecallQueue&r)
    {
        return !(l == r);
    }

    struct QueueTypeInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.QueueTypeInfo";
        }
        static string MD5()
        {
            return "d74b1b0f5c206e5a4fa86be60d297f43";
        }
        QueueTypeInfo()
        :type(0),score(0),pageNum(0),lastFeedId(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
            score = 0;
            pageNum = 0;
            lastFeedId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(score, 1);
            _os.write(pageNum, 2);
            _os.write(lastFeedId, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(score, 1, false);
            _is.read(pageNum, 2, false);
            _is.read(lastFeedId, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(score,"score");
            _ds.display(pageNum,"pageNum");
            _ds.display(lastFeedId,"lastFeedId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(score, true);
            _ds.displaySimple(pageNum, true);
            _ds.displaySimple(lastFeedId, false);
            return _os;
        }
    public:
        taf::Int64 type;
        taf::Int64 score;
        taf::Int64 pageNum;
        taf::Int64 lastFeedId;
    };
    inline bool operator==(const QueueTypeInfo&l, const QueueTypeInfo&r)
    {
        return l.type == r.type && l.score == r.score && l.pageNum == r.pageNum && l.lastFeedId == r.lastFeedId;
    }
    inline bool operator!=(const QueueTypeInfo&l, const QueueTypeInfo&r)
    {
        return !(l == r);
    }

    struct RecallQueueReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.RecallQueueReq";
        }
        static string MD5()
        {
            return "d62b83be12a68e8878e365bbea3a4564";
        }
        RecallQueueReq()
        :recScene(MyRecFeed::SCENE_NONE),dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)recScene, 0);
            _os.write(dataKey, 1);
            _os.write(typeList, 2);
            _os.write(expFlowInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = MyRecFeed::SCENE_NONE;
            _is.read(eTemp0, 0, false);
            recScene = (MyRecFeed::RecSceneType)eTemp0;
            _is.read(dataKey, 1, false);
            _is.read(typeList, 2, false);
            _is.read(expFlowInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)recScene,"recScene");
            _ds.display(dataKey,"dataKey");
            _ds.display(typeList,"typeList");
            _ds.display(expFlowInfo,"expFlowInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)recScene, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(typeList, true);
            _ds.displaySimple(expFlowInfo, false);
            return _os;
        }
    public:
        MyRecFeed::RecSceneType recScene;
        std::string dataKey;
        vector<MyRecFeed::QueueType> typeList;
        RecCommonStruct::ExpFlowInfo expFlowInfo;
    };
    inline bool operator==(const RecallQueueReq&l, const RecallQueueReq&r)
    {
        return l.recScene == r.recScene && l.dataKey == r.dataKey && l.typeList == r.typeList && l.expFlowInfo == r.expFlowInfo;
    }
    inline bool operator!=(const RecallQueueReq&l, const RecallQueueReq&r)
    {
        return !(l == r);
    }

    struct RecallQueueRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.RecallQueueRsp";
        }
        static string MD5()
        {
            return "157a07435469f064096414688059adb6";
        }
        RecallQueueRsp()
        :errcode(0)
        {
        }
        void resetDefautlt()
        {
            errcode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errcode, 0);
            _os.write(queueList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errcode, 0, false);
            _is.read(queueList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errcode,"errcode");
            _ds.display(queueList,"queueList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errcode, true);
            _ds.displaySimple(queueList, false);
            return _os;
        }
    public:
        taf::Int32 errcode;
        vector<MyRecFeed::RecallQueue> queueList;
    };
    inline bool operator==(const RecallQueueRsp&l, const RecallQueueRsp&r)
    {
        return l.errcode == r.errcode && l.queueList == r.queueList;
    }
    inline bool operator!=(const RecallQueueRsp&l, const RecallQueueRsp&r)
    {
        return !(l == r);
    }

    struct NewRecallQueueReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.NewRecallQueueReq";
        }
        static string MD5()
        {
            return "d5e1e87107fb963ab4dfb19e96e9c471";
        }
        NewRecallQueueReq()
        :recScene(MyRecFeed::SCENE_NONE),dataKey("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)recScene, 0);
            _os.write(dataKey, 1);
            _os.write(typeInfoList, 2);
            _os.write(expFlowInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            taf::Int32 eTemp0 = MyRecFeed::SCENE_NONE;
            _is.read(eTemp0, 0, false);
            recScene = (MyRecFeed::RecSceneType)eTemp0;
            _is.read(dataKey, 1, false);
            _is.read(typeInfoList, 2, false);
            _is.read(expFlowInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)recScene,"recScene");
            _ds.display(dataKey,"dataKey");
            _ds.display(typeInfoList,"typeInfoList");
            _ds.display(expFlowInfo,"expFlowInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)recScene, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(typeInfoList, true);
            _ds.displaySimple(expFlowInfo, false);
            return _os;
        }
    public:
        MyRecFeed::RecSceneType recScene;
        std::string dataKey;
        vector<MyRecFeed::QueueTypeInfo> typeInfoList;
        RecCommonStruct::ExpFlowInfo expFlowInfo;
    };
    inline bool operator==(const NewRecallQueueReq&l, const NewRecallQueueReq&r)
    {
        return l.recScene == r.recScene && l.dataKey == r.dataKey && l.typeInfoList == r.typeInfoList && l.expFlowInfo == r.expFlowInfo;
    }
    inline bool operator!=(const NewRecallQueueReq&l, const NewRecallQueueReq&r)
    {
        return !(l == r);
    }

    struct NewRecallQueueRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "MyRecFeed.NewRecallQueueRsp";
        }
        static string MD5()
        {
            return "157a07435469f064096414688059adb6";
        }
        NewRecallQueueRsp()
        :errcode(0)
        {
        }
        void resetDefautlt()
        {
            errcode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errcode, 0);
            _os.write(queueList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errcode, 0, false);
            _is.read(queueList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errcode,"errcode");
            _ds.display(queueList,"queueList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errcode, true);
            _ds.displaySimple(queueList, false);
            return _os;
        }
    public:
        taf::Int32 errcode;
        vector<MyRecFeed::RecallQueue> queueList;
    };
    inline bool operator==(const NewRecallQueueRsp&l, const NewRecallQueueRsp&r)
    {
        return l.errcode == r.errcode && l.queueList == r.queueList;
    }
    inline bool operator!=(const NewRecallQueueRsp&l, const NewRecallQueueRsp&r)
    {
        return !(l == r);
    }


}

#define MyRecFeed_ReportInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bucketId,b.bucketId);jce_copy_struct(a.algId,b.algId);jce_copy_struct(a.reasonType,b.reasonType);jce_copy_struct(a.reason,b.reason);

#define MyRecFeed_RecTag_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tagId,b.tagId);jce_copy_struct(a.tagType,b.tagType);jce_copy_struct(a.recTitle,b.recTitle);

#define MyRecFeed_RecFeed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.tagId,b.tagId);jce_copy_struct(a.tagType,b.tagType);jce_copy_struct(a.recPriority,b.recPriority);jce_copy_struct(a.debugInfo,b.debugInfo);jce_copy_struct(a.recReportInfo,b.recReportInfo);jce_copy_struct(a.replyTime,b.replyTime);

#define MyRecFeed_RecContext_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.recFeedList,b.recFeedList);jce_copy_struct(a.vecFilterIds,b.vecFilterIds);jce_copy_struct(a.lastedTagId,b.lastedTagId);jce_copy_struct(a.lastedTagType,b.lastedTagType);

#define MyRecFeed_GetRecFeedRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.recScene,b.recScene);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.recContext,b.recContext);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.bucketId,b.bucketId);jce_copy_struct(a.tagNum,b.tagNum);jce_copy_struct(a.recNum,b.recNum);jce_copy_struct(a.pageNum,b.pageNum);jce_copy_struct(a.sourceKey,b.sourceKey);

#define MyRecFeed_GetRecFeedResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errcode,b.errcode);jce_copy_struct(a.seqNum,b.seqNum);jce_copy_struct(a.recFeedList,b.recFeedList);jce_copy_struct(a.recTagList,b.recTagList);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.recContext,b.recContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define MyRecFeed_GetFeedCntRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.recScene,b.recScene);jce_copy_struct(a.dataKey,b.dataKey);

#define MyRecFeed_GetFeedCntResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errcode,b.errcode);jce_copy_struct(a.count,b.count);

#define MyRecFeed_ReviewFeedsReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.scene,b.scene);jce_copy_struct(a.tagId,b.tagId);jce_copy_struct(a.feedIds,b.feedIds);

#define MyRecFeed_RecallFeed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.pubtime,b.pubtime);jce_copy_struct(a.pubuser,b.pubuser);jce_copy_struct(a.score,b.score);

#define MyRecFeed_RecallQueue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.feedList,b.feedList);

#define MyRecFeed_QueueTypeInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.score,b.score);jce_copy_struct(a.pageNum,b.pageNum);jce_copy_struct(a.lastFeedId,b.lastFeedId);

#define MyRecFeed_RecallQueueReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.recScene,b.recScene);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.typeList,b.typeList);jce_copy_struct(a.expFlowInfo,b.expFlowInfo);

#define MyRecFeed_RecallQueueRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errcode,b.errcode);jce_copy_struct(a.queueList,b.queueList);

#define MyRecFeed_NewRecallQueueReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.recScene,b.recScene);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.typeInfoList,b.typeInfoList);jce_copy_struct(a.expFlowInfo,b.expFlowInfo);

#define MyRecFeed_NewRecallQueueRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errcode,b.errcode);jce_copy_struct(a.queueList,b.queueList);



#endif
