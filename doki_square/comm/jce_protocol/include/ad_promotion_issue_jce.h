// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `ad_promotion_issue_jce.jce'
// **********************************************************************

#ifndef __AD_PROMOTION_ISSUE_JCE_H_
#define __AD_PROMOTION_ISSUE_JCE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "ad_promotion_comm_enum.h"
#include "qqvideo_common.h"
#include "accessory_rec.h"


namespace AdvertisingPromotion
{
    enum EnumRetCode
    {
        Ret_Succ = 0,
        Ret_Req_Decode_Fail = 10000,
        Req_Invalid_LocInfo = 10001,
        Ret_Not_Support_Cmd = 10002,
        Ret_Unknow_LocInfo = 10003,
        Ret_Handle_Exception = 10004,
        Ret_Svr_Logic_Err = 10005,
        Ret_Rsp_Encode_Fail = 10006,
        Ret_Task_Num_Over_Mod_Limit = 10007,
    };
    inline string etos(const EnumRetCode & e)
    {
        switch(e)
        {
            case Ret_Succ: return "Ret_Succ";
            case Ret_Req_Decode_Fail: return "Ret_Req_Decode_Fail";
            case Req_Invalid_LocInfo: return "Req_Invalid_LocInfo";
            case Ret_Not_Support_Cmd: return "Ret_Not_Support_Cmd";
            case Ret_Unknow_LocInfo: return "Ret_Unknow_LocInfo";
            case Ret_Handle_Exception: return "Ret_Handle_Exception";
            case Ret_Svr_Logic_Err: return "Ret_Svr_Logic_Err";
            case Ret_Rsp_Encode_Fail: return "Ret_Rsp_Encode_Fail";
            case Ret_Task_Num_Over_Mod_Limit: return "Ret_Task_Num_Over_Mod_Limit";
            default: return "";
        }
    }
    inline int stoe(const string & s, EnumRetCode & e)
    {
        if(s == "Ret_Succ")  { e=Ret_Succ; return 0;}
        if(s == "Ret_Req_Decode_Fail")  { e=Ret_Req_Decode_Fail; return 0;}
        if(s == "Req_Invalid_LocInfo")  { e=Req_Invalid_LocInfo; return 0;}
        if(s == "Ret_Not_Support_Cmd")  { e=Ret_Not_Support_Cmd; return 0;}
        if(s == "Ret_Unknow_LocInfo")  { e=Ret_Unknow_LocInfo; return 0;}
        if(s == "Ret_Handle_Exception")  { e=Ret_Handle_Exception; return 0;}
        if(s == "Ret_Svr_Logic_Err")  { e=Ret_Svr_Logic_Err; return 0;}
        if(s == "Ret_Rsp_Encode_Fail")  { e=Ret_Rsp_Encode_Fail; return 0;}
        if(s == "Ret_Task_Num_Over_Mod_Limit")  { e=Ret_Task_Num_Over_Mod_Limit; return 0;}

        return -1;
    }

    struct PlayInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.PlayInfo";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        PlayInfo()
        :strVid(""),strCid(""),strLid(""),strTags(""),strCategory("")
        {
        }
        void resetDefautlt()
        {
            strVid = "";
            strCid = "";
            strLid = "";
            strTags = "";
            strCategory = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strVid, 0);
            _os.write(strCid, 1);
            _os.write(strLid, 2);
            _os.write(strTags, 3);
            _os.write(strCategory, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strVid, 0, false);
            _is.read(strCid, 1, false);
            _is.read(strLid, 2, false);
            _is.read(strTags, 3, false);
            _is.read(strCategory, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strVid,"strVid");
            _ds.display(strCid,"strCid");
            _ds.display(strLid,"strLid");
            _ds.display(strTags,"strTags");
            _ds.display(strCategory,"strCategory");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strVid, true);
            _ds.displaySimple(strCid, true);
            _ds.displaySimple(strLid, true);
            _ds.displaySimple(strTags, true);
            _ds.displaySimple(strCategory, false);
            return _os;
        }
    public:
        std::string strVid;
        std::string strCid;
        std::string strLid;
        std::string strTags;
        std::string strCategory;
    };
    inline bool operator==(const PlayInfo&l, const PlayInfo&r)
    {
        return l.strVid == r.strVid && l.strCid == r.strCid && l.strLid == r.strLid && l.strTags == r.strTags && l.strCategory == r.strCategory;
    }
    inline bool operator!=(const PlayInfo&l, const PlayInfo&r)
    {
        return !(l == r);
    }

    struct PlatformInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.PlatformInfo";
        }
        static string MD5()
        {
            return "c9a7b07e8b044d0fcbe9339d81fbbd69";
        }
        PlatformInfo()
        :strVerName(""),strVerId(""),iPlatform(0),strPlatformVer("")
        {
        }
        void resetDefautlt()
        {
            strVerName = "";
            strVerId = "";
            iPlatform = 0;
            strPlatformVer = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strVerName, 0);
            _os.write(strVerId, 1);
            _os.write(iPlatform, 2);
            _os.write(strPlatformVer, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strVerName, 0, true);
            _is.read(strVerId, 1, true);
            _is.read(iPlatform, 2, false);
            _is.read(strPlatformVer, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strVerName,"strVerName");
            _ds.display(strVerId,"strVerId");
            _ds.display(iPlatform,"iPlatform");
            _ds.display(strPlatformVer,"strPlatformVer");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strVerName, true);
            _ds.displaySimple(strVerId, true);
            _ds.displaySimple(iPlatform, true);
            _ds.displaySimple(strPlatformVer, false);
            return _os;
        }
    public:
        std::string strVerName;
        std::string strVerId;
        taf::Int32 iPlatform;
        std::string strPlatformVer;
    };
    inline bool operator==(const PlatformInfo&l, const PlatformInfo&r)
    {
        return l.strVerName == r.strVerName && l.strVerId == r.strVerId && l.iPlatform == r.iPlatform && l.strPlatformVer == r.strPlatformVer;
    }
    inline bool operator!=(const PlatformInfo&l, const PlatformInfo&r)
    {
        return !(l == r);
    }

    struct UserInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.UserInfo";
        }
        static string MD5()
        {
            return "80d84ce8e7b159a738660a3060902aaf";
        }
        UserInfo()
        :ddwUin(0),lVuid(0),strGuid(""),iCellNet(0)
        {
        }
        void resetDefautlt()
        {
            ddwUin = 0;
            lVuid = 0;
            strGuid = "";
            iCellNet = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwUin, 0);
            _os.write(lVuid, 1);
            _os.write(strGuid, 2);
            _os.write(iCellNet, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwUin, 0, false);
            _is.read(lVuid, 1, false);
            _is.read(strGuid, 2, false);
            _is.read(iCellNet, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwUin,"ddwUin");
            _ds.display(lVuid,"lVuid");
            _ds.display(strGuid,"strGuid");
            _ds.display(iCellNet,"iCellNet");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwUin, true);
            _ds.displaySimple(lVuid, true);
            _ds.displaySimple(strGuid, true);
            _ds.displaySimple(iCellNet, false);
            return _os;
        }
    public:
        taf::Int64 ddwUin;
        taf::Int64 lVuid;
        std::string strGuid;
        taf::Int32 iCellNet;
    };
    inline bool operator==(const UserInfo&l, const UserInfo&r)
    {
        return l.ddwUin == r.ddwUin && l.lVuid == r.lVuid && l.strGuid == r.strGuid && l.iCellNet == r.iCellNet;
    }
    inline bool operator!=(const UserInfo&l, const UserInfo&r)
    {
        return !(l == r);
    }

    struct PromotionLoc : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.PromotionLoc";
        }
        static string MD5()
        {
            return "85081946e7fc581479b12224f616e679";
        }
        PromotionLoc()
        :iPageLocId(0),iModLocId(0),iCmsChannelId(0),strStarId(""),strSearchKey("")
        {
        }
        void resetDefautlt()
        {
            iPageLocId = 0;
            iModLocId = 0;
            iCmsChannelId = 0;
            strStarId = "";
            strSearchKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iPageLocId, 0);
            _os.write(iModLocId, 1);
            _os.write(iCmsChannelId, 2);
            _os.write(stPlayInfo, 3);
            _os.write(strStarId, 4);
            _os.write(strSearchKey, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iPageLocId, 0, true);
            _is.read(iModLocId, 1, true);
            _is.read(iCmsChannelId, 2, false);
            _is.read(stPlayInfo, 3, false);
            _is.read(strStarId, 4, false);
            _is.read(strSearchKey, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iPageLocId,"iPageLocId");
            _ds.display(iModLocId,"iModLocId");
            _ds.display(iCmsChannelId,"iCmsChannelId");
            _ds.display(stPlayInfo,"stPlayInfo");
            _ds.display(strStarId,"strStarId");
            _ds.display(strSearchKey,"strSearchKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iPageLocId, true);
            _ds.displaySimple(iModLocId, true);
            _ds.displaySimple(iCmsChannelId, true);
            _ds.displaySimple(stPlayInfo, true);
            _ds.displaySimple(strStarId, true);
            _ds.displaySimple(strSearchKey, false);
            return _os;
        }
    public:
        taf::Int32 iPageLocId;
        taf::Int32 iModLocId;
        taf::Int32 iCmsChannelId;
        AdvertisingPromotion::PlayInfo stPlayInfo;
        std::string strStarId;
        std::string strSearchKey;
    };
    inline bool operator==(const PromotionLoc&l, const PromotionLoc&r)
    {
        return l.iPageLocId == r.iPageLocId && l.iModLocId == r.iModLocId && l.iCmsChannelId == r.iCmsChannelId && l.stPlayInfo == r.stPlayInfo && l.strStarId == r.strStarId && l.strSearchKey == r.strSearchKey;
    }
    inline bool operator!=(const PromotionLoc&l, const PromotionLoc&r)
    {
        return !(l == r);
    }

    struct AdValidateInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.AdValidateInfo";
        }
        static string MD5()
        {
            return "ea962c4d27cce506da001793d17d8ef9";
        }
        AdValidateInfo()
        :uniqueId(""),eventType(0),businessId(""),frequency(0),maxExposeCount(0),startTime(0),endTime(0),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            uniqueId = "";
            eventType = 0;
            businessId = "";
            frequency = 0;
            maxExposeCount = 0;
            startTime = 0;
            endTime = 0;
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uniqueId, 1);
            _os.write(eventType, 2);
            _os.write(businessId, 3);
            _os.write(frequency, 4);
            _os.write(maxExposeCount, 5);
            _os.write(startTime, 6);
            _os.write(endTime, 7);
            _os.write(reportKey, 8);
            _os.write(reportParams, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uniqueId, 1, true);
            _is.read(eventType, 2, true);
            _is.read(businessId, 3, false);
            _is.read(frequency, 4, false);
            _is.read(maxExposeCount, 5, false);
            _is.read(startTime, 6, false);
            _is.read(endTime, 7, false);
            _is.read(reportKey, 8, false);
            _is.read(reportParams, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uniqueId,"uniqueId");
            _ds.display(eventType,"eventType");
            _ds.display(businessId,"businessId");
            _ds.display(frequency,"frequency");
            _ds.display(maxExposeCount,"maxExposeCount");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uniqueId, true);
            _ds.displaySimple(eventType, true);
            _ds.displaySimple(businessId, true);
            _ds.displaySimple(frequency, true);
            _ds.displaySimple(maxExposeCount, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        std::string uniqueId;
        taf::Int32 eventType;
        std::string businessId;
        taf::Int64 frequency;
        taf::Int32 maxExposeCount;
        taf::Int64 startTime;
        taf::Int64 endTime;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const AdValidateInfo&l, const AdValidateInfo&r)
    {
        return l.uniqueId == r.uniqueId && l.eventType == r.eventType && l.businessId == r.businessId && l.frequency == r.frequency && l.maxExposeCount == r.maxExposeCount && l.startTime == r.startTime && l.endTime == r.endTime && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const AdValidateInfo&l, const AdValidateInfo&r)
    {
        return !(l == r);
    }

    struct BannerAdType : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.BannerAdType";
        }
        static string MD5()
        {
            return "022cf6387114b74d0be9b25bd2c10333";
        }
        BannerAdType()
        :imageUrl(""),url(""),reportParams(""),needLogin(0)
        {
        }
        void resetDefautlt()
        {
            imageUrl = "";
            url = "";
            reportParams = "";
            needLogin = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(validateInfo, 1);
            _os.write(imageUrl, 2);
            _os.write(url, 3);
            _os.write(reportParams, 4);
            _os.write(needLogin, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(validateInfo, 1, false);
            _is.read(imageUrl, 2, false);
            _is.read(url, 3, false);
            _is.read(reportParams, 4, false);
            _is.read(needLogin, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(validateInfo,"validateInfo");
            _ds.display(imageUrl,"imageUrl");
            _ds.display(url,"url");
            _ds.display(reportParams,"reportParams");
            _ds.display(needLogin,"needLogin");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(validateInfo, true);
            _ds.displaySimple(imageUrl, true);
            _ds.displaySimple(url, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(needLogin, false);
            return _os;
        }
    public:
        AdvertisingPromotion::AdValidateInfo validateInfo;
        std::string imageUrl;
        std::string url;
        std::string reportParams;
        taf::Int32 needLogin;
    };
    inline bool operator==(const BannerAdType&l, const BannerAdType&r)
    {
        return l.validateInfo == r.validateInfo && l.imageUrl == r.imageUrl && l.url == r.url && l.reportParams == r.reportParams && l.needLogin == r.needLogin;
    }
    inline bool operator!=(const BannerAdType&l, const BannerAdType&r)
    {
        return !(l == r);
    }

    struct EnterTipAdType : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.EnterTipAdType";
        }
        static string MD5()
        {
            return "f799cf115390f33fc01335678f1345fd";
        }
        EnterTipAdType()
        :itemId(""),buttonType(0),title(""),imgUrl(""),bgImgUrl(""),btnText(""),reportKey(""),reportParams("")
        {
        }
        void resetDefautlt()
        {
            itemId = "";
            buttonType = 0;
            title = "";
            imgUrl = "";
            bgImgUrl = "";
            btnText = "";
            reportKey = "";
            reportParams = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(validateInfo, 1);
            _os.write(itemId, 2);
            _os.write(buttonType, 3);
            _os.write(title, 4);
            _os.write(imgUrl, 5);
            _os.write(bgImgUrl, 6);
            _os.write(attentItem, 7);
            _os.write(btnText, 8);
            _os.write(action, 9);
            _os.write(reportKey, 10);
            _os.write(reportParams, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(validateInfo, 1, false);
            _is.read(itemId, 2, true);
            _is.read(buttonType, 3, true);
            _is.read(title, 4, true);
            _is.read(imgUrl, 5, false);
            _is.read(bgImgUrl, 6, false);
            _is.read(attentItem, 7, false);
            _is.read(btnText, 8, false);
            _is.read(action, 9, false);
            _is.read(reportKey, 10, false);
            _is.read(reportParams, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(validateInfo,"validateInfo");
            _ds.display(itemId,"itemId");
            _ds.display(buttonType,"buttonType");
            _ds.display(title,"title");
            _ds.display(imgUrl,"imgUrl");
            _ds.display(bgImgUrl,"bgImgUrl");
            _ds.display(attentItem,"attentItem");
            _ds.display(btnText,"btnText");
            _ds.display(action,"action");
            _ds.display(reportKey,"reportKey");
            _ds.display(reportParams,"reportParams");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(validateInfo, true);
            _ds.displaySimple(itemId, true);
            _ds.displaySimple(buttonType, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(imgUrl, true);
            _ds.displaySimple(bgImgUrl, true);
            _ds.displaySimple(attentItem, true);
            _ds.displaySimple(btnText, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(reportParams, false);
            return _os;
        }
    public:
        AdvertisingPromotion::AdValidateInfo validateInfo;
        std::string itemId;
        taf::Int32 buttonType;
        std::string title;
        std::string imgUrl;
        std::string bgImgUrl;
        jce::VideoAttentItem attentItem;
        std::string btnText;
        jce::Action action;
        std::string reportKey;
        std::string reportParams;
    };
    inline bool operator==(const EnterTipAdType&l, const EnterTipAdType&r)
    {
        return l.validateInfo == r.validateInfo && l.itemId == r.itemId && l.buttonType == r.buttonType && l.title == r.title && l.imgUrl == r.imgUrl && l.bgImgUrl == r.bgImgUrl && l.attentItem == r.attentItem && l.btnText == r.btnText && l.action == r.action && l.reportKey == r.reportKey && l.reportParams == r.reportParams;
    }
    inline bool operator!=(const EnterTipAdType&l, const EnterTipAdType&r)
    {
        return !(l == r);
    }

    struct PlayPageAd : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.PlayPageAd";
        }
        static string MD5()
        {
            return "35323995196e553ef6e8580719b6743d";
        }
        PlayPageAd()
        :iCache(true),iCacheTime(0)
        {
        }
        void resetDefautlt()
        {
            iCache = true;
            iCacheTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iCache, 1);
            _os.write(iCacheTime, 2);
            _os.write(accessory_item_list, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iCache, 1, false);
            _is.read(iCacheTime, 2, false);
            _is.read(accessory_item_list, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iCache,"iCache");
            _ds.display(iCacheTime,"iCacheTime");
            _ds.display(accessory_item_list,"accessory_item_list");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iCache, true);
            _ds.displaySimple(iCacheTime, true);
            _ds.displaySimple(accessory_item_list, false);
            return _os;
        }
    public:
        taf::Bool iCache;
        taf::Int32 iCacheTime;
        vector<accessory_rec::AccessoryItem> accessory_item_list;
    };
    inline bool operator==(const PlayPageAd&l, const PlayPageAd&r)
    {
        return l.iCache == r.iCache && l.iCacheTime == r.iCacheTime && l.accessory_item_list == r.accessory_item_list;
    }
    inline bool operator!=(const PlayPageAd&l, const PlayPageAd&r)
    {
        return !(l == r);
    }

    struct ChannelDataPageAd : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.ChannelDataPageAd";
        }
        static string MD5()
        {
            return "4ef006d959a6c30f337e6c7482d77960";
        }
        ChannelDataPageAd()
        :iCache(true),iCacheTime(0)
        {
        }
        void resetDefautlt()
        {
            iCache = true;
            iCacheTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(promotionInfo, 1);
            _os.write(iCache, 2);
            _os.write(iCacheTime, 3);
            _os.write(entertipList, 4);
            _os.write(searchTagsMap, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(promotionInfo, 1, false);
            _is.read(iCache, 2, false);
            _is.read(iCacheTime, 3, false);
            _is.read(entertipList, 4, false);
            _is.read(searchTagsMap, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(promotionInfo,"promotionInfo");
            _ds.display(iCache,"iCache");
            _ds.display(iCacheTime,"iCacheTime");
            _ds.display(entertipList,"entertipList");
            _ds.display(searchTagsMap,"searchTagsMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(promotionInfo, true);
            _ds.displaySimple(iCache, true);
            _ds.displaySimple(iCacheTime, true);
            _ds.displaySimple(entertipList, true);
            _ds.displaySimple(searchTagsMap, false);
            return _os;
        }
    public:
        jce::PromotionEventInfo promotionInfo;
        taf::Bool iCache;
        taf::Int32 iCacheTime;
        vector<AdvertisingPromotion::EnterTipAdType> entertipList;
        map<taf::Int32, vector<jce::IconTagText> > searchTagsMap;
    };
    inline bool operator==(const ChannelDataPageAd&l, const ChannelDataPageAd&r)
    {
        return l.promotionInfo == r.promotionInfo && l.iCache == r.iCache && l.iCacheTime == r.iCacheTime && l.entertipList == r.entertipList && l.searchTagsMap == r.searchTagsMap;
    }
    inline bool operator!=(const ChannelDataPageAd&l, const ChannelDataPageAd&r)
    {
        return !(l == r);
    }

    struct DokiPageAd : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.DokiPageAd";
        }
        static string MD5()
        {
            return "aa220991072d188406f519246ed2bd54";
        }
        DokiPageAd()
        :iCache(true),iCacheTime(0)
        {
        }
        void resetDefautlt()
        {
            iCache = true;
            iCacheTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(promotionInfo, 1);
            _os.write(iCache, 2);
            _os.write(iCacheTime, 3);
            _os.write(insertPosterGroup, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(promotionInfo, 1, false);
            _is.read(iCache, 2, false);
            _is.read(iCacheTime, 3, false);
            _is.read(insertPosterGroup, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(promotionInfo,"promotionInfo");
            _ds.display(iCache,"iCache");
            _ds.display(iCacheTime,"iCacheTime");
            _ds.display(insertPosterGroup,"insertPosterGroup");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(promotionInfo, true);
            _ds.displaySimple(iCache, true);
            _ds.displaySimple(iCacheTime, true);
            _ds.displaySimple(insertPosterGroup, false);
            return _os;
        }
    public:
        jce::PromotionEventInfo promotionInfo;
        taf::Bool iCache;
        taf::Int32 iCacheTime;
        vector<jce::PosterGroup> insertPosterGroup;
    };
    inline bool operator==(const DokiPageAd&l, const DokiPageAd&r)
    {
        return l.promotionInfo == r.promotionInfo && l.iCache == r.iCache && l.iCacheTime == r.iCacheTime && l.insertPosterGroup == r.insertPosterGroup;
    }
    inline bool operator!=(const DokiPageAd&l, const DokiPageAd&r)
    {
        return !(l == r);
    }

    struct StarPageAd : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.StarPageAd";
        }
        static string MD5()
        {
            return "5736adbecc2ac55a7b4c575f4300d97f";
        }
        StarPageAd()
        :iCache(true),iCacheTime(0)
        {
        }
        void resetDefautlt()
        {
            iCache = true;
            iCacheTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(promotionInfo, 1);
            _os.write(iCache, 2);
            _os.write(iCacheTime, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(promotionInfo, 1, false);
            _is.read(iCache, 2, false);
            _is.read(iCacheTime, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(promotionInfo,"promotionInfo");
            _ds.display(iCache,"iCache");
            _ds.display(iCacheTime,"iCacheTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(promotionInfo, true);
            _ds.displaySimple(iCache, true);
            _ds.displaySimple(iCacheTime, false);
            return _os;
        }
    public:
        jce::PromotionEventInfo promotionInfo;
        taf::Bool iCache;
        taf::Int32 iCacheTime;
    };
    inline bool operator==(const StarPageAd&l, const StarPageAd&r)
    {
        return l.promotionInfo == r.promotionInfo && l.iCache == r.iCache && l.iCacheTime == r.iCacheTime;
    }
    inline bool operator!=(const StarPageAd&l, const StarPageAd&r)
    {
        return !(l == r);
    }

    struct SearchPageAd : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.SearchPageAd";
        }
        static string MD5()
        {
            return "5736adbecc2ac55a7b4c575f4300d97f";
        }
        SearchPageAd()
        :iCache(true),iCacheTime(0)
        {
        }
        void resetDefautlt()
        {
            iCache = true;
            iCacheTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(promotionInfo, 1);
            _os.write(iCache, 2);
            _os.write(iCacheTime, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(promotionInfo, 1, false);
            _is.read(iCache, 2, false);
            _is.read(iCacheTime, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(promotionInfo,"promotionInfo");
            _ds.display(iCache,"iCache");
            _ds.display(iCacheTime,"iCacheTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(promotionInfo, true);
            _ds.displaySimple(iCache, true);
            _ds.displaySimple(iCacheTime, false);
            return _os;
        }
    public:
        jce::PromotionEventInfo promotionInfo;
        taf::Bool iCache;
        taf::Int32 iCacheTime;
    };
    inline bool operator==(const SearchPageAd&l, const SearchPageAd&r)
    {
        return l.promotionInfo == r.promotionInfo && l.iCache == r.iCache && l.iCacheTime == r.iCacheTime;
    }
    inline bool operator!=(const SearchPageAd&l, const SearchPageAd&r)
    {
        return !(l == r);
    }

    struct VStorePageAd : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.VStorePageAd";
        }
        static string MD5()
        {
            return "fc1a893370d255bae1b6b5ed5581f749";
        }
        VStorePageAd()
        :iCache(true),iCacheTime(0)
        {
        }
        void resetDefautlt()
        {
            iCache = true;
            iCacheTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stLocInfo, 1);
            _os.write(iCache, 2);
            _os.write(iCacheTime, 3);
            _os.write(vecBannerAdTasks, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stLocInfo, 1, true);
            _is.read(iCache, 2, false);
            _is.read(iCacheTime, 3, false);
            _is.read(vecBannerAdTasks, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stLocInfo,"stLocInfo");
            _ds.display(iCache,"iCache");
            _ds.display(iCacheTime,"iCacheTime");
            _ds.display(vecBannerAdTasks,"vecBannerAdTasks");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stLocInfo, true);
            _ds.displaySimple(iCache, true);
            _ds.displaySimple(iCacheTime, true);
            _ds.displaySimple(vecBannerAdTasks, false);
            return _os;
        }
    public:
        AdvertisingPromotion::PromotionLoc stLocInfo;
        taf::Bool iCache;
        taf::Int32 iCacheTime;
        vector<AdvertisingPromotion::BannerAdType> vecBannerAdTasks;
    };
    inline bool operator==(const VStorePageAd&l, const VStorePageAd&r)
    {
        return l.stLocInfo == r.stLocInfo && l.iCache == r.iCache && l.iCacheTime == r.iCacheTime && l.vecBannerAdTasks == r.vecBannerAdTasks;
    }
    inline bool operator!=(const VStorePageAd&l, const VStorePageAd&r)
    {
        return !(l == r);
    }

    struct PersonalPageAd : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.PersonalPageAd";
        }
        static string MD5()
        {
            return "d668706cb680895eba41938c5be58bab";
        }
        PersonalPageAd()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(itemList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(itemList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(itemList,"itemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(itemList, false);
            return _os;
        }
    public:
        vector<jce::DynamicItemInfo> itemList;
    };
    inline bool operator==(const PersonalPageAd&l, const PersonalPageAd&r)
    {
        return l.itemList == r.itemList;
    }
    inline bool operator!=(const PersonalPageAd&l, const PersonalPageAd&r)
    {
        return !(l == r);
    }

    struct AdTempletItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.AdTempletItem";
        }
        static string MD5()
        {
            return "43eb4f3f0879da47d6d98cd29a9e36d0";
        }
        AdTempletItem()
        :strData(""),iCache(true),iCacheTime(0)
        {
        }
        void resetDefautlt()
        {
            strData = "";
            iCache = true;
            iCacheTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stLocInfo, 0);
            _os.write(strData, 1);
            _os.write(iCache, 2);
            _os.write(iCacheTime, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stLocInfo, 0, true);
            _is.read(strData, 1, false);
            _is.read(iCache, 2, false);
            _is.read(iCacheTime, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stLocInfo,"stLocInfo");
            _ds.display(strData,"strData");
            _ds.display(iCache,"iCache");
            _ds.display(iCacheTime,"iCacheTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stLocInfo, true);
            _ds.displaySimple(strData, true);
            _ds.displaySimple(iCache, true);
            _ds.displaySimple(iCacheTime, false);
            return _os;
        }
    public:
        AdvertisingPromotion::PromotionLoc stLocInfo;
        std::string strData;
        taf::Bool iCache;
        taf::Int32 iCacheTime;
    };
    inline bool operator==(const AdTempletItem&l, const AdTempletItem&r)
    {
        return l.stLocInfo == r.stLocInfo && l.strData == r.strData && l.iCache == r.iCache && l.iCacheTime == r.iCacheTime;
    }
    inline bool operator!=(const AdTempletItem&l, const AdTempletItem&r)
    {
        return !(l == r);
    }

    struct CommResult : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.CommResult";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        CommResult()
        :iRet(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iRet = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iRet, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iRet, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iRet,"iRet");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iRet, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 iRet;
        std::string strErrMsg;
    };
    inline bool operator==(const CommResult&l, const CommResult&r)
    {
        return l.iRet == r.iRet && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const CommResult&l, const CommResult&r)
    {
        return !(l == r);
    }

    struct SearchKeyInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.SearchKeyInfo";
        }
        static string MD5()
        {
            return "cb4558a7d1cbd8cbf583df7337cc71f1";
        }
        SearchKeyInfo()
        :strKey(""),lModifyTimeStamp(0)
        {
        }
        void resetDefautlt()
        {
            strKey = "";
            lModifyTimeStamp = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strKey, 0);
            _os.write(lModifyTimeStamp, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strKey, 0, true);
            _is.read(lModifyTimeStamp, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strKey,"strKey");
            _ds.display(lModifyTimeStamp,"lModifyTimeStamp");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strKey, true);
            _ds.displaySimple(lModifyTimeStamp, false);
            return _os;
        }
    public:
        std::string strKey;
        taf::Int64 lModifyTimeStamp;
    };
    inline bool operator==(const SearchKeyInfo&l, const SearchKeyInfo&r)
    {
        return l.strKey == r.strKey && l.lModifyTimeStamp == r.lModifyTimeStamp;
    }
    inline bool operator!=(const SearchKeyInfo&l, const SearchKeyInfo&r)
    {
        return !(l == r);
    }

    struct AllSearchKeyInfos : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.AllSearchKeyInfos";
        }
        static string MD5()
        {
            return "2efeaf5d73bf5e57e6d4f31a3c941e30";
        }
        AllSearchKeyInfos()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(mId2SearchKeys, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(mId2SearchKeys, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(mId2SearchKeys,"mId2SearchKeys");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(mId2SearchKeys, false);
            return _os;
        }
    public:
        map<std::string, vector<AdvertisingPromotion::SearchKeyInfo> > mId2SearchKeys;
    };
    inline bool operator==(const AllSearchKeyInfos&l, const AllSearchKeyInfos&r)
    {
        return l.mId2SearchKeys == r.mId2SearchKeys;
    }
    inline bool operator!=(const AllSearchKeyInfos&l, const AllSearchKeyInfos&r)
    {
        return !(l == r);
    }

    struct QueryAdPromotionReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.QueryAdPromotionReq";
        }
        static string MD5()
        {
            return "44f4b743b04de3e2e74fe9cf186d64cf";
        }
        QueryAdPromotionReq()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stLocInfo, 0);
            _os.write(stPtInfo, 1);
            _os.write(stUserInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stLocInfo, 0, true);
            _is.read(stPtInfo, 1, false);
            _is.read(stUserInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stLocInfo,"stLocInfo");
            _ds.display(stPtInfo,"stPtInfo");
            _ds.display(stUserInfo,"stUserInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stLocInfo, true);
            _ds.displaySimple(stPtInfo, true);
            _ds.displaySimple(stUserInfo, false);
            return _os;
        }
    public:
        AdvertisingPromotion::PromotionLoc stLocInfo;
        AdvertisingPromotion::PlatformInfo stPtInfo;
        AdvertisingPromotion::UserInfo stUserInfo;
    };
    inline bool operator==(const QueryAdPromotionReq&l, const QueryAdPromotionReq&r)
    {
        return l.stLocInfo == r.stLocInfo && l.stPtInfo == r.stPtInfo && l.stUserInfo == r.stUserInfo;
    }
    inline bool operator!=(const QueryAdPromotionReq&l, const QueryAdPromotionReq&r)
    {
        return !(l == r);
    }

    struct QueryAdPromotionRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.QueryAdPromotionRsp";
        }
        static string MD5()
        {
            return "8ea23a9d7ed616eaa7ec5fc2e62ec9eb";
        }
        QueryAdPromotionRsp()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stCommRes, 0);
            _os.write(stAdTempletItem, 1);
            _os.write(stVStorePageAd, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stCommRes, 0, true);
            _is.read(stAdTempletItem, 1, false);
            _is.read(stVStorePageAd, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stCommRes,"stCommRes");
            _ds.display(stAdTempletItem,"stAdTempletItem");
            _ds.display(stVStorePageAd,"stVStorePageAd");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stCommRes, true);
            _ds.displaySimple(stAdTempletItem, true);
            _ds.displaySimple(stVStorePageAd, false);
            return _os;
        }
    public:
        AdvertisingPromotion::CommResult stCommRes;
        AdvertisingPromotion::AdTempletItem stAdTempletItem;
        AdvertisingPromotion::VStorePageAd stVStorePageAd;
    };
    inline bool operator==(const QueryAdPromotionRsp&l, const QueryAdPromotionRsp&r)
    {
        return l.stCommRes == r.stCommRes && l.stAdTempletItem == r.stAdTempletItem && l.stVStorePageAd == r.stVStorePageAd;
    }
    inline bool operator!=(const QueryAdPromotionRsp&l, const QueryAdPromotionRsp&r)
    {
        return !(l == r);
    }

    struct QuerySearchKeysReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.QuerySearchKeysReq";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        QuerySearchKeysReq()
        :iType(0)
        {
        }
        void resetDefautlt()
        {
            iType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iType, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iType, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iType,"iType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iType, false);
            return _os;
        }
    public:
        taf::Int32 iType;
    };
    inline bool operator==(const QuerySearchKeysReq&l, const QuerySearchKeysReq&r)
    {
        return l.iType == r.iType;
    }
    inline bool operator!=(const QuerySearchKeysReq&l, const QuerySearchKeysReq&r)
    {
        return !(l == r);
    }

    struct QuerySearchKeysRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "AdvertisingPromotion.QuerySearchKeysRsp";
        }
        static string MD5()
        {
            return "49b8dc59dae65568334fd48514d959c6";
        }
        QuerySearchKeysRsp()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stCommRes, 0);
            _os.write(vecSearchKeys, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stCommRes, 0, true);
            _is.read(vecSearchKeys, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stCommRes,"stCommRes");
            _ds.display(vecSearchKeys,"vecSearchKeys");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stCommRes, true);
            _ds.displaySimple(vecSearchKeys, false);
            return _os;
        }
    public:
        AdvertisingPromotion::CommResult stCommRes;
        vector<AdvertisingPromotion::SearchKeyInfo> vecSearchKeys;
    };
    inline bool operator==(const QuerySearchKeysRsp&l, const QuerySearchKeysRsp&r)
    {
        return l.stCommRes == r.stCommRes && l.vecSearchKeys == r.vecSearchKeys;
    }
    inline bool operator!=(const QuerySearchKeysRsp&l, const QuerySearchKeysRsp&r)
    {
        return !(l == r);
    }


}

#define AdvertisingPromotion_PlayInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strVid,b.strVid);jce_copy_struct(a.strCid,b.strCid);jce_copy_struct(a.strLid,b.strLid);jce_copy_struct(a.strTags,b.strTags);jce_copy_struct(a.strCategory,b.strCategory);

#define AdvertisingPromotion_PlatformInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strVerName,b.strVerName);jce_copy_struct(a.strVerId,b.strVerId);jce_copy_struct(a.iPlatform,b.iPlatform);jce_copy_struct(a.strPlatformVer,b.strPlatformVer);

#define AdvertisingPromotion_UserInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwUin,b.ddwUin);jce_copy_struct(a.lVuid,b.lVuid);jce_copy_struct(a.strGuid,b.strGuid);jce_copy_struct(a.iCellNet,b.iCellNet);

#define AdvertisingPromotion_PromotionLoc_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iPageLocId,b.iPageLocId);jce_copy_struct(a.iModLocId,b.iModLocId);jce_copy_struct(a.iCmsChannelId,b.iCmsChannelId);jce_copy_struct(a.stPlayInfo,b.stPlayInfo);jce_copy_struct(a.strStarId,b.strStarId);jce_copy_struct(a.strSearchKey,b.strSearchKey);

#define AdvertisingPromotion_AdValidateInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uniqueId,b.uniqueId);jce_copy_struct(a.eventType,b.eventType);jce_copy_struct(a.businessId,b.businessId);jce_copy_struct(a.frequency,b.frequency);jce_copy_struct(a.maxExposeCount,b.maxExposeCount);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define AdvertisingPromotion_BannerAdType_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.validateInfo,b.validateInfo);jce_copy_struct(a.imageUrl,b.imageUrl);jce_copy_struct(a.url,b.url);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.needLogin,b.needLogin);

#define AdvertisingPromotion_EnterTipAdType_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.validateInfo,b.validateInfo);jce_copy_struct(a.itemId,b.itemId);jce_copy_struct(a.buttonType,b.buttonType);jce_copy_struct(a.title,b.title);jce_copy_struct(a.imgUrl,b.imgUrl);jce_copy_struct(a.bgImgUrl,b.bgImgUrl);jce_copy_struct(a.attentItem,b.attentItem);jce_copy_struct(a.btnText,b.btnText);jce_copy_struct(a.action,b.action);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.reportParams,b.reportParams);

#define AdvertisingPromotion_PlayPageAd_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iCache,b.iCache);jce_copy_struct(a.iCacheTime,b.iCacheTime);jce_copy_struct(a.accessory_item_list,b.accessory_item_list);

#define AdvertisingPromotion_ChannelDataPageAd_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.promotionInfo,b.promotionInfo);jce_copy_struct(a.iCache,b.iCache);jce_copy_struct(a.iCacheTime,b.iCacheTime);jce_copy_struct(a.entertipList,b.entertipList);jce_copy_struct(a.searchTagsMap,b.searchTagsMap);

#define AdvertisingPromotion_DokiPageAd_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.promotionInfo,b.promotionInfo);jce_copy_struct(a.iCache,b.iCache);jce_copy_struct(a.iCacheTime,b.iCacheTime);jce_copy_struct(a.insertPosterGroup,b.insertPosterGroup);

#define AdvertisingPromotion_StarPageAd_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.promotionInfo,b.promotionInfo);jce_copy_struct(a.iCache,b.iCache);jce_copy_struct(a.iCacheTime,b.iCacheTime);

#define AdvertisingPromotion_SearchPageAd_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.promotionInfo,b.promotionInfo);jce_copy_struct(a.iCache,b.iCache);jce_copy_struct(a.iCacheTime,b.iCacheTime);

#define AdvertisingPromotion_VStorePageAd_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stLocInfo,b.stLocInfo);jce_copy_struct(a.iCache,b.iCache);jce_copy_struct(a.iCacheTime,b.iCacheTime);jce_copy_struct(a.vecBannerAdTasks,b.vecBannerAdTasks);

#define AdvertisingPromotion_PersonalPageAd_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.itemList,b.itemList);

#define AdvertisingPromotion_AdTempletItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stLocInfo,b.stLocInfo);jce_copy_struct(a.strData,b.strData);jce_copy_struct(a.iCache,b.iCache);jce_copy_struct(a.iCacheTime,b.iCacheTime);

#define AdvertisingPromotion_CommResult_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iRet,b.iRet);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define AdvertisingPromotion_SearchKeyInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strKey,b.strKey);jce_copy_struct(a.lModifyTimeStamp,b.lModifyTimeStamp);

#define AdvertisingPromotion_AllSearchKeyInfos_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.mId2SearchKeys,b.mId2SearchKeys);

#define AdvertisingPromotion_QueryAdPromotionReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stLocInfo,b.stLocInfo);jce_copy_struct(a.stPtInfo,b.stPtInfo);jce_copy_struct(a.stUserInfo,b.stUserInfo);

#define AdvertisingPromotion_QueryAdPromotionRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stCommRes,b.stCommRes);jce_copy_struct(a.stAdTempletItem,b.stAdTempletItem);jce_copy_struct(a.stVStorePageAd,b.stVStorePageAd);

#define AdvertisingPromotion_QuerySearchKeysReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iType,b.iType);

#define AdvertisingPromotion_QuerySearchKeysRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stCommRes,b.stCommRes);jce_copy_struct(a.vecSearchKeys,b.vecSearchKeys);



#endif
