// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_cmd.jce'
// **********************************************************************

#ifndef __QQVIDEO_CMD_H_
#define __QQVIDEO_CMD_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace jce
{
    struct LoginToken : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LoginToken";
        }
        static string MD5()
        {
            return "6761b1b4be1b0ae35f0b34fd09dd5781";
        }
        LoginToken()
        :TokenAppID(""),TokenKeyType(0),TokenUin(""),IsMainLogin(true)
        {
        }
        void resetDefautlt()
        {
            TokenAppID = "";
            TokenKeyType = 0;
            TokenUin = "";
            IsMainLogin = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(TokenAppID, 0);
            _os.write(TokenKeyType, 1);
            _os.write(TokenValue, 2);
            _os.write(TokenUin, 3);
            _os.write(IsMainLogin, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(TokenAppID, 0, true);
            _is.read(TokenKeyType, 1, true);
            _is.read(TokenValue, 2, true);
            _is.read(TokenUin, 3, false);
            _is.read(IsMainLogin, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(TokenAppID,"TokenAppID");
            _ds.display(TokenKeyType,"TokenKeyType");
            _ds.display(TokenValue,"TokenValue");
            _ds.display(TokenUin,"TokenUin");
            _ds.display(IsMainLogin,"IsMainLogin");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(TokenAppID, true);
            _ds.displaySimple(TokenKeyType, true);
            _ds.displaySimple(TokenValue, true);
            _ds.displaySimple(TokenUin, true);
            _ds.displaySimple(IsMainLogin, false);
            return _os;
        }
    public:
        std::string TokenAppID;
        taf::Char TokenKeyType;
        vector<taf::Char> TokenValue;
        std::string TokenUin;
        taf::Bool IsMainLogin;
    };
    inline bool operator==(const LoginToken&l, const LoginToken&r)
    {
        return l.TokenAppID == r.TokenAppID && l.TokenKeyType == r.TokenKeyType && l.TokenValue == r.TokenValue && l.TokenUin == r.TokenUin && l.IsMainLogin == r.IsMainLogin;
    }
    inline bool operator!=(const LoginToken&l, const LoginToken&r)
    {
        return !(l == r);
    }

    struct ExtentAccount : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ExtentAccount";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        ExtentAccount()
        :type(0),accountId("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            accountId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(accountId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(accountId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(accountId,"accountId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(accountId, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string accountId;
    };
    inline bool operator==(const ExtentAccount&l, const ExtentAccount&r)
    {
        return l.type == r.type && l.accountId == r.accountId;
    }
    inline bool operator!=(const ExtentAccount&l, const ExtentAccount&r)
    {
        return !(l == r);
    }

    struct BucketConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.BucketConfig";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        BucketConfig()
        :bucketId(0),extra("")
        {
        }
        void resetDefautlt()
        {
            bucketId = 0;
            extra = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bucketId, 0);
            _os.write(extra, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bucketId, 0, true);
            _is.read(extra, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bucketId,"bucketId");
            _ds.display(extra,"extra");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bucketId, true);
            _ds.displaySimple(extra, false);
            return _os;
        }
    public:
        taf::Int32 bucketId;
        std::string extra;
    };
    inline bool operator==(const BucketConfig&l, const BucketConfig&r)
    {
        return l.bucketId == r.bucketId && l.extra == r.extra;
    }
    inline bool operator!=(const BucketConfig&l, const BucketConfig&r)
    {
        return !(l == r);
    }

    struct ExtentData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ExtentData";
        }
        static string MD5()
        {
            return "57a092c7c416dedce299e358145c752d";
        }
        ExtentData()
        :checkFlag(0),flagByte(0),extra("")
        {
        }
        void resetDefautlt()
        {
            checkFlag = 0;
            flagByte = 0;
            extra = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(checkFlag, 0);
            _os.write(flagByte, 1);
            _os.write(extra, 2);
            _os.write(bucketInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(checkFlag, 0, false);
            _is.read(flagByte, 1, false);
            _is.read(extra, 2, false);
            _is.read(bucketInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(checkFlag,"checkFlag");
            _ds.display(flagByte,"flagByte");
            _ds.display(extra,"extra");
            _ds.display(bucketInfo,"bucketInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(checkFlag, true);
            _ds.displaySimple(flagByte, true);
            _ds.displaySimple(extra, true);
            _ds.displaySimple(bucketInfo, false);
            return _os;
        }
    public:
        taf::Int32 checkFlag;
        taf::Char flagByte;
        std::string extra;
        jce::BucketConfig bucketInfo;
    };
    inline bool operator==(const ExtentData&l, const ExtentData&r)
    {
        return l.checkFlag == r.checkFlag && l.flagByte == r.flagByte && l.extra == r.extra && l.bucketInfo == r.bucketInfo;
    }
    inline bool operator!=(const ExtentData&l, const ExtentData&r)
    {
        return !(l == r);
    }

    struct Coordinates : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.Coordinates";
        }
        static string MD5()
        {
            return "71033ead3878bc0cfa11bb26706df957";
        }
        Coordinates()
        :type(0),latitude(0),longitude(0),accuracy(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
            latitude = 0;
            longitude = 0;
            accuracy = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(latitude, 1);
            _os.write(longitude, 2);
            _os.write(accuracy, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(latitude, 1, false);
            _is.read(longitude, 2, false);
            _is.read(accuracy, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(latitude,"latitude");
            _ds.display(longitude,"longitude");
            _ds.display(accuracy,"accuracy");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(latitude, true);
            _ds.displaySimple(longitude, true);
            _ds.displaySimple(accuracy, false);
            return _os;
        }
    public:
        taf::Int32 type;
        taf::Float latitude;
        taf::Float longitude;
        taf::Double accuracy;
    };
    inline bool operator==(const Coordinates&l, const Coordinates&r)
    {
        return l.type == r.type && l.latitude == r.latitude && l.longitude == r.longitude && l.accuracy == r.accuracy;
    }
    inline bool operator!=(const Coordinates&l, const Coordinates&r)
    {
        return !(l == r);
    }

    struct QUA : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QUA";
        }
        static string MD5()
        {
            return "9e6f7635833504c6d39f0e26dc7cd0b6";
        }
        QUA()
        :versionName(""),versionCode(""),screenWidth(0),screenHeight(0),platform(0),platformVersion(""),markerId(0),networkMode(0),densityDpi(0),channelId(""),imei(""),imsi(""),idfa(""),omgId(""),extent(""),clientKey(""),mac(""),serverid(""),deviceId(""),deviceModel(""),deviceType(0),mobileISP(0),areaMode(0),countryCode(0),langCode(0),appSubVersion(""),v4ip("")
        {
        }
        void resetDefautlt()
        {
            versionName = "";
            versionCode = "";
            screenWidth = 0;
            screenHeight = 0;
            platform = 0;
            platformVersion = "";
            markerId = 0;
            networkMode = 0;
            densityDpi = 0;
            channelId = "";
            imei = "";
            imsi = "";
            idfa = "";
            omgId = "";
            extent = "";
            clientKey = "";
            mac = "";
            serverid = "";
            deviceId = "";
            deviceModel = "";
            deviceType = 0;
            mobileISP = 0;
            areaMode = 0;
            countryCode = 0;
            langCode = 0;
            appSubVersion = "";
            v4ip = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(versionName, 0);
            _os.write(versionCode, 1);
            _os.write(screenWidth, 2);
            _os.write(screenHeight, 3);
            _os.write(platform, 4);
            _os.write(platformVersion, 5);
            _os.write(markerId, 6);
            _os.write(networkMode, 7);
            _os.write(densityDpi, 8);
            _os.write(channelId, 9);
            _os.write(imei, 10);
            _os.write(imsi, 11);
            _os.write(idfa, 12);
            _os.write(omgId, 13);
            _os.write(extent, 14);
            _os.write(extentData, 15);
            _os.write(clientKey, 16);
            _os.write(mac, 17);
            _os.write(serverid, 18);
            _os.write(coordinates, 19);
            _os.write(deviceId, 20);
            _os.write(deviceModel, 21);
            _os.write(deviceType, 22);
            _os.write(mobileISP, 23);
            _os.write(areaMode, 24);
            _os.write(countryCode, 25);
            _os.write(langCode, 26);
            _os.write(appSubVersion, 27);
            _os.write(v4ip, 28);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(versionName, 0, true);
            _is.read(versionCode, 1, true);
            _is.read(screenWidth, 2, false);
            _is.read(screenHeight, 3, false);
            _is.read(platform, 4, false);
            _is.read(platformVersion, 5, false);
            _is.read(markerId, 6, false);
            _is.read(networkMode, 7, false);
            _is.read(densityDpi, 8, false);
            _is.read(channelId, 9, false);
            _is.read(imei, 10, false);
            _is.read(imsi, 11, false);
            _is.read(idfa, 12, false);
            _is.read(omgId, 13, false);
            _is.read(extent, 14, false);
            _is.read(extentData, 15, false);
            _is.read(clientKey, 16, false);
            _is.read(mac, 17, false);
            _is.read(serverid, 18, false);
            _is.read(coordinates, 19, false);
            _is.read(deviceId, 20, false);
            _is.read(deviceModel, 21, false);
            _is.read(deviceType, 22, false);
            _is.read(mobileISP, 23, false);
            _is.read(areaMode, 24, false);
            _is.read(countryCode, 25, false);
            _is.read(langCode, 26, false);
            _is.read(appSubVersion, 27, false);
            _is.read(v4ip, 28, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(versionName,"versionName");
            _ds.display(versionCode,"versionCode");
            _ds.display(screenWidth,"screenWidth");
            _ds.display(screenHeight,"screenHeight");
            _ds.display(platform,"platform");
            _ds.display(platformVersion,"platformVersion");
            _ds.display(markerId,"markerId");
            _ds.display(networkMode,"networkMode");
            _ds.display(densityDpi,"densityDpi");
            _ds.display(channelId,"channelId");
            _ds.display(imei,"imei");
            _ds.display(imsi,"imsi");
            _ds.display(idfa,"idfa");
            _ds.display(omgId,"omgId");
            _ds.display(extent,"extent");
            _ds.display(extentData,"extentData");
            _ds.display(clientKey,"clientKey");
            _ds.display(mac,"mac");
            _ds.display(serverid,"serverid");
            _ds.display(coordinates,"coordinates");
            _ds.display(deviceId,"deviceId");
            _ds.display(deviceModel,"deviceModel");
            _ds.display(deviceType,"deviceType");
            _ds.display(mobileISP,"mobileISP");
            _ds.display(areaMode,"areaMode");
            _ds.display(countryCode,"countryCode");
            _ds.display(langCode,"langCode");
            _ds.display(appSubVersion,"appSubVersion");
            _ds.display(v4ip,"v4ip");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(versionName, true);
            _ds.displaySimple(versionCode, true);
            _ds.displaySimple(screenWidth, true);
            _ds.displaySimple(screenHeight, true);
            _ds.displaySimple(platform, true);
            _ds.displaySimple(platformVersion, true);
            _ds.displaySimple(markerId, true);
            _ds.displaySimple(networkMode, true);
            _ds.displaySimple(densityDpi, true);
            _ds.displaySimple(channelId, true);
            _ds.displaySimple(imei, true);
            _ds.displaySimple(imsi, true);
            _ds.displaySimple(idfa, true);
            _ds.displaySimple(omgId, true);
            _ds.displaySimple(extent, true);
            _ds.displaySimple(extentData, true);
            _ds.displaySimple(clientKey, true);
            _ds.displaySimple(mac, true);
            _ds.displaySimple(serverid, true);
            _ds.displaySimple(coordinates, true);
            _ds.displaySimple(deviceId, true);
            _ds.displaySimple(deviceModel, true);
            _ds.displaySimple(deviceType, true);
            _ds.displaySimple(mobileISP, true);
            _ds.displaySimple(areaMode, true);
            _ds.displaySimple(countryCode, true);
            _ds.displaySimple(langCode, true);
            _ds.displaySimple(appSubVersion, true);
            _ds.displaySimple(v4ip, false);
            return _os;
        }
    public:
        std::string versionName;
        std::string versionCode;
        taf::Int32 screenWidth;
        taf::Int32 screenHeight;
        taf::Int32 platform;
        std::string platformVersion;
        taf::Int32 markerId;
        taf::Int32 networkMode;
        taf::Int32 densityDpi;
        std::string channelId;
        std::string imei;
        std::string imsi;
        std::string idfa;
        std::string omgId;
        std::string extent;
        jce::ExtentData extentData;
        std::string clientKey;
        std::string mac;
        std::string serverid;
        jce::Coordinates coordinates;
        std::string deviceId;
        std::string deviceModel;
        taf::Int32 deviceType;
        taf::Int32 mobileISP;
        taf::Int32 areaMode;
        taf::Int32 countryCode;
        taf::Int32 langCode;
        std::string appSubVersion;
        std::string v4ip;
    };
    inline bool operator==(const QUA&l, const QUA&r)
    {
        return l.versionName == r.versionName && l.versionCode == r.versionCode && l.screenWidth == r.screenWidth && l.screenHeight == r.screenHeight && l.platform == r.platform && l.platformVersion == r.platformVersion && l.markerId == r.markerId && l.networkMode == r.networkMode && l.densityDpi == r.densityDpi && l.channelId == r.channelId && l.imei == r.imei && l.imsi == r.imsi && l.idfa == r.idfa && l.omgId == r.omgId && l.extent == r.extent && l.extentData == r.extentData && l.clientKey == r.clientKey && l.mac == r.mac && l.serverid == r.serverid && l.coordinates == r.coordinates && l.deviceId == r.deviceId && l.deviceModel == r.deviceModel && l.deviceType == r.deviceType && l.mobileISP == r.mobileISP && l.areaMode == r.areaMode && l.countryCode == r.countryCode && l.langCode == r.langCode && l.appSubVersion == r.appSubVersion && l.v4ip == r.v4ip;
    }
    inline bool operator!=(const QUA&l, const QUA&r)
    {
        return !(l == r);
    }

    struct LogReport : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.LogReport";
        }
        static string MD5()
        {
            return "b515190adf6c5dd86ad7fc2b8c930806";
        }
        LogReport()
        :pageId(""),refPageId(""),pageStep(0),callType(""),isAuto(0),vid(""),pid(""),from(""),channelId(""),mid(""),extent("")
        {
        }
        void resetDefautlt()
        {
            pageId = "";
            refPageId = "";
            pageStep = 0;
            callType = "";
            isAuto = 0;
            vid = "";
            pid = "";
            from = "";
            channelId = "";
            mid = "";
            extent = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageId, 0);
            _os.write(refPageId, 1);
            _os.write(pageStep, 2);
            _os.write(callType, 3);
            _os.write(isAuto, 4);
            _os.write(vid, 5);
            _os.write(pid, 6);
            _os.write(from, 7);
            _os.write(channelId, 8);
            _os.write(mid, 9);
            _os.write(extent, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageId, 0, false);
            _is.read(refPageId, 1, false);
            _is.read(pageStep, 2, false);
            _is.read(callType, 3, false);
            _is.read(isAuto, 4, false);
            _is.read(vid, 5, false);
            _is.read(pid, 6, false);
            _is.read(from, 7, false);
            _is.read(channelId, 8, false);
            _is.read(mid, 9, false);
            _is.read(extent, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageId,"pageId");
            _ds.display(refPageId,"refPageId");
            _ds.display(pageStep,"pageStep");
            _ds.display(callType,"callType");
            _ds.display(isAuto,"isAuto");
            _ds.display(vid,"vid");
            _ds.display(pid,"pid");
            _ds.display(from,"from");
            _ds.display(channelId,"channelId");
            _ds.display(mid,"mid");
            _ds.display(extent,"extent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageId, true);
            _ds.displaySimple(refPageId, true);
            _ds.displaySimple(pageStep, true);
            _ds.displaySimple(callType, true);
            _ds.displaySimple(isAuto, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(from, true);
            _ds.displaySimple(channelId, true);
            _ds.displaySimple(mid, true);
            _ds.displaySimple(extent, false);
            return _os;
        }
    public:
        std::string pageId;
        std::string refPageId;
        taf::Int32 pageStep;
        std::string callType;
        taf::Int32 isAuto;
        std::string vid;
        std::string pid;
        std::string from;
        std::string channelId;
        std::string mid;
        std::string extent;
    };
    inline bool operator==(const LogReport&l, const LogReport&r)
    {
        return l.pageId == r.pageId && l.refPageId == r.refPageId && l.pageStep == r.pageStep && l.callType == r.callType && l.isAuto == r.isAuto && l.vid == r.vid && l.pid == r.pid && l.from == r.from && l.channelId == r.channelId && l.mid == r.mid && l.extent == r.extent;
    }
    inline bool operator!=(const LogReport&l, const LogReport&r)
    {
        return !(l == r);
    }

    struct SafeInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.SafeInfo";
        }
        static string MD5()
        {
            return "45fe926863e3dc21a26704a3d7d47a10";
        }
        SafeInfo()
        :type(0),SafeKey("")
        {
        }
        void resetDefautlt()
        {
            type = 0;
            SafeKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(SafeKey, 1);
            _os.write(SafeResult, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
            _is.read(SafeKey, 1, false);
            _is.read(SafeResult, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(SafeKey,"SafeKey");
            _ds.display(SafeResult,"SafeResult");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(SafeKey, true);
            _ds.displaySimple(SafeResult, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string SafeKey;
        vector<taf::Char> SafeResult;
    };
    inline bool operator==(const SafeInfo&l, const SafeInfo&r)
    {
        return l.type == r.type && l.SafeKey == r.SafeKey && l.SafeResult == r.SafeResult;
    }
    inline bool operator!=(const SafeInfo&l, const SafeInfo&r)
    {
        return !(l == r);
    }

    struct BusinessExtent : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.BusinessExtent";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        BusinessExtent()
        :launchType(0)
        {
        }
        void resetDefautlt()
        {
            launchType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(launchType, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(launchType, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(launchType,"launchType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(launchType, false);
            return _os;
        }
    public:
        taf::Int32 launchType;
    };
    inline bool operator==(const BusinessExtent&l, const BusinessExtent&r)
    {
        return l.launchType == r.launchType;
    }
    inline bool operator!=(const BusinessExtent&l, const BusinessExtent&r)
    {
        return !(l == r);
    }

    struct RequestHead : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RequestHead";
        }
        static string MD5()
        {
            return "d8e46f6a66ab9ba5ad7efbb918bdefec";
        }
        RequestHead()
        :requestId(0),cmdId(0),appId(""),guid(""),oemPlatform(0),isSupportDolby(0),contentType(0)
        {
        }
        void resetDefautlt()
        {
            requestId = 0;
            cmdId = 0;
            appId = "";
            guid = "";
            oemPlatform = 0;
            isSupportDolby = 0;
            contentType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(requestId, 0);
            _os.write(cmdId, 1);
            _os.write(qua, 2);
            _os.write(appId, 3);
            _os.write(guid, 4);
            _os.write(token, 5);
            _os.write(logReport, 6);
            _os.write(extentAccountList, 7);
            _os.write(oemPlatform, 8);
            _os.write(isSupportDolby, 9);
            _os.write(contentType, 10);
            _os.write(safeInfo, 11);
            _os.write(busiExtent, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(requestId, 0, true);
            _is.read(cmdId, 1, true);
            _is.read(qua, 2, false);
            _is.read(appId, 3, false);
            _is.read(guid, 4, false);
            _is.read(token, 5, false);
            _is.read(logReport, 6, false);
            _is.read(extentAccountList, 7, false);
            _is.read(oemPlatform, 8, false);
            _is.read(isSupportDolby, 9, false);
            _is.read(contentType, 10, false);
            _is.read(safeInfo, 11, false);
            _is.read(busiExtent, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(requestId,"requestId");
            _ds.display(cmdId,"cmdId");
            _ds.display(qua,"qua");
            _ds.display(appId,"appId");
            _ds.display(guid,"guid");
            _ds.display(token,"token");
            _ds.display(logReport,"logReport");
            _ds.display(extentAccountList,"extentAccountList");
            _ds.display(oemPlatform,"oemPlatform");
            _ds.display(isSupportDolby,"isSupportDolby");
            _ds.display(contentType,"contentType");
            _ds.display(safeInfo,"safeInfo");
            _ds.display(busiExtent,"busiExtent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(requestId, true);
            _ds.displaySimple(cmdId, true);
            _ds.displaySimple(qua, true);
            _ds.displaySimple(appId, true);
            _ds.displaySimple(guid, true);
            _ds.displaySimple(token, true);
            _ds.displaySimple(logReport, true);
            _ds.displaySimple(extentAccountList, true);
            _ds.displaySimple(oemPlatform, true);
            _ds.displaySimple(isSupportDolby, true);
            _ds.displaySimple(contentType, true);
            _ds.displaySimple(safeInfo, true);
            _ds.displaySimple(busiExtent, false);
            return _os;
        }
    public:
        taf::Int32 requestId;
        taf::Int32 cmdId;
        jce::QUA qua;
        std::string appId;
        std::string guid;
        vector<jce::LoginToken> token;
        jce::LogReport logReport;
        vector<jce::ExtentAccount> extentAccountList;
        taf::Int32 oemPlatform;
        taf::Int32 isSupportDolby;
        taf::Int32 contentType;
        jce::SafeInfo safeInfo;
        jce::BusinessExtent busiExtent;
    };
    inline bool operator==(const RequestHead&l, const RequestHead&r)
    {
        return l.requestId == r.requestId && l.cmdId == r.cmdId && l.qua == r.qua && l.appId == r.appId && l.guid == r.guid && l.token == r.token && l.logReport == r.logReport && l.extentAccountList == r.extentAccountList && l.oemPlatform == r.oemPlatform && l.isSupportDolby == r.isSupportDolby && l.contentType == r.contentType && l.safeInfo == r.safeInfo && l.busiExtent == r.busiExtent;
    }
    inline bool operator!=(const RequestHead&l, const RequestHead&r)
    {
        return !(l == r);
    }

    struct BusinessHead : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.BusinessHead";
        }
        static string MD5()
        {
            return "be2b682c2493ef584943de28a0bd87cf";
        }
        BusinessHead()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(head, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(head, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(head,"head");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(head, false);
            return _os;
        }
    public:
        taf::Int32 type;
        vector<taf::Char> head;
    };
    inline bool operator==(const BusinessHead&l, const BusinessHead&r)
    {
        return l.type == r.type && l.head == r.head;
    }
    inline bool operator!=(const BusinessHead&l, const BusinessHead&r)
    {
        return !(l == r);
    }

    struct RequestCommand : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.RequestCommand";
        }
        static string MD5()
        {
            return "a50ffd50da502192cdfa892ad0303be5";
        }
        RequestCommand()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(head, 0);
            _os.write(body, 1);
            _os.write(businessHead, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(head, 0, true);
            _is.read(body, 1, false);
            _is.read(businessHead, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(head,"head");
            _ds.display(body,"body");
            _ds.display(businessHead,"businessHead");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(head, true);
            _ds.displaySimple(body, true);
            _ds.displaySimple(businessHead, false);
            return _os;
        }
    public:
        jce::RequestHead head;
        vector<taf::Char> body;
        jce::BusinessHead businessHead;
    };
    inline bool operator==(const RequestCommand&l, const RequestCommand&r)
    {
        return l.head == r.head && l.body == r.body && l.businessHead == r.businessHead;
    }
    inline bool operator!=(const RequestCommand&l, const RequestCommand&r)
    {
        return !(l == r);
    }

    struct ResponseHead : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ResponseHead";
        }
        static string MD5()
        {
            return "5916821b82c7b2328a84edbd206421d0";
        }
        ResponseHead()
        :requestId(0),cmdId(0),errCode(0),sUserid("")
        {
        }
        void resetDefautlt()
        {
            requestId = 0;
            cmdId = 0;
            errCode = 0;
            sUserid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(requestId, 0);
            _os.write(cmdId, 1);
            _os.write(errCode, 2);
            _os.write(sUserid, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(requestId, 0, true);
            _is.read(cmdId, 1, true);
            _is.read(errCode, 2, true);
            _is.read(sUserid, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(requestId,"requestId");
            _ds.display(cmdId,"cmdId");
            _ds.display(errCode,"errCode");
            _ds.display(sUserid,"sUserid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(requestId, true);
            _ds.displaySimple(cmdId, true);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(sUserid, false);
            return _os;
        }
    public:
        taf::Int32 requestId;
        taf::Int32 cmdId;
        taf::Int32 errCode;
        std::string sUserid;
    };
    inline bool operator==(const ResponseHead&l, const ResponseHead&r)
    {
        return l.requestId == r.requestId && l.cmdId == r.cmdId && l.errCode == r.errCode && l.sUserid == r.sUserid;
    }
    inline bool operator!=(const ResponseHead&l, const ResponseHead&r)
    {
        return !(l == r);
    }

    struct ResponseCommand : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ResponseCommand";
        }
        static string MD5()
        {
            return "a99f523ae0b8b4107c1de127c503eb35";
        }
        ResponseCommand()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(head, 0);
            _os.write(body, 1);
            _os.write(businessHead, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(head, 0, true);
            _is.read(body, 1, false);
            _is.read(businessHead, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(head,"head");
            _ds.display(body,"body");
            _ds.display(businessHead,"businessHead");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(head, true);
            _ds.displaySimple(body, true);
            _ds.displaySimple(businessHead, false);
            return _os;
        }
    public:
        jce::ResponseHead head;
        vector<taf::Char> body;
        jce::BusinessHead businessHead;
    };
    inline bool operator==(const ResponseCommand&l, const ResponseCommand&r)
    {
        return l.head == r.head && l.body == r.body && l.businessHead == r.businessHead;
    }
    inline bool operator!=(const ResponseCommand&l, const ResponseCommand&r)
    {
        return !(l == r);
    }


}

#define jce_LoginToken_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.TokenAppID,b.TokenAppID);jce_copy_struct(a.TokenKeyType,b.TokenKeyType);jce_copy_struct(a.TokenValue,b.TokenValue);jce_copy_struct(a.TokenUin,b.TokenUin);jce_copy_struct(a.IsMainLogin,b.IsMainLogin);

#define jce_ExtentAccount_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.accountId,b.accountId);

#define jce_BucketConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bucketId,b.bucketId);jce_copy_struct(a.extra,b.extra);

#define jce_ExtentData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.checkFlag,b.checkFlag);jce_copy_struct(a.flagByte,b.flagByte);jce_copy_struct(a.extra,b.extra);jce_copy_struct(a.bucketInfo,b.bucketInfo);

#define jce_Coordinates_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.latitude,b.latitude);jce_copy_struct(a.longitude,b.longitude);jce_copy_struct(a.accuracy,b.accuracy);

#define jce_QUA_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.versionName,b.versionName);jce_copy_struct(a.versionCode,b.versionCode);jce_copy_struct(a.screenWidth,b.screenWidth);jce_copy_struct(a.screenHeight,b.screenHeight);jce_copy_struct(a.platform,b.platform);jce_copy_struct(a.platformVersion,b.platformVersion);jce_copy_struct(a.markerId,b.markerId);jce_copy_struct(a.networkMode,b.networkMode);jce_copy_struct(a.densityDpi,b.densityDpi);jce_copy_struct(a.channelId,b.channelId);jce_copy_struct(a.imei,b.imei);jce_copy_struct(a.imsi,b.imsi);jce_copy_struct(a.idfa,b.idfa);jce_copy_struct(a.omgId,b.omgId);jce_copy_struct(a.extent,b.extent);jce_copy_struct(a.extentData,b.extentData);jce_copy_struct(a.clientKey,b.clientKey);jce_copy_struct(a.mac,b.mac);jce_copy_struct(a.serverid,b.serverid);jce_copy_struct(a.coordinates,b.coordinates);jce_copy_struct(a.deviceId,b.deviceId);jce_copy_struct(a.deviceModel,b.deviceModel);jce_copy_struct(a.deviceType,b.deviceType);jce_copy_struct(a.mobileISP,b.mobileISP);jce_copy_struct(a.areaMode,b.areaMode);jce_copy_struct(a.countryCode,b.countryCode);jce_copy_struct(a.langCode,b.langCode);jce_copy_struct(a.appSubVersion,b.appSubVersion);jce_copy_struct(a.v4ip,b.v4ip);

#define jce_LogReport_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageId,b.pageId);jce_copy_struct(a.refPageId,b.refPageId);jce_copy_struct(a.pageStep,b.pageStep);jce_copy_struct(a.callType,b.callType);jce_copy_struct(a.isAuto,b.isAuto);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.from,b.from);jce_copy_struct(a.channelId,b.channelId);jce_copy_struct(a.mid,b.mid);jce_copy_struct(a.extent,b.extent);

#define jce_SafeInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.SafeKey,b.SafeKey);jce_copy_struct(a.SafeResult,b.SafeResult);

#define jce_BusinessExtent_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.launchType,b.launchType);

#define jce_RequestHead_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.requestId,b.requestId);jce_copy_struct(a.cmdId,b.cmdId);jce_copy_struct(a.qua,b.qua);jce_copy_struct(a.appId,b.appId);jce_copy_struct(a.guid,b.guid);jce_copy_struct(a.token,b.token);jce_copy_struct(a.logReport,b.logReport);jce_copy_struct(a.extentAccountList,b.extentAccountList);jce_copy_struct(a.oemPlatform,b.oemPlatform);jce_copy_struct(a.isSupportDolby,b.isSupportDolby);jce_copy_struct(a.contentType,b.contentType);jce_copy_struct(a.safeInfo,b.safeInfo);jce_copy_struct(a.busiExtent,b.busiExtent);

#define jce_BusinessHead_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.head,b.head);

#define jce_RequestCommand_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.head,b.head);jce_copy_struct(a.body,b.body);jce_copy_struct(a.businessHead,b.businessHead);

#define jce_ResponseHead_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.requestId,b.requestId);jce_copy_struct(a.cmdId,b.cmdId);jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.sUserid,b.sUserid);

#define jce_ResponseCommand_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.head,b.head);jce_copy_struct(a.body,b.body);jce_copy_struct(a.businessHead,b.businessHead);



#endif
