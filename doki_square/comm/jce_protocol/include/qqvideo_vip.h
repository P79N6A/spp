// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_vip.jce'
// **********************************************************************

#ifndef __QQVIDEO_VIP_H_
#define __QQVIDEO_VIP_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"
#include "qqvideo_ona.h"


namespace jce
{
    struct VisitorUserInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VisitorUserInfo";
        }
        static string MD5()
        {
            return "26ab4c3572f93788223d9d85c11bbd8f";
        }
        VisitorUserInfo()
        :isVip(true),beginTime(0),endTime(0)
        {
        }
        void resetDefautlt()
        {
            isVip = true;
            beginTime = 0;
            endTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(isVip, 0);
            _os.write(beginTime, 1);
            _os.write(endTime, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(isVip, 0, true);
            _is.read(beginTime, 1, false);
            _is.read(endTime, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(isVip,"isVip");
            _ds.display(beginTime,"beginTime");
            _ds.display(endTime,"endTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(isVip, true);
            _ds.displaySimple(beginTime, true);
            _ds.displaySimple(endTime, false);
            return _os;
        }
    public:
        taf::Bool isVip;
        taf::Int64 beginTime;
        taf::Int64 endTime;
    };
    inline bool operator==(const VisitorUserInfo&l, const VisitorUserInfo&r)
    {
        return l.isVip == r.isVip && l.beginTime == r.beginTime && l.endTime == r.endTime;
    }
    inline bool operator!=(const VisitorUserInfo&l, const VisitorUserInfo&r)
    {
        return !(l == r);
    }

    struct VipSupplementaryInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipSupplementaryInfo";
        }
        static string MD5()
        {
            return "f2b603eedeb12274a08bc15407ce0497";
        }
        VipSupplementaryInfo()
        :isSupplementaryVip(true),iconUrl("")
        {
        }
        void resetDefautlt()
        {
            isSupplementaryVip = true;
            iconUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(isSupplementaryVip, 0);
            _os.write(iconUrl, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(isSupplementaryVip, 0, false);
            _is.read(iconUrl, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(isSupplementaryVip,"isSupplementaryVip");
            _ds.display(iconUrl,"iconUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(isSupplementaryVip, true);
            _ds.displaySimple(iconUrl, false);
            return _os;
        }
    public:
        taf::Bool isSupplementaryVip;
        std::string iconUrl;
    };
    inline bool operator==(const VipSupplementaryInfo&l, const VipSupplementaryInfo&r)
    {
        return l.isSupplementaryVip == r.isSupplementaryVip && l.iconUrl == r.iconUrl;
    }
    inline bool operator!=(const VipSupplementaryInfo&l, const VipSupplementaryInfo&r)
    {
        return !(l == r);
    }

    struct VipUserInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipUserInfo";
        }
        static string MD5()
        {
            return "1c61940373eb68f3e38f06e33233849d";
        }
        VipUserInfo()
        :uin(""),isVip(true),beginTime(0),endTime(0),level(0),isAnnualVip(true),logoUrl(""),jsonData(""),canImport(true),endMsg(""),serviceType(""),annualBeginTime(0),annualEndTime(0),isLoginCheckFail(0),isLevelUp(true),levelUpVersion(0),longVipIconUrl(""),shortVipIconUrl("")
        {
        }
        void resetDefautlt()
        {
            uin = "";
            isVip = true;
            beginTime = 0;
            endTime = 0;
            level = 0;
            isAnnualVip = true;
            logoUrl = "";
            jsonData = "";
            canImport = true;
            endMsg = "";
            serviceType = "";
            annualBeginTime = 0;
            annualEndTime = 0;
            isLoginCheckFail = 0;
            isLevelUp = true;
            levelUpVersion = 0;
            longVipIconUrl = "";
            shortVipIconUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uin, 0);
            _os.write(isVip, 1);
            _os.write(beginTime, 2);
            _os.write(endTime, 3);
            _os.write(level, 4);
            _os.write(isAnnualVip, 5);
            _os.write(logoUrl, 6);
            _os.write(jsonData, 7);
            _os.write(canImport, 8);
            _os.write(endMsg, 9);
            _os.write(serviceType, 10);
            _os.write(annualBeginTime, 11);
            _os.write(annualEndTime, 12);
            _os.write(isLoginCheckFail, 13);
            _os.write(visitorUserInfo, 14);
            _os.write(isLevelUp, 15);
            _os.write(levelUpVersion, 16);
            _os.write(longVipIconUrl, 17);
            _os.write(shortVipIconUrl, 18);
            _os.write(vipSupplementaryInfo, 19);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uin, 0, true);
            _is.read(isVip, 1, true);
            _is.read(beginTime, 2, false);
            _is.read(endTime, 3, false);
            _is.read(level, 4, false);
            _is.read(isAnnualVip, 5, false);
            _is.read(logoUrl, 6, false);
            _is.read(jsonData, 7, false);
            _is.read(canImport, 8, false);
            _is.read(endMsg, 9, false);
            _is.read(serviceType, 10, false);
            _is.read(annualBeginTime, 11, false);
            _is.read(annualEndTime, 12, false);
            _is.read(isLoginCheckFail, 13, false);
            _is.read(visitorUserInfo, 14, false);
            _is.read(isLevelUp, 15, false);
            _is.read(levelUpVersion, 16, false);
            _is.read(longVipIconUrl, 17, false);
            _is.read(shortVipIconUrl, 18, false);
            _is.read(vipSupplementaryInfo, 19, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uin,"uin");
            _ds.display(isVip,"isVip");
            _ds.display(beginTime,"beginTime");
            _ds.display(endTime,"endTime");
            _ds.display(level,"level");
            _ds.display(isAnnualVip,"isAnnualVip");
            _ds.display(logoUrl,"logoUrl");
            _ds.display(jsonData,"jsonData");
            _ds.display(canImport,"canImport");
            _ds.display(endMsg,"endMsg");
            _ds.display(serviceType,"serviceType");
            _ds.display(annualBeginTime,"annualBeginTime");
            _ds.display(annualEndTime,"annualEndTime");
            _ds.display(isLoginCheckFail,"isLoginCheckFail");
            _ds.display(visitorUserInfo,"visitorUserInfo");
            _ds.display(isLevelUp,"isLevelUp");
            _ds.display(levelUpVersion,"levelUpVersion");
            _ds.display(longVipIconUrl,"longVipIconUrl");
            _ds.display(shortVipIconUrl,"shortVipIconUrl");
            _ds.display(vipSupplementaryInfo,"vipSupplementaryInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uin, true);
            _ds.displaySimple(isVip, true);
            _ds.displaySimple(beginTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(level, true);
            _ds.displaySimple(isAnnualVip, true);
            _ds.displaySimple(logoUrl, true);
            _ds.displaySimple(jsonData, true);
            _ds.displaySimple(canImport, true);
            _ds.displaySimple(endMsg, true);
            _ds.displaySimple(serviceType, true);
            _ds.displaySimple(annualBeginTime, true);
            _ds.displaySimple(annualEndTime, true);
            _ds.displaySimple(isLoginCheckFail, true);
            _ds.displaySimple(visitorUserInfo, true);
            _ds.displaySimple(isLevelUp, true);
            _ds.displaySimple(levelUpVersion, true);
            _ds.displaySimple(longVipIconUrl, true);
            _ds.displaySimple(shortVipIconUrl, true);
            _ds.displaySimple(vipSupplementaryInfo, false);
            return _os;
        }
    public:
        std::string uin;
        taf::Bool isVip;
        taf::Int64 beginTime;
        taf::Int64 endTime;
        taf::Int32 level;
        taf::Bool isAnnualVip;
        std::string logoUrl;
        std::string jsonData;
        taf::Bool canImport;
        std::string endMsg;
        std::string serviceType;
        taf::Int64 annualBeginTime;
        taf::Int64 annualEndTime;
        taf::Int32 isLoginCheckFail;
        jce::VisitorUserInfo visitorUserInfo;
        taf::Bool isLevelUp;
        taf::Int32 levelUpVersion;
        std::string longVipIconUrl;
        std::string shortVipIconUrl;
        jce::VipSupplementaryInfo vipSupplementaryInfo;
    };
    inline bool operator==(const VipUserInfo&l, const VipUserInfo&r)
    {
        return l.uin == r.uin && l.isVip == r.isVip && l.beginTime == r.beginTime && l.endTime == r.endTime && l.level == r.level && l.isAnnualVip == r.isAnnualVip && l.logoUrl == r.logoUrl && l.jsonData == r.jsonData && l.canImport == r.canImport && l.endMsg == r.endMsg && l.serviceType == r.serviceType && l.annualBeginTime == r.annualBeginTime && l.annualEndTime == r.annualEndTime && l.isLoginCheckFail == r.isLoginCheckFail && l.visitorUserInfo == r.visitorUserInfo && l.isLevelUp == r.isLevelUp && l.levelUpVersion == r.levelUpVersion && l.longVipIconUrl == r.longVipIconUrl && l.shortVipIconUrl == r.shortVipIconUrl && l.vipSupplementaryInfo == r.vipSupplementaryInfo;
    }
    inline bool operator!=(const VipUserInfo&l, const VipUserInfo&r)
    {
        return !(l == r);
    }

    struct VipOrderItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipOrderItem";
        }
        static string MD5()
        {
            return "c32c73dbbfe2b16414c18a7728c3f270";
        }
        VipOrderItem()
        :oid(""),c_status(0),valid_days(0),beginTime(0),endTime(0),lid(""),cid(""),vid(""),title(""),discount(""),singlePrice(""),vipPrice(""),endDate(0),productType(0),playRight(0),drm(true),webUrl(""),checkupGrade(0),payType(0),pic("")
        {
        }
        void resetDefautlt()
        {
            oid = "";
            c_status = 0;
            valid_days = 0;
            beginTime = 0;
            endTime = 0;
            lid = "";
            cid = "";
            vid = "";
            title = "";
            discount = "";
            singlePrice = "";
            vipPrice = "";
            endDate = 0;
            productType = 0;
            playRight = 0;
            drm = true;
            webUrl = "";
            checkupGrade = 0;
            payType = 0;
            pic = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(oid, 0);
            _os.write(c_status, 1);
            _os.write(valid_days, 2);
            _os.write(beginTime, 3);
            _os.write(endTime, 4);
            _os.write(lid, 5);
            _os.write(cid, 6);
            _os.write(vid, 7);
            _os.write(title, 8);
            _os.write(discount, 9);
            _os.write(singlePrice, 10);
            _os.write(vipPrice, 11);
            _os.write(endDate, 12);
            _os.write(productType, 13);
            _os.write(playRight, 14);
            _os.write(drm, 15);
            _os.write(webUrl, 16);
            _os.write(checkupGrade, 17);
            _os.write(payType, 18);
            _os.write(pic, 19);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(oid, 0, true);
            _is.read(c_status, 1, false);
            _is.read(valid_days, 2, false);
            _is.read(beginTime, 3, false);
            _is.read(endTime, 4, false);
            _is.read(lid, 5, false);
            _is.read(cid, 6, false);
            _is.read(vid, 7, false);
            _is.read(title, 8, false);
            _is.read(discount, 9, false);
            _is.read(singlePrice, 10, false);
            _is.read(vipPrice, 11, false);
            _is.read(endDate, 12, false);
            _is.read(productType, 13, false);
            _is.read(playRight, 14, false);
            _is.read(drm, 15, false);
            _is.read(webUrl, 16, false);
            _is.read(checkupGrade, 17, false);
            _is.read(payType, 18, false);
            _is.read(pic, 19, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(oid,"oid");
            _ds.display(c_status,"c_status");
            _ds.display(valid_days,"valid_days");
            _ds.display(beginTime,"beginTime");
            _ds.display(endTime,"endTime");
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(title,"title");
            _ds.display(discount,"discount");
            _ds.display(singlePrice,"singlePrice");
            _ds.display(vipPrice,"vipPrice");
            _ds.display(endDate,"endDate");
            _ds.display(productType,"productType");
            _ds.display(playRight,"playRight");
            _ds.display(drm,"drm");
            _ds.display(webUrl,"webUrl");
            _ds.display(checkupGrade,"checkupGrade");
            _ds.display(payType,"payType");
            _ds.display(pic,"pic");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(oid, true);
            _ds.displaySimple(c_status, true);
            _ds.displaySimple(valid_days, true);
            _ds.displaySimple(beginTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(discount, true);
            _ds.displaySimple(singlePrice, true);
            _ds.displaySimple(vipPrice, true);
            _ds.displaySimple(endDate, true);
            _ds.displaySimple(productType, true);
            _ds.displaySimple(playRight, true);
            _ds.displaySimple(drm, true);
            _ds.displaySimple(webUrl, true);
            _ds.displaySimple(checkupGrade, true);
            _ds.displaySimple(payType, true);
            _ds.displaySimple(pic, false);
            return _os;
        }
    public:
        std::string oid;
        taf::Int32 c_status;
        taf::Int32 valid_days;
        taf::Int64 beginTime;
        taf::Int64 endTime;
        std::string lid;
        std::string cid;
        std::string vid;
        std::string title;
        std::string discount;
        std::string singlePrice;
        std::string vipPrice;
        taf::Int64 endDate;
        taf::Int32 productType;
        taf::Int32 playRight;
        taf::Bool drm;
        std::string webUrl;
        taf::Int32 checkupGrade;
        taf::Int32 payType;
        std::string pic;
    };
    inline bool operator==(const VipOrderItem&l, const VipOrderItem&r)
    {
        return l.oid == r.oid && l.c_status == r.c_status && l.valid_days == r.valid_days && l.beginTime == r.beginTime && l.endTime == r.endTime && l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.title == r.title && l.discount == r.discount && l.singlePrice == r.singlePrice && l.vipPrice == r.vipPrice && l.endDate == r.endDate && l.productType == r.productType && l.playRight == r.playRight && l.drm == r.drm && l.webUrl == r.webUrl && l.checkupGrade == r.checkupGrade && l.payType == r.payType && l.pic == r.pic;
    }
    inline bool operator!=(const VipOrderItem&l, const VipOrderItem&r)
    {
        return !(l == r);
    }

    struct VipUserInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipUserInfoRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        VipUserInfoRequest()
        :test(0)
        {
        }
        void resetDefautlt()
        {
            test = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(test, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(test, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(test,"test");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(test, false);
            return _os;
        }
    public:
        taf::Int32 test;
    };
    inline bool operator==(const VipUserInfoRequest&l, const VipUserInfoRequest&r)
    {
        return l.test == r.test;
    }
    inline bool operator!=(const VipUserInfoRequest&l, const VipUserInfoRequest&r)
    {
        return !(l == r);
    }

    struct VipUserInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipUserInfoResponse";
        }
        static string MD5()
        {
            return "02cf67018fdec119c63ece177ff8d253";
        }
        VipUserInfoResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(vipUserInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(vipUserInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(vipUserInfo,"vipUserInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(vipUserInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::VipUserInfo vipUserInfo;
    };
    inline bool operator==(const VipUserInfoResponse&l, const VipUserInfoResponse&r)
    {
        return l.errCode == r.errCode && l.vipUserInfo == r.vipUserInfo;
    }
    inline bool operator!=(const VipUserInfoResponse&l, const VipUserInfoResponse&r)
    {
        return !(l == r);
    }

    struct VipConfigRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipConfigRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        VipConfigRequest()
        :test(0)
        {
        }
        void resetDefautlt()
        {
            test = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(test, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(test, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(test,"test");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(test, false);
            return _os;
        }
    public:
        taf::Int32 test;
    };
    inline bool operator==(const VipConfigRequest&l, const VipConfigRequest&r)
    {
        return l.test == r.test;
    }
    inline bool operator!=(const VipConfigRequest&l, const VipConfigRequest&r)
    {
        return !(l == r);
    }

    struct VipConfigResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipConfigResponse";
        }
        static string MD5()
        {
            return "120f3655a79fe57de264be3a6bfd2d1d";
        }
        VipConfigResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(vipConfig, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(vipConfig, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(vipConfig,"vipConfig");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(vipConfig, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        map<std::string, std::string> vipConfig;
    };
    inline bool operator==(const VipConfigResponse&l, const VipConfigResponse&r)
    {
        return l.errCode == r.errCode && l.vipConfig == r.vipConfig;
    }
    inline bool operator!=(const VipConfigResponse&l, const VipConfigResponse&r)
    {
        return !(l == r);
    }

    struct PlayerPayViewCopyWriting : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PlayerPayViewCopyWriting";
        }
        static string MD5()
        {
            return "6cf1348cdd69f924109dd734bc911528";
        }
        PlayerPayViewCopyWriting()
        :topStr(""),topSubStr(""),leftBtnStr(""),rightBtnStr(""),belowStr(""),titleBtnStr("")
        {
        }
        void resetDefautlt()
        {
            topStr = "";
            topSubStr = "";
            leftBtnStr = "";
            rightBtnStr = "";
            belowStr = "";
            titleBtnStr = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(topStr, 0);
            _os.write(topSubStr, 1);
            _os.write(leftBtnStr, 2);
            _os.write(rightBtnStr, 3);
            _os.write(belowStr, 4);
            _os.write(titleBtnStr, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(topStr, 0, false);
            _is.read(topSubStr, 1, false);
            _is.read(leftBtnStr, 2, false);
            _is.read(rightBtnStr, 3, false);
            _is.read(belowStr, 4, false);
            _is.read(titleBtnStr, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(topStr,"topStr");
            _ds.display(topSubStr,"topSubStr");
            _ds.display(leftBtnStr,"leftBtnStr");
            _ds.display(rightBtnStr,"rightBtnStr");
            _ds.display(belowStr,"belowStr");
            _ds.display(titleBtnStr,"titleBtnStr");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(topStr, true);
            _ds.displaySimple(topSubStr, true);
            _ds.displaySimple(leftBtnStr, true);
            _ds.displaySimple(rightBtnStr, true);
            _ds.displaySimple(belowStr, true);
            _ds.displaySimple(titleBtnStr, false);
            return _os;
        }
    public:
        std::string topStr;
        std::string topSubStr;
        std::string leftBtnStr;
        std::string rightBtnStr;
        std::string belowStr;
        std::string titleBtnStr;
    };
    inline bool operator==(const PlayerPayViewCopyWriting&l, const PlayerPayViewCopyWriting&r)
    {
        return l.topStr == r.topStr && l.topSubStr == r.topSubStr && l.leftBtnStr == r.leftBtnStr && l.rightBtnStr == r.rightBtnStr && l.belowStr == r.belowStr && l.titleBtnStr == r.titleBtnStr;
    }
    inline bool operator!=(const PlayerPayViewCopyWriting&l, const PlayerPayViewCopyWriting&r)
    {
        return !(l == r);
    }

    struct VipPayCopyWriting : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipPayCopyWriting";
        }
        static string MD5()
        {
            return "ba1574c789cd7e4d03bf87a739768514";
        }
        VipPayCopyWriting()
        :sceneType(0)
        {
        }
        void resetDefautlt()
        {
            sceneType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sceneType, 0);
            _os.write(playerPayCopyWriting, 1);
            _os.write(payDlgCopyWriting, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sceneType, 0, false);
            _is.read(playerPayCopyWriting, 1, false);
            _is.read(payDlgCopyWriting, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sceneType,"sceneType");
            _ds.display(playerPayCopyWriting,"playerPayCopyWriting");
            _ds.display(payDlgCopyWriting,"payDlgCopyWriting");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sceneType, true);
            _ds.displaySimple(playerPayCopyWriting, true);
            _ds.displaySimple(payDlgCopyWriting, false);
            return _os;
        }
    public:
        taf::Int32 sceneType;
        jce::PlayerPayViewCopyWriting playerPayCopyWriting;
        jce::DialogViewCopyWriting payDlgCopyWriting;
    };
    inline bool operator==(const VipPayCopyWriting&l, const VipPayCopyWriting&r)
    {
        return l.sceneType == r.sceneType && l.playerPayCopyWriting == r.playerPayCopyWriting && l.payDlgCopyWriting == r.payDlgCopyWriting;
    }
    inline bool operator!=(const VipPayCopyWriting&l, const VipPayCopyWriting&r)
    {
        return !(l == r);
    }

    struct GetVideoPayInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetVideoPayInfoRequest";
        }
        static string MD5()
        {
            return "fe2588d2e1b0a680d25ba08ec392f77e";
        }
        GetVideoPayInfoRequest()
        :lid(""),cid(""),vid(""),type(0),queryType(0),payStatus(0)
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
            type = 0;
            queryType = 0;
            payStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
            _os.write(type, 3);
            _os.write(queryType, 4);
            _os.write(payStatus, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, false);
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
            _is.read(type, 3, false);
            _is.read(queryType, 4, false);
            _is.read(payStatus, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(type,"type");
            _ds.display(queryType,"queryType");
            _ds.display(payStatus,"payStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(queryType, true);
            _ds.displaySimple(payStatus, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
        taf::Int32 type;
        taf::Int32 queryType;
        taf::Int32 payStatus;
    };
    inline bool operator==(const GetVideoPayInfoRequest&l, const GetVideoPayInfoRequest&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.type == r.type && l.queryType == r.queryType && l.payStatus == r.payStatus;
    }
    inline bool operator!=(const GetVideoPayInfoRequest&l, const GetVideoPayInfoRequest&r)
    {
        return !(l == r);
    }

    struct GetVideoPayInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetVideoPayInfoResponse";
        }
        static string MD5()
        {
            return "c1d3eafb8bb252236436db539660eb11";
        }
        GetVideoPayInfoResponse()
        :errCode(0),lid(""),cid(""),vid(""),payState(0),startTime(0),endTime(0),singlePrice(""),vipPrice(""),canUsedCount(0),downloadState(0),iapSinglePrice(""),iapVipPrice(""),iapNonVipAppleId(""),iapVipAppleId(""),displayStyle(0),canUseTicket(true),noIapDay(0),iapDay(0),giftInfo(""),specialPayType(0),videoStatus(0),isExclusivePrivilegePayState(true),payWay(0),diamondVipPrice(""),diamondNormalPrice(""),diamondPayH5Url(""),exchangeRate(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            lid = "";
            cid = "";
            vid = "";
            payState = 0;
            startTime = 0;
            endTime = 0;
            singlePrice = "";
            vipPrice = "";
            canUsedCount = 0;
            downloadState = 0;
            iapSinglePrice = "";
            iapVipPrice = "";
            iapNonVipAppleId = "";
            iapVipAppleId = "";
            displayStyle = 0;
            canUseTicket = true;
            noIapDay = 0;
            iapDay = 0;
            giftInfo = "";
            specialPayType = 0;
            videoStatus = 0;
            isExclusivePrivilegePayState = true;
            payWay = 0;
            diamondVipPrice = "";
            diamondNormalPrice = "";
            diamondPayH5Url = "";
            exchangeRate = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(lid, 1);
            _os.write(cid, 2);
            _os.write(vid, 3);
            _os.write(payState, 4);
            _os.write(startTime, 5);
            _os.write(endTime, 6);
            _os.write(singlePrice, 7);
            _os.write(vipPrice, 8);
            _os.write(canUsedCount, 9);
            _os.write(downloadState, 10);
            _os.write(moreActionBar, 11);
            _os.write(copywriteConfig, 12);
            _os.write(iapSinglePrice, 13);
            _os.write(iapVipPrice, 14);
            _os.write(iapNonVipAppleId, 15);
            _os.write(iapVipAppleId, 16);
            _os.write(displayStyle, 17);
            _os.write(canUseTicket, 18);
            _os.write(noIapDay, 19);
            _os.write(iapDay, 20);
            _os.write(giftInfo, 21);
            _os.write(specialPayType, 22);
            _os.write(vipPayCopyWritingList, 23);
            _os.write(videoStatus, 24);
            _os.write(isExclusivePrivilegePayState, 25);
            _os.write(payWay, 26);
            _os.write(diamondVipPrice, 27);
            _os.write(diamondNormalPrice, 28);
            _os.write(diamondPayH5Url, 29);
            _os.write(exchangeRate, 30);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(lid, 1, false);
            _is.read(cid, 2, false);
            _is.read(vid, 3, false);
            _is.read(payState, 4, false);
            _is.read(startTime, 5, false);
            _is.read(endTime, 6, false);
            _is.read(singlePrice, 7, false);
            _is.read(vipPrice, 8, false);
            _is.read(canUsedCount, 9, false);
            _is.read(downloadState, 10, false);
            _is.read(moreActionBar, 11, false);
            _is.read(copywriteConfig, 12, false);
            _is.read(iapSinglePrice, 13, false);
            _is.read(iapVipPrice, 14, false);
            _is.read(iapNonVipAppleId, 15, false);
            _is.read(iapVipAppleId, 16, false);
            _is.read(displayStyle, 17, false);
            _is.read(canUseTicket, 18, false);
            _is.read(noIapDay, 19, false);
            _is.read(iapDay, 20, false);
            _is.read(giftInfo, 21, false);
            _is.read(specialPayType, 22, false);
            _is.read(vipPayCopyWritingList, 23, false);
            _is.read(videoStatus, 24, false);
            _is.read(isExclusivePrivilegePayState, 25, false);
            _is.read(payWay, 26, false);
            _is.read(diamondVipPrice, 27, false);
            _is.read(diamondNormalPrice, 28, false);
            _is.read(diamondPayH5Url, 29, false);
            _is.read(exchangeRate, 30, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(payState,"payState");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(singlePrice,"singlePrice");
            _ds.display(vipPrice,"vipPrice");
            _ds.display(canUsedCount,"canUsedCount");
            _ds.display(downloadState,"downloadState");
            _ds.display(moreActionBar,"moreActionBar");
            _ds.display(copywriteConfig,"copywriteConfig");
            _ds.display(iapSinglePrice,"iapSinglePrice");
            _ds.display(iapVipPrice,"iapVipPrice");
            _ds.display(iapNonVipAppleId,"iapNonVipAppleId");
            _ds.display(iapVipAppleId,"iapVipAppleId");
            _ds.display(displayStyle,"displayStyle");
            _ds.display(canUseTicket,"canUseTicket");
            _ds.display(noIapDay,"noIapDay");
            _ds.display(iapDay,"iapDay");
            _ds.display(giftInfo,"giftInfo");
            _ds.display(specialPayType,"specialPayType");
            _ds.display(vipPayCopyWritingList,"vipPayCopyWritingList");
            _ds.display(videoStatus,"videoStatus");
            _ds.display(isExclusivePrivilegePayState,"isExclusivePrivilegePayState");
            _ds.display(payWay,"payWay");
            _ds.display(diamondVipPrice,"diamondVipPrice");
            _ds.display(diamondNormalPrice,"diamondNormalPrice");
            _ds.display(diamondPayH5Url,"diamondPayH5Url");
            _ds.display(exchangeRate,"exchangeRate");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(payState, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(singlePrice, true);
            _ds.displaySimple(vipPrice, true);
            _ds.displaySimple(canUsedCount, true);
            _ds.displaySimple(downloadState, true);
            _ds.displaySimple(moreActionBar, true);
            _ds.displaySimple(copywriteConfig, true);
            _ds.displaySimple(iapSinglePrice, true);
            _ds.displaySimple(iapVipPrice, true);
            _ds.displaySimple(iapNonVipAppleId, true);
            _ds.displaySimple(iapVipAppleId, true);
            _ds.displaySimple(displayStyle, true);
            _ds.displaySimple(canUseTicket, true);
            _ds.displaySimple(noIapDay, true);
            _ds.displaySimple(iapDay, true);
            _ds.displaySimple(giftInfo, true);
            _ds.displaySimple(specialPayType, true);
            _ds.displaySimple(vipPayCopyWritingList, true);
            _ds.displaySimple(videoStatus, true);
            _ds.displaySimple(isExclusivePrivilegePayState, true);
            _ds.displaySimple(payWay, true);
            _ds.displaySimple(diamondVipPrice, true);
            _ds.displaySimple(diamondNormalPrice, true);
            _ds.displaySimple(diamondPayH5Url, true);
            _ds.displaySimple(exchangeRate, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string lid;
        std::string cid;
        std::string vid;
        taf::Int32 payState;
        taf::Int64 startTime;
        taf::Int64 endTime;
        std::string singlePrice;
        std::string vipPrice;
        taf::Int32 canUsedCount;
        taf::Int32 downloadState;
        map<taf::Int32, jce::ActionBarInfo> moreActionBar;
        map<taf::Int32, std::string> copywriteConfig;
        std::string iapSinglePrice;
        std::string iapVipPrice;
        std::string iapNonVipAppleId;
        std::string iapVipAppleId;
        taf::Int32 displayStyle;
        taf::Bool canUseTicket;
        taf::Int32 noIapDay;
        taf::Int32 iapDay;
        std::string giftInfo;
        taf::Int32 specialPayType;
        vector<jce::VipPayCopyWriting> vipPayCopyWritingList;
        taf::Int32 videoStatus;
        taf::Bool isExclusivePrivilegePayState;
        taf::Int32 payWay;
        std::string diamondVipPrice;
        std::string diamondNormalPrice;
        std::string diamondPayH5Url;
        taf::Float exchangeRate;
    };
    inline bool operator==(const GetVideoPayInfoResponse&l, const GetVideoPayInfoResponse&r)
    {
        return l.errCode == r.errCode && l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.payState == r.payState && l.startTime == r.startTime && l.endTime == r.endTime && l.singlePrice == r.singlePrice && l.vipPrice == r.vipPrice && l.canUsedCount == r.canUsedCount && l.downloadState == r.downloadState && l.moreActionBar == r.moreActionBar && l.copywriteConfig == r.copywriteConfig && l.iapSinglePrice == r.iapSinglePrice && l.iapVipPrice == r.iapVipPrice && l.iapNonVipAppleId == r.iapNonVipAppleId && l.iapVipAppleId == r.iapVipAppleId && l.displayStyle == r.displayStyle && l.canUseTicket == r.canUseTicket && l.noIapDay == r.noIapDay && l.iapDay == r.iapDay && l.giftInfo == r.giftInfo && l.specialPayType == r.specialPayType && l.vipPayCopyWritingList == r.vipPayCopyWritingList && l.videoStatus == r.videoStatus && l.isExclusivePrivilegePayState == r.isExclusivePrivilegePayState && l.payWay == r.payWay && l.diamondVipPrice == r.diamondVipPrice && l.diamondNormalPrice == r.diamondNormalPrice && l.diamondPayH5Url == r.diamondPayH5Url && l.exchangeRate == r.exchangeRate;
    }
    inline bool operator!=(const GetVideoPayInfoResponse&l, const GetVideoPayInfoResponse&r)
    {
        return !(l == r);
    }

    struct DiamondPayRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DiamondPayRequest";
        }
        static string MD5()
        {
            return "257e3ed70abf324bca9971d41f4408fc";
        }
        DiamondPayRequest()
        :senceType(0),productId(""),aid(""),subSenceType(0)
        {
        }
        void resetDefautlt()
        {
            senceType = 0;
            productId = "";
            aid = "";
            subSenceType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(senceType, 0);
            _os.write(productId, 1);
            _os.write(aid, 2);
            _os.write(subSenceType, 3);
            _os.write(subProductIdList, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(senceType, 0, true);
            _is.read(productId, 1, true);
            _is.read(aid, 2, true);
            _is.read(subSenceType, 3, false);
            _is.read(subProductIdList, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(senceType,"senceType");
            _ds.display(productId,"productId");
            _ds.display(aid,"aid");
            _ds.display(subSenceType,"subSenceType");
            _ds.display(subProductIdList,"subProductIdList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(senceType, true);
            _ds.displaySimple(productId, true);
            _ds.displaySimple(aid, true);
            _ds.displaySimple(subSenceType, true);
            _ds.displaySimple(subProductIdList, false);
            return _os;
        }
    public:
        taf::Int32 senceType;
        std::string productId;
        std::string aid;
        taf::Int32 subSenceType;
        vector<std::string> subProductIdList;
    };
    inline bool operator==(const DiamondPayRequest&l, const DiamondPayRequest&r)
    {
        return l.senceType == r.senceType && l.productId == r.productId && l.aid == r.aid && l.subSenceType == r.subSenceType && l.subProductIdList == r.subProductIdList;
    }
    inline bool operator!=(const DiamondPayRequest&l, const DiamondPayRequest&r)
    {
        return !(l == r);
    }

    struct DiamondPayResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.DiamondPayResponse";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        DiamondPayResponse()
        :errCode(0),errMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
    };
    inline bool operator==(const DiamondPayResponse&l, const DiamondPayResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg;
    }
    inline bool operator!=(const DiamondPayResponse&l, const DiamondPayResponse&r)
    {
        return !(l == r);
    }

    struct PriceCloudRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PriceCloudRequest";
        }
        static string MD5()
        {
            return "d35cdb05f98cdc1b0208c77509abde05";
        }
        PriceCloudRequest()
        :cid(""),vid(""),type(0),offerId(""),aid("")
        {
        }
        void resetDefautlt()
        {
            cid = "";
            vid = "";
            type = 0;
            offerId = "";
            aid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cid, 0);
            _os.write(vid, 1);
            _os.write(type, 2);
            _os.write(offerId, 3);
            _os.write(aid, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cid, 0, true);
            _is.read(vid, 1, false);
            _is.read(type, 2, false);
            _is.read(offerId, 3, false);
            _is.read(aid, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(type,"type");
            _ds.display(offerId,"offerId");
            _ds.display(aid,"aid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(offerId, true);
            _ds.displaySimple(aid, false);
            return _os;
        }
    public:
        std::string cid;
        std::string vid;
        taf::Int32 type;
        std::string offerId;
        std::string aid;
    };
    inline bool operator==(const PriceCloudRequest&l, const PriceCloudRequest&r)
    {
        return l.cid == r.cid && l.vid == r.vid && l.type == r.type && l.offerId == r.offerId && l.aid == r.aid;
    }
    inline bool operator!=(const PriceCloudRequest&l, const PriceCloudRequest&r)
    {
        return !(l == r);
    }

    struct PriceCloudResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PriceCloudResponse";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        PriceCloudResponse()
        :errCode(0),token(""),url_params("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            token = "";
            url_params = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(token, 1);
            _os.write(url_params, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(token, 1, false);
            _is.read(url_params, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(token,"token");
            _ds.display(url_params,"url_params");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(token, true);
            _ds.displaySimple(url_params, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string token;
        std::string url_params;
    };
    inline bool operator==(const PriceCloudResponse&l, const PriceCloudResponse&r)
    {
        return l.errCode == r.errCode && l.token == r.token && l.url_params == r.url_params;
    }
    inline bool operator!=(const PriceCloudResponse&l, const PriceCloudResponse&r)
    {
        return !(l == r);
    }

    struct VipOrderListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipOrderListRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        VipOrderListRequest()
        :pageContext("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        std::string pageContext;
    };
    inline bool operator==(const VipOrderListRequest&l, const VipOrderListRequest&r)
    {
        return l.pageContext == r.pageContext;
    }
    inline bool operator!=(const VipOrderListRequest&l, const VipOrderListRequest&r)
    {
        return !(l == r);
    }

    struct VipOrderListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipOrderListResponse";
        }
        static string MD5()
        {
            return "977cfada0207993a72002bd06a09fc2f";
        }
        VipOrderListResponse()
        :errCode(0),total(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            total = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(total, 1);
            _os.write(pageContext, 2);
            _os.write(orderItemList, 3);
            _os.write(hasNextPage, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(total, 1, false);
            _is.read(pageContext, 2, false);
            _is.read(orderItemList, 3, false);
            _is.read(hasNextPage, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(total,"total");
            _ds.display(pageContext,"pageContext");
            _ds.display(orderItemList,"orderItemList");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(total, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(orderItemList, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 total;
        std::string pageContext;
        vector<jce::VipOrderItem> orderItemList;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const VipOrderListResponse&l, const VipOrderListResponse&r)
    {
        return l.errCode == r.errCode && l.total == r.total && l.pageContext == r.pageContext && l.orderItemList == r.orderItemList && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const VipOrderListResponse&l, const VipOrderListResponse&r)
    {
        return !(l == r);
    }

    struct GetTicketListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetTicketListRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        GetTicketListRequest()
        :test(0)
        {
        }
        void resetDefautlt()
        {
            test = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(test, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(test, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(test,"test");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(test, false);
            return _os;
        }
    public:
        taf::Int32 test;
    };
    inline bool operator==(const GetTicketListRequest&l, const GetTicketListRequest&r)
    {
        return l.test == r.test;
    }
    inline bool operator!=(const GetTicketListRequest&l, const GetTicketListRequest&r)
    {
        return !(l == r);
    }

    struct GetTicketListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetTicketListResponse";
        }
        static string MD5()
        {
            return "fe3b74a9bc8fe9b14c77c67ae5e1918a";
        }
        GetTicketListResponse()
        :errCode(0),total(0),visiterTotal(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            total = 0;
            visiterTotal = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(total, 1);
            _os.write(visiterTotal, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(total, 1, false);
            _is.read(visiterTotal, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(total,"total");
            _ds.display(visiterTotal,"visiterTotal");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(total, true);
            _ds.displaySimple(visiterTotal, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 total;
        taf::Int32 visiterTotal;
    };
    inline bool operator==(const GetTicketListResponse&l, const GetTicketListResponse&r)
    {
        return l.errCode == r.errCode && l.total == r.total && l.visiterTotal == r.visiterTotal;
    }
    inline bool operator!=(const GetTicketListResponse&l, const GetTicketListResponse&r)
    {
        return !(l == r);
    }

    struct TicketTradeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TicketTradeRequest";
        }
        static string MD5()
        {
            return "a9273a406ec78942a070192f5f51799d";
        }
        TicketTradeRequest()
        :lid(""),cid(""),vid(""),type(0),userType(0)
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
            type = 0;
            userType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
            _os.write(type, 3);
            _os.write(userType, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, false);
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
            _is.read(type, 3, false);
            _is.read(userType, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(type,"type");
            _ds.display(userType,"userType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(userType, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
        taf::Int32 type;
        taf::Int32 userType;
    };
    inline bool operator==(const TicketTradeRequest&l, const TicketTradeRequest&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.type == r.type && l.userType == r.userType;
    }
    inline bool operator!=(const TicketTradeRequest&l, const TicketTradeRequest&r)
    {
        return !(l == r);
    }

    struct TicketTradeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TicketTradeResponse";
        }
        static string MD5()
        {
            return "5bb5836bcf89c58da65b049e3d303e65";
        }
        TicketTradeResponse()
        :errCode(0),errMsg(""),cid(""),vid("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
            cid = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(cid, 2);
            _os.write(vid, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, false);
            _is.read(cid, 2, false);
            _is.read(vid, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        std::string cid;
        std::string vid;
    };
    inline bool operator==(const TicketTradeResponse&l, const TicketTradeResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.cid == r.cid && l.vid == r.vid;
    }
    inline bool operator!=(const TicketTradeResponse&l, const TicketTradeResponse&r)
    {
        return !(l == r);
    }

    struct VIPPayProduct : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VIPPayProduct";
        }
        static string MD5()
        {
            return "4a30250aab7cc13ef8a0a1e2003d840b";
        }
        VIPPayProduct()
        :serviceCode(""),goodSid(""),wxServiceCode(""),wxGoodSid("")
        {
        }
        void resetDefautlt()
        {
            serviceCode = "";
            goodSid = "";
            wxServiceCode = "";
            wxGoodSid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(productName, 0);
            _os.write(serviceCode, 1);
            _os.write(goodSid, 2);
            _os.write(wxServiceCode, 3);
            _os.write(wxGoodSid, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(productName, 0, true);
            _is.read(serviceCode, 1, true);
            _is.read(goodSid, 2, true);
            _is.read(wxServiceCode, 3, false);
            _is.read(wxGoodSid, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(productName,"productName");
            _ds.display(serviceCode,"serviceCode");
            _ds.display(goodSid,"goodSid");
            _ds.display(wxServiceCode,"wxServiceCode");
            _ds.display(wxGoodSid,"wxGoodSid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(productName, true);
            _ds.displaySimple(serviceCode, true);
            _ds.displaySimple(goodSid, true);
            _ds.displaySimple(wxServiceCode, true);
            _ds.displaySimple(wxGoodSid, false);
            return _os;
        }
    public:
        jce::IconTagText productName;
        std::string serviceCode;
        std::string goodSid;
        std::string wxServiceCode;
        std::string wxGoodSid;
    };
    inline bool operator==(const VIPPayProduct&l, const VIPPayProduct&r)
    {
        return l.productName == r.productName && l.serviceCode == r.serviceCode && l.goodSid == r.goodSid && l.wxServiceCode == r.wxServiceCode && l.wxGoodSid == r.wxGoodSid;
    }
    inline bool operator!=(const VIPPayProduct&l, const VIPPayProduct&r)
    {
        return !(l == r);
    }

    struct VIPPayProductListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VIPPayProductListRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        VIPPayProductListRequest()
        :flag(0)
        {
        }
        void resetDefautlt()
        {
            flag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(flag, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(flag, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(flag,"flag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(flag, false);
            return _os;
        }
    public:
        taf::Int32 flag;
    };
    inline bool operator==(const VIPPayProductListRequest&l, const VIPPayProductListRequest&r)
    {
        return l.flag == r.flag;
    }
    inline bool operator!=(const VIPPayProductListRequest&l, const VIPPayProductListRequest&r)
    {
        return !(l == r);
    }

    struct VIPPayProductListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VIPPayProductListResponse";
        }
        static string MD5()
        {
            return "5da54f751e6f63815c83e072cdfebba5";
        }
        VIPPayProductListResponse()
        :errCode(0),VipImageUrl(""),SkipAdImageUrl(""),isAutoRenew(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            VipImageUrl = "";
            SkipAdImageUrl = "";
            isAutoRenew = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(VipImageUrl, 1);
            _os.write(SkipAdImageUrl, 2);
            _os.write(productList, 3);
            _os.write(isAutoRenew, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(VipImageUrl, 1, false);
            _is.read(SkipAdImageUrl, 2, false);
            _is.read(productList, 3, false);
            _is.read(isAutoRenew, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(VipImageUrl,"VipImageUrl");
            _ds.display(SkipAdImageUrl,"SkipAdImageUrl");
            _ds.display(productList,"productList");
            _ds.display(isAutoRenew,"isAutoRenew");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(VipImageUrl, true);
            _ds.displaySimple(SkipAdImageUrl, true);
            _ds.displaySimple(productList, true);
            _ds.displaySimple(isAutoRenew, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string VipImageUrl;
        std::string SkipAdImageUrl;
        vector<jce::VIPPayProduct> productList;
        taf::Bool isAutoRenew;
    };
    inline bool operator==(const VIPPayProductListResponse&l, const VIPPayProductListResponse&r)
    {
        return l.errCode == r.errCode && l.VipImageUrl == r.VipImageUrl && l.SkipAdImageUrl == r.SkipAdImageUrl && l.productList == r.productList && l.isAutoRenew == r.isAutoRenew;
    }
    inline bool operator!=(const VIPPayProductListResponse&l, const VIPPayProductListResponse&r)
    {
        return !(l == r);
    }

    struct GetLiveGiftListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetLiveGiftListRequest";
        }
        static string MD5()
        {
            return "c65775a810dcf4128097c69a9b5b4c61";
        }
        GetLiveGiftListRequest()
        :pid(""),keyType(0),actorId(""),propsDataKey(""),pointTime(0),model(0),idType(0)
        {
        }
        void resetDefautlt()
        {
            pid = "";
            keyType = 0;
            actorId = "";
            propsDataKey = "";
            pointTime = 0;
            model = 0;
            idType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pid, 0);
            _os.write(keyType, 1);
            _os.write(actorId, 2);
            _os.write(propsDataKey, 3);
            _os.write(pointTime, 4);
            _os.write(model, 5);
            _os.write(idType, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pid, 0, true);
            _is.read(keyType, 1, false);
            _is.read(actorId, 2, false);
            _is.read(propsDataKey, 3, false);
            _is.read(pointTime, 4, false);
            _is.read(model, 5, false);
            _is.read(idType, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pid,"pid");
            _ds.display(keyType,"keyType");
            _ds.display(actorId,"actorId");
            _ds.display(propsDataKey,"propsDataKey");
            _ds.display(pointTime,"pointTime");
            _ds.display(model,"model");
            _ds.display(idType,"idType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(keyType, true);
            _ds.displaySimple(actorId, true);
            _ds.displaySimple(propsDataKey, true);
            _ds.displaySimple(pointTime, true);
            _ds.displaySimple(model, true);
            _ds.displaySimple(idType, false);
            return _os;
        }
    public:
        std::string pid;
        taf::Int32 keyType;
        std::string actorId;
        std::string propsDataKey;
        taf::Int64 pointTime;
        taf::Int32 model;
        taf::Int32 idType;
    };
    inline bool operator==(const GetLiveGiftListRequest&l, const GetLiveGiftListRequest&r)
    {
        return l.pid == r.pid && l.keyType == r.keyType && l.actorId == r.actorId && l.propsDataKey == r.propsDataKey && l.pointTime == r.pointTime && l.model == r.model && l.idType == r.idType;
    }
    inline bool operator!=(const GetLiveGiftListRequest&l, const GetLiveGiftListRequest&r)
    {
        return !(l == r);
    }

    struct GetLiveGiftListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetLiveGiftListResponse";
        }
        static string MD5()
        {
            return "1c8039e25018d140e900768938dd9ae9";
        }
        GetLiveGiftListResponse()
        :errCode(0),giftTitle(""),giftDes(""),freeGiftCount(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            giftTitle = "";
            giftDes = "";
            freeGiftCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(giftTitle, 1);
            _os.write(giftDes, 2);
            _os.write(giftList, 3);
            _os.write(freeGiftCount, 4);
            _os.write(qzTopicBarInfo, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(giftTitle, 1, false);
            _is.read(giftDes, 2, false);
            _is.read(giftList, 3, false);
            _is.read(freeGiftCount, 4, false);
            _is.read(qzTopicBarInfo, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(giftTitle,"giftTitle");
            _ds.display(giftDes,"giftDes");
            _ds.display(giftList,"giftList");
            _ds.display(freeGiftCount,"freeGiftCount");
            _ds.display(qzTopicBarInfo,"qzTopicBarInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(giftTitle, true);
            _ds.displaySimple(giftDes, true);
            _ds.displaySimple(giftList, true);
            _ds.displaySimple(freeGiftCount, true);
            _ds.displaySimple(qzTopicBarInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string giftTitle;
        std::string giftDes;
        vector<jce::LiveGiftItem> giftList;
        taf::Int32 freeGiftCount;
        jce::ActionBarInfo qzTopicBarInfo;
    };
    inline bool operator==(const GetLiveGiftListResponse&l, const GetLiveGiftListResponse&r)
    {
        return l.errCode == r.errCode && l.giftTitle == r.giftTitle && l.giftDes == r.giftDes && l.giftList == r.giftList && l.freeGiftCount == r.freeGiftCount && l.qzTopicBarInfo == r.qzTopicBarInfo;
    }
    inline bool operator!=(const GetLiveGiftListResponse&l, const GetLiveGiftListResponse&r)
    {
        return !(l == r);
    }

    struct ApplyGiftRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ApplyGiftRequest";
        }
        static string MD5()
        {
            return "4f1a848e49f9cc2e568035e1991487ee";
        }
        ApplyGiftRequest()
        :productId(""),actorId(""),pid(""),keyType(0),propsDataKey(""),model(0),productNum(0),productType(0),overRank(0),idType(0)
        {
        }
        void resetDefautlt()
        {
            productId = "";
            actorId = "";
            pid = "";
            keyType = 0;
            propsDataKey = "";
            model = 0;
            productNum = 0;
            productType = 0;
            overRank = 0;
            idType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(productId, 0);
            _os.write(actorId, 1);
            _os.write(pid, 2);
            _os.write(keyType, 3);
            _os.write(propsDataKey, 4);
            _os.write(model, 5);
            _os.write(productNum, 6);
            _os.write(productType, 7);
            _os.write(overRank, 8);
            _os.write(idType, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(productId, 0, true);
            _is.read(actorId, 1, false);
            _is.read(pid, 2, false);
            _is.read(keyType, 3, false);
            _is.read(propsDataKey, 4, false);
            _is.read(model, 5, false);
            _is.read(productNum, 6, false);
            _is.read(productType, 7, false);
            _is.read(overRank, 8, false);
            _is.read(idType, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(productId,"productId");
            _ds.display(actorId,"actorId");
            _ds.display(pid,"pid");
            _ds.display(keyType,"keyType");
            _ds.display(propsDataKey,"propsDataKey");
            _ds.display(model,"model");
            _ds.display(productNum,"productNum");
            _ds.display(productType,"productType");
            _ds.display(overRank,"overRank");
            _ds.display(idType,"idType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(productId, true);
            _ds.displaySimple(actorId, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(keyType, true);
            _ds.displaySimple(propsDataKey, true);
            _ds.displaySimple(model, true);
            _ds.displaySimple(productNum, true);
            _ds.displaySimple(productType, true);
            _ds.displaySimple(overRank, true);
            _ds.displaySimple(idType, false);
            return _os;
        }
    public:
        std::string productId;
        std::string actorId;
        std::string pid;
        taf::Int32 keyType;
        std::string propsDataKey;
        taf::Int32 model;
        taf::Int64 productNum;
        taf::Int32 productType;
        taf::Int32 overRank;
        taf::Int32 idType;
    };
    inline bool operator==(const ApplyGiftRequest&l, const ApplyGiftRequest&r)
    {
        return l.productId == r.productId && l.actorId == r.actorId && l.pid == r.pid && l.keyType == r.keyType && l.propsDataKey == r.propsDataKey && l.model == r.model && l.productNum == r.productNum && l.productType == r.productType && l.overRank == r.overRank && l.idType == r.idType;
    }
    inline bool operator!=(const ApplyGiftRequest&l, const ApplyGiftRequest&r)
    {
        return !(l == r);
    }

    struct ApplyGiftResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ApplyGiftResponse";
        }
        static string MD5()
        {
            return "b504138926c7895877ed011390510f6b";
        }
        ApplyGiftResponse()
        :errCode(0),rank(0),productType(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            rank = 0;
            productType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(giftItem, 1);
            _os.write(rank, 2);
            _os.write(productType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(giftItem, 1, false);
            _is.read(rank, 2, false);
            _is.read(productType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(giftItem,"giftItem");
            _ds.display(rank,"rank");
            _ds.display(productType,"productType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(giftItem, true);
            _ds.displaySimple(rank, true);
            _ds.displaySimple(productType, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::LiveGiftItem giftItem;
        taf::Int64 rank;
        taf::Int32 productType;
    };
    inline bool operator==(const ApplyGiftResponse&l, const ApplyGiftResponse&r)
    {
        return l.errCode == r.errCode && l.giftItem == r.giftItem && l.rank == r.rank && l.productType == r.productType;
    }
    inline bool operator!=(const ApplyGiftResponse&l, const ApplyGiftResponse&r)
    {
        return !(l == r);
    }

    struct GetVideoDownloadInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetVideoDownloadInfoRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        GetVideoDownloadInfoRequest()
        :lid(""),cid(""),vid("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, false);
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
    };
    inline bool operator==(const GetVideoDownloadInfoRequest&l, const GetVideoDownloadInfoRequest&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid;
    }
    inline bool operator!=(const GetVideoDownloadInfoRequest&l, const GetVideoDownloadInfoRequest&r)
    {
        return !(l == r);
    }

    struct GetVideoDownloadInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetVideoDownloadInfoResponse";
        }
        static string MD5()
        {
            return "12acffd077a99cd056ec925650550a19";
        }
        GetVideoDownloadInfoResponse()
        :errCode(0),lid(""),cid(""),vid(""),downloadState(0),tips(""),negativeBtn(""),positiveBtn("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            lid = "";
            cid = "";
            vid = "";
            downloadState = 0;
            tips = "";
            negativeBtn = "";
            positiveBtn = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(lid, 1);
            _os.write(cid, 2);
            _os.write(vid, 3);
            _os.write(downloadState, 4);
            _os.write(tips, 5);
            _os.write(action, 6);
            _os.write(negativeBtn, 7);
            _os.write(positiveBtn, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(lid, 1, false);
            _is.read(cid, 2, false);
            _is.read(vid, 3, false);
            _is.read(downloadState, 4, false);
            _is.read(tips, 5, false);
            _is.read(action, 6, false);
            _is.read(negativeBtn, 7, false);
            _is.read(positiveBtn, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(downloadState,"downloadState");
            _ds.display(tips,"tips");
            _ds.display(action,"action");
            _ds.display(negativeBtn,"negativeBtn");
            _ds.display(positiveBtn,"positiveBtn");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(downloadState, true);
            _ds.displaySimple(tips, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(negativeBtn, true);
            _ds.displaySimple(positiveBtn, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string lid;
        std::string cid;
        std::string vid;
        taf::Int32 downloadState;
        std::string tips;
        jce::Action action;
        std::string negativeBtn;
        std::string positiveBtn;
    };
    inline bool operator==(const GetVideoDownloadInfoResponse&l, const GetVideoDownloadInfoResponse&r)
    {
        return l.errCode == r.errCode && l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.downloadState == r.downloadState && l.tips == r.tips && l.action == r.action && l.negativeBtn == r.negativeBtn && l.positiveBtn == r.positiveBtn;
    }
    inline bool operator!=(const GetVideoDownloadInfoResponse&l, const GetVideoDownloadInfoResponse&r)
    {
        return !(l == r);
    }

    struct CoverPrice : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CoverPrice";
        }
        static string MD5()
        {
            return "8c93d07367bac72d4f4c2892aae9f0e4";
        }
        CoverPrice()
        :ordinaryPrice(0),vipPrice(0),ordinaryIapPrice(0),vipIapPrice(0)
        {
        }
        void resetDefautlt()
        {
            ordinaryPrice = 0;
            vipPrice = 0;
            ordinaryIapPrice = 0;
            vipIapPrice = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ordinaryPrice, 0);
            _os.write(vipPrice, 1);
            _os.write(ordinaryIapPrice, 2);
            _os.write(vipIapPrice, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ordinaryPrice, 0, false);
            _is.read(vipPrice, 1, false);
            _is.read(ordinaryIapPrice, 2, false);
            _is.read(vipIapPrice, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ordinaryPrice,"ordinaryPrice");
            _ds.display(vipPrice,"vipPrice");
            _ds.display(ordinaryIapPrice,"ordinaryIapPrice");
            _ds.display(vipIapPrice,"vipIapPrice");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ordinaryPrice, true);
            _ds.displaySimple(vipPrice, true);
            _ds.displaySimple(ordinaryIapPrice, true);
            _ds.displaySimple(vipIapPrice, false);
            return _os;
        }
    public:
        taf::Int32 ordinaryPrice;
        taf::Int32 vipPrice;
        taf::Int32 ordinaryIapPrice;
        taf::Int32 vipIapPrice;
    };
    inline bool operator==(const CoverPrice&l, const CoverPrice&r)
    {
        return l.ordinaryPrice == r.ordinaryPrice && l.vipPrice == r.vipPrice && l.ordinaryIapPrice == r.ordinaryIapPrice && l.vipIapPrice == r.vipIapPrice;
    }
    inline bool operator!=(const CoverPrice&l, const CoverPrice&r)
    {
        return !(l == r);
    }

    struct CheckDownloadCopyrightResult : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckDownloadCopyrightResult";
        }
        static string MD5()
        {
            return "43e7cbfefe5df300b0b0b25280b1a74c";
        }
        CheckDownloadCopyrightResult()
        :downloadState(0),detailCode(0),detailTips(""),cacheCheckVip(true),errorCode(0)
        {
        }
        void resetDefautlt()
        {
            downloadState = 0;
            detailCode = 0;
            detailTips = "";
            cacheCheckVip = true;
            errorCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(requestItems, 0);
            _os.write(downloadState, 1);
            _os.write(detailCode, 2);
            _os.write(detailTips, 3);
            _os.write(cacheCheckVip, 4);
            _os.write(errorCode, 5);
            _os.write(priceInfo, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(requestItems, 0, false);
            _is.read(downloadState, 1, false);
            _is.read(detailCode, 2, false);
            _is.read(detailTips, 3, false);
            _is.read(cacheCheckVip, 4, false);
            _is.read(errorCode, 5, false);
            _is.read(priceInfo, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(requestItems,"requestItems");
            _ds.display(downloadState,"downloadState");
            _ds.display(detailCode,"detailCode");
            _ds.display(detailTips,"detailTips");
            _ds.display(cacheCheckVip,"cacheCheckVip");
            _ds.display(errorCode,"errorCode");
            _ds.display(priceInfo,"priceInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(requestItems, true);
            _ds.displaySimple(downloadState, true);
            _ds.displaySimple(detailCode, true);
            _ds.displaySimple(detailTips, true);
            _ds.displaySimple(cacheCheckVip, true);
            _ds.displaySimple(errorCode, true);
            _ds.displaySimple(priceInfo, false);
            return _os;
        }
    public:
        vector<jce::VideoBaseParams> requestItems;
        taf::Int32 downloadState;
        taf::Int32 detailCode;
        std::string detailTips;
        taf::Bool cacheCheckVip;
        taf::Int32 errorCode;
        jce::CoverPrice priceInfo;
    };
    inline bool operator==(const CheckDownloadCopyrightResult&l, const CheckDownloadCopyrightResult&r)
    {
        return l.requestItems == r.requestItems && l.downloadState == r.downloadState && l.detailCode == r.detailCode && l.detailTips == r.detailTips && l.cacheCheckVip == r.cacheCheckVip && l.errorCode == r.errorCode && l.priceInfo == r.priceInfo;
    }
    inline bool operator!=(const CheckDownloadCopyrightResult&l, const CheckDownloadCopyrightResult&r)
    {
        return !(l == r);
    }

    struct CheckDownloadCopyrightListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckDownloadCopyrightListRequest";
        }
        static string MD5()
        {
            return "3797d360952903ab3021b0814df8841b";
        }
        CheckDownloadCopyrightListRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(downloadCopyrightItems, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(downloadCopyrightItems, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(downloadCopyrightItems,"downloadCopyrightItems");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(downloadCopyrightItems, false);
            return _os;
        }
    public:
        vector<jce::VideoBaseParams> downloadCopyrightItems;
    };
    inline bool operator==(const CheckDownloadCopyrightListRequest&l, const CheckDownloadCopyrightListRequest&r)
    {
        return l.downloadCopyrightItems == r.downloadCopyrightItems;
    }
    inline bool operator!=(const CheckDownloadCopyrightListRequest&l, const CheckDownloadCopyrightListRequest&r)
    {
        return !(l == r);
    }

    struct CheckDownloadCopyrightListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckDownloadCopyrightListResponse";
        }
        static string MD5()
        {
            return "17ace612d6ee9a01cc5e26bbe3d5829a";
        }
        CheckDownloadCopyrightListResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(downloadCopyrightResults, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(downloadCopyrightResults, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(downloadCopyrightResults,"downloadCopyrightResults");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(downloadCopyrightResults, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::CheckDownloadCopyrightResult> downloadCopyrightResults;
    };
    inline bool operator==(const CheckDownloadCopyrightListResponse&l, const CheckDownloadCopyrightListResponse&r)
    {
        return l.errCode == r.errCode && l.downloadCopyrightResults == r.downloadCopyrightResults;
    }
    inline bool operator!=(const CheckDownloadCopyrightListResponse&l, const CheckDownloadCopyrightListResponse&r)
    {
        return !(l == r);
    }

    struct CheckDownloadCopyrightRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckDownloadCopyrightRequest";
        }
        static string MD5()
        {
            return "02c8b7c8dd015754a72e807a03033d5e";
        }
        CheckDownloadCopyrightRequest()
        :lid(""),cid(""),vid(""),type(0)
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
            _os.write(type, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, false);
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
            _is.read(type, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
        taf::Int32 type;
    };
    inline bool operator==(const CheckDownloadCopyrightRequest&l, const CheckDownloadCopyrightRequest&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.type == r.type;
    }
    inline bool operator!=(const CheckDownloadCopyrightRequest&l, const CheckDownloadCopyrightRequest&r)
    {
        return !(l == r);
    }

    struct CheckDownloadCopyrightResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckDownloadCopyrightResponse";
        }
        static string MD5()
        {
            return "9c1a0e0340c61de5a190b8ea2a03949c";
        }
        CheckDownloadCopyrightResponse()
        :errCode(0),lid(""),cid(""),vid(""),downloadState(0),detailCode(0),detailTips(""),cacheCheckVip(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            lid = "";
            cid = "";
            vid = "";
            downloadState = 0;
            detailCode = 0;
            detailTips = "";
            cacheCheckVip = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(lid, 1);
            _os.write(cid, 2);
            _os.write(vid, 3);
            _os.write(downloadState, 4);
            _os.write(detailCode, 5);
            _os.write(detailTips, 6);
            _os.write(cacheCheckVip, 7);
            _os.write(priceInfo, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(lid, 1, false);
            _is.read(cid, 2, false);
            _is.read(vid, 3, false);
            _is.read(downloadState, 4, false);
            _is.read(detailCode, 5, false);
            _is.read(detailTips, 6, false);
            _is.read(cacheCheckVip, 7, false);
            _is.read(priceInfo, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(downloadState,"downloadState");
            _ds.display(detailCode,"detailCode");
            _ds.display(detailTips,"detailTips");
            _ds.display(cacheCheckVip,"cacheCheckVip");
            _ds.display(priceInfo,"priceInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(downloadState, true);
            _ds.displaySimple(detailCode, true);
            _ds.displaySimple(detailTips, true);
            _ds.displaySimple(cacheCheckVip, true);
            _ds.displaySimple(priceInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string lid;
        std::string cid;
        std::string vid;
        taf::Int32 downloadState;
        taf::Int32 detailCode;
        std::string detailTips;
        taf::Bool cacheCheckVip;
        jce::CoverPrice priceInfo;
    };
    inline bool operator==(const CheckDownloadCopyrightResponse&l, const CheckDownloadCopyrightResponse&r)
    {
        return l.errCode == r.errCode && l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.downloadState == r.downloadState && l.detailCode == r.detailCode && l.detailTips == r.detailTips && l.cacheCheckVip == r.cacheCheckVip && l.priceInfo == r.priceInfo;
    }
    inline bool operator!=(const CheckDownloadCopyrightResponse&l, const CheckDownloadCopyrightResponse&r)
    {
        return !(l == r);
    }

    struct VipTipsInfoViewRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipTipsInfoViewRequest";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        VipTipsInfoViewRequest()
        :lid(""),cid(""),vid(""),pid(""),streamid("")
        {
        }
        void resetDefautlt()
        {
            lid = "";
            cid = "";
            vid = "";
            pid = "";
            streamid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lid, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
            _os.write(pid, 3);
            _os.write(streamid, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lid, 0, false);
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
            _is.read(pid, 3, false);
            _is.read(streamid, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lid,"lid");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(pid,"pid");
            _ds.display(streamid,"streamid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(streamid, false);
            return _os;
        }
    public:
        std::string lid;
        std::string cid;
        std::string vid;
        std::string pid;
        std::string streamid;
    };
    inline bool operator==(const VipTipsInfoViewRequest&l, const VipTipsInfoViewRequest&r)
    {
        return l.lid == r.lid && l.cid == r.cid && l.vid == r.vid && l.pid == r.pid && l.streamid == r.streamid;
    }
    inline bool operator!=(const VipTipsInfoViewRequest&l, const VipTipsInfoViewRequest&r)
    {
        return !(l == r);
    }

    struct VipTipsInfoViewResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipTipsInfoViewResponse";
        }
        static string MD5()
        {
            return "4e144b2efa717cf4c6476dfb40cd08cf";
        }
        VipTipsInfoViewResponse()
        :errCode(0),content(""),background("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            content = "";
            background = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(content, 1);
            _os.write(background, 2);
            _os.write(action, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(content, 1, false);
            _is.read(background, 2, false);
            _is.read(action, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(content,"content");
            _ds.display(background,"background");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(background, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string content;
        std::string background;
        jce::Action action;
    };
    inline bool operator==(const VipTipsInfoViewResponse&l, const VipTipsInfoViewResponse&r)
    {
        return l.errCode == r.errCode && l.content == r.content && l.background == r.background && l.action == r.action;
    }
    inline bool operator!=(const VipTipsInfoViewResponse&l, const VipTipsInfoViewResponse&r)
    {
        return !(l == r);
    }

    struct GetVipTipsRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetVipTipsRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        GetVipTipsRequest()
        :requestType(0)
        {
        }
        void resetDefautlt()
        {
            requestType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(requestType, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(requestType, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(requestType,"requestType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(requestType, false);
            return _os;
        }
    public:
        taf::Int32 requestType;
    };
    inline bool operator==(const GetVipTipsRequest&l, const GetVipTipsRequest&r)
    {
        return l.requestType == r.requestType;
    }
    inline bool operator!=(const GetVipTipsRequest&l, const GetVipTipsRequest&r)
    {
        return !(l == r);
    }

    struct GetVipTipsResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetVipTipsResponse";
        }
        static string MD5()
        {
            return "4b6f4e77f568c7a160d0067b9493a852";
        }
        GetVipTipsResponse()
        :errCode(0),type(0),displayTime(0),tipsId("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            type = 0;
            displayTime = 0;
            tipsId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(type, 1);
            _os.write(displayTime, 2);
            _os.write(leftContentInfo, 3);
            _os.write(rightContentInfo, 4);
            _os.write(tipsId, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(type, 1, false);
            _is.read(displayTime, 2, false);
            _is.read(leftContentInfo, 3, false);
            _is.read(rightContentInfo, 4, false);
            _is.read(tipsId, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(type,"type");
            _ds.display(displayTime,"displayTime");
            _ds.display(leftContentInfo,"leftContentInfo");
            _ds.display(rightContentInfo,"rightContentInfo");
            _ds.display(tipsId,"tipsId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(displayTime, true);
            _ds.displaySimple(leftContentInfo, true);
            _ds.displaySimple(rightContentInfo, true);
            _ds.displaySimple(tipsId, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 type;
        taf::Int32 displayTime;
        jce::ActionBarInfo leftContentInfo;
        jce::ActionBarInfo rightContentInfo;
        std::string tipsId;
    };
    inline bool operator==(const GetVipTipsResponse&l, const GetVipTipsResponse&r)
    {
        return l.errCode == r.errCode && l.type == r.type && l.displayTime == r.displayTime && l.leftContentInfo == r.leftContentInfo && l.rightContentInfo == r.rightContentInfo && l.tipsId == r.tipsId;
    }
    inline bool operator!=(const GetVipTipsResponse&l, const GetVipTipsResponse&r)
    {
        return !(l == r);
    }

    struct VipCommonMsg : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipCommonMsg";
        }
        static string MD5()
        {
            return "8fdbc15c97eeabaf288e141e04862c9e";
        }
        VipCommonMsg()
        :id(""),displayTime(0),text(""),actionUrl(""),bgImageUrl(""),showMode(0)
        {
        }
        void resetDefautlt()
        {
            id = "";
            displayTime = 0;
            text = "";
            actionUrl = "";
            bgImageUrl = "";
            showMode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(displayTime, 1);
            _os.write(text, 2);
            _os.write(actionUrl, 3);
            _os.write(bgImageUrl, 4);
            _os.write(showMode, 5);
            _os.write(extraReportKVs, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, false);
            _is.read(displayTime, 1, true);
            _is.read(text, 2, false);
            _is.read(actionUrl, 3, false);
            _is.read(bgImageUrl, 4, false);
            _is.read(showMode, 5, false);
            _is.read(extraReportKVs, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(displayTime,"displayTime");
            _ds.display(text,"text");
            _ds.display(actionUrl,"actionUrl");
            _ds.display(bgImageUrl,"bgImageUrl");
            _ds.display(showMode,"showMode");
            _ds.display(extraReportKVs,"extraReportKVs");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(displayTime, true);
            _ds.displaySimple(text, true);
            _ds.displaySimple(actionUrl, true);
            _ds.displaySimple(bgImageUrl, true);
            _ds.displaySimple(showMode, true);
            _ds.displaySimple(extraReportKVs, false);
            return _os;
        }
    public:
        std::string id;
        taf::Int32 displayTime;
        std::string text;
        std::string actionUrl;
        std::string bgImageUrl;
        taf::Int32 showMode;
        vector<jce::ExtraReportKV> extraReportKVs;
    };
    inline bool operator==(const VipCommonMsg&l, const VipCommonMsg&r)
    {
        return l.id == r.id && l.displayTime == r.displayTime && l.text == r.text && l.actionUrl == r.actionUrl && l.bgImageUrl == r.bgImageUrl && l.showMode == r.showMode && l.extraReportKVs == r.extraReportKVs;
    }
    inline bool operator!=(const VipCommonMsg&l, const VipCommonMsg&r)
    {
        return !(l == r);
    }

    struct VipCommonMsgRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipCommonMsgRequest";
        }
        static string MD5()
        {
            return "5776fd7103fcea055637c7e8b9708bb0";
        }
        VipCommonMsgRequest()
        :type(0),id(""),localShowedTimes(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
            id = "";
            localShowedTimes = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(id, 1);
            _os.write(localShowedTimes, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, true);
            _is.read(id, 1, false);
            _is.read(localShowedTimes, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(id,"id");
            _ds.display(localShowedTimes,"localShowedTimes");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(id, true);
            _ds.displaySimple(localShowedTimes, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string id;
        taf::Int32 localShowedTimes;
    };
    inline bool operator==(const VipCommonMsgRequest&l, const VipCommonMsgRequest&r)
    {
        return l.type == r.type && l.id == r.id && l.localShowedTimes == r.localShowedTimes;
    }
    inline bool operator!=(const VipCommonMsgRequest&l, const VipCommonMsgRequest&r)
    {
        return !(l == r);
    }

    struct VipCommonMsgResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipCommonMsgResponse";
        }
        static string MD5()
        {
            return "4c4dfccb679114f9e5d27b8f7e798aa5";
        }
        VipCommonMsgResponse()
        :errCode(0),dataVersion("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            dataVersion = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(numberMap, 1);
            _os.write(stringMap, 2);
            _os.write(extraReportKVs, 3);
            _os.write(dataVersion, 4);
            _os.write(vipCommonMsgs, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(numberMap, 1, false);
            _is.read(stringMap, 2, false);
            _is.read(extraReportKVs, 3, false);
            _is.read(dataVersion, 4, false);
            _is.read(vipCommonMsgs, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(numberMap,"numberMap");
            _ds.display(stringMap,"stringMap");
            _ds.display(extraReportKVs,"extraReportKVs");
            _ds.display(dataVersion,"dataVersion");
            _ds.display(vipCommonMsgs,"vipCommonMsgs");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(numberMap, true);
            _ds.displaySimple(stringMap, true);
            _ds.displaySimple(extraReportKVs, true);
            _ds.displaySimple(dataVersion, true);
            _ds.displaySimple(vipCommonMsgs, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        map<std::string, taf::Int64> numberMap;
        map<std::string, std::string> stringMap;
        vector<jce::ExtraReportKV> extraReportKVs;
        std::string dataVersion;
        vector<jce::VipCommonMsg> vipCommonMsgs;
    };
    inline bool operator==(const VipCommonMsgResponse&l, const VipCommonMsgResponse&r)
    {
        return l.errCode == r.errCode && l.numberMap == r.numberMap && l.stringMap == r.stringMap && l.extraReportKVs == r.extraReportKVs && l.dataVersion == r.dataVersion && l.vipCommonMsgs == r.vipCommonMsgs;
    }
    inline bool operator!=(const VipCommonMsgResponse&l, const VipCommonMsgResponse&r)
    {
        return !(l == r);
    }

    struct CheckGiveRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckGiveRequest";
        }
        static string MD5()
        {
            return "a5c9019ea89f626dc426a978258ff1f1";
        }
        CheckGiveRequest()
        :cid(""),vid(""),lid(""),pid(""),type(0)
        {
        }
        void resetDefautlt()
        {
            cid = "";
            vid = "";
            lid = "";
            pid = "";
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cid, 0);
            _os.write(vid, 1);
            _os.write(lid, 2);
            _os.write(pid, 3);
            _os.write(type, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cid, 0, false);
            _is.read(vid, 1, false);
            _is.read(lid, 2, false);
            _is.read(pid, 3, false);
            _is.read(type, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(lid,"lid");
            _ds.display(pid,"pid");
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        std::string cid;
        std::string vid;
        std::string lid;
        std::string pid;
        taf::Int32 type;
    };
    inline bool operator==(const CheckGiveRequest&l, const CheckGiveRequest&r)
    {
        return l.cid == r.cid && l.vid == r.vid && l.lid == r.lid && l.pid == r.pid && l.type == r.type;
    }
    inline bool operator!=(const CheckGiveRequest&l, const CheckGiveRequest&r)
    {
        return !(l == r);
    }

    struct CheckGiveResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckGiveResponse";
        }
        static string MD5()
        {
            return "9b073cf849ca575ac36a70fc373c308d";
        }
        CheckGiveResponse()
        :errCode(0),errMsg(""),leftNum(0),dataKey(""),canGive(true),score(""),hasGive(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
            leftNum = 0;
            dataKey = "";
            canGive = true;
            score = "";
            hasGive = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(leftNum, 2);
            _os.write(dataKey, 3);
            _os.write(shareItem, 4);
            _os.write(tips, 5);
            _os.write(canGive, 6);
            _os.write(wishList, 7);
            _os.write(score, 8);
            _os.write(hasGive, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, false);
            _is.read(leftNum, 2, false);
            _is.read(dataKey, 3, false);
            _is.read(shareItem, 4, false);
            _is.read(tips, 5, false);
            _is.read(canGive, 6, false);
            _is.read(wishList, 7, false);
            _is.read(score, 8, false);
            _is.read(hasGive, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(leftNum,"leftNum");
            _ds.display(dataKey,"dataKey");
            _ds.display(shareItem,"shareItem");
            _ds.display(tips,"tips");
            _ds.display(canGive,"canGive");
            _ds.display(wishList,"wishList");
            _ds.display(score,"score");
            _ds.display(hasGive,"hasGive");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(leftNum, true);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(shareItem, true);
            _ds.displaySimple(tips, true);
            _ds.displaySimple(canGive, true);
            _ds.displaySimple(wishList, true);
            _ds.displaySimple(score, true);
            _ds.displaySimple(hasGive, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        taf::Int32 leftNum;
        std::string dataKey;
        jce::ShareItem shareItem;
        jce::ONAPosterTitle tips;
        taf::Bool canGive;
        vector<std::string> wishList;
        std::string score;
        taf::Bool hasGive;
    };
    inline bool operator==(const CheckGiveResponse&l, const CheckGiveResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.leftNum == r.leftNum && l.dataKey == r.dataKey && l.shareItem == r.shareItem && l.tips == r.tips && l.canGive == r.canGive && l.wishList == r.wishList && l.score == r.score && l.hasGive == r.hasGive;
    }
    inline bool operator!=(const CheckGiveResponse&l, const CheckGiveResponse&r)
    {
        return !(l == r);
    }

    struct GiveMovieRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GiveMovieRequest";
        }
        static string MD5()
        {
            return "8f9c697a216eacdd694cb2a2e96fe600";
        }
        GiveMovieRequest()
        :dataKey(""),cid(""),vid(""),lid(""),pid(""),nickName(""),headerUrl(""),channel(""),score(""),wishWords("")
        {
        }
        void resetDefautlt()
        {
            dataKey = "";
            cid = "";
            vid = "";
            lid = "";
            pid = "";
            nickName = "";
            headerUrl = "";
            channel = "";
            score = "";
            wishWords = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dataKey, 0);
            _os.write(cid, 1);
            _os.write(vid, 2);
            _os.write(lid, 3);
            _os.write(pid, 4);
            _os.write(nickName, 5);
            _os.write(headerUrl, 6);
            _os.write(channel, 7);
            _os.write(score, 8);
            _os.write(wishWords, 9);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dataKey, 0, true);
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
            _is.read(lid, 3, false);
            _is.read(pid, 4, false);
            _is.read(nickName, 5, false);
            _is.read(headerUrl, 6, false);
            _is.read(channel, 7, false);
            _is.read(score, 8, false);
            _is.read(wishWords, 9, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dataKey,"dataKey");
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(lid,"lid");
            _ds.display(pid,"pid");
            _ds.display(nickName,"nickName");
            _ds.display(headerUrl,"headerUrl");
            _ds.display(channel,"channel");
            _ds.display(score,"score");
            _ds.display(wishWords,"wishWords");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dataKey, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(pid, true);
            _ds.displaySimple(nickName, true);
            _ds.displaySimple(headerUrl, true);
            _ds.displaySimple(channel, true);
            _ds.displaySimple(score, true);
            _ds.displaySimple(wishWords, false);
            return _os;
        }
    public:
        std::string dataKey;
        std::string cid;
        std::string vid;
        std::string lid;
        std::string pid;
        std::string nickName;
        std::string headerUrl;
        std::string channel;
        std::string score;
        std::string wishWords;
    };
    inline bool operator==(const GiveMovieRequest&l, const GiveMovieRequest&r)
    {
        return l.dataKey == r.dataKey && l.cid == r.cid && l.vid == r.vid && l.lid == r.lid && l.pid == r.pid && l.nickName == r.nickName && l.headerUrl == r.headerUrl && l.channel == r.channel && l.score == r.score && l.wishWords == r.wishWords;
    }
    inline bool operator!=(const GiveMovieRequest&l, const GiveMovieRequest&r)
    {
        return !(l == r);
    }

    struct GiveMovieResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GiveMovieResponse";
        }
        static string MD5()
        {
            return "5776fd7103fcea055637c7e8b9708bb0";
        }
        GiveMovieResponse()
        :errCode(0),errMsg(""),leftNum(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            errMsg = "";
            leftNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(errMsg, 1);
            _os.write(leftNum, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(errMsg, 1, false);
            _is.read(leftNum, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(errMsg,"errMsg");
            _ds.display(leftNum,"leftNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(errMsg, true);
            _ds.displaySimple(leftNum, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string errMsg;
        taf::Int32 leftNum;
    };
    inline bool operator==(const GiveMovieResponse&l, const GiveMovieResponse&r)
    {
        return l.errCode == r.errCode && l.errMsg == r.errMsg && l.leftNum == r.leftNum;
    }
    inline bool operator!=(const GiveMovieResponse&l, const GiveMovieResponse&r)
    {
        return !(l == r);
    }

    struct CheckBindAccountRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckBindAccountRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        CheckBindAccountRequest()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        taf::Int32 type;
    };
    inline bool operator==(const CheckBindAccountRequest&l, const CheckBindAccountRequest&r)
    {
        return l.type == r.type;
    }
    inline bool operator!=(const CheckBindAccountRequest&l, const CheckBindAccountRequest&r)
    {
        return !(l == r);
    }

    struct CheckBindAccountResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckBindAccountResponse";
        }
        static string MD5()
        {
            return "9b4f4eda8c44bd545fd4854a6e4580ff";
        }
        CheckBindAccountResponse()
        :errCode(0),isVip(true),text(""),tabTips(""),playerTips("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            isVip = true;
            text = "";
            tabTips = "";
            playerTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(isVip, 1);
            _os.write(text, 2);
            _os.write(tabTips, 3);
            _os.write(playerTips, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(isVip, 1, false);
            _is.read(text, 2, false);
            _is.read(tabTips, 3, false);
            _is.read(playerTips, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(isVip,"isVip");
            _ds.display(text,"text");
            _ds.display(tabTips,"tabTips");
            _ds.display(playerTips,"playerTips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(isVip, true);
            _ds.displaySimple(text, true);
            _ds.displaySimple(tabTips, true);
            _ds.displaySimple(playerTips, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Bool isVip;
        std::string text;
        std::string tabTips;
        std::string playerTips;
    };
    inline bool operator==(const CheckBindAccountResponse&l, const CheckBindAccountResponse&r)
    {
        return l.errCode == r.errCode && l.isVip == r.isVip && l.text == r.text && l.tabTips == r.tabTips && l.playerTips == r.playerTips;
    }
    inline bool operator!=(const CheckBindAccountResponse&l, const CheckBindAccountResponse&r)
    {
        return !(l == r);
    }

    struct CheckNewPresentRightRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckNewPresentRightRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        CheckNewPresentRightRequest()
        :version(0)
        {
        }
        void resetDefautlt()
        {
            version = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(version, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(version, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(version,"version");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(version, false);
            return _os;
        }
    public:
        taf::Int32 version;
    };
    inline bool operator==(const CheckNewPresentRightRequest&l, const CheckNewPresentRightRequest&r)
    {
        return l.version == r.version;
    }
    inline bool operator!=(const CheckNewPresentRightRequest&l, const CheckNewPresentRightRequest&r)
    {
        return !(l == r);
    }

    struct CheckNewPresentRightResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.CheckNewPresentRightResponse";
        }
        static string MD5()
        {
            return "fe3b74a9bc8fe9b14c77c67ae5e1918a";
        }
        CheckNewPresentRightResponse()
        :errCode(0),version(0),count(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            version = 0;
            count = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(version, 1);
            _os.write(count, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(version, 1, true);
            _is.read(count, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(version,"version");
            _ds.display(count,"count");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(version, true);
            _ds.displaySimple(count, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 version;
        taf::Int32 count;
    };
    inline bool operator==(const CheckNewPresentRightResponse&l, const CheckNewPresentRightResponse&r)
    {
        return l.errCode == r.errCode && l.version == r.version && l.count == r.count;
    }
    inline bool operator!=(const CheckNewPresentRightResponse&l, const CheckNewPresentRightResponse&r)
    {
        return !(l == r);
    }

    struct MarketAttentRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MarketAttentRequest";
        }
        static string MD5()
        {
            return "203c1ec047d5a4df472e55295eddc8db";
        }
        MarketAttentRequest()
        :option(0)
        {
        }
        void resetDefautlt()
        {
            option = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(attentKeyList, 0);
            _os.write(option, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(attentKeyList, 0, true);
            _is.read(option, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(attentKeyList,"attentKeyList");
            _ds.display(option,"option");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(attentKeyList, true);
            _ds.displaySimple(option, false);
            return _os;
        }
    public:
        vector<jce::MarketAttentItem> attentKeyList;
        taf::Char option;
    };
    inline bool operator==(const MarketAttentRequest&l, const MarketAttentRequest&r)
    {
        return l.attentKeyList == r.attentKeyList && l.option == r.option;
    }
    inline bool operator!=(const MarketAttentRequest&l, const MarketAttentRequest&r)
    {
        return !(l == r);
    }

    struct MarketAttentResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MarketAttentResponse";
        }
        static string MD5()
        {
            return "1e6044845e8749ca55c0b7dddea82cc3";
        }
        MarketAttentResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(attentItemList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(attentItemList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(attentItemList,"attentItemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(attentItemList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::MarketAttentItem> attentItemList;
    };
    inline bool operator==(const MarketAttentResponse&l, const MarketAttentResponse&r)
    {
        return l.errCode == r.errCode && l.attentItemList == r.attentItemList;
    }
    inline bool operator!=(const MarketAttentResponse&l, const MarketAttentResponse&r)
    {
        return !(l == r);
    }

    struct QueryUserMarketAttentRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QueryUserMarketAttentRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        QueryUserMarketAttentRequest()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        taf::Int32 type;
    };
    inline bool operator==(const QueryUserMarketAttentRequest&l, const QueryUserMarketAttentRequest&r)
    {
        return l.type == r.type;
    }
    inline bool operator!=(const QueryUserMarketAttentRequest&l, const QueryUserMarketAttentRequest&r)
    {
        return !(l == r);
    }

    struct QueryUserMarketAttentResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QueryUserMarketAttentResponse";
        }
        static string MD5()
        {
            return "1e6044845e8749ca55c0b7dddea82cc3";
        }
        QueryUserMarketAttentResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(attentItemList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(attentItemList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(attentItemList,"attentItemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(attentItemList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        vector<jce::MarketAttentItem> attentItemList;
    };
    inline bool operator==(const QueryUserMarketAttentResponse&l, const QueryUserMarketAttentResponse&r)
    {
        return l.errCode == r.errCode && l.attentItemList == r.attentItemList;
    }
    inline bool operator!=(const QueryUserMarketAttentResponse&l, const QueryUserMarketAttentResponse&r)
    {
        return !(l == r);
    }

    struct QueryUserMarketDataRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QueryUserMarketDataRequest";
        }
        static string MD5()
        {
            return "14e6636632c63fdfafc03fddb6c460ba";
        }
        QueryUserMarketDataRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(activityId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(activityId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(activityId,"activityId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(activityId, false);
            return _os;
        }
    public:
        vector<std::string> activityId;
    };
    inline bool operator==(const QueryUserMarketDataRequest&l, const QueryUserMarketDataRequest&r)
    {
        return l.activityId == r.activityId;
    }
    inline bool operator!=(const QueryUserMarketDataRequest&l, const QueryUserMarketDataRequest&r)
    {
        return !(l == r);
    }

    struct QueryUserMarketDataResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.QueryUserMarketDataResponse";
        }
        static string MD5()
        {
            return "120f3655a79fe57de264be3a6bfd2d1d";
        }
        QueryUserMarketDataResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(lines, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(lines, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(lines,"lines");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(lines, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        map<std::string, std::string> lines;
    };
    inline bool operator==(const QueryUserMarketDataResponse&l, const QueryUserMarketDataResponse&r)
    {
        return l.errCode == r.errCode && l.lines == r.lines;
    }
    inline bool operator!=(const QueryUserMarketDataResponse&l, const QueryUserMarketDataResponse&r)
    {
        return !(l == r);
    }

    struct ActionButton : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ActionButton";
        }
        static string MD5()
        {
            return "4344e22fdb516581c319efae655e47aa";
        }
        ActionButton()
        :title(""),type(0),buttonBackgroundColor(""),buttonTextColor("")
        {
        }
        void resetDefautlt()
        {
            title = "";
            type = 0;
            buttonBackgroundColor = "";
            buttonTextColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(title, 0);
            _os.write(action, 1);
            _os.write(type, 2);
            _os.write(buttonBackgroundColor, 3);
            _os.write(buttonTextColor, 4);
            _os.write(targetPageFrame, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(title, 0, false);
            _is.read(action, 1, false);
            _is.read(type, 2, false);
            _is.read(buttonBackgroundColor, 3, false);
            _is.read(buttonTextColor, 4, false);
            _is.read(targetPageFrame, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(title,"title");
            _ds.display(action,"action");
            _ds.display(type,"type");
            _ds.display(buttonBackgroundColor,"buttonBackgroundColor");
            _ds.display(buttonTextColor,"buttonTextColor");
            _ds.display(targetPageFrame,"targetPageFrame");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(title, true);
            _ds.displaySimple(action, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(buttonBackgroundColor, true);
            _ds.displaySimple(buttonTextColor, true);
            _ds.displaySimple(targetPageFrame, false);
            return _os;
        }
    public:
        std::string title;
        jce::Action action;
        taf::Int32 type;
        std::string buttonBackgroundColor;
        std::string buttonTextColor;
        jce::FrameRect targetPageFrame;
    };
    inline bool operator==(const ActionButton&l, const ActionButton&r)
    {
        return l.title == r.title && l.action == r.action && l.type == r.type && l.buttonBackgroundColor == r.buttonBackgroundColor && l.buttonTextColor == r.buttonTextColor && l.targetPageFrame == r.targetPageFrame;
    }
    inline bool operator!=(const ActionButton&l, const ActionButton&r)
    {
        return !(l == r);
    }

    struct AccountPlayPermissionRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AccountPlayPermissionRequest";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        AccountPlayPermissionRequest()
        :playerErrorCode(0),isCheckBannedOnly(0)
        {
        }
        void resetDefautlt()
        {
            playerErrorCode = 0;
            isCheckBannedOnly = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(playerErrorCode, 0);
            _os.write(isCheckBannedOnly, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(playerErrorCode, 0, false);
            _is.read(isCheckBannedOnly, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(playerErrorCode,"playerErrorCode");
            _ds.display(isCheckBannedOnly,"isCheckBannedOnly");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(playerErrorCode, true);
            _ds.displaySimple(isCheckBannedOnly, false);
            return _os;
        }
    public:
        taf::Int32 playerErrorCode;
        taf::Int32 isCheckBannedOnly;
    };
    inline bool operator==(const AccountPlayPermissionRequest&l, const AccountPlayPermissionRequest&r)
    {
        return l.playerErrorCode == r.playerErrorCode && l.isCheckBannedOnly == r.isCheckBannedOnly;
    }
    inline bool operator!=(const AccountPlayPermissionRequest&l, const AccountPlayPermissionRequest&r)
    {
        return !(l == r);
    }

    struct AccountPlayPermissionResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.AccountPlayPermissionResponse";
        }
        static string MD5()
        {
            return "50f36c572feb8e0ab94b42f0e360500d";
        }
        AccountPlayPermissionResponse()
        :errCode(0),hasPermission(0),message(""),isBanned(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            hasPermission = 0;
            message = "";
            isBanned = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(hasPermission, 1);
            _os.write(message, 2);
            _os.write(buttons, 3);
            _os.write(isBanned, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(hasPermission, 1, true);
            _is.read(message, 2, false);
            _is.read(buttons, 3, false);
            _is.read(isBanned, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(hasPermission,"hasPermission");
            _ds.display(message,"message");
            _ds.display(buttons,"buttons");
            _ds.display(isBanned,"isBanned");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(hasPermission, true);
            _ds.displaySimple(message, true);
            _ds.displaySimple(buttons, true);
            _ds.displaySimple(isBanned, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 hasPermission;
        std::string message;
        vector<jce::ActionButton> buttons;
        taf::Int32 isBanned;
    };
    inline bool operator==(const AccountPlayPermissionResponse&l, const AccountPlayPermissionResponse&r)
    {
        return l.errCode == r.errCode && l.hasPermission == r.hasPermission && l.message == r.message && l.buttons == r.buttons && l.isBanned == r.isBanned;
    }
    inline bool operator!=(const AccountPlayPermissionResponse&l, const AccountPlayPermissionResponse&r)
    {
        return !(l == r);
    }

    struct UserCenterVipEntryRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserCenterVipEntryRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        UserCenterVipEntryRequest()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        taf::Int32 type;
    };
    inline bool operator==(const UserCenterVipEntryRequest&l, const UserCenterVipEntryRequest&r)
    {
        return l.type == r.type;
    }
    inline bool operator!=(const UserCenterVipEntryRequest&l, const UserCenterVipEntryRequest&r)
    {
        return !(l == r);
    }

    struct UserCenterVipEntryResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserCenterVipEntryResponse";
        }
        static string MD5()
        {
            return "5bb5836bcf89c58da65b049e3d303e65";
        }
        UserCenterVipEntryResponse()
        :errCode(0),iconUrl(""),title(""),subtitle("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            iconUrl = "";
            title = "";
            subtitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(iconUrl, 1);
            _os.write(title, 2);
            _os.write(subtitle, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(iconUrl, 1, false);
            _is.read(title, 2, false);
            _is.read(subtitle, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(iconUrl,"iconUrl");
            _ds.display(title,"title");
            _ds.display(subtitle,"subtitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(iconUrl, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subtitle, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string iconUrl;
        std::string title;
        std::string subtitle;
    };
    inline bool operator==(const UserCenterVipEntryResponse&l, const UserCenterVipEntryResponse&r)
    {
        return l.errCode == r.errCode && l.iconUrl == r.iconUrl && l.title == r.title && l.subtitle == r.subtitle;
    }
    inline bool operator!=(const UserCenterVipEntryResponse&l, const UserCenterVipEntryResponse&r)
    {
        return !(l == r);
    }

    struct TitleBarConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TitleBarConfig";
        }
        static string MD5()
        {
            return "513fccffdf44d8c5b55bb4e19b32975f";
        }
        TitleBarConfig()
        :bgUrl(""),bgColor(""),title(""),openVipText(""),openVipBgColor(""),searchIconColor(""),startTime(0),endTime(0)
        {
        }
        void resetDefautlt()
        {
            bgUrl = "";
            bgColor = "";
            title = "";
            openVipText = "";
            openVipBgColor = "";
            searchIconColor = "";
            startTime = 0;
            endTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bgUrl, 0);
            _os.write(bgColor, 1);
            _os.write(title, 2);
            _os.write(openVipText, 3);
            _os.write(openVipBgColor, 4);
            _os.write(searchIconColor, 5);
            _os.write(startTime, 6);
            _os.write(endTime, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bgUrl, 0, false);
            _is.read(bgColor, 1, false);
            _is.read(title, 2, false);
            _is.read(openVipText, 3, false);
            _is.read(openVipBgColor, 4, false);
            _is.read(searchIconColor, 5, false);
            _is.read(startTime, 6, false);
            _is.read(endTime, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bgUrl,"bgUrl");
            _ds.display(bgColor,"bgColor");
            _ds.display(title,"title");
            _ds.display(openVipText,"openVipText");
            _ds.display(openVipBgColor,"openVipBgColor");
            _ds.display(searchIconColor,"searchIconColor");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bgUrl, true);
            _ds.displaySimple(bgColor, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(openVipText, true);
            _ds.displaySimple(openVipBgColor, true);
            _ds.displaySimple(searchIconColor, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, false);
            return _os;
        }
    public:
        std::string bgUrl;
        std::string bgColor;
        std::string title;
        std::string openVipText;
        std::string openVipBgColor;
        std::string searchIconColor;
        taf::Int64 startTime;
        taf::Int64 endTime;
    };
    inline bool operator==(const TitleBarConfig&l, const TitleBarConfig&r)
    {
        return l.bgUrl == r.bgUrl && l.bgColor == r.bgColor && l.title == r.title && l.openVipText == r.openVipText && l.openVipBgColor == r.openVipBgColor && l.searchIconColor == r.searchIconColor && l.startTime == r.startTime && l.endTime == r.endTime;
    }
    inline bool operator!=(const TitleBarConfig&l, const TitleBarConfig&r)
    {
        return !(l == r);
    }

    struct TabBarConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.TabBarConfig";
        }
        static string MD5()
        {
            return "513fccffdf44d8c5b55bb4e19b32975f";
        }
        TabBarConfig()
        :bgUrl(""),bgColor(""),vipIconNormal(""),vipIconSelected(""),textColor(""),iconColor(""),startTime(0),endTime(0)
        {
        }
        void resetDefautlt()
        {
            bgUrl = "";
            bgColor = "";
            vipIconNormal = "";
            vipIconSelected = "";
            textColor = "";
            iconColor = "";
            startTime = 0;
            endTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bgUrl, 0);
            _os.write(bgColor, 1);
            _os.write(vipIconNormal, 2);
            _os.write(vipIconSelected, 3);
            _os.write(textColor, 4);
            _os.write(iconColor, 5);
            _os.write(startTime, 6);
            _os.write(endTime, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bgUrl, 0, false);
            _is.read(bgColor, 1, false);
            _is.read(vipIconNormal, 2, false);
            _is.read(vipIconSelected, 3, false);
            _is.read(textColor, 4, false);
            _is.read(iconColor, 5, false);
            _is.read(startTime, 6, false);
            _is.read(endTime, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bgUrl,"bgUrl");
            _ds.display(bgColor,"bgColor");
            _ds.display(vipIconNormal,"vipIconNormal");
            _ds.display(vipIconSelected,"vipIconSelected");
            _ds.display(textColor,"textColor");
            _ds.display(iconColor,"iconColor");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bgUrl, true);
            _ds.displaySimple(bgColor, true);
            _ds.displaySimple(vipIconNormal, true);
            _ds.displaySimple(vipIconSelected, true);
            _ds.displaySimple(textColor, true);
            _ds.displaySimple(iconColor, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, false);
            return _os;
        }
    public:
        std::string bgUrl;
        std::string bgColor;
        std::string vipIconNormal;
        std::string vipIconSelected;
        std::string textColor;
        std::string iconColor;
        taf::Int64 startTime;
        taf::Int64 endTime;
    };
    inline bool operator==(const TabBarConfig&l, const TabBarConfig&r)
    {
        return l.bgUrl == r.bgUrl && l.bgColor == r.bgColor && l.vipIconNormal == r.vipIconNormal && l.vipIconSelected == r.vipIconSelected && l.textColor == r.textColor && l.iconColor == r.iconColor && l.startTime == r.startTime && l.endTime == r.endTime;
    }
    inline bool operator!=(const TabBarConfig&l, const TabBarConfig&r)
    {
        return !(l == r);
    }

    struct OpenVipConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.OpenVipConfig";
        }
        static string MD5()
        {
            return "18a6bff51339bcb92306c5ad0635223b";
        }
        OpenVipConfig()
        :tryLookText(""),wholeText(""),tryLookSubscript(""),definitionSubscript(""),startTime(0),endTime(0)
        {
        }
        void resetDefautlt()
        {
            tryLookText = "";
            wholeText = "";
            tryLookSubscript = "";
            definitionSubscript = "";
            startTime = 0;
            endTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tryLookText, 0);
            _os.write(wholeText, 1);
            _os.write(tryLookSubscript, 2);
            _os.write(definitionSubscript, 3);
            _os.write(startTime, 4);
            _os.write(endTime, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tryLookText, 0, false);
            _is.read(wholeText, 1, false);
            _is.read(tryLookSubscript, 2, false);
            _is.read(definitionSubscript, 3, false);
            _is.read(startTime, 4, false);
            _is.read(endTime, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tryLookText,"tryLookText");
            _ds.display(wholeText,"wholeText");
            _ds.display(tryLookSubscript,"tryLookSubscript");
            _ds.display(definitionSubscript,"definitionSubscript");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tryLookText, true);
            _ds.displaySimple(wholeText, true);
            _ds.displaySimple(tryLookSubscript, true);
            _ds.displaySimple(definitionSubscript, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, false);
            return _os;
        }
    public:
        std::string tryLookText;
        std::string wholeText;
        std::string tryLookSubscript;
        std::string definitionSubscript;
        taf::Int64 startTime;
        taf::Int64 endTime;
    };
    inline bool operator==(const OpenVipConfig&l, const OpenVipConfig&r)
    {
        return l.tryLookText == r.tryLookText && l.wholeText == r.wholeText && l.tryLookSubscript == r.tryLookSubscript && l.definitionSubscript == r.definitionSubscript && l.startTime == r.startTime && l.endTime == r.endTime;
    }
    inline bool operator!=(const OpenVipConfig&l, const OpenVipConfig&r)
    {
        return !(l == r);
    }

    struct ChannelNameColorConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ChannelNameColorConfig";
        }
        static string MD5()
        {
            return "8ff074d03b6d9a2edab61d673f2480ab";
        }
        ChannelNameColorConfig()
        :bgColor(""),startTime(0),endTime(0),slideImgUrl(""),slideBoardColor("")
        {
        }
        void resetDefautlt()
        {
            bgColor = "";
            startTime = 0;
            endTime = 0;
            slideImgUrl = "";
            slideBoardColor = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(bgColor, 0);
            _os.write(startTime, 1);
            _os.write(endTime, 2);
            _os.write(slideImgUrl, 3);
            _os.write(slideBoardColor, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(bgColor, 0, false);
            _is.read(startTime, 1, false);
            _is.read(endTime, 2, false);
            _is.read(slideImgUrl, 3, false);
            _is.read(slideBoardColor, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(bgColor,"bgColor");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(slideImgUrl,"slideImgUrl");
            _ds.display(slideBoardColor,"slideBoardColor");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(bgColor, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(slideImgUrl, true);
            _ds.displaySimple(slideBoardColor, false);
            return _os;
        }
    public:
        std::string bgColor;
        taf::Int64 startTime;
        taf::Int64 endTime;
        std::string slideImgUrl;
        std::string slideBoardColor;
    };
    inline bool operator==(const ChannelNameColorConfig&l, const ChannelNameColorConfig&r)
    {
        return l.bgColor == r.bgColor && l.startTime == r.startTime && l.endTime == r.endTime && l.slideImgUrl == r.slideImgUrl && l.slideBoardColor == r.slideBoardColor;
    }
    inline bool operator!=(const ChannelNameColorConfig&l, const ChannelNameColorConfig&r)
    {
        return !(l == r);
    }

    struct VipActivityConfigRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipActivityConfigRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        VipActivityConfigRequest()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        taf::Int32 type;
    };
    inline bool operator==(const VipActivityConfigRequest&l, const VipActivityConfigRequest&r)
    {
        return l.type == r.type;
    }
    inline bool operator!=(const VipActivityConfigRequest&l, const VipActivityConfigRequest&r)
    {
        return !(l == r);
    }

    struct VipActivityConfigResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipActivityConfigResponse";
        }
        static string MD5()
        {
            return "e2b8c7e049d6ad76d641440b9d6ed9a9";
        }
        VipActivityConfigResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(titleBarConfig, 1);
            _os.write(tabBarConfig, 2);
            _os.write(pullRefreshConfig, 3);
            _os.write(openVipConfig, 4);
            _os.write(loadingConfig, 5);
            _os.write(channelNameColorConfig, 6);
            _os.write(tabBarConfigs, 7);
            _os.write(otherPullRefreshConfig, 8);
            _os.write(otherChannelNameColorConfig, 9);
            _os.write(loadingConfigs, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(titleBarConfig, 1, false);
            _is.read(tabBarConfig, 2, false);
            _is.read(pullRefreshConfig, 3, false);
            _is.read(openVipConfig, 4, false);
            _is.read(loadingConfig, 5, false);
            _is.read(channelNameColorConfig, 6, false);
            _is.read(tabBarConfigs, 7, false);
            _is.read(otherPullRefreshConfig, 8, false);
            _is.read(otherChannelNameColorConfig, 9, false);
            _is.read(loadingConfigs, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(titleBarConfig,"titleBarConfig");
            _ds.display(tabBarConfig,"tabBarConfig");
            _ds.display(pullRefreshConfig,"pullRefreshConfig");
            _ds.display(openVipConfig,"openVipConfig");
            _ds.display(loadingConfig,"loadingConfig");
            _ds.display(channelNameColorConfig,"channelNameColorConfig");
            _ds.display(tabBarConfigs,"tabBarConfigs");
            _ds.display(otherPullRefreshConfig,"otherPullRefreshConfig");
            _ds.display(otherChannelNameColorConfig,"otherChannelNameColorConfig");
            _ds.display(loadingConfigs,"loadingConfigs");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(titleBarConfig, true);
            _ds.displaySimple(tabBarConfig, true);
            _ds.displaySimple(pullRefreshConfig, true);
            _ds.displaySimple(openVipConfig, true);
            _ds.displaySimple(loadingConfig, true);
            _ds.displaySimple(channelNameColorConfig, true);
            _ds.displaySimple(tabBarConfigs, true);
            _ds.displaySimple(otherPullRefreshConfig, true);
            _ds.displaySimple(otherChannelNameColorConfig, true);
            _ds.displaySimple(loadingConfigs, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::TitleBarConfig titleBarConfig;
        jce::TabBarConfig tabBarConfig;
        jce::PullRefreshConfig pullRefreshConfig;
        jce::OpenVipConfig openVipConfig;
        jce::LoadingConfig loadingConfig;
        jce::ChannelNameColorConfig channelNameColorConfig;
        map<std::string, jce::TabBarConfig> tabBarConfigs;
        jce::PullRefreshConfig otherPullRefreshConfig;
        jce::ChannelNameColorConfig otherChannelNameColorConfig;
        vector<jce::LoadingConfig> loadingConfigs;
    };
    inline bool operator==(const VipActivityConfigResponse&l, const VipActivityConfigResponse&r)
    {
        return l.errCode == r.errCode && l.titleBarConfig == r.titleBarConfig && l.tabBarConfig == r.tabBarConfig && l.pullRefreshConfig == r.pullRefreshConfig && l.openVipConfig == r.openVipConfig && l.loadingConfig == r.loadingConfig && l.channelNameColorConfig == r.channelNameColorConfig && l.tabBarConfigs == r.tabBarConfigs && l.otherPullRefreshConfig == r.otherPullRefreshConfig && l.otherChannelNameColorConfig == r.otherChannelNameColorConfig && l.loadingConfigs == r.loadingConfigs;
    }
    inline bool operator!=(const VipActivityConfigResponse&l, const VipActivityConfigResponse&r)
    {
        return !(l == r);
    }

    struct H5GameImageConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.H5GameImageConfig";
        }
        static string MD5()
        {
            return "28f40cf1811354bd65dc6ed3ac8f2e32";
        }
        H5GameImageConfig()
        :imgUrl(""),isPullH5(true),showNum(0)
        {
        }
        void resetDefautlt()
        {
            imgUrl = "";
            isPullH5 = true;
            showNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imgUrl, 0);
            _os.write(isPullH5, 1);
            _os.write(showNum, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imgUrl, 0, false);
            _is.read(isPullH5, 1, false);
            _is.read(showNum, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imgUrl,"imgUrl");
            _ds.display(isPullH5,"isPullH5");
            _ds.display(showNum,"showNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imgUrl, true);
            _ds.displaySimple(isPullH5, true);
            _ds.displaySimple(showNum, false);
            return _os;
        }
    public:
        std::string imgUrl;
        taf::Bool isPullH5;
        taf::Int32 showNum;
    };
    inline bool operator==(const H5GameImageConfig&l, const H5GameImageConfig&r)
    {
        return l.imgUrl == r.imgUrl && l.isPullH5 == r.isPullH5 && l.showNum == r.showNum;
    }
    inline bool operator!=(const H5GameImageConfig&l, const H5GameImageConfig&r)
    {
        return !(l == r);
    }

    struct H5GameVipIconConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.H5GameVipIconConfig";
        }
        static string MD5()
        {
            return "e0ea9c396b43014ff8a19e72f0d7dcec";
        }
        H5GameVipIconConfig()
        :normalGameIcon(""),pressGameIcon("")
        {
        }
        void resetDefautlt()
        {
            normalGameIcon = "";
            pressGameIcon = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(entryTabIcon, 0);
            _os.write(normalGameIcon, 1);
            _os.write(pressGameIcon, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(entryTabIcon, 0, false);
            _is.read(normalGameIcon, 1, false);
            _is.read(pressGameIcon, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(entryTabIcon,"entryTabIcon");
            _ds.display(normalGameIcon,"normalGameIcon");
            _ds.display(pressGameIcon,"pressGameIcon");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(entryTabIcon, true);
            _ds.displaySimple(normalGameIcon, true);
            _ds.displaySimple(pressGameIcon, false);
            return _os;
        }
    public:
        jce::H5GameImageConfig entryTabIcon;
        std::string normalGameIcon;
        std::string pressGameIcon;
    };
    inline bool operator==(const H5GameVipIconConfig&l, const H5GameVipIconConfig&r)
    {
        return l.entryTabIcon == r.entryTabIcon && l.normalGameIcon == r.normalGameIcon && l.pressGameIcon == r.pressGameIcon;
    }
    inline bool operator!=(const H5GameVipIconConfig&l, const H5GameVipIconConfig&r)
    {
        return !(l == r);
    }

    struct H5GameConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.H5GameConfig";
        }
        static string MD5()
        {
            return "639bf7cf9af76b657f86ca42b0330a75";
        }
        H5GameConfig()
        :gameID(""),startTime(0),endTime(0),gameUrl(""),entryGameTipImgUrl(""),h5LoadingImgUrl(""),closeIconUrl(""),pullWay(0),vipOnly(true),pullNum(0),moreIconUrl(""),h5LoadingBgImgUrl(""),isAutoShowH5(true)
        {
        }
        void resetDefautlt()
        {
            gameID = "";
            startTime = 0;
            endTime = 0;
            gameUrl = "";
            entryGameTipImgUrl = "";
            h5LoadingImgUrl = "";
            closeIconUrl = "";
            pullWay = 0;
            vipOnly = true;
            pullNum = 0;
            moreIconUrl = "";
            h5LoadingBgImgUrl = "";
            isAutoShowH5 = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(gameID, 0);
            _os.write(startTime, 1);
            _os.write(endTime, 2);
            _os.write(gameUrl, 3);
            _os.write(entryGameTipImgUrl, 4);
            _os.write(h5LoadingImgUrl, 5);
            _os.write(closeIconUrl, 6);
            _os.write(pullWay, 7);
            _os.write(vipOnly, 8);
            _os.write(pullNum, 9);
            _os.write(vipTabIconConfig, 10);
            _os.write(entryGameTipImage, 11);
            _os.write(pullRefreshConfig, 12);
            _os.write(moreIconUrl, 13);
            _os.write(h5LoadingBgImgUrl, 14);
            _os.write(isAutoShowH5, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(gameID, 0, false);
            _is.read(startTime, 1, false);
            _is.read(endTime, 2, false);
            _is.read(gameUrl, 3, false);
            _is.read(entryGameTipImgUrl, 4, false);
            _is.read(h5LoadingImgUrl, 5, false);
            _is.read(closeIconUrl, 6, false);
            _is.read(pullWay, 7, false);
            _is.read(vipOnly, 8, false);
            _is.read(pullNum, 9, false);
            _is.read(vipTabIconConfig, 10, false);
            _is.read(entryGameTipImage, 11, false);
            _is.read(pullRefreshConfig, 12, false);
            _is.read(moreIconUrl, 13, false);
            _is.read(h5LoadingBgImgUrl, 14, false);
            _is.read(isAutoShowH5, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(gameID,"gameID");
            _ds.display(startTime,"startTime");
            _ds.display(endTime,"endTime");
            _ds.display(gameUrl,"gameUrl");
            _ds.display(entryGameTipImgUrl,"entryGameTipImgUrl");
            _ds.display(h5LoadingImgUrl,"h5LoadingImgUrl");
            _ds.display(closeIconUrl,"closeIconUrl");
            _ds.display(pullWay,"pullWay");
            _ds.display(vipOnly,"vipOnly");
            _ds.display(pullNum,"pullNum");
            _ds.display(vipTabIconConfig,"vipTabIconConfig");
            _ds.display(entryGameTipImage,"entryGameTipImage");
            _ds.display(pullRefreshConfig,"pullRefreshConfig");
            _ds.display(moreIconUrl,"moreIconUrl");
            _ds.display(h5LoadingBgImgUrl,"h5LoadingBgImgUrl");
            _ds.display(isAutoShowH5,"isAutoShowH5");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(gameID, true);
            _ds.displaySimple(startTime, true);
            _ds.displaySimple(endTime, true);
            _ds.displaySimple(gameUrl, true);
            _ds.displaySimple(entryGameTipImgUrl, true);
            _ds.displaySimple(h5LoadingImgUrl, true);
            _ds.displaySimple(closeIconUrl, true);
            _ds.displaySimple(pullWay, true);
            _ds.displaySimple(vipOnly, true);
            _ds.displaySimple(pullNum, true);
            _ds.displaySimple(vipTabIconConfig, true);
            _ds.displaySimple(entryGameTipImage, true);
            _ds.displaySimple(pullRefreshConfig, true);
            _ds.displaySimple(moreIconUrl, true);
            _ds.displaySimple(h5LoadingBgImgUrl, true);
            _ds.displaySimple(isAutoShowH5, false);
            return _os;
        }
    public:
        std::string gameID;
        taf::Int64 startTime;
        taf::Int64 endTime;
        std::string gameUrl;
        std::string entryGameTipImgUrl;
        std::string h5LoadingImgUrl;
        std::string closeIconUrl;
        taf::Int32 pullWay;
        taf::Bool vipOnly;
        taf::Int32 pullNum;
        jce::H5GameVipIconConfig vipTabIconConfig;
        jce::H5GameImageConfig entryGameTipImage;
        jce::PullRefreshConfig pullRefreshConfig;
        std::string moreIconUrl;
        std::string h5LoadingBgImgUrl;
        taf::Bool isAutoShowH5;
    };
    inline bool operator==(const H5GameConfig&l, const H5GameConfig&r)
    {
        return l.gameID == r.gameID && l.startTime == r.startTime && l.endTime == r.endTime && l.gameUrl == r.gameUrl && l.entryGameTipImgUrl == r.entryGameTipImgUrl && l.h5LoadingImgUrl == r.h5LoadingImgUrl && l.closeIconUrl == r.closeIconUrl && l.pullWay == r.pullWay && l.vipOnly == r.vipOnly && l.pullNum == r.pullNum && l.vipTabIconConfig == r.vipTabIconConfig && l.entryGameTipImage == r.entryGameTipImage && l.pullRefreshConfig == r.pullRefreshConfig && l.moreIconUrl == r.moreIconUrl && l.h5LoadingBgImgUrl == r.h5LoadingBgImgUrl && l.isAutoShowH5 == r.isAutoShowH5;
    }
    inline bool operator!=(const H5GameConfig&l, const H5GameConfig&r)
    {
        return !(l == r);
    }

    struct H5GameConfigData : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.H5GameConfigData";
        }
        static string MD5()
        {
            return "dd9135f4dbc0286dcb1c4cc13d09ad8a";
        }
        H5GameConfigData()
        :activityID(""),entryTabIcon(""),normalGameIcon(""),pressGameIcon("")
        {
        }
        void resetDefautlt()
        {
            activityID = "";
            entryTabIcon = "";
            normalGameIcon = "";
            pressGameIcon = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(activityID, 0);
            _os.write(entryTabIcon, 1);
            _os.write(normalGameIcon, 2);
            _os.write(pressGameIcon, 3);
            _os.write(gameItems, 4);
            _os.write(pullRefreshConfigs, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(activityID, 0, false);
            _is.read(entryTabIcon, 1, false);
            _is.read(normalGameIcon, 2, false);
            _is.read(pressGameIcon, 3, false);
            _is.read(gameItems, 4, false);
            _is.read(pullRefreshConfigs, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(activityID,"activityID");
            _ds.display(entryTabIcon,"entryTabIcon");
            _ds.display(normalGameIcon,"normalGameIcon");
            _ds.display(pressGameIcon,"pressGameIcon");
            _ds.display(gameItems,"gameItems");
            _ds.display(pullRefreshConfigs,"pullRefreshConfigs");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(activityID, true);
            _ds.displaySimple(entryTabIcon, true);
            _ds.displaySimple(normalGameIcon, true);
            _ds.displaySimple(pressGameIcon, true);
            _ds.displaySimple(gameItems, true);
            _ds.displaySimple(pullRefreshConfigs, false);
            return _os;
        }
    public:
        std::string activityID;
        std::string entryTabIcon;
        std::string normalGameIcon;
        std::string pressGameIcon;
        vector<jce::H5GameConfig> gameItems;
        vector<jce::PullRefreshConfig> pullRefreshConfigs;
    };
    inline bool operator==(const H5GameConfigData&l, const H5GameConfigData&r)
    {
        return l.activityID == r.activityID && l.entryTabIcon == r.entryTabIcon && l.normalGameIcon == r.normalGameIcon && l.pressGameIcon == r.pressGameIcon && l.gameItems == r.gameItems && l.pullRefreshConfigs == r.pullRefreshConfigs;
    }
    inline bool operator!=(const H5GameConfigData&l, const H5GameConfigData&r)
    {
        return !(l == r);
    }

    struct VipH5GameConfigRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipH5GameConfigRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        VipH5GameConfigRequest()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        taf::Int32 type;
    };
    inline bool operator==(const VipH5GameConfigRequest&l, const VipH5GameConfigRequest&r)
    {
        return l.type == r.type;
    }
    inline bool operator!=(const VipH5GameConfigRequest&l, const VipH5GameConfigRequest&r)
    {
        return !(l == r);
    }

    struct VipH5GameConfigResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipH5GameConfigResponse";
        }
        static string MD5()
        {
            return "4beda7225f00cfdb36c4b655262a1b3a";
        }
        VipH5GameConfigResponse()
        :errCode(0),serverTime(0),dataVersion("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            serverTime = 0;
            dataVersion = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(h5GameConfigData, 1);
            _os.write(serverTime, 2);
            _os.write(dataVersion, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(h5GameConfigData, 1, false);
            _is.read(serverTime, 2, false);
            _is.read(dataVersion, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(h5GameConfigData,"h5GameConfigData");
            _ds.display(serverTime,"serverTime");
            _ds.display(dataVersion,"dataVersion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(h5GameConfigData, true);
            _ds.displaySimple(serverTime, true);
            _ds.displaySimple(dataVersion, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::H5GameConfigData h5GameConfigData;
        taf::Int64 serverTime;
        std::string dataVersion;
    };
    inline bool operator==(const VipH5GameConfigResponse&l, const VipH5GameConfigResponse&r)
    {
        return l.errCode == r.errCode && l.h5GameConfigData == r.h5GameConfigData && l.serverTime == r.serverTime && l.dataVersion == r.dataVersion;
    }
    inline bool operator!=(const VipH5GameConfigResponse&l, const VipH5GameConfigResponse&r)
    {
        return !(l == r);
    }

    struct GetBindPhoneRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBindPhoneRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        GetBindPhoneRequest()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        taf::Int32 type;
    };
    inline bool operator==(const GetBindPhoneRequest&l, const GetBindPhoneRequest&r)
    {
        return l.type == r.type;
    }
    inline bool operator!=(const GetBindPhoneRequest&l, const GetBindPhoneRequest&r)
    {
        return !(l == r);
    }

    struct GetBindPhoneResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.GetBindPhoneResponse";
        }
        static string MD5()
        {
            return "9141704e4398a6906c7d619b2443d79c";
        }
        GetBindPhoneResponse()
        :errCode(0),bindFlag(0),msg(""),act(0),act_url(""),phone("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            bindFlag = 0;
            msg = "";
            act = 0;
            act_url = "";
            phone = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(bindFlag, 1);
            _os.write(msg, 2);
            _os.write(act, 3);
            _os.write(act_url, 4);
            _os.write(phone, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(bindFlag, 1, true);
            _is.read(msg, 2, false);
            _is.read(act, 3, false);
            _is.read(act_url, 4, false);
            _is.read(phone, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(bindFlag,"bindFlag");
            _ds.display(msg,"msg");
            _ds.display(act,"act");
            _ds.display(act_url,"act_url");
            _ds.display(phone,"phone");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(bindFlag, true);
            _ds.displaySimple(msg, true);
            _ds.displaySimple(act, true);
            _ds.displaySimple(act_url, true);
            _ds.displaySimple(phone, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        taf::Int32 bindFlag;
        std::string msg;
        taf::Int32 act;
        std::string act_url;
        std::string phone;
    };
    inline bool operator==(const GetBindPhoneResponse&l, const GetBindPhoneResponse&r)
    {
        return l.errCode == r.errCode && l.bindFlag == r.bindFlag && l.msg == r.msg && l.act == r.act && l.act_url == r.act_url && l.phone == r.phone;
    }
    inline bool operator!=(const GetBindPhoneResponse&l, const GetBindPhoneResponse&r)
    {
        return !(l == r);
    }

    struct OrderRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.OrderRequest";
        }
        static string MD5()
        {
            return "400ca38b8f32da90da652ea11ae948e8";
        }
        OrderRequest()
        :hlw_singlepayid(""),product_key(""),pf(0),actid(""),version(""),ex_params(""),pay_count(0),aid(""),offerid(""),platform(""),ip(""),refer(""),iaptype(0)
        {
        }
        void resetDefautlt()
        {
            hlw_singlepayid = "";
            product_key = "";
            pf = 0;
            actid = "";
            version = "";
            ex_params = "";
            pay_count = 0;
            aid = "";
            offerid = "";
            platform = "";
            ip = "";
            refer = "";
            iaptype = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(hlw_singlepayid, 1);
            _os.write(product_key, 2);
            _os.write(pf, 3);
            _os.write(actid, 4);
            _os.write(version, 5);
            _os.write(ex_params, 6);
            _os.write(pay_count, 7);
            _os.write(aid, 8);
            _os.write(offerid, 9);
            _os.write(platform, 10);
            _os.write(ip, 11);
            _os.write(refer, 12);
            _os.write(iaptype, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(hlw_singlepayid, 1, true);
            _is.read(product_key, 2, false);
            _is.read(pf, 3, false);
            _is.read(actid, 4, false);
            _is.read(version, 5, false);
            _is.read(ex_params, 6, false);
            _is.read(pay_count, 7, false);
            _is.read(aid, 8, false);
            _is.read(offerid, 9, false);
            _is.read(platform, 10, false);
            _is.read(ip, 11, false);
            _is.read(refer, 12, false);
            _is.read(iaptype, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(hlw_singlepayid,"hlw_singlepayid");
            _ds.display(product_key,"product_key");
            _ds.display(pf,"pf");
            _ds.display(actid,"actid");
            _ds.display(version,"version");
            _ds.display(ex_params,"ex_params");
            _ds.display(pay_count,"pay_count");
            _ds.display(aid,"aid");
            _ds.display(offerid,"offerid");
            _ds.display(platform,"platform");
            _ds.display(ip,"ip");
            _ds.display(refer,"refer");
            _ds.display(iaptype,"iaptype");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(hlw_singlepayid, true);
            _ds.displaySimple(product_key, true);
            _ds.displaySimple(pf, true);
            _ds.displaySimple(actid, true);
            _ds.displaySimple(version, true);
            _ds.displaySimple(ex_params, true);
            _ds.displaySimple(pay_count, true);
            _ds.displaySimple(aid, true);
            _ds.displaySimple(offerid, true);
            _ds.displaySimple(platform, true);
            _ds.displaySimple(ip, true);
            _ds.displaySimple(refer, true);
            _ds.displaySimple(iaptype, false);
            return _os;
        }
    public:
        std::string hlw_singlepayid;
        std::string product_key;
        taf::Int32 pf;
        std::string actid;
        std::string version;
        std::string ex_params;
        taf::UInt32 pay_count;
        std::string aid;
        std::string offerid;
        std::string platform;
        std::string ip;
        std::string refer;
        taf::Int32 iaptype;
    };
    inline bool operator==(const OrderRequest&l, const OrderRequest&r)
    {
        return l.hlw_singlepayid == r.hlw_singlepayid && l.product_key == r.product_key && l.pf == r.pf && l.actid == r.actid && l.version == r.version && l.ex_params == r.ex_params && l.pay_count == r.pay_count && l.aid == r.aid && l.offerid == r.offerid && l.platform == r.platform && l.ip == r.ip && l.refer == r.refer && l.iaptype == r.iaptype;
    }
    inline bool operator!=(const OrderRequest&l, const OrderRequest&r)
    {
        return !(l == r);
    }

    struct OrderResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.OrderResponse";
        }
        static string MD5()
        {
            return "c4d7e629c0ca65edfd0bf3b3fb53b7d1";
        }
        OrderResponse()
        :retcode(0),error_msg(""),url_params(""),payitem(""),apple_id("")
        {
        }
        void resetDefautlt()
        {
            retcode = 0;
            error_msg = "";
            url_params = "";
            payitem = "";
            apple_id = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(retcode, 0);
            _os.write(error_msg, 1);
            _os.write(url_params, 2);
            _os.write(payitem, 3);
            _os.write(apple_id, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(retcode, 0, true);
            _is.read(error_msg, 1, false);
            _is.read(url_params, 2, false);
            _is.read(payitem, 3, false);
            _is.read(apple_id, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(retcode,"retcode");
            _ds.display(error_msg,"error_msg");
            _ds.display(url_params,"url_params");
            _ds.display(payitem,"payitem");
            _ds.display(apple_id,"apple_id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(retcode, true);
            _ds.displaySimple(error_msg, true);
            _ds.displaySimple(url_params, true);
            _ds.displaySimple(payitem, true);
            _ds.displaySimple(apple_id, false);
            return _os;
        }
    public:
        taf::Int32 retcode;
        std::string error_msg;
        std::string url_params;
        std::string payitem;
        std::string apple_id;
    };
    inline bool operator==(const OrderResponse&l, const OrderResponse&r)
    {
        return l.retcode == r.retcode && l.error_msg == r.error_msg && l.url_params == r.url_params && l.payitem == r.payitem && l.apple_id == r.apple_id;
    }
    inline bool operator!=(const OrderResponse&l, const OrderResponse&r)
    {
        return !(l == r);
    }

    struct WhiteListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WhiteListRequest";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        WhiteListRequest()
        :version(0),rule_name("")
        {
        }
        void resetDefautlt()
        {
            version = 0;
            rule_name = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(version, 1);
            _os.write(rule_name, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(version, 1, true);
            _is.read(rule_name, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(version,"version");
            _ds.display(rule_name,"rule_name");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(version, true);
            _ds.displaySimple(rule_name, false);
            return _os;
        }
    public:
        taf::Int32 version;
        std::string rule_name;
    };
    inline bool operator==(const WhiteListRequest&l, const WhiteListRequest&r)
    {
        return l.version == r.version && l.rule_name == r.rule_name;
    }
    inline bool operator!=(const WhiteListRequest&l, const WhiteListRequest&r)
    {
        return !(l == r);
    }

    struct WhiteListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.WhiteListResponse";
        }
        static string MD5()
        {
            return "5776fd7103fcea055637c7e8b9708bb0";
        }
        WhiteListResponse()
        :ret(0),errmsg(""),is_auth(0)
        {
        }
        void resetDefautlt()
        {
            ret = 0;
            errmsg = "";
            is_auth = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ret, 1);
            _os.write(errmsg, 2);
            _os.write(is_auth, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ret, 1, true);
            _is.read(errmsg, 2, true);
            _is.read(is_auth, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ret,"ret");
            _ds.display(errmsg,"errmsg");
            _ds.display(is_auth,"is_auth");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ret, true);
            _ds.displaySimple(errmsg, true);
            _ds.displaySimple(is_auth, false);
            return _os;
        }
    public:
        taf::Int32 ret;
        std::string errmsg;
        taf::Int32 is_auth;
    };
    inline bool operator==(const WhiteListResponse&l, const WhiteListResponse&r)
    {
        return l.ret == r.ret && l.errmsg == r.errmsg && l.is_auth == r.is_auth;
    }
    inline bool operator!=(const WhiteListResponse&l, const WhiteListResponse&r)
    {
        return !(l == r);
    }

    struct VipCommonConfigRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipCommonConfigRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        VipCommonConfigRequest()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        taf::Int32 type;
    };
    inline bool operator==(const VipCommonConfigRequest&l, const VipCommonConfigRequest&r)
    {
        return l.type == r.type;
    }
    inline bool operator!=(const VipCommonConfigRequest&l, const VipCommonConfigRequest&r)
    {
        return !(l == r);
    }

    struct VipSpokesPersonConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipSpokesPersonConfig";
        }
        static string MD5()
        {
            return "6f9bbe5ace26b7b7f6916c52b00462f6";
        }
        VipSpokesPersonConfig()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(imageUrlMap, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(imageUrlMap, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(imageUrlMap,"imageUrlMap");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(imageUrlMap, false);
            return _os;
        }
    public:
        map<std::string, std::string> imageUrlMap;
    };
    inline bool operator==(const VipSpokesPersonConfig&l, const VipSpokesPersonConfig&r)
    {
        return l.imageUrlMap == r.imageUrlMap;
    }
    inline bool operator!=(const VipSpokesPersonConfig&l, const VipSpokesPersonConfig&r)
    {
        return !(l == r);
    }

    struct VipPromotionInfoConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipPromotionInfoConfig";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        VipPromotionInfoConfig()
        :promationPageUrl("")
        {
        }
        void resetDefautlt()
        {
            promationPageUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(promationPageUrl, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(promationPageUrl, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(promationPageUrl,"promationPageUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(promationPageUrl, false);
            return _os;
        }
    public:
        std::string promationPageUrl;
    };
    inline bool operator==(const VipPromotionInfoConfig&l, const VipPromotionInfoConfig&r)
    {
        return l.promationPageUrl == r.promationPageUrl;
    }
    inline bool operator!=(const VipPromotionInfoConfig&l, const VipPromotionInfoConfig&r)
    {
        return !(l == r);
    }

    struct VipExclusivePrivilegeInfoConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipExclusivePrivilegeInfoConfig";
        }
        static string MD5()
        {
            return "6cf1348cdd69f924109dd734bc911528";
        }
        VipExclusivePrivilegeInfoConfig()
        :animationFileUrl(""),beginColor(""),endColor(""),levelPageUrl(""),levelUpTips(""),btnTitle("")
        {
        }
        void resetDefautlt()
        {
            animationFileUrl = "";
            beginColor = "";
            endColor = "";
            levelPageUrl = "";
            levelUpTips = "";
            btnTitle = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(animationFileUrl, 0);
            _os.write(beginColor, 1);
            _os.write(endColor, 2);
            _os.write(levelPageUrl, 3);
            _os.write(levelUpTips, 4);
            _os.write(btnTitle, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(animationFileUrl, 0, false);
            _is.read(beginColor, 1, false);
            _is.read(endColor, 2, false);
            _is.read(levelPageUrl, 3, false);
            _is.read(levelUpTips, 4, false);
            _is.read(btnTitle, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(animationFileUrl,"animationFileUrl");
            _ds.display(beginColor,"beginColor");
            _ds.display(endColor,"endColor");
            _ds.display(levelPageUrl,"levelPageUrl");
            _ds.display(levelUpTips,"levelUpTips");
            _ds.display(btnTitle,"btnTitle");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(animationFileUrl, true);
            _ds.displaySimple(beginColor, true);
            _ds.displaySimple(endColor, true);
            _ds.displaySimple(levelPageUrl, true);
            _ds.displaySimple(levelUpTips, true);
            _ds.displaySimple(btnTitle, false);
            return _os;
        }
    public:
        std::string animationFileUrl;
        std::string beginColor;
        std::string endColor;
        std::string levelPageUrl;
        std::string levelUpTips;
        std::string btnTitle;
    };
    inline bool operator==(const VipExclusivePrivilegeInfoConfig&l, const VipExclusivePrivilegeInfoConfig&r)
    {
        return l.animationFileUrl == r.animationFileUrl && l.beginColor == r.beginColor && l.endColor == r.endColor && l.levelPageUrl == r.levelPageUrl && l.levelUpTips == r.levelUpTips && l.btnTitle == r.btnTitle;
    }
    inline bool operator!=(const VipExclusivePrivilegeInfoConfig&l, const VipExclusivePrivilegeInfoConfig&r)
    {
        return !(l == r);
    }

    struct PUGCVideoPromotionInfoConfig : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PUGCVideoPromotionInfoConfig";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        PUGCVideoPromotionInfoConfig()
        :promationTips("")
        {
        }
        void resetDefautlt()
        {
            promationTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(promationTips, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(promationTips, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(promationTips,"promationTips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(promationTips, false);
            return _os;
        }
    public:
        std::string promationTips;
    };
    inline bool operator==(const PUGCVideoPromotionInfoConfig&l, const PUGCVideoPromotionInfoConfig&r)
    {
        return l.promationTips == r.promationTips;
    }
    inline bool operator!=(const PUGCVideoPromotionInfoConfig&l, const PUGCVideoPromotionInfoConfig&r)
    {
        return !(l == r);
    }

    struct VipCommonConfigResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VipCommonConfigResponse";
        }
        static string MD5()
        {
            return "9ecb032d571bb9021a797f11223228ad";
        }
        VipCommonConfigResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(spokesPersonConfig, 1);
            _os.write(promotionInfoConfig, 2);
            _os.write(exclusivePrivilegeInfoConfig, 3);
            _os.write(pugcVideoPromotionInfoConfig, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(spokesPersonConfig, 1, false);
            _is.read(promotionInfoConfig, 2, false);
            _is.read(exclusivePrivilegeInfoConfig, 3, false);
            _is.read(pugcVideoPromotionInfoConfig, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(spokesPersonConfig,"spokesPersonConfig");
            _ds.display(promotionInfoConfig,"promotionInfoConfig");
            _ds.display(exclusivePrivilegeInfoConfig,"exclusivePrivilegeInfoConfig");
            _ds.display(pugcVideoPromotionInfoConfig,"pugcVideoPromotionInfoConfig");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(spokesPersonConfig, true);
            _ds.displaySimple(promotionInfoConfig, true);
            _ds.displaySimple(exclusivePrivilegeInfoConfig, true);
            _ds.displaySimple(pugcVideoPromotionInfoConfig, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::VipSpokesPersonConfig spokesPersonConfig;
        jce::VipPromotionInfoConfig promotionInfoConfig;
        jce::VipExclusivePrivilegeInfoConfig exclusivePrivilegeInfoConfig;
        jce::PUGCVideoPromotionInfoConfig pugcVideoPromotionInfoConfig;
    };
    inline bool operator==(const VipCommonConfigResponse&l, const VipCommonConfigResponse&r)
    {
        return l.errCode == r.errCode && l.spokesPersonConfig == r.spokesPersonConfig && l.promotionInfoConfig == r.promotionInfoConfig && l.exclusivePrivilegeInfoConfig == r.exclusivePrivilegeInfoConfig && l.pugcVideoPromotionInfoConfig == r.pugcVideoPromotionInfoConfig;
    }
    inline bool operator!=(const VipCommonConfigResponse&l, const VipCommonConfigResponse&r)
    {
        return !(l == r);
    }

    struct ExclusivePrivilegePayVideoPlayRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ExclusivePrivilegePayVideoPlayRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        ExclusivePrivilegePayVideoPlayRequest()
        :cid(""),lid(""),vid("")
        {
        }
        void resetDefautlt()
        {
            cid = "";
            lid = "";
            vid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cid, 0);
            _os.write(lid, 1);
            _os.write(vid, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cid, 0, false);
            _is.read(lid, 1, false);
            _is.read(vid, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cid,"cid");
            _ds.display(lid,"lid");
            _ds.display(vid,"vid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(lid, true);
            _ds.displaySimple(vid, false);
            return _os;
        }
    public:
        std::string cid;
        std::string lid;
        std::string vid;
    };
    inline bool operator==(const ExclusivePrivilegePayVideoPlayRequest&l, const ExclusivePrivilegePayVideoPlayRequest&r)
    {
        return l.cid == r.cid && l.lid == r.lid && l.vid == r.vid;
    }
    inline bool operator!=(const ExclusivePrivilegePayVideoPlayRequest&l, const ExclusivePrivilegePayVideoPlayRequest&r)
    {
        return !(l == r);
    }

    struct ExclusivePrivilegePayVideoPlayResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.ExclusivePrivilegePayVideoPlayResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        ExclusivePrivilegePayVideoPlayResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const ExclusivePrivilegePayVideoPlayResponse&l, const ExclusivePrivilegePayVideoPlayResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const ExclusivePrivilegePayVideoPlayResponse&l, const ExclusivePrivilegePayVideoPlayResponse&r)
    {
        return !(l == r);
    }

    struct PointStoreInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PointStoreInfoRequest";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        PointStoreInfoRequest()
        :type(0)
        {
        }
        void resetDefautlt()
        {
            type = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(type, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, false);
            return _os;
        }
    public:
        taf::Int32 type;
    };
    inline bool operator==(const PointStoreInfoRequest&l, const PointStoreInfoRequest&r)
    {
        return l.type == r.type;
    }
    inline bool operator!=(const PointStoreInfoRequest&l, const PointStoreInfoRequest&r)
    {
        return !(l == r);
    }

    struct PointStoreInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.PointStoreInfoResponse";
        }
        static string MD5()
        {
            return "c4d7e629c0ca65edfd0bf3b3fb53b7d1";
        }
        PointStoreInfoResponse()
        :errCode(0),tips(""),title(""),subTitle(""),jumpUrl("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            tips = "";
            title = "";
            subTitle = "";
            jumpUrl = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(tips, 1);
            _os.write(title, 2);
            _os.write(subTitle, 3);
            _os.write(jumpUrl, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(tips, 1, false);
            _is.read(title, 2, false);
            _is.read(subTitle, 3, false);
            _is.read(jumpUrl, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(tips,"tips");
            _ds.display(title,"title");
            _ds.display(subTitle,"subTitle");
            _ds.display(jumpUrl,"jumpUrl");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(tips, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(subTitle, true);
            _ds.displaySimple(jumpUrl, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string tips;
        std::string title;
        std::string subTitle;
        std::string jumpUrl;
    };
    inline bool operator==(const PointStoreInfoResponse&l, const PointStoreInfoResponse&r)
    {
        return l.errCode == r.errCode && l.tips == r.tips && l.title == r.title && l.subTitle == r.subTitle && l.jumpUrl == r.jumpUrl;
    }
    inline bool operator!=(const PointStoreInfoResponse&l, const PointStoreInfoResponse&r)
    {
        return !(l == r);
    }

    struct VideoPlayTimeReportRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoPlayTimeReportRequest";
        }
        static string MD5()
        {
            return "6154084db8ad42c0429d593f0a208986";
        }
        VideoPlayTimeReportRequest()
        :videoFlag(0),videoPlayDuration(0),videoCurrentPlayTime(0),vid(""),cid(""),lid("")
        {
        }
        void resetDefautlt()
        {
            videoFlag = 0;
            videoPlayDuration = 0;
            videoCurrentPlayTime = 0;
            vid = "";
            cid = "";
            lid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(videoFlag, 0);
            _os.write(videoPlayDuration, 1);
            _os.write(videoCurrentPlayTime, 2);
            _os.write(vid, 3);
            _os.write(cid, 4);
            _os.write(lid, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(videoFlag, 0, true);
            _is.read(videoPlayDuration, 1, true);
            _is.read(videoCurrentPlayTime, 2, true);
            _is.read(vid, 3, false);
            _is.read(cid, 4, false);
            _is.read(lid, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(videoFlag,"videoFlag");
            _ds.display(videoPlayDuration,"videoPlayDuration");
            _ds.display(videoCurrentPlayTime,"videoCurrentPlayTime");
            _ds.display(vid,"vid");
            _ds.display(cid,"cid");
            _ds.display(lid,"lid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(videoFlag, true);
            _ds.displaySimple(videoPlayDuration, true);
            _ds.displaySimple(videoCurrentPlayTime, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(lid, false);
            return _os;
        }
    public:
        taf::Int32 videoFlag;
        taf::Int32 videoPlayDuration;
        taf::Int32 videoCurrentPlayTime;
        std::string vid;
        std::string cid;
        std::string lid;
    };
    inline bool operator==(const VideoPlayTimeReportRequest&l, const VideoPlayTimeReportRequest&r)
    {
        return l.videoFlag == r.videoFlag && l.videoPlayDuration == r.videoPlayDuration && l.videoCurrentPlayTime == r.videoCurrentPlayTime && l.vid == r.vid && l.cid == r.cid && l.lid == r.lid;
    }
    inline bool operator!=(const VideoPlayTimeReportRequest&l, const VideoPlayTimeReportRequest&r)
    {
        return !(l == r);
    }

    struct VideoPlayTimeReportResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.VideoPlayTimeReportResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        VideoPlayTimeReportResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const VideoPlayTimeReportResponse&l, const VideoPlayTimeReportResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const VideoPlayTimeReportResponse&l, const VideoPlayTimeReportResponse&r)
    {
        return !(l == r);
    }

    struct UserStudyListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserStudyListRequest";
        }
        static string MD5()
        {
            return "6f9bbe5ace26b7b7f6916c52b00462f6";
        }
        UserStudyListRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(data, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(data, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(data,"data");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(data, false);
            return _os;
        }
    public:
        map<std::string, std::string> data;
    };
    inline bool operator==(const UserStudyListRequest&l, const UserStudyListRequest&r)
    {
        return l.data == r.data;
    }
    inline bool operator!=(const UserStudyListRequest&l, const UserStudyListRequest&r)
    {
        return !(l == r);
    }

    struct UserStudyListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.UserStudyListResponse";
        }
        static string MD5()
        {
            return "604483a40ddff31729bfc1e857ead015";
        }
        UserStudyListResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(studyPosterList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(studyPosterList, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(studyPosterList,"studyPosterList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(studyPosterList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        jce::ONAUserStudyPoster studyPosterList;
    };
    inline bool operator==(const UserStudyListResponse&l, const UserStudyListResponse&r)
    {
        return l.errCode == r.errCode && l.studyPosterList == r.studyPosterList;
    }
    inline bool operator!=(const UserStudyListResponse&l, const UserStudyListResponse&r)
    {
        return !(l == r);
    }

    struct KnowledgeVideoStudyTimeRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.KnowledgeVideoStudyTimeRequest";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        KnowledgeVideoStudyTimeRequest()
        :cid(""),vid(""),lid("")
        {
        }
        void resetDefautlt()
        {
            cid = "";
            vid = "";
            lid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(cid, 1);
            _os.write(vid, 2);
            _os.write(lid, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(cid, 1, false);
            _is.read(vid, 2, false);
            _is.read(lid, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(cid,"cid");
            _ds.display(vid,"vid");
            _ds.display(lid,"lid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(cid, true);
            _ds.displaySimple(vid, true);
            _ds.displaySimple(lid, false);
            return _os;
        }
    public:
        std::string cid;
        std::string vid;
        std::string lid;
    };
    inline bool operator==(const KnowledgeVideoStudyTimeRequest&l, const KnowledgeVideoStudyTimeRequest&r)
    {
        return l.cid == r.cid && l.vid == r.vid && l.lid == r.lid;
    }
    inline bool operator!=(const KnowledgeVideoStudyTimeRequest&l, const KnowledgeVideoStudyTimeRequest&r)
    {
        return !(l == r);
    }

    struct KnowledgeVideoStudyTimeResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.KnowledgeVideoStudyTimeResponse";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        KnowledgeVideoStudyTimeResponse()
        :errCode(0),studyTips("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            studyTips = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(studyTips, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(studyTips, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(studyTips,"studyTips");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(studyTips, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string studyTips;
    };
    inline bool operator==(const KnowledgeVideoStudyTimeResponse&l, const KnowledgeVideoStudyTimeResponse&r)
    {
        return l.errCode == r.errCode && l.studyTips == r.studyTips;
    }
    inline bool operator!=(const KnowledgeVideoStudyTimeResponse&l, const KnowledgeVideoStudyTimeResponse&r)
    {
        return !(l == r);
    }


}

#define jce_VisitorUserInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.isVip,b.isVip);jce_copy_struct(a.beginTime,b.beginTime);jce_copy_struct(a.endTime,b.endTime);

#define jce_VipSupplementaryInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.isSupplementaryVip,b.isSupplementaryVip);jce_copy_struct(a.iconUrl,b.iconUrl);

#define jce_VipUserInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uin,b.uin);jce_copy_struct(a.isVip,b.isVip);jce_copy_struct(a.beginTime,b.beginTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.level,b.level);jce_copy_struct(a.isAnnualVip,b.isAnnualVip);jce_copy_struct(a.logoUrl,b.logoUrl);jce_copy_struct(a.jsonData,b.jsonData);jce_copy_struct(a.canImport,b.canImport);jce_copy_struct(a.endMsg,b.endMsg);jce_copy_struct(a.serviceType,b.serviceType);jce_copy_struct(a.annualBeginTime,b.annualBeginTime);jce_copy_struct(a.annualEndTime,b.annualEndTime);jce_copy_struct(a.isLoginCheckFail,b.isLoginCheckFail);jce_copy_struct(a.visitorUserInfo,b.visitorUserInfo);jce_copy_struct(a.isLevelUp,b.isLevelUp);jce_copy_struct(a.levelUpVersion,b.levelUpVersion);jce_copy_struct(a.longVipIconUrl,b.longVipIconUrl);jce_copy_struct(a.shortVipIconUrl,b.shortVipIconUrl);jce_copy_struct(a.vipSupplementaryInfo,b.vipSupplementaryInfo);

#define jce_VipOrderItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.oid,b.oid);jce_copy_struct(a.c_status,b.c_status);jce_copy_struct(a.valid_days,b.valid_days);jce_copy_struct(a.beginTime,b.beginTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.title,b.title);jce_copy_struct(a.discount,b.discount);jce_copy_struct(a.singlePrice,b.singlePrice);jce_copy_struct(a.vipPrice,b.vipPrice);jce_copy_struct(a.endDate,b.endDate);jce_copy_struct(a.productType,b.productType);jce_copy_struct(a.playRight,b.playRight);jce_copy_struct(a.drm,b.drm);jce_copy_struct(a.webUrl,b.webUrl);jce_copy_struct(a.checkupGrade,b.checkupGrade);jce_copy_struct(a.payType,b.payType);jce_copy_struct(a.pic,b.pic);

#define jce_VipUserInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.test,b.test);

#define jce_VipUserInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.vipUserInfo,b.vipUserInfo);

#define jce_VipConfigRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.test,b.test);

#define jce_VipConfigResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.vipConfig,b.vipConfig);

#define jce_PlayerPayViewCopyWriting_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.topStr,b.topStr);jce_copy_struct(a.topSubStr,b.topSubStr);jce_copy_struct(a.leftBtnStr,b.leftBtnStr);jce_copy_struct(a.rightBtnStr,b.rightBtnStr);jce_copy_struct(a.belowStr,b.belowStr);jce_copy_struct(a.titleBtnStr,b.titleBtnStr);

#define jce_VipPayCopyWriting_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sceneType,b.sceneType);jce_copy_struct(a.playerPayCopyWriting,b.playerPayCopyWriting);jce_copy_struct(a.payDlgCopyWriting,b.payDlgCopyWriting);

#define jce_GetVideoPayInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.type,b.type);jce_copy_struct(a.queryType,b.queryType);jce_copy_struct(a.payStatus,b.payStatus);

#define jce_GetVideoPayInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.payState,b.payState);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.singlePrice,b.singlePrice);jce_copy_struct(a.vipPrice,b.vipPrice);jce_copy_struct(a.canUsedCount,b.canUsedCount);jce_copy_struct(a.downloadState,b.downloadState);jce_copy_struct(a.moreActionBar,b.moreActionBar);jce_copy_struct(a.copywriteConfig,b.copywriteConfig);jce_copy_struct(a.iapSinglePrice,b.iapSinglePrice);jce_copy_struct(a.iapVipPrice,b.iapVipPrice);jce_copy_struct(a.iapNonVipAppleId,b.iapNonVipAppleId);jce_copy_struct(a.iapVipAppleId,b.iapVipAppleId);jce_copy_struct(a.displayStyle,b.displayStyle);jce_copy_struct(a.canUseTicket,b.canUseTicket);jce_copy_struct(a.noIapDay,b.noIapDay);jce_copy_struct(a.iapDay,b.iapDay);jce_copy_struct(a.giftInfo,b.giftInfo);jce_copy_struct(a.specialPayType,b.specialPayType);jce_copy_struct(a.vipPayCopyWritingList,b.vipPayCopyWritingList);jce_copy_struct(a.videoStatus,b.videoStatus);jce_copy_struct(a.isExclusivePrivilegePayState,b.isExclusivePrivilegePayState);jce_copy_struct(a.payWay,b.payWay);jce_copy_struct(a.diamondVipPrice,b.diamondVipPrice);jce_copy_struct(a.diamondNormalPrice,b.diamondNormalPrice);jce_copy_struct(a.diamondPayH5Url,b.diamondPayH5Url);jce_copy_struct(a.exchangeRate,b.exchangeRate);

#define jce_DiamondPayRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.senceType,b.senceType);jce_copy_struct(a.productId,b.productId);jce_copy_struct(a.aid,b.aid);jce_copy_struct(a.subSenceType,b.subSenceType);jce_copy_struct(a.subProductIdList,b.subProductIdList);

#define jce_DiamondPayResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);

#define jce_PriceCloudRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.type,b.type);jce_copy_struct(a.offerId,b.offerId);jce_copy_struct(a.aid,b.aid);

#define jce_PriceCloudResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.token,b.token);jce_copy_struct(a.url_params,b.url_params);

#define jce_VipOrderListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);

#define jce_VipOrderListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.total,b.total);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.orderItemList,b.orderItemList);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define jce_GetTicketListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.test,b.test);

#define jce_GetTicketListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.total,b.total);jce_copy_struct(a.visiterTotal,b.visiterTotal);

#define jce_TicketTradeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.type,b.type);jce_copy_struct(a.userType,b.userType);

#define jce_TicketTradeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);

#define jce_VIPPayProduct_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.productName,b.productName);jce_copy_struct(a.serviceCode,b.serviceCode);jce_copy_struct(a.goodSid,b.goodSid);jce_copy_struct(a.wxServiceCode,b.wxServiceCode);jce_copy_struct(a.wxGoodSid,b.wxGoodSid);

#define jce_VIPPayProductListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.flag,b.flag);

#define jce_VIPPayProductListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.VipImageUrl,b.VipImageUrl);jce_copy_struct(a.SkipAdImageUrl,b.SkipAdImageUrl);jce_copy_struct(a.productList,b.productList);jce_copy_struct(a.isAutoRenew,b.isAutoRenew);

#define jce_GetLiveGiftListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.keyType,b.keyType);jce_copy_struct(a.actorId,b.actorId);jce_copy_struct(a.propsDataKey,b.propsDataKey);jce_copy_struct(a.pointTime,b.pointTime);jce_copy_struct(a.model,b.model);jce_copy_struct(a.idType,b.idType);

#define jce_GetLiveGiftListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.giftTitle,b.giftTitle);jce_copy_struct(a.giftDes,b.giftDes);jce_copy_struct(a.giftList,b.giftList);jce_copy_struct(a.freeGiftCount,b.freeGiftCount);jce_copy_struct(a.qzTopicBarInfo,b.qzTopicBarInfo);

#define jce_ApplyGiftRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.productId,b.productId);jce_copy_struct(a.actorId,b.actorId);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.keyType,b.keyType);jce_copy_struct(a.propsDataKey,b.propsDataKey);jce_copy_struct(a.model,b.model);jce_copy_struct(a.productNum,b.productNum);jce_copy_struct(a.productType,b.productType);jce_copy_struct(a.overRank,b.overRank);jce_copy_struct(a.idType,b.idType);

#define jce_ApplyGiftResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.giftItem,b.giftItem);jce_copy_struct(a.rank,b.rank);jce_copy_struct(a.productType,b.productType);

#define jce_GetVideoDownloadInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);

#define jce_GetVideoDownloadInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.downloadState,b.downloadState);jce_copy_struct(a.tips,b.tips);jce_copy_struct(a.action,b.action);jce_copy_struct(a.negativeBtn,b.negativeBtn);jce_copy_struct(a.positiveBtn,b.positiveBtn);

#define jce_CoverPrice_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ordinaryPrice,b.ordinaryPrice);jce_copy_struct(a.vipPrice,b.vipPrice);jce_copy_struct(a.ordinaryIapPrice,b.ordinaryIapPrice);jce_copy_struct(a.vipIapPrice,b.vipIapPrice);

#define jce_CheckDownloadCopyrightResult_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.requestItems,b.requestItems);jce_copy_struct(a.downloadState,b.downloadState);jce_copy_struct(a.detailCode,b.detailCode);jce_copy_struct(a.detailTips,b.detailTips);jce_copy_struct(a.cacheCheckVip,b.cacheCheckVip);jce_copy_struct(a.errorCode,b.errorCode);jce_copy_struct(a.priceInfo,b.priceInfo);

#define jce_CheckDownloadCopyrightListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.downloadCopyrightItems,b.downloadCopyrightItems);

#define jce_CheckDownloadCopyrightListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.downloadCopyrightResults,b.downloadCopyrightResults);

#define jce_CheckDownloadCopyrightRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.type,b.type);

#define jce_CheckDownloadCopyrightResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.downloadState,b.downloadState);jce_copy_struct(a.detailCode,b.detailCode);jce_copy_struct(a.detailTips,b.detailTips);jce_copy_struct(a.cacheCheckVip,b.cacheCheckVip);jce_copy_struct(a.priceInfo,b.priceInfo);

#define jce_VipTipsInfoViewRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.streamid,b.streamid);

#define jce_VipTipsInfoViewResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.content,b.content);jce_copy_struct(a.background,b.background);jce_copy_struct(a.action,b.action);

#define jce_GetVipTipsRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.requestType,b.requestType);

#define jce_GetVipTipsResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.type,b.type);jce_copy_struct(a.displayTime,b.displayTime);jce_copy_struct(a.leftContentInfo,b.leftContentInfo);jce_copy_struct(a.rightContentInfo,b.rightContentInfo);jce_copy_struct(a.tipsId,b.tipsId);

#define jce_VipCommonMsg_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.displayTime,b.displayTime);jce_copy_struct(a.text,b.text);jce_copy_struct(a.actionUrl,b.actionUrl);jce_copy_struct(a.bgImageUrl,b.bgImageUrl);jce_copy_struct(a.showMode,b.showMode);jce_copy_struct(a.extraReportKVs,b.extraReportKVs);

#define jce_VipCommonMsgRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.id,b.id);jce_copy_struct(a.localShowedTimes,b.localShowedTimes);

#define jce_VipCommonMsgResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.numberMap,b.numberMap);jce_copy_struct(a.stringMap,b.stringMap);jce_copy_struct(a.extraReportKVs,b.extraReportKVs);jce_copy_struct(a.dataVersion,b.dataVersion);jce_copy_struct(a.vipCommonMsgs,b.vipCommonMsgs);

#define jce_CheckGiveRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.type,b.type);

#define jce_CheckGiveResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.leftNum,b.leftNum);jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.shareItem,b.shareItem);jce_copy_struct(a.tips,b.tips);jce_copy_struct(a.canGive,b.canGive);jce_copy_struct(a.wishList,b.wishList);jce_copy_struct(a.score,b.score);jce_copy_struct(a.hasGive,b.hasGive);

#define jce_GiveMovieRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dataKey,b.dataKey);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.pid,b.pid);jce_copy_struct(a.nickName,b.nickName);jce_copy_struct(a.headerUrl,b.headerUrl);jce_copy_struct(a.channel,b.channel);jce_copy_struct(a.score,b.score);jce_copy_struct(a.wishWords,b.wishWords);

#define jce_GiveMovieResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.errMsg,b.errMsg);jce_copy_struct(a.leftNum,b.leftNum);

#define jce_CheckBindAccountRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);

#define jce_CheckBindAccountResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.isVip,b.isVip);jce_copy_struct(a.text,b.text);jce_copy_struct(a.tabTips,b.tabTips);jce_copy_struct(a.playerTips,b.playerTips);

#define jce_CheckNewPresentRightRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.version,b.version);

#define jce_CheckNewPresentRightResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.version,b.version);jce_copy_struct(a.count,b.count);

#define jce_MarketAttentRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.attentKeyList,b.attentKeyList);jce_copy_struct(a.option,b.option);

#define jce_MarketAttentResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.attentItemList,b.attentItemList);

#define jce_QueryUserMarketAttentRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);

#define jce_QueryUserMarketAttentResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.attentItemList,b.attentItemList);

#define jce_QueryUserMarketDataRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.activityId,b.activityId);

#define jce_QueryUserMarketDataResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.lines,b.lines);

#define jce_ActionButton_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.title,b.title);jce_copy_struct(a.action,b.action);jce_copy_struct(a.type,b.type);jce_copy_struct(a.buttonBackgroundColor,b.buttonBackgroundColor);jce_copy_struct(a.buttonTextColor,b.buttonTextColor);jce_copy_struct(a.targetPageFrame,b.targetPageFrame);

#define jce_AccountPlayPermissionRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.playerErrorCode,b.playerErrorCode);jce_copy_struct(a.isCheckBannedOnly,b.isCheckBannedOnly);

#define jce_AccountPlayPermissionResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.hasPermission,b.hasPermission);jce_copy_struct(a.message,b.message);jce_copy_struct(a.buttons,b.buttons);jce_copy_struct(a.isBanned,b.isBanned);

#define jce_UserCenterVipEntryRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);

#define jce_UserCenterVipEntryResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.iconUrl,b.iconUrl);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subtitle,b.subtitle);

#define jce_TitleBarConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bgUrl,b.bgUrl);jce_copy_struct(a.bgColor,b.bgColor);jce_copy_struct(a.title,b.title);jce_copy_struct(a.openVipText,b.openVipText);jce_copy_struct(a.openVipBgColor,b.openVipBgColor);jce_copy_struct(a.searchIconColor,b.searchIconColor);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);

#define jce_TabBarConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bgUrl,b.bgUrl);jce_copy_struct(a.bgColor,b.bgColor);jce_copy_struct(a.vipIconNormal,b.vipIconNormal);jce_copy_struct(a.vipIconSelected,b.vipIconSelected);jce_copy_struct(a.textColor,b.textColor);jce_copy_struct(a.iconColor,b.iconColor);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);

#define jce_OpenVipConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tryLookText,b.tryLookText);jce_copy_struct(a.wholeText,b.wholeText);jce_copy_struct(a.tryLookSubscript,b.tryLookSubscript);jce_copy_struct(a.definitionSubscript,b.definitionSubscript);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);

#define jce_ChannelNameColorConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.bgColor,b.bgColor);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.slideImgUrl,b.slideImgUrl);jce_copy_struct(a.slideBoardColor,b.slideBoardColor);

#define jce_VipActivityConfigRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);

#define jce_VipActivityConfigResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.titleBarConfig,b.titleBarConfig);jce_copy_struct(a.tabBarConfig,b.tabBarConfig);jce_copy_struct(a.pullRefreshConfig,b.pullRefreshConfig);jce_copy_struct(a.openVipConfig,b.openVipConfig);jce_copy_struct(a.loadingConfig,b.loadingConfig);jce_copy_struct(a.channelNameColorConfig,b.channelNameColorConfig);jce_copy_struct(a.tabBarConfigs,b.tabBarConfigs);jce_copy_struct(a.otherPullRefreshConfig,b.otherPullRefreshConfig);jce_copy_struct(a.otherChannelNameColorConfig,b.otherChannelNameColorConfig);jce_copy_struct(a.loadingConfigs,b.loadingConfigs);

#define jce_H5GameImageConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imgUrl,b.imgUrl);jce_copy_struct(a.isPullH5,b.isPullH5);jce_copy_struct(a.showNum,b.showNum);

#define jce_H5GameVipIconConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.entryTabIcon,b.entryTabIcon);jce_copy_struct(a.normalGameIcon,b.normalGameIcon);jce_copy_struct(a.pressGameIcon,b.pressGameIcon);

#define jce_H5GameConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.gameID,b.gameID);jce_copy_struct(a.startTime,b.startTime);jce_copy_struct(a.endTime,b.endTime);jce_copy_struct(a.gameUrl,b.gameUrl);jce_copy_struct(a.entryGameTipImgUrl,b.entryGameTipImgUrl);jce_copy_struct(a.h5LoadingImgUrl,b.h5LoadingImgUrl);jce_copy_struct(a.closeIconUrl,b.closeIconUrl);jce_copy_struct(a.pullWay,b.pullWay);jce_copy_struct(a.vipOnly,b.vipOnly);jce_copy_struct(a.pullNum,b.pullNum);jce_copy_struct(a.vipTabIconConfig,b.vipTabIconConfig);jce_copy_struct(a.entryGameTipImage,b.entryGameTipImage);jce_copy_struct(a.pullRefreshConfig,b.pullRefreshConfig);jce_copy_struct(a.moreIconUrl,b.moreIconUrl);jce_copy_struct(a.h5LoadingBgImgUrl,b.h5LoadingBgImgUrl);jce_copy_struct(a.isAutoShowH5,b.isAutoShowH5);

#define jce_H5GameConfigData_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.activityID,b.activityID);jce_copy_struct(a.entryTabIcon,b.entryTabIcon);jce_copy_struct(a.normalGameIcon,b.normalGameIcon);jce_copy_struct(a.pressGameIcon,b.pressGameIcon);jce_copy_struct(a.gameItems,b.gameItems);jce_copy_struct(a.pullRefreshConfigs,b.pullRefreshConfigs);

#define jce_VipH5GameConfigRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);

#define jce_VipH5GameConfigResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.h5GameConfigData,b.h5GameConfigData);jce_copy_struct(a.serverTime,b.serverTime);jce_copy_struct(a.dataVersion,b.dataVersion);

#define jce_GetBindPhoneRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);

#define jce_GetBindPhoneResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.bindFlag,b.bindFlag);jce_copy_struct(a.msg,b.msg);jce_copy_struct(a.act,b.act);jce_copy_struct(a.act_url,b.act_url);jce_copy_struct(a.phone,b.phone);

#define jce_OrderRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.hlw_singlepayid,b.hlw_singlepayid);jce_copy_struct(a.product_key,b.product_key);jce_copy_struct(a.pf,b.pf);jce_copy_struct(a.actid,b.actid);jce_copy_struct(a.version,b.version);jce_copy_struct(a.ex_params,b.ex_params);jce_copy_struct(a.pay_count,b.pay_count);jce_copy_struct(a.aid,b.aid);jce_copy_struct(a.offerid,b.offerid);jce_copy_struct(a.platform,b.platform);jce_copy_struct(a.ip,b.ip);jce_copy_struct(a.refer,b.refer);jce_copy_struct(a.iaptype,b.iaptype);

#define jce_OrderResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.retcode,b.retcode);jce_copy_struct(a.error_msg,b.error_msg);jce_copy_struct(a.url_params,b.url_params);jce_copy_struct(a.payitem,b.payitem);jce_copy_struct(a.apple_id,b.apple_id);

#define jce_WhiteListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.version,b.version);jce_copy_struct(a.rule_name,b.rule_name);

#define jce_WhiteListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ret,b.ret);jce_copy_struct(a.errmsg,b.errmsg);jce_copy_struct(a.is_auth,b.is_auth);

#define jce_VipCommonConfigRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);

#define jce_VipSpokesPersonConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.imageUrlMap,b.imageUrlMap);

#define jce_VipPromotionInfoConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.promationPageUrl,b.promationPageUrl);

#define jce_VipExclusivePrivilegeInfoConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.animationFileUrl,b.animationFileUrl);jce_copy_struct(a.beginColor,b.beginColor);jce_copy_struct(a.endColor,b.endColor);jce_copy_struct(a.levelPageUrl,b.levelPageUrl);jce_copy_struct(a.levelUpTips,b.levelUpTips);jce_copy_struct(a.btnTitle,b.btnTitle);

#define jce_PUGCVideoPromotionInfoConfig_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.promationTips,b.promationTips);

#define jce_VipCommonConfigResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.spokesPersonConfig,b.spokesPersonConfig);jce_copy_struct(a.promotionInfoConfig,b.promotionInfoConfig);jce_copy_struct(a.exclusivePrivilegeInfoConfig,b.exclusivePrivilegeInfoConfig);jce_copy_struct(a.pugcVideoPromotionInfoConfig,b.pugcVideoPromotionInfoConfig);

#define jce_ExclusivePrivilegePayVideoPlayRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.lid,b.lid);jce_copy_struct(a.vid,b.vid);

#define jce_ExclusivePrivilegePayVideoPlayResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_PointStoreInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);

#define jce_PointStoreInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.tips,b.tips);jce_copy_struct(a.title,b.title);jce_copy_struct(a.subTitle,b.subTitle);jce_copy_struct(a.jumpUrl,b.jumpUrl);

#define jce_VideoPlayTimeReportRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.videoFlag,b.videoFlag);jce_copy_struct(a.videoPlayDuration,b.videoPlayDuration);jce_copy_struct(a.videoCurrentPlayTime,b.videoCurrentPlayTime);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.lid,b.lid);

#define jce_VideoPlayTimeReportResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);

#define jce_UserStudyListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.data,b.data);

#define jce_UserStudyListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.studyPosterList,b.studyPosterList);

#define jce_KnowledgeVideoStudyTimeRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.cid,b.cid);jce_copy_struct(a.vid,b.vid);jce_copy_struct(a.lid,b.lid);

#define jce_KnowledgeVideoStudyTimeResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.studyTips,b.studyTips);



#endif
