// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `qqvideo_message_center.jce'
// **********************************************************************

#ifndef __QQVIDEO_MESSAGE_CENTER_H_
#define __QQVIDEO_MESSAGE_CENTER_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "qqvideo_common.h"


namespace jce
{
    struct MCReplyParamInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MCReplyParamInfo";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        MCReplyParamInfo()
        :parentId(""),dataKey("")
        {
        }
        void resetDefautlt()
        {
            parentId = "";
            dataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(parentId, 0);
            _os.write(dataKey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(parentId, 0, false);
            _is.read(dataKey, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(parentId,"parentId");
            _ds.display(dataKey,"dataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(parentId, true);
            _ds.displaySimple(dataKey, false);
            return _os;
        }
    public:
        std::string parentId;
        std::string dataKey;
    };
    inline bool operator==(const MCReplyParamInfo&l, const MCReplyParamInfo&r)
    {
        return l.parentId == r.parentId && l.dataKey == r.dataKey;
    }
    inline bool operator!=(const MCReplyParamInfo&l, const MCReplyParamInfo&r)
    {
        return !(l == r);
    }

    struct MCMessageContent : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MCMessageContent";
        }
        static string MD5()
        {
            return "a64e11f36849b92a2898ae096615f361";
        }
        MCMessageContent()
        :msgContent(""),isDeleted(false),isLike(false),feedId("")
        {
        }
        void resetDefautlt()
        {
            msgContent = "";
            isDeleted = false;
            isLike = false;
            feedId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(userInfo, 0);
            _os.write(msgContent, 1);
            _os.write(imageList, 2);
            _os.write(parentUserInfo, 3);
            _os.write(isDeleted, 4);
            _os.write(isLike, 5);
            _os.write(feedId, 6);
            _os.write(voiceData, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(userInfo, 0, false);
            _is.read(msgContent, 1, false);
            _is.read(imageList, 2, false);
            _is.read(parentUserInfo, 3, false);
            _is.read(isDeleted, 4, false);
            _is.read(isLike, 5, false);
            _is.read(feedId, 6, false);
            _is.read(voiceData, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(userInfo,"userInfo");
            _ds.display(msgContent,"msgContent");
            _ds.display(imageList,"imageList");
            _ds.display(parentUserInfo,"parentUserInfo");
            _ds.display(isDeleted,"isDeleted");
            _ds.display(isLike,"isLike");
            _ds.display(feedId,"feedId");
            _ds.display(voiceData,"voiceData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(userInfo, true);
            _ds.displaySimple(msgContent, true);
            _ds.displaySimple(imageList, true);
            _ds.displaySimple(parentUserInfo, true);
            _ds.displaySimple(isDeleted, true);
            _ds.displaySimple(isLike, true);
            _ds.displaySimple(feedId, true);
            _ds.displaySimple(voiceData, false);
            return _os;
        }
    public:
        jce::ActorInfo userInfo;
        std::string msgContent;
        vector<jce::CircleMsgImageUrl> imageList;
        jce::ActorInfo parentUserInfo;
        taf::Bool isDeleted;
        taf::Bool isLike;
        std::string feedId;
        jce::ApolloVoiceData voiceData;
    };
    inline bool operator==(const MCMessageContent&l, const MCMessageContent&r)
    {
        return l.userInfo == r.userInfo && l.msgContent == r.msgContent && l.imageList == r.imageList && l.parentUserInfo == r.parentUserInfo && l.isDeleted == r.isDeleted && l.isLike == r.isLike && l.feedId == r.feedId && l.voiceData == r.voiceData;
    }
    inline bool operator!=(const MCMessageContent&l, const MCMessageContent&r)
    {
        return !(l == r);
    }

    struct MCMessageItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MCMessageItem";
        }
        static string MD5()
        {
            return "8c5fc1069ccbba15ecd9b1ffd17fb4f9";
        }
        MCMessageItem()
        :msgId(""),msgSource(0),msgType(0),time(0)
        {
        }
        void resetDefautlt()
        {
            msgId = "";
            msgSource = 0;
            msgType = 0;
            time = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(msgId, 0);
            _os.write(msgSource, 1);
            _os.write(msgType, 2);
            _os.write(time, 3);
            _os.write(content, 4);
            _os.write(parentList, 5);
            _os.write(feed, 6);
            _os.write(replyParamInfo, 7);
            _os.write(action, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(msgId, 0, true);
            _is.read(msgSource, 1, true);
            _is.read(msgType, 2, true);
            _is.read(time, 3, false);
            _is.read(content, 4, false);
            _is.read(parentList, 5, false);
            _is.read(feed, 6, false);
            _is.read(replyParamInfo, 7, false);
            _is.read(action, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(msgId,"msgId");
            _ds.display(msgSource,"msgSource");
            _ds.display(msgType,"msgType");
            _ds.display(time,"time");
            _ds.display(content,"content");
            _ds.display(parentList,"parentList");
            _ds.display(feed,"feed");
            _ds.display(replyParamInfo,"replyParamInfo");
            _ds.display(action,"action");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(msgId, true);
            _ds.displaySimple(msgSource, true);
            _ds.displaySimple(msgType, true);
            _ds.displaySimple(time, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(parentList, true);
            _ds.displaySimple(feed, true);
            _ds.displaySimple(replyParamInfo, true);
            _ds.displaySimple(action, false);
            return _os;
        }
    public:
        std::string msgId;
        taf::Int32 msgSource;
        taf::Int32 msgType;
        taf::Int64 time;
        jce::MCMessageContent content;
        vector<jce::MCMessageContent> parentList;
        jce::MCMessageContent feed;
        jce::MCReplyParamInfo replyParamInfo;
        jce::Action action;
    };
    inline bool operator==(const MCMessageItem&l, const MCMessageItem&r)
    {
        return l.msgId == r.msgId && l.msgSource == r.msgSource && l.msgType == r.msgType && l.time == r.time && l.content == r.content && l.parentList == r.parentList && l.feed == r.feed && l.replyParamInfo == r.replyParamInfo && l.action == r.action;
    }
    inline bool operator!=(const MCMessageItem&l, const MCMessageItem&r)
    {
        return !(l == r);
    }

    struct MCGetNewMsgInfoRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MCGetNewMsgInfoRequest";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        MCGetNewMsgInfoRequest()
        :version("")
        {
        }
        void resetDefautlt()
        {
            version = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(version, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(version, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(version,"version");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(version, false);
            return _os;
        }
    public:
        std::string version;
    };
    inline bool operator==(const MCGetNewMsgInfoRequest&l, const MCGetNewMsgInfoRequest&r)
    {
        return l.version == r.version;
    }
    inline bool operator!=(const MCGetNewMsgInfoRequest&l, const MCGetNewMsgInfoRequest&r)
    {
        return !(l == r);
    }

    struct MCGetNewMsgInfoResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MCGetNewMsgInfoResponse";
        }
        static string MD5()
        {
            return "5776fd7103fcea055637c7e8b9708bb0";
        }
        MCGetNewMsgInfoResponse()
        :errCode(0),version(""),msgCount(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            version = "";
            msgCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(version, 1);
            _os.write(msgCount, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(version, 1, true);
            _is.read(msgCount, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(version,"version");
            _ds.display(msgCount,"msgCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(version, true);
            _ds.displaySimple(msgCount, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string version;
        taf::Int32 msgCount;
    };
    inline bool operator==(const MCGetNewMsgInfoResponse&l, const MCGetNewMsgInfoResponse&r)
    {
        return l.errCode == r.errCode && l.version == r.version && l.msgCount == r.msgCount;
    }
    inline bool operator!=(const MCGetNewMsgInfoResponse&l, const MCGetNewMsgInfoResponse&r)
    {
        return !(l == r);
    }

    struct MCGetMsgListRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MCGetMsgListRequest";
        }
        static string MD5()
        {
            return "19cfb41a66359c894f1dcce10dba2a65";
        }
        MCGetMsgListRequest()
        :pageContext(""),readFlag(0),version("")
        {
        }
        void resetDefautlt()
        {
            pageContext = "";
            readFlag = 0;
            version = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(pageContext, 0);
            _os.write(readFlag, 1);
            _os.write(version, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(pageContext, 0, true);
            _is.read(readFlag, 1, false);
            _is.read(version, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(pageContext,"pageContext");
            _ds.display(readFlag,"readFlag");
            _ds.display(version,"version");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(readFlag, true);
            _ds.displaySimple(version, false);
            return _os;
        }
    public:
        std::string pageContext;
        taf::Int32 readFlag;
        std::string version;
    };
    inline bool operator==(const MCGetMsgListRequest&l, const MCGetMsgListRequest&r)
    {
        return l.pageContext == r.pageContext && l.readFlag == r.readFlag && l.version == r.version;
    }
    inline bool operator!=(const MCGetMsgListRequest&l, const MCGetMsgListRequest&r)
    {
        return !(l == r);
    }

    struct MCGetMsgListResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MCGetMsgListResponse";
        }
        static string MD5()
        {
            return "d6ddd05abcf3f8fbd4a22c9f1f2b7bf1";
        }
        MCGetMsgListResponse()
        :errCode(0),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(pageContext, 1);
            _os.write(hasNextPage, 2);
            _os.write(msgItemList, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(pageContext, 1, true);
            _is.read(hasNextPage, 2, true);
            _is.read(msgItemList, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            _ds.display(msgItemList,"msgItemList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, true);
            _ds.displaySimple(msgItemList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string pageContext;
        taf::Bool hasNextPage;
        vector<jce::MCMessageItem> msgItemList;
    };
    inline bool operator==(const MCGetMsgListResponse&l, const MCGetMsgListResponse&r)
    {
        return l.errCode == r.errCode && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage && l.msgItemList == r.msgItemList;
    }
    inline bool operator!=(const MCGetMsgListResponse&l, const MCGetMsgListResponse&r)
    {
        return !(l == r);
    }

    struct MCDeleteMessageRequest : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MCDeleteMessageRequest";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        MCDeleteMessageRequest()
        :msgId(""),msgSource(0)
        {
        }
        void resetDefautlt()
        {
            msgId = "";
            msgSource = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(msgId, 0);
            _os.write(msgSource, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(msgId, 0, true);
            _is.read(msgSource, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(msgId,"msgId");
            _ds.display(msgSource,"msgSource");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(msgId, true);
            _ds.displaySimple(msgSource, false);
            return _os;
        }
    public:
        std::string msgId;
        taf::Int32 msgSource;
    };
    inline bool operator==(const MCDeleteMessageRequest&l, const MCDeleteMessageRequest&r)
    {
        return l.msgId == r.msgId && l.msgSource == r.msgSource;
    }
    inline bool operator!=(const MCDeleteMessageRequest&l, const MCDeleteMessageRequest&r)
    {
        return !(l == r);
    }

    struct MCDeleteMessageResponse : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "jce.MCDeleteMessageResponse";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        MCDeleteMessageResponse()
        :errCode(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
    };
    inline bool operator==(const MCDeleteMessageResponse&l, const MCDeleteMessageResponse&r)
    {
        return l.errCode == r.errCode;
    }
    inline bool operator!=(const MCDeleteMessageResponse&l, const MCDeleteMessageResponse&r)
    {
        return !(l == r);
    }


}

#define jce_MCReplyParamInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.parentId,b.parentId);jce_copy_struct(a.dataKey,b.dataKey);

#define jce_MCMessageContent_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.userInfo,b.userInfo);jce_copy_struct(a.msgContent,b.msgContent);jce_copy_struct(a.imageList,b.imageList);jce_copy_struct(a.parentUserInfo,b.parentUserInfo);jce_copy_struct(a.isDeleted,b.isDeleted);jce_copy_struct(a.isLike,b.isLike);jce_copy_struct(a.feedId,b.feedId);jce_copy_struct(a.voiceData,b.voiceData);

#define jce_MCMessageItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.msgId,b.msgId);jce_copy_struct(a.msgSource,b.msgSource);jce_copy_struct(a.msgType,b.msgType);jce_copy_struct(a.time,b.time);jce_copy_struct(a.content,b.content);jce_copy_struct(a.parentList,b.parentList);jce_copy_struct(a.feed,b.feed);jce_copy_struct(a.replyParamInfo,b.replyParamInfo);jce_copy_struct(a.action,b.action);

#define jce_MCGetNewMsgInfoRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.version,b.version);

#define jce_MCGetNewMsgInfoResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.version,b.version);jce_copy_struct(a.msgCount,b.msgCount);

#define jce_MCGetMsgListRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.readFlag,b.readFlag);jce_copy_struct(a.version,b.version);

#define jce_MCGetMsgListResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);jce_copy_struct(a.msgItemList,b.msgItemList);

#define jce_MCDeleteMessageRequest_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.msgId,b.msgId);jce_copy_struct(a.msgSource,b.msgSource);

#define jce_MCDeleteMessageResponse_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);



#endif
