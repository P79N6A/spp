// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `fans_growth_h5.jce'
// **********************************************************************

#ifndef __FANS_GROWTH_H5_H_
#define __FANS_GROWTH_H5_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace FansAdapt
{
    enum FansGrowthCmd
    {
        CMD_GET_USR_BADGE_INFO = 61793,
        CMG_GET_BADGE_LEVEL_INFO = 61880,
        CMD_GET_USR_TASK_LIST_REQ = 61792,
        CMD_GET_BADGE_LEVEL_INTRO = 61791,
        CMD_GET_MY_SPECIAL_REWARD = 61790,
        CMD_GET_SIGN_REWARD_LIST = 61789,
        CMD_GET_FVALUE_FLOW_UNDER_STAR = 61788,
        CMD_GET_REWARD_ITEM_DETAIL = 61787,
        CMD_GET_FANS_RANK = 61886,
        CMD_GET_DOKI_DEGREE_TASK = 61898,
        CMD_CHECK_LEVEL_CHANGE = 61913,
        CMD_USER_SIGN_IN = 61786,
        CMD_RECV_TASK_REWARD = 61785,
        CMD_EXEC_FANS_TASK = 61819,
        CMD_CHECK_LEVEL_GIFT = 62366,
        CMD_BATCHGET_FANSLEVE = 62985,
    };
    inline string etos(const FansGrowthCmd & e)
    {
        switch(e)
        {
            case CMD_GET_USR_BADGE_INFO: return "CMD_GET_USR_BADGE_INFO";
            case CMG_GET_BADGE_LEVEL_INFO: return "CMG_GET_BADGE_LEVEL_INFO";
            case CMD_GET_USR_TASK_LIST_REQ: return "CMD_GET_USR_TASK_LIST_REQ";
            case CMD_GET_BADGE_LEVEL_INTRO: return "CMD_GET_BADGE_LEVEL_INTRO";
            case CMD_GET_MY_SPECIAL_REWARD: return "CMD_GET_MY_SPECIAL_REWARD";
            case CMD_GET_SIGN_REWARD_LIST: return "CMD_GET_SIGN_REWARD_LIST";
            case CMD_GET_FVALUE_FLOW_UNDER_STAR: return "CMD_GET_FVALUE_FLOW_UNDER_STAR";
            case CMD_GET_REWARD_ITEM_DETAIL: return "CMD_GET_REWARD_ITEM_DETAIL";
            case CMD_GET_FANS_RANK: return "CMD_GET_FANS_RANK";
            case CMD_GET_DOKI_DEGREE_TASK: return "CMD_GET_DOKI_DEGREE_TASK";
            case CMD_CHECK_LEVEL_CHANGE: return "CMD_CHECK_LEVEL_CHANGE";
            case CMD_USER_SIGN_IN: return "CMD_USER_SIGN_IN";
            case CMD_RECV_TASK_REWARD: return "CMD_RECV_TASK_REWARD";
            case CMD_EXEC_FANS_TASK: return "CMD_EXEC_FANS_TASK";
            case CMD_CHECK_LEVEL_GIFT: return "CMD_CHECK_LEVEL_GIFT";
            case CMD_BATCHGET_FANSLEVE: return "CMD_BATCHGET_FANSLEVE";
            default: return "";
        }
    }
    inline int stoe(const string & s, FansGrowthCmd & e)
    {
        if(s == "CMD_GET_USR_BADGE_INFO")  { e=CMD_GET_USR_BADGE_INFO; return 0;}
        if(s == "CMG_GET_BADGE_LEVEL_INFO")  { e=CMG_GET_BADGE_LEVEL_INFO; return 0;}
        if(s == "CMD_GET_USR_TASK_LIST_REQ")  { e=CMD_GET_USR_TASK_LIST_REQ; return 0;}
        if(s == "CMD_GET_BADGE_LEVEL_INTRO")  { e=CMD_GET_BADGE_LEVEL_INTRO; return 0;}
        if(s == "CMD_GET_MY_SPECIAL_REWARD")  { e=CMD_GET_MY_SPECIAL_REWARD; return 0;}
        if(s == "CMD_GET_SIGN_REWARD_LIST")  { e=CMD_GET_SIGN_REWARD_LIST; return 0;}
        if(s == "CMD_GET_FVALUE_FLOW_UNDER_STAR")  { e=CMD_GET_FVALUE_FLOW_UNDER_STAR; return 0;}
        if(s == "CMD_GET_REWARD_ITEM_DETAIL")  { e=CMD_GET_REWARD_ITEM_DETAIL; return 0;}
        if(s == "CMD_GET_FANS_RANK")  { e=CMD_GET_FANS_RANK; return 0;}
        if(s == "CMD_GET_DOKI_DEGREE_TASK")  { e=CMD_GET_DOKI_DEGREE_TASK; return 0;}
        if(s == "CMD_CHECK_LEVEL_CHANGE")  { e=CMD_CHECK_LEVEL_CHANGE; return 0;}
        if(s == "CMD_USER_SIGN_IN")  { e=CMD_USER_SIGN_IN; return 0;}
        if(s == "CMD_RECV_TASK_REWARD")  { e=CMD_RECV_TASK_REWARD; return 0;}
        if(s == "CMD_EXEC_FANS_TASK")  { e=CMD_EXEC_FANS_TASK; return 0;}
        if(s == "CMD_CHECK_LEVEL_GIFT")  { e=CMD_CHECK_LEVEL_GIFT; return 0;}
        if(s == "CMD_BATCHGET_FANSLEVE")  { e=CMD_BATCHGET_FANSLEVE; return 0;}

        return -1;
    }

    enum ERewardType
    {
        E_REWARD_VCOIN = 1,
        E_REWARD_FVALUE = 2,
        E_REWARD_STAR_PIC = 3,
        E_REWARD_STAR_VOICE = 4,
        E_REWARD_STAR_VIDEO = 5,
        E_REWARD_PRIVILEGE = 6,
        E_REWARD_OTHER,
    };
    inline string etos(const ERewardType & e)
    {
        switch(e)
        {
            case E_REWARD_VCOIN: return "E_REWARD_VCOIN";
            case E_REWARD_FVALUE: return "E_REWARD_FVALUE";
            case E_REWARD_STAR_PIC: return "E_REWARD_STAR_PIC";
            case E_REWARD_STAR_VOICE: return "E_REWARD_STAR_VOICE";
            case E_REWARD_STAR_VIDEO: return "E_REWARD_STAR_VIDEO";
            case E_REWARD_PRIVILEGE: return "E_REWARD_PRIVILEGE";
            case E_REWARD_OTHER: return "E_REWARD_OTHER";
            default: return "";
        }
    }
    inline int stoe(const string & s, ERewardType & e)
    {
        if(s == "E_REWARD_VCOIN")  { e=E_REWARD_VCOIN; return 0;}
        if(s == "E_REWARD_FVALUE")  { e=E_REWARD_FVALUE; return 0;}
        if(s == "E_REWARD_STAR_PIC")  { e=E_REWARD_STAR_PIC; return 0;}
        if(s == "E_REWARD_STAR_VOICE")  { e=E_REWARD_STAR_VOICE; return 0;}
        if(s == "E_REWARD_STAR_VIDEO")  { e=E_REWARD_STAR_VIDEO; return 0;}
        if(s == "E_REWARD_PRIVILEGE")  { e=E_REWARD_PRIVILEGE; return 0;}
        if(s == "E_REWARD_OTHER")  { e=E_REWARD_OTHER; return 0;}

        return -1;
    }

    enum ETaskType
    {
        E_TASK_MUST = 1,
        E_TASK_BROWSE = 2,
        E_TASK_INTERACTIVE = 3,
        E_TASK_CREATE = 4,
    };
    inline string etos(const ETaskType & e)
    {
        switch(e)
        {
            case E_TASK_MUST: return "E_TASK_MUST";
            case E_TASK_BROWSE: return "E_TASK_BROWSE";
            case E_TASK_INTERACTIVE: return "E_TASK_INTERACTIVE";
            case E_TASK_CREATE: return "E_TASK_CREATE";
            default: return "";
        }
    }
    inline int stoe(const string & s, ETaskType & e)
    {
        if(s == "E_TASK_MUST")  { e=E_TASK_MUST; return 0;}
        if(s == "E_TASK_BROWSE")  { e=E_TASK_BROWSE; return 0;}
        if(s == "E_TASK_INTERACTIVE")  { e=E_TASK_INTERACTIVE; return 0;}
        if(s == "E_TASK_CREATE")  { e=E_TASK_CREATE; return 0;}

        return -1;
    }

    struct ExtraReportKV : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.ExtraReportKV";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        ExtraReportKV()
        :extraReportKey(""),extraReportParam("")
        {
        }
        void resetDefautlt()
        {
            extraReportKey = "";
            extraReportParam = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(extraReportKey, 0);
            _os.write(extraReportParam, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(extraReportKey, 0, true);
            _is.read(extraReportParam, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(extraReportKey,"extraReportKey");
            _ds.display(extraReportParam,"extraReportParam");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(extraReportKey, true);
            _ds.displaySimple(extraReportParam, false);
            return _os;
        }
    public:
        std::string extraReportKey;
        std::string extraReportParam;
    };
    inline bool operator==(const ExtraReportKV&l, const ExtraReportKV&r)
    {
        return l.extraReportKey == r.extraReportKey && l.extraReportParam == r.extraReportParam;
    }
    inline bool operator!=(const ExtraReportKV&l, const ExtraReportKV&r)
    {
        return !(l == r);
    }

    struct Action : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.Action";
        }
        static string MD5()
        {
            return "9ad276a9b840c1e775f1fd70d5a2e569";
        }
        Action()
        :url(""),cacheType(0),preReadType(0),reportParams(""),reportKey("")
        {
        }
        void resetDefautlt()
        {
            url = "";
            cacheType = 0;
            preReadType = 0;
            reportParams = "";
            reportKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(url, 0);
            _os.write(cacheType, 1);
            _os.write(preReadType, 2);
            _os.write(reportParams, 3);
            _os.write(reportKey, 4);
            _os.write(extraReportKVs, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(url, 0, true);
            _is.read(cacheType, 1, true);
            _is.read(preReadType, 2, true);
            _is.read(reportParams, 3, false);
            _is.read(reportKey, 4, false);
            _is.read(extraReportKVs, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(url,"url");
            _ds.display(cacheType,"cacheType");
            _ds.display(preReadType,"preReadType");
            _ds.display(reportParams,"reportParams");
            _ds.display(reportKey,"reportKey");
            _ds.display(extraReportKVs,"extraReportKVs");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(url, true);
            _ds.displaySimple(cacheType, true);
            _ds.displaySimple(preReadType, true);
            _ds.displaySimple(reportParams, true);
            _ds.displaySimple(reportKey, true);
            _ds.displaySimple(extraReportKVs, false);
            return _os;
        }
    public:
        std::string url;
        taf::Char cacheType;
        taf::Char preReadType;
        std::string reportParams;
        std::string reportKey;
        vector<FansAdapt::ExtraReportKV> extraReportKVs;
    };
    inline bool operator==(const Action&l, const Action&r)
    {
        return l.url == r.url && l.cacheType == r.cacheType && l.preReadType == r.preReadType && l.reportParams == r.reportParams && l.reportKey == r.reportKey && l.extraReportKVs == r.extraReportKVs;
    }
    inline bool operator!=(const Action&l, const Action&r)
    {
        return !(l == r);
    }

    struct stTaskInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.stTaskInfo";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        stTaskInfo()
        :strBillNo("")
        {
        }
        void resetDefautlt()
        {
            strBillNo = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strBillNo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strBillNo, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strBillNo,"strBillNo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strBillNo, false);
            return _os;
        }
    public:
        std::string strBillNo;
    };
    inline bool operator==(const stTaskInfo&l, const stTaskInfo&r)
    {
        return l.strBillNo == r.strBillNo;
    }
    inline bool operator!=(const stTaskInfo&l, const stTaskInfo&r)
    {
        return !(l == r);
    }

    struct FansGrowthTask : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.FansGrowthTask";
        }
        static string MD5()
        {
            return "e472c4b3d3d53ee5251d54d975d2079c";
        }
        FansGrowthTask()
        :iTaskType(0),iTaskId(0),iRewardVCoin(0),iRewardFValue(0),iWeight(0),strDesc(""),strTaskExt(""),iTaskCount(0),strImage(""),iTaskDone(0),strJumpKey(""),dwStatus(0),iType(0),iProps(0),progress(0),time(0)
        {
        }
        void resetDefautlt()
        {
            iTaskType = 0;
            iTaskId = 0;
            iRewardVCoin = 0;
            iRewardFValue = 0;
            iWeight = 0;
            strDesc = "";
            strTaskExt = "";
            iTaskCount = 0;
            strImage = "";
            iTaskDone = 0;
            strJumpKey = "";
            dwStatus = 0;
            iType = 0;
            iProps = 0;
            progress = 0;
            time = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iTaskType, 0);
            _os.write(iTaskId, 1);
            _os.write(iRewardVCoin, 2);
            _os.write(iRewardFValue, 3);
            _os.write(iWeight, 4);
            _os.write(strDesc, 5);
            _os.write(strTaskExt, 6);
            _os.write(iTaskCount, 7);
            _os.write(strImage, 8);
            _os.write(iTaskDone, 9);
            _os.write(vecBillList, 10);
            _os.write(strJumpKey, 11);
            _os.write(dwStatus, 12);
            _os.write(iType, 13);
            _os.write(iProps, 14);
            _os.write(progress, 15);
            _os.write(time, 16);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iTaskType, 0, true);
            _is.read(iTaskId, 1, true);
            _is.read(iRewardVCoin, 2, false);
            _is.read(iRewardFValue, 3, false);
            _is.read(iWeight, 4, false);
            _is.read(strDesc, 5, false);
            _is.read(strTaskExt, 6, false);
            _is.read(iTaskCount, 7, false);
            _is.read(strImage, 8, false);
            _is.read(iTaskDone, 9, false);
            _is.read(vecBillList, 10, false);
            _is.read(strJumpKey, 11, false);
            _is.read(dwStatus, 12, false);
            _is.read(iType, 13, false);
            _is.read(iProps, 14, false);
            _is.read(progress, 15, false);
            _is.read(time, 16, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iTaskType,"iTaskType");
            _ds.display(iTaskId,"iTaskId");
            _ds.display(iRewardVCoin,"iRewardVCoin");
            _ds.display(iRewardFValue,"iRewardFValue");
            _ds.display(iWeight,"iWeight");
            _ds.display(strDesc,"strDesc");
            _ds.display(strTaskExt,"strTaskExt");
            _ds.display(iTaskCount,"iTaskCount");
            _ds.display(strImage,"strImage");
            _ds.display(iTaskDone,"iTaskDone");
            _ds.display(vecBillList,"vecBillList");
            _ds.display(strJumpKey,"strJumpKey");
            _ds.display(dwStatus,"dwStatus");
            _ds.display(iType,"iType");
            _ds.display(iProps,"iProps");
            _ds.display(progress,"progress");
            _ds.display(time,"time");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iTaskType, true);
            _ds.displaySimple(iTaskId, true);
            _ds.displaySimple(iRewardVCoin, true);
            _ds.displaySimple(iRewardFValue, true);
            _ds.displaySimple(iWeight, true);
            _ds.displaySimple(strDesc, true);
            _ds.displaySimple(strTaskExt, true);
            _ds.displaySimple(iTaskCount, true);
            _ds.displaySimple(strImage, true);
            _ds.displaySimple(iTaskDone, true);
            _ds.displaySimple(vecBillList, true);
            _ds.displaySimple(strJumpKey, true);
            _ds.displaySimple(dwStatus, true);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(iProps, true);
            _ds.displaySimple(progress, true);
            _ds.displaySimple(time, false);
            return _os;
        }
    public:
        taf::Int32 iTaskType;
        taf::Int32 iTaskId;
        taf::Int32 iRewardVCoin;
        taf::Int32 iRewardFValue;
        taf::Int32 iWeight;
        std::string strDesc;
        std::string strTaskExt;
        taf::Int32 iTaskCount;
        std::string strImage;
        taf::Int32 iTaskDone;
        vector<FansAdapt::stTaskInfo> vecBillList;
        std::string strJumpKey;
        taf::Int32 dwStatus;
        taf::Int32 iType;
        taf::Int32 iProps;
        taf::Int32 progress;
        taf::Int32 time;
    };
    inline bool operator==(const FansGrowthTask&l, const FansGrowthTask&r)
    {
        return l.iTaskType == r.iTaskType && l.iTaskId == r.iTaskId && l.iRewardVCoin == r.iRewardVCoin && l.iRewardFValue == r.iRewardFValue && l.iWeight == r.iWeight && l.strDesc == r.strDesc && l.strTaskExt == r.strTaskExt && l.iTaskCount == r.iTaskCount && l.strImage == r.strImage && l.iTaskDone == r.iTaskDone && l.vecBillList == r.vecBillList && l.strJumpKey == r.strJumpKey && l.dwStatus == r.dwStatus && l.iType == r.iType && l.iProps == r.iProps && l.progress == r.progress && l.time == r.time;
    }
    inline bool operator!=(const FansGrowthTask&l, const FansGrowthTask&r)
    {
        return !(l == r);
    }

    struct FansGrowthTaskType : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.FansGrowthTaskType";
        }
        static string MD5()
        {
            return "72dfddf03422779b81fb661a3938fb92";
        }
        FansGrowthTaskType()
        :iTaskType(0),iTaskWeight(0),strTaskDesc("")
        {
        }
        void resetDefautlt()
        {
            iTaskType = 0;
            iTaskWeight = 0;
            strTaskDesc = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iTaskType, 0);
            _os.write(iTaskWeight, 1);
            _os.write(strTaskDesc, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iTaskType, 0, true);
            _is.read(iTaskWeight, 1, false);
            _is.read(strTaskDesc, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iTaskType,"iTaskType");
            _ds.display(iTaskWeight,"iTaskWeight");
            _ds.display(strTaskDesc,"strTaskDesc");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iTaskType, true);
            _ds.displaySimple(iTaskWeight, true);
            _ds.displaySimple(strTaskDesc, false);
            return _os;
        }
    public:
        taf::Int32 iTaskType;
        taf::Int32 iTaskWeight;
        std::string strTaskDesc;
    };
    inline bool operator==(const FansGrowthTaskType&l, const FansGrowthTaskType&r)
    {
        return l.iTaskType == r.iTaskType && l.iTaskWeight == r.iTaskWeight && l.strTaskDesc == r.strTaskDesc;
    }
    inline bool operator!=(const FansGrowthTaskType&l, const FansGrowthTaskType&r)
    {
        return !(l == r);
    }

    struct RewardItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.RewardItem";
        }
        static string MD5()
        {
            return "89d10192ce2064bd6e7b19d440423dd9";
        }
        RewardItem()
        :iRewardType(0),iRewardId(0),strDesc(""),strVoice(""),strVid(""),iFValue(0),iVCoin(0),strImage(""),strUrl(""),strExt(""),strImage_1(""),strImage_s("")
        {
        }
        void resetDefautlt()
        {
            iRewardType = 0;
            iRewardId = 0;
            strDesc = "";
            strVoice = "";
            strVid = "";
            iFValue = 0;
            iVCoin = 0;
            strImage = "";
            strUrl = "";
            strExt = "";
            strImage_1 = "";
            strImage_s = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iRewardType, 0);
            _os.write(iRewardId, 1);
            _os.write(strDesc, 2);
            _os.write(strVoice, 4);
            _os.write(strVid, 5);
            _os.write(iFValue, 6);
            _os.write(iVCoin, 7);
            _os.write(strImage, 8);
            _os.write(strUrl, 9);
            _os.write(strExt, 10);
            _os.write(strImage_1, 11);
            _os.write(strImage_s, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iRewardType, 0, true);
            _is.read(iRewardId, 1, true);
            _is.read(strDesc, 2, false);
            _is.read(strVoice, 4, false);
            _is.read(strVid, 5, false);
            _is.read(iFValue, 6, false);
            _is.read(iVCoin, 7, false);
            _is.read(strImage, 8, false);
            _is.read(strUrl, 9, false);
            _is.read(strExt, 10, false);
            _is.read(strImage_1, 11, false);
            _is.read(strImage_s, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iRewardType,"iRewardType");
            _ds.display(iRewardId,"iRewardId");
            _ds.display(strDesc,"strDesc");
            _ds.display(strVoice,"strVoice");
            _ds.display(strVid,"strVid");
            _ds.display(iFValue,"iFValue");
            _ds.display(iVCoin,"iVCoin");
            _ds.display(strImage,"strImage");
            _ds.display(strUrl,"strUrl");
            _ds.display(strExt,"strExt");
            _ds.display(strImage_1,"strImage_1");
            _ds.display(strImage_s,"strImage_s");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iRewardType, true);
            _ds.displaySimple(iRewardId, true);
            _ds.displaySimple(strDesc, true);
            _ds.displaySimple(strVoice, true);
            _ds.displaySimple(strVid, true);
            _ds.displaySimple(iFValue, true);
            _ds.displaySimple(iVCoin, true);
            _ds.displaySimple(strImage, true);
            _ds.displaySimple(strUrl, true);
            _ds.displaySimple(strExt, true);
            _ds.displaySimple(strImage_1, true);
            _ds.displaySimple(strImage_s, false);
            return _os;
        }
    public:
        taf::Int32 iRewardType;
        taf::Int32 iRewardId;
        std::string strDesc;
        std::string strVoice;
        std::string strVid;
        taf::Int32 iFValue;
        taf::Int32 iVCoin;
        std::string strImage;
        std::string strUrl;
        std::string strExt;
        std::string strImage_1;
        std::string strImage_s;
    };
    inline bool operator==(const RewardItem&l, const RewardItem&r)
    {
        return l.iRewardType == r.iRewardType && l.iRewardId == r.iRewardId && l.strDesc == r.strDesc && l.strVoice == r.strVoice && l.strVid == r.strVid && l.iFValue == r.iFValue && l.iVCoin == r.iVCoin && l.strImage == r.strImage && l.strUrl == r.strUrl && l.strExt == r.strExt && l.strImage_1 == r.strImage_1 && l.strImage_s == r.strImage_s;
    }
    inline bool operator!=(const RewardItem&l, const RewardItem&r)
    {
        return !(l == r);
    }

    struct RewardType : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.RewardType";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        RewardType()
        :iRewardType(0),strDesc("")
        {
        }
        void resetDefautlt()
        {
            iRewardType = 0;
            strDesc = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iRewardType, 0);
            _os.write(strDesc, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iRewardType, 0, true);
            _is.read(strDesc, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iRewardType,"iRewardType");
            _ds.display(strDesc,"strDesc");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iRewardType, true);
            _ds.displaySimple(strDesc, false);
            return _os;
        }
    public:
        taf::Int32 iRewardType;
        std::string strDesc;
    };
    inline bool operator==(const RewardType&l, const RewardType&r)
    {
        return l.iRewardType == r.iRewardType && l.strDesc == r.strDesc;
    }
    inline bool operator!=(const RewardType&l, const RewardType&r)
    {
        return !(l == r);
    }

    struct UserBadgeInfoReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.UserBadgeInfoReq";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        UserBadgeInfoReq()
        :strDataKey("")
        {
        }
        void resetDefautlt()
        {
            strDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDataKey, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDataKey,"strDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDataKey, false);
            return _os;
        }
    public:
        std::string strDataKey;
    };
    inline bool operator==(const UserBadgeInfoReq&l, const UserBadgeInfoReq&r)
    {
        return l.strDataKey == r.strDataKey;
    }
    inline bool operator!=(const UserBadgeInfoReq&l, const UserBadgeInfoReq&r)
    {
        return !(l == r);
    }

    struct stBadgeLevel : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.stBadgeLevel";
        }
        static string MD5()
        {
            return "b67a80caaff5d6137bdcced2bc894ee1";
        }
        stBadgeLevel()
        :iStarId(0),iLevelId(0),strBadgeIcon(""),strLevelIcon_h(""),strLevelIcon_v(""),iFansVal(0),strLevelName(""),strLevelText(""),iSortKey(0),iRankNameId(0),strUrl(""),iFantuanId(0),strLevelIcon_450_336(""),strLevelIcon_225_168("")
        {
        }
        void resetDefautlt()
        {
            iStarId = 0;
            iLevelId = 0;
            strBadgeIcon = "";
            strLevelIcon_h = "";
            strLevelIcon_v = "";
            iFansVal = 0;
            strLevelName = "";
            strLevelText = "";
            iSortKey = 0;
            iRankNameId = 0;
            strUrl = "";
            iFantuanId = 0;
            strLevelIcon_450_336 = "";
            strLevelIcon_225_168 = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStarId, 0);
            _os.write(iLevelId, 1);
            _os.write(strBadgeIcon, 2);
            _os.write(strLevelIcon_h, 3);
            _os.write(strLevelIcon_v, 4);
            _os.write(iFansVal, 5);
            _os.write(strLevelName, 6);
            _os.write(strLevelText, 7);
            _os.write(iSortKey, 8);
            _os.write(iRankNameId, 9);
            _os.write(strUrl, 10);
            _os.write(iFantuanId, 11);
            _os.write(strLevelIcon_450_336, 12);
            _os.write(strLevelIcon_225_168, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStarId, 0, false);
            _is.read(iLevelId, 1, false);
            _is.read(strBadgeIcon, 2, false);
            _is.read(strLevelIcon_h, 3, false);
            _is.read(strLevelIcon_v, 4, false);
            _is.read(iFansVal, 5, false);
            _is.read(strLevelName, 6, false);
            _is.read(strLevelText, 7, false);
            _is.read(iSortKey, 8, false);
            _is.read(iRankNameId, 9, false);
            _is.read(strUrl, 10, false);
            _is.read(iFantuanId, 11, false);
            _is.read(strLevelIcon_450_336, 12, false);
            _is.read(strLevelIcon_225_168, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStarId,"iStarId");
            _ds.display(iLevelId,"iLevelId");
            _ds.display(strBadgeIcon,"strBadgeIcon");
            _ds.display(strLevelIcon_h,"strLevelIcon_h");
            _ds.display(strLevelIcon_v,"strLevelIcon_v");
            _ds.display(iFansVal,"iFansVal");
            _ds.display(strLevelName,"strLevelName");
            _ds.display(strLevelText,"strLevelText");
            _ds.display(iSortKey,"iSortKey");
            _ds.display(iRankNameId,"iRankNameId");
            _ds.display(strUrl,"strUrl");
            _ds.display(iFantuanId,"iFantuanId");
            _ds.display(strLevelIcon_450_336,"strLevelIcon_450_336");
            _ds.display(strLevelIcon_225_168,"strLevelIcon_225_168");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStarId, true);
            _ds.displaySimple(iLevelId, true);
            _ds.displaySimple(strBadgeIcon, true);
            _ds.displaySimple(strLevelIcon_h, true);
            _ds.displaySimple(strLevelIcon_v, true);
            _ds.displaySimple(iFansVal, true);
            _ds.displaySimple(strLevelName, true);
            _ds.displaySimple(strLevelText, true);
            _ds.displaySimple(iSortKey, true);
            _ds.displaySimple(iRankNameId, true);
            _ds.displaySimple(strUrl, true);
            _ds.displaySimple(iFantuanId, true);
            _ds.displaySimple(strLevelIcon_450_336, true);
            _ds.displaySimple(strLevelIcon_225_168, false);
            return _os;
        }
    public:
        taf::Int32 iStarId;
        taf::Int32 iLevelId;
        std::string strBadgeIcon;
        std::string strLevelIcon_h;
        std::string strLevelIcon_v;
        taf::Int32 iFansVal;
        std::string strLevelName;
        std::string strLevelText;
        taf::Int32 iSortKey;
        taf::Int32 iRankNameId;
        std::string strUrl;
        taf::Int32 iFantuanId;
        std::string strLevelIcon_450_336;
        std::string strLevelIcon_225_168;
    };
    inline bool operator==(const stBadgeLevel&l, const stBadgeLevel&r)
    {
        return l.iStarId == r.iStarId && l.iLevelId == r.iLevelId && l.strBadgeIcon == r.strBadgeIcon && l.strLevelIcon_h == r.strLevelIcon_h && l.strLevelIcon_v == r.strLevelIcon_v && l.iFansVal == r.iFansVal && l.strLevelName == r.strLevelName && l.strLevelText == r.strLevelText && l.iSortKey == r.iSortKey && l.iRankNameId == r.iRankNameId && l.strUrl == r.strUrl && l.iFantuanId == r.iFantuanId && l.strLevelIcon_450_336 == r.strLevelIcon_450_336 && l.strLevelIcon_225_168 == r.strLevelIcon_225_168;
    }
    inline bool operator!=(const stBadgeLevel&l, const stBadgeLevel&r)
    {
        return !(l == r);
    }

    struct UserBadgeInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.UserBadgeInfoRsp";
        }
        static string MD5()
        {
            return "bdf37a87098c5b80fd71ef710483a0fc";
        }
        UserBadgeInfoRsp()
        :errCode(0),strErrMsg(""),strBadgeImage(""),strBadgeDesc(""),iUsrFValue(0),iDaysFollowed(0),iDaysSigned(0),iDayFValue(0),iDayVCoin(0),iTotalFValue(0),iTotalVCoin(0),iSpecialRewards(0),strFansNick(""),strStarName(""),strStarImage(""),dwTotalProps(0),iFollowStatus(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            strBadgeImage = "";
            strBadgeDesc = "";
            iUsrFValue = 0;
            iDaysFollowed = 0;
            iDaysSigned = 0;
            iDayFValue = 0;
            iDayVCoin = 0;
            iTotalFValue = 0;
            iTotalVCoin = 0;
            iSpecialRewards = 0;
            strFansNick = "";
            strStarName = "";
            strStarImage = "";
            dwTotalProps = 0;
            iFollowStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(strBadgeImage, 2);
            _os.write(strBadgeDesc, 3);
            _os.write(iUsrFValue, 6);
            _os.write(iDaysFollowed, 7);
            _os.write(iDaysSigned, 8);
            _os.write(iDayFValue, 9);
            _os.write(iDayVCoin, 10);
            _os.write(iTotalFValue, 11);
            _os.write(iTotalVCoin, 12);
            _os.write(iSpecialRewards, 13);
            _os.write(strFansNick, 14);
            _os.write(strStarName, 15);
            _os.write(strStarImage, 16);
            _os.write(stCurrLevel, 17);
            _os.write(stNextLevel, 18);
            _os.write(dwTotalProps, 19);
            _os.write(iFollowStatus, 20);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, false);
            _is.read(strErrMsg, 1, false);
            _is.read(strBadgeImage, 2, false);
            _is.read(strBadgeDesc, 3, false);
            _is.read(iUsrFValue, 6, false);
            _is.read(iDaysFollowed, 7, false);
            _is.read(iDaysSigned, 8, false);
            _is.read(iDayFValue, 9, false);
            _is.read(iDayVCoin, 10, false);
            _is.read(iTotalFValue, 11, false);
            _is.read(iTotalVCoin, 12, false);
            _is.read(iSpecialRewards, 13, false);
            _is.read(strFansNick, 14, false);
            _is.read(strStarName, 15, false);
            _is.read(strStarImage, 16, false);
            _is.read(stCurrLevel, 17, false);
            _is.read(stNextLevel, 18, false);
            _is.read(dwTotalProps, 19, false);
            _is.read(iFollowStatus, 20, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(strBadgeImage,"strBadgeImage");
            _ds.display(strBadgeDesc,"strBadgeDesc");
            _ds.display(iUsrFValue,"iUsrFValue");
            _ds.display(iDaysFollowed,"iDaysFollowed");
            _ds.display(iDaysSigned,"iDaysSigned");
            _ds.display(iDayFValue,"iDayFValue");
            _ds.display(iDayVCoin,"iDayVCoin");
            _ds.display(iTotalFValue,"iTotalFValue");
            _ds.display(iTotalVCoin,"iTotalVCoin");
            _ds.display(iSpecialRewards,"iSpecialRewards");
            _ds.display(strFansNick,"strFansNick");
            _ds.display(strStarName,"strStarName");
            _ds.display(strStarImage,"strStarImage");
            _ds.display(stCurrLevel,"stCurrLevel");
            _ds.display(stNextLevel,"stNextLevel");
            _ds.display(dwTotalProps,"dwTotalProps");
            _ds.display(iFollowStatus,"iFollowStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(strBadgeImage, true);
            _ds.displaySimple(strBadgeDesc, true);
            _ds.displaySimple(iUsrFValue, true);
            _ds.displaySimple(iDaysFollowed, true);
            _ds.displaySimple(iDaysSigned, true);
            _ds.displaySimple(iDayFValue, true);
            _ds.displaySimple(iDayVCoin, true);
            _ds.displaySimple(iTotalFValue, true);
            _ds.displaySimple(iTotalVCoin, true);
            _ds.displaySimple(iSpecialRewards, true);
            _ds.displaySimple(strFansNick, true);
            _ds.displaySimple(strStarName, true);
            _ds.displaySimple(strStarImage, true);
            _ds.displaySimple(stCurrLevel, true);
            _ds.displaySimple(stNextLevel, true);
            _ds.displaySimple(dwTotalProps, true);
            _ds.displaySimple(iFollowStatus, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        std::string strBadgeImage;
        std::string strBadgeDesc;
        taf::Int32 iUsrFValue;
        taf::Int32 iDaysFollowed;
        taf::Int32 iDaysSigned;
        taf::Int32 iDayFValue;
        taf::Int32 iDayVCoin;
        taf::Int32 iTotalFValue;
        taf::Int32 iTotalVCoin;
        taf::Int32 iSpecialRewards;
        std::string strFansNick;
        std::string strStarName;
        std::string strStarImage;
        FansAdapt::stBadgeLevel stCurrLevel;
        FansAdapt::stBadgeLevel stNextLevel;
        taf::Int32 dwTotalProps;
        taf::Int32 iFollowStatus;
    };
    inline bool operator==(const UserBadgeInfoRsp&l, const UserBadgeInfoRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.strBadgeImage == r.strBadgeImage && l.strBadgeDesc == r.strBadgeDesc && l.iUsrFValue == r.iUsrFValue && l.iDaysFollowed == r.iDaysFollowed && l.iDaysSigned == r.iDaysSigned && l.iDayFValue == r.iDayFValue && l.iDayVCoin == r.iDayVCoin && l.iTotalFValue == r.iTotalFValue && l.iTotalVCoin == r.iTotalVCoin && l.iSpecialRewards == r.iSpecialRewards && l.strFansNick == r.strFansNick && l.strStarName == r.strStarName && l.strStarImage == r.strStarImage && l.stCurrLevel == r.stCurrLevel && l.stNextLevel == r.stNextLevel && l.dwTotalProps == r.dwTotalProps && l.iFollowStatus == r.iFollowStatus;
    }
    inline bool operator!=(const UserBadgeInfoRsp&l, const UserBadgeInfoRsp&r)
    {
        return !(l == r);
    }

    struct UserRewardReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.UserRewardReq";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        UserRewardReq()
        :strDataKey(""),iType(0)
        {
        }
        void resetDefautlt()
        {
            strDataKey = "";
            iType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDataKey, 0);
            _os.write(iType, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDataKey, 0, false);
            _is.read(iType, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDataKey,"strDataKey");
            _ds.display(iType,"iType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDataKey, true);
            _ds.displaySimple(iType, false);
            return _os;
        }
    public:
        std::string strDataKey;
        taf::Int32 iType;
    };
    inline bool operator==(const UserRewardReq&l, const UserRewardReq&r)
    {
        return l.strDataKey == r.strDataKey && l.iType == r.iType;
    }
    inline bool operator!=(const UserRewardReq&l, const UserRewardReq&r)
    {
        return !(l == r);
    }

    struct UserRewardRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.UserRewardRsp";
        }
        static string MD5()
        {
            return "83e54cde6c23e00e41fa9254b9e732b6";
        }
        UserRewardRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecRewardList, 2);
            _os.write(vecRewardType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, false);
            _is.read(strErrMsg, 1, false);
            _is.read(vecRewardList, 2, false);
            _is.read(vecRewardType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecRewardList,"vecRewardList");
            _ds.display(vecRewardType,"vecRewardType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecRewardList, true);
            _ds.displaySimple(vecRewardType, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<FansAdapt::RewardItem> vecRewardList;
        vector<FansAdapt::RewardType> vecRewardType;
    };
    inline bool operator==(const UserRewardRsp&l, const UserRewardRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.vecRewardList == r.vecRewardList && l.vecRewardType == r.vecRewardType;
    }
    inline bool operator!=(const UserRewardRsp&l, const UserRewardRsp&r)
    {
        return !(l == r);
    }

    struct UserTaskListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.UserTaskListReq";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        UserTaskListReq()
        :strDataKey(""),iType(0)
        {
        }
        void resetDefautlt()
        {
            strDataKey = "";
            iType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDataKey, 0);
            _os.write(iType, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDataKey, 0, true);
            _is.read(iType, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDataKey,"strDataKey");
            _ds.display(iType,"iType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDataKey, true);
            _ds.displaySimple(iType, false);
            return _os;
        }
    public:
        std::string strDataKey;
        taf::Int32 iType;
    };
    inline bool operator==(const UserTaskListReq&l, const UserTaskListReq&r)
    {
        return l.strDataKey == r.strDataKey && l.iType == r.iType;
    }
    inline bool operator!=(const UserTaskListReq&l, const UserTaskListReq&r)
    {
        return !(l == r);
    }

    struct UserTaskListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.UserTaskListRsp";
        }
        static string MD5()
        {
            return "2f292a07abe6e9037c79488e35f39636";
        }
        UserTaskListRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecTaskList, 2);
            _os.write(vecTaskType, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, false);
            _is.read(strErrMsg, 1, false);
            _is.read(vecTaskList, 2, false);
            _is.read(vecTaskType, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecTaskList,"vecTaskList");
            _ds.display(vecTaskType,"vecTaskType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecTaskList, true);
            _ds.displaySimple(vecTaskType, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<FansAdapt::FansGrowthTask> vecTaskList;
        vector<FansAdapt::FansGrowthTaskType> vecTaskType;
    };
    inline bool operator==(const UserTaskListRsp&l, const UserTaskListRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.vecTaskList == r.vecTaskList && l.vecTaskType == r.vecTaskType;
    }
    inline bool operator!=(const UserTaskListRsp&l, const UserTaskListRsp&r)
    {
        return !(l == r);
    }

    struct BadgeSubLevel : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.BadgeSubLevel";
        }
        static string MD5()
        {
            return "9bcfaf911c12a5a140566442a651b4bf";
        }
        BadgeSubLevel()
        :iFValue(0),strDesc(""),iSubLevelId(0),strImage("")
        {
        }
        void resetDefautlt()
        {
            iFValue = 0;
            strDesc = "";
            iSubLevelId = 0;
            strImage = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iFValue, 0);
            _os.write(strDesc, 1);
            _os.write(iSubLevelId, 2);
            _os.write(strImage, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iFValue, 0, false);
            _is.read(strDesc, 1, false);
            _is.read(iSubLevelId, 2, false);
            _is.read(strImage, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iFValue,"iFValue");
            _ds.display(strDesc,"strDesc");
            _ds.display(iSubLevelId,"iSubLevelId");
            _ds.display(strImage,"strImage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iFValue, true);
            _ds.displaySimple(strDesc, true);
            _ds.displaySimple(iSubLevelId, true);
            _ds.displaySimple(strImage, false);
            return _os;
        }
    public:
        taf::Int32 iFValue;
        std::string strDesc;
        taf::Int32 iSubLevelId;
        std::string strImage;
    };
    inline bool operator==(const BadgeSubLevel&l, const BadgeSubLevel&r)
    {
        return l.iFValue == r.iFValue && l.strDesc == r.strDesc && l.iSubLevelId == r.iSubLevelId && l.strImage == r.strImage;
    }
    inline bool operator!=(const BadgeSubLevel&l, const BadgeSubLevel&r)
    {
        return !(l == r);
    }

    struct BadgeLevel : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.BadgeLevel";
        }
        static string MD5()
        {
            return "f93ea07cf63313a057bccea0a8608eb9";
        }
        BadgeLevel()
        :strImage(""),strLevelName(""),strPrivilegeDesc(""),iLevelId(0)
        {
        }
        void resetDefautlt()
        {
            strImage = "";
            strLevelName = "";
            strPrivilegeDesc = "";
            iLevelId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strImage, 0);
            _os.write(strLevelName, 1);
            _os.write(strPrivilegeDesc, 2);
            _os.write(vecSubLevelList, 3);
            _os.write(iLevelId, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strImage, 0, false);
            _is.read(strLevelName, 1, false);
            _is.read(strPrivilegeDesc, 2, false);
            _is.read(vecSubLevelList, 3, false);
            _is.read(iLevelId, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strImage,"strImage");
            _ds.display(strLevelName,"strLevelName");
            _ds.display(strPrivilegeDesc,"strPrivilegeDesc");
            _ds.display(vecSubLevelList,"vecSubLevelList");
            _ds.display(iLevelId,"iLevelId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strImage, true);
            _ds.displaySimple(strLevelName, true);
            _ds.displaySimple(strPrivilegeDesc, true);
            _ds.displaySimple(vecSubLevelList, true);
            _ds.displaySimple(iLevelId, false);
            return _os;
        }
    public:
        std::string strImage;
        std::string strLevelName;
        std::string strPrivilegeDesc;
        vector<FansAdapt::BadgeSubLevel> vecSubLevelList;
        taf::Int32 iLevelId;
    };
    inline bool operator==(const BadgeLevel&l, const BadgeLevel&r)
    {
        return l.strImage == r.strImage && l.strLevelName == r.strLevelName && l.strPrivilegeDesc == r.strPrivilegeDesc && l.vecSubLevelList == r.vecSubLevelList && l.iLevelId == r.iLevelId;
    }
    inline bool operator!=(const BadgeLevel&l, const BadgeLevel&r)
    {
        return !(l == r);
    }

    struct BadgeLevelIntroReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.BadgeLevelIntroReq";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        BadgeLevelIntroReq()
        :strDataKey("")
        {
        }
        void resetDefautlt()
        {
            strDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDataKey, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDataKey,"strDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDataKey, false);
            return _os;
        }
    public:
        std::string strDataKey;
    };
    inline bool operator==(const BadgeLevelIntroReq&l, const BadgeLevelIntroReq&r)
    {
        return l.strDataKey == r.strDataKey;
    }
    inline bool operator!=(const BadgeLevelIntroReq&l, const BadgeLevelIntroReq&r)
    {
        return !(l == r);
    }

    struct BadgeLevelIntroRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.BadgeLevelIntroRsp";
        }
        static string MD5()
        {
            return "71f05008dda433dfa9b9b8ae9575338b";
        }
        BadgeLevelIntroRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecBadgeLevels, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, false);
            _is.read(strErrMsg, 1, false);
            _is.read(vecBadgeLevels, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecBadgeLevels,"vecBadgeLevels");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecBadgeLevels, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<FansAdapt::BadgeLevel> vecBadgeLevels;
    };
    inline bool operator==(const BadgeLevelIntroRsp&l, const BadgeLevelIntroRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.vecBadgeLevels == r.vecBadgeLevels;
    }
    inline bool operator!=(const BadgeLevelIntroRsp&l, const BadgeLevelIntroRsp&r)
    {
        return !(l == r);
    }

    struct stWelfare : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.stWelfare";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        stWelfare()
        :dwGiftId(0)
        {
        }
        void resetDefautlt()
        {
            dwGiftId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwGiftId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwGiftId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwGiftId,"dwGiftId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwGiftId, false);
            return _os;
        }
    public:
        taf::Int32 dwGiftId;
    };
    inline bool operator==(const stWelfare&l, const stWelfare&r)
    {
        return l.dwGiftId == r.dwGiftId;
    }
    inline bool operator!=(const stWelfare&l, const stWelfare&r)
    {
        return !(l == r);
    }

    struct stSignReward : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.stSignReward";
        }
        static string MD5()
        {
            return "f415153d57e544cb26b8ffed2c0373e2";
        }
        stSignReward()
        :dwFansVal(0),dwVCoin(0)
        {
        }
        void resetDefautlt()
        {
            dwFansVal = 0;
            dwVCoin = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwFansVal, 0);
            _os.write(dwVCoin, 1);
            _os.write(vecWelfare, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwFansVal, 0, true);
            _is.read(dwVCoin, 1, false);
            _is.read(vecWelfare, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwFansVal,"dwFansVal");
            _ds.display(dwVCoin,"dwVCoin");
            _ds.display(vecWelfare,"vecWelfare");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwFansVal, true);
            _ds.displaySimple(dwVCoin, true);
            _ds.displaySimple(vecWelfare, false);
            return _os;
        }
    public:
        taf::Int32 dwFansVal;
        taf::Int32 dwVCoin;
        vector<FansAdapt::stWelfare> vecWelfare;
    };
    inline bool operator==(const stSignReward&l, const stSignReward&r)
    {
        return l.dwFansVal == r.dwFansVal && l.dwVCoin == r.dwVCoin && l.vecWelfare == r.vecWelfare;
    }
    inline bool operator!=(const stSignReward&l, const stSignReward&r)
    {
        return !(l == r);
    }

    struct SignRewardListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.SignRewardListReq";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        SignRewardListReq()
        :strDataKey("")
        {
        }
        void resetDefautlt()
        {
            strDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDataKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDataKey,"strDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDataKey, false);
            return _os;
        }
    public:
        std::string strDataKey;
    };
    inline bool operator==(const SignRewardListReq&l, const SignRewardListReq&r)
    {
        return l.strDataKey == r.strDataKey;
    }
    inline bool operator!=(const SignRewardListReq&l, const SignRewardListReq&r)
    {
        return !(l == r);
    }

    struct SignRewardListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.SignRewardListRsp";
        }
        static string MD5()
        {
            return "4c2c9c8b99c00199ea26af616ba76219";
        }
        SignRewardListRsp()
        :errCode(0),strErrMsg(""),strImage(""),iFValue(0),iSpecailRewards(0),iSignDay(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            strImage = "";
            iFValue = 0;
            iSpecailRewards = 0;
            iSignDay = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(strImage, 2);
            _os.write(iFValue, 3);
            _os.write(iSpecailRewards, 4);
            _os.write(iSignDay, 5);
            _os.write(vecSignRewardList, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, false);
            _is.read(strErrMsg, 1, false);
            _is.read(strImage, 2, false);
            _is.read(iFValue, 3, false);
            _is.read(iSpecailRewards, 4, false);
            _is.read(iSignDay, 5, false);
            _is.read(vecSignRewardList, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(strImage,"strImage");
            _ds.display(iFValue,"iFValue");
            _ds.display(iSpecailRewards,"iSpecailRewards");
            _ds.display(iSignDay,"iSignDay");
            _ds.display(vecSignRewardList,"vecSignRewardList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(strImage, true);
            _ds.displaySimple(iFValue, true);
            _ds.displaySimple(iSpecailRewards, true);
            _ds.displaySimple(iSignDay, true);
            _ds.displaySimple(vecSignRewardList, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        std::string strImage;
        taf::Int32 iFValue;
        taf::Int32 iSpecailRewards;
        taf::Int32 iSignDay;
        vector<FansAdapt::stSignReward> vecSignRewardList;
    };
    inline bool operator==(const SignRewardListRsp&l, const SignRewardListRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.strImage == r.strImage && l.iFValue == r.iFValue && l.iSpecailRewards == r.iSpecailRewards && l.iSignDay == r.iSignDay && l.vecSignRewardList == r.vecSignRewardList;
    }
    inline bool operator!=(const SignRewardListRsp&l, const SignRewardListRsp&r)
    {
        return !(l == r);
    }

    struct MyFValueFlowReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.MyFValueFlowReq";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        MyFValueFlowReq()
        :strDataKey(""),strRefreshContext("")
        {
        }
        void resetDefautlt()
        {
            strDataKey = "";
            strRefreshContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDataKey, 0);
            _os.write(strRefreshContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDataKey, 0, true);
            _is.read(strRefreshContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDataKey,"strDataKey");
            _ds.display(strRefreshContext,"strRefreshContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDataKey, true);
            _ds.displaySimple(strRefreshContext, false);
            return _os;
        }
    public:
        std::string strDataKey;
        std::string strRefreshContext;
    };
    inline bool operator==(const MyFValueFlowReq&l, const MyFValueFlowReq&r)
    {
        return l.strDataKey == r.strDataKey && l.strRefreshContext == r.strRefreshContext;
    }
    inline bool operator!=(const MyFValueFlowReq&l, const MyFValueFlowReq&r)
    {
        return !(l == r);
    }

    struct ConsumeItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.ConsumeItem";
        }
        static string MD5()
        {
            return "55420b345e13da84aad635417b0d3f4b";
        }
        ConsumeItem()
        :strDate(""),consumeEvent(""),consumeDesc(""),ctx("")
        {
        }
        void resetDefautlt()
        {
            strDate = "";
            consumeEvent = "";
            consumeDesc = "";
            ctx = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDate, 0);
            _os.write(consumeEvent, 1);
            _os.write(consumeDesc, 2);
            _os.write(ctx, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDate, 0, false);
            _is.read(consumeEvent, 1, false);
            _is.read(consumeDesc, 2, false);
            _is.read(ctx, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDate,"strDate");
            _ds.display(consumeEvent,"consumeEvent");
            _ds.display(consumeDesc,"consumeDesc");
            _ds.display(ctx,"ctx");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDate, true);
            _ds.displaySimple(consumeEvent, true);
            _ds.displaySimple(consumeDesc, true);
            _ds.displaySimple(ctx, false);
            return _os;
        }
    public:
        std::string strDate;
        std::string consumeEvent;
        std::string consumeDesc;
        std::string ctx;
    };
    inline bool operator==(const ConsumeItem&l, const ConsumeItem&r)
    {
        return l.strDate == r.strDate && l.consumeEvent == r.consumeEvent && l.consumeDesc == r.consumeDesc && l.ctx == r.ctx;
    }
    inline bool operator!=(const ConsumeItem&l, const ConsumeItem&r)
    {
        return !(l == r);
    }

    struct MyFValueFlowRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.MyFValueFlowRsp";
        }
        static string MD5()
        {
            return "20a55386bf1b53de0e7ffe5765467a1d";
        }
        MyFValueFlowRsp()
        :errCode(0),strErrMsg(""),strPageContext(""),iHasNextPage(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            strPageContext = "";
            iHasNextPage = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecFValueFlowList, 2);
            _os.write(strPageContext, 3);
            _os.write(iHasNextPage, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, false);
            _is.read(strErrMsg, 1, false);
            _is.read(vecFValueFlowList, 2, false);
            _is.read(strPageContext, 3, false);
            _is.read(iHasNextPage, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFValueFlowList,"vecFValueFlowList");
            _ds.display(strPageContext,"strPageContext");
            _ds.display(iHasNextPage,"iHasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFValueFlowList, true);
            _ds.displaySimple(strPageContext, true);
            _ds.displaySimple(iHasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<FansAdapt::ConsumeItem> vecFValueFlowList;
        std::string strPageContext;
        taf::Int32 iHasNextPage;
    };
    inline bool operator==(const MyFValueFlowRsp&l, const MyFValueFlowRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.vecFValueFlowList == r.vecFValueFlowList && l.strPageContext == r.strPageContext && l.iHasNextPage == r.iHasNextPage;
    }
    inline bool operator!=(const MyFValueFlowRsp&l, const MyFValueFlowRsp&r)
    {
        return !(l == r);
    }

    struct RewardItemInfoReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.RewardItemInfoReq";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        RewardItemInfoReq()
        :strDataKey(""),iRewardId(0)
        {
        }
        void resetDefautlt()
        {
            strDataKey = "";
            iRewardId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDataKey, 0);
            _os.write(iRewardId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDataKey, 0, true);
            _is.read(iRewardId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDataKey,"strDataKey");
            _ds.display(iRewardId,"iRewardId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDataKey, true);
            _ds.displaySimple(iRewardId, false);
            return _os;
        }
    public:
        std::string strDataKey;
        taf::Int32 iRewardId;
    };
    inline bool operator==(const RewardItemInfoReq&l, const RewardItemInfoReq&r)
    {
        return l.strDataKey == r.strDataKey && l.iRewardId == r.iRewardId;
    }
    inline bool operator!=(const RewardItemInfoReq&l, const RewardItemInfoReq&r)
    {
        return !(l == r);
    }

    struct RewardItemInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.RewardItemInfoRsp";
        }
        static string MD5()
        {
            return "cb86be5193bda245843f3ed1e39fbf54";
        }
        RewardItemInfoRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(stRewardInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, false);
            _is.read(strErrMsg, 1, false);
            _is.read(stRewardInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stRewardInfo,"stRewardInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stRewardInfo, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        FansAdapt::RewardItem stRewardInfo;
    };
    inline bool operator==(const RewardItemInfoRsp&l, const RewardItemInfoRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.stRewardInfo == r.stRewardInfo;
    }
    inline bool operator!=(const RewardItemInfoRsp&l, const RewardItemInfoRsp&r)
    {
        return !(l == r);
    }

    struct PrivilegeItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.PrivilegeItem";
        }
        static string MD5()
        {
            return "c4d7e629c0ca65edfd0bf3b3fb53b7d1";
        }
        PrivilegeItem()
        :id(0),desc(""),image(""),image_1(""),image_s("")
        {
        }
        void resetDefautlt()
        {
            id = 0;
            desc = "";
            image = "";
            image_1 = "";
            image_s = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(id, 0);
            _os.write(desc, 1);
            _os.write(image, 2);
            _os.write(image_1, 3);
            _os.write(image_s, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(id, 0, false);
            _is.read(desc, 1, false);
            _is.read(image, 2, false);
            _is.read(image_1, 3, false);
            _is.read(image_s, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(id,"id");
            _ds.display(desc,"desc");
            _ds.display(image,"image");
            _ds.display(image_1,"image_1");
            _ds.display(image_s,"image_s");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(id, true);
            _ds.displaySimple(desc, true);
            _ds.displaySimple(image, true);
            _ds.displaySimple(image_1, true);
            _ds.displaySimple(image_s, false);
            return _os;
        }
    public:
        taf::Int32 id;
        std::string desc;
        std::string image;
        std::string image_1;
        std::string image_s;
    };
    inline bool operator==(const PrivilegeItem&l, const PrivilegeItem&r)
    {
        return l.id == r.id && l.desc == r.desc && l.image == r.image && l.image_1 == r.image_1 && l.image_s == r.image_s;
    }
    inline bool operator!=(const PrivilegeItem&l, const PrivilegeItem&r)
    {
        return !(l == r);
    }

    struct LevelPrivilegeInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.LevelPrivilegeInfo";
        }
        static string MD5()
        {
            return "891e449c841aadfed6c8916b3ef1aa6c";
        }
        LevelPrivilegeInfo()
        :fans_level(0)
        {
        }
        void resetDefautlt()
        {
            fans_level = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(fans_level, 0);
            _os.write(all_privilege_id, 1);
            _os.write(have_privilege_id, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(fans_level, 0, false);
            _is.read(all_privilege_id, 1, false);
            _is.read(have_privilege_id, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(fans_level,"fans_level");
            _ds.display(all_privilege_id,"all_privilege_id");
            _ds.display(have_privilege_id,"have_privilege_id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(fans_level, true);
            _ds.displaySimple(all_privilege_id, true);
            _ds.displaySimple(have_privilege_id, false);
            return _os;
        }
    public:
        taf::Int32 fans_level;
        vector<taf::Int32> all_privilege_id;
        vector<taf::Int32> have_privilege_id;
    };
    inline bool operator==(const LevelPrivilegeInfo&l, const LevelPrivilegeInfo&r)
    {
        return l.fans_level == r.fans_level && l.all_privilege_id == r.all_privilege_id && l.have_privilege_id == r.have_privilege_id;
    }
    inline bool operator!=(const LevelPrivilegeInfo&l, const LevelPrivilegeInfo&r)
    {
        return !(l == r);
    }

    struct AllPrivilegeList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.AllPrivilegeList";
        }
        static string MD5()
        {
            return "1668e0dd11a04af9d49c3e1b081fd305";
        }
        AllPrivilegeList()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(item_list, 0);
            _os.write(level_privilege_info, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(item_list, 0, false);
            _is.read(level_privilege_info, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(item_list,"item_list");
            _ds.display(level_privilege_info,"level_privilege_info");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(item_list, true);
            _ds.displaySimple(level_privilege_info, false);
            return _os;
        }
    public:
        vector<FansAdapt::PrivilegeItem> item_list;
        vector<FansAdapt::LevelPrivilegeInfo> level_privilege_info;
    };
    inline bool operator==(const AllPrivilegeList&l, const AllPrivilegeList&r)
    {
        return l.item_list == r.item_list && l.level_privilege_info == r.level_privilege_info;
    }
    inline bool operator!=(const AllPrivilegeList&l, const AllPrivilegeList&r)
    {
        return !(l == r);
    }

    struct UserSpecialRewardReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.UserSpecialRewardReq";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        UserSpecialRewardReq()
        :strDataKey("")
        {
        }
        void resetDefautlt()
        {
            strDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDataKey, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDataKey,"strDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDataKey, false);
            return _os;
        }
    public:
        std::string strDataKey;
    };
    inline bool operator==(const UserSpecialRewardReq&l, const UserSpecialRewardReq&r)
    {
        return l.strDataKey == r.strDataKey;
    }
    inline bool operator!=(const UserSpecialRewardReq&l, const UserSpecialRewardReq&r)
    {
        return !(l == r);
    }

    struct UserSpecialRewardRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.UserSpecialRewardRsp";
        }
        static string MD5()
        {
            return "a93dd713e845ca1dc35a015830e2562e";
        }
        UserSpecialRewardRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecSpecialRewardList, 2);
            _os.write(all_privilege_list, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, false);
            _is.read(strErrMsg, 1, false);
            _is.read(vecSpecialRewardList, 2, false);
            _is.read(all_privilege_list, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecSpecialRewardList,"vecSpecialRewardList");
            _ds.display(all_privilege_list,"all_privilege_list");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecSpecialRewardList, true);
            _ds.displaySimple(all_privilege_list, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<FansAdapt::RewardItem> vecSpecialRewardList;
        vector<FansAdapt::AllPrivilegeList> all_privilege_list;
    };
    inline bool operator==(const UserSpecialRewardRsp&l, const UserSpecialRewardRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.vecSpecialRewardList == r.vecSpecialRewardList && l.all_privilege_list == r.all_privilege_list;
    }
    inline bool operator!=(const UserSpecialRewardRsp&l, const UserSpecialRewardRsp&r)
    {
        return !(l == r);
    }

    struct stUserRewardBrief : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.stUserRewardBrief";
        }
        static string MD5()
        {
            return "3a6dc1facc93eb6abb463c3932379537";
        }
        stUserRewardBrief()
        :ddwFansVal(0),ddwVCoin(0),ddwProps(0),iBonusTimes(0)
        {
        }
        void resetDefautlt()
        {
            ddwFansVal = 0;
            ddwVCoin = 0;
            ddwProps = 0;
            iBonusTimes = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwFansVal, 0);
            _os.write(ddwVCoin, 1);
            _os.write(vecWelfare, 2);
            _os.write(ddwProps, 3);
            _os.write(iBonusTimes, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwFansVal, 0, false);
            _is.read(ddwVCoin, 1, false);
            _is.read(vecWelfare, 2, false);
            _is.read(ddwProps, 3, false);
            _is.read(iBonusTimes, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwFansVal,"ddwFansVal");
            _ds.display(ddwVCoin,"ddwVCoin");
            _ds.display(vecWelfare,"vecWelfare");
            _ds.display(ddwProps,"ddwProps");
            _ds.display(iBonusTimes,"iBonusTimes");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwFansVal, true);
            _ds.displaySimple(ddwVCoin, true);
            _ds.displaySimple(vecWelfare, true);
            _ds.displaySimple(ddwProps, true);
            _ds.displaySimple(iBonusTimes, false);
            return _os;
        }
    public:
        taf::Int64 ddwFansVal;
        taf::Int64 ddwVCoin;
        vector<FansAdapt::stWelfare> vecWelfare;
        taf::Int64 ddwProps;
        taf::Int32 iBonusTimes;
    };
    inline bool operator==(const stUserRewardBrief&l, const stUserRewardBrief&r)
    {
        return l.ddwFansVal == r.ddwFansVal && l.ddwVCoin == r.ddwVCoin && l.vecWelfare == r.vecWelfare && l.ddwProps == r.ddwProps && l.iBonusTimes == r.iBonusTimes;
    }
    inline bool operator!=(const stUserRewardBrief&l, const stUserRewardBrief&r)
    {
        return !(l == r);
    }

    struct RecvTaskRewardReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.RecvTaskRewardReq";
        }
        static string MD5()
        {
            return "c855e270f613129a489d51a288a11031";
        }
        RecvTaskRewardReq()
        :strDataKey(""),iTaskId(0)
        {
        }
        void resetDefautlt()
        {
            strDataKey = "";
            iTaskId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDataKey, 0);
            _os.write(iTaskId, 1);
            _os.write(vecBillList, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDataKey, 0, true);
            _is.read(iTaskId, 1, false);
            _is.read(vecBillList, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDataKey,"strDataKey");
            _ds.display(iTaskId,"iTaskId");
            _ds.display(vecBillList,"vecBillList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDataKey, true);
            _ds.displaySimple(iTaskId, true);
            _ds.displaySimple(vecBillList, false);
            return _os;
        }
    public:
        std::string strDataKey;
        taf::Int32 iTaskId;
        vector<FansAdapt::stTaskInfo> vecBillList;
    };
    inline bool operator==(const RecvTaskRewardReq&l, const RecvTaskRewardReq&r)
    {
        return l.strDataKey == r.strDataKey && l.iTaskId == r.iTaskId && l.vecBillList == r.vecBillList;
    }
    inline bool operator!=(const RecvTaskRewardReq&l, const RecvTaskRewardReq&r)
    {
        return !(l == r);
    }

    struct RecvTaskRewardRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.RecvTaskRewardRsp";
        }
        static string MD5()
        {
            return "6b62409415f25c371944c2192af8322a";
        }
        RecvTaskRewardRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(stBeforeReward, 2);
            _os.write(stAfterReward, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, false);
            _is.read(strErrMsg, 1, false);
            _is.read(stBeforeReward, 2, false);
            _is.read(stAfterReward, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stBeforeReward,"stBeforeReward");
            _ds.display(stAfterReward,"stAfterReward");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stBeforeReward, true);
            _ds.displaySimple(stAfterReward, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        FansAdapt::stUserRewardBrief stBeforeReward;
        FansAdapt::stUserRewardBrief stAfterReward;
    };
    inline bool operator==(const RecvTaskRewardRsp&l, const RecvTaskRewardRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.stBeforeReward == r.stBeforeReward && l.stAfterReward == r.stAfterReward;
    }
    inline bool operator!=(const RecvTaskRewardRsp&l, const RecvTaskRewardRsp&r)
    {
        return !(l == r);
    }

    struct UsrSignInReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.UsrSignInReq";
        }
        static string MD5()
        {
            return "2e45701425f70f0e5c722cbe2c3f508e";
        }
        UsrSignInReq()
        :strDataKey("")
        {
        }
        void resetDefautlt()
        {
            strDataKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDataKey, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDataKey, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDataKey,"strDataKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDataKey, false);
            return _os;
        }
    public:
        std::string strDataKey;
    };
    inline bool operator==(const UsrSignInReq&l, const UsrSignInReq&r)
    {
        return l.strDataKey == r.strDataKey;
    }
    inline bool operator!=(const UsrSignInReq&l, const UsrSignInReq&r)
    {
        return !(l == r);
    }

    struct UsrSignInRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.UsrSignInRsp";
        }
        static string MD5()
        {
            return "25098e2020363b6b649dd2c4b10f4167";
        }
        UsrSignInRsp()
        :errCode(0),strErrMsg(""),iIntoNewLevel(0),iSignDay(0),iOldLevel(0),iCurrLevel(0),iReSignLimit(0),iMissResign(0),iCurLevelResignNum(0),iMouth(0)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            iIntoNewLevel = 0;
            iSignDay = 0;
            iOldLevel = 0;
            iCurrLevel = 0;
            iReSignLimit = 0;
            iMissResign = 0;
            iCurLevelResignNum = 0;
            iMouth = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(iIntoNewLevel, 2);
            _os.write(stBeforeReward, 3);
            _os.write(stAfterReward, 4);
            _os.write(vecRewardList, 5);
            _os.write(vecSignConf, 6);
            _os.write(iSignDay, 7);
            _os.write(iOldLevel, 8);
            _os.write(iCurrLevel, 9);
            _os.write(iReSignLimit, 10);
            _os.write(iMissResign, 11);
            _os.write(iCurLevelResignNum, 12);
            _os.write(iMouth, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, false);
            _is.read(strErrMsg, 1, false);
            _is.read(iIntoNewLevel, 2, false);
            _is.read(stBeforeReward, 3, false);
            _is.read(stAfterReward, 4, false);
            _is.read(vecRewardList, 5, false);
            _is.read(vecSignConf, 6, false);
            _is.read(iSignDay, 7, false);
            _is.read(iOldLevel, 8, false);
            _is.read(iCurrLevel, 9, false);
            _is.read(iReSignLimit, 10, false);
            _is.read(iMissResign, 11, false);
            _is.read(iCurLevelResignNum, 12, false);
            _is.read(iMouth, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(iIntoNewLevel,"iIntoNewLevel");
            _ds.display(stBeforeReward,"stBeforeReward");
            _ds.display(stAfterReward,"stAfterReward");
            _ds.display(vecRewardList,"vecRewardList");
            _ds.display(vecSignConf,"vecSignConf");
            _ds.display(iSignDay,"iSignDay");
            _ds.display(iOldLevel,"iOldLevel");
            _ds.display(iCurrLevel,"iCurrLevel");
            _ds.display(iReSignLimit,"iReSignLimit");
            _ds.display(iMissResign,"iMissResign");
            _ds.display(iCurLevelResignNum,"iCurLevelResignNum");
            _ds.display(iMouth,"iMouth");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(iIntoNewLevel, true);
            _ds.displaySimple(stBeforeReward, true);
            _ds.displaySimple(stAfterReward, true);
            _ds.displaySimple(vecRewardList, true);
            _ds.displaySimple(vecSignConf, true);
            _ds.displaySimple(iSignDay, true);
            _ds.displaySimple(iOldLevel, true);
            _ds.displaySimple(iCurrLevel, true);
            _ds.displaySimple(iReSignLimit, true);
            _ds.displaySimple(iMissResign, true);
            _ds.displaySimple(iCurLevelResignNum, true);
            _ds.displaySimple(iMouth, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        taf::Int32 iIntoNewLevel;
        FansAdapt::stUserRewardBrief stBeforeReward;
        FansAdapt::stUserRewardBrief stAfterReward;
        vector<FansAdapt::RewardItem> vecRewardList;
        vector<FansAdapt::stUserRewardBrief> vecSignConf;
        taf::Int32 iSignDay;
        taf::Int32 iOldLevel;
        taf::Int32 iCurrLevel;
        taf::Int32 iReSignLimit;
        taf::Int32 iMissResign;
        taf::Int32 iCurLevelResignNum;
        taf::Int32 iMouth;
    };
    inline bool operator==(const UsrSignInRsp&l, const UsrSignInRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.iIntoNewLevel == r.iIntoNewLevel && l.stBeforeReward == r.stBeforeReward && l.stAfterReward == r.stAfterReward && l.vecRewardList == r.vecRewardList && l.vecSignConf == r.vecSignConf && l.iSignDay == r.iSignDay && l.iOldLevel == r.iOldLevel && l.iCurrLevel == r.iCurrLevel && l.iReSignLimit == r.iReSignLimit && l.iMissResign == r.iMissResign && l.iCurLevelResignNum == r.iCurLevelResignNum && l.iMouth == r.iMouth;
    }
    inline bool operator!=(const UsrSignInRsp&l, const UsrSignInRsp&r)
    {
        return !(l == r);
    }

    struct DoFansTaskReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.DoFansTaskReq";
        }
        static string MD5()
        {
            return "a22a60a0056c905db28dd64822a2033c";
        }
        DoFansTaskReq()
        :ddwStarId(0),strScene(""),strTaskKey("")
        {
        }
        void resetDefautlt()
        {
            ddwStarId = 0;
            strScene = "";
            strTaskKey = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwStarId, 0);
            _os.write(strScene, 1);
            _os.write(strTaskKey, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwStarId, 0, true);
            _is.read(strScene, 1, true);
            _is.read(strTaskKey, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwStarId,"ddwStarId");
            _ds.display(strScene,"strScene");
            _ds.display(strTaskKey,"strTaskKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwStarId, true);
            _ds.displaySimple(strScene, true);
            _ds.displaySimple(strTaskKey, false);
            return _os;
        }
    public:
        taf::Int64 ddwStarId;
        std::string strScene;
        std::string strTaskKey;
    };
    inline bool operator==(const DoFansTaskReq&l, const DoFansTaskReq&r)
    {
        return l.ddwStarId == r.ddwStarId && l.strScene == r.strScene && l.strTaskKey == r.strTaskKey;
    }
    inline bool operator!=(const DoFansTaskReq&l, const DoFansTaskReq&r)
    {
        return !(l == r);
    }

    struct DoFansTaskRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.DoFansTaskRsp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        DoFansTaskRsp()
        :iErrCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(strErrMsg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(strErrMsg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrMsg,"strErrMsg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrMsg, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        std::string strErrMsg;
    };
    inline bool operator==(const DoFansTaskRsp&l, const DoFansTaskRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.strErrMsg == r.strErrMsg;
    }
    inline bool operator!=(const DoFansTaskRsp&l, const DoFansTaskRsp&r)
    {
        return !(l == r);
    }

    struct GetBadgeLevelInfoReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.GetBadgeLevelInfoReq";
        }
        static string MD5()
        {
            return "ccb556f43836cc7e3edb8f61632755e3";
        }
        GetBadgeLevelInfoReq()
        :lVuid(0),dwFlag(0)
        {
        }
        void resetDefautlt()
        {
            lVuid = 0;
            dwFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lVuid, 0);
            _os.write(dwFlag, 1);
            _os.write(vecStarId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lVuid, 0, true);
            _is.read(dwFlag, 1, true);
            _is.read(vecStarId, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lVuid,"lVuid");
            _ds.display(dwFlag,"dwFlag");
            _ds.display(vecStarId,"vecStarId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lVuid, true);
            _ds.displaySimple(dwFlag, true);
            _ds.displaySimple(vecStarId, false);
            return _os;
        }
    public:
        taf::Int64 lVuid;
        taf::Int32 dwFlag;
        vector<taf::Int64> vecStarId;
    };
    inline bool operator==(const GetBadgeLevelInfoReq&l, const GetBadgeLevelInfoReq&r)
    {
        return l.lVuid == r.lVuid && l.dwFlag == r.dwFlag && l.vecStarId == r.vecStarId;
    }
    inline bool operator!=(const GetBadgeLevelInfoReq&l, const GetBadgeLevelInfoReq&r)
    {
        return !(l == r);
    }

    struct GetBadgeLevelInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.GetBadgeLevelInfoRsp";
        }
        static string MD5()
        {
            return "cba48f6d9c4f8ed2b7f624db92c24eaa";
        }
        GetBadgeLevelInfoRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecUsrBadge, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(vecUsrBadge, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecUsrBadge,"vecUsrBadge");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecUsrBadge, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<FansAdapt::stBadgeLevel> vecUsrBadge;
    };
    inline bool operator==(const GetBadgeLevelInfoRsp&l, const GetBadgeLevelInfoRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.vecUsrBadge == r.vecUsrBadge;
    }
    inline bool operator!=(const GetBadgeLevelInfoRsp&l, const GetBadgeLevelInfoRsp&r)
    {
        return !(l == r);
    }

    struct stFansRankInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.stFansRankInfo";
        }
        static string MD5()
        {
            return "b90bf1d2afc2dcb84faf9466219e998c";
        }
        stFansRankInfo()
        :iFansVal(0),strNick(""),strFansIcon(""),strBadgeIcon(""),strBadgeLevelTxt("")
        {
        }
        void resetDefautlt()
        {
            iFansVal = 0;
            strNick = "";
            strFansIcon = "";
            strBadgeIcon = "";
            strBadgeLevelTxt = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iFansVal, 0);
            _os.write(strNick, 1);
            _os.write(strFansIcon, 2);
            _os.write(strBadgeIcon, 3);
            _os.write(strBadgeLevelTxt, 4);
            _os.write(stAction, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iFansVal, 0, false);
            _is.read(strNick, 1, false);
            _is.read(strFansIcon, 2, false);
            _is.read(strBadgeIcon, 3, false);
            _is.read(strBadgeLevelTxt, 4, false);
            _is.read(stAction, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iFansVal,"iFansVal");
            _ds.display(strNick,"strNick");
            _ds.display(strFansIcon,"strFansIcon");
            _ds.display(strBadgeIcon,"strBadgeIcon");
            _ds.display(strBadgeLevelTxt,"strBadgeLevelTxt");
            _ds.display(stAction,"stAction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iFansVal, true);
            _ds.displaySimple(strNick, true);
            _ds.displaySimple(strFansIcon, true);
            _ds.displaySimple(strBadgeIcon, true);
            _ds.displaySimple(strBadgeLevelTxt, true);
            _ds.displaySimple(stAction, false);
            return _os;
        }
    public:
        taf::Int32 iFansVal;
        std::string strNick;
        std::string strFansIcon;
        std::string strBadgeIcon;
        std::string strBadgeLevelTxt;
        FansAdapt::Action stAction;
    };
    inline bool operator==(const stFansRankInfo&l, const stFansRankInfo&r)
    {
        return l.iFansVal == r.iFansVal && l.strNick == r.strNick && l.strFansIcon == r.strFansIcon && l.strBadgeIcon == r.strBadgeIcon && l.strBadgeLevelTxt == r.strBadgeLevelTxt && l.stAction == r.stAction;
    }
    inline bool operator!=(const stFansRankInfo&l, const stFansRankInfo&r)
    {
        return !(l == r);
    }

    struct GetFansRankReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.GetFansRankReq";
        }
        static string MD5()
        {
            return "3c28d913d8b6de872104298ab7654818";
        }
        GetFansRankReq()
        :ddwStarId(0),pageContext("")
        {
        }
        void resetDefautlt()
        {
            ddwStarId = 0;
            pageContext = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(ddwStarId, 0);
            _os.write(pageContext, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ddwStarId, 0, true);
            _is.read(pageContext, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(ddwStarId,"ddwStarId");
            _ds.display(pageContext,"pageContext");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(ddwStarId, true);
            _ds.displaySimple(pageContext, false);
            return _os;
        }
    public:
        taf::Int64 ddwStarId;
        std::string pageContext;
    };
    inline bool operator==(const GetFansRankReq&l, const GetFansRankReq&r)
    {
        return l.ddwStarId == r.ddwStarId && l.pageContext == r.pageContext;
    }
    inline bool operator!=(const GetFansRankReq&l, const GetFansRankReq&r)
    {
        return !(l == r);
    }

    struct GetFansRankRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.GetFansRankRsp";
        }
        static string MD5()
        {
            return "fe8dbac36c6d9d87374803f0e0927bf8";
        }
        GetFansRankRsp()
        :errCode(0),strErrMsg(""),pageContext(""),hasNextPage(true)
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            pageContext = "";
            hasNextPage = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecFansRank, 2);
            _os.write(pageContext, 3);
            _os.write(hasNextPage, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(vecFansRank, 2, false);
            _is.read(pageContext, 3, false);
            _is.read(hasNextPage, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecFansRank,"vecFansRank");
            _ds.display(pageContext,"pageContext");
            _ds.display(hasNextPage,"hasNextPage");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecFansRank, true);
            _ds.displaySimple(pageContext, true);
            _ds.displaySimple(hasNextPage, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<FansAdapt::stFansRankInfo> vecFansRank;
        std::string pageContext;
        taf::Bool hasNextPage;
    };
    inline bool operator==(const GetFansRankRsp&l, const GetFansRankRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.vecFansRank == r.vecFansRank && l.pageContext == r.pageContext && l.hasNextPage == r.hasNextPage;
    }
    inline bool operator!=(const GetFansRankRsp&l, const GetFansRankRsp&r)
    {
        return !(l == r);
    }

    struct CheckLevelStatusReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.CheckLevelStatusReq";
        }
        static string MD5()
        {
            return "0d2ce2bfc4eeee1ad30063b5f17a7f57";
        }
        CheckLevelStatusReq()
        :strDataKey(""),iOldLevel(0)
        {
        }
        void resetDefautlt()
        {
            strDataKey = "";
            iOldLevel = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strDataKey, 0);
            _os.write(iOldLevel, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strDataKey, 0, true);
            _is.read(iOldLevel, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strDataKey,"strDataKey");
            _ds.display(iOldLevel,"iOldLevel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strDataKey, true);
            _ds.displaySimple(iOldLevel, false);
            return _os;
        }
    public:
        std::string strDataKey;
        taf::Int32 iOldLevel;
    };
    inline bool operator==(const CheckLevelStatusReq&l, const CheckLevelStatusReq&r)
    {
        return l.strDataKey == r.strDataKey && l.iOldLevel == r.iOldLevel;
    }
    inline bool operator!=(const CheckLevelStatusReq&l, const CheckLevelStatusReq&r)
    {
        return !(l == r);
    }

    struct CheckLevelStatusRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.CheckLevelStatusRsp";
        }
        static string MD5()
        {
            return "4aee61b2896512a7a6fe82d7086c5691";
        }
        CheckLevelStatusRsp()
        :errCode(0),strErrMsg(""),iCurrLevel(0),level_gift_desc("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            iCurrLevel = 0;
            level_gift_desc = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecRewardList, 2);
            _os.write(iCurrLevel, 3);
            _os.write(stOldLevel, 4);
            _os.write(stNewLevel, 5);
            _os.write(level_gift_desc, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(vecRewardList, 2, false);
            _is.read(iCurrLevel, 3, false);
            _is.read(stOldLevel, 4, false);
            _is.read(stNewLevel, 5, false);
            _is.read(level_gift_desc, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecRewardList,"vecRewardList");
            _ds.display(iCurrLevel,"iCurrLevel");
            _ds.display(stOldLevel,"stOldLevel");
            _ds.display(stNewLevel,"stNewLevel");
            _ds.display(level_gift_desc,"level_gift_desc");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecRewardList, true);
            _ds.displaySimple(iCurrLevel, true);
            _ds.displaySimple(stOldLevel, true);
            _ds.displaySimple(stNewLevel, true);
            _ds.displaySimple(level_gift_desc, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<FansAdapt::RewardItem> vecRewardList;
        taf::Int32 iCurrLevel;
        FansAdapt::stBadgeLevel stOldLevel;
        FansAdapt::stBadgeLevel stNewLevel;
        std::string level_gift_desc;
    };
    inline bool operator==(const CheckLevelStatusRsp&l, const CheckLevelStatusRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.vecRewardList == r.vecRewardList && l.iCurrLevel == r.iCurrLevel && l.stOldLevel == r.stOldLevel && l.stNewLevel == r.stNewLevel && l.level_gift_desc == r.level_gift_desc;
    }
    inline bool operator!=(const CheckLevelStatusRsp&l, const CheckLevelStatusRsp&r)
    {
        return !(l == r);
    }

    struct CheckLevelGiftReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.CheckLevelGiftReq";
        }
        static string MD5()
        {
            return "31f984e248a2ed5dee72ee77eafbedd4";
        }
        CheckLevelGiftReq()
        :lVuid(0),lFtId(0),lStarId(0),isAll(0),iLevel(0)
        {
        }
        void resetDefautlt()
        {
            lVuid = 0;
            lFtId = 0;
            lStarId = 0;
            isAll = 0;
            iLevel = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lVuid, 0);
            _os.write(lFtId, 1);
            _os.write(lStarId, 2);
            _os.write(isAll, 3);
            _os.write(iLevel, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lVuid, 0, true);
            _is.read(lFtId, 1, true);
            _is.read(lStarId, 2, true);
            _is.read(isAll, 3, true);
            _is.read(iLevel, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lVuid,"lVuid");
            _ds.display(lFtId,"lFtId");
            _ds.display(lStarId,"lStarId");
            _ds.display(isAll,"isAll");
            _ds.display(iLevel,"iLevel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lVuid, true);
            _ds.displaySimple(lFtId, true);
            _ds.displaySimple(lStarId, true);
            _ds.displaySimple(isAll, true);
            _ds.displaySimple(iLevel, false);
            return _os;
        }
    public:
        taf::Int64 lVuid;
        taf::Int64 lFtId;
        taf::Int64 lStarId;
        taf::Int32 isAll;
        taf::Int32 iLevel;
    };
    inline bool operator==(const CheckLevelGiftReq&l, const CheckLevelGiftReq&r)
    {
        return l.lVuid == r.lVuid && l.lFtId == r.lFtId && l.lStarId == r.lStarId && l.isAll == r.isAll && l.iLevel == r.iLevel;
    }
    inline bool operator!=(const CheckLevelGiftReq&l, const CheckLevelGiftReq&r)
    {
        return !(l == r);
    }

    struct CheckLevelGiftRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.CheckLevelGiftRsp";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        CheckLevelGiftRsp()
        :errCode(0),strErrMsg(""),desc("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
            desc = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(desc, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(desc, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(desc,"desc");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(desc, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        std::string desc;
    };
    inline bool operator==(const CheckLevelGiftRsp&l, const CheckLevelGiftRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.desc == r.desc;
    }
    inline bool operator!=(const CheckLevelGiftRsp&l, const CheckLevelGiftRsp&r)
    {
        return !(l == r);
    }

    struct UsrDokiLevel : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.UsrDokiLevel";
        }
        static string MD5()
        {
            return "c778944fb2658960b70164afc741c736";
        }
        UsrDokiLevel()
        :lVuid(0),lFtId(0),lFansVal(0),lBadgeLevel(0),strBadgeIcon(""),strBadgeLevelTxt("")
        {
        }
        void resetDefautlt()
        {
            lVuid = 0;
            lFtId = 0;
            lFansVal = 0;
            lBadgeLevel = 0;
            strBadgeIcon = "";
            strBadgeLevelTxt = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lVuid, 0);
            _os.write(lFtId, 1);
            _os.write(lFansVal, 2);
            _os.write(lBadgeLevel, 3);
            _os.write(strBadgeIcon, 4);
            _os.write(strBadgeLevelTxt, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lVuid, 0, true);
            _is.read(lFtId, 1, true);
            _is.read(lFansVal, 2, false);
            _is.read(lBadgeLevel, 3, false);
            _is.read(strBadgeIcon, 4, false);
            _is.read(strBadgeLevelTxt, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lVuid,"lVuid");
            _ds.display(lFtId,"lFtId");
            _ds.display(lFansVal,"lFansVal");
            _ds.display(lBadgeLevel,"lBadgeLevel");
            _ds.display(strBadgeIcon,"strBadgeIcon");
            _ds.display(strBadgeLevelTxt,"strBadgeLevelTxt");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lVuid, true);
            _ds.displaySimple(lFtId, true);
            _ds.displaySimple(lFansVal, true);
            _ds.displaySimple(lBadgeLevel, true);
            _ds.displaySimple(strBadgeIcon, true);
            _ds.displaySimple(strBadgeLevelTxt, false);
            return _os;
        }
    public:
        taf::Int64 lVuid;
        taf::Int64 lFtId;
        taf::Int64 lFansVal;
        taf::Int64 lBadgeLevel;
        std::string strBadgeIcon;
        std::string strBadgeLevelTxt;
    };
    inline bool operator==(const UsrDokiLevel&l, const UsrDokiLevel&r)
    {
        return l.lVuid == r.lVuid && l.lFtId == r.lFtId && l.lFansVal == r.lFansVal && l.lBadgeLevel == r.lBadgeLevel && l.strBadgeIcon == r.strBadgeIcon && l.strBadgeLevelTxt == r.strBadgeLevelTxt;
    }
    inline bool operator!=(const UsrDokiLevel&l, const UsrDokiLevel&r)
    {
        return !(l == r);
    }

    struct BatchGetFansLevelReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.BatchGetFansLevelReq";
        }
        static string MD5()
        {
            return "fb6750dcbdc5261f346766945864f9ed";
        }
        BatchGetFansLevelReq()
        :isNeedBadeg(true)
        {
        }
        void resetDefautlt()
        {
            isNeedBadeg = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vecUsrDoki, 0);
            _os.write(isNeedBadeg, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vecUsrDoki, 0, true);
            _is.read(isNeedBadeg, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vecUsrDoki,"vecUsrDoki");
            _ds.display(isNeedBadeg,"isNeedBadeg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vecUsrDoki, true);
            _ds.displaySimple(isNeedBadeg, false);
            return _os;
        }
    public:
        vector<FansAdapt::UsrDokiLevel> vecUsrDoki;
        taf::Bool isNeedBadeg;
    };
    inline bool operator==(const BatchGetFansLevelReq&l, const BatchGetFansLevelReq&r)
    {
        return l.vecUsrDoki == r.vecUsrDoki && l.isNeedBadeg == r.isNeedBadeg;
    }
    inline bool operator!=(const BatchGetFansLevelReq&l, const BatchGetFansLevelReq&r)
    {
        return !(l == r);
    }

    struct BatchGetFansLevelRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "FansAdapt.BatchGetFansLevelRsp";
        }
        static string MD5()
        {
            return "f7ad74b8a9bc79055f9bae1a28a65ca5";
        }
        BatchGetFansLevelRsp()
        :errCode(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            errCode = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(errCode, 0);
            _os.write(strErrMsg, 1);
            _os.write(vecUsrDokiLevel, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(errCode, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(vecUsrDokiLevel, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(errCode,"errCode");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(vecUsrDokiLevel,"vecUsrDokiLevel");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(errCode, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(vecUsrDokiLevel, false);
            return _os;
        }
    public:
        taf::Int32 errCode;
        std::string strErrMsg;
        vector<FansAdapt::UsrDokiLevel> vecUsrDokiLevel;
    };
    inline bool operator==(const BatchGetFansLevelRsp&l, const BatchGetFansLevelRsp&r)
    {
        return l.errCode == r.errCode && l.strErrMsg == r.strErrMsg && l.vecUsrDokiLevel == r.vecUsrDokiLevel;
    }
    inline bool operator!=(const BatchGetFansLevelRsp&l, const BatchGetFansLevelRsp&r)
    {
        return !(l == r);
    }


}

#define FansAdapt_ExtraReportKV_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.extraReportKey,b.extraReportKey);jce_copy_struct(a.extraReportParam,b.extraReportParam);

#define FansAdapt_Action_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.url,b.url);jce_copy_struct(a.cacheType,b.cacheType);jce_copy_struct(a.preReadType,b.preReadType);jce_copy_struct(a.reportParams,b.reportParams);jce_copy_struct(a.reportKey,b.reportKey);jce_copy_struct(a.extraReportKVs,b.extraReportKVs);

#define FansAdapt_stTaskInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strBillNo,b.strBillNo);

#define FansAdapt_FansGrowthTask_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iTaskType,b.iTaskType);jce_copy_struct(a.iTaskId,b.iTaskId);jce_copy_struct(a.iRewardVCoin,b.iRewardVCoin);jce_copy_struct(a.iRewardFValue,b.iRewardFValue);jce_copy_struct(a.iWeight,b.iWeight);jce_copy_struct(a.strDesc,b.strDesc);jce_copy_struct(a.strTaskExt,b.strTaskExt);jce_copy_struct(a.iTaskCount,b.iTaskCount);jce_copy_struct(a.strImage,b.strImage);jce_copy_struct(a.iTaskDone,b.iTaskDone);jce_copy_struct(a.vecBillList,b.vecBillList);jce_copy_struct(a.strJumpKey,b.strJumpKey);jce_copy_struct(a.dwStatus,b.dwStatus);jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.iProps,b.iProps);jce_copy_struct(a.progress,b.progress);jce_copy_struct(a.time,b.time);

#define FansAdapt_FansGrowthTaskType_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iTaskType,b.iTaskType);jce_copy_struct(a.iTaskWeight,b.iTaskWeight);jce_copy_struct(a.strTaskDesc,b.strTaskDesc);

#define FansAdapt_RewardItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iRewardType,b.iRewardType);jce_copy_struct(a.iRewardId,b.iRewardId);jce_copy_struct(a.strDesc,b.strDesc);jce_copy_struct(a.strVoice,b.strVoice);jce_copy_struct(a.strVid,b.strVid);jce_copy_struct(a.iFValue,b.iFValue);jce_copy_struct(a.iVCoin,b.iVCoin);jce_copy_struct(a.strImage,b.strImage);jce_copy_struct(a.strUrl,b.strUrl);jce_copy_struct(a.strExt,b.strExt);jce_copy_struct(a.strImage_1,b.strImage_1);jce_copy_struct(a.strImage_s,b.strImage_s);

#define FansAdapt_RewardType_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iRewardType,b.iRewardType);jce_copy_struct(a.strDesc,b.strDesc);

#define FansAdapt_UserBadgeInfoReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDataKey,b.strDataKey);

#define FansAdapt_stBadgeLevel_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStarId,b.iStarId);jce_copy_struct(a.iLevelId,b.iLevelId);jce_copy_struct(a.strBadgeIcon,b.strBadgeIcon);jce_copy_struct(a.strLevelIcon_h,b.strLevelIcon_h);jce_copy_struct(a.strLevelIcon_v,b.strLevelIcon_v);jce_copy_struct(a.iFansVal,b.iFansVal);jce_copy_struct(a.strLevelName,b.strLevelName);jce_copy_struct(a.strLevelText,b.strLevelText);jce_copy_struct(a.iSortKey,b.iSortKey);jce_copy_struct(a.iRankNameId,b.iRankNameId);jce_copy_struct(a.strUrl,b.strUrl);jce_copy_struct(a.iFantuanId,b.iFantuanId);jce_copy_struct(a.strLevelIcon_450_336,b.strLevelIcon_450_336);jce_copy_struct(a.strLevelIcon_225_168,b.strLevelIcon_225_168);

#define FansAdapt_UserBadgeInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.strBadgeImage,b.strBadgeImage);jce_copy_struct(a.strBadgeDesc,b.strBadgeDesc);jce_copy_struct(a.iUsrFValue,b.iUsrFValue);jce_copy_struct(a.iDaysFollowed,b.iDaysFollowed);jce_copy_struct(a.iDaysSigned,b.iDaysSigned);jce_copy_struct(a.iDayFValue,b.iDayFValue);jce_copy_struct(a.iDayVCoin,b.iDayVCoin);jce_copy_struct(a.iTotalFValue,b.iTotalFValue);jce_copy_struct(a.iTotalVCoin,b.iTotalVCoin);jce_copy_struct(a.iSpecialRewards,b.iSpecialRewards);jce_copy_struct(a.strFansNick,b.strFansNick);jce_copy_struct(a.strStarName,b.strStarName);jce_copy_struct(a.strStarImage,b.strStarImage);jce_copy_struct(a.stCurrLevel,b.stCurrLevel);jce_copy_struct(a.stNextLevel,b.stNextLevel);jce_copy_struct(a.dwTotalProps,b.dwTotalProps);jce_copy_struct(a.iFollowStatus,b.iFollowStatus);

#define FansAdapt_UserRewardReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDataKey,b.strDataKey);jce_copy_struct(a.iType,b.iType);

#define FansAdapt_UserRewardRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecRewardList,b.vecRewardList);jce_copy_struct(a.vecRewardType,b.vecRewardType);

#define FansAdapt_UserTaskListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDataKey,b.strDataKey);jce_copy_struct(a.iType,b.iType);

#define FansAdapt_UserTaskListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecTaskList,b.vecTaskList);jce_copy_struct(a.vecTaskType,b.vecTaskType);

#define FansAdapt_BadgeSubLevel_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iFValue,b.iFValue);jce_copy_struct(a.strDesc,b.strDesc);jce_copy_struct(a.iSubLevelId,b.iSubLevelId);jce_copy_struct(a.strImage,b.strImage);

#define FansAdapt_BadgeLevel_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strImage,b.strImage);jce_copy_struct(a.strLevelName,b.strLevelName);jce_copy_struct(a.strPrivilegeDesc,b.strPrivilegeDesc);jce_copy_struct(a.vecSubLevelList,b.vecSubLevelList);jce_copy_struct(a.iLevelId,b.iLevelId);

#define FansAdapt_BadgeLevelIntroReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDataKey,b.strDataKey);

#define FansAdapt_BadgeLevelIntroRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecBadgeLevels,b.vecBadgeLevels);

#define FansAdapt_stWelfare_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwGiftId,b.dwGiftId);

#define FansAdapt_stSignReward_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwFansVal,b.dwFansVal);jce_copy_struct(a.dwVCoin,b.dwVCoin);jce_copy_struct(a.vecWelfare,b.vecWelfare);

#define FansAdapt_SignRewardListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDataKey,b.strDataKey);

#define FansAdapt_SignRewardListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.strImage,b.strImage);jce_copy_struct(a.iFValue,b.iFValue);jce_copy_struct(a.iSpecailRewards,b.iSpecailRewards);jce_copy_struct(a.iSignDay,b.iSignDay);jce_copy_struct(a.vecSignRewardList,b.vecSignRewardList);

#define FansAdapt_MyFValueFlowReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDataKey,b.strDataKey);jce_copy_struct(a.strRefreshContext,b.strRefreshContext);

#define FansAdapt_ConsumeItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDate,b.strDate);jce_copy_struct(a.consumeEvent,b.consumeEvent);jce_copy_struct(a.consumeDesc,b.consumeDesc);jce_copy_struct(a.ctx,b.ctx);

#define FansAdapt_MyFValueFlowRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFValueFlowList,b.vecFValueFlowList);jce_copy_struct(a.strPageContext,b.strPageContext);jce_copy_struct(a.iHasNextPage,b.iHasNextPage);

#define FansAdapt_RewardItemInfoReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDataKey,b.strDataKey);jce_copy_struct(a.iRewardId,b.iRewardId);

#define FansAdapt_RewardItemInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stRewardInfo,b.stRewardInfo);

#define FansAdapt_PrivilegeItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.id,b.id);jce_copy_struct(a.desc,b.desc);jce_copy_struct(a.image,b.image);jce_copy_struct(a.image_1,b.image_1);jce_copy_struct(a.image_s,b.image_s);

#define FansAdapt_LevelPrivilegeInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.fans_level,b.fans_level);jce_copy_struct(a.all_privilege_id,b.all_privilege_id);jce_copy_struct(a.have_privilege_id,b.have_privilege_id);

#define FansAdapt_AllPrivilegeList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.item_list,b.item_list);jce_copy_struct(a.level_privilege_info,b.level_privilege_info);

#define FansAdapt_UserSpecialRewardReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDataKey,b.strDataKey);

#define FansAdapt_UserSpecialRewardRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecSpecialRewardList,b.vecSpecialRewardList);jce_copy_struct(a.all_privilege_list,b.all_privilege_list);

#define FansAdapt_stUserRewardBrief_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwFansVal,b.ddwFansVal);jce_copy_struct(a.ddwVCoin,b.ddwVCoin);jce_copy_struct(a.vecWelfare,b.vecWelfare);jce_copy_struct(a.ddwProps,b.ddwProps);jce_copy_struct(a.iBonusTimes,b.iBonusTimes);

#define FansAdapt_RecvTaskRewardReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDataKey,b.strDataKey);jce_copy_struct(a.iTaskId,b.iTaskId);jce_copy_struct(a.vecBillList,b.vecBillList);

#define FansAdapt_RecvTaskRewardRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stBeforeReward,b.stBeforeReward);jce_copy_struct(a.stAfterReward,b.stAfterReward);

#define FansAdapt_UsrSignInReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDataKey,b.strDataKey);

#define FansAdapt_UsrSignInRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.iIntoNewLevel,b.iIntoNewLevel);jce_copy_struct(a.stBeforeReward,b.stBeforeReward);jce_copy_struct(a.stAfterReward,b.stAfterReward);jce_copy_struct(a.vecRewardList,b.vecRewardList);jce_copy_struct(a.vecSignConf,b.vecSignConf);jce_copy_struct(a.iSignDay,b.iSignDay);jce_copy_struct(a.iOldLevel,b.iOldLevel);jce_copy_struct(a.iCurrLevel,b.iCurrLevel);jce_copy_struct(a.iReSignLimit,b.iReSignLimit);jce_copy_struct(a.iMissResign,b.iMissResign);jce_copy_struct(a.iCurLevelResignNum,b.iCurLevelResignNum);jce_copy_struct(a.iMouth,b.iMouth);

#define FansAdapt_DoFansTaskReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwStarId,b.ddwStarId);jce_copy_struct(a.strScene,b.strScene);jce_copy_struct(a.strTaskKey,b.strTaskKey);

#define FansAdapt_DoFansTaskRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);

#define FansAdapt_GetBadgeLevelInfoReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lVuid,b.lVuid);jce_copy_struct(a.dwFlag,b.dwFlag);jce_copy_struct(a.vecStarId,b.vecStarId);

#define FansAdapt_GetBadgeLevelInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecUsrBadge,b.vecUsrBadge);

#define FansAdapt_stFansRankInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iFansVal,b.iFansVal);jce_copy_struct(a.strNick,b.strNick);jce_copy_struct(a.strFansIcon,b.strFansIcon);jce_copy_struct(a.strBadgeIcon,b.strBadgeIcon);jce_copy_struct(a.strBadgeLevelTxt,b.strBadgeLevelTxt);jce_copy_struct(a.stAction,b.stAction);

#define FansAdapt_GetFansRankReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.ddwStarId,b.ddwStarId);jce_copy_struct(a.pageContext,b.pageContext);

#define FansAdapt_GetFansRankRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecFansRank,b.vecFansRank);jce_copy_struct(a.pageContext,b.pageContext);jce_copy_struct(a.hasNextPage,b.hasNextPage);

#define FansAdapt_CheckLevelStatusReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strDataKey,b.strDataKey);jce_copy_struct(a.iOldLevel,b.iOldLevel);

#define FansAdapt_CheckLevelStatusRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecRewardList,b.vecRewardList);jce_copy_struct(a.iCurrLevel,b.iCurrLevel);jce_copy_struct(a.stOldLevel,b.stOldLevel);jce_copy_struct(a.stNewLevel,b.stNewLevel);jce_copy_struct(a.level_gift_desc,b.level_gift_desc);

#define FansAdapt_CheckLevelGiftReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lVuid,b.lVuid);jce_copy_struct(a.lFtId,b.lFtId);jce_copy_struct(a.lStarId,b.lStarId);jce_copy_struct(a.isAll,b.isAll);jce_copy_struct(a.iLevel,b.iLevel);

#define FansAdapt_CheckLevelGiftRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.desc,b.desc);

#define FansAdapt_UsrDokiLevel_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lVuid,b.lVuid);jce_copy_struct(a.lFtId,b.lFtId);jce_copy_struct(a.lFansVal,b.lFansVal);jce_copy_struct(a.lBadgeLevel,b.lBadgeLevel);jce_copy_struct(a.strBadgeIcon,b.strBadgeIcon);jce_copy_struct(a.strBadgeLevelTxt,b.strBadgeLevelTxt);

#define FansAdapt_BatchGetFansLevelReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vecUsrDoki,b.vecUsrDoki);jce_copy_struct(a.isNeedBadeg,b.isNeedBadeg);

#define FansAdapt_BatchGetFansLevelRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.errCode,b.errCode);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.vecUsrDokiLevel,b.vecUsrDokiLevel);



#endif
