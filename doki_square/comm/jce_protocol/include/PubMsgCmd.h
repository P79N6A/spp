// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `PubMsgCmd.jce'
// **********************************************************************

#ifndef __PUBMSGCMD_H_
#define __PUBMSGCMD_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "MsgDic.h"


namespace videocircle
{
    enum PubCmdDefine
    {
        SUPPORT_CMD_ADD_MSG = 57601,
        SUPPORT_CMD_LIKE_MSG = 57603,
        SUPPORT_CMD_COMMENT_MSG = 57604,
        SUPPORT_CMD_DELETE_MSG = 57605,
        SUPPORT_CMD_BACKOPERATION_MSG = 59580,
        ADA_SUPPORT_CMD_ADD_MSG = 59613,
        ADA_SUPPORT_CMD_LIKE_MSG = 59615,
        ADA_SUPPORT_CMD_COMMENT_MSG = 59614,
        ADA_SUPPORT_CMD_DELETE_MSG = 59616,
        ADA_SUPPORT_CMD_ADD_OPERATOR_MSG = 60063,
        ADA_SUPPORT_CMD_MOD_MSG = 61629,
        ADA_SUPPORT_CMD_IMPORT_MSG = 61630,
        MT_FT_CMD_ADD_MSG = 60393,
        MT_FT_CMD_LIKE_MSG = 60395,
        MT_FT_CMD_COMMENT_MSG = 60394,
        MT_FT_CMD_DELETE_MSG = 60396,
        MT_FT_COMMID_FEEDID = 62305,
    };
    inline string etos(const PubCmdDefine & e)
    {
        switch(e)
        {
            case SUPPORT_CMD_ADD_MSG: return "SUPPORT_CMD_ADD_MSG";
            case SUPPORT_CMD_LIKE_MSG: return "SUPPORT_CMD_LIKE_MSG";
            case SUPPORT_CMD_COMMENT_MSG: return "SUPPORT_CMD_COMMENT_MSG";
            case SUPPORT_CMD_DELETE_MSG: return "SUPPORT_CMD_DELETE_MSG";
            case SUPPORT_CMD_BACKOPERATION_MSG: return "SUPPORT_CMD_BACKOPERATION_MSG";
            case ADA_SUPPORT_CMD_ADD_MSG: return "ADA_SUPPORT_CMD_ADD_MSG";
            case ADA_SUPPORT_CMD_LIKE_MSG: return "ADA_SUPPORT_CMD_LIKE_MSG";
            case ADA_SUPPORT_CMD_COMMENT_MSG: return "ADA_SUPPORT_CMD_COMMENT_MSG";
            case ADA_SUPPORT_CMD_DELETE_MSG: return "ADA_SUPPORT_CMD_DELETE_MSG";
            case ADA_SUPPORT_CMD_ADD_OPERATOR_MSG: return "ADA_SUPPORT_CMD_ADD_OPERATOR_MSG";
            case ADA_SUPPORT_CMD_MOD_MSG: return "ADA_SUPPORT_CMD_MOD_MSG";
            case ADA_SUPPORT_CMD_IMPORT_MSG: return "ADA_SUPPORT_CMD_IMPORT_MSG";
            case MT_FT_CMD_ADD_MSG: return "MT_FT_CMD_ADD_MSG";
            case MT_FT_CMD_LIKE_MSG: return "MT_FT_CMD_LIKE_MSG";
            case MT_FT_CMD_COMMENT_MSG: return "MT_FT_CMD_COMMENT_MSG";
            case MT_FT_CMD_DELETE_MSG: return "MT_FT_CMD_DELETE_MSG";
            case MT_FT_COMMID_FEEDID: return "MT_FT_COMMID_FEEDID";
            default: return "";
        }
    }
    inline int stoe(const string & s, PubCmdDefine & e)
    {
        if(s == "SUPPORT_CMD_ADD_MSG")  { e=SUPPORT_CMD_ADD_MSG; return 0;}
        if(s == "SUPPORT_CMD_LIKE_MSG")  { e=SUPPORT_CMD_LIKE_MSG; return 0;}
        if(s == "SUPPORT_CMD_COMMENT_MSG")  { e=SUPPORT_CMD_COMMENT_MSG; return 0;}
        if(s == "SUPPORT_CMD_DELETE_MSG")  { e=SUPPORT_CMD_DELETE_MSG; return 0;}
        if(s == "SUPPORT_CMD_BACKOPERATION_MSG")  { e=SUPPORT_CMD_BACKOPERATION_MSG; return 0;}
        if(s == "ADA_SUPPORT_CMD_ADD_MSG")  { e=ADA_SUPPORT_CMD_ADD_MSG; return 0;}
        if(s == "ADA_SUPPORT_CMD_LIKE_MSG")  { e=ADA_SUPPORT_CMD_LIKE_MSG; return 0;}
        if(s == "ADA_SUPPORT_CMD_COMMENT_MSG")  { e=ADA_SUPPORT_CMD_COMMENT_MSG; return 0;}
        if(s == "ADA_SUPPORT_CMD_DELETE_MSG")  { e=ADA_SUPPORT_CMD_DELETE_MSG; return 0;}
        if(s == "ADA_SUPPORT_CMD_ADD_OPERATOR_MSG")  { e=ADA_SUPPORT_CMD_ADD_OPERATOR_MSG; return 0;}
        if(s == "ADA_SUPPORT_CMD_MOD_MSG")  { e=ADA_SUPPORT_CMD_MOD_MSG; return 0;}
        if(s == "ADA_SUPPORT_CMD_IMPORT_MSG")  { e=ADA_SUPPORT_CMD_IMPORT_MSG; return 0;}
        if(s == "MT_FT_CMD_ADD_MSG")  { e=MT_FT_CMD_ADD_MSG; return 0;}
        if(s == "MT_FT_CMD_LIKE_MSG")  { e=MT_FT_CMD_LIKE_MSG; return 0;}
        if(s == "MT_FT_CMD_COMMENT_MSG")  { e=MT_FT_CMD_COMMENT_MSG; return 0;}
        if(s == "MT_FT_CMD_DELETE_MSG")  { e=MT_FT_CMD_DELETE_MSG; return 0;}
        if(s == "MT_FT_COMMID_FEEDID")  { e=MT_FT_COMMID_FEEDID; return 0;}

        return -1;
    }

    enum OutFromDefine
    {
        OUT_FROM_DEFAULT = 0,
        OUT_FROM_CIRCLE = 1,
        OUT_FROM_FANTUAN = 2,
        OUT_FROM_FANTUAN_AND_CIRCLE = 3,
        OUT_FROM_DANMU = 8,
        OUT_FROM_OPERATION = 100,
    };
    inline string etos(const OutFromDefine & e)
    {
        switch(e)
        {
            case OUT_FROM_DEFAULT: return "OUT_FROM_DEFAULT";
            case OUT_FROM_CIRCLE: return "OUT_FROM_CIRCLE";
            case OUT_FROM_FANTUAN: return "OUT_FROM_FANTUAN";
            case OUT_FROM_FANTUAN_AND_CIRCLE: return "OUT_FROM_FANTUAN_AND_CIRCLE";
            case OUT_FROM_DANMU: return "OUT_FROM_DANMU";
            case OUT_FROM_OPERATION: return "OUT_FROM_OPERATION";
            default: return "";
        }
    }
    inline int stoe(const string & s, OutFromDefine & e)
    {
        if(s == "OUT_FROM_DEFAULT")  { e=OUT_FROM_DEFAULT; return 0;}
        if(s == "OUT_FROM_CIRCLE")  { e=OUT_FROM_CIRCLE; return 0;}
        if(s == "OUT_FROM_FANTUAN")  { e=OUT_FROM_FANTUAN; return 0;}
        if(s == "OUT_FROM_FANTUAN_AND_CIRCLE")  { e=OUT_FROM_FANTUAN_AND_CIRCLE; return 0;}
        if(s == "OUT_FROM_DANMU")  { e=OUT_FROM_DANMU; return 0;}
        if(s == "OUT_FROM_OPERATION")  { e=OUT_FROM_OPERATION; return 0;}

        return -1;
    }

    struct PubMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.PubMsgReq";
        }
        static string MD5()
        {
            return "941d283acd61730f84b916d39e626290";
        }
        PubMsgReq()
        :dwUserID(0),strContent(""),report("")
        {
        }
        void resetDefautlt()
        {
            dwUserID = 0;
            strContent = "";
            report = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwUserID, 0);
            _os.write(strContent, 1);
            _os.write(stImgUrls, 2);
            _os.write(stVidInfo, 3);
            _os.write(stAppExtInfo, 4);
            _os.write(report, 5);
            _os.write(stVoiceInfo, 6);
            _os.write(stUserInfo, 7);
            _os.write(stDmInfo, 8);
            _os.write(stSnsInfo, 9);
            _os.write(stVoteInfo, 10);
            _os.write(vecRelateFanInfo, 11);
            _os.write(stFtExtInfo, 12);
            _os.write(stOMInfo, 13);
            _os.write(vecTopicInfo, 14);
            _os.write(stMgrInfo, 15);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwUserID, 0, true);
            _is.read(strContent, 1, true);
            _is.read(stImgUrls, 2, false);
            _is.read(stVidInfo, 3, true);
            _is.read(stAppExtInfo, 4, false);
            _is.read(report, 5, false);
            _is.read(stVoiceInfo, 6, false);
            _is.read(stUserInfo, 7, false);
            _is.read(stDmInfo, 8, false);
            _is.read(stSnsInfo, 9, false);
            _is.read(stVoteInfo, 10, false);
            _is.read(vecRelateFanInfo, 11, false);
            _is.read(stFtExtInfo, 12, false);
            _is.read(stOMInfo, 13, false);
            _is.read(vecTopicInfo, 14, false);
            _is.read(stMgrInfo, 15, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwUserID,"dwUserID");
            _ds.display(strContent,"strContent");
            _ds.display(stImgUrls,"stImgUrls");
            _ds.display(stVidInfo,"stVidInfo");
            _ds.display(stAppExtInfo,"stAppExtInfo");
            _ds.display(report,"report");
            _ds.display(stVoiceInfo,"stVoiceInfo");
            _ds.display(stUserInfo,"stUserInfo");
            _ds.display(stDmInfo,"stDmInfo");
            _ds.display(stSnsInfo,"stSnsInfo");
            _ds.display(stVoteInfo,"stVoteInfo");
            _ds.display(vecRelateFanInfo,"vecRelateFanInfo");
            _ds.display(stFtExtInfo,"stFtExtInfo");
            _ds.display(stOMInfo,"stOMInfo");
            _ds.display(vecTopicInfo,"vecTopicInfo");
            _ds.display(stMgrInfo,"stMgrInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwUserID, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(stImgUrls, true);
            _ds.displaySimple(stVidInfo, true);
            _ds.displaySimple(stAppExtInfo, true);
            _ds.displaySimple(report, true);
            _ds.displaySimple(stVoiceInfo, true);
            _ds.displaySimple(stUserInfo, true);
            _ds.displaySimple(stDmInfo, true);
            _ds.displaySimple(stSnsInfo, true);
            _ds.displaySimple(stVoteInfo, true);
            _ds.displaySimple(vecRelateFanInfo, true);
            _ds.displaySimple(stFtExtInfo, true);
            _ds.displaySimple(stOMInfo, true);
            _ds.displaySimple(vecTopicInfo, true);
            _ds.displaySimple(stMgrInfo, false);
            return _os;
        }
    public:
        taf::Int64 dwUserID;
        std::string strContent;
        vector<videocircle::PlayImgUrl> stImgUrls;
        videocircle::VidInfo stVidInfo;
        videocircle::AppExtInfo stAppExtInfo;
        std::string report;
        videocircle::VoiceInfo stVoiceInfo;
        videocircle::UserInfo stUserInfo;
        videocircle::DanmuInfo stDmInfo;
        videocircle::SnsInfo stSnsInfo;
        videocircle::VoteInfo stVoteInfo;
        vector<videocircle::FanInfo> vecRelateFanInfo;
        videocircle::FtExtInfo stFtExtInfo;
        videocircle::OMInfo stOMInfo;
        vector<videocircle::TopicInfo> vecTopicInfo;
        videocircle::MgrInfo stMgrInfo;
    };
    inline bool operator==(const PubMsgReq&l, const PubMsgReq&r)
    {
        return l.dwUserID == r.dwUserID && l.strContent == r.strContent && l.stImgUrls == r.stImgUrls && l.stVidInfo == r.stVidInfo && l.stAppExtInfo == r.stAppExtInfo && l.report == r.report && l.stVoiceInfo == r.stVoiceInfo && l.stUserInfo == r.stUserInfo && l.stDmInfo == r.stDmInfo && l.stSnsInfo == r.stSnsInfo && l.stVoteInfo == r.stVoteInfo && l.vecRelateFanInfo == r.vecRelateFanInfo && l.stFtExtInfo == r.stFtExtInfo && l.stOMInfo == r.stOMInfo && l.vecTopicInfo == r.vecTopicInfo && l.stMgrInfo == r.stMgrInfo;
    }
    inline bool operator!=(const PubMsgReq&l, const PubMsgReq&r)
    {
        return !(l == r);
    }

    struct PubMsgRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.PubMsgRsp";
        }
        static string MD5()
        {
            return "0524ab3df2cc4ec56d33931cbe05154e";
        }
        PubMsgRsp()
        :result(0),strErrMsg(""),strContent("")
        {
        }
        void resetDefautlt()
        {
            result = 0;
            strErrMsg = "";
            strContent = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(result, 0);
            _os.write(strErrMsg, 1);
            _os.write(stBasicInfo1, 2);
            _os.write(strContent, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(result, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(stBasicInfo1, 2, false);
            _is.read(strContent, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(result,"result");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stBasicInfo1,"stBasicInfo1");
            _ds.display(strContent,"strContent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(result, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stBasicInfo1, true);
            _ds.displaySimple(strContent, false);
            return _os;
        }
    public:
        taf::UInt8 result;
        std::string strErrMsg;
        videocircle::BasicInfo1 stBasicInfo1;
        std::string strContent;
    };
    inline bool operator==(const PubMsgRsp&l, const PubMsgRsp&r)
    {
        return l.result == r.result && l.strErrMsg == r.strErrMsg && l.stBasicInfo1 == r.stBasicInfo1 && l.strContent == r.strContent;
    }
    inline bool operator!=(const PubMsgRsp&l, const PubMsgRsp&r)
    {
        return !(l == r);
    }

    struct PubLikeReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.PubLikeReq";
        }
        static string MD5()
        {
            return "924ab631687a63d1685f1d20faba5101";
        }
        PubLikeReq()
        :dwUserID(0),strContent("")
        {
        }
        void resetDefautlt()
        {
            dwUserID = 0;
            strContent = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwUserID, 0);
            _os.write(strContent, 1);
            _os.write(stImgUrls, 2);
            _os.write(stVidInfo, 3);
            _os.write(stAppExtInfo, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwUserID, 0, true);
            _is.read(strContent, 1, true);
            _is.read(stImgUrls, 2, false);
            _is.read(stVidInfo, 3, true);
            _is.read(stAppExtInfo, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwUserID,"dwUserID");
            _ds.display(strContent,"strContent");
            _ds.display(stImgUrls,"stImgUrls");
            _ds.display(stVidInfo,"stVidInfo");
            _ds.display(stAppExtInfo,"stAppExtInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwUserID, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(stImgUrls, true);
            _ds.displaySimple(stVidInfo, true);
            _ds.displaySimple(stAppExtInfo, false);
            return _os;
        }
    public:
        taf::Int64 dwUserID;
        std::string strContent;
        vector<videocircle::PlayImgUrl> stImgUrls;
        videocircle::VidInfo stVidInfo;
        videocircle::AppExtInfo stAppExtInfo;
    };
    inline bool operator==(const PubLikeReq&l, const PubLikeReq&r)
    {
        return l.dwUserID == r.dwUserID && l.strContent == r.strContent && l.stImgUrls == r.stImgUrls && l.stVidInfo == r.stVidInfo && l.stAppExtInfo == r.stAppExtInfo;
    }
    inline bool operator!=(const PubLikeReq&l, const PubLikeReq&r)
    {
        return !(l == r);
    }

    struct PubLikeRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.PubLikeRsp";
        }
        static string MD5()
        {
            return "0524ab3df2cc4ec56d33931cbe05154e";
        }
        PubLikeRsp()
        :result(0),strErrMsg(""),strContent("")
        {
        }
        void resetDefautlt()
        {
            result = 0;
            strErrMsg = "";
            strContent = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(result, 0);
            _os.write(strErrMsg, 1);
            _os.write(stBasicInfo1, 2);
            _os.write(strContent, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(result, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(stBasicInfo1, 2, false);
            _is.read(strContent, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(result,"result");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stBasicInfo1,"stBasicInfo1");
            _ds.display(strContent,"strContent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(result, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stBasicInfo1, true);
            _ds.displaySimple(strContent, false);
            return _os;
        }
    public:
        taf::UInt8 result;
        std::string strErrMsg;
        videocircle::BasicInfo1 stBasicInfo1;
        std::string strContent;
    };
    inline bool operator==(const PubLikeRsp&l, const PubLikeRsp&r)
    {
        return l.result == r.result && l.strErrMsg == r.strErrMsg && l.stBasicInfo1 == r.stBasicInfo1 && l.strContent == r.strContent;
    }
    inline bool operator!=(const PubLikeRsp&l, const PubLikeRsp&r)
    {
        return !(l == r);
    }

    struct MsgCommentReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.MsgCommentReq";
        }
        static string MD5()
        {
            return "084fcce94ea54797315936466ca23a6a";
        }
        MsgCommentReq()
        :remsgid(0),content(""),report("")
        {
        }
        void resetDefautlt()
        {
            remsgid = 0;
            content = "";
            report = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(remsgid, 0);
            _os.write(content, 1);
            _os.write(stAppExtInfo, 2);
            _os.write(report, 3);
            _os.write(stVoiceInfo, 4);
            _os.write(stUserInfo, 5);
            _os.write(stDmInfo, 6);
            _os.write(stImgUrls, 100);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(remsgid, 0, true);
            _is.read(content, 1, true);
            _is.read(stAppExtInfo, 2, false);
            _is.read(report, 3, false);
            _is.read(stVoiceInfo, 4, false);
            _is.read(stUserInfo, 5, false);
            _is.read(stDmInfo, 6, false);
            _is.read(stImgUrls, 100, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(remsgid,"remsgid");
            _ds.display(content,"content");
            _ds.display(stAppExtInfo,"stAppExtInfo");
            _ds.display(report,"report");
            _ds.display(stVoiceInfo,"stVoiceInfo");
            _ds.display(stUserInfo,"stUserInfo");
            _ds.display(stDmInfo,"stDmInfo");
            _ds.display(stImgUrls,"stImgUrls");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(remsgid, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(stAppExtInfo, true);
            _ds.displaySimple(report, true);
            _ds.displaySimple(stVoiceInfo, true);
            _ds.displaySimple(stUserInfo, true);
            _ds.displaySimple(stDmInfo, true);
            _ds.displaySimple(stImgUrls, false);
            return _os;
        }
    public:
        taf::Int64 remsgid;
        std::string content;
        videocircle::AppExtInfo stAppExtInfo;
        std::string report;
        videocircle::VoiceInfo stVoiceInfo;
        videocircle::UserInfo stUserInfo;
        videocircle::DanmuInfo stDmInfo;
        vector<videocircle::PlayImgUrl> stImgUrls;
    };
    inline bool operator==(const MsgCommentReq&l, const MsgCommentReq&r)
    {
        return l.remsgid == r.remsgid && l.content == r.content && l.stAppExtInfo == r.stAppExtInfo && l.report == r.report && l.stVoiceInfo == r.stVoiceInfo && l.stUserInfo == r.stUserInfo && l.stDmInfo == r.stDmInfo && l.stImgUrls == r.stImgUrls;
    }
    inline bool operator!=(const MsgCommentReq&l, const MsgCommentReq&r)
    {
        return !(l == r);
    }

    struct MsgCommentRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.MsgCommentRsp";
        }
        static string MD5()
        {
            return "0524ab3df2cc4ec56d33931cbe05154e";
        }
        MsgCommentRsp()
        :result(0),strErrMsg(""),strContent("")
        {
        }
        void resetDefautlt()
        {
            result = 0;
            strErrMsg = "";
            strContent = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(result, 0);
            _os.write(strErrMsg, 1);
            _os.write(stBasicInfo1, 2);
            _os.write(strContent, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(result, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(stBasicInfo1, 2, false);
            _is.read(strContent, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(result,"result");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stBasicInfo1,"stBasicInfo1");
            _ds.display(strContent,"strContent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(result, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stBasicInfo1, true);
            _ds.displaySimple(strContent, false);
            return _os;
        }
    public:
        taf::UInt8 result;
        std::string strErrMsg;
        videocircle::BasicInfo1 stBasicInfo1;
        std::string strContent;
    };
    inline bool operator==(const MsgCommentRsp&l, const MsgCommentRsp&r)
    {
        return l.result == r.result && l.strErrMsg == r.strErrMsg && l.stBasicInfo1 == r.stBasicInfo1 && l.strContent == r.strContent;
    }
    inline bool operator!=(const MsgCommentRsp&l, const MsgCommentRsp&r)
    {
        return !(l == r);
    }

    struct MsgLikeReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.MsgLikeReq";
        }
        static string MD5()
        {
            return "0f44496f00e3d66284eb1600f255fd1c";
        }
        MsgLikeReq()
        :remsgid(0),attitudetype(0),goodvalue(0),report("")
        {
        }
        void resetDefautlt()
        {
            remsgid = 0;
            attitudetype = 0;
            goodvalue = 0;
            report = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(remsgid, 0);
            _os.write(attitudetype, 1);
            _os.write(goodvalue, 2);
            _os.write(report, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(remsgid, 0, true);
            _is.read(attitudetype, 1, true);
            _is.read(goodvalue, 2, true);
            _is.read(report, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(remsgid,"remsgid");
            _ds.display(attitudetype,"attitudetype");
            _ds.display(goodvalue,"goodvalue");
            _ds.display(report,"report");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(remsgid, true);
            _ds.displaySimple(attitudetype, true);
            _ds.displaySimple(goodvalue, true);
            _ds.displaySimple(report, false);
            return _os;
        }
    public:
        taf::Int64 remsgid;
        taf::UInt8 attitudetype;
        taf::UInt8 goodvalue;
        std::string report;
    };
    inline bool operator==(const MsgLikeReq&l, const MsgLikeReq&r)
    {
        return l.remsgid == r.remsgid && l.attitudetype == r.attitudetype && l.goodvalue == r.goodvalue && l.report == r.report;
    }
    inline bool operator!=(const MsgLikeReq&l, const MsgLikeReq&r)
    {
        return !(l == r);
    }

    struct MsgLikeRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.MsgLikeRsp";
        }
        static string MD5()
        {
            return "f600b928684636e0569141e8fdd91a83";
        }
        MsgLikeRsp()
        :result(0),strErrMsg("")
        {
        }
        void resetDefautlt()
        {
            result = 0;
            strErrMsg = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(result, 0);
            _os.write(strErrMsg, 1);
            _os.write(stBasicInfo1, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(result, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(stBasicInfo1, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(result,"result");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stBasicInfo1,"stBasicInfo1");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(result, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stBasicInfo1, false);
            return _os;
        }
    public:
        taf::UInt8 result;
        std::string strErrMsg;
        videocircle::BasicInfo1 stBasicInfo1;
    };
    inline bool operator==(const MsgLikeRsp&l, const MsgLikeRsp&r)
    {
        return l.result == r.result && l.strErrMsg == r.strErrMsg && l.stBasicInfo1 == r.stBasicInfo1;
    }
    inline bool operator!=(const MsgLikeRsp&l, const MsgLikeRsp&r)
    {
        return !(l == r);
    }

    struct MsgModifyReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.MsgModifyReq";
        }
        static string MD5()
        {
            return "2f6844a34e16bcfa031a208784fd860b";
        }
        MsgModifyReq()
        :modifymsgid(0),vuserid(0),strExtInfo(""),strContent(""),timestamp(0),strTitle(""),modifyflag(0)
        {
        }
        void resetDefautlt()
        {
            modifymsgid = 0;
            vuserid = 0;
            strExtInfo = "";
            strContent = "";
            timestamp = 0;
            strTitle = "";
            modifyflag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(modifymsgid, 0);
            _os.write(vuserid, 1);
            _os.write(strExtInfo, 2);
            _os.write(strContent, 3);
            _os.write(stImgUrls, 4);
            _os.write(timestamp, 5);
            _os.write(strTitle, 6);
            _os.write(modifyflag, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(modifymsgid, 0, true);
            _is.read(vuserid, 1, true);
            _is.read(strExtInfo, 2, false);
            _is.read(strContent, 3, false);
            _is.read(stImgUrls, 4, false);
            _is.read(timestamp, 5, false);
            _is.read(strTitle, 6, false);
            _is.read(modifyflag, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(modifymsgid,"modifymsgid");
            _ds.display(vuserid,"vuserid");
            _ds.display(strExtInfo,"strExtInfo");
            _ds.display(strContent,"strContent");
            _ds.display(stImgUrls,"stImgUrls");
            _ds.display(timestamp,"timestamp");
            _ds.display(strTitle,"strTitle");
            _ds.display(modifyflag,"modifyflag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(modifymsgid, true);
            _ds.displaySimple(vuserid, true);
            _ds.displaySimple(strExtInfo, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(stImgUrls, true);
            _ds.displaySimple(timestamp, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(modifyflag, false);
            return _os;
        }
    public:
        taf::Int64 modifymsgid;
        taf::Int64 vuserid;
        std::string strExtInfo;
        std::string strContent;
        vector<videocircle::PlayImgUrl> stImgUrls;
        taf::Int64 timestamp;
        std::string strTitle;
        taf::Int32 modifyflag;
    };
    inline bool operator==(const MsgModifyReq&l, const MsgModifyReq&r)
    {
        return l.modifymsgid == r.modifymsgid && l.vuserid == r.vuserid && l.strExtInfo == r.strExtInfo && l.strContent == r.strContent && l.stImgUrls == r.stImgUrls && l.timestamp == r.timestamp && l.strTitle == r.strTitle && l.modifyflag == r.modifyflag;
    }
    inline bool operator!=(const MsgModifyReq&l, const MsgModifyReq&r)
    {
        return !(l == r);
    }

    struct MsgModifyRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.MsgModifyRsp";
        }
        static string MD5()
        {
            return "0524ab3df2cc4ec56d33931cbe05154e";
        }
        MsgModifyRsp()
        :result(0),strErrMsg(""),strExtInfo("")
        {
        }
        void resetDefautlt()
        {
            result = 0;
            strErrMsg = "";
            strExtInfo = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(result, 0);
            _os.write(strErrMsg, 1);
            _os.write(stBasicInfo1, 2);
            _os.write(strExtInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(result, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(stBasicInfo1, 2, false);
            _is.read(strExtInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(result,"result");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stBasicInfo1,"stBasicInfo1");
            _ds.display(strExtInfo,"strExtInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(result, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stBasicInfo1, true);
            _ds.displaySimple(strExtInfo, false);
            return _os;
        }
    public:
        taf::UInt8 result;
        std::string strErrMsg;
        videocircle::BasicInfo1 stBasicInfo1;
        std::string strExtInfo;
    };
    inline bool operator==(const MsgModifyRsp&l, const MsgModifyRsp&r)
    {
        return l.result == r.result && l.strErrMsg == r.strErrMsg && l.stBasicInfo1 == r.stBasicInfo1 && l.strExtInfo == r.strExtInfo;
    }
    inline bool operator!=(const MsgModifyRsp&l, const MsgModifyRsp&r)
    {
        return !(l == r);
    }

    struct MsgImportReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.MsgImportReq";
        }
        static string MD5()
        {
            return "2f6844a34e16bcfa031a208784fd860b";
        }
        MsgImportReq()
        :importmsgid(0),vuserid(0),strExtInfo(""),strContent(""),timestamp(0),strTitle(""),modifyflag(0)
        {
        }
        void resetDefautlt()
        {
            importmsgid = 0;
            vuserid = 0;
            strExtInfo = "";
            strContent = "";
            timestamp = 0;
            strTitle = "";
            modifyflag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(importmsgid, 0);
            _os.write(vuserid, 1);
            _os.write(strExtInfo, 2);
            _os.write(strContent, 3);
            _os.write(stImgUrls, 4);
            _os.write(timestamp, 5);
            _os.write(strTitle, 6);
            _os.write(modifyflag, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(importmsgid, 0, true);
            _is.read(vuserid, 1, true);
            _is.read(strExtInfo, 2, false);
            _is.read(strContent, 3, false);
            _is.read(stImgUrls, 4, false);
            _is.read(timestamp, 5, false);
            _is.read(strTitle, 6, false);
            _is.read(modifyflag, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(importmsgid,"importmsgid");
            _ds.display(vuserid,"vuserid");
            _ds.display(strExtInfo,"strExtInfo");
            _ds.display(strContent,"strContent");
            _ds.display(stImgUrls,"stImgUrls");
            _ds.display(timestamp,"timestamp");
            _ds.display(strTitle,"strTitle");
            _ds.display(modifyflag,"modifyflag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(importmsgid, true);
            _ds.displaySimple(vuserid, true);
            _ds.displaySimple(strExtInfo, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(stImgUrls, true);
            _ds.displaySimple(timestamp, true);
            _ds.displaySimple(strTitle, true);
            _ds.displaySimple(modifyflag, false);
            return _os;
        }
    public:
        taf::Int64 importmsgid;
        taf::Int64 vuserid;
        std::string strExtInfo;
        std::string strContent;
        vector<videocircle::PlayImgUrl> stImgUrls;
        taf::Int64 timestamp;
        std::string strTitle;
        taf::Int32 modifyflag;
    };
    inline bool operator==(const MsgImportReq&l, const MsgImportReq&r)
    {
        return l.importmsgid == r.importmsgid && l.vuserid == r.vuserid && l.strExtInfo == r.strExtInfo && l.strContent == r.strContent && l.stImgUrls == r.stImgUrls && l.timestamp == r.timestamp && l.strTitle == r.strTitle && l.modifyflag == r.modifyflag;
    }
    inline bool operator!=(const MsgImportReq&l, const MsgImportReq&r)
    {
        return !(l == r);
    }

    struct MsgImportRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.MsgImportRsp";
        }
        static string MD5()
        {
            return "0524ab3df2cc4ec56d33931cbe05154e";
        }
        MsgImportRsp()
        :result(0),strErrMsg(""),strExtInfo("")
        {
        }
        void resetDefautlt()
        {
            result = 0;
            strErrMsg = "";
            strExtInfo = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(result, 0);
            _os.write(strErrMsg, 1);
            _os.write(stBasicInfo1, 2);
            _os.write(strExtInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(result, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(stBasicInfo1, 2, false);
            _is.read(strExtInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(result,"result");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stBasicInfo1,"stBasicInfo1");
            _ds.display(strExtInfo,"strExtInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(result, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stBasicInfo1, true);
            _ds.displaySimple(strExtInfo, false);
            return _os;
        }
    public:
        taf::UInt8 result;
        std::string strErrMsg;
        videocircle::BasicInfo1 stBasicInfo1;
        std::string strExtInfo;
    };
    inline bool operator==(const MsgImportRsp&l, const MsgImportRsp&r)
    {
        return l.result == r.result && l.strErrMsg == r.strErrMsg && l.stBasicInfo1 == r.stBasicInfo1 && l.strExtInfo == r.strExtInfo;
    }
    inline bool operator!=(const MsgImportRsp&l, const MsgImportRsp&r)
    {
        return !(l == r);
    }

    struct MsgDeleteReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.MsgDeleteReq";
        }
        static string MD5()
        {
            return "27a952e7888885d53794114c0f8d5c13";
        }
        MsgDeleteReq()
        :deletemsgid(0),vuserid(0),strExtInfo(""),report("")
        {
        }
        void resetDefautlt()
        {
            deletemsgid = 0;
            vuserid = 0;
            strExtInfo = "";
            report = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(deletemsgid, 0);
            _os.write(vuserid, 1);
            _os.write(strExtInfo, 2);
            _os.write(report, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(deletemsgid, 0, true);
            _is.read(vuserid, 1, true);
            _is.read(strExtInfo, 2, false);
            _is.read(report, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(deletemsgid,"deletemsgid");
            _ds.display(vuserid,"vuserid");
            _ds.display(strExtInfo,"strExtInfo");
            _ds.display(report,"report");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(deletemsgid, true);
            _ds.displaySimple(vuserid, true);
            _ds.displaySimple(strExtInfo, true);
            _ds.displaySimple(report, false);
            return _os;
        }
    public:
        taf::Int64 deletemsgid;
        taf::Int64 vuserid;
        std::string strExtInfo;
        std::string report;
    };
    inline bool operator==(const MsgDeleteReq&l, const MsgDeleteReq&r)
    {
        return l.deletemsgid == r.deletemsgid && l.vuserid == r.vuserid && l.strExtInfo == r.strExtInfo && l.report == r.report;
    }
    inline bool operator!=(const MsgDeleteReq&l, const MsgDeleteReq&r)
    {
        return !(l == r);
    }

    struct MsgDeleteRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.MsgDeleteRsp";
        }
        static string MD5()
        {
            return "00cde80ef4e162570424c6a16c63f20b";
        }
        MsgDeleteRsp()
        :result(0),strErrMsg(""),strContent(""),strExtInfo("")
        {
        }
        void resetDefautlt()
        {
            result = 0;
            strErrMsg = "";
            strContent = "";
            strExtInfo = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(result, 0);
            _os.write(strErrMsg, 1);
            _os.write(stBasicInfo1, 2);
            _os.write(strContent, 3);
            _os.write(strExtInfo, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(result, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(stBasicInfo1, 2, false);
            _is.read(strContent, 3, true);
            _is.read(strExtInfo, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(result,"result");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stBasicInfo1,"stBasicInfo1");
            _ds.display(strContent,"strContent");
            _ds.display(strExtInfo,"strExtInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(result, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stBasicInfo1, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(strExtInfo, false);
            return _os;
        }
    public:
        taf::UInt8 result;
        std::string strErrMsg;
        videocircle::BasicInfo1 stBasicInfo1;
        std::string strContent;
        std::string strExtInfo;
    };
    inline bool operator==(const MsgDeleteRsp&l, const MsgDeleteRsp&r)
    {
        return l.result == r.result && l.strErrMsg == r.strErrMsg && l.stBasicInfo1 == r.stBasicInfo1 && l.strContent == r.strContent && l.strExtInfo == r.strExtInfo;
    }
    inline bool operator!=(const MsgDeleteRsp&l, const MsgDeleteRsp&r)
    {
        return !(l == r);
    }

    struct PubBackOperationMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.PubBackOperationMsgReq";
        }
        static string MD5()
        {
            return "9ea8e77268776e9f6bca54cae61cb490";
        }
        PubBackOperationMsgReq()
        :dwUserID(0),cType(0),strContent(""),report("")
        {
        }
        void resetDefautlt()
        {
            dwUserID = 0;
            cType = 0;
            strContent = "";
            report = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwUserID, 0);
            _os.write(cType, 1);
            _os.write(strContent, 2);
            _os.write(stImgUrls, 3);
            _os.write(stVidInfo, 4);
            _os.write(stParentInfo, 5);
            _os.write(report, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwUserID, 0, true);
            _is.read(cType, 1, true);
            _is.read(strContent, 2, false);
            _is.read(stImgUrls, 3, false);
            _is.read(stVidInfo, 4, false);
            _is.read(stParentInfo, 5, false);
            _is.read(report, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwUserID,"dwUserID");
            _ds.display(cType,"cType");
            _ds.display(strContent,"strContent");
            _ds.display(stImgUrls,"stImgUrls");
            _ds.display(stVidInfo,"stVidInfo");
            _ds.display(stParentInfo,"stParentInfo");
            _ds.display(report,"report");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwUserID, true);
            _ds.displaySimple(cType, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(stImgUrls, true);
            _ds.displaySimple(stVidInfo, true);
            _ds.displaySimple(stParentInfo, true);
            _ds.displaySimple(report, false);
            return _os;
        }
    public:
        taf::Int64 dwUserID;
        taf::Char cType;
        std::string strContent;
        vector<videocircle::PlayImgUrl> stImgUrls;
        videocircle::VidInfo stVidInfo;
        videocircle::ParentInfo stParentInfo;
        std::string report;
    };
    inline bool operator==(const PubBackOperationMsgReq&l, const PubBackOperationMsgReq&r)
    {
        return l.dwUserID == r.dwUserID && l.cType == r.cType && l.strContent == r.strContent && l.stImgUrls == r.stImgUrls && l.stVidInfo == r.stVidInfo && l.stParentInfo == r.stParentInfo && l.report == r.report;
    }
    inline bool operator!=(const PubBackOperationMsgReq&l, const PubBackOperationMsgReq&r)
    {
        return !(l == r);
    }

    struct PubBackOperationMsgRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.PubBackOperationMsgRsp";
        }
        static string MD5()
        {
            return "0524ab3df2cc4ec56d33931cbe05154e";
        }
        PubBackOperationMsgRsp()
        :result(0),strErrMsg(""),strContent("")
        {
        }
        void resetDefautlt()
        {
            result = 0;
            strErrMsg = "";
            strContent = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(result, 0);
            _os.write(strErrMsg, 1);
            _os.write(stBasicInfo1, 2);
            _os.write(strContent, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(result, 0, true);
            _is.read(strErrMsg, 1, false);
            _is.read(stBasicInfo1, 2, false);
            _is.read(strContent, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(result,"result");
            _ds.display(strErrMsg,"strErrMsg");
            _ds.display(stBasicInfo1,"stBasicInfo1");
            _ds.display(strContent,"strContent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(result, true);
            _ds.displaySimple(strErrMsg, true);
            _ds.displaySimple(stBasicInfo1, true);
            _ds.displaySimple(strContent, false);
            return _os;
        }
    public:
        taf::UInt8 result;
        std::string strErrMsg;
        videocircle::BasicInfo1 stBasicInfo1;
        std::string strContent;
    };
    inline bool operator==(const PubBackOperationMsgRsp&l, const PubBackOperationMsgRsp&r)
    {
        return l.result == r.result && l.strErrMsg == r.strErrMsg && l.stBasicInfo1 == r.stBasicInfo1 && l.strContent == r.strContent;
    }
    inline bool operator!=(const PubBackOperationMsgRsp&l, const PubBackOperationMsgRsp&r)
    {
        return !(l == r);
    }

    struct LogicPubMsgToInnerRelay : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.LogicPubMsgToInnerRelay";
        }
        static string MD5()
        {
            return "ebe6305d21b22ee973f443cf0f6093f0";
        }
        LogicPubMsgToInnerRelay()
        :strContent(""),strVideoPosterImg(""),syncFromFlag(0),scene(0),isCutContent(0)
        {
        }
        void resetDefautlt()
        {
            strContent = "";
            strVideoPosterImg = "";
            syncFromFlag = 0;
            scene = 0;
            isCutContent = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stBasicInfo1, 1);
            _os.write(stImgUrls, 2);
            _os.write(stVidInfo, 3);
            _os.write(stAppExtInfo, 4);
            _os.write(strContent, 5);
            _os.write(videoList, 6);
            _os.write(strVideoPosterImg, 7);
            _os.write(stFtBasicInfo, 8);
            _os.write(syncFromFlag, 9);
            _os.write(stVoiceInfo, 10);
            _os.write(stUserInfo, 11);
            _os.write(stDmInfo, 12);
            _os.write(stSnsInfo, 13);
            _os.write(vecTopicInfo, 14);
            _os.write(scene, 15);
            _os.write(vecFanInfo, 16);
            _os.write(stGoodScore, 17);
            _os.write(stLongVideoInfo, 18);
            _os.write(stMgrInfo, 19);
            _os.write(isCutContent, 20);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stBasicInfo1, 1, true);
            _is.read(stImgUrls, 2, false);
            _is.read(stVidInfo, 3, true);
            _is.read(stAppExtInfo, 4, false);
            _is.read(strContent, 5, true);
            _is.read(videoList, 6, false);
            _is.read(strVideoPosterImg, 7, false);
            _is.read(stFtBasicInfo, 8, false);
            _is.read(syncFromFlag, 9, false);
            _is.read(stVoiceInfo, 10, false);
            _is.read(stUserInfo, 11, false);
            _is.read(stDmInfo, 12, false);
            _is.read(stSnsInfo, 13, false);
            _is.read(vecTopicInfo, 14, false);
            _is.read(scene, 15, false);
            _is.read(vecFanInfo, 16, false);
            _is.read(stGoodScore, 17, false);
            _is.read(stLongVideoInfo, 18, false);
            _is.read(stMgrInfo, 19, false);
            _is.read(isCutContent, 20, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stBasicInfo1,"stBasicInfo1");
            _ds.display(stImgUrls,"stImgUrls");
            _ds.display(stVidInfo,"stVidInfo");
            _ds.display(stAppExtInfo,"stAppExtInfo");
            _ds.display(strContent,"strContent");
            _ds.display(videoList,"videoList");
            _ds.display(strVideoPosterImg,"strVideoPosterImg");
            _ds.display(stFtBasicInfo,"stFtBasicInfo");
            _ds.display(syncFromFlag,"syncFromFlag");
            _ds.display(stVoiceInfo,"stVoiceInfo");
            _ds.display(stUserInfo,"stUserInfo");
            _ds.display(stDmInfo,"stDmInfo");
            _ds.display(stSnsInfo,"stSnsInfo");
            _ds.display(vecTopicInfo,"vecTopicInfo");
            _ds.display(scene,"scene");
            _ds.display(vecFanInfo,"vecFanInfo");
            _ds.display(stGoodScore,"stGoodScore");
            _ds.display(stLongVideoInfo,"stLongVideoInfo");
            _ds.display(stMgrInfo,"stMgrInfo");
            _ds.display(isCutContent,"isCutContent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stBasicInfo1, true);
            _ds.displaySimple(stImgUrls, true);
            _ds.displaySimple(stVidInfo, true);
            _ds.displaySimple(stAppExtInfo, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(videoList, true);
            _ds.displaySimple(strVideoPosterImg, true);
            _ds.displaySimple(stFtBasicInfo, true);
            _ds.displaySimple(syncFromFlag, true);
            _ds.displaySimple(stVoiceInfo, true);
            _ds.displaySimple(stUserInfo, true);
            _ds.displaySimple(stDmInfo, true);
            _ds.displaySimple(stSnsInfo, true);
            _ds.displaySimple(vecTopicInfo, true);
            _ds.displaySimple(scene, true);
            _ds.displaySimple(vecFanInfo, true);
            _ds.displaySimple(stGoodScore, true);
            _ds.displaySimple(stLongVideoInfo, true);
            _ds.displaySimple(stMgrInfo, true);
            _ds.displaySimple(isCutContent, false);
            return _os;
        }
    public:
        videocircle::BasicInfo1 stBasicInfo1;
        vector<videocircle::PlayImgUrl> stImgUrls;
        videocircle::VidInfo stVidInfo;
        videocircle::AppExtInfo stAppExtInfo;
        std::string strContent;
        vector<videocircle::CircleShortVideoUrl> videoList;
        std::string strVideoPosterImg;
        videocircle::FtBasicInfo stFtBasicInfo;
        taf::UInt32 syncFromFlag;
        videocircle::VoiceInfo stVoiceInfo;
        videocircle::UserInfo stUserInfo;
        videocircle::DanmuInfo stDmInfo;
        videocircle::SnsInfo stSnsInfo;
        vector<videocircle::TopicInfo> vecTopicInfo;
        taf::Int32 scene;
        vector<videocircle::FanInfo> vecFanInfo;
        videocircle::GoodScoreInfo stGoodScore;
        vector<videocircle::VidInfo> stLongVideoInfo;
        videocircle::MgrInfo stMgrInfo;
        taf::UInt8 isCutContent;
    };
    inline bool operator==(const LogicPubMsgToInnerRelay&l, const LogicPubMsgToInnerRelay&r)
    {
        return l.stBasicInfo1 == r.stBasicInfo1 && l.stImgUrls == r.stImgUrls && l.stVidInfo == r.stVidInfo && l.stAppExtInfo == r.stAppExtInfo && l.strContent == r.strContent && l.videoList == r.videoList && l.strVideoPosterImg == r.strVideoPosterImg && l.stFtBasicInfo == r.stFtBasicInfo && l.syncFromFlag == r.syncFromFlag && l.stVoiceInfo == r.stVoiceInfo && l.stUserInfo == r.stUserInfo && l.stDmInfo == r.stDmInfo && l.stSnsInfo == r.stSnsInfo && l.vecTopicInfo == r.vecTopicInfo && l.scene == r.scene && l.vecFanInfo == r.vecFanInfo && l.stGoodScore == r.stGoodScore && l.stLongVideoInfo == r.stLongVideoInfo && l.stMgrInfo == r.stMgrInfo && l.isCutContent == r.isCutContent;
    }
    inline bool operator!=(const LogicPubMsgToInnerRelay&l, const LogicPubMsgToInnerRelay&r)
    {
        return !(l == r);
    }

    struct LogicVidLikeToInnerRelay : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.LogicVidLikeToInnerRelay";
        }
        static string MD5()
        {
            return "af60953137614b6d7efada71de4ead44";
        }
        LogicVidLikeToInnerRelay()
        :dwUserID(0),cLikeValue(0),dwTime(0),strRootVideoPosterImg(""),syncFromFlag(0)
        {
        }
        void resetDefautlt()
        {
            dwUserID = 0;
            cLikeValue = 0;
            dwTime = 0;
            strRootVideoPosterImg = "";
            syncFromFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dwUserID, 1);
            _os.write(cLikeValue, 2);
            _os.write(dwTime, 3);
            _os.write(stVidInfo, 4);
            _os.write(stRootBasicInfo1, 11);
            _os.write(strRootVideoPosterImg, 12);
            _os.write(videoList, 13);
            _os.write(stFtBasicInfo, 14);
            _os.write(syncFromFlag, 15);
            _os.write(stParentDmInfo, 16);
            _os.write(stParentUserInfo, 17);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dwUserID, 1, true);
            _is.read(cLikeValue, 2, true);
            _is.read(dwTime, 3, true);
            _is.read(stVidInfo, 4, true);
            _is.read(stRootBasicInfo1, 11, false);
            _is.read(strRootVideoPosterImg, 12, false);
            _is.read(videoList, 13, false);
            _is.read(stFtBasicInfo, 14, false);
            _is.read(syncFromFlag, 15, false);
            _is.read(stParentDmInfo, 16, false);
            _is.read(stParentUserInfo, 17, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dwUserID,"dwUserID");
            _ds.display(cLikeValue,"cLikeValue");
            _ds.display(dwTime,"dwTime");
            _ds.display(stVidInfo,"stVidInfo");
            _ds.display(stRootBasicInfo1,"stRootBasicInfo1");
            _ds.display(strRootVideoPosterImg,"strRootVideoPosterImg");
            _ds.display(videoList,"videoList");
            _ds.display(stFtBasicInfo,"stFtBasicInfo");
            _ds.display(syncFromFlag,"syncFromFlag");
            _ds.display(stParentDmInfo,"stParentDmInfo");
            _ds.display(stParentUserInfo,"stParentUserInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dwUserID, true);
            _ds.displaySimple(cLikeValue, true);
            _ds.displaySimple(dwTime, true);
            _ds.displaySimple(stVidInfo, true);
            _ds.displaySimple(stRootBasicInfo1, true);
            _ds.displaySimple(strRootVideoPosterImg, true);
            _ds.displaySimple(videoList, true);
            _ds.displaySimple(stFtBasicInfo, true);
            _ds.displaySimple(syncFromFlag, true);
            _ds.displaySimple(stParentDmInfo, true);
            _ds.displaySimple(stParentUserInfo, false);
            return _os;
        }
    public:
        taf::Int64 dwUserID;
        taf::UInt8 cLikeValue;
        taf::UInt32 dwTime;
        videocircle::VidInfo stVidInfo;
        videocircle::BasicInfo1 stRootBasicInfo1;
        std::string strRootVideoPosterImg;
        vector<videocircle::CircleShortVideoUrl> videoList;
        videocircle::FtBasicInfo stFtBasicInfo;
        taf::UInt32 syncFromFlag;
        videocircle::DanmuInfo stParentDmInfo;
        videocircle::UserInfo stParentUserInfo;
    };
    inline bool operator==(const LogicVidLikeToInnerRelay&l, const LogicVidLikeToInnerRelay&r)
    {
        return l.dwUserID == r.dwUserID && l.cLikeValue == r.cLikeValue && l.dwTime == r.dwTime && l.stVidInfo == r.stVidInfo && l.stRootBasicInfo1 == r.stRootBasicInfo1 && l.strRootVideoPosterImg == r.strRootVideoPosterImg && l.videoList == r.videoList && l.stFtBasicInfo == r.stFtBasicInfo && l.syncFromFlag == r.syncFromFlag && l.stParentDmInfo == r.stParentDmInfo && l.stParentUserInfo == r.stParentUserInfo;
    }
    inline bool operator!=(const LogicVidLikeToInnerRelay&l, const LogicVidLikeToInnerRelay&r)
    {
        return !(l == r);
    }

    struct OneMsgInfoToInnerRelay : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.OneMsgInfoToInnerRelay";
        }
        static string MD5()
        {
            return "191ea472ff77da55a6682fb11b9dc3cb";
        }
        OneMsgInfoToInnerRelay()
        :strContent(""),syncFromFlag(0)
        {
        }
        void resetDefautlt()
        {
            strContent = "";
            syncFromFlag = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stImgUrls, 1);
            _os.write(strContent, 2);
            _os.write(stVidInfo, 3);
            _os.write(vecTopicInfo, 4);
            _os.write(vecFanInfo, 5);
            _os.write(syncFromFlag, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stImgUrls, 1, false);
            _is.read(strContent, 2, false);
            _is.read(stVidInfo, 3, false);
            _is.read(vecTopicInfo, 4, false);
            _is.read(vecFanInfo, 5, false);
            _is.read(syncFromFlag, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stImgUrls,"stImgUrls");
            _ds.display(strContent,"strContent");
            _ds.display(stVidInfo,"stVidInfo");
            _ds.display(vecTopicInfo,"vecTopicInfo");
            _ds.display(vecFanInfo,"vecFanInfo");
            _ds.display(syncFromFlag,"syncFromFlag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stImgUrls, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(stVidInfo, true);
            _ds.displaySimple(vecTopicInfo, true);
            _ds.displaySimple(vecFanInfo, true);
            _ds.displaySimple(syncFromFlag, false);
            return _os;
        }
    public:
        vector<videocircle::PlayImgUrl> stImgUrls;
        std::string strContent;
        videocircle::VidInfo stVidInfo;
        vector<videocircle::TopicInfo> vecTopicInfo;
        vector<videocircle::FanInfo> vecFanInfo;
        taf::Int32 syncFromFlag;
    };
    inline bool operator==(const OneMsgInfoToInnerRelay&l, const OneMsgInfoToInnerRelay&r)
    {
        return l.stImgUrls == r.stImgUrls && l.strContent == r.strContent && l.stVidInfo == r.stVidInfo && l.vecTopicInfo == r.vecTopicInfo && l.vecFanInfo == r.vecFanInfo && l.syncFromFlag == r.syncFromFlag;
    }
    inline bool operator!=(const OneMsgInfoToInnerRelay&l, const OneMsgInfoToInnerRelay&r)
    {
        return !(l == r);
    }

    struct LogicMsgCommentToInnerRelay : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.LogicMsgCommentToInnerRelay";
        }
        static string MD5()
        {
            return "6d504f7494ad9d5b928b6dee4468acf7";
        }
        LogicMsgCommentToInnerRelay()
        :strCommentContent(""),strParentContent(""),strRootVideoPosterImg(""),syncFromFlag(0),rootscene(0)
        {
        }
        void resetDefautlt()
        {
            strCommentContent = "";
            strParentContent = "";
            strRootVideoPosterImg = "";
            syncFromFlag = 0;
            rootscene = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stBasicInfo1, 1);
            _os.write(stImgUrls, 2);
            _os.write(stParentInfo, 3);
            _os.write(strCommentContent, 4);
            _os.write(stMsgLikeReq, 5);
            _os.write(stParentImgUrls, 6);
            _os.write(strParentContent, 7);
            _os.write(stParentMsg, 8);
            _os.write(stRootMsg, 9);
            _os.write(arrFriendsUin, 10);
            _os.write(stRootBasicInfo1, 11);
            _os.write(strRootVideoPosterImg, 12);
            _os.write(videoList, 13);
            _os.write(stFtBasicInfo, 14);
            _os.write(syncFromFlag, 15);
            _os.write(stVoiceInfo, 16);
            _os.write(stUserInfo, 17);
            _os.write(stParentDmInfo, 18);
            _os.write(stParentUserInfo, 19);
            _os.write(rootscene, 20);
            _os.write(stGoodScore, 21);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stBasicInfo1, 1, true);
            _is.read(stImgUrls, 2, false);
            _is.read(stParentInfo, 3, false);
            _is.read(strCommentContent, 4, false);
            _is.read(stMsgLikeReq, 5, false);
            _is.read(stParentImgUrls, 6, false);
            _is.read(strParentContent, 7, false);
            _is.read(stParentMsg, 8, false);
            _is.read(stRootMsg, 9, false);
            _is.read(arrFriendsUin, 10, false);
            _is.read(stRootBasicInfo1, 11, false);
            _is.read(strRootVideoPosterImg, 12, false);
            _is.read(videoList, 13, false);
            _is.read(stFtBasicInfo, 14, false);
            _is.read(syncFromFlag, 15, false);
            _is.read(stVoiceInfo, 16, false);
            _is.read(stUserInfo, 17, false);
            _is.read(stParentDmInfo, 18, false);
            _is.read(stParentUserInfo, 19, false);
            _is.read(rootscene, 20, false);
            _is.read(stGoodScore, 21, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stBasicInfo1,"stBasicInfo1");
            _ds.display(stImgUrls,"stImgUrls");
            _ds.display(stParentInfo,"stParentInfo");
            _ds.display(strCommentContent,"strCommentContent");
            _ds.display(stMsgLikeReq,"stMsgLikeReq");
            _ds.display(stParentImgUrls,"stParentImgUrls");
            _ds.display(strParentContent,"strParentContent");
            _ds.display(stParentMsg,"stParentMsg");
            _ds.display(stRootMsg,"stRootMsg");
            _ds.display(arrFriendsUin,"arrFriendsUin");
            _ds.display(stRootBasicInfo1,"stRootBasicInfo1");
            _ds.display(strRootVideoPosterImg,"strRootVideoPosterImg");
            _ds.display(videoList,"videoList");
            _ds.display(stFtBasicInfo,"stFtBasicInfo");
            _ds.display(syncFromFlag,"syncFromFlag");
            _ds.display(stVoiceInfo,"stVoiceInfo");
            _ds.display(stUserInfo,"stUserInfo");
            _ds.display(stParentDmInfo,"stParentDmInfo");
            _ds.display(stParentUserInfo,"stParentUserInfo");
            _ds.display(rootscene,"rootscene");
            _ds.display(stGoodScore,"stGoodScore");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stBasicInfo1, true);
            _ds.displaySimple(stImgUrls, true);
            _ds.displaySimple(stParentInfo, true);
            _ds.displaySimple(strCommentContent, true);
            _ds.displaySimple(stMsgLikeReq, true);
            _ds.displaySimple(stParentImgUrls, true);
            _ds.displaySimple(strParentContent, true);
            _ds.displaySimple(stParentMsg, true);
            _ds.displaySimple(stRootMsg, true);
            _ds.displaySimple(arrFriendsUin, true);
            _ds.displaySimple(stRootBasicInfo1, true);
            _ds.displaySimple(strRootVideoPosterImg, true);
            _ds.displaySimple(videoList, true);
            _ds.displaySimple(stFtBasicInfo, true);
            _ds.displaySimple(syncFromFlag, true);
            _ds.displaySimple(stVoiceInfo, true);
            _ds.displaySimple(stUserInfo, true);
            _ds.displaySimple(stParentDmInfo, true);
            _ds.displaySimple(stParentUserInfo, true);
            _ds.displaySimple(rootscene, true);
            _ds.displaySimple(stGoodScore, false);
            return _os;
        }
    public:
        videocircle::BasicInfo1 stBasicInfo1;
        vector<videocircle::PlayImgUrl> stImgUrls;
        videocircle::ParentInfo stParentInfo;
        std::string strCommentContent;
        videocircle::MsgLikeReq stMsgLikeReq;
        vector<videocircle::PlayImgUrl> stParentImgUrls;
        std::string strParentContent;
        videocircle::OneMsgInfoToInnerRelay stParentMsg;
        videocircle::OneMsgInfoToInnerRelay stRootMsg;
        vector<taf::Int64> arrFriendsUin;
        videocircle::BasicInfo1 stRootBasicInfo1;
        std::string strRootVideoPosterImg;
        vector<videocircle::CircleShortVideoUrl> videoList;
        videocircle::FtBasicInfo stFtBasicInfo;
        taf::UInt32 syncFromFlag;
        videocircle::VoiceInfo stVoiceInfo;
        videocircle::UserInfo stUserInfo;
        videocircle::DanmuInfo stParentDmInfo;
        videocircle::UserInfo stParentUserInfo;
        taf::Int32 rootscene;
        videocircle::GoodScoreInfo stGoodScore;
    };
    inline bool operator==(const LogicMsgCommentToInnerRelay&l, const LogicMsgCommentToInnerRelay&r)
    {
        return l.stBasicInfo1 == r.stBasicInfo1 && l.stImgUrls == r.stImgUrls && l.stParentInfo == r.stParentInfo && l.strCommentContent == r.strCommentContent && l.stMsgLikeReq == r.stMsgLikeReq && l.stParentImgUrls == r.stParentImgUrls && l.strParentContent == r.strParentContent && l.stParentMsg == r.stParentMsg && l.stRootMsg == r.stRootMsg && l.arrFriendsUin == r.arrFriendsUin && l.stRootBasicInfo1 == r.stRootBasicInfo1 && l.strRootVideoPosterImg == r.strRootVideoPosterImg && l.videoList == r.videoList && l.stFtBasicInfo == r.stFtBasicInfo && l.syncFromFlag == r.syncFromFlag && l.stVoiceInfo == r.stVoiceInfo && l.stUserInfo == r.stUserInfo && l.stParentDmInfo == r.stParentDmInfo && l.stParentUserInfo == r.stParentUserInfo && l.rootscene == r.rootscene && l.stGoodScore == r.stGoodScore;
    }
    inline bool operator!=(const LogicMsgCommentToInnerRelay&l, const LogicMsgCommentToInnerRelay&r)
    {
        return !(l == r);
    }

    struct LogicModifyMsgToInnerRelay : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.LogicModifyMsgToInnerRelay";
        }
        static string MD5()
        {
            return "6071bfbfb0e7c5249860084dbaa99a37";
        }
        LogicModifyMsgToInnerRelay()
        :vuserid(0),strContent(""),cModifyBeforeStatus(0),dwModifyTime(0),syncFromFlag(0),scene(0),commentId(0),rootscene(0)
        {
        }
        void resetDefautlt()
        {
            vuserid = 0;
            strContent = "";
            cModifyBeforeStatus = 0;
            dwModifyTime = 0;
            syncFromFlag = 0;
            scene = 0;
            commentId = 0;
            rootscene = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vuserid, 0);
            _os.write(stBasicInfo1, 1);
            _os.write(stImgUrls, 2);
            _os.write(stVidInfo, 3);
            _os.write(stAppExtInfo, 4);
            _os.write(stParentInfo, 5);
            _os.write(strContent, 6);
            _os.write(cModifyBeforeStatus, 7);
            _os.write(dwModifyTime, 8);
            _os.write(stRootBasicInfo1, 9);
            _os.write(stRootMsg, 10);
            _os.write(stFtBasicInfo, 11);
            _os.write(syncFromFlag, 12);
            _os.write(stParentDmInfo, 15);
            _os.write(stParentUserInfo, 16);
            _os.write(stUserInfo, 17);
            _os.write(stDmInfo, 18);
            _os.write(vecTopicInfo, 19);
            _os.write(scene, 20);
            _os.write(stGoodScore, 21);
            _os.write(commentId, 22);
            _os.write(rootscene, 23);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vuserid, 0, true);
            _is.read(stBasicInfo1, 1, true);
            _is.read(stImgUrls, 2, false);
            _is.read(stVidInfo, 3, false);
            _is.read(stAppExtInfo, 4, false);
            _is.read(stParentInfo, 5, false);
            _is.read(strContent, 6, false);
            _is.read(cModifyBeforeStatus, 7, false);
            _is.read(dwModifyTime, 8, false);
            _is.read(stRootBasicInfo1, 9, false);
            _is.read(stRootMsg, 10, false);
            _is.read(stFtBasicInfo, 11, false);
            _is.read(syncFromFlag, 12, false);
            _is.read(stParentDmInfo, 15, false);
            _is.read(stParentUserInfo, 16, false);
            _is.read(stUserInfo, 17, false);
            _is.read(stDmInfo, 18, false);
            _is.read(vecTopicInfo, 19, false);
            _is.read(scene, 20, false);
            _is.read(stGoodScore, 21, false);
            _is.read(commentId, 22, false);
            _is.read(rootscene, 23, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vuserid,"vuserid");
            _ds.display(stBasicInfo1,"stBasicInfo1");
            _ds.display(stImgUrls,"stImgUrls");
            _ds.display(stVidInfo,"stVidInfo");
            _ds.display(stAppExtInfo,"stAppExtInfo");
            _ds.display(stParentInfo,"stParentInfo");
            _ds.display(strContent,"strContent");
            _ds.display(cModifyBeforeStatus,"cModifyBeforeStatus");
            _ds.display(dwModifyTime,"dwModifyTime");
            _ds.display(stRootBasicInfo1,"stRootBasicInfo1");
            _ds.display(stRootMsg,"stRootMsg");
            _ds.display(stFtBasicInfo,"stFtBasicInfo");
            _ds.display(syncFromFlag,"syncFromFlag");
            _ds.display(stParentDmInfo,"stParentDmInfo");
            _ds.display(stParentUserInfo,"stParentUserInfo");
            _ds.display(stUserInfo,"stUserInfo");
            _ds.display(stDmInfo,"stDmInfo");
            _ds.display(vecTopicInfo,"vecTopicInfo");
            _ds.display(scene,"scene");
            _ds.display(stGoodScore,"stGoodScore");
            _ds.display(commentId,"commentId");
            _ds.display(rootscene,"rootscene");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vuserid, true);
            _ds.displaySimple(stBasicInfo1, true);
            _ds.displaySimple(stImgUrls, true);
            _ds.displaySimple(stVidInfo, true);
            _ds.displaySimple(stAppExtInfo, true);
            _ds.displaySimple(stParentInfo, true);
            _ds.displaySimple(strContent, true);
            _ds.displaySimple(cModifyBeforeStatus, true);
            _ds.displaySimple(dwModifyTime, true);
            _ds.displaySimple(stRootBasicInfo1, true);
            _ds.displaySimple(stRootMsg, true);
            _ds.displaySimple(stFtBasicInfo, true);
            _ds.displaySimple(syncFromFlag, true);
            _ds.displaySimple(stParentDmInfo, true);
            _ds.displaySimple(stParentUserInfo, true);
            _ds.displaySimple(stUserInfo, true);
            _ds.displaySimple(stDmInfo, true);
            _ds.displaySimple(vecTopicInfo, true);
            _ds.displaySimple(scene, true);
            _ds.displaySimple(stGoodScore, true);
            _ds.displaySimple(commentId, true);
            _ds.displaySimple(rootscene, false);
            return _os;
        }
    public:
        taf::Int64 vuserid;
        videocircle::BasicInfo1 stBasicInfo1;
        vector<videocircle::PlayImgUrl> stImgUrls;
        videocircle::VidInfo stVidInfo;
        videocircle::AppExtInfo stAppExtInfo;
        videocircle::ParentInfo stParentInfo;
        std::string strContent;
        taf::UInt8 cModifyBeforeStatus;
        taf::UInt32 dwModifyTime;
        videocircle::BasicInfo1 stRootBasicInfo1;
        videocircle::OneMsgInfoToInnerRelay stRootMsg;
        videocircle::FtBasicInfo stFtBasicInfo;
        taf::UInt32 syncFromFlag;
        videocircle::DanmuInfo stParentDmInfo;
        videocircle::UserInfo stParentUserInfo;
        videocircle::UserInfo stUserInfo;
        videocircle::DanmuInfo stDmInfo;
        vector<videocircle::TopicInfo> vecTopicInfo;
        taf::Int32 scene;
        videocircle::GoodScoreInfo stGoodScore;
        taf::Int64 commentId;
        taf::Int32 rootscene;
    };
    inline bool operator==(const LogicModifyMsgToInnerRelay&l, const LogicModifyMsgToInnerRelay&r)
    {
        return l.vuserid == r.vuserid && l.stBasicInfo1 == r.stBasicInfo1 && l.stImgUrls == r.stImgUrls && l.stVidInfo == r.stVidInfo && l.stAppExtInfo == r.stAppExtInfo && l.stParentInfo == r.stParentInfo && l.strContent == r.strContent && l.cModifyBeforeStatus == r.cModifyBeforeStatus && l.dwModifyTime == r.dwModifyTime && l.stRootBasicInfo1 == r.stRootBasicInfo1 && l.stRootMsg == r.stRootMsg && l.stFtBasicInfo == r.stFtBasicInfo && l.syncFromFlag == r.syncFromFlag && l.stParentDmInfo == r.stParentDmInfo && l.stParentUserInfo == r.stParentUserInfo && l.stUserInfo == r.stUserInfo && l.stDmInfo == r.stDmInfo && l.vecTopicInfo == r.vecTopicInfo && l.scene == r.scene && l.stGoodScore == r.stGoodScore && l.commentId == r.commentId && l.rootscene == r.rootscene;
    }
    inline bool operator!=(const LogicModifyMsgToInnerRelay&l, const LogicModifyMsgToInnerRelay&r)
    {
        return !(l == r);
    }

    struct AdaptPostMsgToInnerRelay : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "videocircle.AdaptPostMsgToInnerRelay";
        }
        static string MD5()
        {
            return "1051459f8bdb2b06a4100f105fba5f64";
        }
        AdaptPostMsgToInnerRelay()
        :iOptType(0),strTargetid(""),strCommentId(""),strMsgId(""),llPostTime(0)
        {
        }
        void resetDefautlt()
        {
            iOptType = 0;
            strTargetid = "";
            strCommentId = "";
            strMsgId = "";
            llPostTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iOptType, 0);
            _os.write(strTargetid, 1);
            _os.write(strCommentId, 2);
            _os.write(strMsgId, 3);
            _os.write(llPostTime, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iOptType, 0, true);
            _is.read(strTargetid, 1, true);
            _is.read(strCommentId, 2, true);
            _is.read(strMsgId, 3, true);
            _is.read(llPostTime, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iOptType,"iOptType");
            _ds.display(strTargetid,"strTargetid");
            _ds.display(strCommentId,"strCommentId");
            _ds.display(strMsgId,"strMsgId");
            _ds.display(llPostTime,"llPostTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iOptType, true);
            _ds.displaySimple(strTargetid, true);
            _ds.displaySimple(strCommentId, true);
            _ds.displaySimple(strMsgId, true);
            _ds.displaySimple(llPostTime, false);
            return _os;
        }
    public:
        taf::Int32 iOptType;
        std::string strTargetid;
        std::string strCommentId;
        std::string strMsgId;
        taf::Int64 llPostTime;
    };
    inline bool operator==(const AdaptPostMsgToInnerRelay&l, const AdaptPostMsgToInnerRelay&r)
    {
        return l.iOptType == r.iOptType && l.strTargetid == r.strTargetid && l.strCommentId == r.strCommentId && l.strMsgId == r.strMsgId && l.llPostTime == r.llPostTime;
    }
    inline bool operator!=(const AdaptPostMsgToInnerRelay&l, const AdaptPostMsgToInnerRelay&r)
    {
        return !(l == r);
    }


}

#define videocircle_PubMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwUserID,b.dwUserID);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.stImgUrls,b.stImgUrls);jce_copy_struct(a.stVidInfo,b.stVidInfo);jce_copy_struct(a.stAppExtInfo,b.stAppExtInfo);jce_copy_struct(a.report,b.report);jce_copy_struct(a.stVoiceInfo,b.stVoiceInfo);jce_copy_struct(a.stUserInfo,b.stUserInfo);jce_copy_struct(a.stDmInfo,b.stDmInfo);jce_copy_struct(a.stSnsInfo,b.stSnsInfo);jce_copy_struct(a.stVoteInfo,b.stVoteInfo);jce_copy_struct(a.vecRelateFanInfo,b.vecRelateFanInfo);jce_copy_struct(a.stFtExtInfo,b.stFtExtInfo);jce_copy_struct(a.stOMInfo,b.stOMInfo);jce_copy_struct(a.vecTopicInfo,b.vecTopicInfo);jce_copy_struct(a.stMgrInfo,b.stMgrInfo);

#define videocircle_PubMsgRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.result,b.result);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stBasicInfo1,b.stBasicInfo1);jce_copy_struct(a.strContent,b.strContent);

#define videocircle_PubLikeReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwUserID,b.dwUserID);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.stImgUrls,b.stImgUrls);jce_copy_struct(a.stVidInfo,b.stVidInfo);jce_copy_struct(a.stAppExtInfo,b.stAppExtInfo);

#define videocircle_PubLikeRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.result,b.result);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stBasicInfo1,b.stBasicInfo1);jce_copy_struct(a.strContent,b.strContent);

#define videocircle_MsgCommentReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.remsgid,b.remsgid);jce_copy_struct(a.content,b.content);jce_copy_struct(a.stAppExtInfo,b.stAppExtInfo);jce_copy_struct(a.report,b.report);jce_copy_struct(a.stVoiceInfo,b.stVoiceInfo);jce_copy_struct(a.stUserInfo,b.stUserInfo);jce_copy_struct(a.stDmInfo,b.stDmInfo);jce_copy_struct(a.stImgUrls,b.stImgUrls);

#define videocircle_MsgCommentRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.result,b.result);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stBasicInfo1,b.stBasicInfo1);jce_copy_struct(a.strContent,b.strContent);

#define videocircle_MsgLikeReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.remsgid,b.remsgid);jce_copy_struct(a.attitudetype,b.attitudetype);jce_copy_struct(a.goodvalue,b.goodvalue);jce_copy_struct(a.report,b.report);

#define videocircle_MsgLikeRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.result,b.result);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stBasicInfo1,b.stBasicInfo1);

#define videocircle_MsgModifyReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.modifymsgid,b.modifymsgid);jce_copy_struct(a.vuserid,b.vuserid);jce_copy_struct(a.strExtInfo,b.strExtInfo);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.stImgUrls,b.stImgUrls);jce_copy_struct(a.timestamp,b.timestamp);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.modifyflag,b.modifyflag);

#define videocircle_MsgModifyRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.result,b.result);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stBasicInfo1,b.stBasicInfo1);jce_copy_struct(a.strExtInfo,b.strExtInfo);

#define videocircle_MsgImportReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.importmsgid,b.importmsgid);jce_copy_struct(a.vuserid,b.vuserid);jce_copy_struct(a.strExtInfo,b.strExtInfo);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.stImgUrls,b.stImgUrls);jce_copy_struct(a.timestamp,b.timestamp);jce_copy_struct(a.strTitle,b.strTitle);jce_copy_struct(a.modifyflag,b.modifyflag);

#define videocircle_MsgImportRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.result,b.result);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stBasicInfo1,b.stBasicInfo1);jce_copy_struct(a.strExtInfo,b.strExtInfo);

#define videocircle_MsgDeleteReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.deletemsgid,b.deletemsgid);jce_copy_struct(a.vuserid,b.vuserid);jce_copy_struct(a.strExtInfo,b.strExtInfo);jce_copy_struct(a.report,b.report);

#define videocircle_MsgDeleteRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.result,b.result);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stBasicInfo1,b.stBasicInfo1);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.strExtInfo,b.strExtInfo);

#define videocircle_PubBackOperationMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwUserID,b.dwUserID);jce_copy_struct(a.cType,b.cType);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.stImgUrls,b.stImgUrls);jce_copy_struct(a.stVidInfo,b.stVidInfo);jce_copy_struct(a.stParentInfo,b.stParentInfo);jce_copy_struct(a.report,b.report);

#define videocircle_PubBackOperationMsgRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.result,b.result);jce_copy_struct(a.strErrMsg,b.strErrMsg);jce_copy_struct(a.stBasicInfo1,b.stBasicInfo1);jce_copy_struct(a.strContent,b.strContent);

#define videocircle_LogicPubMsgToInnerRelay_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stBasicInfo1,b.stBasicInfo1);jce_copy_struct(a.stImgUrls,b.stImgUrls);jce_copy_struct(a.stVidInfo,b.stVidInfo);jce_copy_struct(a.stAppExtInfo,b.stAppExtInfo);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.videoList,b.videoList);jce_copy_struct(a.strVideoPosterImg,b.strVideoPosterImg);jce_copy_struct(a.stFtBasicInfo,b.stFtBasicInfo);jce_copy_struct(a.syncFromFlag,b.syncFromFlag);jce_copy_struct(a.stVoiceInfo,b.stVoiceInfo);jce_copy_struct(a.stUserInfo,b.stUserInfo);jce_copy_struct(a.stDmInfo,b.stDmInfo);jce_copy_struct(a.stSnsInfo,b.stSnsInfo);jce_copy_struct(a.vecTopicInfo,b.vecTopicInfo);jce_copy_struct(a.scene,b.scene);jce_copy_struct(a.vecFanInfo,b.vecFanInfo);jce_copy_struct(a.stGoodScore,b.stGoodScore);jce_copy_struct(a.stLongVideoInfo,b.stLongVideoInfo);jce_copy_struct(a.stMgrInfo,b.stMgrInfo);jce_copy_struct(a.isCutContent,b.isCutContent);

#define videocircle_LogicVidLikeToInnerRelay_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dwUserID,b.dwUserID);jce_copy_struct(a.cLikeValue,b.cLikeValue);jce_copy_struct(a.dwTime,b.dwTime);jce_copy_struct(a.stVidInfo,b.stVidInfo);jce_copy_struct(a.stRootBasicInfo1,b.stRootBasicInfo1);jce_copy_struct(a.strRootVideoPosterImg,b.strRootVideoPosterImg);jce_copy_struct(a.videoList,b.videoList);jce_copy_struct(a.stFtBasicInfo,b.stFtBasicInfo);jce_copy_struct(a.syncFromFlag,b.syncFromFlag);jce_copy_struct(a.stParentDmInfo,b.stParentDmInfo);jce_copy_struct(a.stParentUserInfo,b.stParentUserInfo);

#define videocircle_OneMsgInfoToInnerRelay_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stImgUrls,b.stImgUrls);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.stVidInfo,b.stVidInfo);jce_copy_struct(a.vecTopicInfo,b.vecTopicInfo);jce_copy_struct(a.vecFanInfo,b.vecFanInfo);jce_copy_struct(a.syncFromFlag,b.syncFromFlag);

#define videocircle_LogicMsgCommentToInnerRelay_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stBasicInfo1,b.stBasicInfo1);jce_copy_struct(a.stImgUrls,b.stImgUrls);jce_copy_struct(a.stParentInfo,b.stParentInfo);jce_copy_struct(a.strCommentContent,b.strCommentContent);jce_copy_struct(a.stMsgLikeReq,b.stMsgLikeReq);jce_copy_struct(a.stParentImgUrls,b.stParentImgUrls);jce_copy_struct(a.strParentContent,b.strParentContent);jce_copy_struct(a.stParentMsg,b.stParentMsg);jce_copy_struct(a.stRootMsg,b.stRootMsg);jce_copy_struct(a.arrFriendsUin,b.arrFriendsUin);jce_copy_struct(a.stRootBasicInfo1,b.stRootBasicInfo1);jce_copy_struct(a.strRootVideoPosterImg,b.strRootVideoPosterImg);jce_copy_struct(a.videoList,b.videoList);jce_copy_struct(a.stFtBasicInfo,b.stFtBasicInfo);jce_copy_struct(a.syncFromFlag,b.syncFromFlag);jce_copy_struct(a.stVoiceInfo,b.stVoiceInfo);jce_copy_struct(a.stUserInfo,b.stUserInfo);jce_copy_struct(a.stParentDmInfo,b.stParentDmInfo);jce_copy_struct(a.stParentUserInfo,b.stParentUserInfo);jce_copy_struct(a.rootscene,b.rootscene);jce_copy_struct(a.stGoodScore,b.stGoodScore);

#define videocircle_LogicModifyMsgToInnerRelay_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vuserid,b.vuserid);jce_copy_struct(a.stBasicInfo1,b.stBasicInfo1);jce_copy_struct(a.stImgUrls,b.stImgUrls);jce_copy_struct(a.stVidInfo,b.stVidInfo);jce_copy_struct(a.stAppExtInfo,b.stAppExtInfo);jce_copy_struct(a.stParentInfo,b.stParentInfo);jce_copy_struct(a.strContent,b.strContent);jce_copy_struct(a.cModifyBeforeStatus,b.cModifyBeforeStatus);jce_copy_struct(a.dwModifyTime,b.dwModifyTime);jce_copy_struct(a.stRootBasicInfo1,b.stRootBasicInfo1);jce_copy_struct(a.stRootMsg,b.stRootMsg);jce_copy_struct(a.stFtBasicInfo,b.stFtBasicInfo);jce_copy_struct(a.syncFromFlag,b.syncFromFlag);jce_copy_struct(a.stParentDmInfo,b.stParentDmInfo);jce_copy_struct(a.stParentUserInfo,b.stParentUserInfo);jce_copy_struct(a.stUserInfo,b.stUserInfo);jce_copy_struct(a.stDmInfo,b.stDmInfo);jce_copy_struct(a.vecTopicInfo,b.vecTopicInfo);jce_copy_struct(a.scene,b.scene);jce_copy_struct(a.stGoodScore,b.stGoodScore);jce_copy_struct(a.commentId,b.commentId);jce_copy_struct(a.rootscene,b.rootscene);

#define videocircle_AdaptPostMsgToInnerRelay_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iOptType,b.iOptType);jce_copy_struct(a.strTargetid,b.strTargetid);jce_copy_struct(a.strCommentId,b.strCommentId);jce_copy_struct(a.strMsgId,b.strMsgId);jce_copy_struct(a.llPostTime,b.llPostTime);



#endif
